--- net/minecraft/network/syncher/SynchedEntityData.java
+++ net/minecraft/network/syncher/SynchedEntityData.java
@@ -2,11 +2,10 @@
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import io.netty.handler.codec.DecoderException;
 import io.netty.handler.codec.EncoderException;
-import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.locks.ReadWriteLock;
@@ -127,11 +126,11 @@
 
    public boolean isDirty() {
       return this.isDirty;
    }
 
-   public static void pack(List<SynchedEntityData.DataItem<?>> var0, FriendlyByteBuf var1) throws IOException {
+   public static void pack(List<SynchedEntityData.DataItem<?>> var0, FriendlyByteBuf var1) {
       if (var0 != null) {
          int var2 = 0;
 
          for(int var3 = var0.size(); var2 < var3; ++var2) {
             writeDataItem(var1, (SynchedEntityData.DataItem)var0.get(var2));
@@ -182,11 +181,11 @@
 
       this.lock.readLock().unlock();
       return var1;
    }
 
-   private static <T> void writeDataItem(FriendlyByteBuf var0, SynchedEntityData.DataItem<T> var1) throws IOException {
+   private static <T> void writeDataItem(FriendlyByteBuf var0, SynchedEntityData.DataItem<T> var1) {
       EntityDataAccessor var2 = var1.getAccessor();
       int var3 = EntityDataSerializers.getSerializedId(var2.getSerializer());
       if (var3 < 0) {
          throw new EncoderException("Unknown serializer type " + var2.getSerializer());
       } else {
@@ -195,11 +194,11 @@
          var2.getSerializer().write(var0, var1.getValue());
       }
    }
 
    @Nullable
-   public static List<SynchedEntityData.DataItem<?>> unpack(FriendlyByteBuf var0) throws IOException {
+   public static List<SynchedEntityData.DataItem<?>> unpack(FriendlyByteBuf var0) {
       ArrayList var1 = null;
 
       short var2;
       while((var2 = var0.readUnsignedByte()) != 255) {
          if (var1 == null) {
