--- net/minecraft/network/syncher/SynchedEntityData.java
+++ net/minecraft/network/syncher/SynchedEntityData.java
@@ -1,16 +1,19 @@
 package net.minecraft.network.syncher;
 
 import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
 import io.netty.handler.codec.DecoderException;
 import io.netty.handler.codec.EncoderException;
-import java.io.IOException;
+import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
+import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
+import it.unimi.dsi.fastutil.objects.Object2IntMap;
+import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
+import it.unimi.dsi.fastutil.objects.ObjectIterator;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
-import java.util.Map;
+import java.util.Objects;
 import java.util.concurrent.locks.ReadWriteLock;
 import java.util.concurrent.locks.ReentrantReadWriteLock;
 import javax.annotation.Nullable;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
@@ -21,13 +24,15 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class SynchedEntityData {
    private static final Logger LOGGER = LogManager.getLogger();
-   private static final Map<Class<? extends Entity>, Integer> ENTITY_ID_POOL = Maps.newHashMap();
+   private static final Object2IntMap<Class<? extends Entity>> ENTITY_ID_POOL = new Object2IntOpenHashMap();
+   private static final int EOF_MARKER = 255;
+   private static final int MAX_ID_VALUE = 254;
    private final Entity entity;
-   private final Map<Integer, SynchedEntityData.DataItem<?>> itemsById = Maps.newHashMap();
+   private final Int2ObjectMap<SynchedEntityData.DataItem<?>> itemsById = new Int2ObjectOpenHashMap();
    private final ReadWriteLock lock = new ReentrantReadWriteLock();
    private boolean isEmpty = true;
    private boolean isDirty;
 
    public SynchedEntityData(Entity var1) {
@@ -45,19 +50,19 @@
          }
       }
 
       int var6;
       if (ENTITY_ID_POOL.containsKey(var0)) {
-         var6 = (Integer)ENTITY_ID_POOL.get(var0) + 1;
+         var6 = ENTITY_ID_POOL.getInt(var0) + 1;
       } else {
          int var3 = 0;
          Class var4 = var0;
 
          while(var4 != Entity.class) {
             var4 = var4.getSuperclass();
             if (ENTITY_ID_POOL.containsKey(var4)) {
-               var3 = (Integer)ENTITY_ID_POOL.get(var4) + 1;
+               var3 = ENTITY_ID_POOL.getInt(var4) + 1;
                break;
             }
          }
 
          var6 = var3;
@@ -127,16 +132,17 @@
 
    public boolean isDirty() {
       return this.isDirty;
    }
 
-   public static void pack(List<SynchedEntityData.DataItem<?>> var0, FriendlyByteBuf var1) throws IOException {
+   public static void pack(@Nullable List<SynchedEntityData.DataItem<?>> var0, FriendlyByteBuf var1) {
       if (var0 != null) {
-         int var2 = 0;
+         Iterator var2 = var0.iterator();
 
-         for(int var3 = var0.size(); var2 < var3; ++var2) {
-            writeDataItem(var1, (SynchedEntityData.DataItem)var0.get(var2));
+         while(var2.hasNext()) {
+            SynchedEntityData.DataItem var3 = (SynchedEntityData.DataItem)var2.next();
+            writeDataItem(var1, var3);
          }
       }
 
       var1.writeByte(255);
    }
@@ -144,11 +150,11 @@
    @Nullable
    public List<SynchedEntityData.DataItem<?>> packDirty() {
       ArrayList var1 = null;
       if (this.isDirty) {
          this.lock.readLock().lock();
-         Iterator var2 = this.itemsById.values().iterator();
+         ObjectIterator var2 = this.itemsById.values().iterator();
 
          while(var2.hasNext()) {
             SynchedEntityData.DataItem var3 = (SynchedEntityData.DataItem)var2.next();
             if (var3.isDirty()) {
                var3.setDirty(false);
@@ -171,22 +177,22 @@
    public List<SynchedEntityData.DataItem<?>> getAll() {
       ArrayList var1 = null;
       this.lock.readLock().lock();
 
       SynchedEntityData.DataItem var3;
-      for(Iterator var2 = this.itemsById.values().iterator(); var2.hasNext(); var1.add(var3.copy())) {
+      for(ObjectIterator var2 = this.itemsById.values().iterator(); var2.hasNext(); var1.add(var3.copy())) {
          var3 = (SynchedEntityData.DataItem)var2.next();
          if (var1 == null) {
             var1 = Lists.newArrayList();
          }
       }
 
       this.lock.readLock().unlock();
       return var1;
    }
 
-   private static <T> void writeDataItem(FriendlyByteBuf var0, SynchedEntityData.DataItem<T> var1) throws IOException {
+   private static <T> void writeDataItem(FriendlyByteBuf var0, SynchedEntityData.DataItem<T> var1) {
       EntityDataAccessor var2 = var1.getAccessor();
       int var3 = EntityDataSerializers.getSerializedId(var2.getSerializer());
       if (var3 < 0) {
          throw new EncoderException("Unknown serializer type " + var2.getSerializer());
       } else {
@@ -195,11 +201,11 @@
          var2.getSerializer().write(var0, var1.getValue());
       }
    }
 
    @Nullable
-   public static List<SynchedEntityData.DataItem<?>> unpack(FriendlyByteBuf var0) throws IOException {
+   public static List<SynchedEntityData.DataItem<?>> unpack(FriendlyByteBuf var0) {
       ArrayList var1 = null;
 
       short var2;
       while((var2 = var0.readUnsignedByte()) != 255) {
          if (var1 == null) {
@@ -220,18 +226,43 @@
 
    private static <T> SynchedEntityData.DataItem<T> genericHelper(FriendlyByteBuf var0, int var1, EntityDataSerializer<T> var2) {
       return new SynchedEntityData.DataItem(var2.createAccessor(var1), var2.read(var0));
    }
 
+   public void assignValues(List<SynchedEntityData.DataItem<?>> var1) {
+      this.lock.writeLock().lock();
+      Iterator var2 = var1.iterator();
+
+      while(var2.hasNext()) {
+         SynchedEntityData.DataItem var3 = (SynchedEntityData.DataItem)var2.next();
+         SynchedEntityData.DataItem var4 = (SynchedEntityData.DataItem)this.itemsById.get(var3.getAccessor().getId());
+         if (var4 != null) {
+            this.assignValue(var4, var3);
+            this.entity.onSyncedDataUpdated(var3.getAccessor());
+         }
+      }
+
+      this.lock.writeLock().unlock();
+      this.isDirty = true;
+   }
+
+   private <T> void assignValue(SynchedEntityData.DataItem<T> var1, SynchedEntityData.DataItem<?> var2) {
+      if (!Objects.equals(var2.accessor.getSerializer(), var1.accessor.getSerializer())) {
+         throw new IllegalStateException(String.format("Invalid entity data item type for field %d on entity %s: old=%s(%s), new=%s(%s)", var1.accessor.getId(), this.entity, var1.value, var1.value.getClass(), var2.value, var2.value.getClass()));
+      } else {
+         var1.setValue(var2.getValue());
+      }
+   }
+
    public boolean isEmpty() {
       return this.isEmpty;
    }
 
    public void clearDirty() {
       this.isDirty = false;
       this.lock.readLock().lock();
-      Iterator var1 = this.itemsById.values().iterator();
+      ObjectIterator var1 = this.itemsById.values().iterator();
 
       while(var1.hasNext()) {
          SynchedEntityData.DataItem var2 = (SynchedEntityData.DataItem)var1.next();
          var2.setDirty(false);
       }
