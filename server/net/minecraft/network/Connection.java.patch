--- net/minecraft/network/Connection.java
+++ net/minecraft/network/Connection.java
@@ -23,10 +23,11 @@
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.PacketFlow;
 import net.minecraft.network.protocol.game.ClientboundDisconnectPacket;
+import net.minecraft.network.protocol.login.ClientboundLoginDisconnectPacket;
 import net.minecraft.server.RunningOnDifferentThreadException;
 import net.minecraft.server.network.ServerGamePacketListenerImpl;
 import net.minecraft.server.network.ServerLoginPacketListenerImpl;
 import net.minecraft.util.LazyLoadedValue;
 import net.minecraft.util.Mth;
@@ -80,11 +81,11 @@
       this.channel.attr(ATTRIBUTE_PROTOCOL).set(var1);
       this.channel.config().setAutoRead(true);
       LOGGER.debug("Enabled auto read");
    }
 
-   public void channelInactive(ChannelHandlerContext var1) throws Exception {
+   public void channelInactive(ChannelHandlerContext var1) {
       this.disconnect(new TranslatableComponent("disconnect.endOfStream"));
    }
 
    public void exceptionCaught(ChannelHandlerContext var1, Throwable var2) {
       if (var2 instanceof SkipPacketException) {
@@ -98,11 +99,13 @@
                this.disconnect(new TranslatableComponent("disconnect.timeout"));
             } else {
                TranslatableComponent var4 = new TranslatableComponent("disconnect.genericReason", new Object[]{"Internal Exception: " + var2});
                if (var3) {
                   LOGGER.debug("Failed to sent packet", var2);
-                  this.send(new ClientboundDisconnectPacket(var4), (var2x) -> {
+                  ConnectionProtocol var5 = this.getCurrentProtocol();
+                  Object var6 = var5 == ConnectionProtocol.LOGIN ? new ClientboundLoginDisconnectPacket(var4) : new ClientboundDisconnectPacket(var4);
+                  this.send((Packet)var6, (var2x) -> {
                      this.disconnect(var4);
                   });
                   this.setReadOnly();
                } else {
                   LOGGER.debug("Double fault", var2);
@@ -112,11 +115,11 @@
 
          }
       }
    }
 
-   protected void channelRead0(ChannelHandlerContext var1, Packet<?> var2) throws Exception {
+   protected void channelRead0(ChannelHandlerContext var1, Packet<?> var2) {
       if (this.channel.isOpen()) {
          try {
             genericsFtw(var2, this.packetListener);
          } catch (RunningOnDifferentThreadException var4) {
          }
@@ -149,11 +152,11 @@
 
    }
 
    private void sendPacket(Packet<?> var1, @Nullable GenericFutureListener<? extends Future<? super Void>> var2) {
       ConnectionProtocol var3 = ConnectionProtocol.getProtocolForPacket(var1);
-      ConnectionProtocol var4 = (ConnectionProtocol)this.channel.attr(ATTRIBUTE_PROTOCOL).get();
+      ConnectionProtocol var4 = this.getCurrentProtocol();
       ++this.sentPackets;
       if (var4 != var3) {
          LOGGER.debug("Disabled auto read");
          this.channel.config().setAutoRead(false);
       }
@@ -184,10 +187,14 @@
          });
       }
 
    }
 
+   private ConnectionProtocol getCurrentProtocol() {
+      return (ConnectionProtocol)this.channel.attr(ATTRIBUTE_PROTOCOL).get();
+   }
+
    private void flushQueue() {
       if (this.channel != null && this.channel.isOpen()) {
          synchronized(this.queue) {
             Connection.PacketHolder var2;
             while((var2 = (Connection.PacketHolder)this.queue.poll()) != null) {
