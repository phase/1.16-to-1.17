--- net/minecraft/network/chat/Component.java
+++ net/minecraft/network/chat/Component.java
@@ -1,7 +1,8 @@
 package net.minecraft.network.chat;
 
+import com.google.common.collect.Lists;
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
 import com.google.gson.JsonArray;
 import com.google.gson.JsonDeserializationContext;
 import com.google.gson.JsonDeserializer;
@@ -15,17 +16,19 @@
 import com.mojang.brigadier.Message;
 import java.io.IOException;
 import java.io.StringReader;
 import java.lang.reflect.Field;
 import java.lang.reflect.Type;
+import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Optional;
 import java.util.Map.Entry;
 import javax.annotation.Nullable;
 import net.minecraft.Util;
 import net.minecraft.resources.ResourceLocation;
+import net.minecraft.util.FormattedCharSequence;
 import net.minecraft.util.GsonHelper;
 import net.minecraft.util.LowerCaseEnumTypeAdapterFactory;
 
 public interface Component extends Message, FormattedText {
    Style getStyle();
@@ -54,10 +57,34 @@
 
    MutableComponent plainCopy();
 
    MutableComponent copy();
 
+   FormattedCharSequence getVisualOrderText();
+
+   default <T> Optional<T> visit(FormattedText.StyledContentConsumer<T> var1, Style var2) {
+      Style var3 = this.getStyle().applyTo(var2);
+      Optional var4 = this.visitSelf(var1, var3);
+      if (var4.isPresent()) {
+         return var4;
+      } else {
+         Iterator var5 = this.getSiblings().iterator();
+
+         Optional var7;
+         do {
+            if (!var5.hasNext()) {
+               return Optional.empty();
+            }
+
+            Component var6 = (Component)var5.next();
+            var7 = var6.visit(var1, var3);
+         } while(!var7.isPresent());
+
+         return var7;
+      }
+   }
+
    default <T> Optional<T> visit(FormattedText.ContentConsumer<T> var1) {
       Optional var2 = this.visitSelf(var1);
       if (var2.isPresent()) {
          return var2;
       } else {
@@ -75,14 +102,34 @@
 
          return var5;
       }
    }
 
+   default <T> Optional<T> visitSelf(FormattedText.StyledContentConsumer<T> var1, Style var2) {
+      return var1.accept(var2, this.getContents());
+   }
+
    default <T> Optional<T> visitSelf(FormattedText.ContentConsumer<T> var1) {
       return var1.accept(this.getContents());
    }
 
+   default List<Component> toFlatList(Style var1) {
+      ArrayList var2 = Lists.newArrayList();
+      this.visit((var1x, var2x) -> {
+         if (!var2x.isEmpty()) {
+            var2.add((new TextComponent(var2x)).withStyle(var1x));
+         }
+
+         return Optional.empty();
+      }, var1);
+      return var2;
+   }
+
+   static Component nullToEmpty(@Nullable String var0) {
+      return (Component)(var0 != null ? new TextComponent(var0) : TextComponent.EMPTY);
+   }
+
    public static class Serializer implements JsonDeserializer<MutableComponent>, JsonSerializer<Component> {
       private static final Gson GSON = (Gson)Util.make(() -> {
          GsonBuilder var0 = new GsonBuilder();
          var0.disableHtmlEscaping();
          var0.registerTypeHierarchyAdapter(Component.class, new Component.Serializer());
@@ -145,15 +192,15 @@
             } else {
                String var6;
                if (var4.has("translate")) {
                   var6 = GsonHelper.getAsString(var4, "translate");
                   if (var4.has("with")) {
-                     JsonArray var15 = GsonHelper.getAsJsonArray(var4, "with");
-                     Object[] var8 = new Object[var15.size()];
+                     JsonArray var7 = GsonHelper.getAsJsonArray(var4, "with");
+                     Object[] var8 = new Object[var7.size()];
 
                      for(int var9 = 0; var9 < var8.length; ++var9) {
-                        var8[var9] = this.deserialize(var15.get(var9), var2, var3);
+                        var8[var9] = this.deserialize(var7.get(var9), var2, var3);
                         if (var8[var9] instanceof TextComponent) {
                            TextComponent var10 = (TextComponent)var8[var9];
                            if (var10.getStyle().isEmpty() && var10.getSiblings().isEmpty()) {
                               var8[var9] = var10.getText();
                            }
@@ -179,21 +226,21 @@
                   if (!var4.has("nbt")) {
                      throw new JsonParseException("Don't know how to turn " + var1 + " into a Component");
                   }
 
                   var6 = GsonHelper.getAsString(var4, "nbt");
-                  boolean var7 = GsonHelper.getAsBoolean(var4, "interpret", false);
+                  boolean var15 = GsonHelper.getAsBoolean(var4, "interpret", false);
                   if (var4.has("block")) {
-                     var5 = new NbtComponent.BlockNbtComponent(var6, var7, GsonHelper.getAsString(var4, "block"));
+                     var5 = new NbtComponent.BlockNbtComponent(var6, var15, GsonHelper.getAsString(var4, "block"));
                   } else if (var4.has("entity")) {
-                     var5 = new NbtComponent.EntityNbtComponent(var6, var7, GsonHelper.getAsString(var4, "entity"));
+                     var5 = new NbtComponent.EntityNbtComponent(var6, var15, GsonHelper.getAsString(var4, "entity"));
                   } else {
                      if (!var4.has("storage")) {
                         throw new JsonParseException("Don't know how to turn " + var1 + " into a Component");
                      }
 
-                     var5 = new NbtComponent.StorageNbtComponent(var6, var7, new ResourceLocation(GsonHelper.getAsString(var4, "storage")));
+                     var5 = new NbtComponent.StorageNbtComponent(var6, var15, new ResourceLocation(GsonHelper.getAsString(var4, "storage")));
                   }
                }
             }
 
             if (var4.has("extra")) {
