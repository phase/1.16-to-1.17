--- net/minecraft/network/protocol/game/ClientboundAwardStatsPacket.java
+++ net/minecraft/network/protocol/game/ClientboundAwardStatsPacket.java
@@ -1,60 +1,49 @@
 package net.minecraft.network.protocol.game;
 
 import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
-import it.unimi.dsi.fastutil.objects.ObjectIterator;
-import java.io.IOException;
+import java.util.Map;
 import net.minecraft.core.Registry;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.stats.Stat;
 import net.minecraft.stats.StatType;
 
 public class ClientboundAwardStatsPacket implements Packet<ClientGamePacketListener> {
-   private Object2IntMap<Stat<?>> stats;
+   private final Object2IntMap<Stat<?>> stats;
 
-   public ClientboundAwardStatsPacket() {
-   }
-
    public ClientboundAwardStatsPacket(Object2IntMap<Stat<?>> var1) {
       this.stats = var1;
    }
 
-   public void handle(ClientGamePacketListener var1) {
-      var1.handleAwardStats(this);
+   public ClientboundAwardStatsPacket(FriendlyByteBuf var1) {
+      this.stats = (Object2IntMap)var1.readMap(Object2IntOpenHashMap::new, (var0) -> {
+         int var1 = var0.readVarInt();
+         int var2 = var0.readVarInt();
+         return readStatCap((StatType)Registry.STAT_TYPE.byId(var1), var2);
+      }, FriendlyByteBuf::readVarInt);
    }
 
-   public void read(FriendlyByteBuf var1) throws IOException {
-      int var2 = var1.readVarInt();
-      this.stats = new Object2IntOpenHashMap(var2);
-
-      for(int var3 = 0; var3 < var2; ++var3) {
-         this.readStat((StatType)Registry.STAT_TYPE.byId(var1.readVarInt()), var1);
-      }
-
+   private static <T> Stat<T> readStatCap(StatType<T> var0, int var1) {
+      return var0.get(var0.getRegistry().byId(var1));
    }
 
-   private <T> void readStat(StatType<T> var1, FriendlyByteBuf var2) {
-      int var3 = var2.readVarInt();
-      int var4 = var2.readVarInt();
-      this.stats.put(var1.get(var1.getRegistry().byId(var3)), var4);
+   public void handle(ClientGamePacketListener var1) {
+      var1.handleAwardStats(this);
    }
 
-   public void write(FriendlyByteBuf var1) throws IOException {
-      var1.writeVarInt(this.stats.size());
-      ObjectIterator var2 = this.stats.object2IntEntrySet().iterator();
-
-      while(var2.hasNext()) {
-         Object2IntMap.Entry var3 = (Object2IntMap.Entry)var2.next();
-         Stat var4 = (Stat)var3.getKey();
-         var1.writeVarInt(Registry.STAT_TYPE.getId(var4.getType()));
-         var1.writeVarInt(this.getId(var4));
-         var1.writeVarInt(var3.getIntValue());
-      }
-
+   public void write(FriendlyByteBuf var1) {
+      var1.writeMap(this.stats, (var1x, var2) -> {
+         var1x.writeVarInt(Registry.STAT_TYPE.getId(var2.getType()));
+         var1x.writeVarInt(this.getStatIdCap(var2));
+      }, FriendlyByteBuf::writeVarInt);
    }
 
-   private <T> int getId(Stat<T> var1) {
+   private <T> int getStatIdCap(Stat<T> var1) {
       return var1.getType().getRegistry().getId(var1.getValue());
    }
+
+   public Map<Stat<?>, Integer> getStats() {
+      return this.stats;
+   }
 }
