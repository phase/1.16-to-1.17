--- net/minecraft/network/protocol/game/ServerboundInteractPacket.java
+++ net/minecraft/network/protocol/game/ServerboundInteractPacket.java
@@ -1,86 +1,161 @@
 package net.minecraft.network.protocol.game;
 
-import java.io.IOException;
+import java.util.function.Function;
 import javax.annotation.Nullable;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
+import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.entity.Entity;
-import net.minecraft.world.level.Level;
 import net.minecraft.world.phys.Vec3;
 
 public class ServerboundInteractPacket implements Packet<ServerGamePacketListener> {
-   private int entityId;
-   private ServerboundInteractPacket.Action action;
-   private Vec3 location;
-   private InteractionHand hand;
-   private boolean usingSecondaryAction;
+   private final int entityId;
+   private final ServerboundInteractPacket.Action action;
+   private final boolean usingSecondaryAction;
+   static final ServerboundInteractPacket.Action ATTACK_ACTION = new ServerboundInteractPacket.Action() {
+      public ServerboundInteractPacket.ActionType getType() {
+         return ServerboundInteractPacket.ActionType.ATTACK;
+      }
 
-   public ServerboundInteractPacket() {
-   }
-
-   public void read(FriendlyByteBuf var1) throws IOException {
-      this.entityId = var1.readVarInt();
-      this.action = (ServerboundInteractPacket.Action)var1.readEnum(ServerboundInteractPacket.Action.class);
-      if (this.action == ServerboundInteractPacket.Action.INTERACT_AT) {
-         this.location = new Vec3((double)var1.readFloat(), (double)var1.readFloat(), (double)var1.readFloat());
+      public void dispatch(ServerboundInteractPacket.Handler var1) {
+         var1.onAttack();
       }
 
-      if (this.action == ServerboundInteractPacket.Action.INTERACT || this.action == ServerboundInteractPacket.Action.INTERACT_AT) {
-         this.hand = (InteractionHand)var1.readEnum(InteractionHand.class);
+      public void write(FriendlyByteBuf var1) {
       }
+   };
 
-      this.usingSecondaryAction = var1.readBoolean();
+   private ServerboundInteractPacket(int var1, boolean var2, ServerboundInteractPacket.Action var3) {
+      this.entityId = var1;
+      this.action = var3;
+      this.usingSecondaryAction = var2;
    }
 
-   public void write(FriendlyByteBuf var1) throws IOException {
-      var1.writeVarInt(this.entityId);
-      var1.writeEnum(this.action);
-      if (this.action == ServerboundInteractPacket.Action.INTERACT_AT) {
-         var1.writeFloat((float)this.location.x);
-         var1.writeFloat((float)this.location.y);
-         var1.writeFloat((float)this.location.z);
-      }
+   public static ServerboundInteractPacket createAttackPacket(Entity var0, boolean var1) {
+      return new ServerboundInteractPacket(var0.getId(), var1, ATTACK_ACTION);
+   }
 
-      if (this.action == ServerboundInteractPacket.Action.INTERACT || this.action == ServerboundInteractPacket.Action.INTERACT_AT) {
-         var1.writeEnum(this.hand);
-      }
+   public static ServerboundInteractPacket createInteractionPacket(Entity var0, boolean var1, InteractionHand var2) {
+      return new ServerboundInteractPacket(var0.getId(), var1, new ServerboundInteractPacket.InteractionAction(var2));
+   }
 
+   public static ServerboundInteractPacket createInteractionPacket(Entity var0, boolean var1, InteractionHand var2, Vec3 var3) {
+      return new ServerboundInteractPacket(var0.getId(), var1, new ServerboundInteractPacket.InteractionAtLocationAction(var2, var3));
+   }
+
+   public ServerboundInteractPacket(FriendlyByteBuf var1) {
+      this.entityId = var1.readVarInt();
+      ServerboundInteractPacket.ActionType var2 = (ServerboundInteractPacket.ActionType)var1.readEnum(ServerboundInteractPacket.ActionType.class);
+      this.action = (ServerboundInteractPacket.Action)var2.reader.apply(var1);
+      this.usingSecondaryAction = var1.readBoolean();
+   }
+
+   public void write(FriendlyByteBuf var1) {
+      var1.writeVarInt(this.entityId);
+      var1.writeEnum(this.action.getType());
+      this.action.write(var1);
       var1.writeBoolean(this.usingSecondaryAction);
    }
 
    public void handle(ServerGamePacketListener var1) {
       var1.handleInteract(this);
    }
 
    @Nullable
-   public Entity getTarget(Level var1) {
-      return var1.getEntity(this.entityId);
+   public Entity getTarget(ServerLevel var1) {
+      return var1.getEntityOrPart(this.entityId);
    }
 
-   public ServerboundInteractPacket.Action getAction() {
-      return this.action;
+   public boolean isUsingSecondaryAction() {
+      return this.usingSecondaryAction;
    }
 
-   @Nullable
-   public InteractionHand getHand() {
-      return this.hand;
+   public void dispatch(ServerboundInteractPacket.Handler var1) {
+      this.action.dispatch(var1);
    }
 
-   public Vec3 getLocation() {
-      return this.location;
+   interface Action {
+      ServerboundInteractPacket.ActionType getType();
+
+      void dispatch(ServerboundInteractPacket.Handler var1);
+
+      void write(FriendlyByteBuf var1);
    }
 
-   public boolean isUsingSecondaryAction() {
-      return this.usingSecondaryAction;
+   private static class InteractionAction implements ServerboundInteractPacket.Action {
+      private final InteractionHand hand;
+
+      InteractionAction(InteractionHand var1) {
+         this.hand = var1;
+      }
+
+      private InteractionAction(FriendlyByteBuf var1) {
+         this.hand = (InteractionHand)var1.readEnum(InteractionHand.class);
+      }
+
+      public ServerboundInteractPacket.ActionType getType() {
+         return ServerboundInteractPacket.ActionType.INTERACT;
+      }
+
+      public void dispatch(ServerboundInteractPacket.Handler var1) {
+         var1.onInteraction(this.hand);
+      }
+
+      public void write(FriendlyByteBuf var1) {
+         var1.writeEnum(this.hand);
+      }
    }
 
-   public static enum Action {
-      INTERACT,
-      ATTACK,
-      INTERACT_AT;
+   private static class InteractionAtLocationAction implements ServerboundInteractPacket.Action {
+      private final InteractionHand hand;
+      private final Vec3 location;
 
-      private Action() {
+      InteractionAtLocationAction(InteractionHand var1, Vec3 var2) {
+         this.hand = var1;
+         this.location = var2;
       }
+
+      private InteractionAtLocationAction(FriendlyByteBuf var1) {
+         this.location = new Vec3((double)var1.readFloat(), (double)var1.readFloat(), (double)var1.readFloat());
+         this.hand = (InteractionHand)var1.readEnum(InteractionHand.class);
+      }
+
+      public ServerboundInteractPacket.ActionType getType() {
+         return ServerboundInteractPacket.ActionType.INTERACT_AT;
+      }
+
+      public void dispatch(ServerboundInteractPacket.Handler var1) {
+         var1.onInteraction(this.hand, this.location);
+      }
+
+      public void write(FriendlyByteBuf var1) {
+         var1.writeFloat((float)this.location.x);
+         var1.writeFloat((float)this.location.y);
+         var1.writeFloat((float)this.location.z);
+         var1.writeEnum(this.hand);
+      }
    }
+
+   private static enum ActionType {
+      INTERACT(ServerboundInteractPacket.InteractionAction::new),
+      ATTACK((var0) -> {
+         return ServerboundInteractPacket.ATTACK_ACTION;
+      }),
+      INTERACT_AT(ServerboundInteractPacket.InteractionAtLocationAction::new);
+
+      final Function<FriendlyByteBuf, ServerboundInteractPacket.Action> reader;
+
+      private ActionType(Function<FriendlyByteBuf, ServerboundInteractPacket.Action> var3) {
+         this.reader = var3;
+      }
+   }
+
+   public interface Handler {
+      void onInteraction(InteractionHand var1);
+
+      void onInteraction(InteractionHand var1, Vec3 var2);
+
+      void onAttack();
+   }
 }
