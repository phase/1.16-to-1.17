--- net/minecraft/network/protocol/game/ClientboundPlayerInfoPacket.java
+++ net/minecraft/network/protocol/game/ClientboundPlayerInfoPacket.java
@@ -2,185 +2,205 @@
 
 import com.google.common.base.MoreObjects;
 import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.properties.Property;
-import java.io.IOException;
+import com.mojang.authlib.properties.PropertyMap;
+import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Objects;
 import javax.annotation.Nullable;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.world.level.GameType;
 
 public class ClientboundPlayerInfoPacket implements Packet<ClientGamePacketListener> {
-   private ClientboundPlayerInfoPacket.Action action;
-   private final List<ClientboundPlayerInfoPacket.PlayerUpdate> entries = Lists.newArrayList();
+   private final ClientboundPlayerInfoPacket.Action action;
+   private final List<ClientboundPlayerInfoPacket.PlayerUpdate> entries;
 
-   public ClientboundPlayerInfoPacket() {
-   }
-
    public ClientboundPlayerInfoPacket(ClientboundPlayerInfoPacket.Action var1, ServerPlayer... var2) {
       this.action = var1;
+      this.entries = Lists.newArrayListWithCapacity(var2.length);
       ServerPlayer[] var3 = var2;
       int var4 = var2.length;
 
       for(int var5 = 0; var5 < var4; ++var5) {
          ServerPlayer var6 = var3[var5];
          this.entries.add(new ClientboundPlayerInfoPacket.PlayerUpdate(var6.getGameProfile(), var6.latency, var6.gameMode.getGameModeForPlayer(), var6.getTabListDisplayName()));
       }
 
    }
 
-   public ClientboundPlayerInfoPacket(ClientboundPlayerInfoPacket.Action var1, Iterable<ServerPlayer> var2) {
+   public ClientboundPlayerInfoPacket(ClientboundPlayerInfoPacket.Action var1, Collection<ServerPlayer> var2) {
       this.action = var1;
+      this.entries = Lists.newArrayListWithCapacity(var2.size());
       Iterator var3 = var2.iterator();
 
       while(var3.hasNext()) {
          ServerPlayer var4 = (ServerPlayer)var3.next();
          this.entries.add(new ClientboundPlayerInfoPacket.PlayerUpdate(var4.getGameProfile(), var4.latency, var4.gameMode.getGameModeForPlayer(), var4.getTabListDisplayName()));
       }
 
    }
 
-   public void read(FriendlyByteBuf var1) throws IOException {
+   public ClientboundPlayerInfoPacket(FriendlyByteBuf var1) {
       this.action = (ClientboundPlayerInfoPacket.Action)var1.readEnum(ClientboundPlayerInfoPacket.Action.class);
-      int var2 = var1.readVarInt();
+      ClientboundPlayerInfoPacket.Action var10002 = this.action;
+      Objects.requireNonNull(var10002);
+      this.entries = var1.readList(var10002::read);
+   }
 
-      for(int var3 = 0; var3 < var2; ++var3) {
-         GameProfile var4 = null;
-         int var5 = 0;
-         GameType var6 = null;
-         Component var7 = null;
-         switch(this.action) {
-         case ADD_PLAYER:
-            var4 = new GameProfile(var1.readUUID(), var1.readUtf(16));
-            int var8 = var1.readVarInt();
-            int var9 = 0;
+   public void write(FriendlyByteBuf var1) {
+      var1.writeEnum(this.action);
+      List var10001 = this.entries;
+      ClientboundPlayerInfoPacket.Action var10002 = this.action;
+      Objects.requireNonNull(var10002);
+      var1.writeCollection(var10001, var10002::write);
+   }
 
-            for(; var9 < var8; ++var9) {
-               String var10 = var1.readUtf(32767);
-               String var11 = var1.readUtf(32767);
-               if (var1.readBoolean()) {
-                  var4.getProperties().put(var10, new Property(var10, var11, var1.readUtf(32767)));
-               } else {
-                  var4.getProperties().put(var10, new Property(var10, var11));
-               }
-            }
+   public void handle(ClientGamePacketListener var1) {
+      var1.handlePlayerInfo(this);
+   }
 
-            var6 = GameType.byId(var1.readVarInt());
-            var5 = var1.readVarInt();
-            if (var1.readBoolean()) {
-               var7 = var1.readComponent();
-            }
-            break;
-         case UPDATE_GAME_MODE:
-            var4 = new GameProfile(var1.readUUID(), (String)null);
-            var6 = GameType.byId(var1.readVarInt());
-            break;
-         case UPDATE_LATENCY:
-            var4 = new GameProfile(var1.readUUID(), (String)null);
-            var5 = var1.readVarInt();
-            break;
-         case UPDATE_DISPLAY_NAME:
-            var4 = new GameProfile(var1.readUUID(), (String)null);
-            if (var1.readBoolean()) {
-               var7 = var1.readComponent();
-            }
-            break;
-         case REMOVE_PLAYER:
-            var4 = new GameProfile(var1.readUUID(), (String)null);
-         }
+   public List<ClientboundPlayerInfoPacket.PlayerUpdate> getEntries() {
+      return this.entries;
+   }
 
-         this.entries.add(new ClientboundPlayerInfoPacket.PlayerUpdate(var4, var5, var6, var7));
-      }
+   public ClientboundPlayerInfoPacket.Action getAction() {
+      return this.action;
+   }
 
+   @Nullable
+   static Component readDisplayName(FriendlyByteBuf var0) {
+      return var0.readBoolean() ? var0.readComponent() : null;
    }
 
-   public void write(FriendlyByteBuf var1) throws IOException {
-      var1.writeEnum(this.action);
-      var1.writeVarInt(this.entries.size());
-      Iterator var2 = this.entries.iterator();
+   static void writeDisplayName(FriendlyByteBuf var0, @Nullable Component var1) {
+      if (var1 == null) {
+         var0.writeBoolean(false);
+      } else {
+         var0.writeBoolean(true);
+         var0.writeComponent(var1);
+      }
 
-      while(true) {
-         while(var2.hasNext()) {
-            ClientboundPlayerInfoPacket.PlayerUpdate var3 = (ClientboundPlayerInfoPacket.PlayerUpdate)var2.next();
-            switch(this.action) {
-            case ADD_PLAYER:
-               var1.writeUUID(var3.getProfile().getId());
-               var1.writeUtf(var3.getProfile().getName());
-               var1.writeVarInt(var3.getProfile().getProperties().size());
-               Iterator var4 = var3.getProfile().getProperties().values().iterator();
+   }
 
-               while(var4.hasNext()) {
-                  Property var5 = (Property)var4.next();
-                  var1.writeUtf(var5.getName());
-                  var1.writeUtf(var5.getValue());
-                  if (var5.hasSignature()) {
-                     var1.writeBoolean(true);
-                     var1.writeUtf(var5.getSignature());
-                  } else {
-                     var1.writeBoolean(false);
-                  }
-               }
+   public String toString() {
+      return MoreObjects.toStringHelper((Object)this).add("action", this.action).add("entries", this.entries).toString();
+   }
 
-               var1.writeVarInt(var3.getGameMode().getId());
-               var1.writeVarInt(var3.getLatency());
-               if (var3.getDisplayName() == null) {
-                  var1.writeBoolean(false);
+   public static enum Action {
+      ADD_PLAYER {
+         protected ClientboundPlayerInfoPacket.PlayerUpdate read(FriendlyByteBuf var1) {
+            GameProfile var2 = new GameProfile(var1.readUUID(), var1.readUtf(16));
+            PropertyMap var3 = var2.getProperties();
+            var1.readWithCount((var1x) -> {
+               String var2 = var1x.readUtf();
+               String var3x = var1x.readUtf();
+               if (var1x.readBoolean()) {
+                  String var4 = var1x.readUtf();
+                  var3.put(var2, new Property(var2, var3x, var4));
                } else {
-                  var1.writeBoolean(true);
-                  var1.writeComponent(var3.getDisplayName());
+                  var3.put(var2, new Property(var2, var3x));
                }
-               break;
-            case UPDATE_GAME_MODE:
-               var1.writeUUID(var3.getProfile().getId());
-               var1.writeVarInt(var3.getGameMode().getId());
-               break;
-            case UPDATE_LATENCY:
-               var1.writeUUID(var3.getProfile().getId());
-               var1.writeVarInt(var3.getLatency());
-               break;
-            case UPDATE_DISPLAY_NAME:
-               var1.writeUUID(var3.getProfile().getId());
-               if (var3.getDisplayName() == null) {
-                  var1.writeBoolean(false);
+
+            });
+            GameType var4 = GameType.byId(var1.readVarInt());
+            int var5 = var1.readVarInt();
+            Component var6 = ClientboundPlayerInfoPacket.readDisplayName(var1);
+            return new ClientboundPlayerInfoPacket.PlayerUpdate(var2, var5, var4, var6);
+         }
+
+         protected void write(FriendlyByteBuf var1, ClientboundPlayerInfoPacket.PlayerUpdate var2) {
+            var1.writeUUID(var2.getProfile().getId());
+            var1.writeUtf(var2.getProfile().getName());
+            var1.writeCollection(var2.getProfile().getProperties().values(), (var0, var1x) -> {
+               var0.writeUtf(var1x.getName());
+               var0.writeUtf(var1x.getValue());
+               if (var1x.hasSignature()) {
+                  var0.writeBoolean(true);
+                  var0.writeUtf(var1x.getSignature());
                } else {
-                  var1.writeBoolean(true);
-                  var1.writeComponent(var3.getDisplayName());
+                  var0.writeBoolean(false);
                }
-               break;
-            case REMOVE_PLAYER:
-               var1.writeUUID(var3.getProfile().getId());
-            }
+
+            });
+            var1.writeVarInt(var2.getGameMode().getId());
+            var1.writeVarInt(var2.getLatency());
+            ClientboundPlayerInfoPacket.writeDisplayName(var1, var2.getDisplayName());
          }
+      },
+      UPDATE_GAME_MODE {
+         protected ClientboundPlayerInfoPacket.PlayerUpdate read(FriendlyByteBuf var1) {
+            GameProfile var2 = new GameProfile(var1.readUUID(), (String)null);
+            GameType var3 = GameType.byId(var1.readVarInt());
+            return new ClientboundPlayerInfoPacket.PlayerUpdate(var2, 0, var3, (Component)null);
+         }
 
-         return;
+         protected void write(FriendlyByteBuf var1, ClientboundPlayerInfoPacket.PlayerUpdate var2) {
+            var1.writeUUID(var2.getProfile().getId());
+            var1.writeVarInt(var2.getGameMode().getId());
+         }
+      },
+      UPDATE_LATENCY {
+         protected ClientboundPlayerInfoPacket.PlayerUpdate read(FriendlyByteBuf var1) {
+            GameProfile var2 = new GameProfile(var1.readUUID(), (String)null);
+            int var3 = var1.readVarInt();
+            return new ClientboundPlayerInfoPacket.PlayerUpdate(var2, var3, (GameType)null, (Component)null);
+         }
+
+         protected void write(FriendlyByteBuf var1, ClientboundPlayerInfoPacket.PlayerUpdate var2) {
+            var1.writeUUID(var2.getProfile().getId());
+            var1.writeVarInt(var2.getLatency());
+         }
+      },
+      UPDATE_DISPLAY_NAME {
+         protected ClientboundPlayerInfoPacket.PlayerUpdate read(FriendlyByteBuf var1) {
+            GameProfile var2 = new GameProfile(var1.readUUID(), (String)null);
+            Component var3 = ClientboundPlayerInfoPacket.readDisplayName(var1);
+            return new ClientboundPlayerInfoPacket.PlayerUpdate(var2, 0, (GameType)null, var3);
+         }
+
+         protected void write(FriendlyByteBuf var1, ClientboundPlayerInfoPacket.PlayerUpdate var2) {
+            var1.writeUUID(var2.getProfile().getId());
+            ClientboundPlayerInfoPacket.writeDisplayName(var1, var2.getDisplayName());
+         }
+      },
+      REMOVE_PLAYER {
+         protected ClientboundPlayerInfoPacket.PlayerUpdate read(FriendlyByteBuf var1) {
+            GameProfile var2 = new GameProfile(var1.readUUID(), (String)null);
+            return new ClientboundPlayerInfoPacket.PlayerUpdate(var2, 0, (GameType)null, (Component)null);
+         }
+
+         protected void write(FriendlyByteBuf var1, ClientboundPlayerInfoPacket.PlayerUpdate var2) {
+            var1.writeUUID(var2.getProfile().getId());
+         }
+      };
+
+      Action() {
       }
-   }
 
-   public void handle(ClientGamePacketListener var1) {
-      var1.handlePlayerInfo(this);
-   }
+      protected abstract ClientboundPlayerInfoPacket.PlayerUpdate read(FriendlyByteBuf var1);
 
-   public String toString() {
-      return MoreObjects.toStringHelper((Object)this).add("action", this.action).add("entries", this.entries).toString();
+      protected abstract void write(FriendlyByteBuf var1, ClientboundPlayerInfoPacket.PlayerUpdate var2);
    }
 
-   public class PlayerUpdate {
+   public static class PlayerUpdate {
       private final int latency;
       private final GameType gameMode;
       private final GameProfile profile;
+      @Nullable
       private final Component displayName;
 
-      public PlayerUpdate(GameProfile var2, int var3, GameType var4, @Nullable Component var5) {
-         this.profile = var2;
-         this.latency = var3;
-         this.gameMode = var4;
-         this.displayName = var5;
+      public PlayerUpdate(GameProfile var1, int var2, @Nullable GameType var3, @Nullable Component var4) {
+         this.profile = var1;
+         this.latency = var2;
+         this.gameMode = var3;
+         this.displayName = var4;
       }
 
       public GameProfile getProfile() {
          return this.profile;
       }
@@ -200,17 +220,6 @@
 
       public String toString() {
          return MoreObjects.toStringHelper((Object)this).add("latency", this.latency).add("gameMode", this.gameMode).add("profile", this.profile).add("displayName", this.displayName == null ? null : Component.Serializer.toJson(this.displayName)).toString();
       }
    }
-
-   public static enum Action {
-      ADD_PLAYER,
-      UPDATE_GAME_MODE,
-      UPDATE_LATENCY,
-      UPDATE_DISPLAY_NAME,
-      REMOVE_PLAYER;
-
-      private Action() {
-      }
-   }
 }
