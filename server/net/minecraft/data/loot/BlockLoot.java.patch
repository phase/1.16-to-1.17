--- net/minecraft/data/loot/BlockLoot.java
+++ net/minecraft/data/loot/BlockLoot.java
@@ -28,11 +28,13 @@
 import net.minecraft.world.level.block.BedBlock;
 import net.minecraft.world.level.block.BeehiveBlock;
 import net.minecraft.world.level.block.BeetrootBlock;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.block.CandleBlock;
 import net.minecraft.world.level.block.CarrotBlock;
+import net.minecraft.world.level.block.CaveVinesBlock;
 import net.minecraft.world.level.block.CocoaBlock;
 import net.minecraft.world.level.block.ComposterBlock;
 import net.minecraft.world.level.block.CropBlock;
 import net.minecraft.world.level.block.DoorBlock;
 import net.minecraft.world.level.block.DoublePlantBlock;
@@ -48,19 +50,15 @@
 import net.minecraft.world.level.block.TntBlock;
 import net.minecraft.world.level.block.state.properties.BedPart;
 import net.minecraft.world.level.block.state.properties.DoubleBlockHalf;
 import net.minecraft.world.level.block.state.properties.Property;
 import net.minecraft.world.level.block.state.properties.SlabType;
-import net.minecraft.world.level.storage.loot.BinomialDistributionGenerator;
 import net.minecraft.world.level.storage.loot.BuiltInLootTables;
-import net.minecraft.world.level.storage.loot.ConstantIntValue;
-import net.minecraft.world.level.storage.loot.IntLimiter;
+import net.minecraft.world.level.storage.loot.IntRange;
 import net.minecraft.world.level.storage.loot.LootContext;
 import net.minecraft.world.level.storage.loot.LootPool;
 import net.minecraft.world.level.storage.loot.LootTable;
-import net.minecraft.world.level.storage.loot.RandomIntGenerator;
-import net.minecraft.world.level.storage.loot.RandomValueBounds;
 import net.minecraft.world.level.storage.loot.entries.AlternativesEntry;
 import net.minecraft.world.level.storage.loot.entries.DynamicLoot;
 import net.minecraft.world.level.storage.loot.entries.LootItem;
 import net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer;
 import net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer;
@@ -80,10 +78,15 @@
 import net.minecraft.world.level.storage.loot.predicates.LootItemBlockStatePropertyCondition;
 import net.minecraft.world.level.storage.loot.predicates.LootItemCondition;
 import net.minecraft.world.level.storage.loot.predicates.LootItemEntityPropertyCondition;
 import net.minecraft.world.level.storage.loot.predicates.LootItemRandomChanceCondition;
 import net.minecraft.world.level.storage.loot.predicates.MatchTool;
+import net.minecraft.world.level.storage.loot.providers.nbt.ContextNbtProvider;
+import net.minecraft.world.level.storage.loot.providers.number.BinomialDistributionGenerator;
+import net.minecraft.world.level.storage.loot.providers.number.ConstantValue;
+import net.minecraft.world.level.storage.loot.providers.number.NumberProvider;
+import net.minecraft.world.level.storage.loot.providers.number.UniformGenerator;
 
 public class BlockLoot implements Consumer<BiConsumer<ResourceLocation, LootTable.Builder>> {
    private static final LootItemCondition.Builder HAS_SILK_TOUCH;
    private static final LootItemCondition.Builder HAS_NO_SILK_TOUCH;
    private static final LootItemCondition.Builder HAS_SHEARS;
@@ -104,15 +107,15 @@
    private static <T> T applyExplosionCondition(ItemLike var0, ConditionUserBuilder<T> var1) {
       return !EXPLOSION_RESISTANT.contains(var0.asItem()) ? var1.when(ExplosionCondition.survivesExplosion()) : var1.unwrap();
    }
 
    private static LootTable.Builder createSingleItemTable(ItemLike var0) {
-      return LootTable.lootTable().withPool((LootPool.Builder)applyExplosionCondition(var0, LootPool.lootPool().setRolls(ConstantIntValue.exactly(1)).add(LootItem.lootTableItem(var0))));
+      return LootTable.lootTable().withPool((LootPool.Builder)applyExplosionCondition(var0, LootPool.lootPool().setRolls(ConstantValue.exactly(1.0F)).add(LootItem.lootTableItem(var0))));
    }
 
    private static LootTable.Builder createSelfDropDispatchTable(Block var0, LootItemCondition.Builder var1, LootPoolEntryContainer.Builder<?> var2) {
-      return LootTable.lootTable().withPool(LootPool.lootPool().setRolls(ConstantIntValue.exactly(1)).add(((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(var0).when(var1)).otherwise(var2)));
+      return LootTable.lootTable().withPool(LootPool.lootPool().setRolls(ConstantValue.exactly(1.0F)).add(((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(var0).when(var1)).otherwise(var2)));
    }
 
    private static LootTable.Builder createSilkTouchDispatchTable(Block var0, LootPoolEntryContainer.Builder<?> var1) {
       return createSelfDropDispatchTable(var0, HAS_SILK_TOUCH, var1);
    }
@@ -127,99 +130,119 @@
 
    private static LootTable.Builder createSingleItemTableWithSilkTouch(Block var0, ItemLike var1) {
       return createSilkTouchDispatchTable(var0, (LootPoolEntryContainer.Builder)applyExplosionCondition(var0, LootItem.lootTableItem(var1)));
    }
 
-   private static LootTable.Builder createSingleItemTable(ItemLike var0, RandomIntGenerator var1) {
-      return LootTable.lootTable().withPool(LootPool.lootPool().setRolls(ConstantIntValue.exactly(1)).add((LootPoolEntryContainer.Builder)applyExplosionDecay(var0, LootItem.lootTableItem(var0).apply(SetItemCountFunction.setCount(var1)))));
+   private static LootTable.Builder createSingleItemTable(ItemLike var0, NumberProvider var1) {
+      return LootTable.lootTable().withPool(LootPool.lootPool().setRolls(ConstantValue.exactly(1.0F)).add((LootPoolEntryContainer.Builder)applyExplosionDecay(var0, LootItem.lootTableItem(var0).apply(SetItemCountFunction.setCount(var1)))));
    }
 
-   private static LootTable.Builder createSingleItemTableWithSilkTouch(Block var0, ItemLike var1, RandomIntGenerator var2) {
+   private static LootTable.Builder createSingleItemTableWithSilkTouch(Block var0, ItemLike var1, NumberProvider var2) {
       return createSilkTouchDispatchTable(var0, (LootPoolEntryContainer.Builder)applyExplosionDecay(var0, LootItem.lootTableItem(var1).apply(SetItemCountFunction.setCount(var2))));
    }
 
    private static LootTable.Builder createSilkTouchOnlyTable(ItemLike var0) {
-      return LootTable.lootTable().withPool(LootPool.lootPool().when(HAS_SILK_TOUCH).setRolls(ConstantIntValue.exactly(1)).add(LootItem.lootTableItem(var0)));
+      return LootTable.lootTable().withPool(LootPool.lootPool().when(HAS_SILK_TOUCH).setRolls(ConstantValue.exactly(1.0F)).add(LootItem.lootTableItem(var0)));
    }
 
    private static LootTable.Builder createPotFlowerItemTable(ItemLike var0) {
-      return LootTable.lootTable().withPool((LootPool.Builder)applyExplosionCondition(Blocks.FLOWER_POT, LootPool.lootPool().setRolls(ConstantIntValue.exactly(1)).add(LootItem.lootTableItem(Blocks.FLOWER_POT)))).withPool((LootPool.Builder)applyExplosionCondition(var0, LootPool.lootPool().setRolls(ConstantIntValue.exactly(1)).add(LootItem.lootTableItem(var0))));
+      return LootTable.lootTable().withPool((LootPool.Builder)applyExplosionCondition(Blocks.FLOWER_POT, LootPool.lootPool().setRolls(ConstantValue.exactly(1.0F)).add(LootItem.lootTableItem(Blocks.FLOWER_POT)))).withPool((LootPool.Builder)applyExplosionCondition(var0, LootPool.lootPool().setRolls(ConstantValue.exactly(1.0F)).add(LootItem.lootTableItem(var0))));
    }
 
    private static LootTable.Builder createSlabItemTable(Block var0) {
-      return LootTable.lootTable().withPool(LootPool.lootPool().setRolls(ConstantIntValue.exactly(1)).add((LootPoolEntryContainer.Builder)applyExplosionDecay(var0, LootItem.lootTableItem(var0).apply(SetItemCountFunction.setCount(ConstantIntValue.exactly(2)).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(SlabBlock.TYPE, (Comparable)SlabType.DOUBLE)))))));
+      return LootTable.lootTable().withPool(LootPool.lootPool().setRolls(ConstantValue.exactly(1.0F)).add((LootPoolEntryContainer.Builder)applyExplosionDecay(var0, LootItem.lootTableItem(var0).apply(SetItemCountFunction.setCount(ConstantValue.exactly(2.0F)).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(SlabBlock.TYPE, (Comparable)SlabType.DOUBLE)))))));
    }
 
    private static <T extends Comparable<T> & StringRepresentable> LootTable.Builder createSinglePropConditionTable(Block var0, Property<T> var1, T var2) {
-      return LootTable.lootTable().withPool((LootPool.Builder)applyExplosionCondition(var0, LootPool.lootPool().setRolls(ConstantIntValue.exactly(1)).add(LootItem.lootTableItem(var0).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(var1, var2))))));
+      return LootTable.lootTable().withPool((LootPool.Builder)applyExplosionCondition(var0, LootPool.lootPool().setRolls(ConstantValue.exactly(1.0F)).add(LootItem.lootTableItem(var0).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(var1, var2))))));
    }
 
    private static LootTable.Builder createNameableBlockEntityTable(Block var0) {
-      return LootTable.lootTable().withPool((LootPool.Builder)applyExplosionCondition(var0, LootPool.lootPool().setRolls(ConstantIntValue.exactly(1)).add(LootItem.lootTableItem(var0).apply(CopyNameFunction.copyName(CopyNameFunction.NameSource.BLOCK_ENTITY)))));
+      return LootTable.lootTable().withPool((LootPool.Builder)applyExplosionCondition(var0, LootPool.lootPool().setRolls(ConstantValue.exactly(1.0F)).add(LootItem.lootTableItem(var0).apply(CopyNameFunction.copyName(CopyNameFunction.NameSource.BLOCK_ENTITY)))));
    }
 
    private static LootTable.Builder createShulkerBoxDrop(Block var0) {
-      return LootTable.lootTable().withPool((LootPool.Builder)applyExplosionCondition(var0, LootPool.lootPool().setRolls(ConstantIntValue.exactly(1)).add(LootItem.lootTableItem(var0).apply(CopyNameFunction.copyName(CopyNameFunction.NameSource.BLOCK_ENTITY)).apply(CopyNbtFunction.copyData(CopyNbtFunction.DataSource.BLOCK_ENTITY).copy("Lock", "BlockEntityTag.Lock").copy("LootTable", "BlockEntityTag.LootTable").copy("LootTableSeed", "BlockEntityTag.LootTableSeed")).apply(SetContainerContents.setContents().withEntry(DynamicLoot.dynamicEntry(ShulkerBoxBlock.CONTENTS))))));
+      return LootTable.lootTable().withPool((LootPool.Builder)applyExplosionCondition(var0, LootPool.lootPool().setRolls(ConstantValue.exactly(1.0F)).add(LootItem.lootTableItem(var0).apply(CopyNameFunction.copyName(CopyNameFunction.NameSource.BLOCK_ENTITY)).apply(CopyNbtFunction.copyData(ContextNbtProvider.BLOCK_ENTITY).copy("Lock", "BlockEntityTag.Lock").copy("LootTable", "BlockEntityTag.LootTable").copy("LootTableSeed", "BlockEntityTag.LootTableSeed")).apply(SetContainerContents.setContents().withEntry(DynamicLoot.dynamicEntry(ShulkerBoxBlock.CONTENTS))))));
    }
 
+   private static LootTable.Builder createLapisOreDrops(Block var0) {
+      return createSilkTouchDispatchTable(var0, (LootPoolEntryContainer.Builder)applyExplosionDecay(var0, LootItem.lootTableItem(Items.LAPIS_LAZULI).apply(SetItemCountFunction.setCount(UniformGenerator.between(4.0F, 9.0F))).apply(ApplyBonusCount.addOreBonusCount(Enchantments.BLOCK_FORTUNE))));
+   }
+
+   private static LootTable.Builder createRedstoneOreDrops(Block var0) {
+      return createSilkTouchDispatchTable(var0, (LootPoolEntryContainer.Builder)applyExplosionDecay(var0, LootItem.lootTableItem(Items.REDSTONE).apply(SetItemCountFunction.setCount(UniformGenerator.between(4.0F, 5.0F))).apply(ApplyBonusCount.addUniformBonusCount(Enchantments.BLOCK_FORTUNE))));
+   }
+
    private static LootTable.Builder createBannerDrop(Block var0) {
-      return LootTable.lootTable().withPool((LootPool.Builder)applyExplosionCondition(var0, LootPool.lootPool().setRolls(ConstantIntValue.exactly(1)).add(LootItem.lootTableItem(var0).apply(CopyNameFunction.copyName(CopyNameFunction.NameSource.BLOCK_ENTITY)).apply(CopyNbtFunction.copyData(CopyNbtFunction.DataSource.BLOCK_ENTITY).copy("Patterns", "BlockEntityTag.Patterns")))));
+      return LootTable.lootTable().withPool((LootPool.Builder)applyExplosionCondition(var0, LootPool.lootPool().setRolls(ConstantValue.exactly(1.0F)).add(LootItem.lootTableItem(var0).apply(CopyNameFunction.copyName(CopyNameFunction.NameSource.BLOCK_ENTITY)).apply(CopyNbtFunction.copyData(ContextNbtProvider.BLOCK_ENTITY).copy("Patterns", "BlockEntityTag.Patterns")))));
    }
 
    private static LootTable.Builder createBeeNestDrop(Block var0) {
-      return LootTable.lootTable().withPool(LootPool.lootPool().when(HAS_SILK_TOUCH).setRolls(ConstantIntValue.exactly(1)).add(LootItem.lootTableItem(var0).apply(CopyNbtFunction.copyData(CopyNbtFunction.DataSource.BLOCK_ENTITY).copy("Bees", "BlockEntityTag.Bees")).apply(CopyBlockState.copyState(var0).copy(BeehiveBlock.HONEY_LEVEL))));
+      return LootTable.lootTable().withPool(LootPool.lootPool().when(HAS_SILK_TOUCH).setRolls(ConstantValue.exactly(1.0F)).add(LootItem.lootTableItem(var0).apply(CopyNbtFunction.copyData(ContextNbtProvider.BLOCK_ENTITY).copy("Bees", "BlockEntityTag.Bees")).apply(CopyBlockState.copyState(var0).copy(BeehiveBlock.HONEY_LEVEL))));
    }
 
    private static LootTable.Builder createBeeHiveDrop(Block var0) {
-      return LootTable.lootTable().withPool(LootPool.lootPool().setRolls(ConstantIntValue.exactly(1)).add(((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(var0).when(HAS_SILK_TOUCH)).apply(CopyNbtFunction.copyData(CopyNbtFunction.DataSource.BLOCK_ENTITY).copy("Bees", "BlockEntityTag.Bees")).apply(CopyBlockState.copyState(var0).copy(BeehiveBlock.HONEY_LEVEL)).otherwise(LootItem.lootTableItem(var0))));
+      return LootTable.lootTable().withPool(LootPool.lootPool().setRolls(ConstantValue.exactly(1.0F)).add(((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(var0).when(HAS_SILK_TOUCH)).apply(CopyNbtFunction.copyData(ContextNbtProvider.BLOCK_ENTITY).copy("Bees", "BlockEntityTag.Bees")).apply(CopyBlockState.copyState(var0).copy(BeehiveBlock.HONEY_LEVEL)).otherwise(LootItem.lootTableItem(var0))));
    }
 
+   private static LootTable.Builder createCaveVinesDrop(Block var0) {
+      return LootTable.lootTable().withPool(LootPool.lootPool().add(LootItem.lootTableItem(Items.GLOW_BERRIES)).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(CaveVinesBlock.BERRIES, true))));
+   }
+
    private static LootTable.Builder createOreDrop(Block var0, Item var1) {
       return createSilkTouchDispatchTable(var0, (LootPoolEntryContainer.Builder)applyExplosionDecay(var0, LootItem.lootTableItem(var1).apply(ApplyBonusCount.addOreBonusCount(Enchantments.BLOCK_FORTUNE))));
    }
 
    private static LootTable.Builder createMushroomBlockDrop(Block var0, ItemLike var1) {
-      return createSilkTouchDispatchTable(var0, (LootPoolEntryContainer.Builder)applyExplosionDecay(var0, LootItem.lootTableItem(var1).apply(SetItemCountFunction.setCount(RandomValueBounds.between(-6.0F, 2.0F))).apply(LimitCount.limitCount(IntLimiter.lowerBound(0)))));
+      return createSilkTouchDispatchTable(var0, (LootPoolEntryContainer.Builder)applyExplosionDecay(var0, LootItem.lootTableItem(var1).apply(SetItemCountFunction.setCount(UniformGenerator.between(-6.0F, 2.0F))).apply(LimitCount.limitCount(IntRange.lowerBound(0)))));
    }
 
    private static LootTable.Builder createGrassDrops(Block var0) {
       return createShearsDispatchTable(var0, (LootPoolEntryContainer.Builder)applyExplosionDecay(var0, ((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.WHEAT_SEEDS).when(LootItemRandomChanceCondition.randomChance(0.125F))).apply(ApplyBonusCount.addUniformBonusCount(Enchantments.BLOCK_FORTUNE, 2))));
    }
 
    private static LootTable.Builder createStemDrops(Block var0, Item var1) {
-      return LootTable.lootTable().withPool((LootPool.Builder)applyExplosionDecay(var0, LootPool.lootPool().setRolls(ConstantIntValue.exactly(1)).add(LootItem.lootTableItem(var1).apply(SetItemCountFunction.setCount(BinomialDistributionGenerator.binomial(3, 0.06666667F)).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(StemBlock.AGE, 0)))).apply(SetItemCountFunction.setCount(BinomialDistributionGenerator.binomial(3, 0.13333334F)).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(StemBlock.AGE, 1)))).apply(SetItemCountFunction.setCount(BinomialDistributionGenerator.binomial(3, 0.2F)).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(StemBlock.AGE, 2)))).apply(SetItemCountFunction.setCount(BinomialDistributionGenerator.binomial(3, 0.26666668F)).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(StemBlock.AGE, 3)))).apply(SetItemCountFunction.setCount(BinomialDistributionGenerator.binomial(3, 0.33333334F)).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(StemBlock.AGE, 4)))).apply(SetItemCountFunction.setCount(BinomialDistributionGenerator.binomial(3, 0.4F)).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(StemBlock.AGE, 5)))).apply(SetItemCountFunction.setCount(BinomialDistributionGenerator.binomial(3, 0.46666667F)).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(StemBlock.AGE, 6)))).apply(SetItemCountFunction.setCount(BinomialDistributionGenerator.binomial(3, 0.53333336F)).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(StemBlock.AGE, 7)))))));
+      return LootTable.lootTable().withPool((LootPool.Builder)applyExplosionDecay(var0, LootPool.lootPool().setRolls(ConstantValue.exactly(1.0F)).add(LootItem.lootTableItem(var1).apply(SetItemCountFunction.setCount(BinomialDistributionGenerator.binomial(3, 0.06666667F)).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(StemBlock.AGE, 0)))).apply(SetItemCountFunction.setCount(BinomialDistributionGenerator.binomial(3, 0.13333334F)).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(StemBlock.AGE, 1)))).apply(SetItemCountFunction.setCount(BinomialDistributionGenerator.binomial(3, 0.2F)).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(StemBlock.AGE, 2)))).apply(SetItemCountFunction.setCount(BinomialDistributionGenerator.binomial(3, 0.26666668F)).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(StemBlock.AGE, 3)))).apply(SetItemCountFunction.setCount(BinomialDistributionGenerator.binomial(3, 0.33333334F)).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(StemBlock.AGE, 4)))).apply(SetItemCountFunction.setCount(BinomialDistributionGenerator.binomial(3, 0.4F)).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(StemBlock.AGE, 5)))).apply(SetItemCountFunction.setCount(BinomialDistributionGenerator.binomial(3, 0.46666667F)).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(StemBlock.AGE, 6)))).apply(SetItemCountFunction.setCount(BinomialDistributionGenerator.binomial(3, 0.53333336F)).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(StemBlock.AGE, 7)))))));
    }
 
    private static LootTable.Builder createAttachedStemDrops(Block var0, Item var1) {
-      return LootTable.lootTable().withPool((LootPool.Builder)applyExplosionDecay(var0, LootPool.lootPool().setRolls(ConstantIntValue.exactly(1)).add(LootItem.lootTableItem(var1).apply(SetItemCountFunction.setCount(BinomialDistributionGenerator.binomial(3, 0.53333336F))))));
+      return LootTable.lootTable().withPool((LootPool.Builder)applyExplosionDecay(var0, LootPool.lootPool().setRolls(ConstantValue.exactly(1.0F)).add(LootItem.lootTableItem(var1).apply(SetItemCountFunction.setCount(BinomialDistributionGenerator.binomial(3, 0.53333336F))))));
    }
 
    private static LootTable.Builder createShearsOnlyDrop(ItemLike var0) {
-      return LootTable.lootTable().withPool(LootPool.lootPool().setRolls(ConstantIntValue.exactly(1)).when(HAS_SHEARS).add(LootItem.lootTableItem(var0)));
+      return LootTable.lootTable().withPool(LootPool.lootPool().setRolls(ConstantValue.exactly(1.0F)).when(HAS_SHEARS).add(LootItem.lootTableItem(var0)));
    }
 
    private static LootTable.Builder createLeavesDrops(Block var0, Block var1, float... var2) {
-      return createSilkTouchOrShearsDispatchTable(var0, ((LootPoolSingletonContainer.Builder)applyExplosionCondition(var0, LootItem.lootTableItem(var1))).when(BonusLevelTableCondition.bonusLevelFlatChance(Enchantments.BLOCK_FORTUNE, var2))).withPool(LootPool.lootPool().setRolls(ConstantIntValue.exactly(1)).when(HAS_NO_SHEARS_OR_SILK_TOUCH).add(((LootPoolSingletonContainer.Builder)applyExplosionDecay(var0, LootItem.lootTableItem(Items.STICK).apply(SetItemCountFunction.setCount(RandomValueBounds.between(1.0F, 2.0F))))).when(BonusLevelTableCondition.bonusLevelFlatChance(Enchantments.BLOCK_FORTUNE, 0.02F, 0.022222223F, 0.025F, 0.033333335F, 0.1F))));
+      return createSilkTouchOrShearsDispatchTable(var0, ((LootPoolSingletonContainer.Builder)applyExplosionCondition(var0, LootItem.lootTableItem(var1))).when(BonusLevelTableCondition.bonusLevelFlatChance(Enchantments.BLOCK_FORTUNE, var2))).withPool(LootPool.lootPool().setRolls(ConstantValue.exactly(1.0F)).when(HAS_NO_SHEARS_OR_SILK_TOUCH).add(((LootPoolSingletonContainer.Builder)applyExplosionDecay(var0, LootItem.lootTableItem(Items.STICK).apply(SetItemCountFunction.setCount(UniformGenerator.between(1.0F, 2.0F))))).when(BonusLevelTableCondition.bonusLevelFlatChance(Enchantments.BLOCK_FORTUNE, 0.02F, 0.022222223F, 0.025F, 0.033333335F, 0.1F))));
    }
 
    private static LootTable.Builder createOakLeavesDrops(Block var0, Block var1, float... var2) {
-      return createLeavesDrops(var0, var1, var2).withPool(LootPool.lootPool().setRolls(ConstantIntValue.exactly(1)).when(HAS_NO_SHEARS_OR_SILK_TOUCH).add(((LootPoolSingletonContainer.Builder)applyExplosionCondition(var0, LootItem.lootTableItem(Items.APPLE))).when(BonusLevelTableCondition.bonusLevelFlatChance(Enchantments.BLOCK_FORTUNE, 0.005F, 0.0055555557F, 0.00625F, 0.008333334F, 0.025F))));
+      return createLeavesDrops(var0, var1, var2).withPool(LootPool.lootPool().setRolls(ConstantValue.exactly(1.0F)).when(HAS_NO_SHEARS_OR_SILK_TOUCH).add(((LootPoolSingletonContainer.Builder)applyExplosionCondition(var0, LootItem.lootTableItem(Items.APPLE))).when(BonusLevelTableCondition.bonusLevelFlatChance(Enchantments.BLOCK_FORTUNE, 0.005F, 0.0055555557F, 0.00625F, 0.008333334F, 0.025F))));
    }
 
    private static LootTable.Builder createCropDrops(Block var0, Item var1, Item var2, LootItemCondition.Builder var3) {
       return (LootTable.Builder)applyExplosionDecay(var0, LootTable.lootTable().withPool(LootPool.lootPool().add(((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(var1).when(var3)).otherwise(LootItem.lootTableItem(var2)))).withPool(LootPool.lootPool().when(var3).add(LootItem.lootTableItem(var2).apply(ApplyBonusCount.addBonusBinomialDistributionCount(Enchantments.BLOCK_FORTUNE, 0.5714286F, 3)))));
    }
 
    private static LootTable.Builder createDoublePlantShearsDrop(Block var0) {
-      return LootTable.lootTable().withPool(LootPool.lootPool().when(HAS_SHEARS).add(LootItem.lootTableItem(var0).apply(SetItemCountFunction.setCount(ConstantIntValue.exactly(2)))));
+      return LootTable.lootTable().withPool(LootPool.lootPool().when(HAS_SHEARS).add(LootItem.lootTableItem(var0).apply(SetItemCountFunction.setCount(ConstantValue.exactly(2.0F)))));
    }
 
    private static LootTable.Builder createDoublePlantWithSeedDrops(Block var0, Block var1) {
-      AlternativesEntry.Builder var2 = ((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(var1).apply(SetItemCountFunction.setCount(ConstantIntValue.exactly(2))).when(HAS_SHEARS)).otherwise(((LootPoolSingletonContainer.Builder)applyExplosionCondition(var0, LootItem.lootTableItem(Items.WHEAT_SEEDS))).when(LootItemRandomChanceCondition.randomChance(0.125F)));
+      AlternativesEntry.Builder var2 = ((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(var1).apply(SetItemCountFunction.setCount(ConstantValue.exactly(2.0F))).when(HAS_SHEARS)).otherwise(((LootPoolSingletonContainer.Builder)applyExplosionCondition(var0, LootItem.lootTableItem(Items.WHEAT_SEEDS))).when(LootItemRandomChanceCondition.randomChance(0.125F)));
       return LootTable.lootTable().withPool(LootPool.lootPool().add(var2).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(DoublePlantBlock.HALF, (Comparable)DoubleBlockHalf.LOWER))).when(LocationCheck.checkLocation(LocationPredicate.Builder.location().setBlock(BlockPredicate.Builder.block().of(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(DoublePlantBlock.HALF, (Comparable)DoubleBlockHalf.UPPER).build()).build()), new BlockPos(0, 1, 0)))).withPool(LootPool.lootPool().add(var2).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(DoublePlantBlock.HALF, (Comparable)DoubleBlockHalf.UPPER))).when(LocationCheck.checkLocation(LocationPredicate.Builder.location().setBlock(BlockPredicate.Builder.block().of(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(DoublePlantBlock.HALF, (Comparable)DoubleBlockHalf.LOWER).build()).build()), new BlockPos(0, -1, 0))));
    }
 
+   private static LootTable.Builder createCandleDrops(Block var0) {
+      return LootTable.lootTable().withPool(LootPool.lootPool().setRolls(ConstantValue.exactly(1.0F)).add((LootPoolEntryContainer.Builder)applyExplosionDecay(var0, LootItem.lootTableItem(var0).apply(SetItemCountFunction.setCount(ConstantValue.exactly(2.0F)).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(CandleBlock.CANDLES, 2)))).apply(SetItemCountFunction.setCount(ConstantValue.exactly(3.0F)).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(CandleBlock.CANDLES, 3)))).apply(SetItemCountFunction.setCount(ConstantValue.exactly(4.0F)).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(CandleBlock.CANDLES, 4)))))));
+   }
+
+   private static LootTable.Builder createCandleCakeDrops(Block var0) {
+      return LootTable.lootTable().withPool(LootPool.lootPool().setRolls(ConstantValue.exactly(1.0F)).add(LootItem.lootTableItem(var0)));
+   }
+
    public static LootTable.Builder noDrop() {
       return LootTable.lootTable();
    }
 
    public void accept(BiConsumer<ResourceLocation, LootTable.Builder> var1) {
@@ -245,11 +268,13 @@
       this.dropSelf(Blocks.ACACIA_SAPLING);
       this.dropSelf(Blocks.DARK_OAK_SAPLING);
       this.dropSelf(Blocks.SAND);
       this.dropSelf(Blocks.RED_SAND);
       this.dropSelf(Blocks.GOLD_ORE);
+      this.dropSelf(Blocks.DEEPSLATE_GOLD_ORE);
       this.dropSelf(Blocks.IRON_ORE);
+      this.dropSelf(Blocks.DEEPSLATE_IRON_ORE);
       this.dropSelf(Blocks.OAK_LOG);
       this.dropSelf(Blocks.SPRUCE_LOG);
       this.dropSelf(Blocks.BIRCH_LOG);
       this.dropSelf(Blocks.JUNGLE_LOG);
       this.dropSelf(Blocks.ACACIA_LOG);
@@ -356,10 +381,11 @@
       this.dropSelf(Blocks.NETHERRACK);
       this.dropSelf(Blocks.SOUL_SAND);
       this.dropSelf(Blocks.SOUL_SOIL);
       this.dropSelf(Blocks.BASALT);
       this.dropSelf(Blocks.POLISHED_BASALT);
+      this.dropSelf(Blocks.SMOOTH_BASALT);
       this.dropSelf(Blocks.SOUL_TORCH);
       this.dropSelf(Blocks.CARVED_PUMPKIN);
       this.dropSelf(Blocks.JACK_O_LANTERN);
       this.dropSelf(Blocks.REPEATER);
       this.dropSelf(Blocks.OAK_TRAPDOOR);
@@ -623,18 +649,74 @@
       this.dropSelf(Blocks.CRACKED_NETHER_BRICKS);
       this.dropSelf(Blocks.QUARTZ_BRICKS);
       this.dropSelf(Blocks.CHAIN);
       this.dropSelf(Blocks.WARPED_ROOTS);
       this.dropSelf(Blocks.CRIMSON_ROOTS);
+      this.dropSelf(Blocks.AMETHYST_BLOCK);
+      this.dropSelf(Blocks.CALCITE);
+      this.dropSelf(Blocks.TUFF);
+      this.dropSelf(Blocks.TINTED_GLASS);
+      this.dropSelf(Blocks.SCULK_SENSOR);
+      this.dropSelf(Blocks.COPPER_BLOCK);
+      this.dropSelf(Blocks.EXPOSED_COPPER);
+      this.dropSelf(Blocks.WEATHERED_COPPER);
+      this.dropSelf(Blocks.OXIDIZED_COPPER);
+      this.dropSelf(Blocks.COPPER_ORE);
+      this.dropSelf(Blocks.CUT_COPPER);
+      this.dropSelf(Blocks.EXPOSED_CUT_COPPER);
+      this.dropSelf(Blocks.WEATHERED_CUT_COPPER);
+      this.dropSelf(Blocks.OXIDIZED_CUT_COPPER);
+      this.dropSelf(Blocks.WAXED_COPPER_BLOCK);
+      this.dropSelf(Blocks.WAXED_WEATHERED_COPPER);
+      this.dropSelf(Blocks.WAXED_EXPOSED_COPPER);
+      this.dropSelf(Blocks.WAXED_CUT_COPPER);
+      this.dropSelf(Blocks.WAXED_WEATHERED_CUT_COPPER);
+      this.dropSelf(Blocks.WAXED_EXPOSED_CUT_COPPER);
+      this.dropSelf(Blocks.WAXED_CUT_COPPER_STAIRS);
+      this.dropSelf(Blocks.WAXED_EXPOSED_CUT_COPPER_STAIRS);
+      this.dropSelf(Blocks.WAXED_WEATHERED_CUT_COPPER_STAIRS);
+      this.dropSelf(Blocks.CUT_COPPER_STAIRS);
+      this.dropSelf(Blocks.EXPOSED_CUT_COPPER_STAIRS);
+      this.dropSelf(Blocks.WEATHERED_CUT_COPPER_STAIRS);
+      this.dropSelf(Blocks.OXIDIZED_CUT_COPPER_STAIRS);
+      this.dropSelf(Blocks.LIGHTNING_ROD);
+      this.dropSelf(Blocks.POINTED_DRIPSTONE);
+      this.dropSelf(Blocks.DRIPSTONE_BLOCK);
+      this.dropSelf(Blocks.SPORE_BLOSSOM);
+      this.dropSelf(Blocks.FLOWERING_AZALEA);
+      this.dropSelf(Blocks.AZALEA);
+      this.dropSelf(Blocks.MOSS_CARPET);
+      this.dropSelf(Blocks.BIG_DRIPLEAF);
+      this.dropSelf(Blocks.MOSS_BLOCK);
+      this.dropSelf(Blocks.ROOTED_DIRT);
+      this.dropSelf(Blocks.COBBLED_DEEPSLATE);
+      this.dropSelf(Blocks.COBBLED_DEEPSLATE_STAIRS);
+      this.dropSelf(Blocks.COBBLED_DEEPSLATE_WALL);
+      this.dropSelf(Blocks.POLISHED_DEEPSLATE);
+      this.dropSelf(Blocks.POLISHED_DEEPSLATE_STAIRS);
+      this.dropSelf(Blocks.POLISHED_DEEPSLATE_WALL);
+      this.dropSelf(Blocks.DEEPSLATE_TILES);
+      this.dropSelf(Blocks.DEEPSLATE_TILE_STAIRS);
+      this.dropSelf(Blocks.DEEPSLATE_TILE_WALL);
+      this.dropSelf(Blocks.DEEPSLATE_BRICKS);
+      this.dropSelf(Blocks.DEEPSLATE_BRICK_STAIRS);
+      this.dropSelf(Blocks.DEEPSLATE_BRICK_WALL);
+      this.dropSelf(Blocks.CHISELED_DEEPSLATE);
       this.dropOther(Blocks.FARMLAND, Blocks.DIRT);
       this.dropOther(Blocks.TRIPWIRE, Items.STRING);
-      this.dropOther(Blocks.GRASS_PATH, Blocks.DIRT);
+      this.dropOther(Blocks.DIRT_PATH, Blocks.DIRT);
       this.dropOther(Blocks.KELP_PLANT, Blocks.KELP);
       this.dropOther(Blocks.BAMBOO_SAPLING, Blocks.BAMBOO);
+      this.dropOther(Blocks.WATER_CAULDRON, Blocks.CAULDRON);
+      this.dropOther(Blocks.LAVA_CAULDRON, Blocks.CAULDRON);
+      this.dropOther(Blocks.POWDER_SNOW_CAULDRON, Blocks.CAULDRON);
       this.add(Blocks.STONE, (var0) -> {
          return createSingleItemTableWithSilkTouch(var0, Blocks.COBBLESTONE);
       });
+      this.add(Blocks.DEEPSLATE, (var0) -> {
+         return createSingleItemTableWithSilkTouch(var0, Blocks.COBBLED_DEEPSLATE);
+      });
       this.add(Blocks.GRASS_BLOCK, (var0) -> {
          return createSingleItemTableWithSilkTouch(var0, Blocks.DIRT);
       });
       this.add(Blocks.PODZOL, (var0) -> {
          return createSingleItemTableWithSilkTouch(var0, Blocks.DIRT);
@@ -662,22 +744,22 @@
       });
       this.add(Blocks.WARPED_NYLIUM, (var0) -> {
          return createSingleItemTableWithSilkTouch(var0, Blocks.NETHERRACK);
       });
       this.add(Blocks.BOOKSHELF, (var0) -> {
-         return createSingleItemTableWithSilkTouch(var0, Items.BOOK, ConstantIntValue.exactly(3));
+         return createSingleItemTableWithSilkTouch(var0, Items.BOOK, ConstantValue.exactly(3.0F));
       });
       this.add(Blocks.CLAY, (var0) -> {
-         return createSingleItemTableWithSilkTouch(var0, Items.CLAY_BALL, ConstantIntValue.exactly(4));
+         return createSingleItemTableWithSilkTouch(var0, Items.CLAY_BALL, ConstantValue.exactly(4.0F));
       });
       this.add(Blocks.ENDER_CHEST, (var0) -> {
-         return createSingleItemTableWithSilkTouch(var0, Blocks.OBSIDIAN, ConstantIntValue.exactly(8));
+         return createSingleItemTableWithSilkTouch(var0, Blocks.OBSIDIAN, ConstantValue.exactly(8.0F));
       });
       this.add(Blocks.SNOW_BLOCK, (var0) -> {
-         return createSingleItemTableWithSilkTouch(var0, Items.SNOWBALL, ConstantIntValue.exactly(4));
+         return createSingleItemTableWithSilkTouch(var0, Items.SNOWBALL, ConstantValue.exactly(4.0F));
       });
-      this.add(Blocks.CHORUS_PLANT, createSingleItemTable(Items.CHORUS_FRUIT, RandomValueBounds.between(0.0F, 1.0F)));
+      this.add(Blocks.CHORUS_PLANT, createSingleItemTable(Items.CHORUS_FRUIT, UniformGenerator.between(0.0F, 1.0F)));
       this.dropPottedContents(Blocks.POTTED_OAK_SAPLING);
       this.dropPottedContents(Blocks.POTTED_SPRUCE_SAPLING);
       this.dropPottedContents(Blocks.POTTED_BIRCH_SAPLING);
       this.dropPottedContents(Blocks.POTTED_JUNGLE_SAPLING);
       this.dropPottedContents(Blocks.POTTED_ACACIA_SAPLING);
@@ -743,10 +825,21 @@
       this.add(Blocks.CRIMSON_SLAB, BlockLoot::createSlabItemTable);
       this.add(Blocks.WARPED_SLAB, BlockLoot::createSlabItemTable);
       this.add(Blocks.BLACKSTONE_SLAB, BlockLoot::createSlabItemTable);
       this.add(Blocks.POLISHED_BLACKSTONE_BRICK_SLAB, BlockLoot::createSlabItemTable);
       this.add(Blocks.POLISHED_BLACKSTONE_SLAB, BlockLoot::createSlabItemTable);
+      this.add(Blocks.OXIDIZED_CUT_COPPER_SLAB, BlockLoot::createSlabItemTable);
+      this.add(Blocks.WEATHERED_CUT_COPPER_SLAB, BlockLoot::createSlabItemTable);
+      this.add(Blocks.EXPOSED_CUT_COPPER_SLAB, BlockLoot::createSlabItemTable);
+      this.add(Blocks.CUT_COPPER_SLAB, BlockLoot::createSlabItemTable);
+      this.add(Blocks.WAXED_WEATHERED_CUT_COPPER_SLAB, BlockLoot::createSlabItemTable);
+      this.add(Blocks.WAXED_EXPOSED_CUT_COPPER_SLAB, BlockLoot::createSlabItemTable);
+      this.add(Blocks.WAXED_CUT_COPPER_SLAB, BlockLoot::createSlabItemTable);
+      this.add(Blocks.COBBLED_DEEPSLATE_SLAB, BlockLoot::createSlabItemTable);
+      this.add(Blocks.POLISHED_DEEPSLATE_SLAB, BlockLoot::createSlabItemTable);
+      this.add(Blocks.DEEPSLATE_TILE_SLAB, BlockLoot::createSlabItemTable);
+      this.add(Blocks.DEEPSLATE_BRICK_SLAB, BlockLoot::createSlabItemTable);
       this.add(Blocks.ACACIA_DOOR, BlockLoot::createDoorTable);
       this.add(Blocks.BIRCH_DOOR, BlockLoot::createDoorTable);
       this.add(Blocks.DARK_OAK_DOOR, BlockLoot::createDoorTable);
       this.add(Blocks.IRON_DOOR, BlockLoot::createDoorTable);
       this.add(Blocks.JUNGLE_DOOR, BlockLoot::createDoorTable);
@@ -812,20 +905,39 @@
          return createSinglePropConditionTable(var0, DoublePlantBlock.HALF, DoubleBlockHalf.LOWER);
       });
       this.add(Blocks.ROSE_BUSH, (var0) -> {
          return createSinglePropConditionTable(var0, DoublePlantBlock.HALF, DoubleBlockHalf.LOWER);
       });
-      this.add(Blocks.TNT, LootTable.lootTable().withPool((LootPool.Builder)applyExplosionCondition(Blocks.TNT, LootPool.lootPool().setRolls(ConstantIntValue.exactly(1)).add(LootItem.lootTableItem(Blocks.TNT).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(Blocks.TNT).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(TntBlock.UNSTABLE, false)))))));
+      this.add(Blocks.TNT, LootTable.lootTable().withPool((LootPool.Builder)applyExplosionCondition(Blocks.TNT, LootPool.lootPool().setRolls(ConstantValue.exactly(1.0F)).add(LootItem.lootTableItem(Blocks.TNT).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(Blocks.TNT).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(TntBlock.UNSTABLE, false)))))));
       this.add(Blocks.COCOA, (var0) -> {
-         return LootTable.lootTable().withPool(LootPool.lootPool().setRolls(ConstantIntValue.exactly(1)).add((LootPoolEntryContainer.Builder)applyExplosionDecay(var0, LootItem.lootTableItem(Items.COCOA_BEANS).apply(SetItemCountFunction.setCount(ConstantIntValue.exactly(3)).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(CocoaBlock.AGE, 2)))))));
+         return LootTable.lootTable().withPool(LootPool.lootPool().setRolls(ConstantValue.exactly(1.0F)).add((LootPoolEntryContainer.Builder)applyExplosionDecay(var0, LootItem.lootTableItem(Items.COCOA_BEANS).apply(SetItemCountFunction.setCount(ConstantValue.exactly(3.0F)).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(CocoaBlock.AGE, 2)))))));
       });
       this.add(Blocks.SEA_PICKLE, (var0) -> {
-         return LootTable.lootTable().withPool(LootPool.lootPool().setRolls(ConstantIntValue.exactly(1)).add((LootPoolEntryContainer.Builder)applyExplosionDecay(Blocks.SEA_PICKLE, LootItem.lootTableItem(var0).apply(SetItemCountFunction.setCount(ConstantIntValue.exactly(2)).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(SeaPickleBlock.PICKLES, 2)))).apply(SetItemCountFunction.setCount(ConstantIntValue.exactly(3)).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(SeaPickleBlock.PICKLES, 3)))).apply(SetItemCountFunction.setCount(ConstantIntValue.exactly(4)).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(SeaPickleBlock.PICKLES, 4)))))));
+         return LootTable.lootTable().withPool(LootPool.lootPool().setRolls(ConstantValue.exactly(1.0F)).add((LootPoolEntryContainer.Builder)applyExplosionDecay(Blocks.SEA_PICKLE, LootItem.lootTableItem(var0).apply(SetItemCountFunction.setCount(ConstantValue.exactly(2.0F)).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(SeaPickleBlock.PICKLES, 2)))).apply(SetItemCountFunction.setCount(ConstantValue.exactly(3.0F)).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(SeaPickleBlock.PICKLES, 3)))).apply(SetItemCountFunction.setCount(ConstantValue.exactly(4.0F)).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(SeaPickleBlock.PICKLES, 4)))))));
       });
       this.add(Blocks.COMPOSTER, (var0) -> {
          return LootTable.lootTable().withPool(LootPool.lootPool().add((LootPoolEntryContainer.Builder)applyExplosionDecay(var0, LootItem.lootTableItem(Items.COMPOSTER)))).withPool(LootPool.lootPool().add(LootItem.lootTableItem(Items.BONE_MEAL)).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(ComposterBlock.LEVEL, 8))));
       });
+      this.add(Blocks.CAVE_VINES_HEAD, BlockLoot::createCaveVinesDrop);
+      this.add(Blocks.CAVE_VINES_BODY, BlockLoot::createCaveVinesDrop);
+      this.add(Blocks.CANDLE, BlockLoot::createCandleDrops);
+      this.add(Blocks.WHITE_CANDLE, BlockLoot::createCandleDrops);
+      this.add(Blocks.ORANGE_CANDLE, BlockLoot::createCandleDrops);
+      this.add(Blocks.MAGENTA_CANDLE, BlockLoot::createCandleDrops);
+      this.add(Blocks.LIGHT_BLUE_CANDLE, BlockLoot::createCandleDrops);
+      this.add(Blocks.YELLOW_CANDLE, BlockLoot::createCandleDrops);
+      this.add(Blocks.LIME_CANDLE, BlockLoot::createCandleDrops);
+      this.add(Blocks.PINK_CANDLE, BlockLoot::createCandleDrops);
+      this.add(Blocks.GRAY_CANDLE, BlockLoot::createCandleDrops);
+      this.add(Blocks.LIGHT_GRAY_CANDLE, BlockLoot::createCandleDrops);
+      this.add(Blocks.CYAN_CANDLE, BlockLoot::createCandleDrops);
+      this.add(Blocks.PURPLE_CANDLE, BlockLoot::createCandleDrops);
+      this.add(Blocks.BLUE_CANDLE, BlockLoot::createCandleDrops);
+      this.add(Blocks.BROWN_CANDLE, BlockLoot::createCandleDrops);
+      this.add(Blocks.GREEN_CANDLE, BlockLoot::createCandleDrops);
+      this.add(Blocks.RED_CANDLE, BlockLoot::createCandleDrops);
+      this.add(Blocks.BLACK_CANDLE, BlockLoot::createCandleDrops);
       this.add(Blocks.BEACON, BlockLoot::createNameableBlockEntityTable);
       this.add(Blocks.BREWING_STAND, BlockLoot::createNameableBlockEntityTable);
       this.add(Blocks.CHEST, BlockLoot::createNameableBlockEntityTable);
       this.add(Blocks.DISPENSER, BlockLoot::createNameableBlockEntityTable);
       this.add(Blocks.DROPPER, BlockLoot::createNameableBlockEntityTable);
@@ -877,11 +989,11 @@
       this.add(Blocks.PURPLE_BANNER, BlockLoot::createBannerDrop);
       this.add(Blocks.RED_BANNER, BlockLoot::createBannerDrop);
       this.add(Blocks.WHITE_BANNER, BlockLoot::createBannerDrop);
       this.add(Blocks.YELLOW_BANNER, BlockLoot::createBannerDrop);
       this.add(Blocks.PLAYER_HEAD, (var0) -> {
-         return LootTable.lootTable().withPool((LootPool.Builder)applyExplosionCondition(var0, LootPool.lootPool().setRolls(ConstantIntValue.exactly(1)).add(LootItem.lootTableItem(var0).apply(CopyNbtFunction.copyData(CopyNbtFunction.DataSource.BLOCK_ENTITY).copy("SkullOwner", "SkullOwner")))));
+         return LootTable.lootTable().withPool((LootPool.Builder)applyExplosionCondition(var0, LootPool.lootPool().setRolls(ConstantValue.exactly(1.0F)).add(LootItem.lootTableItem(var0).apply(CopyNbtFunction.copyData(ContextNbtProvider.BLOCK_ENTITY).copy("SkullOwner", "SkullOwner")))));
       });
       this.add(Blocks.BEE_NEST, BlockLoot::createBeeNestDrop);
       this.add(Blocks.BEEHIVE, BlockLoot::createBeeHiveDrop);
       this.add(Blocks.BIRCH_LEAVES, (var0) -> {
          return createLeavesDrops(var0, Blocks.BIRCH_SAPLING, NORMAL_LEAVES_SAPLING_CHANCES);
@@ -899,20 +1011,26 @@
          return createOakLeavesDrops(var0, Blocks.OAK_SAPLING, NORMAL_LEAVES_SAPLING_CHANCES);
       });
       this.add(Blocks.DARK_OAK_LEAVES, (var0) -> {
          return createOakLeavesDrops(var0, Blocks.DARK_OAK_SAPLING, NORMAL_LEAVES_SAPLING_CHANCES);
       });
+      this.add(Blocks.AZALEA_LEAVES, (var0) -> {
+         return createLeavesDrops(var0, Blocks.AZALEA, NORMAL_LEAVES_SAPLING_CHANCES);
+      });
+      this.add(Blocks.AZALEA_LEAVES_FLOWERS, (var0) -> {
+         return createLeavesDrops(var0, Blocks.FLOWERING_AZALEA, NORMAL_LEAVES_SAPLING_CHANCES);
+      });
       LootItemBlockStatePropertyCondition.Builder var2 = LootItemBlockStatePropertyCondition.hasBlockStateProperties(Blocks.BEETROOTS).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(BeetrootBlock.AGE, 3));
       this.add(Blocks.BEETROOTS, createCropDrops(Blocks.BEETROOTS, Items.BEETROOT, Items.BEETROOT_SEEDS, var2));
       LootItemBlockStatePropertyCondition.Builder var3 = LootItemBlockStatePropertyCondition.hasBlockStateProperties(Blocks.WHEAT).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(CropBlock.AGE, 7));
       this.add(Blocks.WHEAT, createCropDrops(Blocks.WHEAT, Items.WHEAT, Items.WHEAT_SEEDS, var3));
       LootItemBlockStatePropertyCondition.Builder var4 = LootItemBlockStatePropertyCondition.hasBlockStateProperties(Blocks.CARROTS).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(CarrotBlock.AGE, 7));
       this.add(Blocks.CARROTS, (LootTable.Builder)applyExplosionDecay(Blocks.CARROTS, LootTable.lootTable().withPool(LootPool.lootPool().add(LootItem.lootTableItem(Items.CARROT))).withPool(LootPool.lootPool().when(var4).add(LootItem.lootTableItem(Items.CARROT).apply(ApplyBonusCount.addBonusBinomialDistributionCount(Enchantments.BLOCK_FORTUNE, 0.5714286F, 3))))));
       LootItemBlockStatePropertyCondition.Builder var5 = LootItemBlockStatePropertyCondition.hasBlockStateProperties(Blocks.POTATOES).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(PotatoBlock.AGE, 7));
       this.add(Blocks.POTATOES, (LootTable.Builder)applyExplosionDecay(Blocks.POTATOES, LootTable.lootTable().withPool(LootPool.lootPool().add(LootItem.lootTableItem(Items.POTATO))).withPool(LootPool.lootPool().when(var5).add(LootItem.lootTableItem(Items.POTATO).apply(ApplyBonusCount.addBonusBinomialDistributionCount(Enchantments.BLOCK_FORTUNE, 0.5714286F, 3)))).withPool(LootPool.lootPool().when(var5).add(LootItem.lootTableItem(Items.POISONOUS_POTATO).when(LootItemRandomChanceCondition.randomChance(0.02F))))));
       this.add(Blocks.SWEET_BERRY_BUSH, (var0) -> {
-         return (LootTable.Builder)applyExplosionDecay(var0, LootTable.lootTable().withPool(LootPool.lootPool().when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(Blocks.SWEET_BERRY_BUSH).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(SweetBerryBushBlock.AGE, 3))).add(LootItem.lootTableItem(Items.SWEET_BERRIES)).apply(SetItemCountFunction.setCount(RandomValueBounds.between(2.0F, 3.0F))).apply(ApplyBonusCount.addUniformBonusCount(Enchantments.BLOCK_FORTUNE))).withPool(LootPool.lootPool().when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(Blocks.SWEET_BERRY_BUSH).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(SweetBerryBushBlock.AGE, 2))).add(LootItem.lootTableItem(Items.SWEET_BERRIES)).apply(SetItemCountFunction.setCount(RandomValueBounds.between(1.0F, 2.0F))).apply(ApplyBonusCount.addUniformBonusCount(Enchantments.BLOCK_FORTUNE))));
+         return (LootTable.Builder)applyExplosionDecay(var0, LootTable.lootTable().withPool(LootPool.lootPool().when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(Blocks.SWEET_BERRY_BUSH).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(SweetBerryBushBlock.AGE, 3))).add(LootItem.lootTableItem(Items.SWEET_BERRIES)).apply(SetItemCountFunction.setCount(UniformGenerator.between(2.0F, 3.0F))).apply(ApplyBonusCount.addUniformBonusCount(Enchantments.BLOCK_FORTUNE))).withPool(LootPool.lootPool().when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(Blocks.SWEET_BERRY_BUSH).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(SweetBerryBushBlock.AGE, 2))).add(LootItem.lootTableItem(Items.SWEET_BERRIES)).apply(SetItemCountFunction.setCount(UniformGenerator.between(1.0F, 2.0F))).apply(ApplyBonusCount.addUniformBonusCount(Enchantments.BLOCK_FORTUNE))));
       });
       this.add(Blocks.BROWN_MUSHROOM_BLOCK, (var0) -> {
          return createMushroomBlockDrop(var0, Blocks.BROWN_MUSHROOM);
       });
       this.add(Blocks.RED_MUSHROOM_BLOCK, (var0) -> {
@@ -928,25 +1046,30 @@
          return createOreDrop(var0, Items.QUARTZ);
       });
       this.add(Blocks.DIAMOND_ORE, (var0) -> {
          return createOreDrop(var0, Items.DIAMOND);
       });
+      this.add(Blocks.DEEPSLATE_DIAMOND_ORE, (var0) -> {
+         return createOreDrop(var0, Items.DIAMOND);
+      });
       this.add(Blocks.NETHER_GOLD_ORE, (var0) -> {
-         return createSilkTouchDispatchTable(var0, (LootPoolEntryContainer.Builder)applyExplosionDecay(var0, LootItem.lootTableItem(Items.GOLD_NUGGET).apply(SetItemCountFunction.setCount(RandomValueBounds.between(2.0F, 6.0F))).apply(ApplyBonusCount.addOreBonusCount(Enchantments.BLOCK_FORTUNE))));
+         return createSilkTouchDispatchTable(var0, (LootPoolEntryContainer.Builder)applyExplosionDecay(var0, LootItem.lootTableItem(Items.GOLD_NUGGET).apply(SetItemCountFunction.setCount(UniformGenerator.between(2.0F, 6.0F))).apply(ApplyBonusCount.addOreBonusCount(Enchantments.BLOCK_FORTUNE))));
       });
-      this.add(Blocks.LAPIS_ORE, (var0) -> {
-         return createSilkTouchDispatchTable(var0, (LootPoolEntryContainer.Builder)applyExplosionDecay(var0, LootItem.lootTableItem(Items.LAPIS_LAZULI).apply(SetItemCountFunction.setCount(RandomValueBounds.between(4.0F, 9.0F))).apply(ApplyBonusCount.addOreBonusCount(Enchantments.BLOCK_FORTUNE))));
-      });
+      this.add(Blocks.LAPIS_ORE, BlockLoot::createLapisOreDrops);
+      this.add(Blocks.DEEPSLATE_LAPIS_ORE, BlockLoot::createLapisOreDrops);
       this.add(Blocks.COBWEB, (var0) -> {
          return createSilkTouchOrShearsDispatchTable(var0, (LootPoolEntryContainer.Builder)applyExplosionCondition(var0, LootItem.lootTableItem(Items.STRING)));
       });
       this.add(Blocks.DEAD_BUSH, (var0) -> {
-         return createShearsDispatchTable(var0, (LootPoolEntryContainer.Builder)applyExplosionDecay(var0, LootItem.lootTableItem(Items.STICK).apply(SetItemCountFunction.setCount(RandomValueBounds.between(0.0F, 2.0F)))));
+         return createShearsDispatchTable(var0, (LootPoolEntryContainer.Builder)applyExplosionDecay(var0, LootItem.lootTableItem(Items.STICK).apply(SetItemCountFunction.setCount(UniformGenerator.between(0.0F, 2.0F)))));
       });
       this.add(Blocks.NETHER_SPROUTS, BlockLoot::createShearsOnlyDrop);
       this.add(Blocks.SEAGRASS, BlockLoot::createShearsOnlyDrop);
       this.add(Blocks.VINE, BlockLoot::createShearsOnlyDrop);
+      this.add(Blocks.GLOW_LICHEN, BlockLoot::createShearsOnlyDrop);
+      this.add(Blocks.HANGING_ROOTS, BlockLoot::createShearsOnlyDrop);
+      this.add(Blocks.SMALL_DRIPLEAF, BlockLoot::createShearsOnlyDrop);
       this.add(Blocks.TALL_SEAGRASS, createDoublePlantShearsDrop(Blocks.SEAGRASS));
       this.add(Blocks.LARGE_FERN, (var0) -> {
          return createDoublePlantWithSeedDrops(var0, Blocks.FERN);
       });
       this.add(Blocks.TALL_GRASS, (var0) -> {
@@ -963,44 +1086,49 @@
       });
       this.add(Blocks.ATTACHED_PUMPKIN_STEM, (var0) -> {
          return createAttachedStemDrops(var0, Items.PUMPKIN_SEEDS);
       });
       this.add(Blocks.CHORUS_FLOWER, (var0) -> {
-         return LootTable.lootTable().withPool(LootPool.lootPool().setRolls(ConstantIntValue.exactly(1)).add(((LootPoolSingletonContainer.Builder)applyExplosionCondition(var0, LootItem.lootTableItem(var0))).when(LootItemEntityPropertyCondition.entityPresent(LootContext.EntityTarget.THIS))));
+         return LootTable.lootTable().withPool(LootPool.lootPool().setRolls(ConstantValue.exactly(1.0F)).add(((LootPoolSingletonContainer.Builder)applyExplosionCondition(var0, LootItem.lootTableItem(var0))).when(LootItemEntityPropertyCondition.entityPresent(LootContext.EntityTarget.THIS))));
       });
       this.add(Blocks.FERN, BlockLoot::createGrassDrops);
       this.add(Blocks.GRASS, BlockLoot::createGrassDrops);
       this.add(Blocks.GLOWSTONE, (var0) -> {
-         return createSilkTouchDispatchTable(var0, (LootPoolEntryContainer.Builder)applyExplosionDecay(var0, LootItem.lootTableItem(Items.GLOWSTONE_DUST).apply(SetItemCountFunction.setCount(RandomValueBounds.between(2.0F, 4.0F))).apply(ApplyBonusCount.addUniformBonusCount(Enchantments.BLOCK_FORTUNE)).apply(LimitCount.limitCount(IntLimiter.clamp(1, 4)))));
+         return createSilkTouchDispatchTable(var0, (LootPoolEntryContainer.Builder)applyExplosionDecay(var0, LootItem.lootTableItem(Items.GLOWSTONE_DUST).apply(SetItemCountFunction.setCount(UniformGenerator.between(2.0F, 4.0F))).apply(ApplyBonusCount.addUniformBonusCount(Enchantments.BLOCK_FORTUNE)).apply(LimitCount.limitCount(IntRange.range(1, 4)))));
       });
       this.add(Blocks.MELON, (var0) -> {
-         return createSilkTouchDispatchTable(var0, (LootPoolEntryContainer.Builder)applyExplosionDecay(var0, LootItem.lootTableItem(Items.MELON_SLICE).apply(SetItemCountFunction.setCount(RandomValueBounds.between(3.0F, 7.0F))).apply(ApplyBonusCount.addUniformBonusCount(Enchantments.BLOCK_FORTUNE)).apply(LimitCount.limitCount(IntLimiter.upperBound(9)))));
+         return createSilkTouchDispatchTable(var0, (LootPoolEntryContainer.Builder)applyExplosionDecay(var0, LootItem.lootTableItem(Items.MELON_SLICE).apply(SetItemCountFunction.setCount(UniformGenerator.between(3.0F, 7.0F))).apply(ApplyBonusCount.addUniformBonusCount(Enchantments.BLOCK_FORTUNE)).apply(LimitCount.limitCount(IntRange.upperBound(9)))));
       });
-      this.add(Blocks.REDSTONE_ORE, (var0) -> {
-         return createSilkTouchDispatchTable(var0, (LootPoolEntryContainer.Builder)applyExplosionDecay(var0, LootItem.lootTableItem(Items.REDSTONE).apply(SetItemCountFunction.setCount(RandomValueBounds.between(4.0F, 5.0F))).apply(ApplyBonusCount.addUniformBonusCount(Enchantments.BLOCK_FORTUNE))));
-      });
+      this.add(Blocks.REDSTONE_ORE, BlockLoot::createRedstoneOreDrops);
+      this.add(Blocks.DEEPSLATE_REDSTONE_ORE, BlockLoot::createRedstoneOreDrops);
       this.add(Blocks.SEA_LANTERN, (var0) -> {
-         return createSilkTouchDispatchTable(var0, (LootPoolEntryContainer.Builder)applyExplosionDecay(var0, LootItem.lootTableItem(Items.PRISMARINE_CRYSTALS).apply(SetItemCountFunction.setCount(RandomValueBounds.between(2.0F, 3.0F))).apply(ApplyBonusCount.addUniformBonusCount(Enchantments.BLOCK_FORTUNE)).apply(LimitCount.limitCount(IntLimiter.clamp(1, 5)))));
+         return createSilkTouchDispatchTable(var0, (LootPoolEntryContainer.Builder)applyExplosionDecay(var0, LootItem.lootTableItem(Items.PRISMARINE_CRYSTALS).apply(SetItemCountFunction.setCount(UniformGenerator.between(2.0F, 3.0F))).apply(ApplyBonusCount.addUniformBonusCount(Enchantments.BLOCK_FORTUNE)).apply(LimitCount.limitCount(IntRange.range(1, 5)))));
       });
       this.add(Blocks.NETHER_WART, (var0) -> {
-         return LootTable.lootTable().withPool((LootPool.Builder)applyExplosionDecay(var0, LootPool.lootPool().setRolls(ConstantIntValue.exactly(1)).add(LootItem.lootTableItem(Items.NETHER_WART).apply(SetItemCountFunction.setCount(RandomValueBounds.between(2.0F, 4.0F)).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(NetherWartBlock.AGE, 3)))).apply(ApplyBonusCount.addUniformBonusCount(Enchantments.BLOCK_FORTUNE).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(NetherWartBlock.AGE, 3)))))));
+         return LootTable.lootTable().withPool((LootPool.Builder)applyExplosionDecay(var0, LootPool.lootPool().setRolls(ConstantValue.exactly(1.0F)).add(LootItem.lootTableItem(Items.NETHER_WART).apply(SetItemCountFunction.setCount(UniformGenerator.between(2.0F, 4.0F)).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(NetherWartBlock.AGE, 3)))).apply(ApplyBonusCount.addUniformBonusCount(Enchantments.BLOCK_FORTUNE).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(NetherWartBlock.AGE, 3)))))));
       });
       this.add(Blocks.SNOW, (var0) -> {
-         return LootTable.lootTable().withPool(LootPool.lootPool().when(LootItemEntityPropertyCondition.entityPresent(LootContext.EntityTarget.THIS)).add(AlternativesEntry.alternatives(AlternativesEntry.alternatives(LootItem.lootTableItem(Items.SNOWBALL).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(SnowLayerBlock.LAYERS, 1))), ((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.SNOWBALL).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(SnowLayerBlock.LAYERS, 2)))).apply(SetItemCountFunction.setCount(ConstantIntValue.exactly(2))), ((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.SNOWBALL).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(SnowLayerBlock.LAYERS, 3)))).apply(SetItemCountFunction.setCount(ConstantIntValue.exactly(3))), ((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.SNOWBALL).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(SnowLayerBlock.LAYERS, 4)))).apply(SetItemCountFunction.setCount(ConstantIntValue.exactly(4))), ((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.SNOWBALL).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(SnowLayerBlock.LAYERS, 5)))).apply(SetItemCountFunction.setCount(ConstantIntValue.exactly(5))), ((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.SNOWBALL).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(SnowLayerBlock.LAYERS, 6)))).apply(SetItemCountFunction.setCount(ConstantIntValue.exactly(6))), ((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.SNOWBALL).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(SnowLayerBlock.LAYERS, 7)))).apply(SetItemCountFunction.setCount(ConstantIntValue.exactly(7))), LootItem.lootTableItem(Items.SNOWBALL).apply(SetItemCountFunction.setCount(ConstantIntValue.exactly(8)))).when(HAS_NO_SILK_TOUCH), AlternativesEntry.alternatives(LootItem.lootTableItem(Blocks.SNOW).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(SnowLayerBlock.LAYERS, 1))), LootItem.lootTableItem(Blocks.SNOW).apply(SetItemCountFunction.setCount(ConstantIntValue.exactly(2))).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(SnowLayerBlock.LAYERS, 2))), LootItem.lootTableItem(Blocks.SNOW).apply(SetItemCountFunction.setCount(ConstantIntValue.exactly(3))).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(SnowLayerBlock.LAYERS, 3))), LootItem.lootTableItem(Blocks.SNOW).apply(SetItemCountFunction.setCount(ConstantIntValue.exactly(4))).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(SnowLayerBlock.LAYERS, 4))), LootItem.lootTableItem(Blocks.SNOW).apply(SetItemCountFunction.setCount(ConstantIntValue.exactly(5))).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(SnowLayerBlock.LAYERS, 5))), LootItem.lootTableItem(Blocks.SNOW).apply(SetItemCountFunction.setCount(ConstantIntValue.exactly(6))).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(SnowLayerBlock.LAYERS, 6))), LootItem.lootTableItem(Blocks.SNOW).apply(SetItemCountFunction.setCount(ConstantIntValue.exactly(7))).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(SnowLayerBlock.LAYERS, 7))), LootItem.lootTableItem(Blocks.SNOW_BLOCK)))));
+         return LootTable.lootTable().withPool(LootPool.lootPool().when(LootItemEntityPropertyCondition.entityPresent(LootContext.EntityTarget.THIS)).add(AlternativesEntry.alternatives(AlternativesEntry.alternatives(LootItem.lootTableItem(Items.SNOWBALL).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(SnowLayerBlock.LAYERS, 1))), ((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.SNOWBALL).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(SnowLayerBlock.LAYERS, 2)))).apply(SetItemCountFunction.setCount(ConstantValue.exactly(2.0F))), ((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.SNOWBALL).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(SnowLayerBlock.LAYERS, 3)))).apply(SetItemCountFunction.setCount(ConstantValue.exactly(3.0F))), ((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.SNOWBALL).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(SnowLayerBlock.LAYERS, 4)))).apply(SetItemCountFunction.setCount(ConstantValue.exactly(4.0F))), ((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.SNOWBALL).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(SnowLayerBlock.LAYERS, 5)))).apply(SetItemCountFunction.setCount(ConstantValue.exactly(5.0F))), ((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.SNOWBALL).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(SnowLayerBlock.LAYERS, 6)))).apply(SetItemCountFunction.setCount(ConstantValue.exactly(6.0F))), ((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.SNOWBALL).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(SnowLayerBlock.LAYERS, 7)))).apply(SetItemCountFunction.setCount(ConstantValue.exactly(7.0F))), LootItem.lootTableItem(Items.SNOWBALL).apply(SetItemCountFunction.setCount(ConstantValue.exactly(8.0F)))).when(HAS_NO_SILK_TOUCH), AlternativesEntry.alternatives(LootItem.lootTableItem(Blocks.SNOW).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(SnowLayerBlock.LAYERS, 1))), LootItem.lootTableItem(Blocks.SNOW).apply(SetItemCountFunction.setCount(ConstantValue.exactly(2.0F))).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(SnowLayerBlock.LAYERS, 2))), LootItem.lootTableItem(Blocks.SNOW).apply(SetItemCountFunction.setCount(ConstantValue.exactly(3.0F))).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(SnowLayerBlock.LAYERS, 3))), LootItem.lootTableItem(Blocks.SNOW).apply(SetItemCountFunction.setCount(ConstantValue.exactly(4.0F))).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(SnowLayerBlock.LAYERS, 4))), LootItem.lootTableItem(Blocks.SNOW).apply(SetItemCountFunction.setCount(ConstantValue.exactly(5.0F))).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(SnowLayerBlock.LAYERS, 5))), LootItem.lootTableItem(Blocks.SNOW).apply(SetItemCountFunction.setCount(ConstantValue.exactly(6.0F))).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(SnowLayerBlock.LAYERS, 6))), LootItem.lootTableItem(Blocks.SNOW).apply(SetItemCountFunction.setCount(ConstantValue.exactly(7.0F))).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(SnowLayerBlock.LAYERS, 7))), LootItem.lootTableItem(Blocks.SNOW_BLOCK)))));
       });
       this.add(Blocks.GRAVEL, (var0) -> {
          return createSilkTouchDispatchTable(var0, (LootPoolEntryContainer.Builder)applyExplosionCondition(var0, ((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.FLINT).when(BonusLevelTableCondition.bonusLevelFlatChance(Enchantments.BLOCK_FORTUNE, 0.1F, 0.14285715F, 0.25F, 1.0F))).otherwise(LootItem.lootTableItem(var0))));
       });
       this.add(Blocks.CAMPFIRE, (var0) -> {
-         return createSilkTouchDispatchTable(var0, (LootPoolEntryContainer.Builder)applyExplosionCondition(var0, LootItem.lootTableItem(Items.CHARCOAL).apply(SetItemCountFunction.setCount(ConstantIntValue.exactly(2)))));
+         return createSilkTouchDispatchTable(var0, (LootPoolEntryContainer.Builder)applyExplosionCondition(var0, LootItem.lootTableItem(Items.CHARCOAL).apply(SetItemCountFunction.setCount(ConstantValue.exactly(2.0F)))));
       });
       this.add(Blocks.GILDED_BLACKSTONE, (var0) -> {
-         return createSilkTouchDispatchTable(var0, (LootPoolEntryContainer.Builder)applyExplosionCondition(var0, ((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.GOLD_NUGGET).apply(SetItemCountFunction.setCount(RandomValueBounds.between(2.0F, 5.0F))).when(BonusLevelTableCondition.bonusLevelFlatChance(Enchantments.BLOCK_FORTUNE, 0.1F, 0.14285715F, 0.25F, 1.0F))).otherwise(LootItem.lootTableItem(var0))));
+         return createSilkTouchDispatchTable(var0, (LootPoolEntryContainer.Builder)applyExplosionCondition(var0, ((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.GOLD_NUGGET).apply(SetItemCountFunction.setCount(UniformGenerator.between(2.0F, 5.0F))).when(BonusLevelTableCondition.bonusLevelFlatChance(Enchantments.BLOCK_FORTUNE, 0.1F, 0.14285715F, 0.25F, 1.0F))).otherwise(LootItem.lootTableItem(var0))));
       });
       this.add(Blocks.SOUL_CAMPFIRE, (var0) -> {
-         return createSilkTouchDispatchTable(var0, (LootPoolEntryContainer.Builder)applyExplosionCondition(var0, LootItem.lootTableItem(Items.SOUL_SOIL).apply(SetItemCountFunction.setCount(ConstantIntValue.exactly(1)))));
+         return createSilkTouchDispatchTable(var0, (LootPoolEntryContainer.Builder)applyExplosionCondition(var0, LootItem.lootTableItem(Items.SOUL_SOIL).apply(SetItemCountFunction.setCount(ConstantValue.exactly(1.0F)))));
       });
+      this.add(Blocks.AMETHYST_CLUSTER, (var0) -> {
+         return createSilkTouchDispatchTable(var0, (LootPoolEntryContainer.Builder)applyExplosionDecay(var0, LootItem.lootTableItem(Items.AMETHYST_SHARD).apply(SetItemCountFunction.setCount(ConstantValue.exactly(4.0F))).apply(ApplyBonusCount.addOreBonusCount(Enchantments.BLOCK_FORTUNE))));
+      });
+      this.dropWhenSilkTouch(Blocks.SMALL_AMETHYST_BUD);
+      this.dropWhenSilkTouch(Blocks.MEDIUM_AMETHYST_BUD);
+      this.dropWhenSilkTouch(Blocks.LARGE_AMETHYST_BUD);
       this.dropWhenSilkTouch(Blocks.GLASS);
       this.dropWhenSilkTouch(Blocks.WHITE_STAINED_GLASS);
       this.dropWhenSilkTouch(Blocks.ORANGE_STAINED_GLASS);
       this.dropWhenSilkTouch(Blocks.MAGENTA_STAINED_GLASS);
       this.dropWhenSilkTouch(Blocks.LIGHT_BLUE_STAINED_GLASS);
@@ -1065,15 +1193,35 @@
       this.otherWhenSilkTouch(Blocks.INFESTED_CRACKED_STONE_BRICKS, Blocks.CRACKED_STONE_BRICKS);
       this.otherWhenSilkTouch(Blocks.INFESTED_CHISELED_STONE_BRICKS, Blocks.CHISELED_STONE_BRICKS);
       this.addNetherVinesDropTable(Blocks.WEEPING_VINES, Blocks.WEEPING_VINES_PLANT);
       this.addNetherVinesDropTable(Blocks.TWISTING_VINES, Blocks.TWISTING_VINES_PLANT);
       this.add(Blocks.CAKE, noDrop());
+      this.add(Blocks.CANDLE_CAKE, createCandleCakeDrops(Blocks.CANDLE));
+      this.add(Blocks.WHITE_CANDLE_CAKE, createCandleCakeDrops(Blocks.WHITE_CANDLE));
+      this.add(Blocks.ORANGE_CANDLE_CAKE, createCandleCakeDrops(Blocks.ORANGE_CANDLE));
+      this.add(Blocks.MAGENTA_CANDLE_CAKE, createCandleCakeDrops(Blocks.MAGENTA_CANDLE));
+      this.add(Blocks.LIGHT_BLUE_CANDLE_CAKE, createCandleCakeDrops(Blocks.LIGHT_BLUE_CANDLE));
+      this.add(Blocks.YELLOW_CANDLE_CAKE, createCandleCakeDrops(Blocks.YELLOW_CANDLE));
+      this.add(Blocks.LIME_CANDLE_CAKE, createCandleCakeDrops(Blocks.LIME_CANDLE));
+      this.add(Blocks.PINK_CANDLE_CAKE, createCandleCakeDrops(Blocks.PINK_CANDLE));
+      this.add(Blocks.GRAY_CANDLE_CAKE, createCandleCakeDrops(Blocks.GRAY_CANDLE));
+      this.add(Blocks.LIGHT_GRAY_CANDLE_CAKE, createCandleCakeDrops(Blocks.LIGHT_GRAY_CANDLE));
+      this.add(Blocks.CYAN_CANDLE_CAKE, createCandleCakeDrops(Blocks.CYAN_CANDLE));
+      this.add(Blocks.PURPLE_CANDLE_CAKE, createCandleCakeDrops(Blocks.PURPLE_CANDLE));
+      this.add(Blocks.BLUE_CANDLE_CAKE, createCandleCakeDrops(Blocks.BLUE_CANDLE));
+      this.add(Blocks.BROWN_CANDLE_CAKE, createCandleCakeDrops(Blocks.BROWN_CANDLE));
+      this.add(Blocks.GREEN_CANDLE_CAKE, createCandleCakeDrops(Blocks.GREEN_CANDLE));
+      this.add(Blocks.RED_CANDLE_CAKE, createCandleCakeDrops(Blocks.RED_CANDLE));
+      this.add(Blocks.BLACK_CANDLE_CAKE, createCandleCakeDrops(Blocks.BLACK_CANDLE));
       this.add(Blocks.FROSTED_ICE, noDrop());
       this.add(Blocks.SPAWNER, noDrop());
       this.add(Blocks.FIRE, noDrop());
       this.add(Blocks.SOUL_FIRE, noDrop());
       this.add(Blocks.NETHER_PORTAL, noDrop());
+      this.add(Blocks.BUDDING_AMETHYST, noDrop());
+      this.add(Blocks.POWDER_SNOW, noDrop());
+      this.add(Blocks.BIG_DRIPLEAF_STEM, noDrop());
       HashSet var6 = Sets.newHashSet();
       Iterator var7 = Registry.BLOCK.iterator();
 
       while(var7.hasNext()) {
          Block var8 = (Block)var7.next();
