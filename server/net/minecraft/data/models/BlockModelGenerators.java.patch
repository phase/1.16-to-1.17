--- net/minecraft/data/models/BlockModelGenerators.java
+++ net/minecraft/data/models/BlockModelGenerators.java
@@ -1,30 +1,37 @@
 package net.minecraft.data.models;
 
 import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.Maps;
 import com.google.gson.JsonElement;
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
 import java.util.Arrays;
 import java.util.List;
+import java.util.Map;
 import java.util.function.BiConsumer;
 import java.util.function.BiFunction;
 import java.util.function.Consumer;
 import java.util.function.Function;
 import java.util.function.Supplier;
 import java.util.function.UnaryOperator;
 import java.util.stream.Collectors;
 import java.util.stream.IntStream;
 import javax.annotation.Nullable;
+import net.minecraft.Util;
 import net.minecraft.core.Direction;
 import net.minecraft.core.FrontAndTop;
+import net.minecraft.data.BlockFamilies;
+import net.minecraft.data.BlockFamily;
 import net.minecraft.data.models.blockstates.BlockStateGenerator;
 import net.minecraft.data.models.blockstates.Condition;
 import net.minecraft.data.models.blockstates.MultiPartGenerator;
 import net.minecraft.data.models.blockstates.MultiVariantGenerator;
 import net.minecraft.data.models.blockstates.PropertyDispatch;
 import net.minecraft.data.models.blockstates.Variant;
 import net.minecraft.data.models.blockstates.VariantProperties;
+import net.minecraft.data.models.blockstates.VariantProperty;
 import net.minecraft.data.models.model.DelegatedModel;
 import net.minecraft.data.models.model.ModelLocationUtils;
 import net.minecraft.data.models.model.ModelTemplate;
 import net.minecraft.data.models.model.ModelTemplates;
 import net.minecraft.data.models.model.TextureMapping;
@@ -34,51 +41,85 @@
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.SpawnEggItem;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.block.LayeredCauldronBlock;
 import net.minecraft.world.level.block.state.properties.AttachFace;
 import net.minecraft.world.level.block.state.properties.BambooLeaves;
 import net.minecraft.world.level.block.state.properties.BellAttachType;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.block.state.properties.BooleanProperty;
 import net.minecraft.world.level.block.state.properties.ComparatorMode;
 import net.minecraft.world.level.block.state.properties.DoorHingeSide;
 import net.minecraft.world.level.block.state.properties.DoubleBlockHalf;
+import net.minecraft.world.level.block.state.properties.DripstoneThickness;
 import net.minecraft.world.level.block.state.properties.Half;
 import net.minecraft.world.level.block.state.properties.PistonType;
 import net.minecraft.world.level.block.state.properties.Property;
 import net.minecraft.world.level.block.state.properties.RailShape;
 import net.minecraft.world.level.block.state.properties.RedstoneSide;
+import net.minecraft.world.level.block.state.properties.SculkSensorPhase;
 import net.minecraft.world.level.block.state.properties.SlabType;
 import net.minecraft.world.level.block.state.properties.StairsShape;
+import net.minecraft.world.level.block.state.properties.Tilt;
 import net.minecraft.world.level.block.state.properties.WallSide;
 
 public class BlockModelGenerators {
-   private final Consumer<BlockStateGenerator> blockStateOutput;
-   private final BiConsumer<ResourceLocation, Supplier<JsonElement>> modelOutput;
+   final Consumer<BlockStateGenerator> blockStateOutput;
+   final BiConsumer<ResourceLocation, Supplier<JsonElement>> modelOutput;
    private final Consumer<Item> skippedAutoModelsOutput;
+   final List<Block> nonOrientableTrapdoor;
+   final Map<Block, BlockModelGenerators.BlockStateGeneratorSupplier> fullBlockModelCustomGenerators;
+   final Map<Block, TexturedModel> texturedModels;
+   static final Map<BlockFamily.Variant, BiConsumer<BlockModelGenerators.BlockFamilyProvider, Block>> SHAPE_CONSUMERS;
+   public static final Map<BooleanProperty, Function<ResourceLocation, Variant>> MULTIFACE_GENERATOR;
 
+   private static BlockStateGenerator createMirroredCubeGenerator(Block var0, ResourceLocation var1, TextureMapping var2, BiConsumer<ResourceLocation, Supplier<JsonElement>> var3) {
+      ResourceLocation var4 = ModelTemplates.CUBE_MIRRORED_ALL.create(var0, var2, var3);
+      return createRotatedVariant(var0, var1, var4);
+   }
+
+   private static BlockStateGenerator createMirroredColumnGenerator(Block var0, ResourceLocation var1, TextureMapping var2, BiConsumer<ResourceLocation, Supplier<JsonElement>> var3) {
+      ResourceLocation var4 = ModelTemplates.CUBE_COLUMN_MIRRORED.create(var0, var2, var3);
+      return createRotatedVariant(var0, var1, var4).with(createRotatedPillar());
+   }
+
    public BlockModelGenerators(Consumer<BlockStateGenerator> var1, BiConsumer<ResourceLocation, Supplier<JsonElement>> var2, Consumer<Item> var3) {
+      this.nonOrientableTrapdoor = ImmutableList.of(Blocks.OAK_TRAPDOOR, Blocks.DARK_OAK_TRAPDOOR, Blocks.IRON_TRAPDOOR);
+      this.fullBlockModelCustomGenerators = ImmutableMap.builder().put(Blocks.STONE, BlockModelGenerators::createMirroredCubeGenerator).put(Blocks.DEEPSLATE, BlockModelGenerators::createMirroredColumnGenerator).build();
+      this.texturedModels = ImmutableMap.builder().put(Blocks.SANDSTONE, TexturedModel.TOP_BOTTOM_WITH_WALL.get(Blocks.SANDSTONE)).put(Blocks.RED_SANDSTONE, TexturedModel.TOP_BOTTOM_WITH_WALL.get(Blocks.RED_SANDSTONE)).put(Blocks.SMOOTH_SANDSTONE, TexturedModel.createAllSame(TextureMapping.getBlockTexture(Blocks.SANDSTONE, "_top"))).put(Blocks.SMOOTH_RED_SANDSTONE, TexturedModel.createAllSame(TextureMapping.getBlockTexture(Blocks.RED_SANDSTONE, "_top"))).put(Blocks.CUT_SANDSTONE, TexturedModel.COLUMN.get(Blocks.SANDSTONE).updateTextures((var0) -> {
+         var0.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CUT_SANDSTONE));
+      })).put(Blocks.CUT_RED_SANDSTONE, TexturedModel.COLUMN.get(Blocks.RED_SANDSTONE).updateTextures((var0) -> {
+         var0.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CUT_RED_SANDSTONE));
+      })).put(Blocks.QUARTZ_BLOCK, TexturedModel.COLUMN.get(Blocks.QUARTZ_BLOCK)).put(Blocks.SMOOTH_QUARTZ, TexturedModel.createAllSame(TextureMapping.getBlockTexture(Blocks.QUARTZ_BLOCK, "_bottom"))).put(Blocks.BLACKSTONE, TexturedModel.COLUMN_WITH_WALL.get(Blocks.BLACKSTONE)).put(Blocks.DEEPSLATE, TexturedModel.COLUMN_WITH_WALL.get(Blocks.DEEPSLATE)).put(Blocks.CHISELED_QUARTZ_BLOCK, TexturedModel.COLUMN.get(Blocks.CHISELED_QUARTZ_BLOCK).updateTextures((var0) -> {
+         var0.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CHISELED_QUARTZ_BLOCK));
+      })).put(Blocks.CHISELED_SANDSTONE, TexturedModel.COLUMN.get(Blocks.CHISELED_SANDSTONE).updateTextures((var0) -> {
+         var0.put(TextureSlot.END, TextureMapping.getBlockTexture(Blocks.SANDSTONE, "_top"));
+         var0.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CHISELED_SANDSTONE));
+      })).put(Blocks.CHISELED_RED_SANDSTONE, TexturedModel.COLUMN.get(Blocks.CHISELED_RED_SANDSTONE).updateTextures((var0) -> {
+         var0.put(TextureSlot.END, TextureMapping.getBlockTexture(Blocks.RED_SANDSTONE, "_top"));
+         var0.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CHISELED_RED_SANDSTONE));
+      })).build();
       this.blockStateOutput = var1;
       this.modelOutput = var2;
       this.skippedAutoModelsOutput = var3;
    }
 
-   private void skipAutoItemBlock(Block var1) {
+   void skipAutoItemBlock(Block var1) {
       this.skippedAutoModelsOutput.accept(var1.asItem());
    }
 
-   private void delegateItemModel(Block var1, ResourceLocation var2) {
+   void delegateItemModel(Block var1, ResourceLocation var2) {
       this.modelOutput.accept(ModelLocationUtils.getModelLocation(var1.asItem()), new DelegatedModel(var2));
    }
 
    private void delegateItemModel(Item var1, ResourceLocation var2) {
       this.modelOutput.accept(ModelLocationUtils.getModelLocation(var1), new DelegatedModel(var2));
    }
 
-   private void createSimpleFlatItemModel(Item var1) {
+   void createSimpleFlatItemModel(Item var1) {
       ModelTemplates.FLAT_ITEM.create(ModelLocationUtils.getModelLocation(var1), TextureMapping.layer0(var1), this.modelOutput);
    }
 
    private void createSimpleFlatItemModel(Block var1) {
       Item var2 = var1.asItem();
@@ -134,11 +175,11 @@
    private void createRotatedVariantBlock(Block var1) {
       ResourceLocation var2 = TexturedModel.CUBE.create(var1, this.modelOutput);
       this.blockStateOutput.accept(createRotatedVariant(var1, var2));
    }
 
-   private static BlockStateGenerator createButton(Block var0, ResourceLocation var1, ResourceLocation var2) {
+   static BlockStateGenerator createButton(Block var0, ResourceLocation var1, ResourceLocation var2) {
       return MultiVariantGenerator.multiVariant(var0).with(PropertyDispatch.property(BlockStateProperties.POWERED).select(false, (Variant)Variant.variant().with(VariantProperties.MODEL, var1)).select(true, (Variant)Variant.variant().with(VariantProperties.MODEL, var2))).with(PropertyDispatch.properties(BlockStateProperties.ATTACH_FACE, BlockStateProperties.HORIZONTAL_FACING).select(AttachFace.FLOOR, Direction.EAST, (Variant)Variant.variant().with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90)).select(AttachFace.FLOOR, Direction.WEST, (Variant)Variant.variant().with(VariantProperties.Y_ROT, VariantProperties.Rotation.R270)).select(AttachFace.FLOOR, Direction.SOUTH, (Variant)Variant.variant().with(VariantProperties.Y_ROT, VariantProperties.Rotation.R180)).select(AttachFace.FLOOR, Direction.NORTH, (Variant)Variant.variant()).select(AttachFace.WALL, Direction.EAST, (Variant)Variant.variant().with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90).with(VariantProperties.X_ROT, VariantProperties.Rotation.R90).with(VariantProperties.UV_LOCK, true)).select(AttachFace.WALL, Direction.WEST, (Variant)Variant.variant().with(VariantProperties.Y_ROT, VariantProperties.Rotation.R270).with(VariantProperties.X_ROT, VariantProperties.Rotation.R90).with(VariantProperties.UV_LOCK, true)).select(AttachFace.WALL, Direction.SOUTH, (Variant)Variant.variant().with(VariantProperties.Y_ROT, VariantProperties.Rotation.R180).with(VariantProperties.X_ROT, VariantProperties.Rotation.R90).with(VariantProperties.UV_LOCK, true)).select(AttachFace.WALL, Direction.NORTH, (Variant)Variant.variant().with(VariantProperties.X_ROT, VariantProperties.Rotation.R90).with(VariantProperties.UV_LOCK, true)).select(AttachFace.CEILING, Direction.EAST, (Variant)Variant.variant().with(VariantProperties.Y_ROT, VariantProperties.Rotation.R270).with(VariantProperties.X_ROT, VariantProperties.Rotation.R180)).select(AttachFace.CEILING, Direction.WEST, (Variant)Variant.variant().with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90).with(VariantProperties.X_ROT, VariantProperties.Rotation.R180)).select(AttachFace.CEILING, Direction.SOUTH, (Variant)Variant.variant().with(VariantProperties.X_ROT, VariantProperties.Rotation.R180)).select(AttachFace.CEILING, Direction.NORTH, (Variant)Variant.variant().with(VariantProperties.Y_ROT, VariantProperties.Rotation.R180).with(VariantProperties.X_ROT, VariantProperties.Rotation.R180)));
    }
 
    private static PropertyDispatch.C4<Direction, DoubleBlockHalf, DoorHingeSide, Boolean> configureDoorHalf(PropertyDispatch.C4<Direction, DoubleBlockHalf, DoorHingeSide, Boolean> var0, DoubleBlockHalf var1, ResourceLocation var2, ResourceLocation var3) {
       return var0.select(Direction.EAST, var1, DoorHingeSide.LEFT, false, (Variant)Variant.variant().with(VariantProperties.MODEL, var2)).select(Direction.SOUTH, var1, DoorHingeSide.LEFT, false, (Variant)Variant.variant().with(VariantProperties.MODEL, var2).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90)).select(Direction.WEST, var1, DoorHingeSide.LEFT, false, (Variant)Variant.variant().with(VariantProperties.MODEL, var2).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R180)).select(Direction.NORTH, var1, DoorHingeSide.LEFT, false, (Variant)Variant.variant().with(VariantProperties.MODEL, var2).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R270)).select(Direction.EAST, var1, DoorHingeSide.RIGHT, false, (Variant)Variant.variant().with(VariantProperties.MODEL, var3)).select(Direction.SOUTH, var1, DoorHingeSide.RIGHT, false, (Variant)Variant.variant().with(VariantProperties.MODEL, var3).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90)).select(Direction.WEST, var1, DoorHingeSide.RIGHT, false, (Variant)Variant.variant().with(VariantProperties.MODEL, var3).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R180)).select(Direction.NORTH, var1, DoorHingeSide.RIGHT, false, (Variant)Variant.variant().with(VariantProperties.MODEL, var3).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R270)).select(Direction.EAST, var1, DoorHingeSide.LEFT, true, (Variant)Variant.variant().with(VariantProperties.MODEL, var3).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90)).select(Direction.SOUTH, var1, DoorHingeSide.LEFT, true, (Variant)Variant.variant().with(VariantProperties.MODEL, var3).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R180)).select(Direction.WEST, var1, DoorHingeSide.LEFT, true, (Variant)Variant.variant().with(VariantProperties.MODEL, var3).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R270)).select(Direction.NORTH, var1, DoorHingeSide.LEFT, true, (Variant)Variant.variant().with(VariantProperties.MODEL, var3)).select(Direction.EAST, var1, DoorHingeSide.RIGHT, true, (Variant)Variant.variant().with(VariantProperties.MODEL, var2).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R270)).select(Direction.SOUTH, var1, DoorHingeSide.RIGHT, true, (Variant)Variant.variant().with(VariantProperties.MODEL, var2)).select(Direction.WEST, var1, DoorHingeSide.RIGHT, true, (Variant)Variant.variant().with(VariantProperties.MODEL, var2).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90)).select(Direction.NORTH, var1, DoorHingeSide.RIGHT, true, (Variant)Variant.variant().with(VariantProperties.MODEL, var2).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R180));
@@ -146,23 +187,23 @@
 
    private static BlockStateGenerator createDoor(Block var0, ResourceLocation var1, ResourceLocation var2, ResourceLocation var3, ResourceLocation var4) {
       return MultiVariantGenerator.multiVariant(var0).with(configureDoorHalf(configureDoorHalf(PropertyDispatch.properties(BlockStateProperties.HORIZONTAL_FACING, BlockStateProperties.DOUBLE_BLOCK_HALF, BlockStateProperties.DOOR_HINGE, BlockStateProperties.OPEN), DoubleBlockHalf.LOWER, var1, var2), DoubleBlockHalf.UPPER, var3, var4));
    }
 
-   private static BlockStateGenerator createFence(Block var0, ResourceLocation var1, ResourceLocation var2) {
+   static BlockStateGenerator createFence(Block var0, ResourceLocation var1, ResourceLocation var2) {
       return MultiPartGenerator.multiPart(var0).with(Variant.variant().with(VariantProperties.MODEL, var1)).with(Condition.condition().term(BlockStateProperties.NORTH, true), (Variant)Variant.variant().with(VariantProperties.MODEL, var2).with(VariantProperties.UV_LOCK, true)).with(Condition.condition().term(BlockStateProperties.EAST, true), (Variant)Variant.variant().with(VariantProperties.MODEL, var2).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90).with(VariantProperties.UV_LOCK, true)).with(Condition.condition().term(BlockStateProperties.SOUTH, true), (Variant)Variant.variant().with(VariantProperties.MODEL, var2).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R180).with(VariantProperties.UV_LOCK, true)).with(Condition.condition().term(BlockStateProperties.WEST, true), (Variant)Variant.variant().with(VariantProperties.MODEL, var2).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R270).with(VariantProperties.UV_LOCK, true));
    }
 
-   private static BlockStateGenerator createWall(Block var0, ResourceLocation var1, ResourceLocation var2, ResourceLocation var3) {
+   static BlockStateGenerator createWall(Block var0, ResourceLocation var1, ResourceLocation var2, ResourceLocation var3) {
       return MultiPartGenerator.multiPart(var0).with(Condition.condition().term(BlockStateProperties.UP, true), (Variant)Variant.variant().with(VariantProperties.MODEL, var1)).with(Condition.condition().term(BlockStateProperties.NORTH_WALL, WallSide.LOW), (Variant)Variant.variant().with(VariantProperties.MODEL, var2).with(VariantProperties.UV_LOCK, true)).with(Condition.condition().term(BlockStateProperties.EAST_WALL, WallSide.LOW), (Variant)Variant.variant().with(VariantProperties.MODEL, var2).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90).with(VariantProperties.UV_LOCK, true)).with(Condition.condition().term(BlockStateProperties.SOUTH_WALL, WallSide.LOW), (Variant)Variant.variant().with(VariantProperties.MODEL, var2).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R180).with(VariantProperties.UV_LOCK, true)).with(Condition.condition().term(BlockStateProperties.WEST_WALL, WallSide.LOW), (Variant)Variant.variant().with(VariantProperties.MODEL, var2).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R270).with(VariantProperties.UV_LOCK, true)).with(Condition.condition().term(BlockStateProperties.NORTH_WALL, WallSide.TALL), (Variant)Variant.variant().with(VariantProperties.MODEL, var3).with(VariantProperties.UV_LOCK, true)).with(Condition.condition().term(BlockStateProperties.EAST_WALL, WallSide.TALL), (Variant)Variant.variant().with(VariantProperties.MODEL, var3).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90).with(VariantProperties.UV_LOCK, true)).with(Condition.condition().term(BlockStateProperties.SOUTH_WALL, WallSide.TALL), (Variant)Variant.variant().with(VariantProperties.MODEL, var3).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R180).with(VariantProperties.UV_LOCK, true)).with(Condition.condition().term(BlockStateProperties.WEST_WALL, WallSide.TALL), (Variant)Variant.variant().with(VariantProperties.MODEL, var3).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R270).with(VariantProperties.UV_LOCK, true));
    }
 
-   private static BlockStateGenerator createFenceGate(Block var0, ResourceLocation var1, ResourceLocation var2, ResourceLocation var3, ResourceLocation var4) {
+   static BlockStateGenerator createFenceGate(Block var0, ResourceLocation var1, ResourceLocation var2, ResourceLocation var3, ResourceLocation var4) {
       return MultiVariantGenerator.multiVariant(var0, Variant.variant().with(VariantProperties.UV_LOCK, true)).with(createHorizontalFacingDispatchAlt()).with(PropertyDispatch.properties(BlockStateProperties.IN_WALL, BlockStateProperties.OPEN).select(false, false, (Variant)Variant.variant().with(VariantProperties.MODEL, var2)).select(true, false, (Variant)Variant.variant().with(VariantProperties.MODEL, var4)).select(false, true, (Variant)Variant.variant().with(VariantProperties.MODEL, var1)).select(true, true, (Variant)Variant.variant().with(VariantProperties.MODEL, var3)));
    }
 
-   private static BlockStateGenerator createStairs(Block var0, ResourceLocation var1, ResourceLocation var2, ResourceLocation var3) {
+   static BlockStateGenerator createStairs(Block var0, ResourceLocation var1, ResourceLocation var2, ResourceLocation var3) {
       return MultiVariantGenerator.multiVariant(var0).with(PropertyDispatch.properties(BlockStateProperties.HORIZONTAL_FACING, BlockStateProperties.HALF, BlockStateProperties.STAIRS_SHAPE).select(Direction.EAST, Half.BOTTOM, StairsShape.STRAIGHT, (Variant)Variant.variant().with(VariantProperties.MODEL, var2)).select(Direction.WEST, Half.BOTTOM, StairsShape.STRAIGHT, (Variant)Variant.variant().with(VariantProperties.MODEL, var2).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R180).with(VariantProperties.UV_LOCK, true)).select(Direction.SOUTH, Half.BOTTOM, StairsShape.STRAIGHT, (Variant)Variant.variant().with(VariantProperties.MODEL, var2).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90).with(VariantProperties.UV_LOCK, true)).select(Direction.NORTH, Half.BOTTOM, StairsShape.STRAIGHT, (Variant)Variant.variant().with(VariantProperties.MODEL, var2).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R270).with(VariantProperties.UV_LOCK, true)).select(Direction.EAST, Half.BOTTOM, StairsShape.OUTER_RIGHT, (Variant)Variant.variant().with(VariantProperties.MODEL, var3)).select(Direction.WEST, Half.BOTTOM, StairsShape.OUTER_RIGHT, (Variant)Variant.variant().with(VariantProperties.MODEL, var3).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R180).with(VariantProperties.UV_LOCK, true)).select(Direction.SOUTH, Half.BOTTOM, StairsShape.OUTER_RIGHT, (Variant)Variant.variant().with(VariantProperties.MODEL, var3).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90).with(VariantProperties.UV_LOCK, true)).select(Direction.NORTH, Half.BOTTOM, StairsShape.OUTER_RIGHT, (Variant)Variant.variant().with(VariantProperties.MODEL, var3).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R270).with(VariantProperties.UV_LOCK, true)).select(Direction.EAST, Half.BOTTOM, StairsShape.OUTER_LEFT, (Variant)Variant.variant().with(VariantProperties.MODEL, var3).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R270).with(VariantProperties.UV_LOCK, true)).select(Direction.WEST, Half.BOTTOM, StairsShape.OUTER_LEFT, (Variant)Variant.variant().with(VariantProperties.MODEL, var3).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90).with(VariantProperties.UV_LOCK, true)).select(Direction.SOUTH, Half.BOTTOM, StairsShape.OUTER_LEFT, (Variant)Variant.variant().with(VariantProperties.MODEL, var3)).select(Direction.NORTH, Half.BOTTOM, StairsShape.OUTER_LEFT, (Variant)Variant.variant().with(VariantProperties.MODEL, var3).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R180).with(VariantProperties.UV_LOCK, true)).select(Direction.EAST, Half.BOTTOM, StairsShape.INNER_RIGHT, (Variant)Variant.variant().with(VariantProperties.MODEL, var1)).select(Direction.WEST, Half.BOTTOM, StairsShape.INNER_RIGHT, (Variant)Variant.variant().with(VariantProperties.MODEL, var1).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R180).with(VariantProperties.UV_LOCK, true)).select(Direction.SOUTH, Half.BOTTOM, StairsShape.INNER_RIGHT, (Variant)Variant.variant().with(VariantProperties.MODEL, var1).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90).with(VariantProperties.UV_LOCK, true)).select(Direction.NORTH, Half.BOTTOM, StairsShape.INNER_RIGHT, (Variant)Variant.variant().with(VariantProperties.MODEL, var1).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R270).with(VariantProperties.UV_LOCK, true)).select(Direction.EAST, Half.BOTTOM, StairsShape.INNER_LEFT, (Variant)Variant.variant().with(VariantProperties.MODEL, var1).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R270).with(VariantProperties.UV_LOCK, true)).select(Direction.WEST, Half.BOTTOM, StairsShape.INNER_LEFT, (Variant)Variant.variant().with(VariantProperties.MODEL, var1).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90).with(VariantProperties.UV_LOCK, true)).select(Direction.SOUTH, Half.BOTTOM, StairsShape.INNER_LEFT, (Variant)Variant.variant().with(VariantProperties.MODEL, var1)).select(Direction.NORTH, Half.BOTTOM, StairsShape.INNER_LEFT, (Variant)Variant.variant().with(VariantProperties.MODEL, var1).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R180).with(VariantProperties.UV_LOCK, true)).select(Direction.EAST, Half.TOP, StairsShape.STRAIGHT, (Variant)Variant.variant().with(VariantProperties.MODEL, var2).with(VariantProperties.X_ROT, VariantProperties.Rotation.R180).with(VariantProperties.UV_LOCK, true)).select(Direction.WEST, Half.TOP, StairsShape.STRAIGHT, (Variant)Variant.variant().with(VariantProperties.MODEL, var2).with(VariantProperties.X_ROT, VariantProperties.Rotation.R180).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R180).with(VariantProperties.UV_LOCK, true)).select(Direction.SOUTH, Half.TOP, StairsShape.STRAIGHT, (Variant)Variant.variant().with(VariantProperties.MODEL, var2).with(VariantProperties.X_ROT, VariantProperties.Rotation.R180).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90).with(VariantProperties.UV_LOCK, true)).select(Direction.NORTH, Half.TOP, StairsShape.STRAIGHT, (Variant)Variant.variant().with(VariantProperties.MODEL, var2).with(VariantProperties.X_ROT, VariantProperties.Rotation.R180).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R270).with(VariantProperties.UV_LOCK, true)).select(Direction.EAST, Half.TOP, StairsShape.OUTER_RIGHT, (Variant)Variant.variant().with(VariantProperties.MODEL, var3).with(VariantProperties.X_ROT, VariantProperties.Rotation.R180).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90).with(VariantProperties.UV_LOCK, true)).select(Direction.WEST, Half.TOP, StairsShape.OUTER_RIGHT, (Variant)Variant.variant().with(VariantProperties.MODEL, var3).with(VariantProperties.X_ROT, VariantProperties.Rotation.R180).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R270).with(VariantProperties.UV_LOCK, true)).select(Direction.SOUTH, Half.TOP, StairsShape.OUTER_RIGHT, (Variant)Variant.variant().with(VariantProperties.MODEL, var3).with(VariantProperties.X_ROT, VariantProperties.Rotation.R180).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R180).with(VariantProperties.UV_LOCK, true)).select(Direction.NORTH, Half.TOP, StairsShape.OUTER_RIGHT, (Variant)Variant.variant().with(VariantProperties.MODEL, var3).with(VariantProperties.X_ROT, VariantProperties.Rotation.R180).with(VariantProperties.UV_LOCK, true)).select(Direction.EAST, Half.TOP, StairsShape.OUTER_LEFT, (Variant)Variant.variant().with(VariantProperties.MODEL, var3).with(VariantProperties.X_ROT, VariantProperties.Rotation.R180).with(VariantProperties.UV_LOCK, true)).select(Direction.WEST, Half.TOP, StairsShape.OUTER_LEFT, (Variant)Variant.variant().with(VariantProperties.MODEL, var3).with(VariantProperties.X_ROT, VariantProperties.Rotation.R180).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R180).with(VariantProperties.UV_LOCK, true)).select(Direction.SOUTH, Half.TOP, StairsShape.OUTER_LEFT, (Variant)Variant.variant().with(VariantProperties.MODEL, var3).with(VariantProperties.X_ROT, VariantProperties.Rotation.R180).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90).with(VariantProperties.UV_LOCK, true)).select(Direction.NORTH, Half.TOP, StairsShape.OUTER_LEFT, (Variant)Variant.variant().with(VariantProperties.MODEL, var3).with(VariantProperties.X_ROT, VariantProperties.Rotation.R180).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R270).with(VariantProperties.UV_LOCK, true)).select(Direction.EAST, Half.TOP, StairsShape.INNER_RIGHT, (Variant)Variant.variant().with(VariantProperties.MODEL, var1).with(VariantProperties.X_ROT, VariantProperties.Rotation.R180).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90).with(VariantProperties.UV_LOCK, true)).select(Direction.WEST, Half.TOP, StairsShape.INNER_RIGHT, (Variant)Variant.variant().with(VariantProperties.MODEL, var1).with(VariantProperties.X_ROT, VariantProperties.Rotation.R180).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R270).with(VariantProperties.UV_LOCK, true)).select(Direction.SOUTH, Half.TOP, StairsShape.INNER_RIGHT, (Variant)Variant.variant().with(VariantProperties.MODEL, var1).with(VariantProperties.X_ROT, VariantProperties.Rotation.R180).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R180).with(VariantProperties.UV_LOCK, true)).select(Direction.NORTH, Half.TOP, StairsShape.INNER_RIGHT, (Variant)Variant.variant().with(VariantProperties.MODEL, var1).with(VariantProperties.X_ROT, VariantProperties.Rotation.R180).with(VariantProperties.UV_LOCK, true)).select(Direction.EAST, Half.TOP, StairsShape.INNER_LEFT, (Variant)Variant.variant().with(VariantProperties.MODEL, var1).with(VariantProperties.X_ROT, VariantProperties.Rotation.R180).with(VariantProperties.UV_LOCK, true)).select(Direction.WEST, Half.TOP, StairsShape.INNER_LEFT, (Variant)Variant.variant().with(VariantProperties.MODEL, var1).with(VariantProperties.X_ROT, VariantProperties.Rotation.R180).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R180).with(VariantProperties.UV_LOCK, true)).select(Direction.SOUTH, Half.TOP, StairsShape.INNER_LEFT, (Variant)Variant.variant().with(VariantProperties.MODEL, var1).with(VariantProperties.X_ROT, VariantProperties.Rotation.R180).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90).with(VariantProperties.UV_LOCK, true)).select(Direction.NORTH, Half.TOP, StairsShape.INNER_LEFT, (Variant)Variant.variant().with(VariantProperties.MODEL, var1).with(VariantProperties.X_ROT, VariantProperties.Rotation.R180).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R270).with(VariantProperties.UV_LOCK, true)));
    }
 
    private static BlockStateGenerator createOrientableTrapdoor(Block var0, ResourceLocation var1, ResourceLocation var2, ResourceLocation var3) {
       return MultiVariantGenerator.multiVariant(var0).with(PropertyDispatch.properties(BlockStateProperties.HORIZONTAL_FACING, BlockStateProperties.HALF, BlockStateProperties.OPEN).select(Direction.NORTH, Half.BOTTOM, false, (Variant)Variant.variant().with(VariantProperties.MODEL, var2)).select(Direction.SOUTH, Half.BOTTOM, false, (Variant)Variant.variant().with(VariantProperties.MODEL, var2).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R180)).select(Direction.EAST, Half.BOTTOM, false, (Variant)Variant.variant().with(VariantProperties.MODEL, var2).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90)).select(Direction.WEST, Half.BOTTOM, false, (Variant)Variant.variant().with(VariantProperties.MODEL, var2).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R270)).select(Direction.NORTH, Half.TOP, false, (Variant)Variant.variant().with(VariantProperties.MODEL, var1)).select(Direction.SOUTH, Half.TOP, false, (Variant)Variant.variant().with(VariantProperties.MODEL, var1).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R180)).select(Direction.EAST, Half.TOP, false, (Variant)Variant.variant().with(VariantProperties.MODEL, var1).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90)).select(Direction.WEST, Half.TOP, false, (Variant)Variant.variant().with(VariantProperties.MODEL, var1).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R270)).select(Direction.NORTH, Half.BOTTOM, true, (Variant)Variant.variant().with(VariantProperties.MODEL, var3)).select(Direction.SOUTH, Half.BOTTOM, true, (Variant)Variant.variant().with(VariantProperties.MODEL, var3).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R180)).select(Direction.EAST, Half.BOTTOM, true, (Variant)Variant.variant().with(VariantProperties.MODEL, var3).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90)).select(Direction.WEST, Half.BOTTOM, true, (Variant)Variant.variant().with(VariantProperties.MODEL, var3).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R270)).select(Direction.NORTH, Half.TOP, true, (Variant)Variant.variant().with(VariantProperties.MODEL, var3).with(VariantProperties.X_ROT, VariantProperties.Rotation.R180).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R180)).select(Direction.SOUTH, Half.TOP, true, (Variant)Variant.variant().with(VariantProperties.MODEL, var3).with(VariantProperties.X_ROT, VariantProperties.Rotation.R180).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R0)).select(Direction.EAST, Half.TOP, true, (Variant)Variant.variant().with(VariantProperties.MODEL, var3).with(VariantProperties.X_ROT, VariantProperties.Rotation.R180).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R270)).select(Direction.WEST, Half.TOP, true, (Variant)Variant.variant().with(VariantProperties.MODEL, var3).with(VariantProperties.X_ROT, VariantProperties.Rotation.R180).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90)));
@@ -170,19 +211,19 @@
 
    private static BlockStateGenerator createTrapdoor(Block var0, ResourceLocation var1, ResourceLocation var2, ResourceLocation var3) {
       return MultiVariantGenerator.multiVariant(var0).with(PropertyDispatch.properties(BlockStateProperties.HORIZONTAL_FACING, BlockStateProperties.HALF, BlockStateProperties.OPEN).select(Direction.NORTH, Half.BOTTOM, false, (Variant)Variant.variant().with(VariantProperties.MODEL, var2)).select(Direction.SOUTH, Half.BOTTOM, false, (Variant)Variant.variant().with(VariantProperties.MODEL, var2)).select(Direction.EAST, Half.BOTTOM, false, (Variant)Variant.variant().with(VariantProperties.MODEL, var2)).select(Direction.WEST, Half.BOTTOM, false, (Variant)Variant.variant().with(VariantProperties.MODEL, var2)).select(Direction.NORTH, Half.TOP, false, (Variant)Variant.variant().with(VariantProperties.MODEL, var1)).select(Direction.SOUTH, Half.TOP, false, (Variant)Variant.variant().with(VariantProperties.MODEL, var1)).select(Direction.EAST, Half.TOP, false, (Variant)Variant.variant().with(VariantProperties.MODEL, var1)).select(Direction.WEST, Half.TOP, false, (Variant)Variant.variant().with(VariantProperties.MODEL, var1)).select(Direction.NORTH, Half.BOTTOM, true, (Variant)Variant.variant().with(VariantProperties.MODEL, var3)).select(Direction.SOUTH, Half.BOTTOM, true, (Variant)Variant.variant().with(VariantProperties.MODEL, var3).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R180)).select(Direction.EAST, Half.BOTTOM, true, (Variant)Variant.variant().with(VariantProperties.MODEL, var3).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90)).select(Direction.WEST, Half.BOTTOM, true, (Variant)Variant.variant().with(VariantProperties.MODEL, var3).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R270)).select(Direction.NORTH, Half.TOP, true, (Variant)Variant.variant().with(VariantProperties.MODEL, var3)).select(Direction.SOUTH, Half.TOP, true, (Variant)Variant.variant().with(VariantProperties.MODEL, var3).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R180)).select(Direction.EAST, Half.TOP, true, (Variant)Variant.variant().with(VariantProperties.MODEL, var3).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90)).select(Direction.WEST, Half.TOP, true, (Variant)Variant.variant().with(VariantProperties.MODEL, var3).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R270)));
    }
 
-   private static MultiVariantGenerator createSimpleBlock(Block var0, ResourceLocation var1) {
+   static MultiVariantGenerator createSimpleBlock(Block var0, ResourceLocation var1) {
       return MultiVariantGenerator.multiVariant(var0, Variant.variant().with(VariantProperties.MODEL, var1));
    }
 
    private static PropertyDispatch createRotatedPillar() {
       return PropertyDispatch.property(BlockStateProperties.AXIS).select(Direction.Axis.Y, (Variant)Variant.variant()).select(Direction.Axis.Z, (Variant)Variant.variant().with(VariantProperties.X_ROT, VariantProperties.Rotation.R90)).select(Direction.Axis.X, (Variant)Variant.variant().with(VariantProperties.X_ROT, VariantProperties.Rotation.R90).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90));
    }
 
-   private static BlockStateGenerator createAxisAlignedPillarBlock(Block var0, ResourceLocation var1) {
+   static BlockStateGenerator createAxisAlignedPillarBlock(Block var0, ResourceLocation var1) {
       return MultiVariantGenerator.multiVariant(var0, Variant.variant().with(VariantProperties.MODEL, var1)).with(createRotatedPillar());
    }
 
    private void createAxisAlignedPillarBlockCustomModel(Block var1, ResourceLocation var2) {
       this.blockStateOutput.accept(createAxisAlignedPillarBlock(var1, var2));
@@ -196,11 +237,11 @@
    private void createHorizontallyRotatedBlock(Block var1, TexturedModel.Provider var2) {
       ResourceLocation var3 = var2.create(var1, this.modelOutput);
       this.blockStateOutput.accept(MultiVariantGenerator.multiVariant(var1, Variant.variant().with(VariantProperties.MODEL, var3)).with(createHorizontalFacingDispatch()));
    }
 
-   private static BlockStateGenerator createRotatedPillarWithHorizontalVariant(Block var0, ResourceLocation var1, ResourceLocation var2) {
+   static BlockStateGenerator createRotatedPillarWithHorizontalVariant(Block var0, ResourceLocation var1, ResourceLocation var2) {
       return MultiVariantGenerator.multiVariant(var0).with(PropertyDispatch.property(BlockStateProperties.AXIS).select(Direction.Axis.Y, (Variant)Variant.variant().with(VariantProperties.MODEL, var1)).select(Direction.Axis.Z, (Variant)Variant.variant().with(VariantProperties.MODEL, var2).with(VariantProperties.X_ROT, VariantProperties.Rotation.R90)).select(Direction.Axis.X, (Variant)Variant.variant().with(VariantProperties.MODEL, var2).with(VariantProperties.X_ROT, VariantProperties.Rotation.R90).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90)));
    }
 
    private void createRotatedPillarWithHorizontalVariant(Block var1, TexturedModel.Provider var2, TexturedModel.Provider var3) {
       ResourceLocation var4 = var2.create(var1, this.modelOutput);
@@ -210,15 +251,15 @@
 
    private ResourceLocation createSuffixedVariant(Block var1, String var2, ModelTemplate var3, Function<ResourceLocation, TextureMapping> var4) {
       return var3.createWithSuffix(var1, var2, (TextureMapping)var4.apply(TextureMapping.getBlockTexture(var1, var2)), this.modelOutput);
    }
 
-   private static BlockStateGenerator createPressurePlate(Block var0, ResourceLocation var1, ResourceLocation var2) {
+   static BlockStateGenerator createPressurePlate(Block var0, ResourceLocation var1, ResourceLocation var2) {
       return MultiVariantGenerator.multiVariant(var0).with(createBooleanModelDispatch(BlockStateProperties.POWERED, var2, var1));
    }
 
-   private static BlockStateGenerator createSlab(Block var0, ResourceLocation var1, ResourceLocation var2, ResourceLocation var3) {
+   static BlockStateGenerator createSlab(Block var0, ResourceLocation var1, ResourceLocation var2, ResourceLocation var3) {
       return MultiVariantGenerator.multiVariant(var0).with(PropertyDispatch.property(BlockStateProperties.SLAB_TYPE).select(SlabType.BOTTOM, (Variant)Variant.variant().with(VariantProperties.MODEL, var1)).select(SlabType.TOP, (Variant)Variant.variant().with(VariantProperties.MODEL, var2)).select(SlabType.DOUBLE, (Variant)Variant.variant().with(VariantProperties.MODEL, var3)));
    }
 
    private void createTrivialCube(Block var1) {
       this.createTrivialBlock(var1, TexturedModel.CUBE);
@@ -231,55 +272,51 @@
    private void createTrivialBlock(Block var1, TextureMapping var2, ModelTemplate var3) {
       ResourceLocation var4 = var3.create(var1, var2, this.modelOutput);
       this.blockStateOutput.accept(createSimpleBlock(var1, var4));
    }
 
-   private BlockModelGenerators.BlockFamilyProvider family(Block var1, TexturedModel var2) {
+   private BlockModelGenerators.BlockFamilyProvider family(Block var1) {
+      TexturedModel var2 = (TexturedModel)this.texturedModels.getOrDefault(var1, TexturedModel.CUBE.get(var1));
       return (new BlockModelGenerators.BlockFamilyProvider(var2.getMapping())).fullBlock(var1, var2.getTemplate());
    }
 
-   private BlockModelGenerators.BlockFamilyProvider family(Block var1, TexturedModel.Provider var2) {
-      TexturedModel var3 = var2.get(var1);
-      return (new BlockModelGenerators.BlockFamilyProvider(var3.getMapping())).fullBlock(var1, var3.getTemplate());
-   }
-
-   private BlockModelGenerators.BlockFamilyProvider family(Block var1) {
-      return this.family(var1, TexturedModel.CUBE);
-   }
-
-   private BlockModelGenerators.BlockFamilyProvider family(TextureMapping var1) {
-      return new BlockModelGenerators.BlockFamilyProvider(var1);
-   }
-
-   private void createDoor(Block var1) {
+   void createDoor(Block var1) {
       TextureMapping var2 = TextureMapping.door(var1);
       ResourceLocation var3 = ModelTemplates.DOOR_BOTTOM.create(var1, var2, this.modelOutput);
       ResourceLocation var4 = ModelTemplates.DOOR_BOTTOM_HINGE.create(var1, var2, this.modelOutput);
       ResourceLocation var5 = ModelTemplates.DOOR_TOP.create(var1, var2, this.modelOutput);
       ResourceLocation var6 = ModelTemplates.DOOR_TOP_HINGE.create(var1, var2, this.modelOutput);
       this.createSimpleFlatItemModel(var1.asItem());
       this.blockStateOutput.accept(createDoor(var1, var3, var4, var5, var6));
    }
 
-   private void createOrientableTrapdoor(Block var1) {
+   void createOrientableTrapdoor(Block var1) {
       TextureMapping var2 = TextureMapping.defaultTexture(var1);
       ResourceLocation var3 = ModelTemplates.ORIENTABLE_TRAPDOOR_TOP.create(var1, var2, this.modelOutput);
       ResourceLocation var4 = ModelTemplates.ORIENTABLE_TRAPDOOR_BOTTOM.create(var1, var2, this.modelOutput);
       ResourceLocation var5 = ModelTemplates.ORIENTABLE_TRAPDOOR_OPEN.create(var1, var2, this.modelOutput);
       this.blockStateOutput.accept(createOrientableTrapdoor(var1, var3, var4, var5));
       this.delegateItemModel(var1, var4);
    }
 
-   private void createTrapdoor(Block var1) {
+   void createTrapdoor(Block var1) {
       TextureMapping var2 = TextureMapping.defaultTexture(var1);
       ResourceLocation var3 = ModelTemplates.TRAPDOOR_TOP.create(var1, var2, this.modelOutput);
       ResourceLocation var4 = ModelTemplates.TRAPDOOR_BOTTOM.create(var1, var2, this.modelOutput);
       ResourceLocation var5 = ModelTemplates.TRAPDOOR_OPEN.create(var1, var2, this.modelOutput);
       this.blockStateOutput.accept(createTrapdoor(var1, var3, var4, var5));
       this.delegateItemModel(var1, var4);
    }
 
+   private void createBigDripLeafBlock() {
+      this.skipAutoItemBlock(Blocks.BIG_DRIPLEAF);
+      ResourceLocation var1 = ModelLocationUtils.getModelLocation(Blocks.BIG_DRIPLEAF);
+      ResourceLocation var2 = ModelLocationUtils.getModelLocation(Blocks.BIG_DRIPLEAF, "_partial_tilt");
+      ResourceLocation var3 = ModelLocationUtils.getModelLocation(Blocks.BIG_DRIPLEAF, "_full_tilt");
+      this.blockStateOutput.accept(MultiVariantGenerator.multiVariant(Blocks.BIG_DRIPLEAF).with(createHorizontalFacingDispatch()).with(PropertyDispatch.property(BlockStateProperties.TILT).select(Tilt.NONE, (Variant)Variant.variant().with(VariantProperties.MODEL, var1)).select(Tilt.UNSTABLE, (Variant)Variant.variant().with(VariantProperties.MODEL, var1)).select(Tilt.PARTIAL, (Variant)Variant.variant().with(VariantProperties.MODEL, var2)).select(Tilt.FULL, (Variant)Variant.variant().with(VariantProperties.MODEL, var3))));
+   }
+
    private BlockModelGenerators.WoodProvider woodProvider(Block var1) {
       return new BlockModelGenerators.WoodProvider(TextureMapping.logColumn(var1));
    }
 
    private void createNonTemplateModelBlock(Block var1) {
@@ -364,10 +401,17 @@
       ResourceLocation var1 = this.createSuffixedVariant(Blocks.TALL_SEAGRASS, "_top", ModelTemplates.SEAGRASS, TextureMapping::defaultTexture);
       ResourceLocation var2 = this.createSuffixedVariant(Blocks.TALL_SEAGRASS, "_bottom", ModelTemplates.SEAGRASS, TextureMapping::defaultTexture);
       this.createDoubleBlock(Blocks.TALL_SEAGRASS, var1, var2);
    }
 
+   private void createSmallDripleaf() {
+      this.skipAutoItemBlock(Blocks.SMALL_DRIPLEAF);
+      ResourceLocation var1 = ModelLocationUtils.getModelLocation(Blocks.SMALL_DRIPLEAF, "_top");
+      ResourceLocation var2 = ModelLocationUtils.getModelLocation(Blocks.SMALL_DRIPLEAF, "_bottom");
+      this.blockStateOutput.accept(MultiVariantGenerator.multiVariant(Blocks.SMALL_DRIPLEAF).with(createHorizontalFacingDispatch()).with(PropertyDispatch.property(BlockStateProperties.DOUBLE_BLOCK_HALF).select(DoubleBlockHalf.LOWER, (Variant)Variant.variant().with(VariantProperties.MODEL, var2)).select(DoubleBlockHalf.UPPER, (Variant)Variant.variant().with(VariantProperties.MODEL, var1))));
+   }
+
    private void createDoubleBlock(Block var1, ResourceLocation var2, ResourceLocation var3) {
       this.blockStateOutput.accept(MultiVariantGenerator.multiVariant(var1).with(PropertyDispatch.property(BlockStateProperties.DOUBLE_BLOCK_HALF).select(DoubleBlockHalf.LOWER, (Variant)Variant.variant().with(VariantProperties.MODEL, var3)).select(DoubleBlockHalf.UPPER, (Variant)Variant.variant().with(VariantProperties.MODEL, var2))));
    }
 
    private void createPassiveRail(Block var1) {
@@ -426,12 +470,12 @@
    private void createAirLikeBlock(Block var1, ResourceLocation var2) {
       ResourceLocation var3 = ModelTemplates.PARTICLE_ONLY.create(var1, TextureMapping.particle(var2), this.modelOutput);
       this.blockStateOutput.accept(createSimpleBlock(var1, var3));
    }
 
-   private void createWoolBlocks(Block var1, Block var2) {
-      this.createTrivialBlock(var1, TexturedModel.CUBE);
+   private void createFullAndCarpetBlocks(Block var1, Block var2) {
+      this.createTrivialCube(var1);
       ResourceLocation var3 = TexturedModel.CARPET.get(var1).create(var2, this.modelOutput);
       this.blockStateOutput.accept(createSimpleBlock(var2, var3));
    }
 
    private void createColoredBlockWithRandomRotations(TexturedModel.Provider var1, Block... var2) {
@@ -576,10 +620,20 @@
          this.blockStateOutput.accept(MultiVariantGenerator.multiVariant(var6).with(createBooleanModelDispatch(BlockStateProperties.LIT, var7, var2)).with(createHorizontalFacingDispatchAlt()));
       }
 
    }
 
+   private void createAzalea(Block var1) {
+      ResourceLocation var2 = ModelTemplates.AZALEA.create(var1, TextureMapping.cubeTop(var1), this.modelOutput);
+      this.blockStateOutput.accept(createSimpleBlock(var1, var2));
+   }
+
+   private void createPottedAzalea(Block var1) {
+      ResourceLocation var2 = ModelTemplates.POTTED_AZALEA.create(var1, TextureMapping.cubeTop(var1), this.modelOutput);
+      this.blockStateOutput.accept(createSimpleBlock(var1, var2));
+   }
+
    private void createBookshelf() {
       TextureMapping var1 = TextureMapping.column(TextureMapping.getBlockTexture(Blocks.BOOKSHELF), TextureMapping.getBlockTexture(Blocks.OAK_PLANKS));
       ResourceLocation var2 = ModelTemplates.CUBE_COLUMN.create(Blocks.BOOKSHELF, var1, this.modelOutput);
       this.blockStateOutput.accept(createSimpleBlock(Blocks.BOOKSHELF, var2));
    }
@@ -646,20 +700,18 @@
    private void createPumpkinVariant(Block var1, TextureMapping var2) {
       ResourceLocation var3 = ModelTemplates.CUBE_ORIENTABLE.create(var1, var2.copyAndUpdate(TextureSlot.FRONT, TextureMapping.getBlockTexture(var1)), this.modelOutput);
       this.blockStateOutput.accept(MultiVariantGenerator.multiVariant(var1, Variant.variant().with(VariantProperties.MODEL, var3)).with(createHorizontalFacingDispatch()));
    }
 
-   private void createCauldron() {
+   private void createCauldrons() {
       this.createSimpleFlatItemModel(Items.CAULDRON);
-      this.blockStateOutput.accept(MultiVariantGenerator.multiVariant(Blocks.CAULDRON).with(PropertyDispatch.property(BlockStateProperties.LEVEL_CAULDRON).select(0, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelLocationUtils.getModelLocation(Blocks.CAULDRON))).select(1, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelLocationUtils.getModelLocation(Blocks.CAULDRON, "_level1"))).select(2, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelLocationUtils.getModelLocation(Blocks.CAULDRON, "_level2"))).select(3, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelLocationUtils.getModelLocation(Blocks.CAULDRON, "_level3")))));
+      this.createNonTemplateModelBlock(Blocks.CAULDRON);
+      this.blockStateOutput.accept(createSimpleBlock(Blocks.LAVA_CAULDRON, ModelTemplates.CAULDRON_FULL.create(Blocks.LAVA_CAULDRON, TextureMapping.cauldron(TextureMapping.getBlockTexture(Blocks.LAVA, "_still")), this.modelOutput)));
+      this.blockStateOutput.accept(MultiVariantGenerator.multiVariant(Blocks.WATER_CAULDRON).with(PropertyDispatch.property(LayeredCauldronBlock.LEVEL).select(1, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelTemplates.CAULDRON_LEVEL1.createWithSuffix(Blocks.WATER_CAULDRON, "_level1", TextureMapping.cauldron(TextureMapping.getBlockTexture(Blocks.WATER, "_still")), this.modelOutput))).select(2, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelTemplates.CAULDRON_LEVEL2.createWithSuffix(Blocks.WATER_CAULDRON, "_level2", TextureMapping.cauldron(TextureMapping.getBlockTexture(Blocks.WATER, "_still")), this.modelOutput))).select(3, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelTemplates.CAULDRON_FULL.createWithSuffix(Blocks.WATER_CAULDRON, "_full", TextureMapping.cauldron(TextureMapping.getBlockTexture(Blocks.WATER, "_still")), this.modelOutput)))));
+      this.blockStateOutput.accept(MultiVariantGenerator.multiVariant(Blocks.POWDER_SNOW_CAULDRON).with(PropertyDispatch.property(LayeredCauldronBlock.LEVEL).select(1, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelTemplates.CAULDRON_LEVEL1.createWithSuffix(Blocks.POWDER_SNOW_CAULDRON, "_level1", TextureMapping.cauldron(TextureMapping.getBlockTexture(Blocks.POWDER_SNOW)), this.modelOutput))).select(2, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelTemplates.CAULDRON_LEVEL2.createWithSuffix(Blocks.POWDER_SNOW_CAULDRON, "_level2", TextureMapping.cauldron(TextureMapping.getBlockTexture(Blocks.POWDER_SNOW)), this.modelOutput))).select(3, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelTemplates.CAULDRON_FULL.createWithSuffix(Blocks.POWDER_SNOW_CAULDRON, "_full", TextureMapping.cauldron(TextureMapping.getBlockTexture(Blocks.POWDER_SNOW)), this.modelOutput)))));
    }
 
-   private void createChiseledSandsone(Block var1, Block var2) {
-      TextureMapping var3 = (new TextureMapping()).put(TextureSlot.END, TextureMapping.getBlockTexture(var2, "_top")).put(TextureSlot.SIDE, TextureMapping.getBlockTexture(var1));
-      this.createTrivialBlock(var1, var3, ModelTemplates.CUBE_COLUMN);
-   }
-
    private void createChorusFlower() {
       TextureMapping var1 = TextureMapping.defaultTexture(Blocks.CHORUS_FLOWER);
       ResourceLocation var2 = ModelTemplates.CHORUS_FLOWER.create(Blocks.CHORUS_FLOWER, var1, this.modelOutput);
       ResourceLocation var3 = this.createSuffixedVariant(Blocks.CHORUS_FLOWER, "_dead", ModelTemplates.CHORUS_FLOWER, (var1x) -> {
          return var1.copyAndUpdate(TextureSlot.TEXTURE, var1x);
@@ -692,10 +744,53 @@
 
    private void createComposter() {
       this.blockStateOutput.accept(MultiPartGenerator.multiPart(Blocks.COMPOSTER).with(Variant.variant().with(VariantProperties.MODEL, TextureMapping.getBlockTexture(Blocks.COMPOSTER))).with(Condition.condition().term(BlockStateProperties.LEVEL_COMPOSTER, 1), (Variant)Variant.variant().with(VariantProperties.MODEL, TextureMapping.getBlockTexture(Blocks.COMPOSTER, "_contents1"))).with(Condition.condition().term(BlockStateProperties.LEVEL_COMPOSTER, 2), (Variant)Variant.variant().with(VariantProperties.MODEL, TextureMapping.getBlockTexture(Blocks.COMPOSTER, "_contents2"))).with(Condition.condition().term(BlockStateProperties.LEVEL_COMPOSTER, 3), (Variant)Variant.variant().with(VariantProperties.MODEL, TextureMapping.getBlockTexture(Blocks.COMPOSTER, "_contents3"))).with(Condition.condition().term(BlockStateProperties.LEVEL_COMPOSTER, 4), (Variant)Variant.variant().with(VariantProperties.MODEL, TextureMapping.getBlockTexture(Blocks.COMPOSTER, "_contents4"))).with(Condition.condition().term(BlockStateProperties.LEVEL_COMPOSTER, 5), (Variant)Variant.variant().with(VariantProperties.MODEL, TextureMapping.getBlockTexture(Blocks.COMPOSTER, "_contents5"))).with(Condition.condition().term(BlockStateProperties.LEVEL_COMPOSTER, 6), (Variant)Variant.variant().with(VariantProperties.MODEL, TextureMapping.getBlockTexture(Blocks.COMPOSTER, "_contents6"))).with(Condition.condition().term(BlockStateProperties.LEVEL_COMPOSTER, 7), (Variant)Variant.variant().with(VariantProperties.MODEL, TextureMapping.getBlockTexture(Blocks.COMPOSTER, "_contents7"))).with(Condition.condition().term(BlockStateProperties.LEVEL_COMPOSTER, 8), (Variant)Variant.variant().with(VariantProperties.MODEL, TextureMapping.getBlockTexture(Blocks.COMPOSTER, "_contents_ready"))));
    }
 
+   private void createAmethystCluster(Block var1) {
+      this.skipAutoItemBlock(var1);
+      this.blockStateOutput.accept(MultiVariantGenerator.multiVariant(var1, Variant.variant().with(VariantProperties.MODEL, ModelTemplates.CROSS.create(var1, TextureMapping.cross(var1), this.modelOutput))).with(this.createColumnWithFacing()));
+   }
+
+   private void createAmethystClusters() {
+      this.createAmethystCluster(Blocks.SMALL_AMETHYST_BUD);
+      this.createAmethystCluster(Blocks.MEDIUM_AMETHYST_BUD);
+      this.createAmethystCluster(Blocks.LARGE_AMETHYST_BUD);
+      this.createAmethystCluster(Blocks.AMETHYST_CLUSTER);
+   }
+
+   private void createPointedDripstone() {
+      this.createSimpleFlatItemModel(Blocks.POINTED_DRIPSTONE.asItem());
+      PropertyDispatch.C2 var1 = PropertyDispatch.properties(BlockStateProperties.VERTICAL_DIRECTION, BlockStateProperties.DRIPSTONE_THICKNESS);
+      DripstoneThickness[] var2 = DripstoneThickness.values();
+      int var3 = var2.length;
+
+      int var4;
+      DripstoneThickness var5;
+      for(var4 = 0; var4 < var3; ++var4) {
+         var5 = var2[var4];
+         var1.select(Direction.UP, var5, (Variant)this.createPointedDripstoneVariant(Direction.UP, var5));
+      }
+
+      var2 = DripstoneThickness.values();
+      var3 = var2.length;
+
+      for(var4 = 0; var4 < var3; ++var4) {
+         var5 = var2[var4];
+         var1.select(Direction.DOWN, var5, (Variant)this.createPointedDripstoneVariant(Direction.DOWN, var5));
+      }
+
+      this.blockStateOutput.accept(MultiVariantGenerator.multiVariant(Blocks.POINTED_DRIPSTONE).with(var1));
+   }
+
+   private Variant createPointedDripstoneVariant(Direction var1, DripstoneThickness var2) {
+      String var10000 = var1.getSerializedName();
+      String var3 = "_" + var10000 + "_" + var2.getSerializedName();
+      TextureMapping var4 = TextureMapping.cross(TextureMapping.getBlockTexture(Blocks.POINTED_DRIPSTONE, var3));
+      return Variant.variant().with(VariantProperties.MODEL, ModelTemplates.POINTED_DRIPSTONE.createWithSuffix(Blocks.POINTED_DRIPSTONE, var3, var4, this.modelOutput));
+   }
+
    private void createNyliumBlock(Block var1) {
       TextureMapping var2 = (new TextureMapping()).put(TextureSlot.BOTTOM, TextureMapping.getBlockTexture(Blocks.NETHERRACK)).put(TextureSlot.TOP, TextureMapping.getBlockTexture(var1)).put(TextureSlot.SIDE, TextureMapping.getBlockTexture(var1, "_side"));
       this.blockStateOutput.accept(createSimpleBlock(var1, ModelTemplates.CUBE_BOTTOM_TOP.create(var1, var2, this.modelOutput)));
    }
 
@@ -708,10 +803,17 @@
 
    private void createRotatableColumn(Block var1) {
       this.blockStateOutput.accept(MultiVariantGenerator.multiVariant(var1, Variant.variant().with(VariantProperties.MODEL, ModelLocationUtils.getModelLocation(var1))).with(this.createColumnWithFacing()));
    }
 
+   private void createLightningRod() {
+      Block var1 = Blocks.LIGHTNING_ROD;
+      ResourceLocation var2 = ModelLocationUtils.getModelLocation(var1, "_on");
+      ResourceLocation var3 = ModelLocationUtils.getModelLocation(var1);
+      this.blockStateOutput.accept(MultiVariantGenerator.multiVariant(var1, Variant.variant().with(VariantProperties.MODEL, ModelLocationUtils.getModelLocation(var1))).with(this.createColumnWithFacing()).with(createBooleanModelDispatch(BlockStateProperties.POWERED, var2, var3)));
+   }
+
    private void createFarmland() {
       TextureMapping var1 = (new TextureMapping()).put(TextureSlot.DIRT, TextureMapping.getBlockTexture(Blocks.DIRT)).put(TextureSlot.TOP, TextureMapping.getBlockTexture(Blocks.FARMLAND));
       TextureMapping var2 = (new TextureMapping()).put(TextureSlot.DIRT, TextureMapping.getBlockTexture(Blocks.DIRT)).put(TextureSlot.TOP, TextureMapping.getBlockTexture(Blocks.FARMLAND, "_moist"));
       ResourceLocation var3 = ModelTemplates.FARMLAND.create(Blocks.FARMLAND, var1, this.modelOutput);
       ResourceLocation var4 = ModelTemplates.FARMLAND.create(TextureMapping.getBlockTexture(Blocks.FARMLAND, "_moist"), var2, this.modelOutput);
@@ -816,12 +918,12 @@
    private void createCocoa() {
       this.createSimpleFlatItemModel(Items.COCOA_BEANS);
       this.blockStateOutput.accept(MultiVariantGenerator.multiVariant(Blocks.COCOA).with(PropertyDispatch.property(BlockStateProperties.AGE_2).select(0, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelLocationUtils.getModelLocation(Blocks.COCOA, "_stage0"))).select(1, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelLocationUtils.getModelLocation(Blocks.COCOA, "_stage1"))).select(2, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelLocationUtils.getModelLocation(Blocks.COCOA, "_stage2")))).with(createHorizontalFacingDispatchAlt()));
    }
 
-   private void createGrassPath() {
-      this.blockStateOutput.accept(createRotatedVariant(Blocks.GRASS_PATH, ModelLocationUtils.getModelLocation(Blocks.GRASS_PATH)));
+   private void createDirtPath() {
+      this.blockStateOutput.accept(createRotatedVariant(Blocks.DIRT_PATH, ModelLocationUtils.getModelLocation(Blocks.DIRT_PATH)));
    }
 
    private void createWeightedPressurePlate(Block var1, Block var2) {
       TextureMapping var3 = TextureMapping.defaultTexture(var2);
       ResourceLocation var4 = ModelTemplates.PRESSURE_PLATE_UP.create(var1, var3, this.modelOutput);
@@ -909,17 +1011,35 @@
       TextureMapping var2 = var1.copyAndUpdate(TextureSlot.PLATFORM, TextureMapping.getBlockTexture(Blocks.PISTON, "_top_sticky"));
       TextureMapping var3 = var1.copyAndUpdate(TextureSlot.PLATFORM, TextureMapping.getBlockTexture(Blocks.PISTON, "_top"));
       this.blockStateOutput.accept(MultiVariantGenerator.multiVariant(Blocks.PISTON_HEAD).with(PropertyDispatch.properties(BlockStateProperties.SHORT, BlockStateProperties.PISTON_TYPE).select(false, PistonType.DEFAULT, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelTemplates.PISTON_HEAD.createWithSuffix(Blocks.PISTON, "_head", var3, this.modelOutput))).select(false, PistonType.STICKY, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelTemplates.PISTON_HEAD.createWithSuffix(Blocks.PISTON, "_head_sticky", var2, this.modelOutput))).select(true, PistonType.DEFAULT, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelTemplates.PISTON_HEAD_SHORT.createWithSuffix(Blocks.PISTON, "_head_short", var3, this.modelOutput))).select(true, PistonType.STICKY, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelTemplates.PISTON_HEAD_SHORT.createWithSuffix(Blocks.PISTON, "_head_short_sticky", var2, this.modelOutput)))).with(createFacingDispatch()));
    }
 
+   private void createSculkSensor() {
+      ResourceLocation var1 = ModelLocationUtils.getModelLocation(Blocks.SCULK_SENSOR, "_inactive");
+      ResourceLocation var2 = ModelLocationUtils.getModelLocation(Blocks.SCULK_SENSOR, "_active");
+      this.delegateItemModel(Blocks.SCULK_SENSOR, var1);
+      this.blockStateOutput.accept(MultiVariantGenerator.multiVariant(Blocks.SCULK_SENSOR).with(PropertyDispatch.property(BlockStateProperties.SCULK_SENSOR_PHASE).generate((var2x) -> {
+         return Variant.variant().with(VariantProperties.MODEL, var2x == SculkSensorPhase.ACTIVE ? var2 : var1);
+      })));
+   }
+
    private void createScaffolding() {
       ResourceLocation var1 = ModelLocationUtils.getModelLocation(Blocks.SCAFFOLDING, "_stable");
       ResourceLocation var2 = ModelLocationUtils.getModelLocation(Blocks.SCAFFOLDING, "_unstable");
       this.delegateItemModel(Blocks.SCAFFOLDING, var1);
       this.blockStateOutput.accept(MultiVariantGenerator.multiVariant(Blocks.SCAFFOLDING).with(createBooleanModelDispatch(BlockStateProperties.BOTTOM, var2, var1)));
    }
 
+   private void createCaveVines() {
+      ResourceLocation var1 = this.createSuffixedVariant(Blocks.CAVE_VINES, "", ModelTemplates.CROSS, TextureMapping::cross);
+      ResourceLocation var2 = this.createSuffixedVariant(Blocks.CAVE_VINES, "_lit", ModelTemplates.CROSS, TextureMapping::cross);
+      this.blockStateOutput.accept(MultiVariantGenerator.multiVariant(Blocks.CAVE_VINES).with(createBooleanModelDispatch(BlockStateProperties.BERRIES, var2, var1)));
+      ResourceLocation var3 = this.createSuffixedVariant(Blocks.CAVE_VINES_PLANT, "", ModelTemplates.CROSS, TextureMapping::cross);
+      ResourceLocation var4 = this.createSuffixedVariant(Blocks.CAVE_VINES_PLANT, "_lit", ModelTemplates.CROSS, TextureMapping::cross);
+      this.blockStateOutput.accept(MultiVariantGenerator.multiVariant(Blocks.CAVE_VINES_PLANT).with(createBooleanModelDispatch(BlockStateProperties.BERRIES, var4, var3)));
+   }
+
    private void createRedstoneLamp() {
       ResourceLocation var1 = TexturedModel.CUBE.create(Blocks.REDSTONE_LAMP, this.modelOutput);
       ResourceLocation var2 = this.createSuffixedVariant(Blocks.REDSTONE_LAMP, "_on", ModelTemplates.CUBE_ALL, TextureMapping::cube);
       this.blockStateOutput.accept(MultiVariantGenerator.multiVariant(Blocks.REDSTONE_LAMP).with(createBooleanModelDispatch(BlockStateProperties.LIT, var2, var1)));
    }
@@ -969,11 +1089,22 @@
 
    private void createSnowBlocks() {
       TextureMapping var1 = TextureMapping.cube(Blocks.SNOW);
       ResourceLocation var2 = ModelTemplates.CUBE_ALL.create(Blocks.SNOW_BLOCK, var1, this.modelOutput);
       this.blockStateOutput.accept(MultiVariantGenerator.multiVariant(Blocks.SNOW).with(PropertyDispatch.property(BlockStateProperties.LAYERS).generate((var1x) -> {
-         return Variant.variant().with(VariantProperties.MODEL, var1x < 8 ? ModelLocationUtils.getModelLocation(Blocks.SNOW, "_height" + var1x * 2) : var2);
+         Variant var10000 = Variant.variant();
+         VariantProperty var10001 = VariantProperties.MODEL;
+         ResourceLocation var2x;
+         if (var1x < 8) {
+            Block var10002 = Blocks.SNOW;
+            int var10003 = var1x;
+            var2x = ModelLocationUtils.getModelLocation(var10002, "_height" + var10003 * 2);
+         } else {
+            var2x = var2;
+         }
+
+         return var10000.with(var10001, var2x);
       })));
       this.delegateItemModel(Blocks.SNOW, ModelLocationUtils.getModelLocation(Blocks.SNOW, "_height2"));
       this.blockStateOutput.accept(createSimpleBlock(Blocks.SNOW_BLOCK, var2));
    }
 
@@ -1002,11 +1133,15 @@
    }
 
    private void createTripwireHook() {
       this.createSimpleFlatItemModel(Blocks.TRIPWIRE_HOOK);
       this.blockStateOutput.accept(MultiVariantGenerator.multiVariant(Blocks.TRIPWIRE_HOOK).with(PropertyDispatch.properties(BlockStateProperties.ATTACHED, BlockStateProperties.POWERED).generate((var0, var1) -> {
-         return Variant.variant().with(VariantProperties.MODEL, TextureMapping.getBlockTexture(Blocks.TRIPWIRE_HOOK, (var0 ? "_attached" : "") + (var1 ? "_on" : "")));
+         Variant var10000 = Variant.variant();
+         VariantProperty var10001 = VariantProperties.MODEL;
+         Block var10002 = Blocks.TRIPWIRE_HOOK;
+         String var10003 = var0 ? "_attached" : "";
+         return var10000.with(var10001, TextureMapping.getBlockTexture(var10002, var10003 + (var1 ? "_on" : "")));
       })).with(createHorizontalFacingDispatch()));
    }
 
    private ResourceLocation createTurtleEggModel(int var1, String var2, TextureMapping var3) {
       switch(var1) {
@@ -1041,13 +1176,21 @@
       this.blockStateOutput.accept(MultiVariantGenerator.multiVariant(Blocks.TURTLE_EGG).with(PropertyDispatch.properties(BlockStateProperties.EGGS, BlockStateProperties.HATCH).generateList((var1, var2) -> {
          return Arrays.asList(createRotatedVariants(this.createTurtleEggModel(var1, var2)));
       })));
    }
 
-   private void createVine() {
-      this.createSimpleFlatItemModel(Blocks.VINE);
-      this.blockStateOutput.accept(MultiVariantGenerator.multiVariant(Blocks.VINE).with(PropertyDispatch.properties(BlockStateProperties.EAST, BlockStateProperties.NORTH, BlockStateProperties.SOUTH, BlockStateProperties.UP, BlockStateProperties.WEST).select(false, false, false, false, false, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelLocationUtils.getModelLocation(Blocks.VINE, "_1"))).select(false, false, true, false, false, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelLocationUtils.getModelLocation(Blocks.VINE, "_1"))).select(false, false, false, false, true, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelLocationUtils.getModelLocation(Blocks.VINE, "_1")).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90)).select(false, true, false, false, false, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelLocationUtils.getModelLocation(Blocks.VINE, "_1")).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R180)).select(true, false, false, false, false, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelLocationUtils.getModelLocation(Blocks.VINE, "_1")).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R270)).select(true, true, false, false, false, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelLocationUtils.getModelLocation(Blocks.VINE, "_2"))).select(true, false, true, false, false, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelLocationUtils.getModelLocation(Blocks.VINE, "_2")).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90)).select(false, false, true, false, true, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelLocationUtils.getModelLocation(Blocks.VINE, "_2")).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R180)).select(false, true, false, false, true, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelLocationUtils.getModelLocation(Blocks.VINE, "_2")).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R270)).select(true, false, false, false, true, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelLocationUtils.getModelLocation(Blocks.VINE, "_2_opposite"))).select(false, true, true, false, false, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelLocationUtils.getModelLocation(Blocks.VINE, "_2_opposite")).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90)).select(true, true, true, false, false, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelLocationUtils.getModelLocation(Blocks.VINE, "_3"))).select(true, false, true, false, true, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelLocationUtils.getModelLocation(Blocks.VINE, "_3")).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90)).select(false, true, true, false, true, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelLocationUtils.getModelLocation(Blocks.VINE, "_3")).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R180)).select(true, true, false, false, true, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelLocationUtils.getModelLocation(Blocks.VINE, "_3")).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R270)).select(true, true, true, false, true, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelLocationUtils.getModelLocation(Blocks.VINE, "_4"))).select(false, false, false, true, false, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelLocationUtils.getModelLocation(Blocks.VINE, "_u"))).select(false, false, true, true, false, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelLocationUtils.getModelLocation(Blocks.VINE, "_1u"))).select(false, false, false, true, true, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelLocationUtils.getModelLocation(Blocks.VINE, "_1u")).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90)).select(false, true, false, true, false, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelLocationUtils.getModelLocation(Blocks.VINE, "_1u")).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R180)).select(true, false, false, true, false, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelLocationUtils.getModelLocation(Blocks.VINE, "_1u")).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R270)).select(true, true, false, true, false, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelLocationUtils.getModelLocation(Blocks.VINE, "_2u"))).select(true, false, true, true, false, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelLocationUtils.getModelLocation(Blocks.VINE, "_2u")).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90)).select(false, false, true, true, true, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelLocationUtils.getModelLocation(Blocks.VINE, "_2u")).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R180)).select(false, true, false, true, true, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelLocationUtils.getModelLocation(Blocks.VINE, "_2u")).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R270)).select(true, false, false, true, true, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelLocationUtils.getModelLocation(Blocks.VINE, "_2u_opposite"))).select(false, true, true, true, false, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelLocationUtils.getModelLocation(Blocks.VINE, "_2u_opposite")).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90)).select(true, true, true, true, false, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelLocationUtils.getModelLocation(Blocks.VINE, "_3u"))).select(true, false, true, true, true, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelLocationUtils.getModelLocation(Blocks.VINE, "_3u")).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90)).select(false, true, true, true, true, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelLocationUtils.getModelLocation(Blocks.VINE, "_3u")).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R180)).select(true, true, false, true, true, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelLocationUtils.getModelLocation(Blocks.VINE, "_3u")).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R270)).select(true, true, true, true, true, (Variant)Variant.variant().with(VariantProperties.MODEL, ModelLocationUtils.getModelLocation(Blocks.VINE, "_4u")))));
+   private void createMultiface(Block var1) {
+      this.createSimpleFlatItemModel(var1);
+      ResourceLocation var2 = ModelLocationUtils.getModelLocation(var1);
+      MultiPartGenerator var3 = MultiPartGenerator.multiPart(var1);
+      MULTIFACE_GENERATOR.forEach((var3x, var4) -> {
+         if (var1.defaultBlockState().hasProperty(var3x)) {
+            var3.with(Condition.condition().term(var3x, true), (Variant)((Variant)var4.apply(var2)));
+         }
+
+      });
+      this.blockStateOutput.accept(var3);
    }
 
    private void createMagmaBlock() {
       this.blockStateOutput.accept(createSimpleBlock(Blocks.MAGMA_BLOCK, ModelTemplates.CUBE_ALL.create(Blocks.MAGMA_BLOCK, TextureMapping.cube(ModelLocationUtils.decorateBlockModelLocation("magma")), this.modelOutput)));
    }
@@ -1071,10 +1214,17 @@
       ResourceLocation var2 = ModelLocationUtils.getModelLocation(Blocks.STONE, "_mirrored");
       this.blockStateOutput.accept(createRotatedVariant(Blocks.INFESTED_STONE, var1, var2));
       this.delegateItemModel(Blocks.INFESTED_STONE, var1);
    }
 
+   private void createInfestedDeepslate() {
+      ResourceLocation var1 = ModelLocationUtils.getModelLocation(Blocks.DEEPSLATE);
+      ResourceLocation var2 = ModelLocationUtils.getModelLocation(Blocks.DEEPSLATE, "_mirrored");
+      this.blockStateOutput.accept(createRotatedVariant(Blocks.INFESTED_DEEPSLATE, var1, var2).with(createRotatedPillar()));
+      this.delegateItemModel(Blocks.INFESTED_DEEPSLATE, var1);
+   }
+
    private void createNetherRoots(Block var1, Block var2) {
       this.createCrossBlockWithDefaultItem(var1, BlockModelGenerators.TintState.NOT_TINTED);
       TextureMapping var3 = TextureMapping.plant(TextureMapping.getBlockTexture(var1, "_pot"));
       ResourceLocation var4 = BlockModelGenerators.TintState.NOT_TINTED.getCrossPot().create(var2, var3, this.modelOutput);
       this.blockStateOutput.accept(createSimpleBlock(var2, var4));
@@ -1138,11 +1288,28 @@
       this.blockStateOutput.accept(MultiVariantGenerator.multiVariant(Blocks.JIGSAW, Variant.variant().with(VariantProperties.MODEL, var6)).with(PropertyDispatch.property(BlockStateProperties.ORIENTATION).generate((var1x) -> {
          return this.applyRotation(var1x, Variant.variant());
       })));
    }
 
+   private void createPetrifiedOakSlab() {
+      Block var1 = Blocks.OAK_PLANKS;
+      ResourceLocation var2 = ModelLocationUtils.getModelLocation(var1);
+      TexturedModel var3 = TexturedModel.CUBE.get(var1);
+      Block var4 = Blocks.PETRIFIED_OAK_SLAB;
+      ResourceLocation var5 = ModelTemplates.SLAB_BOTTOM.create(var4, var3.getMapping(), this.modelOutput);
+      ResourceLocation var6 = ModelTemplates.SLAB_TOP.create(var4, var3.getMapping(), this.modelOutput);
+      this.blockStateOutput.accept(createSlab(var4, var5, var6, var2));
+   }
+
    public void run() {
+      BlockFamilies.getAllFamilies().filter(BlockFamily::shouldGenerateModel).forEach((var1) -> {
+         this.family(var1.getBaseBlock()).generateFor(var1);
+      });
+      this.family(Blocks.CUT_COPPER).generateFor(BlockFamilies.CUT_COPPER).fullBlockCopies(Blocks.WAXED_CUT_COPPER).generateFor(BlockFamilies.WAXED_CUT_COPPER);
+      this.family(Blocks.EXPOSED_CUT_COPPER).generateFor(BlockFamilies.EXPOSED_CUT_COPPER).fullBlockCopies(Blocks.WAXED_EXPOSED_CUT_COPPER).generateFor(BlockFamilies.WAXED_EXPOSED_CUT_COPPER);
+      this.family(Blocks.WEATHERED_CUT_COPPER).generateFor(BlockFamilies.WEATHERED_CUT_COPPER).fullBlockCopies(Blocks.WAXED_WEATHERED_CUT_COPPER).generateFor(BlockFamilies.WAXED_WEATHERED_CUT_COPPER);
+      this.family(Blocks.OXIDIZED_CUT_COPPER).generateFor(BlockFamilies.OXIDIZED_CUT_COPPER).fullBlockCopies(Blocks.WAXED_OXIDIZED_CUT_COPPER).generateFor(BlockFamilies.WAXED_OXIDIZED_CUT_COPPER);
       this.createNonTemplateModelBlock(Blocks.AIR);
       this.createNonTemplateModelBlock(Blocks.CAVE_AIR, Blocks.AIR);
       this.createNonTemplateModelBlock(Blocks.VOID_AIR, Blocks.AIR);
       this.createNonTemplateModelBlock(Blocks.BEACON);
       this.createNonTemplateModelBlock(Blocks.CACTUS);
@@ -1155,97 +1322,141 @@
       this.createNonTemplateModelBlock(Blocks.HONEY_BLOCK);
       this.createNonTemplateModelBlock(Blocks.WATER);
       this.createNonTemplateModelBlock(Blocks.LAVA);
       this.createNonTemplateModelBlock(Blocks.SLIME_BLOCK);
       this.createSimpleFlatItemModel(Items.CHAIN);
+      this.createCandleAndCandleCake(Blocks.WHITE_CANDLE, Blocks.WHITE_CANDLE_CAKE);
+      this.createCandleAndCandleCake(Blocks.ORANGE_CANDLE, Blocks.ORANGE_CANDLE_CAKE);
+      this.createCandleAndCandleCake(Blocks.MAGENTA_CANDLE, Blocks.MAGENTA_CANDLE_CAKE);
+      this.createCandleAndCandleCake(Blocks.LIGHT_BLUE_CANDLE, Blocks.LIGHT_BLUE_CANDLE_CAKE);
+      this.createCandleAndCandleCake(Blocks.YELLOW_CANDLE, Blocks.YELLOW_CANDLE_CAKE);
+      this.createCandleAndCandleCake(Blocks.LIME_CANDLE, Blocks.LIME_CANDLE_CAKE);
+      this.createCandleAndCandleCake(Blocks.PINK_CANDLE, Blocks.PINK_CANDLE_CAKE);
+      this.createCandleAndCandleCake(Blocks.GRAY_CANDLE, Blocks.GRAY_CANDLE_CAKE);
+      this.createCandleAndCandleCake(Blocks.LIGHT_GRAY_CANDLE, Blocks.LIGHT_GRAY_CANDLE_CAKE);
+      this.createCandleAndCandleCake(Blocks.CYAN_CANDLE, Blocks.CYAN_CANDLE_CAKE);
+      this.createCandleAndCandleCake(Blocks.PURPLE_CANDLE, Blocks.PURPLE_CANDLE_CAKE);
+      this.createCandleAndCandleCake(Blocks.BLUE_CANDLE, Blocks.BLUE_CANDLE_CAKE);
+      this.createCandleAndCandleCake(Blocks.BROWN_CANDLE, Blocks.BROWN_CANDLE_CAKE);
+      this.createCandleAndCandleCake(Blocks.GREEN_CANDLE, Blocks.GREEN_CANDLE_CAKE);
+      this.createCandleAndCandleCake(Blocks.RED_CANDLE, Blocks.RED_CANDLE_CAKE);
+      this.createCandleAndCandleCake(Blocks.BLACK_CANDLE, Blocks.BLACK_CANDLE_CAKE);
+      this.createCandleAndCandleCake(Blocks.CANDLE, Blocks.CANDLE_CAKE);
       this.createNonTemplateModelBlock(Blocks.POTTED_BAMBOO);
       this.createNonTemplateModelBlock(Blocks.POTTED_CACTUS);
+      this.createNonTemplateModelBlock(Blocks.POWDER_SNOW);
+      this.createNonTemplateModelBlock(Blocks.SPORE_BLOSSOM);
+      this.createAzalea(Blocks.AZALEA);
+      this.createAzalea(Blocks.FLOWERING_AZALEA);
+      this.createPottedAzalea(Blocks.POTTED_AZALEA);
+      this.createPottedAzalea(Blocks.POTTED_FLOWERING_AZALEA);
+      this.createCaveVines();
+      this.createFullAndCarpetBlocks(Blocks.MOSS_BLOCK, Blocks.MOSS_CARPET);
       this.createAirLikeBlock(Blocks.BARRIER, Items.BARRIER);
       this.createSimpleFlatItemModel(Items.BARRIER);
+      this.createAirLikeBlock(Blocks.LIGHT, Items.LIGHT);
+      this.createLightBlockItems();
       this.createAirLikeBlock(Blocks.STRUCTURE_VOID, Items.STRUCTURE_VOID);
       this.createSimpleFlatItemModel(Items.STRUCTURE_VOID);
       this.createAirLikeBlock(Blocks.MOVING_PISTON, TextureMapping.getBlockTexture(Blocks.PISTON, "_side"));
-      this.createTrivialBlock(Blocks.COAL_ORE, TexturedModel.CUBE);
-      this.createTrivialBlock(Blocks.COAL_BLOCK, TexturedModel.CUBE);
-      this.createTrivialBlock(Blocks.DIAMOND_ORE, TexturedModel.CUBE);
-      this.createTrivialBlock(Blocks.DIAMOND_BLOCK, TexturedModel.CUBE);
-      this.createTrivialBlock(Blocks.EMERALD_ORE, TexturedModel.CUBE);
-      this.createTrivialBlock(Blocks.EMERALD_BLOCK, TexturedModel.CUBE);
-      this.createTrivialBlock(Blocks.GOLD_ORE, TexturedModel.CUBE);
-      this.createTrivialBlock(Blocks.NETHER_GOLD_ORE, TexturedModel.CUBE);
-      this.createTrivialBlock(Blocks.GOLD_BLOCK, TexturedModel.CUBE);
-      this.createTrivialBlock(Blocks.IRON_ORE, TexturedModel.CUBE);
-      this.createTrivialBlock(Blocks.IRON_BLOCK, TexturedModel.CUBE);
+      this.createTrivialCube(Blocks.COAL_ORE);
+      this.createTrivialCube(Blocks.DEEPSLATE_COAL_ORE);
+      this.createTrivialCube(Blocks.COAL_BLOCK);
+      this.createTrivialCube(Blocks.DIAMOND_ORE);
+      this.createTrivialCube(Blocks.DEEPSLATE_DIAMOND_ORE);
+      this.createTrivialCube(Blocks.DIAMOND_BLOCK);
+      this.createTrivialCube(Blocks.EMERALD_ORE);
+      this.createTrivialCube(Blocks.DEEPSLATE_EMERALD_ORE);
+      this.createTrivialCube(Blocks.EMERALD_BLOCK);
+      this.createTrivialCube(Blocks.GOLD_ORE);
+      this.createTrivialCube(Blocks.NETHER_GOLD_ORE);
+      this.createTrivialCube(Blocks.DEEPSLATE_GOLD_ORE);
+      this.createTrivialCube(Blocks.GOLD_BLOCK);
+      this.createTrivialCube(Blocks.IRON_ORE);
+      this.createTrivialCube(Blocks.DEEPSLATE_IRON_ORE);
+      this.createTrivialCube(Blocks.IRON_BLOCK);
       this.createTrivialBlock(Blocks.ANCIENT_DEBRIS, TexturedModel.COLUMN);
-      this.createTrivialBlock(Blocks.NETHERITE_BLOCK, TexturedModel.CUBE);
-      this.createTrivialBlock(Blocks.LAPIS_ORE, TexturedModel.CUBE);
-      this.createTrivialBlock(Blocks.LAPIS_BLOCK, TexturedModel.CUBE);
-      this.createTrivialBlock(Blocks.NETHER_QUARTZ_ORE, TexturedModel.CUBE);
-      this.createTrivialBlock(Blocks.REDSTONE_ORE, TexturedModel.CUBE);
-      this.createTrivialBlock(Blocks.REDSTONE_BLOCK, TexturedModel.CUBE);
-      this.createTrivialBlock(Blocks.GILDED_BLACKSTONE, TexturedModel.CUBE);
-      this.createTrivialBlock(Blocks.BLUE_ICE, TexturedModel.CUBE);
-      this.createTrivialBlock(Blocks.CHISELED_NETHER_BRICKS, TexturedModel.CUBE);
-      this.createTrivialBlock(Blocks.CLAY, TexturedModel.CUBE);
-      this.createTrivialBlock(Blocks.COARSE_DIRT, TexturedModel.CUBE);
-      this.createTrivialBlock(Blocks.CRACKED_NETHER_BRICKS, TexturedModel.CUBE);
-      this.createTrivialBlock(Blocks.CRACKED_STONE_BRICKS, TexturedModel.CUBE);
-      this.createTrivialBlock(Blocks.CRYING_OBSIDIAN, TexturedModel.CUBE);
-      this.createTrivialBlock(Blocks.END_STONE, TexturedModel.CUBE);
-      this.createTrivialBlock(Blocks.GLOWSTONE, TexturedModel.CUBE);
-      this.createTrivialBlock(Blocks.GRAVEL, TexturedModel.CUBE);
-      this.createTrivialBlock(Blocks.HONEYCOMB_BLOCK, TexturedModel.CUBE);
-      this.createTrivialBlock(Blocks.ICE, TexturedModel.CUBE);
+      this.createTrivialCube(Blocks.NETHERITE_BLOCK);
+      this.createTrivialCube(Blocks.LAPIS_ORE);
+      this.createTrivialCube(Blocks.DEEPSLATE_LAPIS_ORE);
+      this.createTrivialCube(Blocks.LAPIS_BLOCK);
+      this.createTrivialCube(Blocks.NETHER_QUARTZ_ORE);
+      this.createTrivialCube(Blocks.REDSTONE_ORE);
+      this.createTrivialCube(Blocks.DEEPSLATE_REDSTONE_ORE);
+      this.createTrivialCube(Blocks.REDSTONE_BLOCK);
+      this.createTrivialCube(Blocks.GILDED_BLACKSTONE);
+      this.createTrivialCube(Blocks.BLUE_ICE);
+      this.createTrivialCube(Blocks.CLAY);
+      this.createTrivialCube(Blocks.COARSE_DIRT);
+      this.createTrivialCube(Blocks.CRYING_OBSIDIAN);
+      this.createTrivialCube(Blocks.END_STONE);
+      this.createTrivialCube(Blocks.GLOWSTONE);
+      this.createTrivialCube(Blocks.GRAVEL);
+      this.createTrivialCube(Blocks.HONEYCOMB_BLOCK);
+      this.createTrivialCube(Blocks.ICE);
       this.createTrivialBlock(Blocks.JUKEBOX, TexturedModel.CUBE_TOP);
       this.createTrivialBlock(Blocks.LODESTONE, TexturedModel.COLUMN);
       this.createTrivialBlock(Blocks.MELON, TexturedModel.COLUMN);
-      this.createTrivialBlock(Blocks.NETHER_WART_BLOCK, TexturedModel.CUBE);
-      this.createTrivialBlock(Blocks.NOTE_BLOCK, TexturedModel.CUBE);
-      this.createTrivialBlock(Blocks.PACKED_ICE, TexturedModel.CUBE);
-      this.createTrivialBlock(Blocks.OBSIDIAN, TexturedModel.CUBE);
-      this.createTrivialBlock(Blocks.QUARTZ_BRICKS, TexturedModel.CUBE);
-      this.createTrivialBlock(Blocks.SEA_LANTERN, TexturedModel.CUBE);
-      this.createTrivialBlock(Blocks.SHROOMLIGHT, TexturedModel.CUBE);
-      this.createTrivialBlock(Blocks.SOUL_SAND, TexturedModel.CUBE);
-      this.createTrivialBlock(Blocks.SOUL_SOIL, TexturedModel.CUBE);
-      this.createTrivialBlock(Blocks.SPAWNER, TexturedModel.CUBE);
-      this.createTrivialBlock(Blocks.SPONGE, TexturedModel.CUBE);
+      this.createTrivialCube(Blocks.NETHER_WART_BLOCK);
+      this.createTrivialCube(Blocks.NOTE_BLOCK);
+      this.createTrivialCube(Blocks.PACKED_ICE);
+      this.createTrivialCube(Blocks.OBSIDIAN);
+      this.createTrivialCube(Blocks.QUARTZ_BRICKS);
+      this.createTrivialCube(Blocks.SEA_LANTERN);
+      this.createTrivialCube(Blocks.SHROOMLIGHT);
+      this.createTrivialCube(Blocks.SOUL_SAND);
+      this.createTrivialCube(Blocks.SOUL_SOIL);
+      this.createTrivialCube(Blocks.SPAWNER);
+      this.createTrivialCube(Blocks.SPONGE);
       this.createTrivialBlock(Blocks.SEAGRASS, TexturedModel.SEAGRASS);
       this.createSimpleFlatItemModel(Items.SEAGRASS);
       this.createTrivialBlock(Blocks.TNT, TexturedModel.CUBE_TOP_BOTTOM);
       this.createTrivialBlock(Blocks.TARGET, TexturedModel.COLUMN);
-      this.createTrivialBlock(Blocks.WARPED_WART_BLOCK, TexturedModel.CUBE);
-      this.createTrivialBlock(Blocks.WET_SPONGE, TexturedModel.CUBE);
-      this.createTrivialBlock(Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS, TexturedModel.CUBE);
-      this.createTrivialBlock(Blocks.CHISELED_QUARTZ_BLOCK, TexturedModel.COLUMN.updateTexture((var0) -> {
-         var0.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CHISELED_QUARTZ_BLOCK));
-      }));
-      this.createTrivialBlock(Blocks.CHISELED_STONE_BRICKS, TexturedModel.CUBE);
-      this.createChiseledSandsone(Blocks.CHISELED_SANDSTONE, Blocks.SANDSTONE);
-      this.createChiseledSandsone(Blocks.CHISELED_RED_SANDSTONE, Blocks.RED_SANDSTONE);
-      this.createTrivialBlock(Blocks.CHISELED_POLISHED_BLACKSTONE, TexturedModel.CUBE);
+      this.createTrivialCube(Blocks.WARPED_WART_BLOCK);
+      this.createTrivialCube(Blocks.WET_SPONGE);
+      this.createTrivialCube(Blocks.AMETHYST_BLOCK);
+      this.createTrivialCube(Blocks.BUDDING_AMETHYST);
+      this.createTrivialCube(Blocks.CALCITE);
+      this.createTrivialCube(Blocks.TUFF);
+      this.createTrivialCube(Blocks.DRIPSTONE_BLOCK);
+      this.createTrivialCube(Blocks.RAW_IRON_BLOCK);
+      this.createTrivialCube(Blocks.RAW_COPPER_BLOCK);
+      this.createTrivialCube(Blocks.RAW_GOLD_BLOCK);
+      this.createPetrifiedOakSlab();
+      this.createTrivialCube(Blocks.COPPER_ORE);
+      this.createTrivialCube(Blocks.DEEPSLATE_COPPER_ORE);
+      this.createTrivialCube(Blocks.COPPER_BLOCK);
+      this.createTrivialCube(Blocks.EXPOSED_COPPER);
+      this.createTrivialCube(Blocks.WEATHERED_COPPER);
+      this.createTrivialCube(Blocks.OXIDIZED_COPPER);
+      this.copyModel(Blocks.COPPER_BLOCK, Blocks.WAXED_COPPER_BLOCK);
+      this.copyModel(Blocks.EXPOSED_COPPER, Blocks.WAXED_EXPOSED_COPPER);
+      this.copyModel(Blocks.WEATHERED_COPPER, Blocks.WAXED_WEATHERED_COPPER);
+      this.copyModel(Blocks.OXIDIZED_COPPER, Blocks.WAXED_OXIDIZED_COPPER);
       this.createWeightedPressurePlate(Blocks.LIGHT_WEIGHTED_PRESSURE_PLATE, Blocks.GOLD_BLOCK);
       this.createWeightedPressurePlate(Blocks.HEAVY_WEIGHTED_PRESSURE_PLATE, Blocks.IRON_BLOCK);
+      this.createAmethystClusters();
       this.createBookshelf();
       this.createBrewingStand();
       this.createCakeBlock();
       this.createCampfires(Blocks.CAMPFIRE, Blocks.SOUL_CAMPFIRE);
       this.createCartographyTable();
-      this.createCauldron();
+      this.createCauldrons();
       this.createChorusFlower();
       this.createChorusPlant();
       this.createComposter();
       this.createDaylightDetector();
       this.createEndPortalFrame();
       this.createRotatableColumn(Blocks.END_ROD);
+      this.createLightningRod();
       this.createFarmland();
       this.createFire();
       this.createSoulFire();
       this.createFrostedIce();
       this.createGrassBlocks();
       this.createCocoa();
-      this.createGrassPath();
+      this.createDirtPath();
       this.createGrindstone();
       this.createHopper();
       this.createIronBars();
       this.createLever();
       this.createLilyPad();
@@ -1265,16 +1476,20 @@
       this.createStructureBlock();
       this.createSweetBerryBush();
       this.createTripwire();
       this.createTripwireHook();
       this.createTurtleEgg();
-      this.createVine();
+      this.createMultiface(Blocks.VINE);
+      this.createMultiface(Blocks.GLOW_LICHEN);
       this.createMagmaBlock();
       this.createJigsaw();
+      this.createSculkSensor();
       this.createNonTemplateHorizontalBlock(Blocks.LADDER);
       this.createSimpleFlatItemModel(Blocks.LADDER);
       this.createNonTemplateHorizontalBlock(Blocks.LECTERN);
+      this.createBigDripLeafBlock();
+      this.createNonTemplateHorizontalBlock(Blocks.BIG_DRIPLEAF_STEM);
       this.createNormalTorch(Blocks.TORCH, Blocks.WALL_TORCH);
       this.createNormalTorch(Blocks.SOUL_TORCH, Blocks.SOUL_WALL_TORCH);
       this.createCraftingTableLike(Blocks.CRAFTING_TABLE, Blocks.OAK_PLANKS, TextureMapping::craftingTable);
       this.createCraftingTableLike(Blocks.FLETCHING_TABLE, Blocks.BIRCH_PLANKS, TextureMapping::fletchingTable);
       this.createNyliumBlock(Blocks.CRIMSON_NYLIUM);
@@ -1284,12 +1499,14 @@
       this.createLantern(Blocks.LANTERN);
       this.createLantern(Blocks.SOUL_LANTERN);
       this.createAxisAlignedPillarBlockCustomModel(Blocks.CHAIN, ModelLocationUtils.getModelLocation(Blocks.CHAIN));
       this.createAxisAlignedPillarBlock(Blocks.BASALT, TexturedModel.COLUMN);
       this.createAxisAlignedPillarBlock(Blocks.POLISHED_BASALT, TexturedModel.COLUMN);
+      this.createTrivialCube(Blocks.SMOOTH_BASALT);
       this.createAxisAlignedPillarBlock(Blocks.BONE_BLOCK, TexturedModel.COLUMN);
       this.createRotatedVariantBlock(Blocks.DIRT);
+      this.createRotatedVariantBlock(Blocks.ROOTED_DIRT);
       this.createRotatedVariantBlock(Blocks.SAND);
       this.createRotatedVariantBlock(Blocks.RED_SAND);
       this.createRotatedMirroredVariantBlock(Blocks.BEDROCK);
       this.createRotatedPillarWithHorizontalVariant(Blocks.HAY_BLOCK, TexturedModel.COLUMN, TexturedModel.COLUMN_HORIZONTAL);
       this.createRotatedPillarWithHorizontalVariant(Blocks.PURPUR_PILLAR, TexturedModel.COLUMN_ALT, TexturedModel.COLUMN_HORIZONTAL_ALT);
@@ -1342,10 +1559,12 @@
       this.createTrivialBlock(Blocks.CONDUIT, TexturedModel.PARTICLE_ONLY);
       this.skipAutoItemBlock(Blocks.CONDUIT);
       this.blockEntityModels(ModelLocationUtils.decorateBlockModelLocation("chest"), Blocks.OAK_PLANKS).createWithoutBlockItem(Blocks.CHEST, Blocks.TRAPPED_CHEST);
       this.blockEntityModels(ModelLocationUtils.decorateBlockModelLocation("ender_chest"), Blocks.OBSIDIAN).createWithoutBlockItem(Blocks.ENDER_CHEST);
       this.blockEntityModels(Blocks.END_PORTAL, Blocks.OBSIDIAN).create(Blocks.END_PORTAL, Blocks.END_GATEWAY);
+      this.createTrivialCube(Blocks.AZALEA_LEAVES);
+      this.createTrivialCube(Blocks.AZALEA_LEAVES_FLOWERS);
       this.createTrivialCube(Blocks.WHITE_CONCRETE);
       this.createTrivialCube(Blocks.ORANGE_CONCRETE);
       this.createTrivialCube(Blocks.MAGENTA_CONCRETE);
       this.createTrivialCube(Blocks.LIGHT_BLUE_CONCRETE);
       this.createTrivialCube(Blocks.YELLOW_CONCRETE);
@@ -1376,10 +1595,11 @@
       this.createTrivialCube(Blocks.BLUE_TERRACOTTA);
       this.createTrivialCube(Blocks.BROWN_TERRACOTTA);
       this.createTrivialCube(Blocks.GREEN_TERRACOTTA);
       this.createTrivialCube(Blocks.RED_TERRACOTTA);
       this.createTrivialCube(Blocks.BLACK_TERRACOTTA);
+      this.createTrivialCube(Blocks.TINTED_GLASS);
       this.createGlassBlocks(Blocks.GLASS, Blocks.GLASS_PANE);
       this.createGlassBlocks(Blocks.WHITE_STAINED_GLASS, Blocks.WHITE_STAINED_GLASS_PANE);
       this.createGlassBlocks(Blocks.ORANGE_STAINED_GLASS, Blocks.ORANGE_STAINED_GLASS_PANE);
       this.createGlassBlocks(Blocks.MAGENTA_STAINED_GLASS, Blocks.MAGENTA_STAINED_GLASS_PANE);
       this.createGlassBlocks(Blocks.LIGHT_BLUE_STAINED_GLASS, Blocks.LIGHT_BLUE_STAINED_GLASS_PANE);
@@ -1394,26 +1614,26 @@
       this.createGlassBlocks(Blocks.BROWN_STAINED_GLASS, Blocks.BROWN_STAINED_GLASS_PANE);
       this.createGlassBlocks(Blocks.GREEN_STAINED_GLASS, Blocks.GREEN_STAINED_GLASS_PANE);
       this.createGlassBlocks(Blocks.RED_STAINED_GLASS, Blocks.RED_STAINED_GLASS_PANE);
       this.createGlassBlocks(Blocks.BLACK_STAINED_GLASS, Blocks.BLACK_STAINED_GLASS_PANE);
       this.createColoredBlockWithStateRotations(TexturedModel.GLAZED_TERRACOTTA, Blocks.WHITE_GLAZED_TERRACOTTA, Blocks.ORANGE_GLAZED_TERRACOTTA, Blocks.MAGENTA_GLAZED_TERRACOTTA, Blocks.LIGHT_BLUE_GLAZED_TERRACOTTA, Blocks.YELLOW_GLAZED_TERRACOTTA, Blocks.LIME_GLAZED_TERRACOTTA, Blocks.PINK_GLAZED_TERRACOTTA, Blocks.GRAY_GLAZED_TERRACOTTA, Blocks.LIGHT_GRAY_GLAZED_TERRACOTTA, Blocks.CYAN_GLAZED_TERRACOTTA, Blocks.PURPLE_GLAZED_TERRACOTTA, Blocks.BLUE_GLAZED_TERRACOTTA, Blocks.BROWN_GLAZED_TERRACOTTA, Blocks.GREEN_GLAZED_TERRACOTTA, Blocks.RED_GLAZED_TERRACOTTA, Blocks.BLACK_GLAZED_TERRACOTTA);
-      this.createWoolBlocks(Blocks.WHITE_WOOL, Blocks.WHITE_CARPET);
-      this.createWoolBlocks(Blocks.ORANGE_WOOL, Blocks.ORANGE_CARPET);
-      this.createWoolBlocks(Blocks.MAGENTA_WOOL, Blocks.MAGENTA_CARPET);
-      this.createWoolBlocks(Blocks.LIGHT_BLUE_WOOL, Blocks.LIGHT_BLUE_CARPET);
-      this.createWoolBlocks(Blocks.YELLOW_WOOL, Blocks.YELLOW_CARPET);
-      this.createWoolBlocks(Blocks.LIME_WOOL, Blocks.LIME_CARPET);
-      this.createWoolBlocks(Blocks.PINK_WOOL, Blocks.PINK_CARPET);
-      this.createWoolBlocks(Blocks.GRAY_WOOL, Blocks.GRAY_CARPET);
-      this.createWoolBlocks(Blocks.LIGHT_GRAY_WOOL, Blocks.LIGHT_GRAY_CARPET);
-      this.createWoolBlocks(Blocks.CYAN_WOOL, Blocks.CYAN_CARPET);
-      this.createWoolBlocks(Blocks.PURPLE_WOOL, Blocks.PURPLE_CARPET);
-      this.createWoolBlocks(Blocks.BLUE_WOOL, Blocks.BLUE_CARPET);
-      this.createWoolBlocks(Blocks.BROWN_WOOL, Blocks.BROWN_CARPET);
-      this.createWoolBlocks(Blocks.GREEN_WOOL, Blocks.GREEN_CARPET);
-      this.createWoolBlocks(Blocks.RED_WOOL, Blocks.RED_CARPET);
-      this.createWoolBlocks(Blocks.BLACK_WOOL, Blocks.BLACK_CARPET);
+      this.createFullAndCarpetBlocks(Blocks.WHITE_WOOL, Blocks.WHITE_CARPET);
+      this.createFullAndCarpetBlocks(Blocks.ORANGE_WOOL, Blocks.ORANGE_CARPET);
+      this.createFullAndCarpetBlocks(Blocks.MAGENTA_WOOL, Blocks.MAGENTA_CARPET);
+      this.createFullAndCarpetBlocks(Blocks.LIGHT_BLUE_WOOL, Blocks.LIGHT_BLUE_CARPET);
+      this.createFullAndCarpetBlocks(Blocks.YELLOW_WOOL, Blocks.YELLOW_CARPET);
+      this.createFullAndCarpetBlocks(Blocks.LIME_WOOL, Blocks.LIME_CARPET);
+      this.createFullAndCarpetBlocks(Blocks.PINK_WOOL, Blocks.PINK_CARPET);
+      this.createFullAndCarpetBlocks(Blocks.GRAY_WOOL, Blocks.GRAY_CARPET);
+      this.createFullAndCarpetBlocks(Blocks.LIGHT_GRAY_WOOL, Blocks.LIGHT_GRAY_CARPET);
+      this.createFullAndCarpetBlocks(Blocks.CYAN_WOOL, Blocks.CYAN_CARPET);
+      this.createFullAndCarpetBlocks(Blocks.PURPLE_WOOL, Blocks.PURPLE_CARPET);
+      this.createFullAndCarpetBlocks(Blocks.BLUE_WOOL, Blocks.BLUE_CARPET);
+      this.createFullAndCarpetBlocks(Blocks.BROWN_WOOL, Blocks.BROWN_CARPET);
+      this.createFullAndCarpetBlocks(Blocks.GREEN_WOOL, Blocks.GREEN_CARPET);
+      this.createFullAndCarpetBlocks(Blocks.RED_WOOL, Blocks.RED_CARPET);
+      this.createFullAndCarpetBlocks(Blocks.BLACK_WOOL, Blocks.BLACK_CARPET);
       this.createPlant(Blocks.FERN, Blocks.POTTED_FERN, BlockModelGenerators.TintState.TINTED);
       this.createPlant(Blocks.DANDELION, Blocks.POTTED_DANDELION, BlockModelGenerators.TintState.NOT_TINTED);
       this.createPlant(Blocks.POPPY, Blocks.POTTED_POPPY, BlockModelGenerators.TintState.NOT_TINTED);
       this.createPlant(Blocks.BLUE_ORCHID, Blocks.POTTED_BLUE_ORCHID, BlockModelGenerators.TintState.NOT_TINTED);
       this.createPlant(Blocks.ALLIUM, Blocks.POTTED_ALLIUM, BlockModelGenerators.TintState.NOT_TINTED);
@@ -1427,19 +1647,23 @@
       this.createPlant(Blocks.LILY_OF_THE_VALLEY, Blocks.POTTED_LILY_OF_THE_VALLEY, BlockModelGenerators.TintState.NOT_TINTED);
       this.createPlant(Blocks.WITHER_ROSE, Blocks.POTTED_WITHER_ROSE, BlockModelGenerators.TintState.NOT_TINTED);
       this.createPlant(Blocks.RED_MUSHROOM, Blocks.POTTED_RED_MUSHROOM, BlockModelGenerators.TintState.NOT_TINTED);
       this.createPlant(Blocks.BROWN_MUSHROOM, Blocks.POTTED_BROWN_MUSHROOM, BlockModelGenerators.TintState.NOT_TINTED);
       this.createPlant(Blocks.DEAD_BUSH, Blocks.POTTED_DEAD_BUSH, BlockModelGenerators.TintState.NOT_TINTED);
+      this.createPointedDripstone();
       this.createMushroomBlock(Blocks.BROWN_MUSHROOM_BLOCK);
       this.createMushroomBlock(Blocks.RED_MUSHROOM_BLOCK);
       this.createMushroomBlock(Blocks.MUSHROOM_STEM);
       this.createCrossBlockWithDefaultItem(Blocks.GRASS, BlockModelGenerators.TintState.TINTED);
       this.createCrossBlock(Blocks.SUGAR_CANE, BlockModelGenerators.TintState.TINTED);
       this.createSimpleFlatItemModel(Items.SUGAR_CANE);
       this.createGrowingPlant(Blocks.KELP, Blocks.KELP_PLANT, BlockModelGenerators.TintState.TINTED);
       this.createSimpleFlatItemModel(Items.KELP);
       this.skipAutoItemBlock(Blocks.KELP_PLANT);
+      this.createCrossBlock(Blocks.HANGING_ROOTS, BlockModelGenerators.TintState.NOT_TINTED);
+      this.skipAutoItemBlock(Blocks.HANGING_ROOTS);
+      this.skipAutoItemBlock(Blocks.CAVE_VINES_PLANT);
       this.createGrowingPlant(Blocks.WEEPING_VINES, Blocks.WEEPING_VINES_PLANT, BlockModelGenerators.TintState.NOT_TINTED);
       this.createGrowingPlant(Blocks.TWISTING_VINES, Blocks.TWISTING_VINES_PLANT, BlockModelGenerators.TintState.NOT_TINTED);
       this.createSimpleFlatItemModel(Blocks.WEEPING_VINES, "_plant");
       this.skipAutoItemBlock(Blocks.WEEPING_VINES_PLANT);
       this.createSimpleFlatItemModel(Blocks.TWISTING_VINES, "_plant");
@@ -1452,116 +1676,54 @@
       this.createDoublePlant(Blocks.PEONY, BlockModelGenerators.TintState.NOT_TINTED);
       this.createDoublePlant(Blocks.TALL_GRASS, BlockModelGenerators.TintState.TINTED);
       this.createDoublePlant(Blocks.LARGE_FERN, BlockModelGenerators.TintState.TINTED);
       this.createSunflower();
       this.createTallSeagrass();
+      this.createSmallDripleaf();
       this.createCoral(Blocks.TUBE_CORAL, Blocks.DEAD_TUBE_CORAL, Blocks.TUBE_CORAL_BLOCK, Blocks.DEAD_TUBE_CORAL_BLOCK, Blocks.TUBE_CORAL_FAN, Blocks.DEAD_TUBE_CORAL_FAN, Blocks.TUBE_CORAL_WALL_FAN, Blocks.DEAD_TUBE_CORAL_WALL_FAN);
       this.createCoral(Blocks.BRAIN_CORAL, Blocks.DEAD_BRAIN_CORAL, Blocks.BRAIN_CORAL_BLOCK, Blocks.DEAD_BRAIN_CORAL_BLOCK, Blocks.BRAIN_CORAL_FAN, Blocks.DEAD_BRAIN_CORAL_FAN, Blocks.BRAIN_CORAL_WALL_FAN, Blocks.DEAD_BRAIN_CORAL_WALL_FAN);
       this.createCoral(Blocks.BUBBLE_CORAL, Blocks.DEAD_BUBBLE_CORAL, Blocks.BUBBLE_CORAL_BLOCK, Blocks.DEAD_BUBBLE_CORAL_BLOCK, Blocks.BUBBLE_CORAL_FAN, Blocks.DEAD_BUBBLE_CORAL_FAN, Blocks.BUBBLE_CORAL_WALL_FAN, Blocks.DEAD_BUBBLE_CORAL_WALL_FAN);
       this.createCoral(Blocks.FIRE_CORAL, Blocks.DEAD_FIRE_CORAL, Blocks.FIRE_CORAL_BLOCK, Blocks.DEAD_FIRE_CORAL_BLOCK, Blocks.FIRE_CORAL_FAN, Blocks.DEAD_FIRE_CORAL_FAN, Blocks.FIRE_CORAL_WALL_FAN, Blocks.DEAD_FIRE_CORAL_WALL_FAN);
       this.createCoral(Blocks.HORN_CORAL, Blocks.DEAD_HORN_CORAL, Blocks.HORN_CORAL_BLOCK, Blocks.DEAD_HORN_CORAL_BLOCK, Blocks.HORN_CORAL_FAN, Blocks.DEAD_HORN_CORAL_FAN, Blocks.HORN_CORAL_WALL_FAN, Blocks.DEAD_HORN_CORAL_WALL_FAN);
       this.createStems(Blocks.MELON_STEM, Blocks.ATTACHED_MELON_STEM);
       this.createStems(Blocks.PUMPKIN_STEM, Blocks.ATTACHED_PUMPKIN_STEM);
-      this.family(Blocks.ACACIA_PLANKS).button(Blocks.ACACIA_BUTTON).fence(Blocks.ACACIA_FENCE).fenceGate(Blocks.ACACIA_FENCE_GATE).pressurePlate(Blocks.ACACIA_PRESSURE_PLATE).sign(Blocks.ACACIA_SIGN, Blocks.ACACIA_WALL_SIGN).slab(Blocks.ACACIA_SLAB).stairs(Blocks.ACACIA_STAIRS);
-      this.createDoor(Blocks.ACACIA_DOOR);
-      this.createOrientableTrapdoor(Blocks.ACACIA_TRAPDOOR);
       this.woodProvider(Blocks.ACACIA_LOG).logWithHorizontal(Blocks.ACACIA_LOG).wood(Blocks.ACACIA_WOOD);
       this.woodProvider(Blocks.STRIPPED_ACACIA_LOG).logWithHorizontal(Blocks.STRIPPED_ACACIA_LOG).wood(Blocks.STRIPPED_ACACIA_WOOD);
       this.createPlant(Blocks.ACACIA_SAPLING, Blocks.POTTED_ACACIA_SAPLING, BlockModelGenerators.TintState.NOT_TINTED);
       this.createTrivialBlock(Blocks.ACACIA_LEAVES, TexturedModel.LEAVES);
-      this.family(Blocks.BIRCH_PLANKS).button(Blocks.BIRCH_BUTTON).fence(Blocks.BIRCH_FENCE).fenceGate(Blocks.BIRCH_FENCE_GATE).pressurePlate(Blocks.BIRCH_PRESSURE_PLATE).sign(Blocks.BIRCH_SIGN, Blocks.BIRCH_WALL_SIGN).slab(Blocks.BIRCH_SLAB).stairs(Blocks.BIRCH_STAIRS);
-      this.createDoor(Blocks.BIRCH_DOOR);
-      this.createOrientableTrapdoor(Blocks.BIRCH_TRAPDOOR);
       this.woodProvider(Blocks.BIRCH_LOG).logWithHorizontal(Blocks.BIRCH_LOG).wood(Blocks.BIRCH_WOOD);
       this.woodProvider(Blocks.STRIPPED_BIRCH_LOG).logWithHorizontal(Blocks.STRIPPED_BIRCH_LOG).wood(Blocks.STRIPPED_BIRCH_WOOD);
       this.createPlant(Blocks.BIRCH_SAPLING, Blocks.POTTED_BIRCH_SAPLING, BlockModelGenerators.TintState.NOT_TINTED);
       this.createTrivialBlock(Blocks.BIRCH_LEAVES, TexturedModel.LEAVES);
-      this.family(Blocks.OAK_PLANKS).button(Blocks.OAK_BUTTON).fence(Blocks.OAK_FENCE).fenceGate(Blocks.OAK_FENCE_GATE).pressurePlate(Blocks.OAK_PRESSURE_PLATE).sign(Blocks.OAK_SIGN, Blocks.OAK_WALL_SIGN).slab(Blocks.OAK_SLAB).slab(Blocks.PETRIFIED_OAK_SLAB).stairs(Blocks.OAK_STAIRS);
-      this.createDoor(Blocks.OAK_DOOR);
-      this.createTrapdoor(Blocks.OAK_TRAPDOOR);
       this.woodProvider(Blocks.OAK_LOG).logWithHorizontal(Blocks.OAK_LOG).wood(Blocks.OAK_WOOD);
       this.woodProvider(Blocks.STRIPPED_OAK_LOG).logWithHorizontal(Blocks.STRIPPED_OAK_LOG).wood(Blocks.STRIPPED_OAK_WOOD);
       this.createPlant(Blocks.OAK_SAPLING, Blocks.POTTED_OAK_SAPLING, BlockModelGenerators.TintState.NOT_TINTED);
       this.createTrivialBlock(Blocks.OAK_LEAVES, TexturedModel.LEAVES);
-      this.family(Blocks.SPRUCE_PLANKS).button(Blocks.SPRUCE_BUTTON).fence(Blocks.SPRUCE_FENCE).fenceGate(Blocks.SPRUCE_FENCE_GATE).pressurePlate(Blocks.SPRUCE_PRESSURE_PLATE).sign(Blocks.SPRUCE_SIGN, Blocks.SPRUCE_WALL_SIGN).slab(Blocks.SPRUCE_SLAB).stairs(Blocks.SPRUCE_STAIRS);
-      this.createDoor(Blocks.SPRUCE_DOOR);
-      this.createOrientableTrapdoor(Blocks.SPRUCE_TRAPDOOR);
       this.woodProvider(Blocks.SPRUCE_LOG).logWithHorizontal(Blocks.SPRUCE_LOG).wood(Blocks.SPRUCE_WOOD);
       this.woodProvider(Blocks.STRIPPED_SPRUCE_LOG).logWithHorizontal(Blocks.STRIPPED_SPRUCE_LOG).wood(Blocks.STRIPPED_SPRUCE_WOOD);
       this.createPlant(Blocks.SPRUCE_SAPLING, Blocks.POTTED_SPRUCE_SAPLING, BlockModelGenerators.TintState.NOT_TINTED);
       this.createTrivialBlock(Blocks.SPRUCE_LEAVES, TexturedModel.LEAVES);
-      this.family(Blocks.DARK_OAK_PLANKS).button(Blocks.DARK_OAK_BUTTON).fence(Blocks.DARK_OAK_FENCE).fenceGate(Blocks.DARK_OAK_FENCE_GATE).pressurePlate(Blocks.DARK_OAK_PRESSURE_PLATE).sign(Blocks.DARK_OAK_SIGN, Blocks.DARK_OAK_WALL_SIGN).slab(Blocks.DARK_OAK_SLAB).stairs(Blocks.DARK_OAK_STAIRS);
-      this.createDoor(Blocks.DARK_OAK_DOOR);
-      this.createTrapdoor(Blocks.DARK_OAK_TRAPDOOR);
       this.woodProvider(Blocks.DARK_OAK_LOG).logWithHorizontal(Blocks.DARK_OAK_LOG).wood(Blocks.DARK_OAK_WOOD);
       this.woodProvider(Blocks.STRIPPED_DARK_OAK_LOG).logWithHorizontal(Blocks.STRIPPED_DARK_OAK_LOG).wood(Blocks.STRIPPED_DARK_OAK_WOOD);
       this.createPlant(Blocks.DARK_OAK_SAPLING, Blocks.POTTED_DARK_OAK_SAPLING, BlockModelGenerators.TintState.NOT_TINTED);
       this.createTrivialBlock(Blocks.DARK_OAK_LEAVES, TexturedModel.LEAVES);
-      this.family(Blocks.JUNGLE_PLANKS).button(Blocks.JUNGLE_BUTTON).fence(Blocks.JUNGLE_FENCE).fenceGate(Blocks.JUNGLE_FENCE_GATE).pressurePlate(Blocks.JUNGLE_PRESSURE_PLATE).sign(Blocks.JUNGLE_SIGN, Blocks.JUNGLE_WALL_SIGN).slab(Blocks.JUNGLE_SLAB).stairs(Blocks.JUNGLE_STAIRS);
-      this.createDoor(Blocks.JUNGLE_DOOR);
-      this.createOrientableTrapdoor(Blocks.JUNGLE_TRAPDOOR);
       this.woodProvider(Blocks.JUNGLE_LOG).logWithHorizontal(Blocks.JUNGLE_LOG).wood(Blocks.JUNGLE_WOOD);
       this.woodProvider(Blocks.STRIPPED_JUNGLE_LOG).logWithHorizontal(Blocks.STRIPPED_JUNGLE_LOG).wood(Blocks.STRIPPED_JUNGLE_WOOD);
       this.createPlant(Blocks.JUNGLE_SAPLING, Blocks.POTTED_JUNGLE_SAPLING, BlockModelGenerators.TintState.NOT_TINTED);
       this.createTrivialBlock(Blocks.JUNGLE_LEAVES, TexturedModel.LEAVES);
-      this.family(Blocks.CRIMSON_PLANKS).button(Blocks.CRIMSON_BUTTON).fence(Blocks.CRIMSON_FENCE).fenceGate(Blocks.CRIMSON_FENCE_GATE).pressurePlate(Blocks.CRIMSON_PRESSURE_PLATE).sign(Blocks.CRIMSON_SIGN, Blocks.CRIMSON_WALL_SIGN).slab(Blocks.CRIMSON_SLAB).stairs(Blocks.CRIMSON_STAIRS);
-      this.createDoor(Blocks.CRIMSON_DOOR);
-      this.createOrientableTrapdoor(Blocks.CRIMSON_TRAPDOOR);
       this.woodProvider(Blocks.CRIMSON_STEM).log(Blocks.CRIMSON_STEM).wood(Blocks.CRIMSON_HYPHAE);
       this.woodProvider(Blocks.STRIPPED_CRIMSON_STEM).log(Blocks.STRIPPED_CRIMSON_STEM).wood(Blocks.STRIPPED_CRIMSON_HYPHAE);
       this.createPlant(Blocks.CRIMSON_FUNGUS, Blocks.POTTED_CRIMSON_FUNGUS, BlockModelGenerators.TintState.NOT_TINTED);
       this.createNetherRoots(Blocks.CRIMSON_ROOTS, Blocks.POTTED_CRIMSON_ROOTS);
-      this.family(Blocks.WARPED_PLANKS).button(Blocks.WARPED_BUTTON).fence(Blocks.WARPED_FENCE).fenceGate(Blocks.WARPED_FENCE_GATE).pressurePlate(Blocks.WARPED_PRESSURE_PLATE).sign(Blocks.WARPED_SIGN, Blocks.WARPED_WALL_SIGN).slab(Blocks.WARPED_SLAB).stairs(Blocks.WARPED_STAIRS);
-      this.createDoor(Blocks.WARPED_DOOR);
-      this.createOrientableTrapdoor(Blocks.WARPED_TRAPDOOR);
       this.woodProvider(Blocks.WARPED_STEM).log(Blocks.WARPED_STEM).wood(Blocks.WARPED_HYPHAE);
       this.woodProvider(Blocks.STRIPPED_WARPED_STEM).log(Blocks.STRIPPED_WARPED_STEM).wood(Blocks.STRIPPED_WARPED_HYPHAE);
       this.createPlant(Blocks.WARPED_FUNGUS, Blocks.POTTED_WARPED_FUNGUS, BlockModelGenerators.TintState.NOT_TINTED);
       this.createNetherRoots(Blocks.WARPED_ROOTS, Blocks.POTTED_WARPED_ROOTS);
       this.createCrossBlock(Blocks.NETHER_SPROUTS, BlockModelGenerators.TintState.NOT_TINTED);
       this.createSimpleFlatItemModel(Items.NETHER_SPROUTS);
-      this.family(TextureMapping.cube(Blocks.STONE)).fullBlock((var1) -> {
-         ResourceLocation var2 = ModelTemplates.CUBE_ALL.create(Blocks.STONE, var1, this.modelOutput);
-         ResourceLocation var3 = ModelTemplates.CUBE_MIRRORED_ALL.create(Blocks.STONE, var1, this.modelOutput);
-         this.blockStateOutput.accept(createRotatedVariant(Blocks.STONE, var2, var3));
-         return var2;
-      }).slab(Blocks.STONE_SLAB).pressurePlate(Blocks.STONE_PRESSURE_PLATE).button(Blocks.STONE_BUTTON).stairs(Blocks.STONE_STAIRS);
       this.createDoor(Blocks.IRON_DOOR);
       this.createTrapdoor(Blocks.IRON_TRAPDOOR);
-      this.family(Blocks.STONE_BRICKS).wall(Blocks.STONE_BRICK_WALL).stairs(Blocks.STONE_BRICK_STAIRS).slab(Blocks.STONE_BRICK_SLAB);
-      this.family(Blocks.MOSSY_STONE_BRICKS).wall(Blocks.MOSSY_STONE_BRICK_WALL).stairs(Blocks.MOSSY_STONE_BRICK_STAIRS).slab(Blocks.MOSSY_STONE_BRICK_SLAB);
-      this.family(Blocks.COBBLESTONE).wall(Blocks.COBBLESTONE_WALL).stairs(Blocks.COBBLESTONE_STAIRS).slab(Blocks.COBBLESTONE_SLAB);
-      this.family(Blocks.MOSSY_COBBLESTONE).wall(Blocks.MOSSY_COBBLESTONE_WALL).stairs(Blocks.MOSSY_COBBLESTONE_STAIRS).slab(Blocks.MOSSY_COBBLESTONE_SLAB);
-      this.family(Blocks.PRISMARINE).wall(Blocks.PRISMARINE_WALL).stairs(Blocks.PRISMARINE_STAIRS).slab(Blocks.PRISMARINE_SLAB);
-      this.family(Blocks.PRISMARINE_BRICKS).stairs(Blocks.PRISMARINE_BRICK_STAIRS).slab(Blocks.PRISMARINE_BRICK_SLAB);
-      this.family(Blocks.DARK_PRISMARINE).stairs(Blocks.DARK_PRISMARINE_STAIRS).slab(Blocks.DARK_PRISMARINE_SLAB);
-      this.family(Blocks.SANDSTONE, TexturedModel.TOP_BOTTOM_WITH_WALL).wall(Blocks.SANDSTONE_WALL).stairs(Blocks.SANDSTONE_STAIRS).slab(Blocks.SANDSTONE_SLAB);
-      this.family(Blocks.SMOOTH_SANDSTONE, TexturedModel.createAllSame(TextureMapping.getBlockTexture(Blocks.SANDSTONE, "_top"))).slab(Blocks.SMOOTH_SANDSTONE_SLAB).stairs(Blocks.SMOOTH_SANDSTONE_STAIRS);
-      this.family(Blocks.CUT_SANDSTONE, TexturedModel.COLUMN.get(Blocks.SANDSTONE).updateTextures((var0) -> {
-         var0.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CUT_SANDSTONE));
-      })).slab(Blocks.CUT_SANDSTONE_SLAB);
-      this.family(Blocks.RED_SANDSTONE, TexturedModel.TOP_BOTTOM_WITH_WALL).wall(Blocks.RED_SANDSTONE_WALL).stairs(Blocks.RED_SANDSTONE_STAIRS).slab(Blocks.RED_SANDSTONE_SLAB);
-      this.family(Blocks.SMOOTH_RED_SANDSTONE, TexturedModel.createAllSame(TextureMapping.getBlockTexture(Blocks.RED_SANDSTONE, "_top"))).slab(Blocks.SMOOTH_RED_SANDSTONE_SLAB).stairs(Blocks.SMOOTH_RED_SANDSTONE_STAIRS);
-      this.family(Blocks.CUT_RED_SANDSTONE, TexturedModel.COLUMN.get(Blocks.RED_SANDSTONE).updateTextures((var0) -> {
-         var0.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CUT_RED_SANDSTONE));
-      })).slab(Blocks.CUT_RED_SANDSTONE_SLAB);
-      this.family(Blocks.BRICKS).wall(Blocks.BRICK_WALL).stairs(Blocks.BRICK_STAIRS).slab(Blocks.BRICK_SLAB);
-      this.family(Blocks.NETHER_BRICKS).fence(Blocks.NETHER_BRICK_FENCE).wall(Blocks.NETHER_BRICK_WALL).stairs(Blocks.NETHER_BRICK_STAIRS).slab(Blocks.NETHER_BRICK_SLAB);
-      this.family(Blocks.PURPUR_BLOCK).stairs(Blocks.PURPUR_STAIRS).slab(Blocks.PURPUR_SLAB);
-      this.family(Blocks.DIORITE).wall(Blocks.DIORITE_WALL).stairs(Blocks.DIORITE_STAIRS).slab(Blocks.DIORITE_SLAB);
-      this.family(Blocks.POLISHED_DIORITE).stairs(Blocks.POLISHED_DIORITE_STAIRS).slab(Blocks.POLISHED_DIORITE_SLAB);
-      this.family(Blocks.GRANITE).wall(Blocks.GRANITE_WALL).stairs(Blocks.GRANITE_STAIRS).slab(Blocks.GRANITE_SLAB);
-      this.family(Blocks.POLISHED_GRANITE).stairs(Blocks.POLISHED_GRANITE_STAIRS).slab(Blocks.POLISHED_GRANITE_SLAB);
-      this.family(Blocks.ANDESITE).wall(Blocks.ANDESITE_WALL).stairs(Blocks.ANDESITE_STAIRS).slab(Blocks.ANDESITE_SLAB);
-      this.family(Blocks.POLISHED_ANDESITE).stairs(Blocks.POLISHED_ANDESITE_STAIRS).slab(Blocks.POLISHED_ANDESITE_SLAB);
-      this.family(Blocks.END_STONE_BRICKS).wall(Blocks.END_STONE_BRICK_WALL).stairs(Blocks.END_STONE_BRICK_STAIRS).slab(Blocks.END_STONE_BRICK_SLAB);
-      this.family(Blocks.QUARTZ_BLOCK, TexturedModel.COLUMN).stairs(Blocks.QUARTZ_STAIRS).slab(Blocks.QUARTZ_SLAB);
-      this.family(Blocks.SMOOTH_QUARTZ, TexturedModel.createAllSame(TextureMapping.getBlockTexture(Blocks.QUARTZ_BLOCK, "_bottom"))).stairs(Blocks.SMOOTH_QUARTZ_STAIRS).slab(Blocks.SMOOTH_QUARTZ_SLAB);
-      this.family(Blocks.RED_NETHER_BRICKS).slab(Blocks.RED_NETHER_BRICK_SLAB).stairs(Blocks.RED_NETHER_BRICK_STAIRS).wall(Blocks.RED_NETHER_BRICK_WALL);
-      this.family(Blocks.BLACKSTONE, TexturedModel.COLUMN_WITH_WALL).wall(Blocks.BLACKSTONE_WALL).stairs(Blocks.BLACKSTONE_STAIRS).slab(Blocks.BLACKSTONE_SLAB);
-      this.family(Blocks.POLISHED_BLACKSTONE_BRICKS).wall(Blocks.POLISHED_BLACKSTONE_BRICK_WALL).stairs(Blocks.POLISHED_BLACKSTONE_BRICK_STAIRS).slab(Blocks.POLISHED_BLACKSTONE_BRICK_SLAB);
-      this.family(Blocks.POLISHED_BLACKSTONE).wall(Blocks.POLISHED_BLACKSTONE_WALL).pressurePlate(Blocks.POLISHED_BLACKSTONE_PRESSURE_PLATE).button(Blocks.POLISHED_BLACKSTONE_BUTTON).stairs(Blocks.POLISHED_BLACKSTONE_STAIRS).slab(Blocks.POLISHED_BLACKSTONE_SLAB);
       this.createSmoothStoneSlab();
       this.createPassiveRail(Blocks.RAIL);
       this.createActiveRail(Blocks.POWERED_RAIL);
       this.createActiveRail(Blocks.DETECTOR_RAIL);
       this.createActiveRail(Blocks.ACTIVATOR_RAIL);
@@ -1583,121 +1745,109 @@
       this.copyModel(Blocks.COBBLESTONE, Blocks.INFESTED_COBBLESTONE);
       this.copyModel(Blocks.CRACKED_STONE_BRICKS, Blocks.INFESTED_CRACKED_STONE_BRICKS);
       this.copyModel(Blocks.MOSSY_STONE_BRICKS, Blocks.INFESTED_MOSSY_STONE_BRICKS);
       this.createInfestedStone();
       this.copyModel(Blocks.STONE_BRICKS, Blocks.INFESTED_STONE_BRICKS);
+      this.createInfestedDeepslate();
       SpawnEggItem.eggs().forEach((var1) -> {
          this.delegateItemModel((Item)var1, ModelLocationUtils.decorateItemModelLocation("template_spawn_egg"));
       });
    }
 
-   class BlockEntityModelGenerator {
-      private final ResourceLocation baseModel;
+   private void createLightBlockItems() {
+      this.skipAutoItemBlock(Blocks.LIGHT);
 
-      public BlockEntityModelGenerator(ResourceLocation var2, Block var3) {
-         this.baseModel = ModelTemplates.PARTICLE_ONLY.create(var2, TextureMapping.particle(var3), BlockModelGenerators.this.modelOutput);
+      for(int var1 = 0; var1 < 16; ++var1) {
+         String var2 = String.format("_%02d", var1);
+         ModelTemplates.FLAT_ITEM.create(ModelLocationUtils.getModelLocation(Items.LIGHT, var2), TextureMapping.layer0(TextureMapping.getItemTexture(Items.LIGHT, var2)), this.modelOutput);
       }
 
-      public BlockModelGenerators.BlockEntityModelGenerator create(Block... var1) {
-         Block[] var2 = var1;
-         int var3 = var1.length;
+   }
 
-         for(int var4 = 0; var4 < var3; ++var4) {
-            Block var5 = var2[var4];
-            BlockModelGenerators.this.blockStateOutput.accept(BlockModelGenerators.createSimpleBlock(var5, this.baseModel));
-         }
-
-         return this;
-      }
-
-      public BlockModelGenerators.BlockEntityModelGenerator createWithoutBlockItem(Block... var1) {
-         Block[] var2 = var1;
-         int var3 = var1.length;
-
-         for(int var4 = 0; var4 < var3; ++var4) {
-            Block var5 = var2[var4];
-            BlockModelGenerators.this.skipAutoItemBlock(var5);
-         }
-
-         return this.create(var1);
-      }
-
-      public BlockModelGenerators.BlockEntityModelGenerator createWithCustomBlockItemModel(ModelTemplate var1, Block... var2) {
-         Block[] var3 = var2;
-         int var4 = var2.length;
-
-         for(int var5 = 0; var5 < var4; ++var5) {
-            Block var6 = var3[var5];
-            var1.create(ModelLocationUtils.getModelLocation(var6.asItem()), TextureMapping.particle(var6), BlockModelGenerators.this.modelOutput);
-         }
-
-         return this.create(var2);
-      }
+   private void createCandleAndCandleCake(Block var1, Block var2) {
+      this.createSimpleFlatItemModel(var1.asItem());
+      TextureMapping var3 = TextureMapping.cube(TextureMapping.getBlockTexture(var1));
+      TextureMapping var4 = TextureMapping.cube(TextureMapping.getBlockTexture(var1, "_lit"));
+      ResourceLocation var5 = ModelTemplates.CANDLE.createWithSuffix(var1, "_one_candle", var3, this.modelOutput);
+      ResourceLocation var6 = ModelTemplates.TWO_CANDLES.createWithSuffix(var1, "_two_candles", var3, this.modelOutput);
+      ResourceLocation var7 = ModelTemplates.THREE_CANDLES.createWithSuffix(var1, "_three_candles", var3, this.modelOutput);
+      ResourceLocation var8 = ModelTemplates.FOUR_CANDLES.createWithSuffix(var1, "_four_candles", var3, this.modelOutput);
+      ResourceLocation var9 = ModelTemplates.CANDLE.createWithSuffix(var1, "_one_candle_lit", var4, this.modelOutput);
+      ResourceLocation var10 = ModelTemplates.TWO_CANDLES.createWithSuffix(var1, "_two_candles_lit", var4, this.modelOutput);
+      ResourceLocation var11 = ModelTemplates.THREE_CANDLES.createWithSuffix(var1, "_three_candles_lit", var4, this.modelOutput);
+      ResourceLocation var12 = ModelTemplates.FOUR_CANDLES.createWithSuffix(var1, "_four_candles_lit", var4, this.modelOutput);
+      this.blockStateOutput.accept(MultiVariantGenerator.multiVariant(var1).with(PropertyDispatch.properties(BlockStateProperties.CANDLES, BlockStateProperties.LIT).select(1, false, (Variant)Variant.variant().with(VariantProperties.MODEL, var5)).select(2, false, (Variant)Variant.variant().with(VariantProperties.MODEL, var6)).select(3, false, (Variant)Variant.variant().with(VariantProperties.MODEL, var7)).select(4, false, (Variant)Variant.variant().with(VariantProperties.MODEL, var8)).select(1, true, (Variant)Variant.variant().with(VariantProperties.MODEL, var9)).select(2, true, (Variant)Variant.variant().with(VariantProperties.MODEL, var10)).select(3, true, (Variant)Variant.variant().with(VariantProperties.MODEL, var11)).select(4, true, (Variant)Variant.variant().with(VariantProperties.MODEL, var12))));
+      this.blockStateOutput.accept(createSimpleBlock(var2, ModelTemplates.CANDLE_CAKE.create(var2, TextureMapping.candleCake(var1), this.modelOutput)));
    }
 
-   static enum TintState {
-      TINTED,
-      NOT_TINTED;
-
-      private TintState() {
-      }
-
-      public ModelTemplate getCross() {
-         return this == TINTED ? ModelTemplates.TINTED_CROSS : ModelTemplates.CROSS;
-      }
-
-      public ModelTemplate getCrossPot() {
-         return this == TINTED ? ModelTemplates.TINTED_FLOWER_POT_CROSS : ModelTemplates.FLOWER_POT_CROSS;
-      }
+   static {
+      SHAPE_CONSUMERS = ImmutableMap.builder().put(BlockFamily.Variant.BUTTON, BlockModelGenerators.BlockFamilyProvider::button).put(BlockFamily.Variant.DOOR, BlockModelGenerators.BlockFamilyProvider::door).put(BlockFamily.Variant.CHISELED, BlockModelGenerators.BlockFamilyProvider::fullBlockVariant).put(BlockFamily.Variant.CRACKED, BlockModelGenerators.BlockFamilyProvider::fullBlockVariant).put(BlockFamily.Variant.FENCE, BlockModelGenerators.BlockFamilyProvider::fence).put(BlockFamily.Variant.FENCE_GATE, BlockModelGenerators.BlockFamilyProvider::fenceGate).put(BlockFamily.Variant.SIGN, BlockModelGenerators.BlockFamilyProvider::sign).put(BlockFamily.Variant.SLAB, BlockModelGenerators.BlockFamilyProvider::slab).put(BlockFamily.Variant.STAIRS, BlockModelGenerators.BlockFamilyProvider::stairs).put(BlockFamily.Variant.PRESSURE_PLATE, BlockModelGenerators.BlockFamilyProvider::pressurePlate).put(BlockFamily.Variant.TRAPDOOR, BlockModelGenerators.BlockFamilyProvider::trapdoor).put(BlockFamily.Variant.WALL, BlockModelGenerators.BlockFamilyProvider::wall).build();
+      MULTIFACE_GENERATOR = (Map)Util.make(Maps.newHashMap(), (var0) -> {
+         var0.put(BlockStateProperties.NORTH, (var0x) -> {
+            return Variant.variant().with(VariantProperties.MODEL, var0x);
+         });
+         var0.put(BlockStateProperties.EAST, (var0x) -> {
+            return Variant.variant().with(VariantProperties.MODEL, var0x).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90).with(VariantProperties.UV_LOCK, true);
+         });
+         var0.put(BlockStateProperties.SOUTH, (var0x) -> {
+            return Variant.variant().with(VariantProperties.MODEL, var0x).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R180).with(VariantProperties.UV_LOCK, true);
+         });
+         var0.put(BlockStateProperties.WEST, (var0x) -> {
+            return Variant.variant().with(VariantProperties.MODEL, var0x).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R270).with(VariantProperties.UV_LOCK, true);
+         });
+         var0.put(BlockStateProperties.UP, (var0x) -> {
+            return Variant.variant().with(VariantProperties.MODEL, var0x).with(VariantProperties.X_ROT, VariantProperties.Rotation.R270).with(VariantProperties.UV_LOCK, true);
+         });
+         var0.put(BlockStateProperties.DOWN, (var0x) -> {
+            return Variant.variant().with(VariantProperties.MODEL, var0x).with(VariantProperties.X_ROT, VariantProperties.Rotation.R90).with(VariantProperties.UV_LOCK, true);
+         });
+      });
    }
 
-   class WoodProvider {
-      private final TextureMapping logMapping;
-
-      public WoodProvider(TextureMapping var2) {
-         this.logMapping = var2;
-      }
-
-      public BlockModelGenerators.WoodProvider wood(Block var1) {
-         TextureMapping var2 = this.logMapping.copyAndUpdate(TextureSlot.END, this.logMapping.get(TextureSlot.SIDE));
-         ResourceLocation var3 = ModelTemplates.CUBE_COLUMN.create(var1, var2, BlockModelGenerators.this.modelOutput);
-         BlockModelGenerators.this.blockStateOutput.accept(BlockModelGenerators.createAxisAlignedPillarBlock(var1, var3));
-         return this;
-      }
-
-      public BlockModelGenerators.WoodProvider log(Block var1) {
-         ResourceLocation var2 = ModelTemplates.CUBE_COLUMN.create(var1, this.logMapping, BlockModelGenerators.this.modelOutput);
-         BlockModelGenerators.this.blockStateOutput.accept(BlockModelGenerators.createAxisAlignedPillarBlock(var1, var2));
-         return this;
-      }
-
-      public BlockModelGenerators.WoodProvider logWithHorizontal(Block var1) {
-         ResourceLocation var2 = ModelTemplates.CUBE_COLUMN.create(var1, this.logMapping, BlockModelGenerators.this.modelOutput);
-         ResourceLocation var3 = ModelTemplates.CUBE_COLUMN_HORIZONTAL.create(var1, this.logMapping, BlockModelGenerators.this.modelOutput);
-         BlockModelGenerators.this.blockStateOutput.accept(BlockModelGenerators.createRotatedPillarWithHorizontalVariant(var1, var2, var3));
-         return this;
-      }
+   @FunctionalInterface
+   private interface BlockStateGeneratorSupplier {
+      BlockStateGenerator create(Block var1, ResourceLocation var2, TextureMapping var3, BiConsumer<ResourceLocation, Supplier<JsonElement>> var4);
    }
 
    class BlockFamilyProvider {
       private final TextureMapping mapping;
+      private final Map<ModelTemplate, ResourceLocation> models = Maps.newHashMap();
       @Nullable
+      private BlockFamily family;
+      @Nullable
       private ResourceLocation fullBlock;
 
       public BlockFamilyProvider(TextureMapping var2) {
          this.mapping = var2;
       }
 
       public BlockModelGenerators.BlockFamilyProvider fullBlock(Block var1, ModelTemplate var2) {
          this.fullBlock = var2.create(var1, this.mapping, BlockModelGenerators.this.modelOutput);
-         BlockModelGenerators.this.blockStateOutput.accept(BlockModelGenerators.createSimpleBlock(var1, this.fullBlock));
+         if (BlockModelGenerators.this.fullBlockModelCustomGenerators.containsKey(var1)) {
+            BlockModelGenerators.this.blockStateOutput.accept(((BlockModelGenerators.BlockStateGeneratorSupplier)BlockModelGenerators.this.fullBlockModelCustomGenerators.get(var1)).create(var1, this.fullBlock, this.mapping, BlockModelGenerators.this.modelOutput));
+         } else {
+            BlockModelGenerators.this.blockStateOutput.accept(BlockModelGenerators.createSimpleBlock(var1, this.fullBlock));
+         }
+
          return this;
       }
 
-      public BlockModelGenerators.BlockFamilyProvider fullBlock(Function<TextureMapping, ResourceLocation> var1) {
-         this.fullBlock = (ResourceLocation)var1.apply(this.mapping);
-         return this;
+      public BlockModelGenerators.BlockFamilyProvider fullBlockCopies(Block... var1) {
+         if (this.fullBlock == null) {
+            throw new IllegalStateException("Full block not generated yet");
+         } else {
+            Block[] var2 = var1;
+            int var3 = var1.length;
+
+            for(int var4 = 0; var4 < var3; ++var4) {
+               Block var5 = var2[var4];
+               BlockModelGenerators.this.blockStateOutput.accept(BlockModelGenerators.createSimpleBlock(var5, this.fullBlock));
+               BlockModelGenerators.this.delegateItemModel(var5, this.fullBlock);
+            }
+
+            return this;
+         }
       }
 
       public BlockModelGenerators.BlockFamilyProvider button(Block var1) {
          ResourceLocation var2 = ModelTemplates.BUTTON.create(var1, this.mapping, BlockModelGenerators.this.modelOutput);
          ResourceLocation var3 = ModelTemplates.BUTTON_PRESSED.create(var1, this.mapping, BlockModelGenerators.this.modelOutput);
@@ -1740,34 +1890,167 @@
          ResourceLocation var3 = ModelTemplates.PRESSURE_PLATE_DOWN.create(var1, this.mapping, BlockModelGenerators.this.modelOutput);
          BlockModelGenerators.this.blockStateOutput.accept(BlockModelGenerators.createPressurePlate(var1, var2, var3));
          return this;
       }
 
-      public BlockModelGenerators.BlockFamilyProvider sign(Block var1, Block var2) {
-         ResourceLocation var3 = ModelTemplates.PARTICLE_ONLY.create(var1, this.mapping, BlockModelGenerators.this.modelOutput);
-         BlockModelGenerators.this.blockStateOutput.accept(BlockModelGenerators.createSimpleBlock(var1, var3));
-         BlockModelGenerators.this.blockStateOutput.accept(BlockModelGenerators.createSimpleBlock(var2, var3));
-         BlockModelGenerators.this.createSimpleFlatItemModel(var1.asItem());
-         BlockModelGenerators.this.skipAutoItemBlock(var2);
-         return this;
+      public BlockModelGenerators.BlockFamilyProvider sign(Block var1) {
+         if (this.family == null) {
+            throw new IllegalStateException("Family not defined");
+         } else {
+            Block var2 = (Block)this.family.getVariants().get(BlockFamily.Variant.WALL_SIGN);
+            ResourceLocation var3 = ModelTemplates.PARTICLE_ONLY.create(var1, this.mapping, BlockModelGenerators.this.modelOutput);
+            BlockModelGenerators.this.blockStateOutput.accept(BlockModelGenerators.createSimpleBlock(var1, var3));
+            BlockModelGenerators.this.blockStateOutput.accept(BlockModelGenerators.createSimpleBlock(var2, var3));
+            BlockModelGenerators.this.createSimpleFlatItemModel(var1.asItem());
+            BlockModelGenerators.this.skipAutoItemBlock(var2);
+            return this;
+         }
       }
 
       public BlockModelGenerators.BlockFamilyProvider slab(Block var1) {
          if (this.fullBlock == null) {
             throw new IllegalStateException("Full block not generated yet");
          } else {
-            ResourceLocation var2 = ModelTemplates.SLAB_BOTTOM.create(var1, this.mapping, BlockModelGenerators.this.modelOutput);
-            ResourceLocation var3 = ModelTemplates.SLAB_TOP.create(var1, this.mapping, BlockModelGenerators.this.modelOutput);
+            ResourceLocation var2 = this.getOrCreateModel(ModelTemplates.SLAB_BOTTOM, var1);
+            ResourceLocation var3 = this.getOrCreateModel(ModelTemplates.SLAB_TOP, var1);
             BlockModelGenerators.this.blockStateOutput.accept(BlockModelGenerators.createSlab(var1, var2, var3, this.fullBlock));
+            BlockModelGenerators.this.delegateItemModel(var1, var2);
             return this;
          }
       }
 
       public BlockModelGenerators.BlockFamilyProvider stairs(Block var1) {
-         ResourceLocation var2 = ModelTemplates.STAIRS_INNER.create(var1, this.mapping, BlockModelGenerators.this.modelOutput);
-         ResourceLocation var3 = ModelTemplates.STAIRS_STRAIGHT.create(var1, this.mapping, BlockModelGenerators.this.modelOutput);
-         ResourceLocation var4 = ModelTemplates.STAIRS_OUTER.create(var1, this.mapping, BlockModelGenerators.this.modelOutput);
+         ResourceLocation var2 = this.getOrCreateModel(ModelTemplates.STAIRS_INNER, var1);
+         ResourceLocation var3 = this.getOrCreateModel(ModelTemplates.STAIRS_STRAIGHT, var1);
+         ResourceLocation var4 = this.getOrCreateModel(ModelTemplates.STAIRS_OUTER, var1);
          BlockModelGenerators.this.blockStateOutput.accept(BlockModelGenerators.createStairs(var1, var2, var3, var4));
+         BlockModelGenerators.this.delegateItemModel(var1, var3);
          return this;
       }
+
+      private BlockModelGenerators.BlockFamilyProvider fullBlockVariant(Block var1) {
+         TexturedModel var2 = (TexturedModel)BlockModelGenerators.this.texturedModels.getOrDefault(var1, TexturedModel.CUBE.get(var1));
+         BlockModelGenerators.this.blockStateOutput.accept(BlockModelGenerators.createSimpleBlock(var1, var2.create(var1, BlockModelGenerators.this.modelOutput)));
+         return this;
+      }
+
+      private BlockModelGenerators.BlockFamilyProvider door(Block var1) {
+         BlockModelGenerators.this.createDoor(var1);
+         return this;
+      }
+
+      private void trapdoor(Block var1) {
+         if (BlockModelGenerators.this.nonOrientableTrapdoor.contains(var1)) {
+            BlockModelGenerators.this.createTrapdoor(var1);
+         } else {
+            BlockModelGenerators.this.createOrientableTrapdoor(var1);
+         }
+
+      }
+
+      private ResourceLocation getOrCreateModel(ModelTemplate var1, Block var2) {
+         return (ResourceLocation)this.models.computeIfAbsent(var1, (var2x) -> {
+            return var2x.create(var2, this.mapping, BlockModelGenerators.this.modelOutput);
+         });
+      }
+
+      public BlockModelGenerators.BlockFamilyProvider generateFor(BlockFamily var1) {
+         this.family = var1;
+         var1.getVariants().forEach((var1x, var2) -> {
+            BiConsumer var3 = (BiConsumer)BlockModelGenerators.SHAPE_CONSUMERS.get(var1x);
+            if (var3 != null) {
+               var3.accept(this, var2);
+            }
+
+         });
+         return this;
+      }
    }
+
+   class WoodProvider {
+      private final TextureMapping logMapping;
+
+      public WoodProvider(TextureMapping var2) {
+         this.logMapping = var2;
+      }
+
+      public BlockModelGenerators.WoodProvider wood(Block var1) {
+         TextureMapping var2 = this.logMapping.copyAndUpdate(TextureSlot.END, this.logMapping.get(TextureSlot.SIDE));
+         ResourceLocation var3 = ModelTemplates.CUBE_COLUMN.create(var1, var2, BlockModelGenerators.this.modelOutput);
+         BlockModelGenerators.this.blockStateOutput.accept(BlockModelGenerators.createAxisAlignedPillarBlock(var1, var3));
+         return this;
+      }
+
+      public BlockModelGenerators.WoodProvider log(Block var1) {
+         ResourceLocation var2 = ModelTemplates.CUBE_COLUMN.create(var1, this.logMapping, BlockModelGenerators.this.modelOutput);
+         BlockModelGenerators.this.blockStateOutput.accept(BlockModelGenerators.createAxisAlignedPillarBlock(var1, var2));
+         return this;
+      }
+
+      public BlockModelGenerators.WoodProvider logWithHorizontal(Block var1) {
+         ResourceLocation var2 = ModelTemplates.CUBE_COLUMN.create(var1, this.logMapping, BlockModelGenerators.this.modelOutput);
+         ResourceLocation var3 = ModelTemplates.CUBE_COLUMN_HORIZONTAL.create(var1, this.logMapping, BlockModelGenerators.this.modelOutput);
+         BlockModelGenerators.this.blockStateOutput.accept(BlockModelGenerators.createRotatedPillarWithHorizontalVariant(var1, var2, var3));
+         return this;
+      }
+   }
+
+   static enum TintState {
+      TINTED,
+      NOT_TINTED;
+
+      private TintState() {
+      }
+
+      public ModelTemplate getCross() {
+         return this == TINTED ? ModelTemplates.TINTED_CROSS : ModelTemplates.CROSS;
+      }
+
+      public ModelTemplate getCrossPot() {
+         return this == TINTED ? ModelTemplates.TINTED_FLOWER_POT_CROSS : ModelTemplates.FLOWER_POT_CROSS;
+      }
+   }
+
+   class BlockEntityModelGenerator {
+      private final ResourceLocation baseModel;
+
+      public BlockEntityModelGenerator(ResourceLocation var2, Block var3) {
+         this.baseModel = ModelTemplates.PARTICLE_ONLY.create(var2, TextureMapping.particle(var3), BlockModelGenerators.this.modelOutput);
+      }
+
+      public BlockModelGenerators.BlockEntityModelGenerator create(Block... var1) {
+         Block[] var2 = var1;
+         int var3 = var1.length;
+
+         for(int var4 = 0; var4 < var3; ++var4) {
+            Block var5 = var2[var4];
+            BlockModelGenerators.this.blockStateOutput.accept(BlockModelGenerators.createSimpleBlock(var5, this.baseModel));
+         }
+
+         return this;
+      }
+
+      public BlockModelGenerators.BlockEntityModelGenerator createWithoutBlockItem(Block... var1) {
+         Block[] var2 = var1;
+         int var3 = var1.length;
+
+         for(int var4 = 0; var4 < var3; ++var4) {
+            Block var5 = var2[var4];
+            BlockModelGenerators.this.skipAutoItemBlock(var5);
+         }
+
+         return this.create(var1);
+      }
+
+      public BlockModelGenerators.BlockEntityModelGenerator createWithCustomBlockItemModel(ModelTemplate var1, Block... var2) {
+         Block[] var3 = var2;
+         int var4 = var2.length;
+
+         for(int var5 = 0; var5 < var4; ++var5) {
+            Block var6 = var3[var5];
+            var1.create(ModelLocationUtils.getModelLocation(var6.asItem()), TextureMapping.particle(var6), BlockModelGenerators.this.modelOutput);
+         }
+
+         return this.create(var2);
+      }
+   }
 }
