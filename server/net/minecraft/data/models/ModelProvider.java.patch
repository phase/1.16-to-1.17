--- net/minecraft/data/models/ModelProvider.java
+++ net/minecraft/data/models/ModelProvider.java
@@ -8,10 +8,11 @@
 import java.nio.file.Path;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 import java.util.function.BiConsumer;
 import java.util.function.BiFunction;
 import java.util.function.Consumer;
 import java.util.function.Supplier;
 import java.util.stream.Collectors;
@@ -53,10 +54,11 @@
          Supplier var3 = (Supplier)var5.put(var1x, var2x);
          if (var3 != null) {
             throw new IllegalStateException("Duplicate model definition for " + var1x);
          }
       };
+      Objects.requireNonNull(var6);
       Consumer var8 = var6::add;
       (new BlockModelGenerators(var4, var7, var8)).run();
       (new ItemModelGenerators(var7)).run();
       List var9 = (List)Registry.BLOCK.stream().filter((var1x) -> {
          return !var3.containsKey(var1x);
@@ -96,15 +98,17 @@
       });
    }
 
    private static Path createBlockStatePath(Path var0, Block var1) {
       ResourceLocation var2 = Registry.BLOCK.getKey(var1);
-      return var0.resolve("assets/" + var2.getNamespace() + "/blockstates/" + var2.getPath() + ".json");
+      String var10001 = var2.getNamespace();
+      return var0.resolve("assets/" + var10001 + "/blockstates/" + var2.getPath() + ".json");
    }
 
    private static Path createModelPath(Path var0, ResourceLocation var1) {
-      return var0.resolve("assets/" + var1.getNamespace() + "/models/" + var1.getPath() + ".json");
+      String var10001 = var1.getNamespace();
+      return var0.resolve("assets/" + var10001 + "/models/" + var1.getPath() + ".json");
    }
 
    public String getName() {
       return "Block State Definitions";
    }
