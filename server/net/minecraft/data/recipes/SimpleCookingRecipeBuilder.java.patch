--- net/minecraft/data/recipes/SimpleCookingRecipeBuilder.java
+++ net/minecraft/data/recipes/SimpleCookingRecipeBuilder.java
@@ -15,16 +15,17 @@
 import net.minecraft.world.item.crafting.Ingredient;
 import net.minecraft.world.item.crafting.RecipeSerializer;
 import net.minecraft.world.item.crafting.SimpleCookingSerializer;
 import net.minecraft.world.level.ItemLike;
 
-public class SimpleCookingRecipeBuilder {
+public class SimpleCookingRecipeBuilder implements RecipeBuilder {
    private final Item result;
    private final Ingredient ingredient;
    private final float experience;
    private final int cookingTime;
    private final Advancement.Builder advancement = Advancement.Builder.advancement();
+   @Nullable
    private String group;
    private final SimpleCookingSerializer<?> serializer;
 
    private SimpleCookingRecipeBuilder(ItemLike var1, Ingredient var2, float var3, int var4, SimpleCookingSerializer<?> var5) {
       this.result = var1.asItem();
@@ -36,41 +37,52 @@
 
    public static SimpleCookingRecipeBuilder cooking(Ingredient var0, ItemLike var1, float var2, int var3, SimpleCookingSerializer<?> var4) {
       return new SimpleCookingRecipeBuilder(var1, var0, var2, var3, var4);
    }
 
+   public static SimpleCookingRecipeBuilder campfireCooking(Ingredient var0, ItemLike var1, float var2, int var3) {
+      return cooking(var0, var1, var2, var3, RecipeSerializer.CAMPFIRE_COOKING_RECIPE);
+   }
+
    public static SimpleCookingRecipeBuilder blasting(Ingredient var0, ItemLike var1, float var2, int var3) {
       return cooking(var0, var1, var2, var3, RecipeSerializer.BLASTING_RECIPE);
    }
 
    public static SimpleCookingRecipeBuilder smelting(Ingredient var0, ItemLike var1, float var2, int var3) {
       return cooking(var0, var1, var2, var3, RecipeSerializer.SMELTING_RECIPE);
    }
 
+   public static SimpleCookingRecipeBuilder smoking(Ingredient var0, ItemLike var1, float var2, int var3) {
+      return cooking(var0, var1, var2, var3, RecipeSerializer.SMOKING_RECIPE);
+   }
+
    public SimpleCookingRecipeBuilder unlockedBy(String var1, CriterionTriggerInstance var2) {
       this.advancement.addCriterion(var1, var2);
       return this;
    }
 
-   public void save(Consumer<FinishedRecipe> var1) {
-      this.save(var1, Registry.ITEM.getKey(this.result));
+   public SimpleCookingRecipeBuilder group(@Nullable String var1) {
+      this.group = var1;
+      return this;
    }
 
-   public void save(Consumer<FinishedRecipe> var1, String var2) {
-      ResourceLocation var3 = Registry.ITEM.getKey(this.result);
-      ResourceLocation var4 = new ResourceLocation(var2);
-      if (var4.equals(var3)) {
-         throw new IllegalStateException("Recipe " + var4 + " should remove its 'save' argument");
-      } else {
-         this.save(var1, var4);
-      }
+   public Item getResult() {
+      return this.result;
    }
 
    public void save(Consumer<FinishedRecipe> var1, ResourceLocation var2) {
       this.ensureValid(var2);
       this.advancement.parent(new ResourceLocation("recipes/root")).addCriterion("has_the_recipe", (CriterionTriggerInstance)RecipeUnlockedTrigger.unlocked(var2)).rewards(AdvancementRewards.Builder.recipe(var2)).requirements(RequirementsStrategy.OR);
-      var1.accept(new SimpleCookingRecipeBuilder.Result(var2, this.group == null ? "" : this.group, this.ingredient, this.result, this.experience, this.cookingTime, this.advancement, new ResourceLocation(var2.getNamespace(), "recipes/" + this.result.getItemCategory().getRecipeFolderName() + "/" + var2.getPath()), this.serializer));
+      String var10004 = this.group == null ? "" : this.group;
+      Ingredient var10005 = this.ingredient;
+      Item var10006 = this.result;
+      float var10007 = this.experience;
+      int var10008 = this.cookingTime;
+      Advancement.Builder var10009 = this.advancement;
+      String var10012 = var2.getNamespace();
+      String var10013 = this.result.getItemCategory().getRecipeFolderName();
+      var1.accept(new SimpleCookingRecipeBuilder.Result(var2, var10004, var10005, var10006, var10007, var10008, var10009, new ResourceLocation(var10012, "recipes/" + var10013 + "/" + var2.getPath()), this.serializer));
    }
 
    private void ensureValid(ResourceLocation var1) {
       if (this.advancement.getCriteria().isEmpty()) {
          throw new IllegalStateException("No way of obtaining recipe " + var1);
