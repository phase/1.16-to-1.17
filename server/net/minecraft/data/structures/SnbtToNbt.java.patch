--- net/minecraft/data/structures/SnbtToNbt.java
+++ net/minecraft/data/structures/SnbtToNbt.java
@@ -1,16 +1,13 @@
 package net.minecraft.data.structures;
 
 import com.google.common.collect.Lists;
-import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import java.io.BufferedReader;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.io.Reader;
-import java.nio.charset.Charset;
-import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
 import java.nio.file.LinkOption;
 import java.nio.file.Path;
 import java.util.ArrayList;
 import java.util.Iterator;
@@ -22,19 +19,18 @@
 import net.minecraft.data.DataGenerator;
 import net.minecraft.data.DataProvider;
 import net.minecraft.data.HashCache;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtIo;
-import net.minecraft.nbt.TagParser;
-import org.apache.commons.io.FileUtils;
+import net.minecraft.nbt.NbtUtils;
 import org.apache.commons.io.IOUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class SnbtToNbt implements DataProvider {
    @Nullable
-   private static final Path dumpSnbtTo = null;
+   private static final Path DUMP_SNBT_TO = null;
    private static final Logger LOGGER = LogManager.getLogger();
    private final DataGenerator generator;
    private final List<SnbtToNbt.Filter> filters = Lists.newArrayList();
 
    public SnbtToNbt(DataGenerator var1) {
@@ -71,13 +67,27 @@
                return this.readStructure(var3x, this.getName(var5, var3x));
             }, Util.backgroundExecutor()));
          });
       }
 
-      ((List)Util.sequence(var3).join()).stream().filter(Objects::nonNull).forEach((var3x) -> {
-         this.storeStructureIfChanged(var1, var3x, var2);
-      });
+      boolean var9 = false;
+      Iterator var10 = var3.iterator();
+
+      while(var10.hasNext()) {
+         CompletableFuture var6 = (CompletableFuture)var10.next();
+
+         try {
+            this.storeStructureIfChanged(var1, (SnbtToNbt.TaskResult)var6.get(), var2);
+         } catch (Exception var8) {
+            LOGGER.error((String)"Failed to process structure", (Throwable)var8);
+            var9 = true;
+         }
+      }
+
+      if (var9) {
+         throw new IllegalStateException("Failed to convert all structures, aborting");
+      }
    }
 
    public String getName() {
       return "SNBT -> NBT";
    }
@@ -85,123 +95,118 @@
    private String getName(Path var1, Path var2) {
       String var3 = var1.relativize(var2).toString().replaceAll("\\\\", "/");
       return var3.substring(0, var3.length() - ".snbt".length());
    }
 
-   @Nullable
    private SnbtToNbt.TaskResult readStructure(Path var1, String var2) {
       try {
          BufferedReader var3 = Files.newBufferedReader(var1);
-         Throwable var4 = null;
 
-         SnbtToNbt.TaskResult var11;
+         SnbtToNbt.TaskResult var10;
          try {
-            String var5 = IOUtils.toString((Reader)var3);
-            CompoundTag var6 = this.applyFilters(var2, TagParser.parseTag(var5));
-            ByteArrayOutputStream var7 = new ByteArrayOutputStream();
-            NbtIo.writeCompressed(var6, (OutputStream)var7);
-            byte[] var8 = var7.toByteArray();
-            String var9 = SHA1.hashBytes(var8).toString();
-            String var10;
-            if (dumpSnbtTo != null) {
-               var10 = var6.getPrettyDisplay("    ", 0).getString() + "\n";
+            String var4 = IOUtils.toString((Reader)var3);
+            CompoundTag var5 = this.applyFilters(var2, NbtUtils.snbtToStructure(var4));
+            ByteArrayOutputStream var6 = new ByteArrayOutputStream();
+            NbtIo.writeCompressed(var5, (OutputStream)var6);
+            byte[] var7 = var6.toByteArray();
+            String var8 = SHA1.hashBytes(var7).toString();
+            String var9;
+            if (DUMP_SNBT_TO != null) {
+               var9 = NbtUtils.structureToSnbt(var5);
             } else {
-               var10 = null;
+               var9 = null;
             }
 
-            var11 = new SnbtToNbt.TaskResult(var2, var8, var10, var9);
-         } catch (Throwable var22) {
-            var4 = var22;
-            throw var22;
-         } finally {
+            var10 = new SnbtToNbt.TaskResult(var2, var7, var9, var8);
+         } catch (Throwable var12) {
             if (var3 != null) {
-               if (var4 != null) {
-                  try {
-                     var3.close();
-                  } catch (Throwable var21) {
-                     var4.addSuppressed(var21);
-                  }
-               } else {
+               try {
                   var3.close();
+               } catch (Throwable var11) {
+                  var12.addSuppressed(var11);
                }
             }
 
+            throw var12;
          }
 
-         return var11;
-      } catch (CommandSyntaxException var24) {
-         LOGGER.error((String)"Couldn't convert {} from SNBT to NBT at {} as it's invalid SNBT", (Object)var2, var1, var24);
-      } catch (IOException var25) {
-         LOGGER.error((String)"Couldn't convert {} from SNBT to NBT at {}", (Object)var2, var1, var25);
-      }
+         if (var3 != null) {
+            var3.close();
+         }
 
-      return null;
+         return var10;
+      } catch (Throwable var13) {
+         throw new SnbtToNbt.StructureConversionException(var1, var13);
+      }
    }
 
    private void storeStructureIfChanged(HashCache var1, SnbtToNbt.TaskResult var2, Path var3) {
       Path var4;
       if (var2.snbtPayload != null) {
-         var4 = dumpSnbtTo.resolve(var2.name + ".snbt");
+         var4 = DUMP_SNBT_TO.resolve(var2.name + ".snbt");
 
          try {
-            FileUtils.write(var4.toFile(), var2.snbtPayload, (Charset)StandardCharsets.UTF_8);
-         } catch (IOException var18) {
-            LOGGER.error((String)"Couldn't write structure SNBT {} at {}", (Object)var2.name, var4, var18);
+            NbtToSnbt.writeSnbt(var4, var2.snbtPayload);
+         } catch (IOException var9) {
+            LOGGER.error((String)"Couldn't write structure SNBT {} at {}", (Object)var2.name, var4, var9);
          }
       }
 
       var4 = var3.resolve(var2.name + ".nbt");
 
       try {
          if (!Objects.equals(var1.getHash(var4), var2.hash) || !Files.exists(var4, new LinkOption[0])) {
             Files.createDirectories(var4.getParent());
             OutputStream var5 = Files.newOutputStream(var4);
-            Throwable var6 = null;
 
             try {
                var5.write(var2.payload);
-            } catch (Throwable var17) {
-               var6 = var17;
-               throw var17;
-            } finally {
+            } catch (Throwable var10) {
                if (var5 != null) {
-                  if (var6 != null) {
-                     try {
-                        var5.close();
-                     } catch (Throwable var16) {
-                        var6.addSuppressed(var16);
-                     }
-                  } else {
+                  try {
                      var5.close();
+                  } catch (Throwable var8) {
+                     var10.addSuppressed(var8);
                   }
                }
 
+               throw var10;
             }
+
+            if (var5 != null) {
+               var5.close();
+            }
          }
 
          var1.putNew(var4, var2.hash);
-      } catch (IOException var20) {
-         LOGGER.error((String)"Couldn't write structure {} at {}", (Object)var2.name, var4, var20);
+      } catch (IOException var11) {
+         LOGGER.error((String)"Couldn't write structure {} at {}", (Object)var2.name, var4, var11);
       }
 
    }
 
    @FunctionalInterface
    public interface Filter {
       CompoundTag apply(String var1, CompoundTag var2);
    }
 
    static class TaskResult {
-      private final String name;
-      private final byte[] payload;
+      final String name;
+      final byte[] payload;
       @Nullable
-      private final String snbtPayload;
-      private final String hash;
+      final String snbtPayload;
+      final String hash;
 
       public TaskResult(String var1, byte[] var2, @Nullable String var3, String var4) {
          this.name = var1;
          this.payload = var2;
          this.snbtPayload = var3;
          this.hash = var4;
       }
    }
+
+   static class StructureConversionException extends RuntimeException {
+      public StructureConversionException(Path var1, Throwable var2) {
+         super(var1.toAbsolutePath().toString(), var2);
+      }
+   }
 }
