--- net/minecraft/resources/ResourceLocation.java
+++ net/minecraft/resources/ResourceLocation.java
@@ -20,20 +20,23 @@
 import org.apache.commons.lang3.StringUtils;
 
 public class ResourceLocation implements Comparable<ResourceLocation> {
    public static final Codec<ResourceLocation> CODEC;
    private static final SimpleCommandExceptionType ERROR_INVALID;
+   public static final char NAMESPACE_SEPARATOR = ':';
+   public static final String DEFAULT_NAMESPACE = "minecraft";
+   public static final String REALMS_NAMESPACE = "realms";
    protected final String namespace;
    protected final String path;
 
    protected ResourceLocation(String[] var1) {
       this.namespace = StringUtils.isEmpty(var1[0]) ? "minecraft" : var1[0];
       this.path = var1[1];
       if (!isValidNamespace(this.namespace)) {
-         throw new ResourceLocationException("Non [a-z0-9_.-] character in namespace of location: " + this.namespace + ':' + this.path);
+         throw new ResourceLocationException("Non [a-z0-9_.-] character in namespace of location: " + this.namespace + ":" + this.path);
       } else if (!isValidPath(this.path)) {
-         throw new ResourceLocationException("Non [a-z0-9/._-] character in path of location: " + this.namespace + ':' + this.path);
+         throw new ResourceLocationException("Non [a-z0-9/._-] character in path of location: " + this.namespace + ":" + this.path);
       }
    }
 
    public ResourceLocation(String var1) {
       this(decompose(var1, ':'));
@@ -84,11 +87,11 @@
    public String getNamespace() {
       return this.namespace;
    }
 
    public String toString() {
-      return this.namespace + ':' + this.path;
+      return this.namespace + ":" + this.path;
    }
 
    public boolean equals(Object var1) {
       if (this == var1) {
          return true;
@@ -111,10 +114,14 @@
       }
 
       return var2;
    }
 
+   public String toDebugFileName() {
+      return this.toString().replace('/', '_').replace(':', '_');
+   }
+
    public static ResourceLocation read(StringReader var0) throws CommandSyntaxException {
       int var1 = var0.getCursor();
 
       while(var0.canRead() && isAllowedInResourceLocation(var0.peek())) {
          var0.skip();
@@ -160,10 +167,15 @@
 
    private static boolean validNamespaceChar(char var0) {
       return var0 == '_' || var0 == '-' || var0 >= 'a' && var0 <= 'z' || var0 >= '0' && var0 <= '9' || var0 == '.';
    }
 
+   public static boolean isValidResourceLocation(String var0) {
+      String[] var1 = decompose(var0, ':');
+      return isValidNamespace(StringUtils.isEmpty(var1[0]) ? "minecraft" : var1[0]) && isValidPath(var1[1]);
+   }
+
    static {
       CODEC = Codec.STRING.comapFlatMap(ResourceLocation::read, ResourceLocation::toString).stable();
       ERROR_INVALID = new SimpleCommandExceptionType(new TranslatableComponent("argument.id.invalid"));
    }
 
