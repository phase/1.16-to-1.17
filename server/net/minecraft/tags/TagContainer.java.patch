--- net/minecraft/tags/TagContainer.java
+++ net/minecraft/tags/TagContainer.java
@@ -1,61 +1,116 @@
 package net.minecraft.tags;
 
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.Maps;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Optional;
+import java.util.function.Function;
+import java.util.function.Supplier;
+import javax.annotation.Nullable;
 import net.minecraft.core.Registry;
-import net.minecraft.network.FriendlyByteBuf;
-import net.minecraft.world.entity.EntityType;
-import net.minecraft.world.item.Item;
-import net.minecraft.world.level.block.Block;
+import net.minecraft.core.RegistryAccess;
+import net.minecraft.resources.ResourceKey;
+import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.level.block.Blocks;
-import net.minecraft.world.level.material.Fluid;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
 
-public interface TagContainer {
-   TagContainer EMPTY = of(TagCollection.empty(), TagCollection.empty(), TagCollection.empty(), TagCollection.empty());
+public class TagContainer {
+   private static final Logger LOGGER = LogManager.getLogger();
+   public static final TagContainer EMPTY = new TagContainer(ImmutableMap.of());
+   private final Map<ResourceKey<? extends Registry<?>>, TagCollection<?>> collections;
 
-   TagCollection<Block> getBlocks();
+   private TagContainer(Map<ResourceKey<? extends Registry<?>>, TagCollection<?>> var1) {
+      this.collections = var1;
+   }
 
-   TagCollection<Item> getItems();
+   @Nullable
+   private <T> TagCollection<T> get(ResourceKey<? extends Registry<T>> var1) {
+      return (TagCollection)this.collections.get(var1);
+   }
 
-   TagCollection<Fluid> getFluids();
+   public <T> TagCollection<T> getOrEmpty(ResourceKey<? extends Registry<T>> var1) {
+      return (TagCollection)this.collections.getOrDefault(var1, TagCollection.empty());
+   }
 
-   TagCollection<EntityType<?>> getEntityTypes();
+   public <T, E extends Exception> Tag<T> getTagOrThrow(ResourceKey<? extends Registry<T>> var1, ResourceLocation var2, Function<ResourceLocation, E> var3) throws E {
+      TagCollection var4 = this.get(var1);
+      if (var4 == null) {
+         throw (Exception)var3.apply(var2);
+      } else {
+         Tag var5 = var4.getTag(var2);
+         if (var5 == null) {
+            throw (Exception)var3.apply(var2);
+         } else {
+            return var5;
+         }
+      }
+   }
 
-   default void bindToGlobal() {
-      StaticTags.resetAll(this);
-      Blocks.rebuildCache();
+   public <T, E extends Exception> ResourceLocation getIdOrThrow(ResourceKey<? extends Registry<T>> var1, Tag<T> var2, Supplier<E> var3) throws E {
+      TagCollection var4 = this.get(var1);
+      if (var4 == null) {
+         throw (Exception)var3.get();
+      } else {
+         ResourceLocation var5 = var4.getId(var2);
+         if (var5 == null) {
+            throw (Exception)var3.get();
+         } else {
+            return var5;
+         }
+      }
    }
 
-   default void serializeToNetwork(FriendlyByteBuf var1) {
-      this.getBlocks().serializeToNetwork(var1, Registry.BLOCK);
-      this.getItems().serializeToNetwork(var1, Registry.ITEM);
-      this.getFluids().serializeToNetwork(var1, Registry.FLUID);
-      this.getEntityTypes().serializeToNetwork(var1, Registry.ENTITY_TYPE);
+   public void getAll(TagContainer.CollectionConsumer var1) {
+      this.collections.forEach((var1x, var2) -> {
+         acceptCap(var1, var1x, var2);
+      });
    }
 
-   static TagContainer deserializeFromNetwork(FriendlyByteBuf var0) {
-      TagCollection var1 = TagCollection.loadFromNetwork(var0, Registry.BLOCK);
-      TagCollection var2 = TagCollection.loadFromNetwork(var0, Registry.ITEM);
-      TagCollection var3 = TagCollection.loadFromNetwork(var0, Registry.FLUID);
-      TagCollection var4 = TagCollection.loadFromNetwork(var0, Registry.ENTITY_TYPE);
-      return of(var1, var2, var3, var4);
+   private static <T> void acceptCap(TagContainer.CollectionConsumer var0, ResourceKey<? extends Registry<?>> var1, TagCollection<?> var2) {
+      var0.accept(var1, var2);
    }
 
-   static TagContainer of(final TagCollection<Block> var0, final TagCollection<Item> var1, final TagCollection<Fluid> var2, final TagCollection<EntityType<?>> var3) {
-      return new TagContainer() {
-         public TagCollection<Block> getBlocks() {
-            return var0;
-         }
+   public void bindToGlobal() {
+      StaticTags.resetAll(this);
+      Blocks.rebuildCache();
+   }
 
-         public TagCollection<Item> getItems() {
-            return var1;
-         }
+   public Map<ResourceKey<? extends Registry<?>>, TagCollection.NetworkPayload> serializeToNetwork(final RegistryAccess var1) {
+      final HashMap var2 = Maps.newHashMap();
+      this.getAll(new TagContainer.CollectionConsumer() {
+         public <T> void accept(ResourceKey<? extends Registry<T>> var1x, TagCollection<T> var2x) {
+            Optional var3 = var1.registry(var1x);
+            if (var3.isPresent()) {
+               var2.put(var1x, var2x.serializeToNetwork((Registry)var3.get()));
+            } else {
+               TagContainer.LOGGER.error((String)"Unknown registry {}", (Object)var1x);
+            }
 
-         public TagCollection<Fluid> getFluids() {
-            return var2;
          }
+      });
+      return var2;
+   }
 
-         public TagCollection<EntityType<?>> getEntityTypes() {
-            return var3;
-         }
-      };
+   public static class Builder {
+      private final ImmutableMap.Builder<ResourceKey<? extends Registry<?>>, TagCollection<?>> result = ImmutableMap.builder();
+
+      public Builder() {
+      }
+
+      public <T> TagContainer.Builder add(ResourceKey<? extends Registry<? extends T>> var1, TagCollection<T> var2) {
+         this.result.put(var1, var2);
+         return this;
+      }
+
+      public TagContainer build() {
+         return new TagContainer(this.result.build());
+      }
    }
+
+   @FunctionalInterface
+   interface CollectionConsumer {
+      <T> void accept(ResourceKey<? extends Registry<T>> var1, TagCollection<T> var2);
+   }
 }
