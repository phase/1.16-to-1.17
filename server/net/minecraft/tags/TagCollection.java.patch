--- net/minecraft/tags/TagCollection.java
+++ net/minecraft/tags/TagCollection.java
@@ -1,17 +1,22 @@
 package net.minecraft.tags;
 
 import com.google.common.collect.ImmutableBiMap;
 import com.google.common.collect.ImmutableSet;
+import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
+import it.unimi.dsi.fastutil.ints.IntArrayList;
+import it.unimi.dsi.fastutil.ints.IntList;
+import it.unimi.dsi.fastutil.ints.IntListIterator;
+import java.util.ArrayList;
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.Iterator;
+import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
 import javax.annotation.Nullable;
-import net.minecraft.core.DefaultedRegistry;
 import net.minecraft.core.Registry;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.resources.ResourceLocation;
 
 public interface TagCollection<T> {
@@ -23,60 +28,70 @@
    }
 
    Tag<T> getTagOrEmpty(ResourceLocation var1);
 
    @Nullable
+   default ResourceLocation getId(Tag.Named<T> var1) {
+      return var1.getName();
+   }
+
+   @Nullable
    ResourceLocation getId(Tag<T> var1);
 
-   default ResourceLocation getIdOrThrow(Tag<T> var1) {
-      ResourceLocation var2 = this.getId(var1);
-      if (var2 == null) {
-         throw new IllegalStateException("Unrecognized tag");
-      } else {
-         return var2;
-      }
+   default boolean hasTag(ResourceLocation var1) {
+      return this.getAllTags().containsKey(var1);
    }
 
    default Collection<ResourceLocation> getAvailableTags() {
       return this.getAllTags().keySet();
    }
 
-   default void serializeToNetwork(FriendlyByteBuf var1, DefaultedRegistry<T> var2) {
-      Map var3 = this.getAllTags();
-      var1.writeVarInt(var3.size());
-      Iterator var4 = var3.entrySet().iterator();
+   default Collection<ResourceLocation> getMatchingTags(T var1) {
+      ArrayList var2 = Lists.newArrayList();
+      Iterator var3 = this.getAllTags().entrySet().iterator();
 
-      while(var4.hasNext()) {
-         Entry var5 = (Entry)var4.next();
-         var1.writeResourceLocation((ResourceLocation)var5.getKey());
-         var1.writeVarInt(((Tag)var5.getValue()).getValues().size());
-         Iterator var6 = ((Tag)var5.getValue()).getValues().iterator();
+      while(var3.hasNext()) {
+         Entry var4 = (Entry)var3.next();
+         if (((Tag)var4.getValue()).contains(var1)) {
+            var2.add(var4.getKey());
+         }
+      }
 
+      return var2;
+   }
+
+   default TagCollection.NetworkPayload serializeToNetwork(Registry<T> var1) {
+      Map var2 = this.getAllTags();
+      HashMap var3 = Maps.newHashMapWithExpectedSize(var2.size());
+      var2.forEach((var2x, var3x) -> {
+         List var4 = var3x.getValues();
+         IntArrayList var5 = new IntArrayList(var4.size());
+         Iterator var6 = var4.iterator();
+
          while(var6.hasNext()) {
             Object var7 = var6.next();
-            var1.writeVarInt(var2.getId(var7));
+            var5.add(var1.getId(var7));
          }
-      }
 
+         var3.put(var2x, var5);
+      });
+      return new TagCollection.NetworkPayload(var3);
    }
 
-   static <T> TagCollection<T> loadFromNetwork(FriendlyByteBuf var0, Registry<T> var1) {
-      HashMap var2 = Maps.newHashMap();
-      int var3 = var0.readVarInt();
+   static <T> TagCollection<T> createFromNetwork(TagCollection.NetworkPayload var0, Registry<? extends T> var1) {
+      HashMap var2 = Maps.newHashMapWithExpectedSize(var0.tags.size());
+      var0.tags.forEach((var2x, var3) -> {
+         ImmutableSet.Builder var4 = ImmutableSet.builder();
+         IntListIterator var5 = var3.iterator();
 
-      for(int var4 = 0; var4 < var3; ++var4) {
-         ResourceLocation var5 = var0.readResourceLocation();
-         int var6 = var0.readVarInt();
-         ImmutableSet.Builder var7 = ImmutableSet.builder();
-
-         for(int var8 = 0; var8 < var6; ++var8) {
-            var7.add(var1.byId(var0.readVarInt()));
+         while(var5.hasNext()) {
+            int var6 = (Integer)var5.next();
+            var4.add(var1.byId(var6));
          }
 
-         var2.put(var5, Tag.fromSet(var7.build()));
-      }
-
+         var2.put(var2x, Tag.fromSet(var4.build()));
+      });
       return of(var2);
    }
 
    static <T> TagCollection<T> empty() {
       return of(ImmutableBiMap.of());
@@ -99,6 +114,22 @@
          public Map<ResourceLocation, Tag<T>> getAllTags() {
             return var1;
          }
       };
    }
+
+   public static class NetworkPayload {
+      private final Map<ResourceLocation, IntList> tags;
+
+      private NetworkPayload(Map<ResourceLocation, IntList> var1) {
+         this.tags = var1;
+      }
+
+      public void write(FriendlyByteBuf var1) {
+         var1.writeMap(this.tags, FriendlyByteBuf::writeResourceLocation, FriendlyByteBuf::writeIntIdList);
+      }
+
+      public static TagCollection.NetworkPayload read(FriendlyByteBuf var0) {
+         return new TagCollection.NetworkPayload(var0.readMap(FriendlyByteBuf::readResourceLocation, FriendlyByteBuf::readIntIdList));
+      }
+   }
 }
