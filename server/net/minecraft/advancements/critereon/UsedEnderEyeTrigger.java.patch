--- net/minecraft/advancements/critereon/UsedEnderEyeTrigger.java
+++ net/minecraft/advancements/critereon/UsedEnderEyeTrigger.java
@@ -4,21 +4,21 @@
 import net.minecraft.core.BlockPos;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.level.ServerPlayer;
 
 public class UsedEnderEyeTrigger extends SimpleCriterionTrigger<UsedEnderEyeTrigger.TriggerInstance> {
-   private static final ResourceLocation ID = new ResourceLocation("used_ender_eye");
+   static final ResourceLocation ID = new ResourceLocation("used_ender_eye");
 
    public UsedEnderEyeTrigger() {
    }
 
    public ResourceLocation getId() {
       return ID;
    }
 
    public UsedEnderEyeTrigger.TriggerInstance createInstance(JsonObject var1, EntityPredicate.Composite var2, DeserializationContext var3) {
-      MinMaxBounds.Floats var4 = MinMaxBounds.Floats.fromJson(var1.get("distance"));
+      MinMaxBounds.Doubles var4 = MinMaxBounds.Doubles.fromJson(var1.get("distance"));
       return new UsedEnderEyeTrigger.TriggerInstance(var2, var4);
    }
 
    public void trigger(ServerPlayer var1, BlockPos var2) {
       double var3 = var1.getX() - (double)var2.getX();
@@ -28,13 +28,13 @@
          return var2x.matches(var7);
       });
    }
 
    public static class TriggerInstance extends AbstractCriterionTriggerInstance {
-      private final MinMaxBounds.Floats level;
+      private final MinMaxBounds.Doubles level;
 
-      public TriggerInstance(EntityPredicate.Composite var1, MinMaxBounds.Floats var2) {
+      public TriggerInstance(EntityPredicate.Composite var1, MinMaxBounds.Doubles var2) {
          super(UsedEnderEyeTrigger.ID, var1);
          this.level = var2;
       }
 
       public boolean matches(double var1) {
