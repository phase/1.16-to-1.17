--- net/minecraft/advancements/critereon/EntityEquipmentPredicate.java
+++ net/minecraft/advancements/critereon/EntityEquipmentPredicate.java
@@ -8,11 +8,10 @@
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EquipmentSlot;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.raid.Raid;
 import net.minecraft.world.item.Items;
-import net.minecraft.world.level.ItemLike;
 
 public class EntityEquipmentPredicate {
    public static final EntityEquipmentPredicate ANY;
    public static final EntityEquipmentPredicate CAPTAIN;
    private final ItemPredicate head;
@@ -84,11 +83,11 @@
       }
    }
 
    static {
       ANY = new EntityEquipmentPredicate(ItemPredicate.ANY, ItemPredicate.ANY, ItemPredicate.ANY, ItemPredicate.ANY, ItemPredicate.ANY, ItemPredicate.ANY);
-      CAPTAIN = new EntityEquipmentPredicate(ItemPredicate.Builder.item().of((ItemLike)Items.WHITE_BANNER).hasNbt(Raid.getLeaderBannerInstance().getTag()).build(), ItemPredicate.ANY, ItemPredicate.ANY, ItemPredicate.ANY, ItemPredicate.ANY, ItemPredicate.ANY);
+      CAPTAIN = new EntityEquipmentPredicate(ItemPredicate.Builder.item().of(Items.WHITE_BANNER).hasNbt(Raid.getLeaderBannerInstance().getTag()).build(), ItemPredicate.ANY, ItemPredicate.ANY, ItemPredicate.ANY, ItemPredicate.ANY, ItemPredicate.ANY);
    }
 
    public static class Builder {
       private ItemPredicate head;
       private ItemPredicate chest;
@@ -128,10 +127,20 @@
       public EntityEquipmentPredicate.Builder feet(ItemPredicate var1) {
          this.feet = var1;
          return this;
       }
 
+      public EntityEquipmentPredicate.Builder mainhand(ItemPredicate var1) {
+         this.mainhand = var1;
+         return this;
+      }
+
+      public EntityEquipmentPredicate.Builder offhand(ItemPredicate var1) {
+         this.offhand = var1;
+         return this;
+      }
+
       public EntityEquipmentPredicate build() {
          return new EntityEquipmentPredicate(this.head, this.chest, this.legs, this.feet, this.mainhand, this.offhand);
       }
    }
 }
