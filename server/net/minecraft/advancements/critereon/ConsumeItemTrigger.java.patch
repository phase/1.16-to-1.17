--- net/minecraft/advancements/critereon/ConsumeItemTrigger.java
+++ net/minecraft/advancements/critereon/ConsumeItemTrigger.java
@@ -1,17 +1,18 @@
 package net.minecraft.advancements.critereon;
 
+import com.google.common.collect.ImmutableSet;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.tags.Tag;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.alchemy.Potion;
 import net.minecraft.world.level.ItemLike;
 
 public class ConsumeItemTrigger extends SimpleCriterionTrigger<ConsumeItemTrigger.TriggerInstance> {
-   private static final ResourceLocation ID = new ResourceLocation("consume_item");
+   static final ResourceLocation ID = new ResourceLocation("consume_item");
 
    public ConsumeItemTrigger() {
    }
 
    public ResourceLocation getId() {
@@ -38,12 +39,16 @@
 
       public static ConsumeItemTrigger.TriggerInstance usedItem() {
          return new ConsumeItemTrigger.TriggerInstance(EntityPredicate.Composite.ANY, ItemPredicate.ANY);
       }
 
+      public static ConsumeItemTrigger.TriggerInstance usedItem(ItemPredicate var0) {
+         return new ConsumeItemTrigger.TriggerInstance(EntityPredicate.Composite.ANY, var0);
+      }
+
       public static ConsumeItemTrigger.TriggerInstance usedItem(ItemLike var0) {
-         return new ConsumeItemTrigger.TriggerInstance(EntityPredicate.Composite.ANY, new ItemPredicate((Tag)null, var0.asItem(), MinMaxBounds.Ints.ANY, MinMaxBounds.Ints.ANY, EnchantmentPredicate.NONE, EnchantmentPredicate.NONE, (Potion)null, NbtPredicate.ANY));
+         return new ConsumeItemTrigger.TriggerInstance(EntityPredicate.Composite.ANY, new ItemPredicate((Tag)null, ImmutableSet.of(var0.asItem()), MinMaxBounds.Ints.ANY, MinMaxBounds.Ints.ANY, EnchantmentPredicate.NONE, EnchantmentPredicate.NONE, (Potion)null, NbtPredicate.ANY));
       }
 
       public boolean matches(ItemStack var1) {
          return this.item.matches(var1);
       }
