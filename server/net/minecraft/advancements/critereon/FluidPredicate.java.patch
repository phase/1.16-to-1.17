--- net/minecraft/advancements/critereon/FluidPredicate.java
+++ net/minecraft/advancements/critereon/FluidPredicate.java
@@ -35,11 +35,11 @@
       } else if (!var1.isLoaded(var2)) {
          return false;
       } else {
          FluidState var3 = var1.getFluidState(var2);
          Fluid var4 = var3.getType();
-         if (this.tag != null && !this.tag.contains(var4)) {
+         if (this.tag != null && !var4.is(this.tag)) {
             return false;
          } else if (this.fluid != null && var4 != this.fluid) {
             return false;
          } else {
             return this.properties.matches(var3);
@@ -57,14 +57,13 @@
          }
 
          Tag var5 = null;
          if (var1.has("tag")) {
             ResourceLocation var4 = new ResourceLocation(GsonHelper.getAsString(var1, "tag"));
-            var5 = SerializationTags.getInstance().getFluids().getTag(var4);
-            if (var5 == null) {
-               throw new JsonSyntaxException("Unknown fluid tag '" + var4 + "'");
-            }
+            var5 = SerializationTags.getInstance().getTagOrThrow(Registry.FLUID_REGISTRY, var4, (var0x) -> {
+               return new JsonSyntaxException("Unknown fluid tag '" + var0x + "'");
+            });
          }
 
          StatePropertiesPredicate var6 = StatePropertiesPredicate.fromJson(var1.get("state"));
          return new FluidPredicate(var5, var2, var6);
       } else {
@@ -80,17 +79,54 @@
          if (this.fluid != null) {
             var1.addProperty("fluid", Registry.FLUID.getKey(this.fluid).toString());
          }
 
          if (this.tag != null) {
-            var1.addProperty("tag", SerializationTags.getInstance().getFluids().getIdOrThrow(this.tag).toString());
+            var1.addProperty("tag", SerializationTags.getInstance().getIdOrThrow(Registry.FLUID_REGISTRY, this.tag, () -> {
+               return new IllegalStateException("Unknown fluid tag");
+            }).toString());
          }
 
          var1.add("state", this.properties.serializeToJson());
          return var1;
       }
    }
 
    static {
       ANY = new FluidPredicate((Tag)null, (Fluid)null, StatePropertiesPredicate.ANY);
    }
+
+   public static class Builder {
+      @Nullable
+      private Fluid fluid;
+      @Nullable
+      private Tag<Fluid> fluids;
+      private StatePropertiesPredicate properties;
+
+      private Builder() {
+         this.properties = StatePropertiesPredicate.ANY;
+      }
+
+      public static FluidPredicate.Builder fluid() {
+         return new FluidPredicate.Builder();
+      }
+
+      public FluidPredicate.Builder of(Fluid var1) {
+         this.fluid = var1;
+         return this;
+      }
+
+      public FluidPredicate.Builder of(Tag<Fluid> var1) {
+         this.fluids = var1;
+         return this;
+      }
+
+      public FluidPredicate.Builder setProperties(StatePropertiesPredicate var1) {
+         this.properties = var1;
+         return this;
+      }
+
+      public FluidPredicate build() {
+         return new FluidPredicate(this.fluids, this.fluid, this.properties);
+      }
+   }
 }
