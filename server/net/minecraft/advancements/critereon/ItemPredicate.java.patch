--- net/minecraft/advancements/critereon/ItemPredicate.java
+++ net/minecraft/advancements/critereon/ItemPredicate.java
@@ -61,13 +61,13 @@
    }
 
    public boolean matches(ItemStack var1) {
       if (this == ANY) {
          return true;
-      } else if (this.tag != null && !this.tag.contains(var1.getItem())) {
+      } else if (this.tag != null && !var1.is(this.tag)) {
          return false;
-      } else if (this.item != null && var1.getItem() != this.item) {
+      } else if (this.item != null && !var1.is(this.item)) {
          return false;
       } else if (!this.count.matches(var1.getCount())) {
          return false;
       } else if (!this.durability.isAny() && !var1.isDamageableItem()) {
          return false;
@@ -130,14 +130,13 @@
             }
 
             Tag var10 = null;
             if (var1.has("tag")) {
                ResourceLocation var7 = new ResourceLocation(GsonHelper.getAsString(var1, "tag"));
-               var10 = SerializationTags.getInstance().getItems().getTag(var7);
-               if (var10 == null) {
-                  throw new JsonSyntaxException("Unknown item tag '" + var7 + "'");
-               }
+               var10 = SerializationTags.getInstance().getTagOrThrow(Registry.ITEM_REGISTRY, var7, (var0x) -> {
+                  return new JsonSyntaxException("Unknown item tag '" + var0x + "'");
+               });
             }
 
             Potion var11 = null;
             if (var1.has("potion")) {
                ResourceLocation var8 = new ResourceLocation(GsonHelper.getAsString(var1, "potion"));
@@ -163,11 +162,13 @@
          if (this.item != null) {
             var1.addProperty("item", Registry.ITEM.getKey(this.item).toString());
          }
 
          if (this.tag != null) {
-            var1.addProperty("tag", SerializationTags.getInstance().getItems().getIdOrThrow(this.tag).toString());
+            var1.addProperty("tag", SerializationTags.getInstance().getIdOrThrow(Registry.ITEM_REGISTRY, this.tag, () -> {
+               return new IllegalStateException("Unknown item tag");
+            }).toString());
          }
 
          var1.add("count", this.count.serializeToJson());
          var1.add("durability", this.durability.serializeToJson());
          var1.add("nbt", this.nbt.serializeToJson());
@@ -256,20 +257,40 @@
       public ItemPredicate.Builder of(Tag<Item> var1) {
          this.tag = var1;
          return this;
       }
 
+      public ItemPredicate.Builder withCount(MinMaxBounds.Ints var1) {
+         this.count = var1;
+         return this;
+      }
+
+      public ItemPredicate.Builder hasDurability(MinMaxBounds.Ints var1) {
+         this.durability = var1;
+         return this;
+      }
+
+      public ItemPredicate.Builder isPotion(Potion var1) {
+         this.potion = var1;
+         return this;
+      }
+
       public ItemPredicate.Builder hasNbt(CompoundTag var1) {
          this.nbt = new NbtPredicate(var1);
          return this;
       }
 
       public ItemPredicate.Builder hasEnchantment(EnchantmentPredicate var1) {
          this.enchantments.add(var1);
          return this;
       }
 
+      public ItemPredicate.Builder hasStoredEnchantment(EnchantmentPredicate var1) {
+         this.storedEnchantments.add(var1);
+         return this;
+      }
+
       public ItemPredicate build() {
          return new ItemPredicate(this.tag, this.item, this.count, this.durability, (EnchantmentPredicate[])this.enchantments.toArray(EnchantmentPredicate.NONE), (EnchantmentPredicate[])this.storedEnchantments.toArray(EnchantmentPredicate.NONE), this.potion, this.nbt);
       }
    }
 }
