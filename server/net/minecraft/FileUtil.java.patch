--- net/minecraft/FileUtil.java
+++ net/minecraft/FileUtil.java
@@ -1,17 +1,77 @@
 package net.minecraft;
 
+import java.io.File;
+import java.io.IOException;
+import java.nio.file.FileAlreadyExistsException;
+import java.nio.file.Files;
 import java.nio.file.InvalidPathException;
 import java.nio.file.Path;
 import java.nio.file.Paths;
 import java.util.Iterator;
+import java.util.regex.Matcher;
 import java.util.regex.Pattern;
+import org.apache.commons.io.FilenameUtils;
 
 public class FileUtil {
    private static final Pattern COPY_COUNTER_PATTERN = Pattern.compile("(<name>.*) \\((<count>\\d*)\\)", 66);
+   private static final int MAX_FILE_NAME = 255;
    private static final Pattern RESERVED_WINDOWS_FILENAMES = Pattern.compile(".*\\.|(?:COM|CLOCK\\$|CON|PRN|AUX|NUL|COM[1-9]|LPT[1-9])(?:\\..*)?", 2);
 
+   public FileUtil() {
+   }
+
+   public static String findAvailableName(Path var0, String var1, String var2) throws IOException {
+      char[] var3 = SharedConstants.ILLEGAL_FILE_CHARACTERS;
+      int var4 = var3.length;
+
+      for(int var5 = 0; var5 < var4; ++var5) {
+         char var6 = var3[var5];
+         var1 = var1.replace(var6, '_');
+      }
+
+      var1 = var1.replaceAll("[./\"]", "_");
+      if (RESERVED_WINDOWS_FILENAMES.matcher(var1).matches()) {
+         var1 = "_" + var1 + "_";
+      }
+
+      Matcher var9 = COPY_COUNTER_PATTERN.matcher(var1);
+      var4 = 0;
+      if (var9.matches()) {
+         var1 = var9.group("name");
+         var4 = Integer.parseInt(var9.group("count"));
+      }
+
+      if (var1.length() > 255 - var2.length()) {
+         var1 = var1.substring(0, 255 - var2.length());
+      }
+
+      while(true) {
+         String var10 = var1;
+         if (var4 != 0) {
+            String var11 = " (" + var4 + ")";
+            int var7 = 255 - var11.length();
+            if (var1.length() > var7) {
+               var10 = var1.substring(0, var7);
+            }
+
+            var10 = var10 + var11;
+         }
+
+         var10 = var10 + var2;
+         Path var12 = var0.resolve(var10);
+
+         try {
+            Path var13 = Files.createDirectory(var12);
+            Files.deleteIfExists(var13);
+            return var0.relativize(var13).toString();
+         } catch (FileAlreadyExistsException var8) {
+            ++var4;
+         }
+      }
+   }
+
    public static boolean isPathNormalized(Path var0) {
       Path var1 = var0.normalize();
       return var1.equals(var0);
    }
 
@@ -37,6 +97,14 @@
          throw new InvalidPathException(var3, "empty resource name");
       } else {
          return var0.resolve(var4);
       }
    }
+
+   public static String getFullResourcePath(String var0) {
+      return FilenameUtils.getFullPath(var0).replace(File.separator, "/");
+   }
+
+   public static String normalizeResourcePath(String var0) {
+      return FilenameUtils.normalize(var0).replace(File.separator, "/");
+   }
 }
