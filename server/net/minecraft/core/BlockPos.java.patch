--- net/minecraft/core/BlockPos.java
+++ net/minecraft/core/BlockPos.java
@@ -24,14 +24,15 @@
    public static final Codec<BlockPos> CODEC;
    private static final Logger LOGGER;
    public static final BlockPos ZERO;
    private static final int PACKED_X_LENGTH;
    private static final int PACKED_Z_LENGTH;
-   private static final int PACKED_Y_LENGTH;
+   public static final int PACKED_Y_LENGTH;
    private static final long PACKED_X_MASK;
    private static final long PACKED_Y_MASK;
    private static final long PACKED_Z_MASK;
+   private static final int Y_OFFSET = 0;
    private static final int Z_OFFSET;
    private static final int X_OFFSET;
 
    public BlockPos(int var1, int var2, int var3) {
       super(var1, var2, var3);
@@ -107,10 +108,18 @@
 
    public BlockPos subtract(Vec3i var1) {
       return this.offset(-var1.getX(), -var1.getY(), -var1.getZ());
    }
 
+   public BlockPos multiply(int var1) {
+      if (var1 == 1) {
+         return this;
+      } else {
+         return var1 == 0 ? ZERO : new BlockPos(this.getX() * var1, this.getY() * var1, this.getZ() * var1);
+      }
+   }
+
    public BlockPos above() {
       return this.relative(Direction.UP);
    }
 
    public BlockPos above(int var1) {
@@ -192,18 +201,26 @@
 
    public BlockPos cross(Vec3i var1) {
       return new BlockPos(this.getY() * var1.getZ() - this.getZ() * var1.getY(), this.getZ() * var1.getX() - this.getX() * var1.getZ(), this.getX() * var1.getY() - this.getY() * var1.getX());
    }
 
+   public BlockPos atY(int var1) {
+      return new BlockPos(this.getX(), var1, this.getZ());
+   }
+
    public BlockPos immutable() {
       return this;
    }
 
    public BlockPos.MutableBlockPos mutable() {
       return new BlockPos.MutableBlockPos(this.getX(), this.getY(), this.getZ());
    }
 
+   public static Iterable<BlockPos> randomInCube(Random var0, int var1, BlockPos var2, int var3) {
+      return randomBetweenClosed(var0, var1, var2.getX() - var3, var2.getY() - var3, var2.getZ() - var3, var2.getX() + var3, var2.getY() + var3, var2.getZ() + var3);
+   }
+
    public static Iterable<BlockPos> randomBetweenClosed(Random var0, int var1, int var2, int var3, int var4, int var5, int var6, int var7) {
       int var8 = var5 - var2 + 1;
       int var9 = var6 - var3 + 1;
       int var10 = var7 - var4 + 1;
       return () -> {
@@ -294,11 +311,11 @@
    public static Stream<BlockPos> betweenClosedStream(BlockPos var0, BlockPos var1) {
       return StreamSupport.stream(betweenClosed(var0, var1).spliterator(), false);
    }
 
    public static Stream<BlockPos> betweenClosedStream(BoundingBox var0) {
-      return betweenClosedStream(Math.min(var0.x0, var0.x1), Math.min(var0.y0, var0.y1), Math.min(var0.z0, var0.z1), Math.max(var0.x0, var0.x1), Math.max(var0.y0, var0.y1), Math.max(var0.z0, var0.z1));
+      return betweenClosedStream(Math.min(var0.minX(), var0.maxX()), Math.min(var0.minY(), var0.maxY()), Math.min(var0.minZ(), var0.maxZ()), Math.max(var0.minX(), var0.maxX()), Math.max(var0.minY(), var0.maxY()), Math.max(var0.minZ(), var0.maxZ()));
    }
 
    public static Stream<BlockPos> betweenClosedStream(AABB var0) {
       return betweenClosedStream(Mth.floor(var0.minX), Mth.floor(var0.minY), Mth.floor(var0.minZ), Mth.floor(var0.maxX), Mth.floor(var0.maxY), Mth.floor(var0.maxZ));
    }
@@ -375,11 +392,11 @@
       };
    }
 
    static {
       CODEC = Codec.INT_STREAM.comapFlatMap((var0) -> {
-         return Util.fixedSize(var0, 3).map((var0x) -> {
+         return Util.fixedSize((IntStream)var0, 3).map((var0x) -> {
             return new BlockPos(var0x[0], var0x[1], var0x[2]);
          });
       }, (var0) -> {
          return IntStream.of(new int[]{var0.getX(), var0.getY(), var0.getZ()});
       }).stable();
@@ -414,10 +431,14 @@
 
       public BlockPos offset(int var1, int var2, int var3) {
          return super.offset(var1, var2, var3).immutable();
       }
 
+      public BlockPos multiply(int var1) {
+         return super.multiply(var1).immutable();
+      }
+
       public BlockPos relative(Direction var1, int var2) {
          return super.relative(var1, var2).immutable();
       }
 
       public BlockPos relative(Direction.Axis var1, int var2) {
@@ -457,10 +478,14 @@
 
       public BlockPos.MutableBlockPos setWithOffset(Vec3i var1, int var2, int var3, int var4) {
          return this.set(var1.getX() + var2, var1.getY() + var3, var1.getZ() + var4);
       }
 
+      public BlockPos.MutableBlockPos setWithOffset(Vec3i var1, Vec3i var2) {
+         return this.set(var1.getX() + var2.getX(), var1.getY() + var2.getY(), var1.getZ() + var2.getZ());
+      }
+
       public BlockPos.MutableBlockPos move(Direction var1) {
          return this.move(var1, 1);
       }
 
       public BlockPos.MutableBlockPos move(Direction var1, int var2) {
@@ -486,20 +511,23 @@
          default:
             throw new IllegalStateException("Unable to clamp axis " + var1);
          }
       }
 
-      public void setX(int var1) {
+      public BlockPos.MutableBlockPos setX(int var1) {
          super.setX(var1);
+         return this;
       }
 
-      public void setY(int var1) {
+      public BlockPos.MutableBlockPos setY(int var1) {
          super.setY(var1);
+         return this;
       }
 
-      public void setZ(int var1) {
+      public BlockPos.MutableBlockPos setZ(int var1) {
          super.setZ(var1);
+         return this;
       }
 
       public BlockPos immutable() {
          return new BlockPos(this);
       }
