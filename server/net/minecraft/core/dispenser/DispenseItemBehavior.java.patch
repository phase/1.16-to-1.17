--- net/minecraft/core/dispenser/DispenseItemBehavior.java
+++ net/minecraft/core/dispenser/DispenseItemBehavior.java
@@ -1,9 +1,10 @@
 package net.minecraft.core.dispenser;
 
 import java.util.Iterator;
 import java.util.List;
+import java.util.Optional;
 import java.util.Random;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.BlockSource;
 import net.minecraft.core.Direction;
@@ -35,12 +36,13 @@
 import net.minecraft.world.entity.projectile.ThrownExperienceBottle;
 import net.minecraft.world.entity.projectile.ThrownPotion;
 import net.minecraft.world.entity.vehicle.Boat;
 import net.minecraft.world.item.ArmorItem;
 import net.minecraft.world.item.BoneMealItem;
-import net.minecraft.world.item.BucketItem;
+import net.minecraft.world.item.DispensibleContainerItem;
 import net.minecraft.world.item.DyeColor;
+import net.minecraft.world.item.HoneycombItem;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.SpawnEggItem;
 import net.minecraft.world.item.alchemy.PotionUtils;
@@ -50,10 +52,12 @@
 import net.minecraft.world.level.block.BeehiveBlock;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.BucketPickup;
 import net.minecraft.world.level.block.CampfireBlock;
+import net.minecraft.world.level.block.CandleBlock;
+import net.minecraft.world.level.block.CandleCakeBlock;
 import net.minecraft.world.level.block.CarvedPumpkinBlock;
 import net.minecraft.world.level.block.DispenserBlock;
 import net.minecraft.world.level.block.RespawnAnchorBlock;
 import net.minecraft.world.level.block.ShulkerBoxBlock;
 import net.minecraft.world.level.block.SkullBlock;
@@ -63,12 +67,11 @@
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.entity.DispenserBlockEntity;
 import net.minecraft.world.level.block.entity.SkullBlockEntity;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
-import net.minecraft.world.level.material.FlowingFluid;
-import net.minecraft.world.level.material.Fluid;
+import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.BlockHitResult;
 
 public interface DispenseItemBehavior {
    DispenseItemBehavior NOOP = (var0, var1) -> {
@@ -171,10 +174,11 @@
          public ItemStack execute(BlockSource var1, ItemStack var2) {
             Direction var3 = (Direction)var1.getBlockState().getValue(DispenserBlock.FACING);
             EntityType var4 = ((SpawnEggItem)var2.getItem()).getType(var2.getTag());
             var4.spawn(var1.getLevel(), var2, (Player)null, var1.getPos().relative(var3), MobSpawnType.DISPENSER, var3 != Direction.UP, false);
             var2.shrink(1);
+            var1.getLevel().gameEvent(GameEvent.ENTITY_PLACE, var1.getPos());
             return var2;
          }
       };
       Iterator var1 = SpawnEggItem.eggs().iterator();
 
@@ -232,11 +236,11 @@
                }
 
                var6 = (AbstractHorse)var5.next();
             } while(!var6.isArmor(var2) || var6.isWearingArmor() || !var6.isTamed());
 
-            var6.setSlot(401, var2.split(1));
+            var6.getSlot(401).set(var2.split(1));
             this.setSuccess(true);
             return var2;
          }
       };
       DispenserBlock.registerBehavior(Items.LEATHER_HORSE_ARMOR, var8);
@@ -272,11 +276,11 @@
                if (!var5.hasNext()) {
                   return super.execute(var1, var2);
                }
 
                var6 = (AbstractChestedHorse)var5.next();
-            } while(!var6.isTamed() || !var6.setSlot(499, var2));
+            } while(!var6.isTamed() || !var6.getSlot(499).set(var2));
 
             var2.shrink(1);
             this.setSuccess(true);
             return var2;
          }
@@ -306,11 +310,12 @@
             ServerLevel var11 = var1.getLevel();
             Random var12 = var11.random;
             double var13 = var12.nextGaussian() * 0.05D + (double)var3.getStepX();
             double var15 = var12.nextGaussian() * 0.05D + (double)var3.getStepY();
             double var17 = var12.nextGaussian() * 0.05D + (double)var3.getStepZ();
-            var11.addFreshEntity((Entity)Util.make(new SmallFireball(var11, var5, var7, var9, var13, var15, var17), (var1x) -> {
+            SmallFireball var19 = new SmallFireball(var11, var5, var7, var9, var13, var15, var17);
+            var11.addFreshEntity((Entity)Util.make(var19, (var1x) -> {
                var1x.setItem(var2);
             }));
             var2.shrink(1);
             return var2;
          }
@@ -327,41 +332,44 @@
       DispenserBlock.registerBehavior(Items.ACACIA_BOAT, new BoatDispenseItemBehavior(Boat.Type.ACACIA));
       DefaultDispenseItemBehavior var9 = new DefaultDispenseItemBehavior() {
          private final DefaultDispenseItemBehavior defaultDispenseItemBehavior = new DefaultDispenseItemBehavior();
 
          public ItemStack execute(BlockSource var1, ItemStack var2) {
-            BucketItem var3 = (BucketItem)var2.getItem();
+            DispensibleContainerItem var3 = (DispensibleContainerItem)var2.getItem();
             BlockPos var4 = var1.getPos().relative((Direction)var1.getBlockState().getValue(DispenserBlock.FACING));
             ServerLevel var5 = var1.getLevel();
-            if (var3.emptyBucket((Player)null, var5, var4, (BlockHitResult)null)) {
-               var3.checkExtraContent(var5, var2, var4);
+            if (var3.emptyContents((Player)null, var5, var4, (BlockHitResult)null)) {
+               var3.checkExtraContent((Player)null, var5, var2, var4);
                return new ItemStack(Items.BUCKET);
             } else {
                return this.defaultDispenseItemBehavior.dispense(var1, var2);
             }
          }
       };
       DispenserBlock.registerBehavior(Items.LAVA_BUCKET, var9);
       DispenserBlock.registerBehavior(Items.WATER_BUCKET, var9);
+      DispenserBlock.registerBehavior(Items.POWDER_SNOW_BUCKET, var9);
       DispenserBlock.registerBehavior(Items.SALMON_BUCKET, var9);
       DispenserBlock.registerBehavior(Items.COD_BUCKET, var9);
       DispenserBlock.registerBehavior(Items.PUFFERFISH_BUCKET, var9);
       DispenserBlock.registerBehavior(Items.TROPICAL_FISH_BUCKET, var9);
+      DispenserBlock.registerBehavior(Items.AXOLOTL_BUCKET, var9);
       DispenserBlock.registerBehavior(Items.BUCKET, new DefaultDispenseItemBehavior() {
          private final DefaultDispenseItemBehavior defaultDispenseItemBehavior = new DefaultDispenseItemBehavior();
 
          public ItemStack execute(BlockSource var1, ItemStack var2) {
             ServerLevel var3 = var1.getLevel();
             BlockPos var4 = var1.getPos().relative((Direction)var1.getBlockState().getValue(DispenserBlock.FACING));
             BlockState var5 = var3.getBlockState(var4);
             Block var6 = var5.getBlock();
             if (var6 instanceof BucketPickup) {
-               Fluid var8 = ((BucketPickup)var6).takeLiquid(var3, var4, var5);
-               if (!(var8 instanceof FlowingFluid)) {
+               ItemStack var8 = ((BucketPickup)var6).pickupBlock(var3, var4, var5);
+               if (var8.isEmpty()) {
                   return super.execute(var1, var2);
                } else {
-                  Item var7 = var8.getBucket();
+                  var3.gameEvent((Entity)null, GameEvent.FLUID_PICKUP, (BlockPos)var4);
+                  Item var7 = var8.getItem();
                   var2.shrink(1);
                   if (var2.isEmpty()) {
                      return new ItemStack(var7);
                   } else {
                      if (((DispenserBlockEntity)var1.getEntity()).addItem(new ItemStack(var7)) < 0) {
@@ -383,17 +391,21 @@
             Direction var4 = (Direction)var1.getBlockState().getValue(DispenserBlock.FACING);
             BlockPos var5 = var1.getPos().relative(var4);
             BlockState var6 = var3.getBlockState(var5);
             if (BaseFireBlock.canBePlacedAt(var3, var5, var4)) {
                var3.setBlockAndUpdate(var5, BaseFireBlock.getState(var3, var5));
-            } else if (CampfireBlock.canLight(var6)) {
-               var3.setBlockAndUpdate(var5, (BlockState)var6.setValue(BlockStateProperties.LIT, true));
-            } else if (var6.getBlock() instanceof TntBlock) {
-               TntBlock.explode(var3, var5);
-               var3.removeBlock(var5, false);
+               var3.gameEvent((Entity)null, GameEvent.BLOCK_PLACE, var5);
+            } else if (!CampfireBlock.canLight(var6) && !CandleBlock.canLight(var6) && !CandleCakeBlock.canLight(var6)) {
+               if (var6.getBlock() instanceof TntBlock) {
+                  TntBlock.explode(var3, var5);
+                  var3.removeBlock(var5, false);
+               } else {
+                  this.setSuccess(false);
+               }
             } else {
-               this.setSuccess(false);
+               var3.setBlockAndUpdate(var5, (BlockState)var6.setValue(BlockStateProperties.LIT, true));
+               var3.gameEvent((Entity)null, GameEvent.BLOCK_CHANGE, var5);
             }
 
             if (this.isSuccess() && var2.hurt(1, var3.random, (ServerPlayer)null)) {
                var2.setCount(0);
             }
@@ -420,10 +432,11 @@
             ServerLevel var3 = var1.getLevel();
             BlockPos var4 = var1.getPos().relative((Direction)var1.getBlockState().getValue(DispenserBlock.FACING));
             PrimedTnt var5 = new PrimedTnt(var3, (double)var4.getX() + 0.5D, (double)var4.getY(), (double)var4.getZ() + 0.5D, (LivingEntity)null);
             var3.addFreshEntity(var5);
             var3.playSound((Player)null, var5.getX(), var5.getY(), var5.getZ(), SoundEvents.TNT_PRIMED, SoundSource.BLOCKS, 1.0F, 1.0F);
+            var3.gameEvent((Entity)null, GameEvent.ENTITY_PLACE, var4);
             var2.shrink(1);
             return var2;
          }
       });
       OptionalDispenseItemBehavior var3 = new OptionalDispenseItemBehavior() {
@@ -442,10 +455,11 @@
             ServerLevel var3 = var1.getLevel();
             Direction var4 = (Direction)var1.getBlockState().getValue(DispenserBlock.FACING);
             BlockPos var5 = var1.getPos().relative(var4);
             if (var3.isEmptyBlock(var5) && WitherSkullBlock.canSpawnMob(var3, var5, var2)) {
                var3.setBlock(var5, (BlockState)Blocks.WITHER_SKELETON_SKULL.defaultBlockState().setValue(SkullBlock.ROTATION, var4.getAxis() == Direction.Axis.Y ? 0 : var4.getOpposite().get2DDataValue() * 4), 3);
+               var3.gameEvent((Entity)null, GameEvent.BLOCK_PLACE, var5);
                BlockEntity var6 = var3.getBlockEntity(var5);
                if (var6 instanceof SkullBlockEntity) {
                   WitherSkullBlock.checkSpawn(var3, var5, (SkullBlockEntity)var6);
                }
 
@@ -464,10 +478,11 @@
             BlockPos var4 = var1.getPos().relative((Direction)var1.getBlockState().getValue(DispenserBlock.FACING));
             CarvedPumpkinBlock var5 = (CarvedPumpkinBlock)Blocks.CARVED_PUMPKIN;
             if (var3.isEmptyBlock(var4) && var5.canSpawnGolem(var3, var4)) {
                if (!var3.isClientSide) {
                   var3.setBlock(var4, var5.defaultBlockState(), 3);
+                  var3.gameEvent((Entity)null, GameEvent.BLOCK_PLACE, var4);
                }
 
                var2.shrink(1);
                this.setSuccess(true);
             } else {
@@ -490,10 +505,11 @@
          private final DefaultDispenseItemBehavior defaultDispenseItemBehavior = new DefaultDispenseItemBehavior();
 
          private ItemStack takeLiquid(BlockSource var1, ItemStack var2, ItemStack var3) {
             var2.shrink(1);
             if (var2.isEmpty()) {
+               var1.getLevel().gameEvent((Entity)null, GameEvent.FLUID_PICKUP, var1.getPos());
                return var3.copy();
             } else {
                if (((DispenserBlockEntity)var1.getEntity()).addItem(var3.copy()) < 0) {
                   this.defaultDispenseItemBehavior.dispense(var1, var3.copy());
                }
@@ -541,10 +557,27 @@
                return super.execute(var1, var2);
             }
          }
       });
       DispenserBlock.registerBehavior(Items.SHEARS.asItem(), new ShearsDispenseItemBehavior());
+      DispenserBlock.registerBehavior(Items.HONEYCOMB, new OptionalDispenseItemBehavior() {
+         public ItemStack execute(BlockSource var1, ItemStack var2) {
+            BlockPos var3 = var1.getPos().relative((Direction)var1.getBlockState().getValue(DispenserBlock.FACING));
+            ServerLevel var4 = var1.getLevel();
+            BlockState var5 = var4.getBlockState(var3);
+            Optional var6 = HoneycombItem.getWaxed(var5);
+            if (var6.isPresent()) {
+               var4.setBlockAndUpdate(var3, (BlockState)var6.get());
+               var4.levelEvent(3003, var3, 0);
+               var2.shrink(1);
+               this.setSuccess(true);
+               return var2;
+            } else {
+               return super.execute(var1, var2);
+            }
+         }
+      });
    }
 
    static void setEntityPokingOutOfBlock(BlockSource var0, Entity var1, Direction var2) {
       var1.setPos(var0.x() + (double)var2.getStepX() * (0.5000099999997474D - (double)var1.getBbWidth() / 2.0D), var0.y() + (double)var2.getStepY() * (0.5000099999997474D - (double)var1.getBbHeight() / 2.0D) - (double)var1.getBbHeight() / 2.0D, var0.z() + (double)var2.getStepZ() * (0.5000099999997474D - (double)var1.getBbWidth() / 2.0D));
    }
