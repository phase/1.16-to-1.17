--- net/minecraft/core/cauldron/CauldronInteraction.java
+++ net/minecraft/core/cauldron/CauldronInteraction.java
@@ -1,0 +1,234 @@
+package net.minecraft.core.cauldron;
+
+import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;
+import java.util.Map;
+import java.util.function.Predicate;
+import net.minecraft.Util;
+import net.minecraft.core.BlockPos;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.sounds.SoundEvents;
+import net.minecraft.sounds.SoundSource;
+import net.minecraft.stats.Stats;
+import net.minecraft.world.InteractionHand;
+import net.minecraft.world.InteractionResult;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.item.DyeableLeatherItem;
+import net.minecraft.world.item.Item;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.ItemUtils;
+import net.minecraft.world.item.Items;
+import net.minecraft.world.item.alchemy.PotionUtils;
+import net.minecraft.world.item.alchemy.Potions;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.block.ShulkerBoxBlock;
+import net.minecraft.world.level.block.WaterCauldronBlock;
+import net.minecraft.world.level.block.entity.BannerBlockEntity;
+import net.minecraft.world.level.block.state.BlockState;
+
+public interface CauldronInteraction {
+   Map<Item, CauldronInteraction> EMPTY = newInteractionMap();
+   Map<Item, CauldronInteraction> WATER = newInteractionMap();
+   Map<Item, CauldronInteraction> LAVA = newInteractionMap();
+   CauldronInteraction FILL_WATER = (var0, var1, var2, var3, var4, var5) -> {
+      return emptyBucket(var1, var2, var3, var4, var5, (BlockState)Blocks.WATER_CAULDRON.defaultBlockState().setValue(WaterCauldronBlock.LEVEL, 3));
+   };
+   CauldronInteraction FILL_LAVA = (var0, var1, var2, var3, var4, var5) -> {
+      return emptyBucket(var1, var2, var3, var4, var5, Blocks.LAVA_CAULDRON.defaultBlockState());
+   };
+   CauldronInteraction SHULKER_BOX = (var0, var1, var2, var3, var4, var5) -> {
+      Block var6 = Block.byItem(var5.getItem());
+      if (!(var6 instanceof ShulkerBoxBlock)) {
+         return InteractionResult.PASS;
+      } else {
+         if (!var1.isClientSide) {
+            ItemStack var7 = new ItemStack(Blocks.SHULKER_BOX);
+            if (var5.hasTag()) {
+               var7.setTag(var5.getTag().copy());
+            }
+
+            var3.setItemInHand(var4, var7);
+            var3.awardStat(Stats.CLEAN_SHULKER_BOX);
+            WaterCauldronBlock.lowerWaterLevel(var0, var1, var2);
+         }
+
+         return InteractionResult.sidedSuccess(var1.isClientSide);
+      }
+   };
+   CauldronInteraction BANNER = (var0, var1, var2, var3, var4, var5) -> {
+      if (BannerBlockEntity.getPatternCount(var5) <= 0) {
+         return InteractionResult.PASS;
+      } else {
+         if (!var1.isClientSide) {
+            ItemStack var6 = var5.copy();
+            var6.setCount(1);
+            BannerBlockEntity.removeLastPattern(var6);
+            if (!var3.getAbilities().instabuild) {
+               var5.shrink(1);
+            }
+
+            if (var5.isEmpty()) {
+               var3.setItemInHand(var4, var6);
+            } else if (var3.getInventory().add(var6)) {
+               ((ServerPlayer)var3).refreshContainer(var3.inventoryMenu);
+            } else {
+               var3.drop(var6, false);
+            }
+
+            var3.awardStat(Stats.CLEAN_BANNER);
+            WaterCauldronBlock.lowerWaterLevel(var0, var1, var2);
+         }
+
+         return InteractionResult.sidedSuccess(var1.isClientSide);
+      }
+   };
+   CauldronInteraction DYED_ITEM = (var0, var1, var2, var3, var4, var5) -> {
+      Item var6 = var5.getItem();
+      if (!(var6 instanceof DyeableLeatherItem)) {
+         return InteractionResult.PASS;
+      } else {
+         DyeableLeatherItem var7 = (DyeableLeatherItem)var6;
+         if (!var7.hasCustomColor(var5)) {
+            return InteractionResult.PASS;
+         } else {
+            if (!var1.isClientSide) {
+               var7.clearColor(var5);
+               var3.awardStat(Stats.CLEAN_ARMOR);
+               WaterCauldronBlock.lowerWaterLevel(var0, var1, var2);
+            }
+
+            return InteractionResult.sidedSuccess(var1.isClientSide);
+         }
+      }
+   };
+
+   static Object2ObjectOpenHashMap<Item, CauldronInteraction> newInteractionMap() {
+      return (Object2ObjectOpenHashMap)Util.make(new Object2ObjectOpenHashMap(), (var0) -> {
+         var0.defaultReturnValue((var0x, var1, var2, var3, var4, var5) -> {
+            return InteractionResult.PASS;
+         });
+      });
+   }
+
+   InteractionResult interact(BlockState var1, Level var2, BlockPos var3, Player var4, InteractionHand var5, ItemStack var6);
+
+   static void bootStrap() {
+      EMPTY.put(Items.WATER_BUCKET, FILL_WATER);
+      EMPTY.put(Items.LAVA_BUCKET, FILL_LAVA);
+      EMPTY.put(Items.POTION, (var0, var1, var2, var3, var4, var5) -> {
+         if (PotionUtils.getPotion(var5) != Potions.WATER) {
+            return InteractionResult.PASS;
+         } else {
+            if (!var1.isClientSide) {
+               var3.setItemInHand(var4, ItemUtils.createFilledResult(var5, var3, new ItemStack(Items.GLASS_BOTTLE)));
+               var3.awardStat(Stats.USE_CAULDRON);
+               var1.setBlockAndUpdate(var2, Blocks.WATER_CAULDRON.defaultBlockState());
+               var1.playSound((Player)null, (BlockPos)var2, SoundEvents.BOTTLE_EMPTY, SoundSource.BLOCKS, 1.0F, 1.0F);
+            }
+
+            return InteractionResult.sidedSuccess(var1.isClientSide);
+         }
+      });
+      WATER.put(Items.LAVA_BUCKET, FILL_LAVA);
+      WATER.put(Items.WATER_BUCKET, FILL_WATER);
+      WATER.put(Items.BUCKET, (var0, var1, var2, var3, var4, var5) -> {
+         return fillBucket(var0, var1, var2, var3, var4, var5, new ItemStack(Items.WATER_BUCKET), (var0x) -> {
+            return (Integer)var0x.getValue(WaterCauldronBlock.LEVEL) == 3;
+         });
+      });
+      WATER.put(Items.GLASS_BOTTLE, (var0, var1, var2, var3, var4, var5) -> {
+         if (!var1.isClientSide) {
+            var3.setItemInHand(var4, ItemUtils.createFilledResult(var5, var3, PotionUtils.setPotion(new ItemStack(Items.POTION), Potions.WATER)));
+            var3.awardStat(Stats.USE_CAULDRON);
+            WaterCauldronBlock.lowerWaterLevel(var0, var1, var2);
+            var1.playSound((Player)null, (BlockPos)var2, SoundEvents.BOTTLE_FILL, SoundSource.BLOCKS, 1.0F, 1.0F);
+         }
+
+         return InteractionResult.sidedSuccess(var1.isClientSide);
+      });
+      WATER.put(Items.POTION, (var0, var1, var2, var3, var4, var5) -> {
+         if ((Integer)var0.getValue(WaterCauldronBlock.LEVEL) != 3 && PotionUtils.getPotion(var5) == Potions.WATER) {
+            if (!var1.isClientSide) {
+               var3.setItemInHand(var4, ItemUtils.createFilledResult(var5, var3, new ItemStack(Items.GLASS_BOTTLE)));
+               var3.awardStat(Stats.USE_CAULDRON);
+               var1.setBlockAndUpdate(var2, (BlockState)var0.cycle(WaterCauldronBlock.LEVEL));
+               var1.playSound((Player)null, (BlockPos)var2, SoundEvents.BOTTLE_EMPTY, SoundSource.BLOCKS, 1.0F, 1.0F);
+            }
+
+            return InteractionResult.sidedSuccess(var1.isClientSide);
+         } else {
+            return InteractionResult.PASS;
+         }
+      });
+      WATER.put(Items.LEATHER_BOOTS, DYED_ITEM);
+      WATER.put(Items.LEATHER_LEGGINGS, DYED_ITEM);
+      WATER.put(Items.LEATHER_CHESTPLATE, DYED_ITEM);
+      WATER.put(Items.LEATHER_HELMET, DYED_ITEM);
+      WATER.put(Items.LEATHER_HORSE_ARMOR, DYED_ITEM);
+      WATER.put(Items.WHITE_BANNER, BANNER);
+      WATER.put(Items.GRAY_BANNER, BANNER);
+      WATER.put(Items.BLACK_BANNER, BANNER);
+      WATER.put(Items.BLUE_BANNER, BANNER);
+      WATER.put(Items.BROWN_BANNER, BANNER);
+      WATER.put(Items.CYAN_BANNER, BANNER);
+      WATER.put(Items.GREEN_BANNER, BANNER);
+      WATER.put(Items.LIGHT_BLUE_BANNER, BANNER);
+      WATER.put(Items.LIGHT_GRAY_BANNER, BANNER);
+      WATER.put(Items.LIME_BANNER, BANNER);
+      WATER.put(Items.MAGENTA_BANNER, BANNER);
+      WATER.put(Items.ORANGE_BANNER, BANNER);
+      WATER.put(Items.PINK_BANNER, BANNER);
+      WATER.put(Items.PURPLE_BANNER, BANNER);
+      WATER.put(Items.RED_BANNER, BANNER);
+      WATER.put(Items.YELLOW_BANNER, BANNER);
+      WATER.put(Items.WHITE_SHULKER_BOX, SHULKER_BOX);
+      WATER.put(Items.GRAY_SHULKER_BOX, SHULKER_BOX);
+      WATER.put(Items.BLACK_SHULKER_BOX, SHULKER_BOX);
+      WATER.put(Items.BLUE_SHULKER_BOX, SHULKER_BOX);
+      WATER.put(Items.BROWN_SHULKER_BOX, SHULKER_BOX);
+      WATER.put(Items.CYAN_SHULKER_BOX, SHULKER_BOX);
+      WATER.put(Items.GREEN_SHULKER_BOX, SHULKER_BOX);
+      WATER.put(Items.LIGHT_BLUE_SHULKER_BOX, SHULKER_BOX);
+      WATER.put(Items.LIGHT_GRAY_SHULKER_BOX, SHULKER_BOX);
+      WATER.put(Items.LIME_SHULKER_BOX, SHULKER_BOX);
+      WATER.put(Items.MAGENTA_SHULKER_BOX, SHULKER_BOX);
+      WATER.put(Items.ORANGE_SHULKER_BOX, SHULKER_BOX);
+      WATER.put(Items.PINK_SHULKER_BOX, SHULKER_BOX);
+      WATER.put(Items.PURPLE_SHULKER_BOX, SHULKER_BOX);
+      WATER.put(Items.RED_SHULKER_BOX, SHULKER_BOX);
+      WATER.put(Items.YELLOW_SHULKER_BOX, SHULKER_BOX);
+      LAVA.put(Items.BUCKET, (var0, var1, var2, var3, var4, var5) -> {
+         return fillBucket(var0, var1, var2, var3, var4, var5, new ItemStack(Items.LAVA_BUCKET), (var0x) -> {
+            return true;
+         });
+      });
+      LAVA.put(Items.WATER_BUCKET, FILL_WATER);
+   }
+
+   static InteractionResult fillBucket(BlockState var0, Level var1, BlockPos var2, Player var3, InteractionHand var4, ItemStack var5, ItemStack var6, Predicate<BlockState> var7) {
+      if (!var7.test(var0)) {
+         return InteractionResult.PASS;
+      } else {
+         if (!var1.isClientSide) {
+            var3.setItemInHand(var4, ItemUtils.createFilledResult(var5, var3, var6));
+            var3.awardStat(Stats.USE_CAULDRON);
+            var1.setBlockAndUpdate(var2, Blocks.CAULDRON.defaultBlockState());
+            var1.playSound((Player)null, (BlockPos)var2, SoundEvents.BUCKET_FILL, SoundSource.BLOCKS, 1.0F, 1.0F);
+         }
+
+         return InteractionResult.sidedSuccess(var1.isClientSide);
+      }
+   }
+
+   static InteractionResult emptyBucket(Level var0, BlockPos var1, Player var2, InteractionHand var3, ItemStack var4, BlockState var5) {
+      if (!var0.isClientSide) {
+         var2.setItemInHand(var3, ItemUtils.createFilledResult(var4, var2, new ItemStack(Items.BUCKET)));
+         var2.awardStat(Stats.FILL_CAULDRON);
+         var0.setBlockAndUpdate(var1, var5);
+         var0.playSound((Player)null, (BlockPos)var1, SoundEvents.BUCKET_EMPTY, SoundSource.BLOCKS, 1.0F, 1.0F);
+      }
+
+      return InteractionResult.sidedSuccess(var0.isClientSide);
+   }
+}
