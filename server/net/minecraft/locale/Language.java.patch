--- net/minecraft/locale/Language.java
+++ net/minecraft/locale/Language.java
@@ -1,7 +1,8 @@
 package net.minecraft.locale;
 
+import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.google.gson.Gson;
 import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonParseException;
@@ -9,66 +10,86 @@
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.io.Reader;
 import java.nio.charset.StandardCharsets;
 import java.util.Iterator;
+import java.util.List;
+import java.util.Optional;
 import java.util.Map.Entry;
 import java.util.function.BiConsumer;
 import java.util.regex.Pattern;
+import net.minecraft.network.chat.FormattedText;
+import net.minecraft.network.chat.Style;
+import net.minecraft.util.FormattedCharSequence;
 import net.minecraft.util.GsonHelper;
+import net.minecraft.util.StringDecomposer;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public abstract class Language {
    private static final Logger LOGGER = LogManager.getLogger();
    private static final Gson GSON = new Gson();
    private static final Pattern UNSUPPORTED_FORMAT_PATTERN = Pattern.compile("%(\\d+\\$)?[\\d.]*[df]");
+   public static final String DEFAULT = "en_us";
    private static volatile Language instance = loadDefault();
 
    public Language() {
    }
 
    private static Language loadDefault() {
       ImmutableMap.Builder var0 = ImmutableMap.builder();
       BiConsumer var1 = var0::put;
+      String var2 = "/assets/minecraft/lang/en_us.json";
 
       try {
-         InputStream var2 = Language.class.getResourceAsStream("/assets/minecraft/lang/en_us.json");
-         Throwable var3 = null;
+         InputStream var3 = Language.class.getResourceAsStream("/assets/minecraft/lang/en_us.json");
+         Throwable var4 = null;
 
          try {
-            loadFromJson(var2, var1);
-         } catch (Throwable var13) {
-            var3 = var13;
-            throw var13;
+            loadFromJson(var3, var1);
+         } catch (Throwable var14) {
+            var4 = var14;
+            throw var14;
          } finally {
-            if (var2 != null) {
-               if (var3 != null) {
+            if (var3 != null) {
+               if (var4 != null) {
                   try {
-                     var2.close();
-                  } catch (Throwable var12) {
-                     var3.addSuppressed(var12);
+                     var3.close();
+                  } catch (Throwable var13) {
+                     var4.addSuppressed(var13);
                   }
                } else {
-                  var2.close();
+                  var3.close();
                }
             }
 
          }
-      } catch (JsonParseException | IOException var15) {
-         LOGGER.error((String)"Couldn't read strings from /assets/minecraft/lang/en_us.json", (Throwable)var15);
+      } catch (JsonParseException | IOException var16) {
+         LOGGER.error((String)"Couldn't read strings from {}", (Object)"/assets/minecraft/lang/en_us.json", (Object)var16);
       }
 
-      final ImmutableMap var16 = var0.build();
+      final ImmutableMap var17 = var0.build();
       return new Language() {
          public String getOrDefault(String var1) {
-            return (String)var16.getOrDefault(var1, var1);
+            return (String)var17.getOrDefault(var1, var1);
          }
 
          public boolean has(String var1) {
-            return var16.containsKey(var1);
+            return var17.containsKey(var1);
          }
+
+         public boolean isDefaultRightToLeft() {
+            return false;
+         }
+
+         public FormattedCharSequence getVisualOrder(FormattedText var1) {
+            return (var1x) -> {
+               return var1.visit((var1xx, var2) -> {
+                  return StringDecomposer.iterateFormatted(var2, var1xx, var1x) ? Optional.empty() : FormattedText.STOP_ITERATION;
+               }, Style.EMPTY).isPresent();
+            };
+         }
       };
    }
 
    public static void loadFromJson(InputStream var0, BiConsumer<String, String> var1) {
       JsonObject var2 = (JsonObject)GSON.fromJson((Reader)(new InputStreamReader(var0, StandardCharsets.UTF_8)), (Class)JsonObject.class);
@@ -84,9 +105,21 @@
 
    public static Language getInstance() {
       return instance;
    }
 
+   public static void inject(Language var0) {
+      instance = var0;
+   }
+
    public abstract String getOrDefault(String var1);
 
    public abstract boolean has(String var1);
+
+   public abstract boolean isDefaultRightToLeft();
+
+   public abstract FormattedCharSequence getVisualOrder(FormattedText var1);
+
+   public List<FormattedCharSequence> getVisualOrder(List<FormattedText> var1) {
+      return (List)var1.stream().map(this::getVisualOrder).collect(ImmutableList.toImmutableList());
+   }
 }
