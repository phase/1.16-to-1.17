--- net/minecraft/world/inventory/CartographyTableMenu.java
+++ net/minecraft/world/inventory/CartographyTableMenu.java
@@ -5,20 +5,26 @@
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.world.Container;
 import net.minecraft.world.SimpleContainer;
 import net.minecraft.world.entity.player.Inventory;
 import net.minecraft.world.entity.player.Player;
-import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.MapItem;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.saveddata.maps.MapItemSavedData;
 
 public class CartographyTableMenu extends AbstractContainerMenu {
+   public static final int MAP_SLOT = 0;
+   public static final int ADDITIONAL_SLOT = 1;
+   public static final int RESULT_SLOT = 2;
+   private static final int INV_SLOT_START = 3;
+   private static final int INV_SLOT_END = 30;
+   private static final int USE_ROW_SLOT_START = 30;
+   private static final int USE_ROW_SLOT_END = 39;
    private final ContainerLevelAccess access;
-   private long lastSoundTime;
+   long lastSoundTime;
    public final Container container;
    private final ResultContainer resultContainer;
 
    public CartographyTableMenu(int var1, Inventory var2) {
       this(var1, var2, ContainerLevelAccess.NULL);
@@ -39,25 +45,24 @@
          }
       };
       this.access = var3;
       this.addSlot(new Slot(this.container, 0, 15, 15) {
          public boolean mayPlace(ItemStack var1) {
-            return var1.getItem() == Items.FILLED_MAP;
+            return var1.is(Items.FILLED_MAP);
          }
       });
       this.addSlot(new Slot(this.container, 1, 15, 52) {
          public boolean mayPlace(ItemStack var1) {
-            Item var2 = var1.getItem();
-            return var2 == Items.PAPER || var2 == Items.MAP || var2 == Items.GLASS_PANE;
+            return var1.is(Items.PAPER) || var1.is(Items.MAP) || var1.is(Items.GLASS_PANE);
          }
       });
       this.addSlot(new Slot(this.resultContainer, 2, 145, 39) {
          public boolean mayPlace(ItemStack var1) {
             return false;
          }
 
-         public ItemStack onTake(Player var1, ItemStack var2) {
+         public void onTake(Player var1, ItemStack var2) {
             ((Slot)CartographyTableMenu.this.slots.get(0)).remove(1);
             ((Slot)CartographyTableMenu.this.slots.get(1)).remove(1);
             var2.getItem().onCraftedBy(var2, var1.level, var1);
             var3.execute((var1x, var2x) -> {
                long var3x = var1x.getGameTime();
@@ -65,11 +70,11 @@
                   var1x.playSound((Player)null, (BlockPos)var2x, SoundEvents.UI_CARTOGRAPHY_TABLE_TAKE_RESULT, SoundSource.BLOCKS, 1.0F, 1.0F);
                   CartographyTableMenu.this.lastSoundTime = var3x;
                }
 
             });
-            return super.onTake(var1, var2);
+            super.onTake(var1, var2);
          }
       });
 
       int var4;
       for(var4 = 0; var4 < 3; ++var4) {
@@ -102,38 +107,37 @@
 
    }
 
    private void setupResultSlot(ItemStack var1, ItemStack var2, ItemStack var3) {
       this.access.execute((var4, var5) -> {
-         Item var6 = var2.getItem();
-         MapItemSavedData var7 = MapItem.getSavedData(var1, var4);
-         if (var7 != null) {
-            ItemStack var8;
-            if (var6 == Items.PAPER && !var7.locked && var7.scale < 4) {
-               var8 = var1.copy();
-               var8.setCount(1);
-               var8.getOrCreateTag().putInt("map_scale_direction", 1);
+         MapItemSavedData var6 = MapItem.getSavedData(var1, var4);
+         if (var6 != null) {
+            ItemStack var7;
+            if (var2.is(Items.PAPER) && !var6.locked && var6.scale < 4) {
+               var7 = var1.copy();
+               var7.setCount(1);
+               var7.getOrCreateTag().putInt("map_scale_direction", 1);
                this.broadcastChanges();
-            } else if (var6 == Items.GLASS_PANE && !var7.locked) {
-               var8 = var1.copy();
-               var8.setCount(1);
-               var8.getOrCreateTag().putBoolean("map_to_lock", true);
+            } else if (var2.is(Items.GLASS_PANE) && !var6.locked) {
+               var7 = var1.copy();
+               var7.setCount(1);
+               var7.getOrCreateTag().putBoolean("map_to_lock", true);
                this.broadcastChanges();
             } else {
-               if (var6 != Items.MAP) {
+               if (!var2.is(Items.MAP)) {
                   this.resultContainer.removeItemNoUpdate(2);
                   this.broadcastChanges();
                   return;
                }
 
-               var8 = var1.copy();
-               var8.setCount(2);
+               var7 = var1.copy();
+               var7.setCount(2);
                this.broadcastChanges();
             }
 
-            if (!ItemStack.matches(var8, var3)) {
-               this.resultContainer.setItem(2, var8);
+            if (!ItemStack.matches(var7, var3)) {
+               this.resultContainer.setItem(2, var7);
                this.broadcastChanges();
             }
 
          }
       });
@@ -146,25 +150,24 @@
    public ItemStack quickMoveStack(Player var1, int var2) {
       ItemStack var3 = ItemStack.EMPTY;
       Slot var4 = (Slot)this.slots.get(var2);
       if (var4 != null && var4.hasItem()) {
          ItemStack var5 = var4.getItem();
-         Item var7 = var5.getItem();
          var3 = var5.copy();
          if (var2 == 2) {
-            var7.onCraftedBy(var5, var1.level, var1);
+            var5.getItem().onCraftedBy(var5, var1.level, var1);
             if (!this.moveItemStackTo(var5, 3, 39, true)) {
                return ItemStack.EMPTY;
             }
 
             var4.onQuickCraft(var5, var3);
          } else if (var2 != 1 && var2 != 0) {
-            if (var7 == Items.FILLED_MAP) {
+            if (var5.is(Items.FILLED_MAP)) {
                if (!this.moveItemStackTo(var5, 0, 1, false)) {
                   return ItemStack.EMPTY;
                }
-            } else if (var7 != Items.PAPER && var7 != Items.MAP && var7 != Items.GLASS_PANE) {
+            } else if (!var5.is(Items.PAPER) && !var5.is(Items.MAP) && !var5.is(Items.GLASS_PANE)) {
                if (var2 >= 3 && var2 < 30) {
                   if (!this.moveItemStackTo(var5, 30, 39, false)) {
                      return ItemStack.EMPTY;
                   }
                } else if (var2 >= 30 && var2 < 39 && !this.moveItemStackTo(var5, 3, 30, false)) {
@@ -195,9 +198,9 @@
 
    public void removed(Player var1) {
       super.removed(var1);
       this.resultContainer.removeItemNoUpdate(2);
       this.access.execute((var2, var3) -> {
-         this.clearContainer(var1, var1.level, this.container);
+         this.clearContainer(var1, this.container);
       });
    }
 }
