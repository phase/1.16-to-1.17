--- net/minecraft/world/inventory/MerchantMenu.java
+++ net/minecraft/world/inventory/MerchantMenu.java
@@ -11,12 +11,26 @@
 import net.minecraft.world.item.trading.Merchant;
 import net.minecraft.world.item.trading.MerchantOffer;
 import net.minecraft.world.item.trading.MerchantOffers;
 
 public class MerchantMenu extends AbstractContainerMenu {
+   protected static final int PAYMENT1_SLOT = 0;
+   protected static final int PAYMENT2_SLOT = 1;
+   protected static final int RESULT_SLOT = 2;
+   private static final int INV_SLOT_START = 3;
+   private static final int INV_SLOT_END = 30;
+   private static final int USE_ROW_SLOT_START = 30;
+   private static final int USE_ROW_SLOT_END = 39;
+   private static final int SELLSLOT1_X = 136;
+   private static final int SELLSLOT2_X = 162;
+   private static final int BUYSLOT_X = 220;
+   private static final int ROW_Y = 37;
    private final Merchant trader;
    private final MerchantContainer tradeContainer;
+   private int merchantLevel;
+   private boolean showProgressBar;
+   private boolean canRestock;
 
    public MerchantMenu(int var1, Inventory var2) {
       this(var1, var2, new ClientSideMerchant(var2.player));
    }
 
@@ -39,10 +53,14 @@
          this.addSlot(new Slot(var2, var4, 108 + var4 * 18, 142));
       }
 
    }
 
+   public void setShowProgressBar(boolean var1) {
+      this.showProgressBar = var1;
+   }
+
    public void slotsChanged(Container var1) {
       this.tradeContainer.updateSellItem();
       super.slotsChanged(var1);
    }
 
@@ -52,10 +70,38 @@
 
    public boolean stillValid(Player var1) {
       return this.trader.getTradingPlayer() == var1;
    }
 
+   public int getTraderXp() {
+      return this.trader.getVillagerXp();
+   }
+
+   public int getFutureTraderXp() {
+      return this.tradeContainer.getFutureXp();
+   }
+
+   public void setXp(int var1) {
+      this.trader.overrideXp(var1);
+   }
+
+   public int getTraderLevel() {
+      return this.merchantLevel;
+   }
+
+   public void setMerchantLevel(int var1) {
+      this.merchantLevel = var1;
+   }
+
+   public void setCanRestock(boolean var1) {
+      this.canRestock = var1;
+   }
+
+   public boolean canRestock() {
+      return this.canRestock;
+   }
+
    public boolean canTakeItemForPickAll(ItemStack var1, Slot var2) {
       return false;
    }
 
    public ItemStack quickMoveStack(Player var1, int var2) {
@@ -109,23 +155,23 @@
 
    public void removed(Player var1) {
       super.removed(var1);
       this.trader.setTradingPlayer((Player)null);
       if (!this.trader.getLevel().isClientSide) {
-         if (var1.isAlive() && (!(var1 instanceof ServerPlayer) || !((ServerPlayer)var1).hasDisconnected())) {
-            var1.inventory.placeItemBackInInventory(var1.level, this.tradeContainer.removeItemNoUpdate(0));
-            var1.inventory.placeItemBackInInventory(var1.level, this.tradeContainer.removeItemNoUpdate(1));
-         } else {
+         if (!var1.isAlive() || var1 instanceof ServerPlayer && ((ServerPlayer)var1).hasDisconnected()) {
             ItemStack var2 = this.tradeContainer.removeItemNoUpdate(0);
             if (!var2.isEmpty()) {
                var1.drop(var2, false);
             }
 
             var2 = this.tradeContainer.removeItemNoUpdate(1);
             if (!var2.isEmpty()) {
                var1.drop(var2, false);
             }
+         } else if (var1 instanceof ServerPlayer) {
+            var1.getInventory().placeItemBackInInventory(this.tradeContainer.removeItemNoUpdate(0));
+            var1.getInventory().placeItemBackInInventory(this.tradeContainer.removeItemNoUpdate(1));
          }
 
       }
    }
 
@@ -161,11 +207,11 @@
 
    private void moveFromInventoryToPaymentSlot(int var1, ItemStack var2) {
       if (!var2.isEmpty()) {
          for(int var3 = 3; var3 < 39; ++var3) {
             ItemStack var4 = ((Slot)this.slots.get(var3)).getItem();
-            if (!var4.isEmpty() && this.isSameItem(var2, var4)) {
+            if (!var4.isEmpty() && ItemStack.isSameItemSameTags(var2, var4)) {
                ItemStack var5 = this.tradeContainer.getItem(var1);
                int var6 = var5.isEmpty() ? 0 : var5.getCount();
                int var7 = Math.min(var2.getMaxStackSize() - var6, var4.getCount());
                ItemStack var8 = var4.copy();
                int var9 = var6 + var7;
@@ -179,13 +225,17 @@
          }
       }
 
    }
 
-   private boolean isSameItem(ItemStack var1, ItemStack var2) {
-      return var1.getItem() == var2.getItem() && ItemStack.tagMatches(var1, var2);
+   public void setOffers(MerchantOffers var1) {
+      this.trader.overrideOffers(var1);
    }
 
    public MerchantOffers getOffers() {
       return this.trader.getOffers();
    }
+
+   public boolean showProgressBar() {
+      return this.showProgressBar;
+   }
 }
