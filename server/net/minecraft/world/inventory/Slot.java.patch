--- net/minecraft/world/inventory/Slot.java
+++ net/minecraft/world/inventory/Slot.java
@@ -64,16 +64,63 @@
    public int getMaxStackSize() {
       return this.container.getMaxStackSize();
    }
 
    public int getMaxStackSize(ItemStack var1) {
-      return this.getMaxStackSize();
+      return Math.min(this.getMaxStackSize(), var1.getMaxStackSize());
    }
 
    public ItemStack remove(int var1) {
       return this.container.removeItem(this.slot, var1);
    }
 
    public boolean mayPickup(Player var1) {
       return true;
    }
+
+   public ItemStack safeTake(int var1, int var2, Player var3) {
+      if (!this.mayPickup(var3)) {
+         return ItemStack.EMPTY;
+      } else if (!this.allowModification(var3) && var2 < this.getItem().getCount()) {
+         return ItemStack.EMPTY;
+      } else {
+         if (!this.allowModification(var3)) {
+            var1 = this.getItem().getCount();
+         }
+
+         var1 = Math.min(var1, var2);
+         ItemStack var4 = this.remove(var1);
+         if (this.getItem().isEmpty()) {
+            this.set(ItemStack.EMPTY);
+         }
+
+         this.onTake(var3, var4);
+         return var4;
+      }
+   }
+
+   public ItemStack safeInsert(ItemStack var1) {
+      return this.safeInsert(var1, var1.getCount());
+   }
+
+   public ItemStack safeInsert(ItemStack var1, int var2) {
+      if (!var1.isEmpty() && this.mayPlace(var1)) {
+         ItemStack var3 = this.getItem();
+         int var4 = Math.min(Math.min(var2, var1.getCount()), this.getMaxStackSize(var1) - var3.getCount());
+         if (var3.isEmpty()) {
+            this.set(var1.split(var4));
+         } else if (ItemStack.isSameItemSameTags(var3, var1)) {
+            var1.shrink(var4);
+            var3.grow(var4);
+            this.set(var3);
+         }
+
+         return var1;
+      } else {
+         return var1;
+      }
+   }
+
+   public boolean allowModification(Player var1) {
+      return this.mayPickup(var1) && this.mayPlace(this.getItem());
+   }
 }
