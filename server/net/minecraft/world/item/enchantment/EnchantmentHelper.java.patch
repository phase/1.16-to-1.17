--- net/minecraft/world/item/enchantment/EnchantmentHelper.java
+++ net/minecraft/world/item/enchantment/EnchantmentHelper.java
@@ -6,21 +6,23 @@
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
+import java.util.Optional;
 import java.util.Random;
 import java.util.Map.Entry;
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
 import net.minecraft.Util;
 import net.minecraft.core.Registry;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.util.Mth;
-import net.minecraft.util.WeighedRandom;
+import net.minecraft.util.random.WeightedRandom;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EquipmentSlot;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.MobType;
@@ -31,10 +33,13 @@
 import net.minecraft.world.item.Items;
 import org.apache.commons.lang3.mutable.MutableFloat;
 import org.apache.commons.lang3.mutable.MutableInt;
 
 public class EnchantmentHelper {
+   public EnchantmentHelper() {
+   }
+
    public static int getItemEnchantmentLevel(Enchantment var0, ItemStack var1) {
       if (var1.isEmpty()) {
          return 0;
       } else {
          ResourceLocation var2 = Registry.ENCHANTMENT.getKey(var0);
@@ -42,30 +47,30 @@
 
          for(int var4 = 0; var4 < var3.size(); ++var4) {
             CompoundTag var5 = var3.getCompound(var4);
             ResourceLocation var6 = ResourceLocation.tryParse(var5.getString("id"));
             if (var6 != null && var6.equals(var2)) {
-               return Mth.clamp(var5.getInt("lvl"), 0, 255);
+               return Mth.clamp((int)var5.getInt("lvl"), (int)0, (int)255);
             }
          }
 
          return 0;
       }
    }
 
    public static Map<Enchantment, Integer> getEnchantments(ItemStack var0) {
-      ListTag var1 = var0.getItem() == Items.ENCHANTED_BOOK ? EnchantedBookItem.getEnchantments(var0) : var0.getEnchantmentTags();
+      ListTag var1 = var0.is(Items.ENCHANTED_BOOK) ? EnchantedBookItem.getEnchantments(var0) : var0.getEnchantmentTags();
       return deserializeEnchantments(var1);
    }
 
    public static Map<Enchantment, Integer> deserializeEnchantments(ListTag var0) {
       LinkedHashMap var1 = Maps.newLinkedHashMap();
 
       for(int var2 = 0; var2 < var0.size(); ++var2) {
          CompoundTag var3 = var0.getCompound(var2);
          Registry.ENCHANTMENT.getOptional(ResourceLocation.tryParse(var3.getString("id"))).ifPresent((var2x) -> {
-            Integer var10000 = (Integer)var1.put(var2x, var3.getInt("lvl"));
+            var1.put(var2x, var3.getInt("lvl"));
          });
       }
 
       return var1;
    }
@@ -81,19 +86,19 @@
             int var6 = (Integer)var4.getValue();
             CompoundTag var7 = new CompoundTag();
             var7.putString("id", String.valueOf(Registry.ENCHANTMENT.getKey(var5)));
             var7.putShort("lvl", (short)var6);
             var2.add(var7);
-            if (var1.getItem() == Items.ENCHANTED_BOOK) {
+            if (var1.is(Items.ENCHANTED_BOOK)) {
                EnchantedBookItem.addEnchantment(var1, new EnchantmentInstance(var5, var6));
             }
          }
       }
 
       if (var2.isEmpty()) {
          var1.removeTagKey("Enchantments");
-      } else if (var1.getItem() != Items.ENCHANTED_BOOK) {
+      } else if (!var1.is(Items.ENCHANTED_BOOK)) {
          var1.addTagElement("Enchantments", var2);
       }
 
    }
 
@@ -302,11 +307,11 @@
       }
    }
 
    public static ItemStack enchantItem(Random var0, ItemStack var1, int var2, boolean var3) {
       List var4 = selectEnchantment(var0, var1, var2, var3);
-      boolean var5 = var1.getItem() == Items.BOOK;
+      boolean var5 = var1.is(Items.BOOK);
       if (var5) {
          var1 = new ItemStack(Items.ENCHANTED_BOOK);
       }
 
       Iterator var6 = var4.iterator();
@@ -330,22 +335,29 @@
       if (var6 <= 0) {
          return var4;
       } else {
          var2 += 1 + var0.nextInt(var6 / 4 + 1) + var0.nextInt(var6 / 4 + 1);
          float var7 = (var0.nextFloat() + var0.nextFloat() - 1.0F) * 0.15F;
-         var2 = Mth.clamp(Math.round((float)var2 + (float)var2 * var7), 1, Integer.MAX_VALUE);
+         var2 = Mth.clamp((int)Math.round((float)var2 + (float)var2 * var7), (int)1, (int)Integer.MAX_VALUE);
          List var8 = getAvailableEnchantmentResults(var2, var1, var3);
          if (!var8.isEmpty()) {
-            var4.add(WeighedRandom.getRandomItem(var0, var8));
+            Optional var10000 = WeightedRandom.getRandomItem(var0, var8);
+            Objects.requireNonNull(var4);
+            var10000.ifPresent(var4::add);
 
             while(var0.nextInt(50) <= var2) {
-               filterCompatibleEnchantments(var8, (EnchantmentInstance)Util.lastOf(var4));
+               if (!var4.isEmpty()) {
+                  filterCompatibleEnchantments(var8, (EnchantmentInstance)Util.lastOf(var4));
+               }
+
                if (var8.isEmpty()) {
                   break;
                }
 
-               var4.add(WeighedRandom.getRandomItem(var0, var8));
+               var10000 = WeightedRandom.getRandomItem(var0, var8);
+               Objects.requireNonNull(var4);
+               var10000.ifPresent(var4::add);
                var2 /= 2;
             }
          }
 
          return var4;
@@ -379,11 +391,11 @@
    }
 
    public static List<EnchantmentInstance> getAvailableEnchantmentResults(int var0, ItemStack var1, boolean var2) {
       ArrayList var3 = Lists.newArrayList();
       Item var4 = var1.getItem();
-      boolean var5 = var1.getItem() == Items.BOOK;
+      boolean var5 = var1.is(Items.BOOK);
       Iterator var6 = Registry.ENCHANTMENT.iterator();
 
       while(true) {
          while(true) {
             Enchantment var7;
