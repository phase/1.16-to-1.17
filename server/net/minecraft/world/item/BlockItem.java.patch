--- net/minecraft/world/item/BlockItem.java
+++ net/minecraft/world/item/BlockItem.java
@@ -1,29 +1,34 @@
 package net.minecraft.world.item;
 
 import java.util.Iterator;
 import java.util.Map;
+import java.util.stream.Stream;
 import javax.annotation.Nullable;
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.NonNullList;
 import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.ListTag;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.world.InteractionResult;
+import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.context.BlockPlaceContext;
 import net.minecraft.world.item.context.UseOnContext;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.ShulkerBoxBlock;
 import net.minecraft.world.level.block.SoundType;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.StateDefinition;
 import net.minecraft.world.level.block.state.properties.Property;
+import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.phys.shapes.CollisionContext;
 
 public class BlockItem extends Item {
    @Deprecated
    private final Block block;
@@ -55,23 +60,23 @@
                BlockPos var4 = var2.getClickedPos();
                Level var5 = var2.getLevel();
                Player var6 = var2.getPlayer();
                ItemStack var7 = var2.getItemInHand();
                BlockState var8 = var5.getBlockState(var4);
-               Block var9 = var8.getBlock();
-               if (var9 == var3.getBlock()) {
+               if (var8.is(var3.getBlock())) {
                   var8 = this.updateBlockStateFromTag(var4, var5, var7, var8);
                   this.updateCustomBlockEntityTag(var4, var5, var6, var7, var8);
-                  var9.setPlacedBy(var5, var4, var8, var6, var7);
+                  var8.getBlock().setPlacedBy(var5, var4, var8, var6, var7);
                   if (var6 instanceof ServerPlayer) {
                      CriteriaTriggers.PLACED_BLOCK.trigger((ServerPlayer)var6, var4, var7);
                   }
                }
 
-               SoundType var10 = var8.getSoundType();
-               var5.playSound(var6, var4, this.getPlaceSound(var8), SoundSource.BLOCKS, (var10.getVolume() + 1.0F) / 2.0F, var10.getPitch() * 0.8F);
-               if (var6 == null || !var6.abilities.instabuild) {
+               SoundType var9 = var8.getSoundType();
+               var5.playSound(var6, var4, this.getPlaceSound(var8), SoundSource.BLOCKS, (var9.getVolume() + 1.0F) / 2.0F, var9.getPitch() * 0.8F);
+               var5.gameEvent(var6, GameEvent.BLOCK_PLACE, var4);
+               if (var6 == null || !var6.getAbilities().instabuild) {
                   var7.shrink(1);
                }
 
                return InteractionResult.sidedSuccess(var5.isClientSide);
             }
@@ -161,11 +166,11 @@
                var7.merge(var5);
                var7.putInt("x", var2.getX());
                var7.putInt("y", var2.getY());
                var7.putInt("z", var2.getZ());
                if (!var7.equals(var8)) {
-                  var6.load(var0.getBlockState(var2), var7);
+                  var6.load(var7);
                   var6.setChanged();
                   return true;
                }
             }
          }
@@ -190,6 +195,23 @@
    }
 
    public void registerBlocks(Map<Block, Item> var1, Item var2) {
       var1.put(this.getBlock(), var2);
    }
+
+   public boolean canFitInsideContainerItems() {
+      return !(this.block instanceof ShulkerBoxBlock);
+   }
+
+   public void onDestroyed(ItemEntity var1) {
+      if (this.block instanceof ShulkerBoxBlock) {
+         CompoundTag var2 = var1.getItem().getTag();
+         if (var2 != null) {
+            ListTag var3 = var2.getCompound("BlockEntityTag").getList("Items", 10);
+            Stream var10001 = var3.stream();
+            CompoundTag.class.getClass();
+            ItemUtils.onContainerDestroyed(var1, var10001.map(CompoundTag.class::cast).map(ItemStack::of));
+         }
+      }
+
+   }
 }
