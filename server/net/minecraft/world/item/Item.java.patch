--- net/minecraft/world/item/Item.java
+++ net/minecraft/world/item/Item.java
@@ -2,49 +2,52 @@
 
 import com.google.common.collect.ImmutableMultimap;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Multimap;
 import java.util.Map;
-import java.util.Random;
 import java.util.UUID;
 import javax.annotation.Nullable;
+import net.minecraft.SharedConstants;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.NonNullList;
 import net.minecraft.core.Registry;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
-import net.minecraft.tags.Tag;
 import net.minecraft.util.Mth;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.InteractionResultHolder;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EquipmentSlot;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.ai.attributes.Attribute;
 import net.minecraft.world.entity.ai.attributes.AttributeModifier;
+import net.minecraft.world.entity.player.Inventory;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.food.FoodProperties;
+import net.minecraft.world.inventory.ClickAction;
 import net.minecraft.world.item.context.UseOnContext;
 import net.minecraft.world.level.ClipContext;
 import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.Vec3;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
 
 public class Item implements ItemLike {
+   private static final Logger LOGGER = LogManager.getLogger();
    public static final Map<Block, Item> BY_BLOCK = Maps.newHashMap();
    protected static final UUID BASE_ATTACK_DAMAGE_UUID = UUID.fromString("CB3F55D3-645C-4F38-A497-9C13A33DB5CF");
    protected static final UUID BASE_ATTACK_SPEED_UUID = UUID.fromString("FA233E1C-4180-4865-B01B-BCCE9785ACA3");
-   protected static final Random random = new Random();
    protected final CreativeModeTab category;
    private final Rarity rarity;
    private final int maxStackSize;
    private final int maxDamage;
    private final boolean isFireResistant;
@@ -73,10 +76,17 @@
       this.craftingRemainingItem = var1.craftingRemainingItem;
       this.maxDamage = var1.maxDamage;
       this.maxStackSize = var1.maxStackSize;
       this.foodProperties = var1.foodProperties;
       this.isFireResistant = var1.isFireResistant;
+      if (SharedConstants.IS_RUNNING_IN_IDE) {
+         String var2 = this.getClass().getSimpleName();
+         if (!var2.endsWith("Item")) {
+            LOGGER.error((String)"Item classes should end with Item and {} doesn't.", (Object)var2);
+         }
+      }
+
    }
 
    public void onUseTick(Level var1, LivingEntity var2, ItemStack var3, int var4) {
    }
 
@@ -128,10 +138,18 @@
 
    public boolean canBeDepleted() {
       return this.maxDamage > 0;
    }
 
+   public boolean overrideStackedOnOther(ItemStack var1, ItemStack var2, ClickAction var3, Inventory var4) {
+      return false;
+   }
+
+   public boolean overrideOtherStackedOnMe(ItemStack var1, ItemStack var2, ClickAction var3, Inventory var4) {
+      return false;
+   }
+
    public boolean hurtEnemy(ItemStack var1, LivingEntity var2, LivingEntity var3) {
       return false;
    }
 
    public boolean mineBlock(ItemStack var1, Level var2, BlockState var3, BlockPos var4, LivingEntity var5) {
@@ -276,21 +294,17 @@
    public Multimap<Attribute, AttributeModifier> getDefaultAttributeModifiers(EquipmentSlot var1) {
       return ImmutableMultimap.of();
    }
 
    public boolean useOnRelease(ItemStack var1) {
-      return var1.getItem() == Items.CROSSBOW;
+      return false;
    }
 
    public ItemStack getDefaultInstance() {
       return new ItemStack(this);
    }
 
-   public boolean is(Tag<Item> var1) {
-      return var1.contains(this);
-   }
-
    public boolean isEdible() {
       return this.foodProperties != null;
    }
 
    @Nullable
@@ -312,10 +326,19 @@
 
    public boolean canBeHurtBy(DamageSource var1) {
       return !this.isFireResistant || !var1.isFire();
    }
 
+   @Nullable
+   public SoundEvent getEquipSound() {
+      return null;
+   }
+
+   public boolean canFitInsideContainerItems() {
+      return true;
+   }
+
    public static class Properties {
       private int maxStackSize = 64;
       private int maxDamage;
       private Item craftingRemainingItem;
       private CreativeModeTab category;
