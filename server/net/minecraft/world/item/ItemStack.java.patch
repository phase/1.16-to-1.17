--- net/minecraft/world/item/ItemStack.java
+++ net/minecraft/world/item/ItemStack.java
@@ -1,61 +1,79 @@
 package net.minecraft.world.item;
 
 import com.google.common.collect.HashMultimap;
+import com.google.common.collect.Lists;
 import com.google.common.collect.Multimap;
 import com.google.gson.JsonParseException;
 import com.mojang.brigadier.StringReader;
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import com.mojang.datafixers.util.Function3;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 import java.text.DecimalFormat;
 import java.text.DecimalFormatSymbols;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.List;
 import java.util.Locale;
 import java.util.Objects;
 import java.util.Optional;
 import java.util.Random;
+import java.util.Map.Entry;
 import java.util.function.Consumer;
 import java.util.function.Predicate;
+import java.util.stream.Collectors;
 import javax.annotation.Nullable;
 import net.minecraft.ChatFormatting;
 import net.minecraft.Util;
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.commands.arguments.blocks.BlockPredicateArgument;
+import net.minecraft.commands.arguments.blocks.BlockStateParser;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Registry;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
-import net.minecraft.nbt.Tag;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.ComponentUtils;
 import net.minecraft.network.chat.HoverEvent;
 import net.minecraft.network.chat.MutableComponent;
 import net.minecraft.network.chat.Style;
 import net.minecraft.network.chat.TextComponent;
+import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.stats.Stats;
+import net.minecraft.tags.BlockTags;
+import net.minecraft.tags.Tag;
 import net.minecraft.tags.TagContainer;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.InteractionResultHolder;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EquipmentSlot;
 import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.entity.MobType;
+import net.minecraft.world.entity.SlotAccess;
 import net.minecraft.world.entity.ai.attributes.Attribute;
 import net.minecraft.world.entity.ai.attributes.AttributeModifier;
+import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.decoration.ItemFrame;
+import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.inventory.ClickAction;
+import net.minecraft.world.inventory.Slot;
+import net.minecraft.world.inventory.tooltip.TooltipComponent;
 import net.minecraft.world.item.context.UseOnContext;
 import net.minecraft.world.item.enchantment.DigDurabilityEnchantment;
 import net.minecraft.world.item.enchantment.Enchantment;
 import net.minecraft.world.item.enchantment.EnchantmentHelper;
 import net.minecraft.world.item.enchantment.Enchantments;
 import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.level.Level;
+import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.pattern.BlockInWorld;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -72,10 +90,24 @@
    private static final Logger LOGGER = LogManager.getLogger();
    public static final ItemStack EMPTY = new ItemStack((Item)null);
    public static final DecimalFormat ATTRIBUTE_MODIFIER_FORMAT = (DecimalFormat)Util.make(new DecimalFormat("#.##"), (var0) -> {
       var0.setDecimalFormatSymbols(DecimalFormatSymbols.getInstance(Locale.ROOT));
    });
+   public static final String TAG_ENCH = "Enchantments";
+   public static final String TAG_ENCH_ID = "id";
+   public static final String TAG_ENCH_LEVEL = "lvl";
+   public static final String TAG_DISPLAY = "display";
+   public static final String TAG_DISPLAY_NAME = "Name";
+   public static final String TAG_LORE = "Lore";
+   public static final String TAG_DAMAGE = "Damage";
+   public static final String TAG_COLOR = "color";
+   private static final String TAG_UNBREAKABLE = "Unbreakable";
+   private static final String TAG_REPAIR_COST = "RepairCost";
+   private static final String TAG_CAN_DESTROY_BLOCK_LIST = "CanDestroy";
+   private static final String TAG_CAN_PLACE_ON_BLOCK_LIST = "CanPlaceOn";
+   private static final String TAG_HIDE_FLAGS = "HideFlags";
+   private static final int DONT_HIDE_TOOLTIP = 0;
    private static final Style LORE_STYLE;
    private int count;
    private int popTime;
    @Deprecated
    private final Item item;
@@ -85,10 +117,14 @@
    private BlockInWorld cachedBreakBlock;
    private boolean cachedBreakBlockResult;
    private BlockInWorld cachedPlaceBlock;
    private boolean cachedPlaceBlockResult;
 
+   public Optional<TooltipComponent> getTooltipImage() {
+      return this.getItem().getTooltipImage(this);
+   }
+
    public ItemStack(ItemLike var1) {
       this(var1, 1);
    }
 
    private ItemStack(ItemLike var1, int var2, Optional<CompoundTag> var3) {
@@ -136,11 +172,11 @@
    }
 
    public boolean isEmpty() {
       if (this == EMPTY) {
          return true;
-      } else if (this.getItem() != null && this.getItem() != Items.AIR) {
+      } else if (this.getItem() != null && !this.is(Items.AIR)) {
          return this.count <= 0;
       } else {
          return true;
       }
    }
@@ -155,20 +191,28 @@
 
    public Item getItem() {
       return this.emptyCacheFlag ? Items.AIR : this.item;
    }
 
+   public boolean is(Tag<Item> var1) {
+      return var1.contains(this.getItem());
+   }
+
+   public boolean is(Item var1) {
+      return this.getItem() == var1;
+   }
+
    public InteractionResult useOn(UseOnContext var1) {
       Player var2 = var1.getPlayer();
       BlockPos var3 = var1.getClickedPos();
       BlockInWorld var4 = new BlockInWorld(var1.getLevel(), var3, false);
-      if (var2 != null && !var2.abilities.mayBuild && !this.hasAdventureModePlaceTagForBlock(var1.getLevel().getTagManager(), var4)) {
+      if (var2 != null && !var2.getAbilities().mayBuild && !this.hasAdventureModePlaceTagForBlock(var1.getLevel().getTagManager(), var4)) {
          return InteractionResult.PASS;
       } else {
          Item var5 = this.getItem();
          InteractionResult var6 = var5.useOn(var1);
-         if (var2 != null && var6.consumesAction()) {
+         if (var2 != null && var6.shouldAwardStats()) {
             var2.awardStat(Stats.ITEM_USED.get(var5));
          }
 
          return var6;
       }
@@ -260,11 +304,11 @@
          return var4 >= this.getMaxDamage();
       }
    }
 
    public <T extends LivingEntity> void hurtAndBreak(int var1, T var2, Consumer<T> var3) {
-      if (!var2.level.isClientSide && (!(var2 instanceof Player) || !((Player)var2).abilities.instabuild)) {
+      if (!var2.level.isClientSide && (!(var2 instanceof Player) || !((Player)var2).getAbilities().instabuild)) {
          if (this.isDamageableItem()) {
             if (this.hurt(var1, var2.getRandom(), var2 instanceof ServerPlayer ? (ServerPlayer)var2 : null)) {
                var3.accept(var2);
                Item var4 = this.getItem();
                this.shrink(1);
@@ -277,10 +321,30 @@
 
          }
       }
    }
 
+   public boolean isBarVisible() {
+      return this.item.isBarVisible(this);
+   }
+
+   public int getBarWidth() {
+      return this.item.getBarWidth(this);
+   }
+
+   public int getBarColor() {
+      return this.item.getBarColor(this);
+   }
+
+   public boolean overrideStackedOnOther(Slot var1, ClickAction var2, Player var3) {
+      return this.getItem().overrideStackedOnOther(this, var1, var2, var3);
+   }
+
+   public boolean overrideOtherStackedOnMe(ItemStack var1, Slot var2, ClickAction var3, Player var4, SlotAccess var5) {
+      return this.getItem().overrideOtherStackedOnMe(this, var1, var2, var3, var4, var5);
+   }
+
    public void hurtEnemy(LivingEntity var1, Player var2) {
       Item var3 = this.getItem();
       if (var3.hurtEnemy(this, var1, var2)) {
          var2.awardStat(Stats.ITEM_USED.get(var3));
       }
@@ -340,11 +404,11 @@
    }
 
    private boolean matches(ItemStack var1) {
       if (this.count != var1.count) {
          return false;
-      } else if (this.getItem() != var1.getItem()) {
+      } else if (!this.is(var1.getItem())) {
          return false;
       } else if (this.tag == null && var1.tag != null) {
          return false;
       } else {
          return this.tag == null || this.tag.equals(var1.tag);
@@ -366,27 +430,32 @@
          return !var0.isEmpty() && !var1.isEmpty() ? var0.sameItemStackIgnoreDurability(var1) : false;
       }
    }
 
    public boolean sameItem(ItemStack var1) {
-      return !var1.isEmpty() && this.getItem() == var1.getItem();
+      return !var1.isEmpty() && this.is(var1.getItem());
    }
 
    public boolean sameItemStackIgnoreDurability(ItemStack var1) {
       if (!this.isDamageableItem()) {
          return this.sameItem(var1);
       } else {
-         return !var1.isEmpty() && this.getItem() == var1.getItem();
+         return !var1.isEmpty() && this.is(var1.getItem());
       }
    }
 
+   public static boolean isSameItemSameTags(ItemStack var0, ItemStack var1) {
+      return var0.is(var1.getItem()) && tagMatches(var0, var1);
+   }
+
    public String getDescriptionId() {
       return this.getItem().getDescriptionId(this);
    }
 
    public String toString() {
-      return this.count + " " + this.getItem();
+      int var10000 = this.count;
+      return var10000 + " " + this.getItem();
    }
 
    public void inventoryTick(Level var1, Entity var2, int var3, boolean var4) {
       if (this.popTime > 0) {
          --this.popTime;
@@ -520,15 +589,214 @@
    public boolean hasCustomHoverName() {
       CompoundTag var1 = this.getTagElement("display");
       return var1 != null && var1.contains("Name", 8);
    }
 
+   public List<Component> getTooltipLines(@Nullable Player var1, TooltipFlag var2) {
+      ArrayList var3 = Lists.newArrayList();
+      MutableComponent var4 = (new TextComponent("")).append(this.getHoverName()).withStyle(this.getRarity().color);
+      if (this.hasCustomHoverName()) {
+         var4.withStyle(ChatFormatting.ITALIC);
+      }
+
+      var3.add(var4);
+      if (!var2.isAdvanced() && !this.hasCustomHoverName() && this.is(Items.FILLED_MAP)) {
+         Integer var5 = MapItem.getMapId(this);
+         if (var5 != null) {
+            var3.add((new TextComponent("#" + var5)).withStyle(ChatFormatting.GRAY));
+         }
+      }
+
+      int var20 = this.getHideFlags();
+      if (shouldShowInTooltip(var20, ItemStack.TooltipPart.ADDITIONAL)) {
+         this.getItem().appendHoverText(this, var1 == null ? null : var1.level, var3, var2);
+      }
+
+      int var8;
+      if (this.hasTag()) {
+         if (shouldShowInTooltip(var20, ItemStack.TooltipPart.ENCHANTMENTS)) {
+            appendEnchantmentNames(var3, this.getEnchantmentTags());
+         }
+
+         if (this.tag.contains("display", 10)) {
+            CompoundTag var6 = this.tag.getCompound("display");
+            if (shouldShowInTooltip(var20, ItemStack.TooltipPart.DYE) && var6.contains("color", 99)) {
+               if (var2.isAdvanced()) {
+                  var3.add((new TranslatableComponent("item.color", new Object[]{String.format("#%06X", var6.getInt("color"))})).withStyle(ChatFormatting.GRAY));
+               } else {
+                  var3.add((new TranslatableComponent("item.dyed")).withStyle(new ChatFormatting[]{ChatFormatting.GRAY, ChatFormatting.ITALIC}));
+               }
+            }
+
+            if (var6.getTagType("Lore") == 9) {
+               ListTag var7 = var6.getList("Lore", 8);
+
+               for(var8 = 0; var8 < var7.size(); ++var8) {
+                  String var9 = var7.getString(var8);
+
+                  try {
+                     MutableComponent var10 = Component.Serializer.fromJson(var9);
+                     if (var10 != null) {
+                        var3.add(ComponentUtils.mergeStyles(var10, LORE_STYLE));
+                     }
+                  } catch (JsonParseException var19) {
+                     var6.remove("Lore");
+                  }
+               }
+            }
+         }
+      }
+
+      int var23;
+      if (shouldShowInTooltip(var20, ItemStack.TooltipPart.MODIFIERS)) {
+         EquipmentSlot[] var21 = EquipmentSlot.values();
+         var23 = var21.length;
+
+         for(var8 = 0; var8 < var23; ++var8) {
+            EquipmentSlot var24 = var21[var8];
+            Multimap var25 = this.getAttributeModifiers(var24);
+            if (!var25.isEmpty()) {
+               var3.add(TextComponent.EMPTY);
+               var3.add((new TranslatableComponent("item.modifiers." + var24.getName())).withStyle(ChatFormatting.GRAY));
+               Iterator var11 = var25.entries().iterator();
+
+               while(var11.hasNext()) {
+                  Entry var12 = (Entry)var11.next();
+                  AttributeModifier var13 = (AttributeModifier)var12.getValue();
+                  double var14 = var13.getAmount();
+                  boolean var18 = false;
+                  if (var1 != null) {
+                     if (var13.getId() == Item.BASE_ATTACK_DAMAGE_UUID) {
+                        var14 += var1.getAttributeBaseValue(Attributes.ATTACK_DAMAGE);
+                        var14 += (double)EnchantmentHelper.getDamageBonus(this, MobType.UNDEFINED);
+                        var18 = true;
+                     } else if (var13.getId() == Item.BASE_ATTACK_SPEED_UUID) {
+                        var14 += var1.getAttributeBaseValue(Attributes.ATTACK_SPEED);
+                        var18 = true;
+                     }
+                  }
+
+                  double var16;
+                  if (var13.getOperation() != AttributeModifier.Operation.MULTIPLY_BASE && var13.getOperation() != AttributeModifier.Operation.MULTIPLY_TOTAL) {
+                     if (((Attribute)var12.getKey()).equals(Attributes.KNOCKBACK_RESISTANCE)) {
+                        var16 = var14 * 10.0D;
+                     } else {
+                        var16 = var14;
+                     }
+                  } else {
+                     var16 = var14 * 100.0D;
+                  }
+
+                  if (var18) {
+                     var3.add((new TextComponent(" ")).append(new TranslatableComponent("attribute.modifier.equals." + var13.getOperation().toValue(), new Object[]{ATTRIBUTE_MODIFIER_FORMAT.format(var16), new TranslatableComponent(((Attribute)var12.getKey()).getDescriptionId())})).withStyle(ChatFormatting.DARK_GREEN));
+                  } else if (var14 > 0.0D) {
+                     var3.add((new TranslatableComponent("attribute.modifier.plus." + var13.getOperation().toValue(), new Object[]{ATTRIBUTE_MODIFIER_FORMAT.format(var16), new TranslatableComponent(((Attribute)var12.getKey()).getDescriptionId())})).withStyle(ChatFormatting.BLUE));
+                  } else if (var14 < 0.0D) {
+                     var16 *= -1.0D;
+                     var3.add((new TranslatableComponent("attribute.modifier.take." + var13.getOperation().toValue(), new Object[]{ATTRIBUTE_MODIFIER_FORMAT.format(var16), new TranslatableComponent(((Attribute)var12.getKey()).getDescriptionId())})).withStyle(ChatFormatting.RED));
+                  }
+               }
+            }
+         }
+      }
+
+      if (this.hasTag()) {
+         if (shouldShowInTooltip(var20, ItemStack.TooltipPart.UNBREAKABLE) && this.tag.getBoolean("Unbreakable")) {
+            var3.add((new TranslatableComponent("item.unbreakable")).withStyle(ChatFormatting.BLUE));
+         }
+
+         ListTag var22;
+         if (shouldShowInTooltip(var20, ItemStack.TooltipPart.CAN_DESTROY) && this.tag.contains("CanDestroy", 9)) {
+            var22 = this.tag.getList("CanDestroy", 8);
+            if (!var22.isEmpty()) {
+               var3.add(TextComponent.EMPTY);
+               var3.add((new TranslatableComponent("item.canBreak")).withStyle(ChatFormatting.GRAY));
+
+               for(var23 = 0; var23 < var22.size(); ++var23) {
+                  var3.addAll(expandBlockState(var22.getString(var23)));
+               }
+            }
+         }
+
+         if (shouldShowInTooltip(var20, ItemStack.TooltipPart.CAN_PLACE) && this.tag.contains("CanPlaceOn", 9)) {
+            var22 = this.tag.getList("CanPlaceOn", 8);
+            if (!var22.isEmpty()) {
+               var3.add(TextComponent.EMPTY);
+               var3.add((new TranslatableComponent("item.canPlace")).withStyle(ChatFormatting.GRAY));
+
+               for(var23 = 0; var23 < var22.size(); ++var23) {
+                  var3.addAll(expandBlockState(var22.getString(var23)));
+               }
+            }
+         }
+      }
+
+      if (var2.isAdvanced()) {
+         if (this.isDamaged()) {
+            var3.add(new TranslatableComponent("item.durability", new Object[]{this.getMaxDamage() - this.getDamageValue(), this.getMaxDamage()}));
+         }
+
+         var3.add((new TextComponent(Registry.ITEM.getKey(this.getItem()).toString())).withStyle(ChatFormatting.DARK_GRAY));
+         if (this.hasTag()) {
+            var3.add((new TranslatableComponent("item.nbt_tags", new Object[]{this.tag.getAllKeys().size()})).withStyle(ChatFormatting.DARK_GRAY));
+         }
+      }
+
+      return var3;
+   }
+
+   private static boolean shouldShowInTooltip(int var0, ItemStack.TooltipPart var1) {
+      return (var0 & var1.getMask()) == 0;
+   }
+
+   private int getHideFlags() {
+      return this.hasTag() && this.tag.contains("HideFlags", 99) ? this.tag.getInt("HideFlags") : 0;
+   }
+
    public void hideTooltipPart(ItemStack.TooltipPart var1) {
       CompoundTag var2 = this.getOrCreateTag();
       var2.putInt("HideFlags", var2.getInt("HideFlags") | var1.getMask());
    }
 
+   public static void appendEnchantmentNames(List<Component> var0, ListTag var1) {
+      for(int var2 = 0; var2 < var1.size(); ++var2) {
+         CompoundTag var3 = var1.getCompound(var2);
+         Registry.ENCHANTMENT.getOptional(ResourceLocation.tryParse(var3.getString("id"))).ifPresent((var2x) -> {
+            var0.add(var2x.getFullname(var3.getInt("lvl")));
+         });
+      }
+
+   }
+
+   private static Collection<Component> expandBlockState(String var0) {
+      try {
+         BlockStateParser var1 = (new BlockStateParser(new StringReader(var0), true)).parse(true);
+         BlockState var2 = var1.getState();
+         ResourceLocation var3 = var1.getTag();
+         boolean var4 = var2 != null;
+         boolean var5 = var3 != null;
+         if (var4 || var5) {
+            if (var4) {
+               return Lists.newArrayList((Object[])(var2.getBlock().getName().withStyle(ChatFormatting.DARK_GRAY)));
+            }
+
+            Tag var6 = BlockTags.getAllTags().getTag(var3);
+            if (var6 != null) {
+               List var7 = var6.getValues();
+               if (!var7.isEmpty()) {
+                  return (Collection)var7.stream().map(Block::getName).map((var0x) -> {
+                     return var0x.withStyle(ChatFormatting.DARK_GRAY);
+                  }).collect(Collectors.toList());
+               }
+            }
+         }
+      } catch (CommandSyntaxException var8) {
+      }
+
+      return Lists.newArrayList((Object[])((new TextComponent("missingno")).withStyle(ChatFormatting.DARK_GRAY)));
+   }
+
    public boolean hasFoil() {
       return this.getItem().isFoil(this);
    }
 
    public Rarity getRarity() {
@@ -562,11 +830,11 @@
       } else {
          return false;
       }
    }
 
-   public void addTagElement(String var1, Tag var2) {
+   public void addTagElement(String var1, net.minecraft.nbt.Tag var2) {
       this.getOrCreateTag().put(var1, var2);
    }
 
    public boolean isFramed() {
       return this.entityRepresentation instanceof ItemFrame;
@@ -605,11 +873,11 @@
             if (!var5.contains("Slot", 8) || var5.getString("Slot").equals(var1.getName())) {
                Optional var6 = Registry.ATTRIBUTE.getOptional(ResourceLocation.tryParse(var5.getString("AttributeName")));
                if (var6.isPresent()) {
                   AttributeModifier var7 = AttributeModifier.load(var5);
                   if (var7 != null && var7.getId().getLeastSignificantBits() != 0L && var7.getId().getMostSignificantBits() != 0L) {
-                     ((Multimap)var2).put(var6.get(), var7);
+                     ((Multimap)var2).put((Attribute)var6.get(), var7);
                   }
                }
             }
          }
       } else {
@@ -744,10 +1012,14 @@
 
    public void onUseTick(Level var1, LivingEntity var2, int var3) {
       this.getItem().onUseTick(var1, var2, this, var3);
    }
 
+   public void onDestroyed(ItemEntity var1) {
+      this.getItem().onDestroyed(var1);
+   }
+
    public boolean isEdible() {
       return this.getItem().isEdible();
    }
 
    public SoundEvent getDrinkingSound() {
@@ -756,10 +1028,15 @@
 
    public SoundEvent getEatingSound() {
       return this.getItem().getEatingSound();
    }
 
+   @Nullable
+   public SoundEvent getEquipSound() {
+      return this.getItem().getEquipSound();
+   }
+
    static {
       LORE_STYLE = Style.EMPTY.withColor(ChatFormatting.DARK_PURPLE).withItalic(true);
    }
 
    public static enum TooltipPart {
@@ -769,11 +1046,11 @@
       CAN_DESTROY,
       CAN_PLACE,
       ADDITIONAL,
       DYE;
 
-      private int mask = 1 << this.ordinal();
+      private final int mask = 1 << this.ordinal();
 
       private TooltipPart() {
       }
 
       public int getMask() {
