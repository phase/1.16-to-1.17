--- net/minecraft/world/item/ItemStack.java
+++ net/minecraft/world/item/ItemStack.java
@@ -23,32 +23,36 @@
 import net.minecraft.commands.arguments.blocks.BlockPredicateArgument;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Registry;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
-import net.minecraft.nbt.Tag;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.ComponentUtils;
 import net.minecraft.network.chat.HoverEvent;
 import net.minecraft.network.chat.MutableComponent;
 import net.minecraft.network.chat.Style;
 import net.minecraft.network.chat.TextComponent;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.stats.Stats;
+import net.minecraft.tags.Tag;
 import net.minecraft.tags.TagContainer;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.InteractionResultHolder;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EquipmentSlot;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.ai.attributes.Attribute;
 import net.minecraft.world.entity.ai.attributes.AttributeModifier;
 import net.minecraft.world.entity.decoration.ItemFrame;
+import net.minecraft.world.entity.item.ItemEntity;
+import net.minecraft.world.entity.player.Inventory;
 import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.inventory.ClickAction;
+import net.minecraft.world.inventory.Slot;
 import net.minecraft.world.item.context.UseOnContext;
 import net.minecraft.world.item.enchantment.DigDurabilityEnchantment;
 import net.minecraft.world.item.enchantment.Enchantment;
 import net.minecraft.world.item.enchantment.EnchantmentHelper;
 import net.minecraft.world.item.enchantment.Enchantments;
@@ -136,11 +140,11 @@
    }
 
    public boolean isEmpty() {
       if (this == EMPTY) {
          return true;
-      } else if (this.getItem() != null && this.getItem() != Items.AIR) {
+      } else if (this.getItem() != null && !this.is(Items.AIR)) {
          return this.count <= 0;
       } else {
          return true;
       }
    }
@@ -155,15 +159,23 @@
 
    public Item getItem() {
       return this.emptyCacheFlag ? Items.AIR : this.item;
    }
 
+   public boolean is(Tag<Item> var1) {
+      return var1.contains(this.getItem());
+   }
+
+   public boolean is(Item var1) {
+      return this.getItem() == var1;
+   }
+
    public InteractionResult useOn(UseOnContext var1) {
       Player var2 = var1.getPlayer();
       BlockPos var3 = var1.getClickedPos();
       BlockInWorld var4 = new BlockInWorld(var1.getLevel(), var3, false);
-      if (var2 != null && !var2.abilities.mayBuild && !this.hasAdventureModePlaceTagForBlock(var1.getLevel().getTagManager(), var4)) {
+      if (var2 != null && !var2.getAbilities().mayBuild && !this.hasAdventureModePlaceTagForBlock(var1.getLevel().getTagManager(), var4)) {
          return InteractionResult.PASS;
       } else {
          Item var5 = this.getItem();
          InteractionResult var6 = var5.useOn(var1);
          if (var2 != null && var6.consumesAction()) {
@@ -260,11 +272,11 @@
          return var4 >= this.getMaxDamage();
       }
    }
 
    public <T extends LivingEntity> void hurtAndBreak(int var1, T var2, Consumer<T> var3) {
-      if (!var2.level.isClientSide && (!(var2 instanceof Player) || !((Player)var2).abilities.instabuild)) {
+      if (!var2.level.isClientSide && (!(var2 instanceof Player) || !((Player)var2).getAbilities().instabuild)) {
          if (this.isDamageableItem()) {
             if (this.hurt(var1, var2.getRandom(), var2 instanceof ServerPlayer ? (ServerPlayer)var2 : null)) {
                var3.accept(var2);
                Item var4 = this.getItem();
                this.shrink(1);
@@ -277,10 +289,18 @@
 
          }
       }
    }
 
+   public boolean overrideStackedOnOther(Slot var1, ClickAction var2, Inventory var3) {
+      return this.getItem().overrideStackedOnOther(this, var1, var2, var3);
+   }
+
+   public boolean overrideOtherStackedOnMe(ItemStack var1, Slot var2, ClickAction var3, Inventory var4) {
+      return this.getItem().overrideOtherStackedOnMe(this, var1, var2, var3, var4);
+   }
+
    public void hurtEnemy(LivingEntity var1, Player var2) {
       Item var3 = this.getItem();
       if (var3.hurtEnemy(this, var1, var2)) {
          var2.awardStat(Stats.ITEM_USED.get(var3));
       }
@@ -340,11 +360,11 @@
    }
 
    private boolean matches(ItemStack var1) {
       if (this.count != var1.count) {
          return false;
-      } else if (this.getItem() != var1.getItem()) {
+      } else if (!this.is(var1.getItem())) {
          return false;
       } else if (this.tag == null && var1.tag != null) {
          return false;
       } else {
          return this.tag == null || this.tag.equals(var1.tag);
@@ -366,21 +386,25 @@
          return !var0.isEmpty() && !var1.isEmpty() ? var0.sameItemStackIgnoreDurability(var1) : false;
       }
    }
 
    public boolean sameItem(ItemStack var1) {
-      return !var1.isEmpty() && this.getItem() == var1.getItem();
+      return !var1.isEmpty() && this.is(var1.getItem());
    }
 
    public boolean sameItemStackIgnoreDurability(ItemStack var1) {
       if (!this.isDamageableItem()) {
          return this.sameItem(var1);
       } else {
-         return !var1.isEmpty() && this.getItem() == var1.getItem();
+         return !var1.isEmpty() && this.is(var1.getItem());
       }
    }
 
+   public static boolean isSameItemSameTags(ItemStack var0, ItemStack var1) {
+      return var0.is(var1.getItem()) && tagMatches(var0, var1);
+   }
+
    public String getDescriptionId() {
       return this.getItem().getDescriptionId(this);
    }
 
    public String toString() {
@@ -562,11 +586,11 @@
       } else {
          return false;
       }
    }
 
-   public void addTagElement(String var1, Tag var2) {
+   public void addTagElement(String var1, net.minecraft.nbt.Tag var2) {
       this.getOrCreateTag().put(var1, var2);
    }
 
    public boolean isFramed() {
       return this.entityRepresentation instanceof ItemFrame;
@@ -744,10 +768,14 @@
 
    public void onUseTick(Level var1, LivingEntity var2, int var3) {
       this.getItem().onUseTick(var1, var2, this, var3);
    }
 
+   public void onDestroyed(ItemEntity var1) {
+      this.getItem().onDestroyed(var1);
+   }
+
    public boolean isEdible() {
       return this.getItem().isEdible();
    }
 
    public SoundEvent getDrinkingSound() {
@@ -756,10 +784,15 @@
 
    public SoundEvent getEatingSound() {
       return this.getItem().getEatingSound();
    }
 
+   @Nullable
+   public SoundEvent getEquipSound() {
+      return this.getItem().getEquipSound();
+   }
+
    static {
       LORE_STYLE = Style.EMPTY.withColor(ChatFormatting.DARK_PURPLE).withItalic(true);
    }
 
    public static enum TooltipPart {
@@ -769,11 +802,11 @@
       CAN_DESTROY,
       CAN_PLACE,
       ADDITIONAL,
       DYE;
 
-      private int mask = 1 << this.ordinal();
+      private final int mask = 1 << this.ordinal();
 
       private TooltipPart() {
       }
 
       public int getMask() {
