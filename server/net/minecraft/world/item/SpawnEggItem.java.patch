--- net/minecraft/world/item/SpawnEggItem.java
+++ net/minecraft/world/item/SpawnEggItem.java
@@ -12,11 +12,11 @@
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.stats.Stats;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.InteractionResultHolder;
-import net.minecraft.world.entity.AgableMob;
+import net.minecraft.world.entity.AgeableMob;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.player.Player;
@@ -27,25 +27,26 @@
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.LiquidBlock;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.entity.SpawnerBlockEntity;
 import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.HitResult;
 import net.minecraft.world.phys.Vec3;
 
 public class SpawnEggItem extends Item {
-   private static final Map<EntityType<?>, SpawnEggItem> BY_ID = Maps.newIdentityHashMap();
-   private final int color1;
-   private final int color2;
+   private static final Map<EntityType<? extends Mob>, SpawnEggItem> BY_ID = Maps.newIdentityHashMap();
+   private final int backgroundColor;
+   private final int highlightColor;
    private final EntityType<?> defaultType;
 
-   public SpawnEggItem(EntityType<?> var1, int var2, int var3, Item.Properties var4) {
+   public SpawnEggItem(EntityType<? extends Mob> var1, int var2, int var3, Item.Properties var4) {
       super(var4);
       this.defaultType = var1;
-      this.color1 = var2;
-      this.color2 = var3;
+      this.backgroundColor = var2;
+      this.highlightColor = var3;
       BY_ID.put(var1, this);
    }
 
    public InteractionResult useOn(UseOnContext var1) {
       Level var2 = var1.getLevel();
@@ -77,10 +78,11 @@
          }
 
          EntityType var8 = this.getType(var3.getTag());
          if (var8.spawn((ServerLevel)var2, var3, var1.getPlayer(), var10, MobSpawnType.SPAWN_EGG, true, !Objects.equals(var4, var10) && var5 == Direction.UP) != null) {
             var3.shrink(1);
+            var2.gameEvent(var1.getPlayer(), GameEvent.ENTITY_PLACE, var4);
          }
 
          return InteractionResult.CONSUME;
       }
    }
@@ -100,15 +102,16 @@
          } else if (var1.mayInteract(var2, var7) && var2.mayUseItemAt(var7, var6.getDirection(), var4)) {
             EntityType var8 = this.getType(var4.getTag());
             if (var8.spawn((ServerLevel)var1, var4, var2, var7, MobSpawnType.SPAWN_EGG, false, false) == null) {
                return InteractionResultHolder.pass(var4);
             } else {
-               if (!var2.abilities.instabuild) {
+               if (!var2.getAbilities().instabuild) {
                   var4.shrink(1);
                }
 
                var2.awardStat(Stats.ITEM_USED.get(this));
+               var1.gameEvent(GameEvent.ENTITY_PLACE, var2);
                return InteractionResultHolder.consume(var4);
             }
          } else {
             return InteractionResultHolder.fail(var4);
          }
@@ -117,10 +120,19 @@
 
    public boolean spawnsEntity(@Nullable CompoundTag var1, EntityType<?> var2) {
       return Objects.equals(this.getType(var1), var2);
    }
 
+   public int getColor(int var1) {
+      return var1 == 0 ? this.backgroundColor : this.highlightColor;
+   }
+
+   @Nullable
+   public static SpawnEggItem byId(@Nullable EntityType<?> var0) {
+      return (SpawnEggItem)BY_ID.get(var0);
+   }
+
    public static Iterable<SpawnEggItem> eggs() {
       return Iterables.unmodifiableIterable((Iterable)BY_ID.values());
    }
 
    public EntityType<?> getType(@Nullable CompoundTag var1) {
@@ -137,12 +149,12 @@
    public Optional<Mob> spawnOffspringFromSpawnEgg(Player var1, Mob var2, EntityType<? extends Mob> var3, ServerLevel var4, Vec3 var5, ItemStack var6) {
       if (!this.spawnsEntity(var6.getTag(), var3)) {
          return Optional.empty();
       } else {
          Object var7;
-         if (var2 instanceof AgableMob) {
-            var7 = ((AgableMob)var2).getBreedOffspring(var4, (AgableMob)var2);
+         if (var2 instanceof AgeableMob) {
+            var7 = ((AgeableMob)var2).getBreedOffspring(var4, (AgeableMob)var2);
          } else {
             var7 = (Mob)var3.create(var4);
          }
 
          if (var7 == null) {
@@ -156,11 +168,11 @@
                var4.addFreshEntityWithPassengers((Entity)var7);
                if (var6.hasCustomHoverName()) {
                   ((Mob)var7).setCustomName(var6.getHoverName());
                }
 
-               if (!var1.abilities.instabuild) {
+               if (!var1.getAbilities().instabuild) {
                   var6.shrink(1);
                }
 
                return Optional.of(var7);
             }
