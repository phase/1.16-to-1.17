--- net/minecraft/world/item/crafting/RecipeManager.java
+++ net/minecraft/world/item/crafting/RecipeManager.java
@@ -67,10 +67,14 @@
          return ((ImmutableMap.Builder)var0.getValue()).build();
       }));
       LOGGER.info((String)"Loaded {} recipes", (Object)var4.size());
    }
 
+   public boolean hadErrorsLoading() {
+      return this.hasErrors;
+   }
+
    public <C extends Container, T extends Recipe<C>> Optional<T> getRecipeFor(RecipeType<T> var1, C var2, Level var3) {
       return this.byType(var1).values().stream().flatMap((var3x) -> {
          return Util.toStream(var1.tryMatch(var3x, var3, var2));
       }).findFirst();
    }
@@ -130,6 +134,21 @@
       String var2 = GsonHelper.getAsString(var1, "type");
       return ((RecipeSerializer)Registry.RECIPE_SERIALIZER.getOptional(new ResourceLocation(var2)).orElseThrow(() -> {
          return new JsonSyntaxException("Invalid or unsupported recipe type '" + var2 + "'");
       })).fromJson(var0, var1);
    }
+
+   public void replaceRecipes(Iterable<Recipe<?>> var1) {
+      this.hasErrors = false;
+      HashMap var2 = Maps.newHashMap();
+      var1.forEach((var1x) -> {
+         Map var2x = (Map)var2.computeIfAbsent(var1x.getType(), (var0) -> {
+            return Maps.newHashMap();
+         });
+         Recipe var3 = (Recipe)var2x.put(var1x.getId(), var1x);
+         if (var3 != null) {
+            throw new IllegalStateException("Duplicate recipe ignored with ID " + var1x.getId());
+         }
+      });
+      this.recipes = ImmutableMap.copyOf((Map)var2);
+   }
 }
