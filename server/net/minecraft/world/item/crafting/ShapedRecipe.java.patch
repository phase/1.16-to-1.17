--- net/minecraft/world/item/crafting/ShapedRecipe.java
+++ net/minecraft/world/item/crafting/ShapedRecipe.java
@@ -19,19 +19,20 @@
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.util.GsonHelper;
 import net.minecraft.world.inventory.CraftingContainer;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.Items;
 import net.minecraft.world.level.Level;
 
 public class ShapedRecipe implements CraftingRecipe {
-   private final int width;
-   private final int height;
-   private final NonNullList<Ingredient> recipeItems;
-   private final ItemStack result;
+   final int width;
+   final int height;
+   final NonNullList<Ingredient> recipeItems;
+   final ItemStack result;
    private final ResourceLocation id;
-   private final String group;
+   final String group;
 
    public ShapedRecipe(ResourceLocation var1, String var2, int var3, int var4, NonNullList<Ingredient> var5, ItemStack var6) {
       this.id = var1;
       this.group = var2;
       this.width = var3;
@@ -46,18 +47,26 @@
 
    public RecipeSerializer<?> getSerializer() {
       return RecipeSerializer.SHAPED_RECIPE;
    }
 
+   public String getGroup() {
+      return this.group;
+   }
+
    public ItemStack getResultItem() {
       return this.result;
    }
 
    public NonNullList<Ingredient> getIngredients() {
       return this.recipeItems;
    }
 
+   public boolean canCraftInDimensions(int var1, int var2) {
+      return var1 >= this.width && var2 >= this.height;
+   }
+
    public boolean matches(CraftingContainer var1, Level var2) {
       for(int var3 = 0; var3 <= var1.getWidth() - this.width; ++var3) {
          for(int var4 = 0; var4 <= var1.getHeight() - this.height; ++var4) {
             if (this.matches(var1, var3, var4, true)) {
                return true;
@@ -105,11 +114,11 @@
 
    public int getHeight() {
       return this.height;
    }
 
-   private static NonNullList<Ingredient> dissolvePattern(String[] var0, Map<String, Ingredient> var1, int var2, int var3) {
+   static NonNullList<Ingredient> dissolvePattern(String[] var0, Map<String, Ingredient> var1, int var2, int var3) {
       NonNullList var4 = NonNullList.withSize(var2 * var3, Ingredient.EMPTY);
       HashSet var5 = Sets.newHashSet((Iterable)var1.keySet());
       var5.remove(" ");
 
       for(int var6 = 0; var6 < var0.length; ++var6) {
@@ -166,10 +175,19 @@
 
          return var8;
       }
    }
 
+   public boolean isIncomplete() {
+      NonNullList var1 = this.getIngredients();
+      return var1.isEmpty() || var1.stream().filter((var0) -> {
+         return !var0.isEmpty();
+      }).anyMatch((var0) -> {
+         return var0.getItems().length == 0;
+      });
+   }
+
    private static int firstNonSpace(String var0) {
       int var1;
       for(var1 = 0; var1 < var0.length() && var0.charAt(var1) == ' '; ++var1) {
       }
 
@@ -182,11 +200,11 @@
       }
 
       return var1;
    }
 
-   private static String[] patternFromJson(JsonArray var0) {
+   static String[] patternFromJson(JsonArray var0) {
       String[] var1 = new String[var0.size()];
       if (var1.length > 3) {
          throw new JsonSyntaxException("Invalid pattern: too many rows, 3 is maximum");
       } else if (var1.length == 0) {
          throw new JsonSyntaxException("Invalid pattern: empty pattern not allowed");
@@ -206,11 +224,11 @@
 
          return var1;
       }
    }
 
-   private static Map<String, Ingredient> keyFromJson(JsonObject var0) {
+   static Map<String, Ingredient> keyFromJson(JsonObject var0) {
       HashMap var1 = Maps.newHashMap();
       Iterator var2 = var0.entrySet().iterator();
 
       while(var2.hasNext()) {
          Entry var3 = (Entry)var2.next();
@@ -220,27 +238,40 @@
 
          if (" ".equals(var3.getKey())) {
             throw new JsonSyntaxException("Invalid key entry: ' ' is a reserved symbol.");
          }
 
-         var1.put(var3.getKey(), Ingredient.fromJson((JsonElement)var3.getValue()));
+         var1.put((String)var3.getKey(), Ingredient.fromJson((JsonElement)var3.getValue()));
       }
 
       var1.put(" ", Ingredient.EMPTY);
       return var1;
    }
 
-   public static ItemStack itemFromJson(JsonObject var0) {
+   public static ItemStack itemStackFromJson(JsonObject var0) {
+      Item var1 = itemFromJson(var0);
+      if (var0.has("data")) {
+         throw new JsonParseException("Disallowed data tag found");
+      } else {
+         int var2 = GsonHelper.getAsInt(var0, "count", 1);
+         if (var2 < 1) {
+            throw new JsonSyntaxException("Invalid output count: " + var2);
+         } else {
+            return new ItemStack(var1, var2);
+         }
+      }
+   }
+
+   public static Item itemFromJson(JsonObject var0) {
       String var1 = GsonHelper.getAsString(var0, "item");
       Item var2 = (Item)Registry.ITEM.getOptional(new ResourceLocation(var1)).orElseThrow(() -> {
          return new JsonSyntaxException("Unknown item '" + var1 + "'");
       });
-      if (var0.has("data")) {
-         throw new JsonParseException("Disallowed data tag found");
+      if (var2 == Items.AIR) {
+         throw new JsonSyntaxException("Invalid item: " + var1);
       } else {
-         int var3 = GsonHelper.getAsInt(var0, "count", 1);
-         return new ItemStack(var2, var3);
+         return var2;
       }
    }
 
    public static class Serializer implements RecipeSerializer<ShapedRecipe> {
       public Serializer() {
@@ -251,18 +282,18 @@
          Map var4 = ShapedRecipe.keyFromJson(GsonHelper.getAsJsonObject(var2, "key"));
          String[] var5 = ShapedRecipe.shrink(ShapedRecipe.patternFromJson(GsonHelper.getAsJsonArray(var2, "pattern")));
          int var6 = var5[0].length();
          int var7 = var5.length;
          NonNullList var8 = ShapedRecipe.dissolvePattern(var5, var4, var6, var7);
-         ItemStack var9 = ShapedRecipe.itemFromJson(GsonHelper.getAsJsonObject(var2, "result"));
+         ItemStack var9 = ShapedRecipe.itemStackFromJson(GsonHelper.getAsJsonObject(var2, "result"));
          return new ShapedRecipe(var1, var3, var6, var7, var8, var9);
       }
 
       public ShapedRecipe fromNetwork(ResourceLocation var1, FriendlyByteBuf var2) {
          int var3 = var2.readVarInt();
          int var4 = var2.readVarInt();
-         String var5 = var2.readUtf(32767);
+         String var5 = var2.readUtf();
          NonNullList var6 = NonNullList.withSize(var3 * var4, Ingredient.EMPTY);
 
          for(int var7 = 0; var7 < var6.size(); ++var7) {
             var6.set(var7, Ingredient.fromNetwork(var2));
          }
