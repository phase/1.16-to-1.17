--- net/minecraft/world/item/crafting/UpgradeRecipe.java
+++ net/minecraft/world/item/crafting/UpgradeRecipe.java
@@ -1,20 +1,22 @@
 package net.minecraft.world.item.crafting;
 
 import com.google.gson.JsonObject;
+import java.util.stream.Stream;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.util.GsonHelper;
 import net.minecraft.world.Container;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.Level;
+import net.minecraft.world.level.block.Blocks;
 
 public class UpgradeRecipe implements Recipe<Container> {
-   private final Ingredient base;
-   private final Ingredient addition;
-   private final ItemStack result;
+   final Ingredient base;
+   final Ingredient addition;
+   final ItemStack result;
    private final ResourceLocation id;
 
    public UpgradeRecipe(ResourceLocation var1, Ingredient var2, Ingredient var3, ItemStack var4) {
       this.id = var1;
       this.base = var2;
@@ -34,18 +36,26 @@
       }
 
       return var2;
    }
 
+   public boolean canCraftInDimensions(int var1, int var2) {
+      return var1 * var2 >= 2;
+   }
+
    public ItemStack getResultItem() {
       return this.result;
    }
 
    public boolean isAdditionIngredient(ItemStack var1) {
       return this.addition.test(var1);
    }
 
+   public ItemStack getToastSymbol() {
+      return new ItemStack(Blocks.SMITHING_TABLE);
+   }
+
    public ResourceLocation getId() {
       return this.id;
    }
 
    public RecipeSerializer<?> getSerializer() {
@@ -54,18 +64,24 @@
 
    public RecipeType<?> getType() {
       return RecipeType.SMITHING;
    }
 
+   public boolean isIncomplete() {
+      return Stream.of(this.base, this.addition).anyMatch((var0) -> {
+         return var0.getItems().length == 0;
+      });
+   }
+
    public static class Serializer implements RecipeSerializer<UpgradeRecipe> {
       public Serializer() {
       }
 
       public UpgradeRecipe fromJson(ResourceLocation var1, JsonObject var2) {
          Ingredient var3 = Ingredient.fromJson(GsonHelper.getAsJsonObject(var2, "base"));
          Ingredient var4 = Ingredient.fromJson(GsonHelper.getAsJsonObject(var2, "addition"));
-         ItemStack var5 = ShapedRecipe.itemFromJson(GsonHelper.getAsJsonObject(var2, "result"));
+         ItemStack var5 = ShapedRecipe.itemStackFromJson(GsonHelper.getAsJsonObject(var2, "result"));
          return new UpgradeRecipe(var1, var3, var4, var5);
       }
 
       public UpgradeRecipe fromNetwork(ResourceLocation var1, FriendlyByteBuf var2) {
          Ingredient var3 = Ingredient.fromNetwork(var2);
