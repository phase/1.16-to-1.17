--- net/minecraft/world/item/HoneycombItem.java
+++ net/minecraft/world/item/HoneycombItem.java
@@ -1,0 +1,47 @@
+package net.minecraft.world.item;
+
+import com.google.common.base.Suppliers;
+import com.google.common.collect.BiMap;
+import com.google.common.collect.ImmutableBiMap;
+import java.util.Optional;
+import java.util.function.Supplier;
+import net.minecraft.core.BlockPos;
+import net.minecraft.world.InteractionResult;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.item.context.UseOnContext;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.block.state.BlockState;
+
+public class HoneycombItem extends Item {
+   public static final Supplier<BiMap<Block, Block>> WAXABLES = Suppliers.memoize(() -> {
+      return ImmutableBiMap.builder().put(Blocks.COPPER_BLOCK, Blocks.WAXED_COPPER_BLOCK).put(Blocks.EXPOSED_COPPER, Blocks.WAXED_EXPOSED_COPPER).put(Blocks.WEATHERED_COPPER, Blocks.WAXED_WEATHERED_COPPER).put(Blocks.CUT_COPPER, Blocks.WAXED_CUT_COPPER).put(Blocks.EXPOSED_CUT_COPPER, Blocks.WAXED_EXPOSED_CUT_COPPER).put(Blocks.WEATHERED_CUT_COPPER, Blocks.WAXED_WEATHERED_CUT_COPPER).put(Blocks.CUT_COPPER_SLAB, Blocks.WAXED_CUT_COPPER_SLAB).put(Blocks.EXPOSED_CUT_COPPER_SLAB, Blocks.WAXED_EXPOSED_CUT_COPPER_SLAB).put(Blocks.WEATHERED_CUT_COPPER_SLAB, Blocks.WAXED_WEATHERED_CUT_COPPER_SLAB).put(Blocks.CUT_COPPER_STAIRS, Blocks.WAXED_CUT_COPPER_STAIRS).put(Blocks.EXPOSED_CUT_COPPER_STAIRS, Blocks.WAXED_EXPOSED_CUT_COPPER_STAIRS).put(Blocks.WEATHERED_CUT_COPPER_STAIRS, Blocks.WAXED_WEATHERED_CUT_COPPER_STAIRS).build();
+   });
+   public static final Supplier<BiMap<Block, Block>> WAX_OFF_BY_BLOCK = Suppliers.memoize(() -> {
+      return ((BiMap)WAXABLES.get()).inverse();
+   });
+
+   public HoneycombItem(Item.Properties var1) {
+      super(var1);
+   }
+
+   public InteractionResult useOn(UseOnContext var1) {
+      Level var2 = var1.getLevel();
+      BlockPos var3 = var1.getClickedPos();
+      BlockState var4 = var2.getBlockState(var3);
+      return (InteractionResult)getWaxed(var4).map((var3x) -> {
+         var1.getItemInHand().shrink(1);
+         var2.setBlock(var3, var3x, 11);
+         Player var4 = var1.getPlayer();
+         var2.levelEvent(var4, 3003, var3, 0);
+         return InteractionResult.sidedSuccess(var2.isClientSide);
+      }).orElse(InteractionResult.PASS);
+   }
+
+   public static Optional<BlockState> getWaxed(BlockState var0) {
+      return Optional.ofNullable(((BiMap)WAXABLES.get()).get(var0.getBlock())).map((var1) -> {
+         return var1.withPropertiesOf(var0);
+      });
+   }
+}
