--- net/minecraft/world/level/Level.java
+++ net/minecraft/world/level/Level.java
@@ -2,13 +2,13 @@
 
 import com.google.common.collect.Lists;
 import com.mojang.serialization.Codec;
 import java.io.IOException;
 import java.util.ArrayList;
-import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Objects;
 import java.util.Random;
 import java.util.function.Consumer;
 import java.util.function.Predicate;
 import java.util.function.Supplier;
 import javax.annotation.Nullable;
@@ -16,11 +16,13 @@
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.Registry;
+import net.minecraft.core.SectionPos;
 import net.minecraft.core.particles.ParticleOptions;
+import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ChunkHolder;
@@ -30,29 +32,32 @@
 import net.minecraft.util.Mth;
 import net.minecraft.util.profiling.ProfilerFiller;
 import net.minecraft.world.DifficultyInstance;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.boss.EnderDragonPart;
+import net.minecraft.world.entity.boss.enderdragon.EnderDragon;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.crafting.RecipeManager;
 import net.minecraft.world.level.biome.Biome;
 import net.minecraft.world.level.biome.BiomeManager;
 import net.minecraft.world.level.block.BaseFireBlock;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.entity.BlockEntity;
-import net.minecraft.world.level.block.entity.BlockEntityType;
-import net.minecraft.world.level.block.entity.TickableBlockEntity;
+import net.minecraft.world.level.block.entity.TickingBlockEntity;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.border.WorldBorder;
 import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.chunk.ChunkSource;
 import net.minecraft.world.level.chunk.ChunkStatus;
 import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.dimension.DimensionType;
+import net.minecraft.world.level.entity.EntityTypeTest;
+import net.minecraft.world.level.entity.LevelEntityGetter;
+import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.levelgen.Heightmap;
 import net.minecraft.world.level.lighting.LevelLightEngine;
 import net.minecraft.world.level.material.FluidState;
 import net.minecraft.world.level.material.Fluids;
 import net.minecraft.world.level.saveddata.maps.MapItemSavedData;
@@ -67,15 +72,21 @@
    protected static final Logger LOGGER = LogManager.getLogger();
    public static final Codec<ResourceKey<Level>> RESOURCE_KEY_CODEC;
    public static final ResourceKey<Level> OVERWORLD;
    public static final ResourceKey<Level> NETHER;
    public static final ResourceKey<Level> END;
+   public static final int MAX_LEVEL_SIZE = 30000000;
+   public static final int LONG_PARTICLE_CLIP_RANGE = 512;
+   public static final int SHORT_PARTICLE_CLIP_RANGE = 32;
    private static final Direction[] DIRECTIONS;
-   public final List<BlockEntity> blockEntityList = Lists.newArrayList();
-   public final List<BlockEntity> tickableBlockEntities = Lists.newArrayList();
-   protected final List<BlockEntity> pendingBlockEntities = Lists.newArrayList();
-   protected final List<BlockEntity> blockEntitiesToUnload = Lists.newArrayList();
+   public static final int MAX_BRIGHTNESS = 15;
+   public static final int TICKS_PER_DAY = 24000;
+   public static final int MAX_ENTITY_SPAWN_Y = 20000000;
+   public static final int MIN_ENTITY_SPAWN_Y = -20000000;
+   protected final List<TickingBlockEntity> blockEntityTickers = Lists.newArrayList();
+   private final List<TickingBlockEntity> pendingBlockEntityTickers = Lists.newArrayList();
+   private boolean tickingBlockEntities;
    private final Thread thread;
    private final boolean isDebug;
    private int skyDarken;
    protected int randValue = (new Random()).nextInt();
    protected final int addend = 1013904223;
@@ -86,11 +97,10 @@
    public final Random random = new Random();
    private final DimensionType dimensionType;
    protected final WritableLevelData levelData;
    private final Supplier<ProfilerFiller> profiler;
    public final boolean isClientSide;
-   protected boolean updatingBlockEntities;
    private final WorldBorder worldBorder;
    private final BiomeManager biomeManager;
    private final ResourceKey<Level> dimension;
 
    protected Level(WritableLevelData var1, ResourceKey<Level> var2, final DimensionType var3, Supplier<ProfilerFiller> var4, boolean var5, boolean var6, long var7) {
@@ -125,12 +135,12 @@
    @Nullable
    public MinecraftServer getServer() {
       return null;
    }
 
-   public static boolean isInWorldBounds(BlockPos var0) {
-      return !isOutsideBuildHeight(var0) && isInWorldBoundsHorizontal(var0);
+   public boolean isInWorldBounds(BlockPos var1) {
+      return !this.isOutsideBuildHeight(var1) && isInWorldBoundsHorizontal(var1);
    }
 
    public static boolean isInSpawnableBounds(BlockPos var0) {
       return !isOutsideSpawnableHeight(var0.getY()) && isInWorldBoundsHorizontal(var0);
    }
@@ -141,26 +151,19 @@
 
    private static boolean isOutsideSpawnableHeight(int var0) {
       return var0 < -20000000 || var0 >= 20000000;
    }
 
-   public static boolean isOutsideBuildHeight(BlockPos var0) {
-      return isOutsideBuildHeight(var0.getY());
-   }
-
-   public static boolean isOutsideBuildHeight(int var0) {
-      return var0 < 0 || var0 >= 256;
-   }
-
    public LevelChunk getChunkAt(BlockPos var1) {
-      return this.getChunk(var1.getX() >> 4, var1.getZ() >> 4);
+      return this.getChunk(SectionPos.blockToSectionCoord(var1.getX()), SectionPos.blockToSectionCoord(var1.getZ()));
    }
 
    public LevelChunk getChunk(int var1, int var2) {
       return (LevelChunk)this.getChunk(var1, var2, ChunkStatus.FULL);
    }
 
+   @Nullable
    public ChunkAccess getChunk(int var1, int var2, ChunkStatus var3, boolean var4) {
       ChunkAccess var5 = this.getChunkSource().getChunk(var1, var2, var3, var4);
       if (var5 == null && var4) {
          throw new IllegalStateException("Should always be able to create a chunk!");
       } else {
@@ -171,11 +174,11 @@
    public boolean setBlock(BlockPos var1, BlockState var2, int var3) {
       return this.setBlock(var1, var2, var3, 512);
    }
 
    public boolean setBlock(BlockPos var1, BlockState var2, int var3, int var4) {
-      if (isOutsideBuildHeight(var1)) {
+      if (this.isOutsideBuildHeight(var1)) {
          return false;
       } else if (!this.isClientSide && this.isDebug()) {
          return false;
       } else {
          LevelChunk var5 = this.getChunkAt(var1);
@@ -239,18 +242,26 @@
          if (!(var5.getBlock() instanceof BaseFireBlock)) {
             this.levelEvent(2001, var1, Block.getId(var5));
          }
 
          if (var2) {
-            BlockEntity var7 = var5.getBlock().isEntityBlock() ? this.getBlockEntity(var1) : null;
+            BlockEntity var7 = var5.hasBlockEntity() ? this.getBlockEntity(var1) : null;
             Block.dropResources(var5, this, var1, var7, var3, ItemStack.EMPTY);
          }
 
-         return this.setBlock(var1, var6.createLegacyBlock(), 3, var4);
+         boolean var8 = this.setBlock(var1, var6.createLegacyBlock(), 3, var4);
+         if (var8) {
+            this.gameEvent(var3, GameEvent.BLOCK_DESTROY, var1);
+         }
+
+         return var8;
       }
    }
 
+   public void addDestroyBlockEffect(BlockPos var1, BlockState var2) {
+   }
+
    public boolean setBlockAndUpdate(BlockPos var1, BlockState var2) {
       return this.setBlock(var1, var2, 3);
    }
 
    public abstract void sendBlockUpdated(BlockPos var1, BlockState var2, BlockState var3, int var4);
@@ -308,23 +319,23 @@
                   return String.format("ID #%s (%s // %s)", Registry.BLOCK.getKey(var2), var2.getDescriptionId(), var2.getClass().getCanonicalName());
                } catch (Throwable var2x) {
                   return "ID #" + Registry.BLOCK.getKey(var2);
                }
             });
-            CrashReportCategory.populateBlockDetails(var7, var1, var4);
+            CrashReportCategory.populateBlockDetails(var7, this, var1, var4);
             throw new ReportedException(var6);
          }
       }
    }
 
    public int getHeight(Heightmap.Types var1, int var2, int var3) {
       int var4;
       if (var2 >= -30000000 && var3 >= -30000000 && var2 < 30000000 && var3 < 30000000) {
-         if (this.hasChunk(var2 >> 4, var3 >> 4)) {
-            var4 = this.getChunk(var2 >> 4, var3 >> 4).getHeight(var1, var2 & 15, var3 & 15) + 1;
+         if (this.hasChunk(SectionPos.blockToSectionCoord(var2), SectionPos.blockToSectionCoord(var3))) {
+            var4 = this.getChunk(SectionPos.blockToSectionCoord(var2), SectionPos.blockToSectionCoord(var3)).getHeight(var1, var2 & 15, var3 & 15) + 1;
          } else {
-            var4 = 0;
+            var4 = this.getMinBuildHeight();
          }
       } else {
          var4 = this.getSeaLevel() + 1;
       }
 
@@ -334,20 +345,20 @@
    public LevelLightEngine getLightEngine() {
       return this.getChunkSource().getLightEngine();
    }
 
    public BlockState getBlockState(BlockPos var1) {
-      if (isOutsideBuildHeight(var1)) {
+      if (this.isOutsideBuildHeight(var1)) {
          return Blocks.VOID_AIR.defaultBlockState();
       } else {
-         LevelChunk var2 = this.getChunk(var1.getX() >> 4, var1.getZ() >> 4);
+         LevelChunk var2 = this.getChunk(SectionPos.blockToSectionCoord(var1.getX()), SectionPos.blockToSectionCoord(var1.getZ()));
          return var2.getBlockState(var1);
       }
    }
 
    public FluidState getFluidState(BlockPos var1) {
-      if (isOutsideBuildHeight(var1)) {
+      if (this.isOutsideBuildHeight(var1)) {
          return Fluids.EMPTY.defaultFluidState();
       } else {
          LevelChunk var2 = this.getChunkAt(var1);
          return var2.getFluidState(var1);
       }
@@ -373,10 +384,13 @@
    }
 
    public void addParticle(ParticleOptions var1, double var2, double var4, double var6, double var8, double var10, double var12) {
    }
 
+   public void addParticle(ParticleOptions var1, boolean var2, double var3, double var5, double var7, double var9, double var11, double var13) {
+   }
+
    public void addAlwaysVisibleParticle(ParticleOptions var1, double var2, double var4, double var6, double var8, double var10, double var12) {
    }
 
    public void addAlwaysVisibleParticle(ParticleOptions var1, boolean var2, double var3, double var5, double var7, double var9, double var11, double var13) {
    }
@@ -384,117 +398,39 @@
    public float getSunAngle(float var1) {
       float var2 = this.getTimeOfDay(var1);
       return var2 * 6.2831855F;
    }
 
-   public boolean addBlockEntity(BlockEntity var1) {
-      if (this.updatingBlockEntities) {
-         LOGGER.error("Adding block entity while ticking: {} @ {}", () -> {
-            return Registry.BLOCK_ENTITY_TYPE.getKey(var1.getType());
-         }, var1::getBlockPos);
-      }
-
-      boolean var2 = this.blockEntityList.add(var1);
-      if (var2 && var1 instanceof TickableBlockEntity) {
-         this.tickableBlockEntities.add(var1);
-      }
-
-      if (this.isClientSide) {
-         BlockPos var3 = var1.getBlockPos();
-         BlockState var4 = this.getBlockState(var3);
-         this.sendBlockUpdated(var3, var4, var4, 2);
-      }
-
-      return var2;
+   public void addBlockEntityTicker(TickingBlockEntity var1) {
+      (this.tickingBlockEntities ? this.pendingBlockEntityTickers : this.blockEntityTickers).add(var1);
    }
 
-   public void addAllPendingBlockEntities(Collection<BlockEntity> var1) {
-      if (this.updatingBlockEntities) {
-         this.pendingBlockEntities.addAll(var1);
-      } else {
-         Iterator var2 = var1.iterator();
-
-         while(var2.hasNext()) {
-            BlockEntity var3 = (BlockEntity)var2.next();
-            this.addBlockEntity(var3);
-         }
-      }
-
-   }
-
-   public void tickBlockEntities() {
+   protected void tickBlockEntities() {
       ProfilerFiller var1 = this.getProfiler();
       var1.push("blockEntities");
-      if (!this.blockEntitiesToUnload.isEmpty()) {
-         this.tickableBlockEntities.removeAll(this.blockEntitiesToUnload);
-         this.blockEntityList.removeAll(this.blockEntitiesToUnload);
-         this.blockEntitiesToUnload.clear();
+      this.tickingBlockEntities = true;
+      if (!this.pendingBlockEntityTickers.isEmpty()) {
+         this.blockEntityTickers.addAll(this.pendingBlockEntityTickers);
+         this.pendingBlockEntityTickers.clear();
       }
 
-      this.updatingBlockEntities = true;
-      Iterator var2 = this.tickableBlockEntities.iterator();
+      Iterator var2 = this.blockEntityTickers.iterator();
 
       while(var2.hasNext()) {
-         BlockEntity var3 = (BlockEntity)var2.next();
-         if (!var3.isRemoved() && var3.hasLevel()) {
-            BlockPos var4 = var3.getBlockPos();
-            if (this.getChunkSource().isTickingChunk(var4) && this.getWorldBorder().isWithinBounds(var4)) {
-               try {
-                  var1.push(() -> {
-                     return String.valueOf(BlockEntityType.getKey(var3.getType()));
-                  });
-                  if (var3.getType().isValid(this.getBlockState(var4).getBlock())) {
-                     ((TickableBlockEntity)var3).tick();
-                  } else {
-                     var3.logInvalidState();
-                  }
-
-                  var1.pop();
-               } catch (Throwable var8) {
-                  CrashReport var6 = CrashReport.forThrowable(var8, "Ticking block entity");
-                  CrashReportCategory var7 = var6.addCategory("Block entity being ticked");
-                  var3.fillCrashReportCategory(var7);
-                  throw new ReportedException(var6);
-               }
-            }
-         }
-
+         TickingBlockEntity var3 = (TickingBlockEntity)var2.next();
          if (var3.isRemoved()) {
             var2.remove();
-            this.blockEntityList.remove(var3);
-            if (this.hasChunkAt(var3.getBlockPos())) {
-               this.getChunkAt(var3.getBlockPos()).removeBlockEntity(var3.getBlockPos());
-            }
+         } else {
+            var3.tick();
          }
       }
 
-      this.updatingBlockEntities = false;
-      var1.popPush("pendingBlockEntities");
-      if (!this.pendingBlockEntities.isEmpty()) {
-         for(int var9 = 0; var9 < this.pendingBlockEntities.size(); ++var9) {
-            BlockEntity var10 = (BlockEntity)this.pendingBlockEntities.get(var9);
-            if (!var10.isRemoved()) {
-               if (!this.blockEntityList.contains(var10)) {
-                  this.addBlockEntity(var10);
-               }
-
-               if (this.hasChunkAt(var10.getBlockPos())) {
-                  LevelChunk var5 = this.getChunkAt(var10.getBlockPos());
-                  BlockState var11 = var5.getBlockState(var10.getBlockPos());
-                  var5.setBlockEntity(var10.getBlockPos(), var10);
-                  this.sendBlockUpdated(var10.getBlockPos(), var11, var11, 3);
-               }
-            }
-         }
-
-         this.pendingBlockEntities.clear();
-      }
-
+      this.tickingBlockEntities = false;
       var1.pop();
    }
 
-   public void guardEntityTick(Consumer<Entity> var1, Entity var2) {
+   public <T extends Entity> void guardEntityTick(Consumer<T> var1, T var2) {
       try {
          var1.accept(var2);
       } catch (Throwable var6) {
          CrashReport var4 = CrashReport.forThrowable(var6, "Ticking entity");
          CrashReportCategory var5 = var4.addCategory("Entity being ticked");
@@ -516,101 +452,43 @@
       var13.explode();
       var13.finalizeExplosion(true);
       return var13;
    }
 
-   public String gatherChunkSourceStats() {
-      return this.getChunkSource().gatherStats();
-   }
+   public abstract String gatherChunkSourceStats();
 
    @Nullable
    public BlockEntity getBlockEntity(BlockPos var1) {
-      if (isOutsideBuildHeight(var1)) {
+      if (this.isOutsideBuildHeight(var1)) {
          return null;
-      } else if (!this.isClientSide && Thread.currentThread() != this.thread) {
-         return null;
       } else {
-         BlockEntity var2 = null;
-         if (this.updatingBlockEntities) {
-            var2 = this.getPendingBlockEntityAt(var1);
-         }
-
-         if (var2 == null) {
-            var2 = this.getChunkAt(var1).getBlockEntity(var1, LevelChunk.EntityCreationType.IMMEDIATE);
-         }
-
-         if (var2 == null) {
-            var2 = this.getPendingBlockEntityAt(var1);
-         }
-
-         return var2;
+         return !this.isClientSide && Thread.currentThread() != this.thread ? null : this.getChunkAt(var1).getBlockEntity(var1, LevelChunk.EntityCreationType.IMMEDIATE);
       }
    }
 
-   @Nullable
-   private BlockEntity getPendingBlockEntityAt(BlockPos var1) {
-      for(int var2 = 0; var2 < this.pendingBlockEntities.size(); ++var2) {
-         BlockEntity var3 = (BlockEntity)this.pendingBlockEntities.get(var2);
-         if (!var3.isRemoved() && var3.getBlockPos().equals(var1)) {
-            return var3;
-         }
+   public void setBlockEntity(BlockEntity var1) {
+      BlockPos var2 = var1.getBlockPos();
+      if (!this.isOutsideBuildHeight(var2)) {
+         this.getChunkAt(var2).addAndRegisterBlockEntity(var1);
       }
-
-      return null;
    }
 
-   public void setBlockEntity(BlockPos var1, @Nullable BlockEntity var2) {
-      if (!isOutsideBuildHeight(var1)) {
-         if (var2 != null && !var2.isRemoved()) {
-            if (this.updatingBlockEntities) {
-               var2.setLevelAndPosition(this, var1);
-               Iterator var3 = this.pendingBlockEntities.iterator();
-
-               while(var3.hasNext()) {
-                  BlockEntity var4 = (BlockEntity)var3.next();
-                  if (var4.getBlockPos().equals(var1)) {
-                     var4.setRemoved();
-                     var3.remove();
-                  }
-               }
-
-               this.pendingBlockEntities.add(var2);
-            } else {
-               this.getChunkAt(var1).setBlockEntity(var1, var2);
-               this.addBlockEntity(var2);
-            }
-         }
-
-      }
-   }
-
    public void removeBlockEntity(BlockPos var1) {
-      BlockEntity var2 = this.getBlockEntity(var1);
-      if (var2 != null && this.updatingBlockEntities) {
-         var2.setRemoved();
-         this.pendingBlockEntities.remove(var2);
-      } else {
-         if (var2 != null) {
-            this.pendingBlockEntities.remove(var2);
-            this.blockEntityList.remove(var2);
-            this.tickableBlockEntities.remove(var2);
-         }
-
+      if (!this.isOutsideBuildHeight(var1)) {
          this.getChunkAt(var1).removeBlockEntity(var1);
       }
-
    }
 
    public boolean isLoaded(BlockPos var1) {
-      return isOutsideBuildHeight(var1) ? false : this.getChunkSource().hasChunk(var1.getX() >> 4, var1.getZ() >> 4);
+      return this.isOutsideBuildHeight(var1) ? false : this.getChunkSource().hasChunk(SectionPos.blockToSectionCoord(var1.getX()), SectionPos.blockToSectionCoord(var1.getZ()));
    }
 
    public boolean loadedAndEntityCanStandOnFace(BlockPos var1, Entity var2, Direction var3) {
-      if (isOutsideBuildHeight(var1)) {
+      if (this.isOutsideBuildHeight(var1)) {
          return false;
       } else {
-         ChunkAccess var4 = this.getChunk(var1.getX() >> 4, var1.getZ() >> 4, ChunkStatus.FULL, false);
+         ChunkAccess var4 = this.getChunk(SectionPos.blockToSectionCoord(var1.getX()), SectionPos.blockToSectionCoord(var1.getZ()), ChunkStatus.FULL, false);
          return var4 == null ? false : var4.getBlockState(var1).entityCanStandOnFace(this, var1, var2, var3);
       }
    }
 
    public boolean loadedAndEntityCanStandOn(BlockPos var1, Entity var2) {
@@ -645,97 +523,63 @@
    @Nullable
    public BlockGetter getChunkForCollisions(int var1, int var2) {
       return this.getChunk(var1, var2, ChunkStatus.FULL, false);
    }
 
-   public List<Entity> getEntities(@Nullable Entity var1, AABB var2, @Nullable Predicate<? super Entity> var3) {
+   public List<Entity> getEntities(@Nullable Entity var1, AABB var2, Predicate<? super Entity> var3) {
       this.getProfiler().incrementCounter("getEntities");
       ArrayList var4 = Lists.newArrayList();
-      int var5 = Mth.floor((var2.minX - 2.0D) / 16.0D);
-      int var6 = Mth.floor((var2.maxX + 2.0D) / 16.0D);
-      int var7 = Mth.floor((var2.minZ - 2.0D) / 16.0D);
-      int var8 = Mth.floor((var2.maxZ + 2.0D) / 16.0D);
-      ChunkSource var9 = this.getChunkSource();
-
-      for(int var10 = var5; var10 <= var6; ++var10) {
-         for(int var11 = var7; var11 <= var8; ++var11) {
-            LevelChunk var12 = var9.getChunk(var10, var11, false);
-            if (var12 != null) {
-               var12.getEntities((Entity)var1, var2, var4, var3);
-            }
+      this.getEntities().get(var2, (var3x) -> {
+         if (var3x != var1 && var3.test(var3x)) {
+            var4.add(var3x);
          }
-      }
 
-      return var4;
-   }
+         if (var3x instanceof EnderDragon) {
+            EnderDragonPart[] var4x = ((EnderDragon)var3x).getSubEntities();
+            int var5 = var4x.length;
 
-   public <T extends Entity> List<T> getEntities(@Nullable EntityType<T> var1, AABB var2, Predicate<? super T> var3) {
-      this.getProfiler().incrementCounter("getEntities");
-      int var4 = Mth.floor((var2.minX - 2.0D) / 16.0D);
-      int var5 = Mth.ceil((var2.maxX + 2.0D) / 16.0D);
-      int var6 = Mth.floor((var2.minZ - 2.0D) / 16.0D);
-      int var7 = Mth.ceil((var2.maxZ + 2.0D) / 16.0D);
-      ArrayList var8 = Lists.newArrayList();
-
-      for(int var9 = var4; var9 < var5; ++var9) {
-         for(int var10 = var6; var10 < var7; ++var10) {
-            LevelChunk var11 = this.getChunkSource().getChunk(var9, var10, false);
-            if (var11 != null) {
-               var11.getEntities((EntityType)var1, var2, var8, var3);
+            for(int var6 = 0; var6 < var5; ++var6) {
+               EnderDragonPart var7 = var4x[var6];
+               if (var3x != var1 && var3.test(var7)) {
+                  var4.add(var7);
+               }
             }
          }
-      }
 
-      return var8;
+      });
+      return var4;
    }
 
-   public <T extends Entity> List<T> getEntitiesOfClass(Class<? extends T> var1, AABB var2, @Nullable Predicate<? super T> var3) {
+   public <T extends Entity> List<T> getEntities(EntityTypeTest<Entity, T> var1, AABB var2, Predicate<? super T> var3) {
       this.getProfiler().incrementCounter("getEntities");
-      int var4 = Mth.floor((var2.minX - 2.0D) / 16.0D);
-      int var5 = Mth.ceil((var2.maxX + 2.0D) / 16.0D);
-      int var6 = Mth.floor((var2.minZ - 2.0D) / 16.0D);
-      int var7 = Mth.ceil((var2.maxZ + 2.0D) / 16.0D);
-      ArrayList var8 = Lists.newArrayList();
-      ChunkSource var9 = this.getChunkSource();
-
-      for(int var10 = var4; var10 < var5; ++var10) {
-         for(int var11 = var6; var11 < var7; ++var11) {
-            LevelChunk var12 = var9.getChunk(var10, var11, false);
-            if (var12 != null) {
-               var12.getEntitiesOfClass(var1, var2, var8, var3);
-            }
+      ArrayList var4 = Lists.newArrayList();
+      this.getEntities().get(var1, var2, (var3x) -> {
+         if (var3.test(var3x)) {
+            var4.add(var3x);
          }
-      }
 
-      return var8;
-   }
+         if (var3x instanceof EnderDragon) {
+            EnderDragonPart[] var4x = ((EnderDragon)var3x).getSubEntities();
+            int var5 = var4x.length;
 
-   public <T extends Entity> List<T> getLoadedEntitiesOfClass(Class<? extends T> var1, AABB var2, @Nullable Predicate<? super T> var3) {
-      this.getProfiler().incrementCounter("getLoadedEntities");
-      int var4 = Mth.floor((var2.minX - 2.0D) / 16.0D);
-      int var5 = Mth.ceil((var2.maxX + 2.0D) / 16.0D);
-      int var6 = Mth.floor((var2.minZ - 2.0D) / 16.0D);
-      int var7 = Mth.ceil((var2.maxZ + 2.0D) / 16.0D);
-      ArrayList var8 = Lists.newArrayList();
-      ChunkSource var9 = this.getChunkSource();
-
-      for(int var10 = var4; var10 < var5; ++var10) {
-         for(int var11 = var6; var11 < var7; ++var11) {
-            LevelChunk var12 = var9.getChunkNow(var10, var11);
-            if (var12 != null) {
-               var12.getEntitiesOfClass(var1, var2, var8, var3);
+            for(int var6 = 0; var6 < var5; ++var6) {
+               EnderDragonPart var7 = var4x[var6];
+               Entity var8 = (Entity)var1.tryCast(var7);
+               if (var8 != null && var3.test(var8)) {
+                  var4.add(var8);
+               }
             }
          }
-      }
 
-      return var8;
+      });
+      return var4;
    }
 
    @Nullable
    public abstract Entity getEntity(int var1);
 
-   public void blockEntityChanged(BlockPos var1, BlockEntity var2) {
+   public void blockEntityChanged(BlockPos var1) {
       if (this.hasChunkAt(var1)) {
          this.getChunkAt(var1).markUnsaved();
       }
 
    }
@@ -819,10 +663,13 @@
       }
 
       return var2;
    }
 
+   public void disconnect() {
+   }
+
    public long getGameTime() {
       return this.levelData.getGameTime();
    }
 
    public long getDayTime() {
@@ -850,14 +697,26 @@
 
    public float getThunderLevel(float var1) {
       return Mth.lerp(var1, this.oThunderLevel, this.thunderLevel) * this.getRainLevel(var1);
    }
 
+   public void setThunderLevel(float var1) {
+      float var2 = Mth.clamp(var1, 0.0F, 1.0F);
+      this.oThunderLevel = var2;
+      this.thunderLevel = var2;
+   }
+
    public float getRainLevel(float var1) {
       return Mth.lerp(var1, this.oRainLevel, this.rainLevel);
    }
 
+   public void setRainLevel(float var1) {
+      float var2 = Mth.clamp(var1, 0.0F, 1.0F);
+      this.oRainLevel = var2;
+      this.rainLevel = var2;
+   }
+
    public boolean isThundering() {
       if (this.dimensionType().hasSkyLight() && !this.dimensionType().hasCeiling()) {
          return (double)this.getThunderLevel(1.0F) > 0.9D;
       } else {
          return false;
@@ -887,39 +746,44 @@
    }
 
    @Nullable
    public abstract MapItemSavedData getMapData(String var1);
 
-   public abstract void setMapData(MapItemSavedData var1);
+   public abstract void setMapData(String var1, MapItemSavedData var2);
 
    public abstract int getFreeMapId();
 
    public void globalLevelEvent(int var1, BlockPos var2, int var3) {
    }
 
    public CrashReportCategory fillReportDetails(CrashReport var1) {
       CrashReportCategory var2 = var1.addCategory("Affected level", 1);
       var2.setDetail("All players", () -> {
-         return this.players().size() + " total; " + this.players();
+         int var10000 = this.players().size();
+         return var10000 + " total; " + this.players();
       });
       ChunkSource var10002 = this.getChunkSource();
+      Objects.requireNonNull(var10002);
       var2.setDetail("Chunk stats", var10002::gatherStats);
       var2.setDetail("Level dimension", () -> {
          return this.dimension().location().toString();
       });
 
       try {
-         this.levelData.fillCrashReportCategory(var2);
+         this.levelData.fillCrashReportCategory(var2, this);
       } catch (Throwable var4) {
          var2.setDetailError("Level Data Unobtainable", var4);
       }
 
       return var2;
    }
 
    public abstract void destroyBlockProgress(int var1, BlockPos var2, int var3);
 
+   public void createFireworks(double var1, double var3, double var5, double var7, double var9, double var11, @Nullable CompoundTag var13) {
+   }
+
    public abstract Scoreboard getScoreboard();
 
    public void updateNeighbourForOutputSignal(BlockPos var1, Block var2) {
       Iterator var3 = Direction.Plane.HORIZONTAL.iterator();
 
@@ -982,10 +846,14 @@
 
    public boolean isStateAtPosition(BlockPos var1, Predicate<BlockState> var2) {
       return var2.test(this.getBlockState(var1));
    }
 
+   public boolean isFluidAtPosition(BlockPos var1, Predicate<FluidState> var2) {
+      return var2.test(this.getFluidState(var1));
+   }
+
    public abstract RecipeManager getRecipeManager();
 
    public abstract TagContainer getTagManager();
 
    public BlockPos getBlockRandomPos(int var1, int var2, int var3, int var4) {
@@ -1012,10 +880,33 @@
 
    public final boolean isDebug() {
       return this.isDebug;
    }
 
+   protected abstract LevelEntityGetter<Entity> getEntities();
+
+   protected void postGameEventInRadius(@Nullable Entity var1, GameEvent var2, BlockPos var3, int var4) {
+      int var5 = SectionPos.blockToSectionCoord(var3.getX() - var4);
+      int var6 = SectionPos.blockToSectionCoord(var3.getZ() - var4);
+      int var7 = SectionPos.blockToSectionCoord(var3.getX() + var4);
+      int var8 = SectionPos.blockToSectionCoord(var3.getZ() + var4);
+      int var9 = SectionPos.blockToSectionCoord(var3.getY() - var4);
+      int var10 = SectionPos.blockToSectionCoord(var3.getY() + var4);
+
+      for(int var11 = var5; var11 <= var7; ++var11) {
+         for(int var12 = var6; var12 <= var8; ++var12) {
+            LevelChunk var13 = this.getChunkSource().getChunkNow(var11, var12);
+            if (var13 != null) {
+               for(int var14 = var9; var14 <= var10; ++var14) {
+                  var13.getEventDispatcher(var14).post(var2, var1, var3);
+               }
+            }
+         }
+      }
+
+   }
+
    static {
       RESOURCE_KEY_CODEC = ResourceLocation.CODEC.xmap(ResourceKey.elementKey(Registry.DIMENSION_REGISTRY), ResourceKey::location);
       OVERWORLD = ResourceKey.create(Registry.DIMENSION_REGISTRY, new ResourceLocation("overworld"));
       NETHER = ResourceKey.create(Registry.DIMENSION_REGISTRY, new ResourceLocation("the_nether"));
       END = ResourceKey.create(Registry.DIMENSION_REGISTRY, new ResourceLocation("the_end"));
