--- net/minecraft/world/level/BlockGetter.java
+++ net/minecraft/world/level/BlockGetter.java
@@ -14,11 +14,11 @@
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.phys.shapes.VoxelShape;
 
-public interface BlockGetter {
+public interface BlockGetter extends LevelHeightAccessor {
    @Nullable
    BlockEntity getBlockEntity(BlockPos var1);
 
    BlockState getBlockState(BlockPos var1);
 
@@ -30,20 +30,27 @@
 
    default int getMaxLightLevel() {
       return 15;
    }
 
-   default int getMaxBuildHeight() {
-      return 256;
-   }
-
    default Stream<BlockState> getBlockStates(AABB var1) {
       return BlockPos.betweenClosedStream(var1).map(this::getBlockState);
    }
 
+   default BlockHitResult isBlockInLine(ClipBlockStateContext var1) {
+      return (BlockHitResult)traverseBlocks(var1.getFrom(), var1.getTo(), var1, (var1x, var2) -> {
+         BlockState var3 = this.getBlockState(var2);
+         Vec3 var4 = var1x.getFrom().subtract(var1x.getTo());
+         return var1x.isTargetBlock().test(var3) ? new BlockHitResult(var1x.getTo(), Direction.getNearest(var4.x, var4.y, var4.z), new BlockPos(var1x.getTo()), false) : null;
+      }, (var0) -> {
+         Vec3 var1 = var0.getFrom().subtract(var0.getTo());
+         return BlockHitResult.miss(var0.getTo(), Direction.getNearest(var1.x, var1.y, var1.z), new BlockPos(var0.getTo()));
+      });
+   }
+
    default BlockHitResult clip(ClipContext var1) {
-      return (BlockHitResult)traverseBlocks(var1, (var1x, var2) -> {
+      return (BlockHitResult)traverseBlocks(var1.getFrom(), var1.getTo(), var1, (var1x, var2) -> {
          BlockState var3 = this.getBlockState(var2);
          FluidState var4 = this.getFluidState(var2);
          Vec3 var5 = var1x.getFrom();
          Vec3 var6 = var1x.getTo();
          VoxelShape var7 = var1x.getBlockShape(var3, this, var2);
@@ -86,27 +93,25 @@
          BlockPos var2 = var1.below();
          return this.getBlockState(var2).getCollisionShape(this, var2);
       });
    }
 
-   static <T> T traverseBlocks(ClipContext var0, BiFunction<ClipContext, BlockPos, T> var1, Function<ClipContext, T> var2) {
-      Vec3 var3 = var0.getFrom();
-      Vec3 var4 = var0.getTo();
-      if (var3.equals(var4)) {
-         return var2.apply(var0);
+   static <T, C> T traverseBlocks(Vec3 var0, Vec3 var1, C var2, BiFunction<C, BlockPos, T> var3, Function<C, T> var4) {
+      if (var0.equals(var1)) {
+         return var4.apply(var2);
       } else {
-         double var5 = Mth.lerp(-1.0E-7D, var4.x, var3.x);
-         double var7 = Mth.lerp(-1.0E-7D, var4.y, var3.y);
-         double var9 = Mth.lerp(-1.0E-7D, var4.z, var3.z);
-         double var11 = Mth.lerp(-1.0E-7D, var3.x, var4.x);
-         double var13 = Mth.lerp(-1.0E-7D, var3.y, var4.y);
-         double var15 = Mth.lerp(-1.0E-7D, var3.z, var4.z);
+         double var5 = Mth.lerp(-1.0E-7D, var1.x, var0.x);
+         double var7 = Mth.lerp(-1.0E-7D, var1.y, var0.y);
+         double var9 = Mth.lerp(-1.0E-7D, var1.z, var0.z);
+         double var11 = Mth.lerp(-1.0E-7D, var0.x, var1.x);
+         double var13 = Mth.lerp(-1.0E-7D, var0.y, var1.y);
+         double var15 = Mth.lerp(-1.0E-7D, var0.z, var1.z);
          int var17 = Mth.floor(var11);
          int var18 = Mth.floor(var13);
          int var19 = Mth.floor(var15);
          BlockPos.MutableBlockPos var20 = new BlockPos.MutableBlockPos(var17, var18, var19);
-         Object var21 = var1.apply(var0, var20);
+         Object var21 = var3.apply(var2, var20);
          if (var21 != null) {
             return var21;
          } else {
             double var22 = var5 - var11;
             double var24 = var7 - var13;
@@ -122,11 +127,11 @@
             double var41 = var35 * (var30 > 0 ? 1.0D - Mth.frac(var15) : Mth.frac(var15));
 
             Object var43;
             do {
                if (var37 > 1.0D && var39 > 1.0D && var41 > 1.0D) {
-                  return var2.apply(var0);
+                  return var4.apply(var2);
                }
 
                if (var37 < var39) {
                   if (var37 < var41) {
                      var17 += var28;
@@ -141,11 +146,11 @@
                } else {
                   var19 += var30;
                   var41 += var35;
                }
 
-               var43 = var1.apply(var0, var20.set(var17, var18, var19));
+               var43 = var3.apply(var2, var20.set(var17, var18, var19));
             } while(var43 == null);
 
             return var43;
          }
       }
