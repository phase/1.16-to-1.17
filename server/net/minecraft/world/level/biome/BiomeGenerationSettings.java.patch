--- net/minecraft/world/level/biome/BiomeGenerationSettings.java
+++ net/minecraft/world/level/biome/BiomeGenerationSettings.java
@@ -10,10 +10,11 @@
 import com.mojang.serialization.MapCodec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 import java.util.Collection;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.Map.Entry;
 import java.util.function.Supplier;
 import net.minecraft.Util;
 import net.minecraft.data.worldgen.SurfaceBuilders;
@@ -40,34 +41,34 @@
          return var0x.surfaceBuilder;
       });
       Codec var10002 = GenerationStep.Carving.CODEC;
       Codec var10003 = ConfiguredWorldCarver.LIST_CODEC;
       Logger var10005 = LOGGER;
-      var10005.getClass();
+      Objects.requireNonNull(var10005);
       RecordCodecBuilder var1 = Codec.simpleMap(var10002, var10003.promotePartial(Util.prefix("Carver: ", var10005::error)), StringRepresentable.keys(GenerationStep.Carving.values())).fieldOf("carvers").forGetter((var0x) -> {
          return var0x.carvers;
       });
       var10003 = ConfiguredFeature.LIST_CODEC;
       var10005 = LOGGER;
-      var10005.getClass();
+      Objects.requireNonNull(var10005);
       RecordCodecBuilder var2 = var10003.promotePartial(Util.prefix("Feature: ", var10005::error)).listOf().fieldOf("features").forGetter((var0x) -> {
          return var0x.features;
       });
       Codec var10004 = ConfiguredStructureFeature.LIST_CODEC;
       Logger var10006 = LOGGER;
-      var10006.getClass();
+      Objects.requireNonNull(var10006);
       return var0.group(var10001, var1, var2, var10004.promotePartial(Util.prefix("Structure start: ", var10006::error)).fieldOf("starts").forGetter((var0x) -> {
          return var0x.structureStarts;
       })).apply(var0, (Function4)(BiomeGenerationSettings::new));
    });
    private final Supplier<ConfiguredSurfaceBuilder<?>> surfaceBuilder;
    private final Map<GenerationStep.Carving, List<Supplier<ConfiguredWorldCarver<?>>>> carvers;
    private final List<List<Supplier<ConfiguredFeature<?, ?>>>> features;
    private final List<Supplier<ConfiguredStructureFeature<?, ?>>> structureStarts;
    private final List<ConfiguredFeature<?, ?>> flowerFeatures;
 
-   private BiomeGenerationSettings(Supplier<ConfiguredSurfaceBuilder<?>> var1, Map<GenerationStep.Carving, List<Supplier<ConfiguredWorldCarver<?>>>> var2, List<List<Supplier<ConfiguredFeature<?, ?>>>> var3, List<Supplier<ConfiguredStructureFeature<?, ?>>> var4) {
+   BiomeGenerationSettings(Supplier<ConfiguredSurfaceBuilder<?>> var1, Map<GenerationStep.Carving, List<Supplier<ConfiguredWorldCarver<?>>>> var2, List<List<Supplier<ConfiguredFeature<?, ?>>>> var3, List<Supplier<ConfiguredStructureFeature<?, ?>>> var4) {
       this.surfaceBuilder = var1;
       this.carvers = var2;
       this.features = var3;
       this.structureStarts = var4;
       this.flowerFeatures = (List)var3.stream().flatMap(Collection::stream).map(Supplier::get).flatMap(ConfiguredFeature::getFeatures).filter((var0) -> {
