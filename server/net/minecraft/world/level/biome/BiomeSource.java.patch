--- net/minecraft/world/level/biome/BiomeSource.java
+++ net/minecraft/world/level/biome/BiomeSource.java
@@ -14,10 +14,11 @@
 import java.util.function.Predicate;
 import java.util.function.Supplier;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
+import net.minecraft.core.QuartPos;
 import net.minecraft.core.Registry;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.levelgen.feature.StructureFeature;
 
 public abstract class BiomeSource implements BiomeManager.NoiseBiomeSource {
@@ -36,21 +37,23 @@
       this.possibleBiomes = var1;
    }
 
    protected abstract Codec<? extends BiomeSource> codec();
 
+   public abstract BiomeSource withSeed(long var1);
+
    public List<Biome> possibleBiomes() {
       return this.possibleBiomes;
    }
 
    public Set<Biome> getBiomesWithin(int var1, int var2, int var3, int var4) {
-      int var5 = var1 - var4 >> 2;
-      int var6 = var2 - var4 >> 2;
-      int var7 = var3 - var4 >> 2;
-      int var8 = var1 + var4 >> 2;
-      int var9 = var2 + var4 >> 2;
-      int var10 = var3 + var4 >> 2;
+      int var5 = QuartPos.fromBlock(var1 - var4);
+      int var6 = QuartPos.fromBlock(var2 - var4);
+      int var7 = QuartPos.fromBlock(var3 - var4);
+      int var8 = QuartPos.fromBlock(var1 + var4);
+      int var9 = QuartPos.fromBlock(var2 + var4);
+      int var10 = QuartPos.fromBlock(var3 + var4);
       int var11 = var8 - var5 + 1;
       int var12 = var9 - var6 + 1;
       int var13 = var10 - var7 + 1;
       HashSet var14 = Sets.newHashSet();
 
@@ -73,14 +76,14 @@
       return this.findBiomeHorizontal(var1, var2, var3, var4, 1, var5, var6, false);
    }
 
    @Nullable
    public BlockPos findBiomeHorizontal(int var1, int var2, int var3, int var4, int var5, Predicate<Biome> var6, Random var7, boolean var8) {
-      int var9 = var1 >> 2;
-      int var10 = var3 >> 2;
-      int var11 = var4 >> 2;
-      int var12 = var2 >> 2;
+      int var9 = QuartPos.fromBlock(var1);
+      int var10 = QuartPos.fromBlock(var3);
+      int var11 = QuartPos.fromBlock(var4);
+      int var12 = QuartPos.fromBlock(var2);
       BlockPos var13 = null;
       int var14 = 0;
       int var15 = var8 ? 0 : var11;
 
       for(int var16 = var15; var16 <= var11; var16 += var5) {
@@ -97,11 +100,11 @@
 
                int var22 = var9 + var19;
                int var21 = var10 + var17;
                if (var6.test(this.getNoiseBiome(var22, var12, var21))) {
                   if (var13 == null || var7.nextInt(var14 + 1) == 0) {
-                     var13 = new BlockPos(var22 << 2, var2, var21 << 2);
+                     var13 = new BlockPos(QuartPos.toBlock(var22), var2, QuartPos.toBlock(var21));
                      if (var8) {
                         return var13;
                      }
                   }
 
