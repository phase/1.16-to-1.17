--- net/minecraft/world/level/biome/Biome.java
+++ net/minecraft/world/level/biome/Biome.java
@@ -11,26 +11,34 @@
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
+import java.util.Optional;
 import java.util.Random;
 import java.util.function.Supplier;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
 import net.minecraft.CrashReport;
+import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Registry;
 import net.minecraft.core.SectionPos;
 import net.minecraft.data.BuiltinRegistries;
 import net.minecraft.resources.RegistryFileCodec;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.level.WorldGenRegion;
+import net.minecraft.sounds.Music;
+import net.minecraft.sounds.SoundEvent;
+import net.minecraft.util.Mth;
 import net.minecraft.util.StringRepresentable;
 import net.minecraft.world.level.ChunkPos;
+import net.minecraft.world.level.FoliageColor;
+import net.minecraft.world.level.GrassColor;
 import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.LightLayer;
 import net.minecraft.world.level.StructureFeatureManager;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.LiquidBlock;
@@ -85,22 +93,23 @@
    });
    public static final Codec<Supplier<Biome>> CODEC;
    public static final Codec<List<Supplier<Biome>>> LIST_CODEC;
    private final Map<Integer, List<StructureFeature<?>>> structuresByStep;
    private static final PerlinSimplexNoise TEMPERATURE_NOISE;
-   private static final PerlinSimplexNoise FROZEN_TEMPERATURE_NOISE;
+   static final PerlinSimplexNoise FROZEN_TEMPERATURE_NOISE;
    public static final PerlinSimplexNoise BIOME_INFO_NOISE;
+   private static final int TEMPERATURE_CACHE_SIZE = 1024;
    private final Biome.ClimateSettings climateSettings;
    private final BiomeGenerationSettings generationSettings;
    private final MobSpawnSettings mobSettings;
    private final float depth;
    private final float scale;
    private final Biome.BiomeCategory biomeCategory;
    private final BiomeSpecialEffects specialEffects;
    private final ThreadLocal<Long2FloatLinkedOpenHashMap> temperatureCache;
 
-   private Biome(Biome.ClimateSettings var1, Biome.BiomeCategory var2, float var3, float var4, BiomeSpecialEffects var5, BiomeGenerationSettings var6, MobSpawnSettings var7) {
+   Biome(Biome.ClimateSettings var1, Biome.BiomeCategory var2, float var3, float var4, BiomeSpecialEffects var5, BiomeGenerationSettings var6, MobSpawnSettings var7) {
       this.structuresByStep = (Map)Registry.STRUCTURE_FEATURE.stream().collect(Collectors.groupingBy((var0) -> {
          return var0.step().ordinal();
       }));
       this.temperatureCache = ThreadLocal.withInitial(() -> {
          return (Long2FloatLinkedOpenHashMap)Util.make(() -> {
@@ -119,10 +128,14 @@
       this.depth = var3;
       this.scale = var4;
       this.specialEffects = var5;
    }
 
+   public int getSkyColor() {
+      return this.specialEffects.getSkyColor();
+   }
+
    public MobSpawnSettings getMobSettings() {
       return this.mobSettings;
    }
 
    public Biome.Precipitation getPrecipitation() {
@@ -166,11 +179,11 @@
 
    public boolean shouldFreeze(LevelReader var1, BlockPos var2, boolean var3) {
       if (this.getTemperature(var2) >= 0.15F) {
          return false;
       } else {
-         if (var2.getY() >= 0 && var2.getY() < 256 && var1.getBrightness(LightLayer.BLOCK, var2) < 10) {
+         if (var2.getY() >= var1.getMinBuildHeight() && var2.getY() < var1.getMaxBuildHeight() && var1.getBrightness(LightLayer.BLOCK, var2) < 10) {
             BlockState var4 = var1.getBlockState(var2);
             FluidState var5 = var1.getFluidState(var2);
             if (var5.getType() == Fluids.WATER && var4.getBlock() instanceof LiquidBlock) {
                if (!var3) {
                   return true;
@@ -185,15 +198,19 @@
 
          return false;
       }
    }
 
+   public boolean isColdEnoughToSnow(BlockPos var1) {
+      return this.getTemperature(var1) < 0.15F;
+   }
+
    public boolean shouldSnow(LevelReader var1, BlockPos var2) {
-      if (this.getTemperature(var2) >= 0.15F) {
+      if (!this.isColdEnoughToSnow(var2)) {
          return false;
       } else {
-         if (var2.getY() >= 0 && var2.getY() < 256 && var1.getBrightness(LightLayer.BLOCK, var2) < 10) {
+         if (var2.getY() >= var1.getMinBuildHeight() && var2.getY() < var1.getMaxBuildHeight() && var1.getBrightness(LightLayer.BLOCK, var2) < 10) {
             BlockState var3 = var1.getBlockState(var2);
             if (var3.isAir() && Blocks.SNOW.defaultBlockState().canSurvive(var1, var2)) {
                return true;
             }
          }
@@ -206,66 +223,109 @@
       return this.generationSettings;
    }
 
    public void generate(StructureFeatureManager var1, ChunkGenerator var2, WorldGenRegion var3, long var4, WorldgenRandom var6, BlockPos var7) {
       List var8 = this.generationSettings.features();
-      int var9 = GenerationStep.Decoration.values().length;
+      Registry var9 = var3.registryAccess().registryOrThrow(Registry.CONFIGURED_FEATURE_REGISTRY);
+      Registry var10 = var3.registryAccess().registryOrThrow(Registry.STRUCTURE_FEATURE_REGISTRY);
+      int var11 = GenerationStep.Decoration.values().length;
 
-      for(int var10 = 0; var10 < var9; ++var10) {
-         int var11 = 0;
+      for(int var12 = 0; var12 < var11; ++var12) {
+         int var13 = 0;
+         CrashReportCategory var10000;
          if (var1.shouldGenerateFeatures()) {
-            List var12 = (List)this.structuresByStep.getOrDefault(var10, Collections.emptyList());
+            List var14 = (List)this.structuresByStep.getOrDefault(var12, Collections.emptyList());
 
-            for(Iterator var13 = var12.iterator(); var13.hasNext(); ++var11) {
-               StructureFeature var14 = (StructureFeature)var13.next();
-               var6.setFeatureSeed(var4, var11, var10);
-               int var15 = var7.getX() >> 4;
-               int var16 = var7.getZ() >> 4;
-               int var17 = var15 << 4;
-               int var18 = var16 << 4;
+            for(Iterator var15 = var14.iterator(); var15.hasNext(); ++var13) {
+               StructureFeature var16 = (StructureFeature)var15.next();
+               var6.setFeatureSeed(var4, var13, var12);
+               int var17 = SectionPos.blockToSectionCoord(var7.getX());
+               int var18 = SectionPos.blockToSectionCoord(var7.getZ());
+               int var19 = SectionPos.sectionToBlockCoord(var17);
+               int var20 = SectionPos.sectionToBlockCoord(var18);
+               Supplier var21 = () -> {
+                  Optional var10000 = var10.getResourceKey(var16).map(Object::toString);
+                  Objects.requireNonNull(var16);
+                  return (String)var10000.orElseGet(var16::toString);
+               };
 
                try {
-                  var1.startsForFeature(SectionPos.of(var7), var14).forEach((var8x) -> {
-                     var8x.placeInChunk(var3, var1, var2, var6, new BoundingBox(var17, var18, var17 + 15, var18 + 15), new ChunkPos(var15, var16));
+                  int var22 = var3.getMinBuildHeight() + 1;
+                  int var26 = var3.getMaxBuildHeight() - 1;
+                  var3.setCurrentlyGenerating(var21);
+                  var1.startsForFeature(SectionPos.of(var7), var16).forEach((var10x) -> {
+                     var10x.placeInChunk(var3, var1, var2, var6, new BoundingBox(var19, var22, var20, var19 + 15, var26, var20 + 15), new ChunkPos(var17, var18));
                   });
-               } catch (Exception var21) {
-                  CrashReport var20 = CrashReport.forThrowable(var21, "Feature placement");
-                  var20.addCategory("Feature").setDetail("Id", (Object)Registry.STRUCTURE_FEATURE.getKey(var14)).setDetail("Description", () -> {
-                     return var14.toString();
-                  });
-                  throw new ReportedException(var20);
+               } catch (Exception var24) {
+                  CrashReport var23 = CrashReport.forThrowable(var24, "Feature placement");
+                  var10000 = var23.addCategory("Feature");
+                  Objects.requireNonNull(var21);
+                  var10000.setDetail("Description", var21::get);
+                  throw new ReportedException(var23);
                }
             }
          }
 
-         if (var8.size() > var10) {
-            for(Iterator var23 = ((List)var8.get(var10)).iterator(); var23.hasNext(); ++var11) {
-               Supplier var24 = (Supplier)var23.next();
-               ConfiguredFeature var25 = (ConfiguredFeature)var24.get();
-               var6.setFeatureSeed(var4, var11, var10);
+         if (var8.size() > var12) {
+            for(Iterator var27 = ((List)var8.get(var12)).iterator(); var27.hasNext(); ++var13) {
+               Supplier var28 = (Supplier)var27.next();
+               ConfiguredFeature var29 = (ConfiguredFeature)var28.get();
+               Supplier var30 = () -> {
+                  Optional var10000 = var9.getResourceKey(var29).map(Object::toString);
+                  Objects.requireNonNull(var29);
+                  return (String)var10000.orElseGet(var29::toString);
+               };
+               var6.setFeatureSeed(var4, var13, var12);
 
                try {
-                  var25.place(var3, var2, var6, var7);
-               } catch (Exception var22) {
-                  CrashReport var26 = CrashReport.forThrowable(var22, "Feature placement");
-                  var26.addCategory("Feature").setDetail("Id", (Object)Registry.FEATURE.getKey(var25.feature)).setDetail("Config", (Object)var25.config).setDetail("Description", () -> {
-                     return var25.feature.toString();
-                  });
-                  throw new ReportedException(var26);
+                  var3.setCurrentlyGenerating(var30);
+                  var29.place(var3, var2, var6, var7);
+               } catch (Exception var25) {
+                  CrashReport var31 = CrashReport.forThrowable(var25, "Feature placement");
+                  var10000 = var31.addCategory("Feature");
+                  Objects.requireNonNull(var30);
+                  var10000.setDetail("Description", var30::get);
+                  throw new ReportedException(var31);
                }
             }
          }
       }
 
+      var3.setCurrentlyGenerating((Supplier)null);
    }
 
-   public void buildSurfaceAt(Random var1, ChunkAccess var2, int var3, int var4, int var5, double var6, BlockState var8, BlockState var9, int var10, long var11) {
-      ConfiguredSurfaceBuilder var13 = (ConfiguredSurfaceBuilder)this.generationSettings.getSurfaceBuilder().get();
-      var13.initNoise(var11);
-      var13.apply(var1, var2, this, var3, var4, var5, var6, var8, var9, var10, var11);
+   public int getFogColor() {
+      return this.specialEffects.getFogColor();
    }
 
+   public int getGrassColor(double var1, double var3) {
+      int var5 = (Integer)this.specialEffects.getGrassColorOverride().orElseGet(this::getGrassColorFromTexture);
+      return this.specialEffects.getGrassColorModifier().modifyColor(var1, var3, var5);
+   }
+
+   private int getGrassColorFromTexture() {
+      double var1 = (double)Mth.clamp(this.climateSettings.temperature, 0.0F, 1.0F);
+      double var3 = (double)Mth.clamp(this.climateSettings.downfall, 0.0F, 1.0F);
+      return GrassColor.get(var1, var3);
+   }
+
+   public int getFoliageColor() {
+      return (Integer)this.specialEffects.getFoliageColorOverride().orElseGet(this::getFoliageColorFromTexture);
+   }
+
+   private int getFoliageColorFromTexture() {
+      double var1 = (double)Mth.clamp(this.climateSettings.temperature, 0.0F, 1.0F);
+      double var3 = (double)Mth.clamp(this.climateSettings.downfall, 0.0F, 1.0F);
+      return FoliageColor.get(var1, var3);
+   }
+
+   public void buildSurfaceAt(Random var1, ChunkAccess var2, int var3, int var4, int var5, double var6, BlockState var8, BlockState var9, int var10, int var11, long var12) {
+      ConfiguredSurfaceBuilder var14 = (ConfiguredSurfaceBuilder)this.generationSettings.getSurfaceBuilder().get();
+      var14.initNoise(var12);
+      var14.apply(var1, var2, this, var3, var4, var5, var6, var8, var9, var10, var11, var12);
+   }
+
    public final float getDepth() {
       return this.depth;
    }
 
    public final float getDownfall() {
@@ -282,10 +342,38 @@
 
    public BiomeSpecialEffects getSpecialEffects() {
       return this.specialEffects;
    }
 
+   public final int getWaterColor() {
+      return this.specialEffects.getWaterColor();
+   }
+
+   public final int getWaterFogColor() {
+      return this.specialEffects.getWaterFogColor();
+   }
+
+   public Optional<AmbientParticleSettings> getAmbientParticle() {
+      return this.specialEffects.getAmbientParticleSettings();
+   }
+
+   public Optional<SoundEvent> getAmbientLoop() {
+      return this.specialEffects.getAmbientLoopSoundEvent();
+   }
+
+   public Optional<AmbientMoodSettings> getAmbientMood() {
+      return this.specialEffects.getAmbientMoodSettings();
+   }
+
+   public Optional<AmbientAdditionsSettings> getAmbientAdditions() {
+      return this.specialEffects.getAmbientAdditionsSettings();
+   }
+
+   public Optional<Music> getBackgroundMusic() {
+      return this.specialEffects.getBackgroundMusic();
+   }
+
    public final Biome.BiomeCategory getBiomeCategory() {
       return this.biomeCategory;
    }
 
    public String toString() {
@@ -299,11 +387,11 @@
       TEMPERATURE_NOISE = new PerlinSimplexNoise(new WorldgenRandom(1234L), ImmutableList.of(0));
       FROZEN_TEMPERATURE_NOISE = new PerlinSimplexNoise(new WorldgenRandom(3456L), ImmutableList.of(-2, -1, 0));
       BIOME_INFO_NOISE = new PerlinSimplexNoise(new WorldgenRandom(2345L), ImmutableList.of(0));
    }
 
-   static class ClimateSettings {
+   private static class ClimateSettings {
       public static final MapCodec<Biome.ClimateSettings> CODEC = RecordCodecBuilder.mapCodec((var0) -> {
          return var0.group(Biome.Precipitation.CODEC.fieldOf("precipitation").forGetter((var0x) -> {
             return var0x.precipitation;
          }), Codec.FLOAT.fieldOf("temperature").forGetter((var0x) -> {
             return var0x.temperature;
@@ -311,23 +399,141 @@
             return var0x.temperatureModifier;
          }), Codec.FLOAT.fieldOf("downfall").forGetter((var0x) -> {
             return var0x.downfall;
          })).apply(var0, (Function4)(Biome.ClimateSettings::new));
       });
-      private final Biome.Precipitation precipitation;
-      private final float temperature;
-      private final Biome.TemperatureModifier temperatureModifier;
-      private final float downfall;
+      final Biome.Precipitation precipitation;
+      final float temperature;
+      final Biome.TemperatureModifier temperatureModifier;
+      final float downfall;
 
-      private ClimateSettings(Biome.Precipitation var1, float var2, Biome.TemperatureModifier var3, float var4) {
+      ClimateSettings(Biome.Precipitation var1, float var2, Biome.TemperatureModifier var3, float var4) {
          this.precipitation = var1;
          this.temperature = var2;
          this.temperatureModifier = var3;
          this.downfall = var4;
       }
    }
 
+   public static enum BiomeCategory implements StringRepresentable {
+      NONE("none"),
+      TAIGA("taiga"),
+      EXTREME_HILLS("extreme_hills"),
+      JUNGLE("jungle"),
+      MESA("mesa"),
+      PLAINS("plains"),
+      SAVANNA("savanna"),
+      ICY("icy"),
+      THEEND("the_end"),
+      BEACH("beach"),
+      FOREST("forest"),
+      OCEAN("ocean"),
+      DESERT("desert"),
+      RIVER("river"),
+      SWAMP("swamp"),
+      MUSHROOM("mushroom"),
+      NETHER("nether"),
+      UNDERGROUND("underground");
+
+      public static final Codec<Biome.BiomeCategory> CODEC = StringRepresentable.fromEnum(Biome.BiomeCategory::values, Biome.BiomeCategory::byName);
+      private static final Map<String, Biome.BiomeCategory> BY_NAME = (Map)Arrays.stream(values()).collect(Collectors.toMap(Biome.BiomeCategory::getName, (var0) -> {
+         return var0;
+      }));
+      private final String name;
+
+      private BiomeCategory(String var3) {
+         this.name = var3;
+      }
+
+      public String getName() {
+         return this.name;
+      }
+
+      public static Biome.BiomeCategory byName(String var0) {
+         return (Biome.BiomeCategory)BY_NAME.get(var0);
+      }
+
+      public String getSerializedName() {
+         return this.name;
+      }
+   }
+
+   public static enum Precipitation implements StringRepresentable {
+      NONE("none"),
+      RAIN("rain"),
+      SNOW("snow");
+
+      public static final Codec<Biome.Precipitation> CODEC = StringRepresentable.fromEnum(Biome.Precipitation::values, Biome.Precipitation::byName);
+      private static final Map<String, Biome.Precipitation> BY_NAME = (Map)Arrays.stream(values()).collect(Collectors.toMap(Biome.Precipitation::getName, (var0) -> {
+         return var0;
+      }));
+      private final String name;
+
+      private Precipitation(String var3) {
+         this.name = var3;
+      }
+
+      public String getName() {
+         return this.name;
+      }
+
+      public static Biome.Precipitation byName(String var0) {
+         return (Biome.Precipitation)BY_NAME.get(var0);
+      }
+
+      public String getSerializedName() {
+         return this.name;
+      }
+   }
+
+   public static enum TemperatureModifier implements StringRepresentable {
+      NONE("none") {
+         public float modifyTemperature(BlockPos var1, float var2) {
+            return var2;
+         }
+      },
+      FROZEN("frozen") {
+         public float modifyTemperature(BlockPos var1, float var2) {
+            double var3 = Biome.FROZEN_TEMPERATURE_NOISE.getValue((double)var1.getX() * 0.05D, (double)var1.getZ() * 0.05D, false) * 7.0D;
+            double var5 = Biome.BIOME_INFO_NOISE.getValue((double)var1.getX() * 0.2D, (double)var1.getZ() * 0.2D, false);
+            double var7 = var3 + var5;
+            if (var7 < 0.3D) {
+               double var9 = Biome.BIOME_INFO_NOISE.getValue((double)var1.getX() * 0.09D, (double)var1.getZ() * 0.09D, false);
+               if (var9 < 0.8D) {
+                  return 0.2F;
+               }
+            }
+
+            return var2;
+         }
+      };
+
+      private final String name;
+      public static final Codec<Biome.TemperatureModifier> CODEC = StringRepresentable.fromEnum(Biome.TemperatureModifier::values, Biome.TemperatureModifier::byName);
+      private static final Map<String, Biome.TemperatureModifier> BY_NAME = (Map)Arrays.stream(values()).collect(Collectors.toMap(Biome.TemperatureModifier::getName, (var0) -> {
+         return var0;
+      }));
+
+      public abstract float modifyTemperature(BlockPos var1, float var2);
+
+      TemperatureModifier(String var3) {
+         this.name = var3;
+      }
+
+      public String getName() {
+         return this.name;
+      }
+
+      public String getSerializedName() {
+         return this.name;
+      }
+
+      public static Biome.TemperatureModifier byName(String var0) {
+         return (Biome.TemperatureModifier)BY_NAME.get(var0);
+      }
+   }
+
    public static class ClimateParameters {
       public static final Codec<Biome.ClimateParameters> CODEC = RecordCodecBuilder.create((var0) -> {
          return var0.group(Codec.floatRange(-2.0F, 2.0F).fieldOf("temperature").forGetter((var0x) -> {
             return var0x.temperature;
          }), Codec.floatRange(-2.0F, 2.0F).fieldOf("humidity").forGetter((var0x) -> {
@@ -352,10 +558,14 @@
          this.altitude = var3;
          this.weirdness = var4;
          this.offset = var5;
       }
 
+      public String toString() {
+         return "temp: " + this.temperature + ", hum: " + this.humidity + ", alt: " + this.altitude + ", weird: " + this.weirdness + ", offset: " + this.offset;
+      }
+
       public boolean equals(Object var1) {
          if (this == var1) {
             return true;
          } else if (var1 != null && this.getClass() == var1.getClass()) {
             Biome.ClimateParameters var2 = (Biome.ClimateParameters)var1;
@@ -468,126 +678,9 @@
             throw new IllegalStateException("You are missing parameters to build a proper biome\n" + this);
          }
       }
 
       public String toString() {
-         return "BiomeBuilder{\nprecipitation=" + this.precipitation + ",\nbiomeCategory=" + this.biomeCategory + ",\ndepth=" + this.depth + ",\nscale=" + this.scale + ",\ntemperature=" + this.temperature + ",\ntemperatureModifier=" + this.temperatureModifier + ",\ndownfall=" + this.downfall + ",\nspecialEffects=" + this.specialEffects + ",\nmobSpawnSettings=" + this.mobSpawnSettings + ",\ngenerationSettings=" + this.generationSettings + ",\n" + '}';
+         return "BiomeBuilder{\nprecipitation=" + this.precipitation + ",\nbiomeCategory=" + this.biomeCategory + ",\ndepth=" + this.depth + ",\nscale=" + this.scale + ",\ntemperature=" + this.temperature + ",\ntemperatureModifier=" + this.temperatureModifier + ",\ndownfall=" + this.downfall + ",\nspecialEffects=" + this.specialEffects + ",\nmobSpawnSettings=" + this.mobSpawnSettings + ",\ngenerationSettings=" + this.generationSettings + ",\n}";
       }
    }
-
-   public static enum TemperatureModifier implements StringRepresentable {
-      NONE("none") {
-         public float modifyTemperature(BlockPos var1, float var2) {
-            return var2;
-         }
-      },
-      FROZEN("frozen") {
-         public float modifyTemperature(BlockPos var1, float var2) {
-            double var3 = Biome.FROZEN_TEMPERATURE_NOISE.getValue((double)var1.getX() * 0.05D, (double)var1.getZ() * 0.05D, false) * 7.0D;
-            double var5 = Biome.BIOME_INFO_NOISE.getValue((double)var1.getX() * 0.2D, (double)var1.getZ() * 0.2D, false);
-            double var7 = var3 + var5;
-            if (var7 < 0.3D) {
-               double var9 = Biome.BIOME_INFO_NOISE.getValue((double)var1.getX() * 0.09D, (double)var1.getZ() * 0.09D, false);
-               if (var9 < 0.8D) {
-                  return 0.2F;
-               }
-            }
-
-            return var2;
-         }
-      };
-
-      private final String name;
-      public static final Codec<Biome.TemperatureModifier> CODEC = StringRepresentable.fromEnum(Biome.TemperatureModifier::values, Biome.TemperatureModifier::byName);
-      private static final Map<String, Biome.TemperatureModifier> BY_NAME = (Map)Arrays.stream(values()).collect(Collectors.toMap(Biome.TemperatureModifier::getName, (var0) -> {
-         return var0;
-      }));
-
-      public abstract float modifyTemperature(BlockPos var1, float var2);
-
-      private TemperatureModifier(String var3) {
-         this.name = var3;
-      }
-
-      public String getName() {
-         return this.name;
-      }
-
-      public String getSerializedName() {
-         return this.name;
-      }
-
-      public static Biome.TemperatureModifier byName(String var0) {
-         return (Biome.TemperatureModifier)BY_NAME.get(var0);
-      }
-   }
-
-   public static enum Precipitation implements StringRepresentable {
-      NONE("none"),
-      RAIN("rain"),
-      SNOW("snow");
-
-      public static final Codec<Biome.Precipitation> CODEC = StringRepresentable.fromEnum(Biome.Precipitation::values, Biome.Precipitation::byName);
-      private static final Map<String, Biome.Precipitation> BY_NAME = (Map)Arrays.stream(values()).collect(Collectors.toMap(Biome.Precipitation::getName, (var0) -> {
-         return var0;
-      }));
-      private final String name;
-
-      private Precipitation(String var3) {
-         this.name = var3;
-      }
-
-      public String getName() {
-         return this.name;
-      }
-
-      public static Biome.Precipitation byName(String var0) {
-         return (Biome.Precipitation)BY_NAME.get(var0);
-      }
-
-      public String getSerializedName() {
-         return this.name;
-      }
-   }
-
-   public static enum BiomeCategory implements StringRepresentable {
-      NONE("none"),
-      TAIGA("taiga"),
-      EXTREME_HILLS("extreme_hills"),
-      JUNGLE("jungle"),
-      MESA("mesa"),
-      PLAINS("plains"),
-      SAVANNA("savanna"),
-      ICY("icy"),
-      THEEND("the_end"),
-      BEACH("beach"),
-      FOREST("forest"),
-      OCEAN("ocean"),
-      DESERT("desert"),
-      RIVER("river"),
-      SWAMP("swamp"),
-      MUSHROOM("mushroom"),
-      NETHER("nether");
-
-      public static final Codec<Biome.BiomeCategory> CODEC = StringRepresentable.fromEnum(Biome.BiomeCategory::values, Biome.BiomeCategory::byName);
-      private static final Map<String, Biome.BiomeCategory> BY_NAME = (Map)Arrays.stream(values()).collect(Collectors.toMap(Biome.BiomeCategory::getName, (var0) -> {
-         return var0;
-      }));
-      private final String name;
-
-      private BiomeCategory(String var3) {
-         this.name = var3;
-      }
-
-      public String getName() {
-         return this.name;
-      }
-
-      public static Biome.BiomeCategory byName(String var0) {
-         return (Biome.BiomeCategory)BY_NAME.get(var0);
-      }
-
-      public String getSerializedName() {
-         return this.name;
-      }
-   }
 }
