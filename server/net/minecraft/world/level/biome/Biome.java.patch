--- net/minecraft/world/level/biome/Biome.java
+++ net/minecraft/world/level/biome/Biome.java
@@ -11,10 +11,11 @@
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.Optional;
 import java.util.Random;
 import java.util.function.Supplier;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
 import net.minecraft.CrashReport;
@@ -25,12 +26,17 @@
 import net.minecraft.core.SectionPos;
 import net.minecraft.data.BuiltinRegistries;
 import net.minecraft.resources.RegistryFileCodec;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.level.WorldGenRegion;
+import net.minecraft.sounds.Music;
+import net.minecraft.sounds.SoundEvent;
+import net.minecraft.util.Mth;
 import net.minecraft.util.StringRepresentable;
 import net.minecraft.world.level.ChunkPos;
+import net.minecraft.world.level.FoliageColor;
+import net.minecraft.world.level.GrassColor;
 import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.LightLayer;
 import net.minecraft.world.level.StructureFeatureManager;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.LiquidBlock;
@@ -87,10 +93,11 @@
    public static final Codec<List<Supplier<Biome>>> LIST_CODEC;
    private final Map<Integer, List<StructureFeature<?>>> structuresByStep;
    private static final PerlinSimplexNoise TEMPERATURE_NOISE;
    private static final PerlinSimplexNoise FROZEN_TEMPERATURE_NOISE;
    public static final PerlinSimplexNoise BIOME_INFO_NOISE;
+   private static final int TEMPERATURE_CACHE_SIZE = 1024;
    private final Biome.ClimateSettings climateSettings;
    private final BiomeGenerationSettings generationSettings;
    private final MobSpawnSettings mobSettings;
    private final float depth;
    private final float scale;
@@ -119,10 +126,14 @@
       this.depth = var3;
       this.scale = var4;
       this.specialEffects = var5;
    }
 
+   public int getSkyColor() {
+      return this.specialEffects.getSkyColor();
+   }
+
    public MobSpawnSettings getMobSettings() {
       return this.mobSettings;
    }
 
    public Biome.Precipitation getPrecipitation() {
@@ -166,11 +177,11 @@
 
    public boolean shouldFreeze(LevelReader var1, BlockPos var2, boolean var3) {
       if (this.getTemperature(var2) >= 0.15F) {
          return false;
       } else {
-         if (var2.getY() >= 0 && var2.getY() < 256 && var1.getBrightness(LightLayer.BLOCK, var2) < 10) {
+         if (var2.getY() >= var1.getMinBuildHeight() && var2.getY() < var1.getMaxBuildHeight() && var1.getBrightness(LightLayer.BLOCK, var2) < 10) {
             BlockState var4 = var1.getBlockState(var2);
             FluidState var5 = var1.getFluidState(var2);
             if (var5.getType() == Fluids.WATER && var4.getBlock() instanceof LiquidBlock) {
                if (!var3) {
                   return true;
@@ -185,15 +196,19 @@
 
          return false;
       }
    }
 
+   public boolean isColdEnoughToSnow(BlockPos var1) {
+      return this.getTemperature(var1) < 0.15F;
+   }
+
    public boolean shouldSnow(LevelReader var1, BlockPos var2) {
-      if (this.getTemperature(var2) >= 0.15F) {
+      if (!this.isColdEnoughToSnow(var2)) {
          return false;
       } else {
-         if (var2.getY() >= 0 && var2.getY() < 256 && var1.getBrightness(LightLayer.BLOCK, var2) < 10) {
+         if (var2.getY() >= var1.getMinBuildHeight() && var2.getY() < var1.getMaxBuildHeight() && var1.getBrightness(LightLayer.BLOCK, var2) < 10) {
             BlockState var3 = var1.getBlockState(var2);
             if (var3.isAir() && Blocks.SNOW.defaultBlockState().canSurvive(var1, var2)) {
                return true;
             }
          }
@@ -216,18 +231,20 @@
             List var12 = (List)this.structuresByStep.getOrDefault(var10, Collections.emptyList());
 
             for(Iterator var13 = var12.iterator(); var13.hasNext(); ++var11) {
                StructureFeature var14 = (StructureFeature)var13.next();
                var6.setFeatureSeed(var4, var11, var10);
-               int var15 = var7.getX() >> 4;
-               int var16 = var7.getZ() >> 4;
-               int var17 = var15 << 4;
-               int var18 = var16 << 4;
+               int var15 = SectionPos.blockToSectionCoord(var7.getX());
+               int var16 = SectionPos.blockToSectionCoord(var7.getZ());
+               int var17 = SectionPos.sectionToBlockCoord(var15);
+               int var18 = SectionPos.sectionToBlockCoord(var16);
 
                try {
-                  var1.startsForFeature(SectionPos.of(var7), var14).forEach((var8x) -> {
-                     var8x.placeInChunk(var3, var1, var2, var6, new BoundingBox(var17, var18, var17 + 15, var18 + 15), new ChunkPos(var15, var16));
+                  int var19 = var3.getMinBuildHeight() + 1;
+                  int var27 = var3.getMaxBuildHeight() - 1;
+                  var1.startsForFeature(SectionPos.of(var7), var14).forEach((var10x) -> {
+                     var10x.placeInChunk(var3, var1, var2, var6, new BoundingBox(var17, var19, var18, var17 + 15, var27, var18 + 15), new ChunkPos(var15, var16));
                   });
                } catch (Exception var21) {
                   CrashReport var20 = CrashReport.forThrowable(var21, "Feature placement");
                   var20.addCategory("Feature").setDetail("Id", (Object)Registry.STRUCTURE_FEATURE.getKey(var14)).setDetail("Description", () -> {
                      return var14.toString();
@@ -256,10 +273,35 @@
          }
       }
 
    }
 
+   public int getFogColor() {
+      return this.specialEffects.getFogColor();
+   }
+
+   public int getGrassColor(double var1, double var3) {
+      int var5 = (Integer)this.specialEffects.getGrassColorOverride().orElseGet(this::getGrassColorFromTexture);
+      return this.specialEffects.getGrassColorModifier().modifyColor(var1, var3, var5);
+   }
+
+   private int getGrassColorFromTexture() {
+      double var1 = (double)Mth.clamp(this.climateSettings.temperature, 0.0F, 1.0F);
+      double var3 = (double)Mth.clamp(this.climateSettings.downfall, 0.0F, 1.0F);
+      return GrassColor.get(var1, var3);
+   }
+
+   public int getFoliageColor() {
+      return (Integer)this.specialEffects.getFoliageColorOverride().orElseGet(this::getFoliageColorFromTexture);
+   }
+
+   private int getFoliageColorFromTexture() {
+      double var1 = (double)Mth.clamp(this.climateSettings.temperature, 0.0F, 1.0F);
+      double var3 = (double)Mth.clamp(this.climateSettings.downfall, 0.0F, 1.0F);
+      return FoliageColor.get(var1, var3);
+   }
+
    public void buildSurfaceAt(Random var1, ChunkAccess var2, int var3, int var4, int var5, double var6, BlockState var8, BlockState var9, int var10, long var11) {
       ConfiguredSurfaceBuilder var13 = (ConfiguredSurfaceBuilder)this.generationSettings.getSurfaceBuilder().get();
       var13.initNoise(var11);
       var13.apply(var1, var2, this, var3, var4, var5, var6, var8, var9, var10, var11);
    }
@@ -282,10 +324,38 @@
 
    public BiomeSpecialEffects getSpecialEffects() {
       return this.specialEffects;
    }
 
+   public final int getWaterColor() {
+      return this.specialEffects.getWaterColor();
+   }
+
+   public final int getWaterFogColor() {
+      return this.specialEffects.getWaterFogColor();
+   }
+
+   public Optional<AmbientParticleSettings> getAmbientParticle() {
+      return this.specialEffects.getAmbientParticleSettings();
+   }
+
+   public Optional<SoundEvent> getAmbientLoop() {
+      return this.specialEffects.getAmbientLoopSoundEvent();
+   }
+
+   public Optional<AmbientMoodSettings> getAmbientMood() {
+      return this.specialEffects.getAmbientMoodSettings();
+   }
+
+   public Optional<AmbientAdditionsSettings> getAmbientAdditions() {
+      return this.specialEffects.getAmbientAdditionsSettings();
+   }
+
+   public Optional<Music> getBackgroundMusic() {
+      return this.specialEffects.getBackgroundMusic();
+   }
+
    public final Biome.BiomeCategory getBiomeCategory() {
       return this.biomeCategory;
    }
 
    public String toString() {
@@ -352,10 +422,14 @@
          this.altitude = var3;
          this.weirdness = var4;
          this.offset = var5;
       }
 
+      public String toString() {
+         return "temp: " + this.temperature + ", hum: " + this.humidity + ", alt: " + this.altitude + ", weird: " + this.weirdness + ", offset: " + this.offset;
+      }
+
       public boolean equals(Object var1) {
          if (this == var1) {
             return true;
          } else if (var1 != null && this.getClass() == var1.getClass()) {
             Biome.ClimateParameters var2 = (Biome.ClimateParameters)var1;
@@ -564,11 +638,12 @@
       OCEAN("ocean"),
       DESERT("desert"),
       RIVER("river"),
       SWAMP("swamp"),
       MUSHROOM("mushroom"),
-      NETHER("nether");
+      NETHER("nether"),
+      UNDERGROUND("underground");
 
       public static final Codec<Biome.BiomeCategory> CODEC = StringRepresentable.fromEnum(Biome.BiomeCategory::values, Biome.BiomeCategory::byName);
       private static final Map<String, Biome.BiomeCategory> BY_NAME = (Map)Arrays.stream(values()).collect(Collectors.toMap(Biome.BiomeCategory::getName, (var0) -> {
          return var0;
       }));
