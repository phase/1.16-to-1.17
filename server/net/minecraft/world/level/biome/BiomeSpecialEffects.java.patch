--- net/minecraft/world/level/biome/BiomeSpecialEffects.java
+++ net/minecraft/world/level/biome/BiomeSpecialEffects.java
@@ -51,11 +51,11 @@
    private final Optional<SoundEvent> ambientLoopSoundEvent;
    private final Optional<AmbientMoodSettings> ambientMoodSettings;
    private final Optional<AmbientAdditionsSettings> ambientAdditionsSettings;
    private final Optional<Music> backgroundMusic;
 
-   private BiomeSpecialEffects(int var1, int var2, int var3, int var4, Optional<Integer> var5, Optional<Integer> var6, BiomeSpecialEffects.GrassColorModifier var7, Optional<AmbientParticleSettings> var8, Optional<SoundEvent> var9, Optional<AmbientMoodSettings> var10, Optional<AmbientAdditionsSettings> var11, Optional<Music> var12) {
+   BiomeSpecialEffects(int var1, int var2, int var3, int var4, Optional<Integer> var5, Optional<Integer> var6, BiomeSpecialEffects.GrassColorModifier var7, Optional<AmbientParticleSettings> var8, Optional<SoundEvent> var9, Optional<AmbientMoodSettings> var10, Optional<AmbientAdditionsSettings> var11, Optional<Music> var12) {
       this.fogColor = var1;
       this.waterColor = var2;
       this.waterFogColor = var3;
       this.skyColor = var4;
       this.foliageColorOverride = var5;
@@ -66,25 +66,85 @@
       this.ambientMoodSettings = var10;
       this.ambientAdditionsSettings = var11;
       this.backgroundMusic = var12;
    }
 
+   public int getFogColor() {
+      return this.fogColor;
+   }
+
+   public int getWaterColor() {
+      return this.waterColor;
+   }
+
+   public int getWaterFogColor() {
+      return this.waterFogColor;
+   }
+
+   public int getSkyColor() {
+      return this.skyColor;
+   }
+
+   public Optional<Integer> getFoliageColorOverride() {
+      return this.foliageColorOverride;
+   }
+
+   public Optional<Integer> getGrassColorOverride() {
+      return this.grassColorOverride;
+   }
+
+   public BiomeSpecialEffects.GrassColorModifier getGrassColorModifier() {
+      return this.grassColorModifier;
+   }
+
+   public Optional<AmbientParticleSettings> getAmbientParticleSettings() {
+      return this.ambientParticleSettings;
+   }
+
+   public Optional<SoundEvent> getAmbientLoopSoundEvent() {
+      return this.ambientLoopSoundEvent;
+   }
+
+   public Optional<AmbientMoodSettings> getAmbientMoodSettings() {
+      return this.ambientMoodSettings;
+   }
+
+   public Optional<AmbientAdditionsSettings> getAmbientAdditionsSettings() {
+      return this.ambientAdditionsSettings;
+   }
+
+   public Optional<Music> getBackgroundMusic() {
+      return this.backgroundMusic;
+   }
+
    public static enum GrassColorModifier implements StringRepresentable {
       NONE("none") {
+         public int modifyColor(double var1, double var3, int var5) {
+            return var5;
+         }
       },
       DARK_FOREST("dark_forest") {
+         public int modifyColor(double var1, double var3, int var5) {
+            return (var5 & 16711422) + 2634762 >> 1;
+         }
       },
       SWAMP("swamp") {
+         public int modifyColor(double var1, double var3, int var5) {
+            double var6 = Biome.BIOME_INFO_NOISE.getValue(var1 * 0.0225D, var3 * 0.0225D, false);
+            return var6 < -0.1D ? 5011004 : 6975545;
+         }
       };
 
       private final String name;
       public static final Codec<BiomeSpecialEffects.GrassColorModifier> CODEC = StringRepresentable.fromEnum(BiomeSpecialEffects.GrassColorModifier::values, BiomeSpecialEffects.GrassColorModifier::byName);
       private static final Map<String, BiomeSpecialEffects.GrassColorModifier> BY_NAME = (Map)Arrays.stream(values()).collect(Collectors.toMap(BiomeSpecialEffects.GrassColorModifier::getName, (var0) -> {
          return var0;
       }));
 
-      private GrassColorModifier(String var3) {
+      public abstract int modifyColor(double var1, double var3, int var5);
+
+      GrassColorModifier(String var3) {
          this.name = var3;
       }
 
       public String getName() {
          return this.name;
