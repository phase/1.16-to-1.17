--- net/minecraft/world/level/entity/EntitySectionStorage.java
+++ net/minecraft/world/level/entity/EntitySectionStorage.java
@@ -1,0 +1,143 @@
+package net.minecraft.world.level.entity;
+
+import it.unimi.dsi.fastutil.longs.Long2ObjectFunction;
+import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
+import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
+import it.unimi.dsi.fastutil.longs.LongAVLTreeSet;
+import it.unimi.dsi.fastutil.longs.LongBidirectionalIterator;
+import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
+import it.unimi.dsi.fastutil.longs.LongSet;
+import it.unimi.dsi.fastutil.longs.LongSortedSet;
+import java.util.Objects;
+import java.util.Spliterators;
+import java.util.function.Consumer;
+import java.util.function.Predicate;
+import java.util.stream.LongStream;
+import java.util.stream.Stream;
+import java.util.stream.StreamSupport;
+import javax.annotation.Nullable;
+import net.minecraft.core.SectionPos;
+import net.minecraft.util.VisibleForDebug;
+import net.minecraft.world.level.ChunkPos;
+import net.minecraft.world.phys.AABB;
+
+public class EntitySectionStorage<T extends EntityAccess> {
+   private final Class<T> entityClass;
+   private final Long2ObjectFunction<Visibility> intialSectionVisibility;
+   private final Long2ObjectMap<EntitySection<T>> sections = new Long2ObjectOpenHashMap();
+   private final LongSortedSet sectionIds = new LongAVLTreeSet();
+
+   public EntitySectionStorage(Class<T> var1, Long2ObjectFunction<Visibility> var2) {
+      this.entityClass = var1;
+      this.intialSectionVisibility = var2;
+   }
+
+   public void forEachAccessibleSection(AABB var1, Consumer<EntitySection<T>> var2) {
+      int var3 = SectionPos.posToSectionCoord(var1.minX - 2.0D);
+      int var4 = SectionPos.posToSectionCoord(var1.minY - 2.0D);
+      int var5 = SectionPos.posToSectionCoord(var1.minZ - 2.0D);
+      int var6 = SectionPos.posToSectionCoord(var1.maxX + 2.0D);
+      int var7 = SectionPos.posToSectionCoord(var1.maxY + 2.0D);
+      int var8 = SectionPos.posToSectionCoord(var1.maxZ + 2.0D);
+
+      for(int var9 = var3; var9 <= var6; ++var9) {
+         long var10 = SectionPos.asLong(var9, 0, 0);
+         long var12 = SectionPos.asLong(var9, -1, -1);
+         LongBidirectionalIterator var14 = this.sectionIds.subSet(var10, var12 + 1L).iterator();
+
+         while(var14.hasNext()) {
+            long var15 = var14.nextLong();
+            int var17 = SectionPos.y(var15);
+            int var18 = SectionPos.z(var15);
+            if (var17 >= var4 && var17 <= var7 && var18 >= var5 && var18 <= var8) {
+               EntitySection var19 = (EntitySection)this.sections.get(var15);
+               if (var19 != null && var19.getStatus().isAccessible()) {
+                  var2.accept(var19);
+               }
+            }
+         }
+      }
+
+   }
+
+   public LongStream getExistingSectionPositionsInChunk(long var1) {
+      int var3 = ChunkPos.getX(var1);
+      int var4 = ChunkPos.getZ(var1);
+      LongSortedSet var5 = this.getChunkSections(var3, var4);
+      if (var5.isEmpty()) {
+         return LongStream.empty();
+      } else {
+         LongBidirectionalIterator var6 = var5.iterator();
+         return StreamSupport.longStream(Spliterators.spliteratorUnknownSize(var6, 1301), false);
+      }
+   }
+
+   private LongSortedSet getChunkSections(int var1, int var2) {
+      long var3 = SectionPos.asLong(var1, 0, var2);
+      long var5 = SectionPos.asLong(var1, -1, var2);
+      return this.sectionIds.subSet(var3, var5 + 1L);
+   }
+
+   public Stream<EntitySection<T>> getExistingSectionsInChunk(long var1) {
+      LongStream var10000 = this.getExistingSectionPositionsInChunk(var1);
+      Long2ObjectMap var10001 = this.sections;
+      var10001.getClass();
+      return var10000.mapToObj(var10001::get).filter(Objects::nonNull);
+   }
+
+   private static long getChunkKeyFromSectionKey(long var0) {
+      return ChunkPos.asLong(SectionPos.x(var0), SectionPos.z(var0));
+   }
+
+   public EntitySection<T> getOrCreateSection(long var1) {
+      return (EntitySection)this.sections.computeIfAbsent(var1, this::createSection);
+   }
+
+   @Nullable
+   public EntitySection<T> getSection(long var1) {
+      return (EntitySection)this.sections.get(var1);
+   }
+
+   private EntitySection<T> createSection(long var1) {
+      long var3 = getChunkKeyFromSectionKey(var1);
+      Visibility var5 = (Visibility)this.intialSectionVisibility.get(var3);
+      this.sectionIds.add(var1);
+      return new EntitySection(this.entityClass, var5);
+   }
+
+   public LongSet getAllChunksWithExistingSections() {
+      LongOpenHashSet var1 = new LongOpenHashSet();
+      this.sections.keySet().forEach((var1x) -> {
+         var1.add(getChunkKeyFromSectionKey(var1x));
+      });
+      return var1;
+   }
+
+   private static <T extends EntityAccess> Predicate<T> createBoundingBoxCheck(AABB var0) {
+      return (var1) -> {
+         return var1.getBoundingBox().intersects(var0);
+      };
+   }
+
+   public void getEntities(AABB var1, Consumer<T> var2) {
+      this.forEachAccessibleSection(var1, (var2x) -> {
+         var2x.getEntities(createBoundingBoxCheck(var1), var2);
+      });
+   }
+
+   public <U extends T> void getEntities(EntityTypeTest<T, U> var1, AABB var2, Consumer<U> var3) {
+      this.forEachAccessibleSection(var2, (var3x) -> {
+         var3x.getEntities(var1, createBoundingBoxCheck(var2), var3);
+      });
+   }
+
+   public void remove(long var1) {
+      this.sections.remove(var1);
+      this.sectionIds.remove(var1);
+   }
+
+   @VisibleForDebug
+   public int count() {
+      return this.sectionIds.size();
+   }
+}
