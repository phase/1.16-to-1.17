--- net/minecraft/world/level/NaturalSpawner.java
+++ net/minecraft/world/level/NaturalSpawner.java
@@ -2,25 +2,27 @@
 
 import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import it.unimi.dsi.fastutil.objects.Object2IntMaps;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
 import java.util.Iterator;
-import java.util.List;
 import java.util.Objects;
+import java.util.Optional;
 import java.util.Random;
 import java.util.function.Consumer;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.Registry;
+import net.minecraft.core.SectionPos;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.tags.BlockTags;
 import net.minecraft.tags.FluidTags;
 import net.minecraft.util.Mth;
-import net.minecraft.util.WeighedRandom;
+import net.minecraft.util.VisibleForDebug;
+import net.minecraft.util.random.WeightedRandomList;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.MobCategory;
 import net.minecraft.world.entity.MobSpawnType;
@@ -43,17 +45,23 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public final class NaturalSpawner {
    private static final Logger LOGGER = LogManager.getLogger();
+   private static final int MIN_SPAWN_DISTANCE = 24;
+   public static final int SPAWN_DISTANCE_CHUNK = 8;
+   public static final int SPAWN_DISTANCE_BLOCK = 128;
    private static final int MAGIC_NUMBER = (int)Math.pow(17.0D, 2.0D);
    private static final MobCategory[] SPAWNING_CATEGORIES = (MobCategory[])Stream.of(MobCategory.values()).filter((var0) -> {
       return var0 != MobCategory.MISC;
    }).toArray((var0) -> {
       return new MobCategory[var0];
    });
 
+   private NaturalSpawner() {
+   }
+
    public static NaturalSpawner.SpawnState createState(int var0, Iterable<Entity> var1, NaturalSpawner.ChunkGetter var2) {
       PotentialCalculator var3 = new PotentialCalculator();
       Object2IntOpenHashMap var4 = new Object2IntOpenHashMap();
       Iterator var5 = var1.iterator();
 
@@ -74,11 +82,11 @@
          } while(var7.isPersistenceRequired() || var7.requiresCustomPersistence());
 
          MobCategory var11 = var6.getType().getCategory();
          if (var11 != MobCategory.MISC) {
             BlockPos var8 = var6.blockPosition();
-            long var9 = ChunkPos.asLong(var8.getX() >> 4, var8.getZ() >> 4);
+            long var9 = ChunkPos.asLong(SectionPos.blockToSectionCoord(var8.getX()), SectionPos.blockToSectionCoord(var8.getZ()));
             var2.query(var9, (var5x) -> {
                MobSpawnSettings.MobSpawnCost var6x = getRoughBiome(var8, var5x).getMobSettings().getMobSpawnCost(var6.getType());
                if (var6x != null) {
                   var3.addCharge(var6.blockPosition(), var6x.getCharge());
                }
@@ -112,15 +120,23 @@
       var0.getProfiler().pop();
    }
 
    public static void spawnCategoryForChunk(MobCategory var0, ServerLevel var1, LevelChunk var2, NaturalSpawner.SpawnPredicate var3, NaturalSpawner.AfterSpawnCallback var4) {
       BlockPos var5 = getRandomPosWithin(var1, var2);
-      if (var5.getY() >= 1) {
+      if (var5.getY() >= var1.getMinBuildHeight() + 1) {
          spawnCategoryForPosition(var0, var1, var2, var5, var3, var4);
       }
    }
 
+   @VisibleForDebug
+   public static void spawnCategoryForPosition(MobCategory var0, ServerLevel var1, BlockPos var2) {
+      spawnCategoryForPosition(var0, var1, var1.getChunk(var2), var2, (var0x, var1x, var2x) -> {
+         return true;
+      }, (var0x, var1x) -> {
+      });
+   }
+
    public static void spawnCategoryForPosition(MobCategory var0, ServerLevel var1, ChunkAccess var2, BlockPos var3, NaturalSpawner.SpawnPredicate var4, NaturalSpawner.AfterSpawnCallback var5) {
       StructureFeatureManager var6 = var1.structureFeatureManager();
       ChunkGenerator var7 = var1.getChunkSource().getGenerator();
       int var8 = var3.getY();
       BlockState var9 = var2.getBlockState(var3);
@@ -146,36 +162,37 @@
                Player var25 = var1.getNearestPlayer(var21, (double)var8, var23, -1.0D, false);
                if (var25 != null) {
                   double var26 = var25.distanceToSqr(var21, (double)var8, var23);
                   if (isRightDistanceToPlayerAndSpawnPoint(var1, var2, var10, var26)) {
                      if (var16 == null) {
-                        var16 = getRandomSpawnMobAt(var1, var6, var7, var0, var1.random, var10);
-                        if (var16 == null) {
+                        Optional var28 = getRandomSpawnMobAt(var1, var6, var7, var0, var1.random, var10);
+                        if (!var28.isPresent()) {
                            break;
                         }
 
+                        var16 = (MobSpawnSettings.SpawnerData)var28.get();
                         var18 = var16.minCount + var1.random.nextInt(1 + var16.maxCount - var16.minCount);
                      }
 
                      if (isValidSpawnPostitionForType(var1, var0, var6, var7, var16, var10, var26) && var4.test(var16.type, var10, var2)) {
-                        Mob var28 = getMobForSpawn(var1, var16.type);
-                        if (var28 == null) {
+                        Mob var29 = getMobForSpawn(var1, var16.type);
+                        if (var29 == null) {
                            return;
                         }
 
-                        var28.moveTo(var21, (double)var8, var23, var1.random.nextFloat() * 360.0F, 0.0F);
-                        if (isValidPositionForMob(var1, var28, var26)) {
-                           var17 = var28.finalizeSpawn(var1, var1.getCurrentDifficultyAt(var28.blockPosition()), MobSpawnType.NATURAL, var17, (CompoundTag)null);
+                        var29.moveTo(var21, (double)var8, var23, var1.random.nextFloat() * 360.0F, 0.0F);
+                        if (isValidPositionForMob(var1, var29, var26)) {
+                           var17 = var29.finalizeSpawn(var1, var1.getCurrentDifficultyAt(var29.blockPosition()), MobSpawnType.NATURAL, var17, (CompoundTag)null);
                            ++var11;
                            ++var19;
-                           var1.addFreshEntityWithPassengers(var28);
-                           var5.run(var28, var2);
-                           if (var11 >= var28.getMaxSpawnClusterSize()) {
+                           var1.addFreshEntityWithPassengers(var29);
+                           var5.run(var29, var2);
+                           if (var11 >= var29.getMaxSpawnClusterSize()) {
                               return;
                            }
 
-                           if (var28.isMaxGroupSizeReached(var19)) {
+                           if (var29.isMaxGroupSizeReached(var19)) {
                               break;
                            }
                         }
                      }
                   }
@@ -239,35 +256,29 @@
       } else {
          return var1.checkSpawnRules(var0, MobSpawnType.NATURAL) && var1.checkSpawnObstruction(var0);
       }
    }
 
-   @Nullable
-   private static MobSpawnSettings.SpawnerData getRandomSpawnMobAt(ServerLevel var0, StructureFeatureManager var1, ChunkGenerator var2, MobCategory var3, Random var4, BlockPos var5) {
+   private static Optional<MobSpawnSettings.SpawnerData> getRandomSpawnMobAt(ServerLevel var0, StructureFeatureManager var1, ChunkGenerator var2, MobCategory var3, Random var4, BlockPos var5) {
       Biome var6 = var0.getBiome(var5);
-      if (var3 == MobCategory.WATER_AMBIENT && var6.getBiomeCategory() == Biome.BiomeCategory.RIVER && var4.nextFloat() < 0.98F) {
-         return null;
-      } else {
-         List var7 = mobsAt(var0, var1, var2, var3, var5, var6);
-         return var7.isEmpty() ? null : (MobSpawnSettings.SpawnerData)WeighedRandom.getRandomItem(var4, var7);
-      }
+      return var3 == MobCategory.WATER_AMBIENT && var6.getBiomeCategory() == Biome.BiomeCategory.RIVER && var4.nextFloat() < 0.98F ? Optional.empty() : mobsAt(var0, var1, var2, var3, var5, var6).getRandom(var4);
    }
 
    private static boolean canSpawnMobAt(ServerLevel var0, StructureFeatureManager var1, ChunkGenerator var2, MobCategory var3, MobSpawnSettings.SpawnerData var4, BlockPos var5) {
-      return mobsAt(var0, var1, var2, var3, var5, (Biome)null).contains(var4);
+      return mobsAt(var0, var1, var2, var3, var5, (Biome)null).unwrap().contains(var4);
    }
 
-   private static List<MobSpawnSettings.SpawnerData> mobsAt(ServerLevel var0, StructureFeatureManager var1, ChunkGenerator var2, MobCategory var3, BlockPos var4, @Nullable Biome var5) {
-      return var3 == MobCategory.MONSTER && var0.getBlockState(var4.below()).getBlock() == Blocks.NETHER_BRICKS && var1.getStructureAt(var4, false, StructureFeature.NETHER_BRIDGE).isValid() ? StructureFeature.NETHER_BRIDGE.getSpecialEnemies() : var2.getMobsAt(var5 != null ? var5 : var0.getBiome(var4), var1, var3, var4);
+   private static WeightedRandomList<MobSpawnSettings.SpawnerData> mobsAt(ServerLevel var0, StructureFeatureManager var1, ChunkGenerator var2, MobCategory var3, BlockPos var4, @Nullable Biome var5) {
+      return var3 == MobCategory.MONSTER && var0.getBlockState(var4.below()).is(Blocks.NETHER_BRICKS) && var1.getStructureAt(var4, false, StructureFeature.NETHER_BRIDGE).isValid() ? StructureFeature.NETHER_BRIDGE.getSpecialEnemies() : var2.getMobsAt(var5 != null ? var5 : var0.getBiome(var4), var1, var3, var4);
    }
 
    private static BlockPos getRandomPosWithin(Level var0, LevelChunk var1) {
       ChunkPos var2 = var1.getPos();
       int var3 = var2.getMinBlockX() + var0.random.nextInt(16);
       int var4 = var2.getMinBlockZ() + var0.random.nextInt(16);
       int var5 = var1.getHeight(Heightmap.Types.WORLD_SURFACE, var3, var4) + 1;
-      int var6 = var0.random.nextInt(var5 + 1);
+      int var6 = Mth.randomBetweenInclusive(var0.random, var0.getMinBuildHeight(), var5);
       return new BlockPos(var3, var6, var4);
    }
 
    public static boolean isValidEmptySpawnBlock(BlockGetter var0, BlockPos var1, BlockState var2, FluidState var3, EntityType<?> var4) {
       if (var2.isCollisionShapeFullBlock(var0, var1)) {
@@ -308,35 +319,44 @@
       } else {
          return false;
       }
    }
 
-   public static void spawnMobsForChunkGeneration(ServerLevelAccessor var0, Biome var1, int var2, int var3, Random var4) {
-      MobSpawnSettings var5 = var1.getMobSettings();
-      List var6 = var5.getMobs(MobCategory.CREATURE);
-      if (!var6.isEmpty()) {
-         int var7 = var2 << 4;
-         int var8 = var3 << 4;
+   public static void spawnMobsForChunkGeneration(ServerLevelAccessor var0, Biome var1, ChunkPos var2, Random var3) {
+      MobSpawnSettings var4 = var1.getMobSettings();
+      WeightedRandomList var5 = var4.getMobs(MobCategory.CREATURE);
+      if (!var5.isEmpty()) {
+         int var6 = var2.getMinBlockX();
+         int var7 = var2.getMinBlockZ();
 
-         while(var4.nextFloat() < var5.getCreatureProbability()) {
-            MobSpawnSettings.SpawnerData var9 = (MobSpawnSettings.SpawnerData)WeighedRandom.getRandomItem(var4, var6);
-            int var10 = var9.minCount + var4.nextInt(1 + var9.maxCount - var9.minCount);
+         while(true) {
+            Optional var8;
+            do {
+               if (var3.nextFloat() >= var4.getCreatureProbability()) {
+                  return;
+               }
+
+               var8 = var5.getRandom(var3);
+            } while(!var8.isPresent());
+
+            MobSpawnSettings.SpawnerData var9 = (MobSpawnSettings.SpawnerData)var8.get();
+            int var10 = var9.minCount + var3.nextInt(1 + var9.maxCount - var9.minCount);
             SpawnGroupData var11 = null;
-            int var12 = var7 + var4.nextInt(16);
-            int var13 = var8 + var4.nextInt(16);
+            int var12 = var6 + var3.nextInt(16);
+            int var13 = var7 + var3.nextInt(16);
             int var14 = var12;
             int var15 = var13;
 
             for(int var16 = 0; var16 < var10; ++var16) {
                boolean var17 = false;
 
                for(int var18 = 0; !var17 && var18 < 4; ++var18) {
                   BlockPos var19 = getTopNonCollidingPos(var0, var9.type, var12, var13);
                   if (var9.type.canSummon() && isSpawnPositionOk(SpawnPlacements.getPlacementType(var9.type), var0, var19, var9.type)) {
                      float var20 = var9.type.getWidth();
-                     double var21 = Mth.clamp((double)var12, (double)var7 + (double)var20, (double)var7 + 16.0D - (double)var20);
-                     double var23 = Mth.clamp((double)var13, (double)var8 + (double)var20, (double)var8 + 16.0D - (double)var20);
+                     double var21 = Mth.clamp((double)var12, (double)var6 + (double)var20, (double)var6 + 16.0D - (double)var20);
+                     double var23 = Mth.clamp((double)var13, (double)var7 + (double)var20, (double)var7 + 16.0D - (double)var20);
                      if (!var0.noCollision(var9.type.getAABB(var21, (double)var19.getY(), var23)) || !SpawnPlacements.checkSpawnRules(var9.type, var0, MobSpawnType.CHUNK_GENERATION, new BlockPos(var21, (double)var19.getY(), var23), var0.getRandom())) {
                         continue;
                      }
 
                      Entity var25;
@@ -345,30 +365,29 @@
                      } catch (Exception var27) {
                         LOGGER.warn((String)"Failed to create mob", (Throwable)var27);
                         continue;
                      }
 
-                     var25.moveTo(var21, (double)var19.getY(), var23, var4.nextFloat() * 360.0F, 0.0F);
+                     var25.moveTo(var21, (double)var19.getY(), var23, var3.nextFloat() * 360.0F, 0.0F);
                      if (var25 instanceof Mob) {
                         Mob var26 = (Mob)var25;
                         if (var26.checkSpawnRules(var0, MobSpawnType.CHUNK_GENERATION) && var26.checkSpawnObstruction(var0)) {
                            var11 = var26.finalizeSpawn(var0, var0.getCurrentDifficultyAt(var26.blockPosition()), MobSpawnType.CHUNK_GENERATION, var11, (CompoundTag)null);
                            var0.addFreshEntityWithPassengers(var26);
                            var17 = true;
                         }
                      }
                   }
 
-                  var12 += var4.nextInt(5) - var4.nextInt(5);
+                  var12 += var3.nextInt(5) - var3.nextInt(5);
 
-                  for(var13 += var4.nextInt(5) - var4.nextInt(5); var12 < var7 || var12 >= var7 + 16 || var13 < var8 || var13 >= var8 + 16; var13 = var15 + var4.nextInt(5) - var4.nextInt(5)) {
-                     var12 = var14 + var4.nextInt(5) - var4.nextInt(5);
+                  for(var13 += var3.nextInt(5) - var3.nextInt(5); var12 < var6 || var12 >= var6 + 16 || var13 < var7 || var13 >= var7 + 16; var13 = var15 + var3.nextInt(5) - var3.nextInt(5)) {
+                     var12 = var14 + var3.nextInt(5) - var3.nextInt(5);
                   }
                }
             }
          }
-
       }
    }
 
    private static BlockPos getTopNonCollidingPos(LevelReader var0, EntityType<?> var1, int var2, int var3) {
       int var4 = var0.getHeight(SpawnPlacements.getHeightmapType(var1), var2, var3);
@@ -378,11 +397,11 @@
             var5.move(Direction.DOWN);
          } while(!var0.getBlockState(var5).isAir());
 
          do {
             var5.move(Direction.DOWN);
-         } while(var0.getBlockState(var5).isAir() && var5.getY() > 0);
+         } while(var0.getBlockState(var5).isAir() && var5.getY() > var0.getMinBuildHeight());
       }
 
       if (SpawnPlacements.getPlacementType(var1) == SpawnPlacements.Type.ON_GROUND) {
          BlockPos var6 = var5.below();
          if (var0.getBlockState(var6).isPathfindable(var0, var6, PathComputationType.LAND)) {
@@ -458,10 +477,14 @@
 
          this.spawnPotential.addCharge(var6, var4);
          this.mobCategoryCounts.addTo(var3.getCategory(), 1);
       }
 
+      public int getSpawnableChunkCount() {
+         return this.spawnableChunkCount;
+      }
+
       public Object2IntMap<MobCategory> getMobCategoryCounts() {
          return this.unmodifiableMobCategoryCounts;
       }
 
       private boolean canSpawnForCategory(MobCategory var1) {
