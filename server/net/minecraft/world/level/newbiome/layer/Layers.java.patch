--- net/minecraft/world/level/newbiome/layer/Layers.java
+++ net/minecraft/world/level/newbiome/layer/Layers.java
@@ -8,11 +8,17 @@
 import net.minecraft.world.level.newbiome.area.AreaFactory;
 import net.minecraft.world.level.newbiome.context.BigContext;
 import net.minecraft.world.level.newbiome.context.LazyAreaContext;
 import net.minecraft.world.level.newbiome.layer.traits.AreaTransformer1;
 
-public class Layers {
+public class Layers implements LayerBiomes {
+   protected static final int WARM_ID = 1;
+   protected static final int MEDIUM_ID = 2;
+   protected static final int COLD_ID = 3;
+   protected static final int ICE_ID = 4;
+   protected static final int SPECIAL_MASK = 3840;
+   protected static final int SPECIAL_SHIFT = 8;
    private static final Int2IntMap CATEGORIES = (Int2IntMap)Util.make(new Int2IntOpenHashMap(), (var0) -> {
       register(var0, Layers.Category.BEACH, 16);
       register(var0, Layers.Category.BEACH, 26);
       register(var0, Layers.Category.DESERT, 2);
       register(var0, Layers.Category.DESERT, 17);
@@ -80,10 +86,13 @@
       register(var0, Layers.Category.TAIGA, 5);
       register(var0, Layers.Category.TAIGA, 19);
       register(var0, Layers.Category.TAIGA, 133);
    });
 
+   public Layers() {
+   }
+
    private static <T extends Area, C extends BigContext<T>> AreaFactory<T> zoom(long var0, AreaTransformer1 var2, AreaFactory<T> var3, int var4, LongFunction<C> var5) {
       AreaFactory var6 = var3;
 
       for(int var7 = 0; var7 < var4; ++var7) {
          var6 = var2.run((BigContext)var5.apply(var0 + (long)var7), var6);
@@ -171,11 +180,11 @@
 
    protected static boolean isShallowOcean(int var0) {
       return var0 == 44 || var0 == 45 || var0 == 0 || var0 == 46 || var0 == 10;
    }
 
-   static enum Category {
+   private static enum Category {
       NONE,
       TAIGA,
       EXTREME_HILLS,
       JUNGLE,
       MESA,
