--- net/minecraft/world/level/lighting/SkyLightEngine.java
+++ net/minecraft/world/level/lighting/SkyLightEngine.java
@@ -18,21 +18,11 @@
    public SkyLightEngine(LightChunkGetter var1) {
       super(var1, LightLayer.SKY, new SkyLightSectionStorage(var1));
    }
 
    protected int computeLevelFromNeighbor(long var1, long var3, int var5) {
-      if (var3 == Long.MAX_VALUE) {
-         return 15;
-      } else {
-         if (var1 == Long.MAX_VALUE) {
-            if (!((SkyLightSectionStorage)this.storage).hasLightSource(var3)) {
-               return 15;
-            }
-
-            var5 = 0;
-         }
-
+      if (var3 != Long.MAX_VALUE && var1 != Long.MAX_VALUE) {
          if (var5 >= 15) {
             return var5;
          } else {
             MutableInt var6 = new MutableInt();
             BlockState var7 = this.getStateAndOpacity(var3, var6);
@@ -43,51 +33,32 @@
                int var9 = BlockPos.getY(var1);
                int var10 = BlockPos.getZ(var1);
                int var11 = BlockPos.getX(var3);
                int var12 = BlockPos.getY(var3);
                int var13 = BlockPos.getZ(var3);
-               boolean var14 = var8 == var11 && var10 == var13;
-               int var15 = Integer.signum(var11 - var8);
-               int var16 = Integer.signum(var12 - var9);
-               int var17 = Integer.signum(var13 - var10);
-               Direction var18;
-               if (var1 == Long.MAX_VALUE) {
-                  var18 = Direction.DOWN;
+               int var14 = Integer.signum(var11 - var8);
+               int var15 = Integer.signum(var12 - var9);
+               int var16 = Integer.signum(var13 - var10);
+               Direction var17 = Direction.fromNormal(var14, var15, var16);
+               if (var17 == null) {
+                  throw new IllegalStateException(String.format("Light was spread in illegal direction %d, %d, %d", var14, var15, var16));
                } else {
-                  var18 = Direction.fromNormal(var15, var16, var17);
-               }
-
-               BlockState var19 = this.getStateAndOpacity(var1, (MutableInt)null);
-               VoxelShape var20;
-               if (var18 != null) {
-                  var20 = this.getShape(var19, var1, var18);
-                  VoxelShape var21 = this.getShape(var7, var3, var18.getOpposite());
-                  if (Shapes.faceShapeOccludes(var20, var21)) {
+                  BlockState var18 = this.getStateAndOpacity(var1, (MutableInt)null);
+                  VoxelShape var19 = this.getShape(var18, var1, var17);
+                  VoxelShape var20 = this.getShape(var7, var3, var17.getOpposite());
+                  if (Shapes.faceShapeOccludes(var19, var20)) {
                      return 15;
+                  } else {
+                     boolean var21 = var8 == var11 && var10 == var13;
+                     boolean var22 = var21 && var9 > var12;
+                     return var22 && var5 == 0 && var6.getValue() == 0 ? 0 : var5 + Math.max(1, var6.getValue());
                   }
-               } else {
-                  var20 = this.getShape(var19, var1, Direction.DOWN);
-                  if (Shapes.faceShapeOccludes(var20, Shapes.empty())) {
-                     return 15;
-                  }
-
-                  int var25 = var14 ? -1 : 0;
-                  Direction var22 = Direction.fromNormal(var15, var25, var17);
-                  if (var22 == null) {
-                     return 15;
-                  }
-
-                  VoxelShape var23 = this.getShape(var7, var3, var22.getOpposite());
-                  if (Shapes.faceShapeOccludes(Shapes.empty(), var23)) {
-                     return 15;
-                  }
                }
-
-               boolean var24 = var1 == Long.MAX_VALUE || var14 && var9 > var12;
-               return var24 && var5 == 0 && var6.getValue() == 0 ? 0 : var5 + Math.max(1, var6.getValue());
             }
          }
+      } else {
+         return 15;
       }
    }
 
    protected void checkNeighborsAfterUpdate(long var1, int var3, boolean var4) {
       long var5 = SectionPos.blockToSection(var1);
@@ -103,14 +74,14 @@
          }
 
          var10 = var11;
       }
 
-      long var28 = BlockPos.offset(var1, 0, -1 - var10 * 16, 0);
-      long var13 = SectionPos.blockToSection(var28);
+      long var30 = BlockPos.offset(var1, 0, -1 - var10 * 16, 0);
+      long var13 = SectionPos.blockToSection(var30);
       if (var5 == var13 || ((SkyLightSectionStorage)this.storage).storingLightForSection(var13)) {
-         this.checkNeighbor(var1, var28, var3, var4);
+         this.checkNeighbor(var1, var30, var3, var4);
       }
 
       long var15 = BlockPos.offset(var1, Direction.UP);
       long var17 = SectionPos.blockToSection(var15);
       if (var5 == var17 || ((SkyLightSectionStorage)this.storage).storingLightForSection(var17)) {
@@ -131,11 +102,12 @@
                this.checkNeighbor(var1, var24, var3, var4);
                break;
             }
 
             if (((SkyLightSectionStorage)this.storage).storingLightForSection(var26)) {
-               this.checkNeighbor(var1, var24, var3, var4);
+               long var28 = BlockPos.offset(var1, 0, -var23, 0);
+               this.checkNeighbor(var28, var24, var3, var4);
             }
 
             ++var23;
             if (var23 > var10 * 16) {
                break;
@@ -145,69 +117,45 @@
 
    }
 
    protected int getComputedLevel(long var1, long var3, int var5) {
       int var6 = var5;
-      if (Long.MAX_VALUE != var3) {
-         int var7 = this.computeLevelFromNeighbor(Long.MAX_VALUE, var1, 0);
-         if (var5 > var7) {
-            var6 = var7;
-         }
-
-         if (var6 == 0) {
-            return var6;
-         }
-      }
-
-      long var21 = SectionPos.blockToSection(var1);
-      DataLayer var9 = ((SkyLightSectionStorage)this.storage).getDataLayer(var21, true);
+      long var7 = SectionPos.blockToSection(var1);
+      DataLayer var9 = ((SkyLightSectionStorage)this.storage).getDataLayer(var7, true);
       Direction[] var10 = DIRECTIONS;
       int var11 = var10.length;
 
       for(int var12 = 0; var12 < var11; ++var12) {
          Direction var13 = var10[var12];
          long var14 = BlockPos.offset(var1, var13);
-         long var16 = SectionPos.blockToSection(var14);
-         DataLayer var18;
-         if (var21 == var16) {
-            var18 = var9;
-         } else {
-            var18 = ((SkyLightSectionStorage)this.storage).getDataLayer(var16, true);
-         }
+         if (var14 != var3) {
+            long var16 = SectionPos.blockToSection(var14);
+            DataLayer var18;
+            if (var7 == var16) {
+               var18 = var9;
+            } else {
+               var18 = ((SkyLightSectionStorage)this.storage).getDataLayer(var16, true);
+            }
 
-         if (var18 != null) {
-            if (var14 != var3) {
-               int var22 = this.computeLevelFromNeighbor(var14, var1, this.getLevel(var18, var14));
-               if (var6 > var22) {
-                  var6 = var22;
+            int var19;
+            if (var18 != null) {
+               var19 = this.getLevel(var18, var14);
+            } else {
+               if (var13 == Direction.DOWN) {
+                  continue;
                }
 
-               if (var6 == 0) {
-                  return var6;
-               }
+               var19 = 15 - ((SkyLightSectionStorage)this.storage).getLightValue(var14, true);
             }
-         } else if (var13 != Direction.DOWN) {
-            for(var14 = BlockPos.getFlatIndex(var14); !((SkyLightSectionStorage)this.storage).storingLightForSection(var16) && !((SkyLightSectionStorage)this.storage).isAboveData(var16); var14 = BlockPos.offset(var14, 0, 16, 0)) {
-               var16 = SectionPos.offset(var16, Direction.UP);
+
+            int var20 = this.computeLevelFromNeighbor(var14, var1, var19);
+            if (var6 > var20) {
+               var6 = var20;
             }
 
-            DataLayer var19 = ((SkyLightSectionStorage)this.storage).getDataLayer(var16, true);
-            if (var14 != var3) {
-               int var20;
-               if (var19 != null) {
-                  var20 = this.computeLevelFromNeighbor(var14, var1, this.getLevel(var19, var14));
-               } else {
-                  var20 = ((SkyLightSectionStorage)this.storage).lightOnInSection(var16) ? 0 : 15;
-               }
-
-               if (var6 > var20) {
-                  var6 = var20;
-               }
-
-               if (var6 == 0) {
-                  return var6;
-               }
+            if (var6 == 0) {
+               return var6;
             }
          }
       }
 
       return var6;
@@ -228,9 +176,14 @@
          }
       }
 
    }
 
+   public String getDebugData(long var1) {
+      String var10000 = super.getDebugData(var1);
+      return var10000 + (((SkyLightSectionStorage)this.storage).isAboveData(var1) ? "*" : "");
+   }
+
    static {
       HORIZONTALS = new Direction[]{Direction.NORTH, Direction.SOUTH, Direction.WEST, Direction.EAST};
    }
 }
