--- net/minecraft/world/level/material/WaterFluid.java
+++ net/minecraft/world/level/material/WaterFluid.java
@@ -1,13 +1,22 @@
 package net.minecraft.world.level.material;
 
+import java.util.Optional;
+import java.util.Random;
+import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
+import net.minecraft.core.particles.ParticleOptions;
+import net.minecraft.core.particles.ParticleTypes;
+import net.minecraft.sounds.SoundEvent;
+import net.minecraft.sounds.SoundEvents;
+import net.minecraft.sounds.SoundSource;
 import net.minecraft.tags.FluidTags;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.level.BlockGetter;
+import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.LiquidBlock;
@@ -29,16 +38,32 @@
 
    public Item getBucket() {
       return Items.WATER_BUCKET;
    }
 
+   public void animateTick(Level var1, BlockPos var2, FluidState var3, Random var4) {
+      if (!var3.isSource() && !(Boolean)var3.getValue(FALLING)) {
+         if (var4.nextInt(64) == 0) {
+            var1.playLocalSound((double)var2.getX() + 0.5D, (double)var2.getY() + 0.5D, (double)var2.getZ() + 0.5D, SoundEvents.WATER_AMBIENT, SoundSource.BLOCKS, var4.nextFloat() * 0.25F + 0.75F, var4.nextFloat() + 0.5F, false);
+         }
+      } else if (var4.nextInt(10) == 0) {
+         var1.addParticle(ParticleTypes.UNDERWATER, (double)var2.getX() + var4.nextDouble(), (double)var2.getY() + var4.nextDouble(), (double)var2.getZ() + var4.nextDouble(), 0.0D, 0.0D, 0.0D);
+      }
+
+   }
+
+   @Nullable
+   public ParticleOptions getDripParticle() {
+      return ParticleTypes.DRIPPING_WATER;
+   }
+
    protected boolean canConvertToSource() {
       return true;
    }
 
    protected void beforeDestroyingBlock(LevelAccessor var1, BlockPos var2, BlockState var3) {
-      BlockEntity var4 = var3.getBlock().isEntityBlock() ? var1.getBlockEntity(var2) : null;
+      BlockEntity var4 = var3.hasBlockEntity() ? var1.getBlockEntity(var2) : null;
       Block.dropResources(var3, var1, var2, var4);
    }
 
    public int getSlopeFindDistance(LevelReader var1) {
       return 4;
@@ -66,10 +91,14 @@
 
    protected float getExplosionResistance() {
       return 100.0F;
    }
 
+   public Optional<SoundEvent> getPickupSound() {
+      return Optional.of(SoundEvents.BUCKET_FILL);
+   }
+
    public static class Flowing extends WaterFluid {
       public Flowing() {
       }
 
       protected void createFluidStateDefinition(StateDefinition.Builder<Fluid, FluidState> var1) {
