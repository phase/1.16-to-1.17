--- net/minecraft/world/level/material/Fluid.java
+++ net/minecraft/world/level/material/Fluid.java
@@ -1,11 +1,15 @@
 package net.minecraft.world.level.material;
 
+import java.util.Optional;
 import java.util.Random;
+import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.IdMapper;
+import net.minecraft.core.particles.ParticleOptions;
+import net.minecraft.sounds.SoundEvent;
 import net.minecraft.tags.Tag;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelReader;
@@ -41,16 +45,24 @@
       return this.defaultFluidState;
    }
 
    public abstract Item getBucket();
 
+   protected void animateTick(Level var1, BlockPos var2, FluidState var3, Random var4) {
+   }
+
    protected void tick(Level var1, BlockPos var2, FluidState var3) {
    }
 
    protected void randomTick(Level var1, BlockPos var2, FluidState var3, Random var4) {
    }
 
+   @Nullable
+   protected ParticleOptions getDripParticle() {
+      return null;
+   }
+
    protected abstract boolean canBeReplacedWith(FluidState var1, BlockGetter var2, BlockPos var3, Fluid var4, Direction var5);
 
    protected abstract Vec3 getFlow(BlockGetter var1, BlockPos var2, FluidState var3);
 
    public abstract int getTickDelay(LevelReader var1);
@@ -82,6 +94,10 @@
    public boolean is(Tag<Fluid> var1) {
       return var1.contains(this);
    }
 
    public abstract VoxelShape getShape(FluidState var1, BlockGetter var2, BlockPos var3);
+
+   public Optional<SoundEvent> getPickupSound() {
+      return Optional.empty();
+   }
 }
