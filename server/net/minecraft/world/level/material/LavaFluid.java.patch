--- net/minecraft/world/level/material/LavaFluid.java
+++ net/minecraft/world/level/material/LavaFluid.java
@@ -1,10 +1,17 @@
 package net.minecraft.world.level.material;
 
+import java.util.Optional;
 import java.util.Random;
+import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
+import net.minecraft.core.particles.ParticleOptions;
+import net.minecraft.core.particles.ParticleTypes;
+import net.minecraft.sounds.SoundEvent;
+import net.minecraft.sounds.SoundEvents;
+import net.minecraft.sounds.SoundSource;
 import net.minecraft.tags.FluidTags;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.GameRules;
@@ -16,10 +23,12 @@
 import net.minecraft.world.level.block.LiquidBlock;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.StateDefinition;
 
 public abstract class LavaFluid extends FlowingFluid {
+   public static final float MIN_LEVEL_CUTOFF = 0.44444445F;
+
    public LavaFluid() {
    }
 
    public Fluid getFlowing() {
       return Fluids.FLOWING_LAVA;
@@ -31,10 +40,28 @@
 
    public Item getBucket() {
       return Items.LAVA_BUCKET;
    }
 
+   public void animateTick(Level var1, BlockPos var2, FluidState var3, Random var4) {
+      BlockPos var5 = var2.above();
+      if (var1.getBlockState(var5).isAir() && !var1.getBlockState(var5).isSolidRender(var1, var5)) {
+         if (var4.nextInt(100) == 0) {
+            double var6 = (double)var2.getX() + var4.nextDouble();
+            double var8 = (double)var2.getY() + 1.0D;
+            double var10 = (double)var2.getZ() + var4.nextDouble();
+            var1.addParticle(ParticleTypes.LAVA, var6, var8, var10, 0.0D, 0.0D, 0.0D);
+            var1.playLocalSound(var6, var8, var10, SoundEvents.LAVA_POP, SoundSource.BLOCKS, 0.2F + var4.nextFloat() * 0.2F, 0.9F + var4.nextFloat() * 0.15F, false);
+         }
+
+         if (var4.nextInt(200) == 0) {
+            var1.playLocalSound((double)var2.getX(), (double)var2.getY(), (double)var2.getZ(), SoundEvents.LAVA_AMBIENT, SoundSource.BLOCKS, 0.2F + var4.nextFloat() * 0.2F, 0.9F + var4.nextFloat() * 0.15F, false);
+         }
+      }
+
+   }
+
    public void randomTick(Level var1, BlockPos var2, FluidState var3, Random var4) {
       if (var1.getGameRules().getBoolean(GameRules.RULE_DOFIRETICK)) {
          int var5 = var4.nextInt(3);
          if (var5 > 0) {
             BlockPos var6 = var2;
@@ -84,13 +111,18 @@
 
       return false;
    }
 
    private boolean isFlammable(LevelReader var1, BlockPos var2) {
-      return var2.getY() >= 0 && var2.getY() < 256 && !var1.hasChunkAt(var2) ? false : var1.getBlockState(var2).getMaterial().isFlammable();
+      return var2.getY() >= var1.getMinBuildHeight() && var2.getY() < var1.getMaxBuildHeight() && !var1.hasChunkAt(var2) ? false : var1.getBlockState(var2).getMaterial().isFlammable();
    }
 
+   @Nullable
+   public ParticleOptions getDripParticle() {
+      return ParticleTypes.DRIPPING_LAVA;
+   }
+
    protected void beforeDestroyingBlock(LevelAccessor var1, BlockPos var2, BlockState var3) {
       this.fizz(var1, var2);
    }
 
    public int getSlopeFindDistance(LevelReader var1) {
@@ -156,10 +188,14 @@
 
    protected float getExplosionResistance() {
       return 100.0F;
    }
 
+   public Optional<SoundEvent> getPickupSound() {
+      return Optional.of(SoundEvents.BUCKET_FILL_LAVA);
+   }
+
    public static class Flowing extends LavaFluid {
       public Flowing() {
       }
 
       protected void createFluidStateDefinition(StateDefinition.Builder<Fluid, FluidState> var1) {
