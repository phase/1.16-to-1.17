--- net/minecraft/world/level/material/FluidState.java
+++ net/minecraft/world/level/material/FluidState.java
@@ -2,13 +2,15 @@
 
 import com.google.common.collect.ImmutableMap;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.MapCodec;
 import java.util.Random;
+import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.Registry;
+import net.minecraft.core.particles.ParticleOptions;
 import net.minecraft.tags.Tag;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.StateHolder;
@@ -16,10 +18,12 @@
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.phys.shapes.VoxelShape;
 
 public final class FluidState extends StateHolder<Fluid, FluidState> {
    public static final Codec<FluidState> CODEC;
+   public static final int AMOUNT_MAX = 9;
+   public static final int AMOUNT_FULL = 8;
 
    public FluidState(Fluid var1, ImmutableMap<Property<?>, Comparable<?>> var2, MapCodec<FluidState> var3) {
       super(var1, var2, var3);
    }
 
@@ -29,10 +33,14 @@
 
    public boolean isSource() {
       return this.getType().isSource(this);
    }
 
+   public boolean isSourceOfType(Fluid var1) {
+      return this.owner == var1 && ((Fluid)this.owner).isSource(this);
+   }
+
    public boolean isEmpty() {
       return this.getType().isEmpty();
    }
 
    public float getHeight(BlockGetter var1, BlockPos var2) {
@@ -45,14 +53,32 @@
 
    public int getAmount() {
       return this.getType().getAmount(this);
    }
 
+   public boolean shouldRenderBackwardUpFace(BlockGetter var1, BlockPos var2) {
+      for(int var3 = -1; var3 <= 1; ++var3) {
+         for(int var4 = -1; var4 <= 1; ++var4) {
+            BlockPos var5 = var2.offset(var3, 0, var4);
+            FluidState var6 = var1.getFluidState(var5);
+            if (!var6.getType().isSame(this.getType()) && !var1.getBlockState(var5).isSolidRender(var1, var5)) {
+               return true;
+            }
+         }
+      }
+
+      return false;
+   }
+
    public void tick(Level var1, BlockPos var2) {
       this.getType().tick(var1, var2, this);
    }
 
+   public void animateTick(Level var1, BlockPos var2, Random var3) {
+      this.getType().animateTick(var1, var2, this, var3);
+   }
+
    public boolean isRandomlyTicking() {
       return this.getType().isRandomlyTicking();
    }
 
    public void randomTick(Level var1, BlockPos var2, Random var3) {
@@ -65,10 +91,15 @@
 
    public BlockState createLegacyBlock() {
       return this.getType().createLegacyBlock(this);
    }
 
+   @Nullable
+   public ParticleOptions getDripParticle() {
+      return this.getType().getDripParticle();
+   }
+
    public boolean is(Tag<Fluid> var1) {
       return this.getType().is(var1);
    }
 
    public float getExplosionResistance() {
