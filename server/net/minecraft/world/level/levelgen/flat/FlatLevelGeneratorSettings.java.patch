--- net/minecraft/world/level/levelgen/flat/FlatLevelGeneratorSettings.java
+++ net/minecraft/world/level/levelgen/flat/FlatLevelGeneratorSettings.java
@@ -3,39 +3,43 @@
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.mojang.datafixers.util.Function6;
 import com.mojang.serialization.Codec;
+import com.mojang.serialization.DataResult;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 import java.util.Arrays;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Optional;
 import java.util.Map.Entry;
+import java.util.function.Function;
 import java.util.function.Supplier;
 import net.minecraft.Util;
 import net.minecraft.core.Registry;
 import net.minecraft.data.worldgen.Features;
 import net.minecraft.data.worldgen.StructureFeatures;
 import net.minecraft.resources.RegistryLookupCodec;
+import net.minecraft.world.level.LevelHeightAccessor;
 import net.minecraft.world.level.biome.Biome;
 import net.minecraft.world.level.biome.BiomeGenerationSettings;
 import net.minecraft.world.level.biome.Biomes;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.dimension.DimensionType;
 import net.minecraft.world.level.levelgen.GenerationStep;
 import net.minecraft.world.level.levelgen.Heightmap;
 import net.minecraft.world.level.levelgen.StructureSettings;
 import net.minecraft.world.level.levelgen.feature.ConfiguredStructureFeature;
 import net.minecraft.world.level.levelgen.feature.Feature;
 import net.minecraft.world.level.levelgen.feature.StructureFeature;
 import net.minecraft.world.level.levelgen.feature.configurations.LayerConfiguration;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class FlatLevelGeneratorSettings {
+public class FlatLevelGeneratorSettings implements LevelHeightAccessor {
    private static final Logger LOGGER = LogManager.getLogger();
    public static final Codec<FlatLevelGeneratorSettings> CODEC = RecordCodecBuilder.create((var0) -> {
       return var0.group(RegistryLookupCodec.create(Registry.BIOME_REGISTRY).forGetter((var0x) -> {
          return var0x.biomes;
       }), StructureSettings.CODEC.fieldOf("structures").forGetter(FlatLevelGeneratorSettings::structureSettings), FlatLayerInfo.CODEC.listOf().fieldOf("layers").forGetter(FlatLevelGeneratorSettings::getLayersInfo), Codec.BOOL.fieldOf("lakes").orElse(false).forGetter((var0x) -> {
@@ -43,11 +47,11 @@
       }), Codec.BOOL.fieldOf("features").orElse(false).forGetter((var0x) -> {
          return var0x.decoration;
       }), Biome.CODEC.optionalFieldOf("biome").orElseGet(Optional::empty).forGetter((var0x) -> {
          return Optional.of(var0x.biome);
       })).apply(var0, (Function6)(FlatLevelGeneratorSettings::new));
-   }).stable();
+   }).comapFlatMap(FlatLevelGeneratorSettings::validateHeight, Function.identity()).stable();
    private static final Map<StructureFeature<?>, ConfiguredStructureFeature<?, ?>> STRUCTURE_FEATURES = (Map)Util.make(Maps.newHashMap(), (var0) -> {
       var0.put(StructureFeature.MINESHAFT, StructureFeatures.MINESHAFT);
       var0.put(StructureFeature.VILLAGE, StructureFeatures.VILLAGE_PLAINS);
       var0.put(StructureFeature.STRONGHOLD, StructureFeatures.STRONGHOLD);
       var0.put(StructureFeature.SWAMP_HUT, StructureFeatures.SWAMP_HUT);
@@ -71,11 +75,16 @@
    private final BlockState[] layers;
    private boolean voidGen;
    private boolean decoration;
    private boolean addLakes;
 
-   public FlatLevelGeneratorSettings(Registry<Biome> var1, StructureSettings var2, List<FlatLayerInfo> var3, boolean var4, boolean var5, Optional<Supplier<Biome>> var6) {
+   private static DataResult<FlatLevelGeneratorSettings> validateHeight(FlatLevelGeneratorSettings var0) {
+      int var1 = var0.layersInfo.stream().mapToInt(FlatLayerInfo::getHeight).sum();
+      return var1 > DimensionType.Y_SIZE ? DataResult.error("Sum of layer heights is > " + DimensionType.Y_SIZE, (Object)var0) : DataResult.success(var0);
+   }
+
+   private FlatLevelGeneratorSettings(Registry<Biome> var1, StructureSettings var2, List<FlatLayerInfo> var3, boolean var4, boolean var5, Optional<Supplier<Biome>> var6) {
       this(var2, var1);
       if (var4) {
          this.setAddLakes();
       }
 
@@ -96,18 +105,16 @@
 
    }
 
    public FlatLevelGeneratorSettings(StructureSettings var1, Registry<Biome> var2) {
       this.layersInfo = Lists.newArrayList();
-      this.layers = new BlockState[256];
-      this.decoration = false;
-      this.addLakes = false;
       this.biomes = var2;
       this.structureSettings = var1;
       this.biome = () -> {
          return (Biome)var2.getOrThrow(Biomes.PLAINS);
       };
+      this.layers = new BlockState[this.getHeight()];
    }
 
    public void setDecoration() {
       this.decoration = true;
    }
@@ -154,11 +161,12 @@
 
       for(var6 = 0; var6 < var12.length; ++var6) {
          BlockState var13 = var12[var6];
          if (var13 != null && !Heightmap.Types.MOTION_BLOCKING.isOpaque().test(var13)) {
             this.layers[var6] = null;
-            var3.addFeature(GenerationStep.Decoration.TOP_LAYER_MODIFICATION, Feature.FILL_LAYER.configured(new LayerConfiguration(var6, var13)));
+            int var14 = this.getMinBuildHeight() + var6;
+            var3.addFeature(GenerationStep.Decoration.TOP_LAYER_MODIFICATION, Feature.FILL_LAYER.configured(new LayerConfiguration(var14, var13)));
          }
       }
 
       return (new Biome.BiomeBuilder()).precipitation(var1.getPrecipitation()).biomeCategory(var1.getBiomeCategory()).depth(var1.getDepth()).scale(var1.getScale()).temperature(var1.getBaseTemperature()).downfall(var1.getDownfall()).specialEffects(var1.getSpecialEffects()).generationSettings(var3.build()).mobSpawnSettings(var1.getMobSettings()).build();
    }
@@ -179,11 +187,11 @@
       return this.layers;
    }
 
    public void updateLayers() {
       Arrays.fill(this.layers, 0, this.layers.length, (Object)null);
-      int var1 = 0;
+      int var1 = this.getMinBuildHeight();
 
       FlatLayerInfo var3;
       for(Iterator var2 = this.layersInfo.iterator(); var2.hasNext(); var1 += var3.getHeight()) {
          var3 = (FlatLayerInfo)var2.next();
          var3.setStart(var1);
@@ -197,11 +205,11 @@
 
          for(int var7 = var6.getStart(); var7 < var6.getStart() + var6.getHeight(); ++var7) {
             BlockState var4 = var6.getBlockState();
             if (!var4.is(Blocks.AIR)) {
                this.voidGen = false;
-               this.layers[var7] = var4;
+               this.layers[this.getLayerIndex(var7)] = var4;
             }
          }
       }
 
    }
@@ -216,6 +224,18 @@
       var2.getLayersInfo().add(new FlatLayerInfo(2, Blocks.DIRT));
       var2.getLayersInfo().add(new FlatLayerInfo(1, Blocks.GRASS_BLOCK));
       var2.updateLayers();
       return var2;
    }
+
+   public int getLayerIndex(int var1) {
+      return var1 - this.getMinBuildHeight();
+   }
+
+   public int getMinBuildHeight() {
+      return 0;
+   }
+
+   public int getHeight() {
+      return 256;
+   }
 }
