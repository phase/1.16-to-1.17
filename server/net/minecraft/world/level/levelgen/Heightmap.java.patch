--- net/minecraft/world/level/levelgen/Heightmap.java
+++ net/minecraft/world/level/levelgen/Heightmap.java
@@ -2,38 +2,46 @@
 
 import com.google.common.collect.Maps;
 import com.mojang.serialization.Codec;
 import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 import it.unimi.dsi.fastutil.objects.ObjectListIterator;
+import java.util.EnumSet;
 import java.util.Iterator;
 import java.util.Map;
 import java.util.Set;
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
 import net.minecraft.util.BitStorage;
+import net.minecraft.util.Mth;
 import net.minecraft.util.StringRepresentable;
+import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.LeavesBlock;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.chunk.ChunkAccess;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
 
 public class Heightmap {
-   private static final Predicate<BlockState> NOT_AIR = (var0) -> {
+   private static final Logger LOGGER = LogManager.getLogger();
+   static final Predicate<BlockState> NOT_AIR = (var0) -> {
       return !var0.isAir();
    };
-   private static final Predicate<BlockState> MATERIAL_MOTION_BLOCKING = (var0) -> {
+   static final Predicate<BlockState> MATERIAL_MOTION_BLOCKING = (var0) -> {
       return var0.getMaterial().blocksMotion();
    };
-   private final BitStorage data = new BitStorage(9, 256);
+   private final BitStorage data;
    private final Predicate<BlockState> isOpaque;
    private final ChunkAccess chunk;
 
    public Heightmap(ChunkAccess var1, Heightmap.Types var2) {
       this.isOpaque = var2.isOpaque();
       this.chunk = var1;
+      int var3 = Mth.ceillog2(var1.getHeight() + 1);
+      this.data = new BitStorage(var3, 256);
    }
 
    public static void primeHeightmaps(ChunkAccess var0, Set<Heightmap.Types> var1) {
       int var2 = var1.size();
       ObjectArrayList var3 = new ObjectArrayList(var2);
@@ -48,11 +56,11 @@
             while(var9.hasNext()) {
                Heightmap.Types var10 = (Heightmap.Types)var9.next();
                var3.add(var0.getOrCreateHeightmapUnprimed(var10));
             }
 
-            for(int var12 = var5 - 1; var12 >= 0; --var12) {
+            for(int var12 = var5 - 1; var12 >= var0.getMinBuildHeight(); --var12) {
                var6.set(var7, var12, var8);
                BlockState var13 = var0.getBlockState(var6);
                if (!var13.is(Blocks.AIR)) {
                   while(var4.hasNext()) {
                      Heightmap var11 = (Heightmap)var4.next();
@@ -85,19 +93,19 @@
                return true;
             }
          } else if (var5 - 1 == var2) {
             BlockPos.MutableBlockPos var6 = new BlockPos.MutableBlockPos();
 
-            for(int var7 = var2 - 1; var7 >= 0; --var7) {
+            for(int var7 = var2 - 1; var7 >= this.chunk.getMinBuildHeight(); --var7) {
                var6.set(var1, var7, var3);
                if (this.isOpaque.test(this.chunk.getBlockState(var6))) {
                   this.setHeight(var1, var3, var7 + 1);
                   return true;
                }
             }
 
-            this.setHeight(var1, var3, 0);
+            this.setHeight(var1, var3, this.chunk.getMinBuildHeight());
             return true;
          }
 
          return false;
       }
@@ -105,20 +113,32 @@
 
    public int getFirstAvailable(int var1, int var2) {
       return this.getFirstAvailable(getIndex(var1, var2));
    }
 
+   public int getHighestTaken(int var1, int var2) {
+      return this.getFirstAvailable(getIndex(var1, var2)) - 1;
+   }
+
    private int getFirstAvailable(int var1) {
-      return this.data.get(var1);
+      return this.data.get(var1) + this.chunk.getMinBuildHeight();
    }
 
    private void setHeight(int var1, int var2, int var3) {
-      this.data.set(getIndex(var1, var2), var3);
+      this.data.set(getIndex(var1, var2), var3 - this.chunk.getMinBuildHeight());
    }
 
-   public void setRawData(long[] var1) {
-      System.arraycopy(var1, 0, this.data.getRaw(), 0, var1.length);
+   public void setRawData(ChunkAccess var1, Heightmap.Types var2, long[] var3) {
+      long[] var4 = this.data.getRaw();
+      if (var4.length == var3.length) {
+         System.arraycopy(var3, 0, var4, 0, var3.length);
+      } else {
+         Logger var10000 = LOGGER;
+         ChunkPos var10001 = var1.getPos();
+         var10000.warn("Ignoring heightmap data for chunk " + var10001 + ", size does not match; expected: " + var4.length + ", got: " + var3.length);
+         primeHeightmaps(var1, EnumSet.of(var2));
+      }
    }
 
    public long[] getRawData() {
       return this.data.getRaw();
    }
@@ -166,10 +186,14 @@
 
       public boolean sendToClient() {
          return this.usage == Heightmap.Usage.CLIENT;
       }
 
+      public boolean keepAfterWorldgen() {
+         return this.usage != Heightmap.Usage.WORLDGEN;
+      }
+
       @Nullable
       public static Heightmap.Types getFromKey(String var0) {
          return (Heightmap.Types)REVERSE_LOOKUP.get(var0);
       }
 
