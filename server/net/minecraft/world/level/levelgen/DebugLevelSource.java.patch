--- net/minecraft/world/level/levelgen/DebugLevelSource.java
+++ net/minecraft/world/level/levelgen/DebugLevelSource.java
@@ -4,15 +4,17 @@
 import java.util.List;
 import java.util.stream.Collectors;
 import java.util.stream.StreamSupport;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Registry;
+import net.minecraft.core.SectionPos;
 import net.minecraft.resources.RegistryLookupCodec;
 import net.minecraft.server.level.WorldGenRegion;
 import net.minecraft.util.Mth;
-import net.minecraft.world.level.BlockGetter;
+import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.LevelHeightAccessor;
 import net.minecraft.world.level.NoiseColumn;
 import net.minecraft.world.level.StructureFeatureManager;
 import net.minecraft.world.level.biome.Biome;
 import net.minecraft.world.level.biome.BiomeManager;
 import net.minecraft.world.level.biome.Biomes;
@@ -50,36 +52,35 @@
    public void applyCarvers(long var1, BiomeManager var3, ChunkAccess var4, GenerationStep.Carving var5) {
    }
 
    public void applyBiomeDecoration(WorldGenRegion var1, StructureFeatureManager var2) {
       BlockPos.MutableBlockPos var3 = new BlockPos.MutableBlockPos();
-      int var4 = var1.getCenterX();
-      int var5 = var1.getCenterZ();
+      ChunkPos var4 = var1.getCenter();
 
-      for(int var6 = 0; var6 < 16; ++var6) {
-         for(int var7 = 0; var7 < 16; ++var7) {
-            int var8 = (var4 << 4) + var6;
-            int var9 = (var5 << 4) + var7;
-            var1.setBlock(var3.set(var8, 60, var9), BARRIER, 2);
-            BlockState var10 = getBlockStateFor(var8, var9);
-            if (var10 != null) {
-               var1.setBlock(var3.set(var8, 70, var9), var10, 2);
+      for(int var5 = 0; var5 < 16; ++var5) {
+         for(int var6 = 0; var6 < 16; ++var6) {
+            int var7 = SectionPos.sectionToBlockCoord(var4.x, var5);
+            int var8 = SectionPos.sectionToBlockCoord(var4.z, var6);
+            var1.setBlock(var3.set(var7, 60, var8), BARRIER, 2);
+            BlockState var9 = getBlockStateFor(var7, var8);
+            if (var9 != null) {
+               var1.setBlock(var3.set(var7, 70, var8), var9, 2);
             }
          }
       }
 
    }
 
    public void fillFromNoise(LevelAccessor var1, StructureFeatureManager var2, ChunkAccess var3) {
    }
 
-   public int getBaseHeight(int var1, int var2, Heightmap.Types var3) {
+   public int getBaseHeight(int var1, int var2, Heightmap.Types var3, LevelHeightAccessor var4) {
       return 0;
    }
 
-   public BlockGetter getBaseColumn(int var1, int var2) {
-      return new NoiseColumn(new BlockState[0]);
+   public NoiseColumn getBaseColumn(int var1, int var2, LevelHeightAccessor var3) {
+      return new NoiseColumn(0, new BlockState[0]);
    }
 
    public static BlockState getBlockStateFor(int var0, int var1) {
       BlockState var2 = AIR;
       if (var0 > 0 && var1 > 0 && var0 % 2 != 0 && var1 % 2 != 0) {
