--- net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java
+++ net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java
@@ -1,7 +1,8 @@
 package net.minecraft.world.level.levelgen.structure.templatesystem;
 
+import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.mojang.datafixers.util.Pair;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -15,10 +16,11 @@
 import javax.annotation.Nullable;
 import net.minecraft.SharedConstants;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.IdMapper;
+import net.minecraft.core.Vec3i;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.DoubleTag;
 import net.minecraft.nbt.IntTag;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.nbt.NbtUtils;
@@ -48,21 +50,33 @@
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.phys.shapes.BitSetDiscreteVoxelShape;
 import net.minecraft.world.phys.shapes.DiscreteVoxelShape;
 
 public class StructureTemplate {
+   public static final String PALETTE_TAG = "palette";
+   public static final String PALETTE_LIST_TAG = "palettes";
+   public static final String ENTITIES_TAG = "entities";
+   public static final String BLOCKS_TAG = "blocks";
+   public static final String BLOCK_TAG_POS = "pos";
+   public static final String BLOCK_TAG_STATE = "state";
+   public static final String BLOCK_TAG_NBT = "nbt";
+   public static final String ENTITY_TAG_POS = "pos";
+   public static final String ENTITY_TAG_BLOCKPOS = "blockPos";
+   public static final String ENTITY_TAG_NBT = "nbt";
+   public static final String SIZE_TAG = "size";
+   static final int CHUNK_SIZE = 16;
    private final List<StructureTemplate.Palette> palettes = Lists.newArrayList();
    private final List<StructureTemplate.StructureEntityInfo> entityInfoList = Lists.newArrayList();
-   private BlockPos size;
+   private Vec3i size;
    private String author;
 
    public StructureTemplate() {
-      this.size = BlockPos.ZERO;
+      this.size = Vec3i.ZERO;
       this.author = "?";
    }
 
-   public BlockPos getSize() {
+   public Vec3i getSize() {
       return this.size;
    }
 
    public void setAuthor(String var1) {
       this.author = var1;
@@ -70,11 +84,11 @@
 
    public String getAuthor() {
       return this.author;
    }
 
-   public void fillFromWorld(Level var1, BlockPos var2, BlockPos var3, boolean var4, @Nullable Block var5) {
+   public void fillFromWorld(Level var1, BlockPos var2, Vec3i var3, boolean var4, @Nullable Block var5) {
       if (var3.getX() >= 1 && var3.getY() >= 1 && var3.getZ() >= 1) {
          BlockPos var6 = var2.offset(var3).offset(-1, -1, -1);
          ArrayList var7 = Lists.newArrayList();
          ArrayList var8 = Lists.newArrayList();
          ArrayList var9 = Lists.newArrayList();
@@ -102,11 +116,11 @@
                }
 
                var13 = (BlockPos)var12.next();
                var14 = var13.subtract(var10);
                var15 = var1.getBlockState(var13);
-            } while(var5 != null && var5 == var15.getBlock());
+            } while(var5 != null && var15.is(var5));
 
             BlockEntity var16 = var1.getBlockEntity(var13);
             StructureTemplate.StructureBlockInfo var17;
             if (var16 != null) {
                CompoundTag var18 = var16.save(new CompoundTag());
@@ -212,115 +226,105 @@
 
    public static BlockPos calculateRelativePosition(StructurePlaceSettings var0, BlockPos var1) {
       return transform(var1, var0.getMirror(), var0.getRotation(), var0.getRotationPivot());
    }
 
-   public void placeInWorldChunk(ServerLevelAccessor var1, BlockPos var2, StructurePlaceSettings var3, Random var4) {
-      var3.updateBoundingBoxFromChunkPos();
-      this.placeInWorld(var1, var2, var3, var4);
-   }
-
-   public void placeInWorld(ServerLevelAccessor var1, BlockPos var2, StructurePlaceSettings var3, Random var4) {
-      this.placeInWorld(var1, var2, var2, var3, var4, 2);
-   }
-
    public boolean placeInWorld(ServerLevelAccessor var1, BlockPos var2, BlockPos var3, StructurePlaceSettings var4, Random var5, int var6) {
       if (this.palettes.isEmpty()) {
          return false;
       } else {
          List var7 = var4.getRandomPalette(this.palettes, var2).blocks();
          if ((!var7.isEmpty() || !var4.isIgnoreEntities() && !this.entityInfoList.isEmpty()) && this.size.getX() >= 1 && this.size.getY() >= 1 && this.size.getZ() >= 1) {
             BoundingBox var8 = var4.getBoundingBox();
             ArrayList var9 = Lists.newArrayListWithCapacity(var4.shouldKeepLiquids() ? var7.size() : 0);
-            ArrayList var10 = Lists.newArrayListWithCapacity(var7.size());
-            int var11 = Integer.MAX_VALUE;
+            ArrayList var10 = Lists.newArrayListWithCapacity(var4.shouldKeepLiquids() ? var7.size() : 0);
+            ArrayList var11 = Lists.newArrayListWithCapacity(var7.size());
             int var12 = Integer.MAX_VALUE;
             int var13 = Integer.MAX_VALUE;
-            int var14 = Integer.MIN_VALUE;
+            int var14 = Integer.MAX_VALUE;
             int var15 = Integer.MIN_VALUE;
             int var16 = Integer.MIN_VALUE;
-            List var17 = processBlockInfos(var1, var2, var3, var4, var7);
-            Iterator var18 = var17.iterator();
+            int var17 = Integer.MIN_VALUE;
+            List var18 = processBlockInfos(var1, var2, var3, var4, var7);
+            Iterator var19 = var18.iterator();
 
             while(true) {
-               StructureTemplate.StructureBlockInfo var19;
-               BlockPos var20;
-               BlockEntity var23;
+               StructureTemplate.StructureBlockInfo var20;
+               BlockPos var21;
+               BlockEntity var24;
                do {
-                  if (!var18.hasNext()) {
-                     boolean var27 = true;
-                     Direction[] var28 = new Direction[]{Direction.UP, Direction.NORTH, Direction.EAST, Direction.SOUTH, Direction.WEST};
+                  if (!var19.hasNext()) {
+                     boolean var28 = true;
+                     Direction[] var29 = new Direction[]{Direction.UP, Direction.NORTH, Direction.EAST, Direction.SOUTH, Direction.WEST};
 
-                     Iterator var29;
-                     BlockPos var34;
-                     BlockState var38;
-                     while(var27 && !var9.isEmpty()) {
-                        var27 = false;
-                        var29 = var9.iterator();
+                     Iterator var30;
+                     int var38;
+                     BlockState var39;
+                     while(var28 && !var9.isEmpty()) {
+                        var28 = false;
+                        var30 = var9.iterator();
 
-                        while(var29.hasNext()) {
-                           BlockPos var31 = (BlockPos)var29.next();
-                           var34 = var31;
-                           FluidState var36 = var1.getFluidState(var31);
+                        while(var30.hasNext()) {
+                           BlockPos var32 = (BlockPos)var30.next();
+                           FluidState var35 = var1.getFluidState(var32);
 
-                           for(int var24 = 0; var24 < var28.length && !var36.isSource(); ++var24) {
-                              BlockPos var25 = var34.relative(var28[var24]);
+                           for(var38 = 0; var38 < var29.length && !var35.isSource(); ++var38) {
+                              BlockPos var25 = var32.relative(var29[var38]);
                               FluidState var26 = var1.getFluidState(var25);
-                              if (var26.getHeight(var1, var25) > var36.getHeight(var1, var34) || var26.isSource() && !var36.isSource()) {
-                                 var36 = var26;
-                                 var34 = var25;
+                              if (var26.isSource() && !var10.contains(var25)) {
+                                 var35 = var26;
                               }
                            }
 
-                           if (var36.isSource()) {
-                              var38 = var1.getBlockState(var31);
-                              Block var41 = var38.getBlock();
-                              if (var41 instanceof LiquidBlockContainer) {
-                                 ((LiquidBlockContainer)var41).placeLiquid(var1, var31, var38, var36);
-                                 var27 = true;
-                                 var29.remove();
+                           if (var35.isSource()) {
+                              var39 = var1.getBlockState(var32);
+                              Block var40 = var39.getBlock();
+                              if (var40 instanceof LiquidBlockContainer) {
+                                 ((LiquidBlockContainer)var40).placeLiquid(var1, var32, var39, var35);
+                                 var28 = true;
+                                 var30.remove();
                               }
                            }
                         }
                      }
 
-                     if (var11 <= var14) {
+                     if (var12 <= var15) {
                         if (!var4.getKnownShape()) {
-                           BitSetDiscreteVoxelShape var30 = new BitSetDiscreteVoxelShape(var14 - var11 + 1, var15 - var12 + 1, var16 - var13 + 1);
-                           int var32 = var11;
-                           int var35 = var12;
-                           int var37 = var13;
-                           Iterator var40 = var10.iterator();
+                           BitSetDiscreteVoxelShape var31 = new BitSetDiscreteVoxelShape(var15 - var12 + 1, var16 - var13 + 1, var17 - var14 + 1);
+                           int var33 = var12;
+                           int var36 = var13;
+                           var38 = var14;
+                           Iterator var41 = var11.iterator();
 
-                           while(var40.hasNext()) {
-                              Pair var42 = (Pair)var40.next();
-                              BlockPos var43 = (BlockPos)var42.getFirst();
-                              var30.setFull(var43.getX() - var32, var43.getY() - var35, var43.getZ() - var37, true, true);
+                           while(var41.hasNext()) {
+                              Pair var43 = (Pair)var41.next();
+                              BlockPos var27 = (BlockPos)var43.getFirst();
+                              var31.fill(var27.getX() - var33, var27.getY() - var36, var27.getZ() - var38);
                            }
 
-                           updateShapeAtEdge(var1, var6, var30, var32, var35, var37);
+                           updateShapeAtEdge(var1, var6, var31, var33, var36, var38);
                         }
 
-                        var29 = var10.iterator();
+                        var30 = var11.iterator();
 
-                        while(var29.hasNext()) {
-                           Pair var33 = (Pair)var29.next();
-                           var34 = (BlockPos)var33.getFirst();
+                        while(var30.hasNext()) {
+                           Pair var34 = (Pair)var30.next();
+                           BlockPos var37 = (BlockPos)var34.getFirst();
                            if (!var4.getKnownShape()) {
-                              BlockState var39 = var1.getBlockState(var34);
-                              var38 = Block.updateFromNeighbourShapes(var39, var1, var34);
-                              if (var39 != var38) {
-                                 var1.setBlock(var34, var38, var6 & -2 | 16);
+                              var39 = var1.getBlockState(var37);
+                              BlockState var42 = Block.updateFromNeighbourShapes(var39, var1, var37);
+                              if (var39 != var42) {
+                                 var1.setBlock(var37, var42, var6 & -2 | 16);
                               }
 
-                              var1.blockUpdated(var34, var38.getBlock());
+                              var1.blockUpdated(var37, var42.getBlock());
                            }
 
-                           if (var33.getSecond() != null) {
-                              var23 = var1.getBlockEntity(var34);
-                              if (var23 != null) {
-                                 var23.setChanged();
+                           if (var34.getSecond() != null) {
+                              var24 = var1.getBlockEntity(var37);
+                              if (var24 != null) {
+                                 var24.setChanged();
                               }
                            }
                         }
                      }
 
@@ -329,50 +333,52 @@
                      }
 
                      return true;
                   }
 
-                  var19 = (StructureTemplate.StructureBlockInfo)var18.next();
-                  var20 = var19.pos;
-               } while(var8 != null && !var8.isInside(var20));
+                  var20 = (StructureTemplate.StructureBlockInfo)var19.next();
+                  var21 = var20.pos;
+               } while(var8 != null && !var8.isInside(var21));
 
-               FluidState var21 = var4.shouldKeepLiquids() ? var1.getFluidState(var20) : null;
-               BlockState var22 = var19.state.mirror(var4.getMirror()).rotate(var4.getRotation());
-               if (var19.nbt != null) {
-                  var23 = var1.getBlockEntity(var20);
-                  Clearable.tryClear(var23);
-                  var1.setBlock(var20, Blocks.BARRIER.defaultBlockState(), 20);
+               FluidState var22 = var4.shouldKeepLiquids() ? var1.getFluidState(var21) : null;
+               BlockState var23 = var20.state.mirror(var4.getMirror()).rotate(var4.getRotation());
+               if (var20.nbt != null) {
+                  var24 = var1.getBlockEntity(var21);
+                  Clearable.tryClear(var24);
+                  var1.setBlock(var21, Blocks.BARRIER.defaultBlockState(), 20);
                }
 
-               if (var1.setBlock(var20, var22, var6)) {
-                  var11 = Math.min(var11, var20.getX());
-                  var12 = Math.min(var12, var20.getY());
-                  var13 = Math.min(var13, var20.getZ());
-                  var14 = Math.max(var14, var20.getX());
-                  var15 = Math.max(var15, var20.getY());
-                  var16 = Math.max(var16, var20.getZ());
-                  var10.add(Pair.of(var20, var19.nbt));
-                  if (var19.nbt != null) {
-                     var23 = var1.getBlockEntity(var20);
-                     if (var23 != null) {
-                        var19.nbt.putInt("x", var20.getX());
-                        var19.nbt.putInt("y", var20.getY());
-                        var19.nbt.putInt("z", var20.getZ());
-                        if (var23 instanceof RandomizableContainerBlockEntity) {
-                           var19.nbt.putLong("LootTableSeed", var5.nextLong());
+               if (var1.setBlock(var21, var23, var6)) {
+                  var12 = Math.min(var12, var21.getX());
+                  var13 = Math.min(var13, var21.getY());
+                  var14 = Math.min(var14, var21.getZ());
+                  var15 = Math.max(var15, var21.getX());
+                  var16 = Math.max(var16, var21.getY());
+                  var17 = Math.max(var17, var21.getZ());
+                  var11.add(Pair.of(var21, var20.nbt));
+                  if (var20.nbt != null) {
+                     var24 = var1.getBlockEntity(var21);
+                     if (var24 != null) {
+                        var20.nbt.putInt("x", var21.getX());
+                        var20.nbt.putInt("y", var21.getY());
+                        var20.nbt.putInt("z", var21.getZ());
+                        if (var24 instanceof RandomizableContainerBlockEntity) {
+                           var20.nbt.putLong("LootTableSeed", var5.nextLong());
                         }
 
-                        var23.load(var19.state, var19.nbt);
-                        var23.mirror(var4.getMirror());
-                        var23.rotate(var4.getRotation());
+                        var24.load(var20.nbt);
                      }
                   }
 
-                  if (var21 != null && var22.getBlock() instanceof LiquidBlockContainer) {
-                     ((LiquidBlockContainer)var22.getBlock()).placeLiquid(var1, var20, var22, var21);
-                     if (!var21.isSource()) {
-                        var9.add(var20);
+                  if (var22 != null) {
+                     if (var23.getFluidState().isSource()) {
+                        var10.add(var21);
+                     } else if (var23.getBlock() instanceof LiquidBlockContainer) {
+                        ((LiquidBlockContainer)var23.getBlock()).placeLiquid(var1, var21, var23, var22);
+                        if (!var22.isSource()) {
+                           var9.add(var21);
+                        }
                      }
                   }
                }
             }
          } else {
@@ -457,21 +463,21 @@
       }
    }
 
    private static Optional<Entity> createEntityIgnoreException(ServerLevelAccessor var0, CompoundTag var1) {
       try {
-         return EntityType.create(var1, var0.getLevel());
+         return EntityType.create((CompoundTag)var1, (Level)var0.getLevel());
       } catch (Exception var3) {
          return Optional.empty();
       }
    }
 
-   public BlockPos getSize(Rotation var1) {
+   public Vec3i getSize(Rotation var1) {
       switch(var1) {
       case COUNTERCLOCKWISE_90:
       case CLOCKWISE_90:
-         return new BlockPos(this.size.getZ(), this.size.getY(), this.size.getX());
+         return new Vec3i(this.size.getZ(), this.size.getY(), this.size.getX());
       default:
          return this.size;
       }
    }
 
@@ -565,57 +571,19 @@
    public BoundingBox getBoundingBox(StructurePlaceSettings var1, BlockPos var2) {
       return this.getBoundingBox(var2, var1.getRotation(), var1.getRotationPivot(), var1.getMirror());
    }
 
    public BoundingBox getBoundingBox(BlockPos var1, Rotation var2, BlockPos var3, Mirror var4) {
-      BlockPos var5 = this.getSize(var2);
-      int var6 = var3.getX();
-      int var7 = var3.getZ();
-      int var8 = var5.getX() - 1;
-      int var9 = var5.getY() - 1;
-      int var10 = var5.getZ() - 1;
-      BoundingBox var11 = new BoundingBox(0, 0, 0, 0, 0, 0);
-      switch(var2) {
-      case COUNTERCLOCKWISE_90:
-         var11 = new BoundingBox(var6 - var7, 0, var6 + var7 - var10, var6 - var7 + var8, var9, var6 + var7);
-         break;
-      case CLOCKWISE_90:
-         var11 = new BoundingBox(var6 + var7 - var8, 0, var7 - var6, var6 + var7, var9, var7 - var6 + var10);
-         break;
-      case CLOCKWISE_180:
-         var11 = new BoundingBox(var6 + var6 - var8, 0, var7 + var7 - var10, var6 + var6, var9, var7 + var7);
-         break;
-      case NONE:
-         var11 = new BoundingBox(0, 0, 0, var8, var9, var10);
-      }
-
-      switch(var4) {
-      case LEFT_RIGHT:
-         this.mirrorAABB(var2, var10, var8, var11, Direction.NORTH, Direction.SOUTH);
-         break;
-      case FRONT_BACK:
-         this.mirrorAABB(var2, var8, var10, var11, Direction.WEST, Direction.EAST);
-      case NONE:
-      }
-
-      var11.move(var1.getX(), var1.getY(), var1.getZ());
-      return var11;
+      return getBoundingBox(var1, var2, var3, var4, this.size);
    }
 
-   private void mirrorAABB(Rotation var1, int var2, int var3, BoundingBox var4, Direction var5, Direction var6) {
-      BlockPos var7 = BlockPos.ZERO;
-      if (var1 != Rotation.CLOCKWISE_90 && var1 != Rotation.COUNTERCLOCKWISE_90) {
-         if (var1 == Rotation.CLOCKWISE_180) {
-            var7 = var7.relative(var6, var2);
-         } else {
-            var7 = var7.relative(var5, var2);
-         }
-      } else {
-         var7 = var7.relative(var1.rotate(var5), var3);
-      }
-
-      var4.move(var7.getX(), 0, var7.getZ());
+   @VisibleForTesting
+   protected static BoundingBox getBoundingBox(BlockPos var0, Rotation var1, BlockPos var2, Mirror var3, Vec3i var4) {
+      Vec3i var5 = var4.offset(-1, -1, -1);
+      BlockPos var6 = transform(BlockPos.ZERO, var3, var1, var2);
+      BlockPos var7 = transform(BlockPos.ZERO.offset(var5), var3, var1, var2);
+      return BoundingBox.fromCorners(var6, var7).move(var0);
    }
 
    public CompoundTag save(CompoundTag var1) {
       if (this.palettes.isEmpty()) {
          var1.put("blocks", new ListTag());
@@ -705,11 +673,11 @@
 
    public void load(CompoundTag var1) {
       this.palettes.clear();
       this.entityInfoList.clear();
       ListTag var2 = var1.getList("size", 3);
-      this.size = new BlockPos(var2.getInt(0), var2.getInt(1), var2.getInt(2));
+      this.size = new Vec3i(var2.getInt(0), var2.getInt(1), var2.getInt(2));
       ListTag var3 = var1.getList("blocks", 10);
       ListTag var4;
       int var5;
       if (var1.contains("palettes", 9)) {
          var4 = var1.getList("palettes", 9);
