--- net/minecraft/world/level/levelgen/structure/OceanMonumentPieces.java
+++ net/minecraft/world/level/levelgen/structure/OceanMonumentPieces.java
@@ -9,10 +9,11 @@
 import java.util.Random;
 import java.util.Set;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.nbt.CompoundTag;
+import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.SpawnGroupData;
 import net.minecraft.world.entity.monster.ElderGuardian;
 import net.minecraft.world.level.ChunkPos;
@@ -21,13 +22,15 @@
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.chunk.ChunkGenerator;
 import net.minecraft.world.level.levelgen.feature.StructurePieceType;
-import net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager;
 
 public class OceanMonumentPieces {
+   private OceanMonumentPieces() {
+   }
+
    static class FitDoubleYZRoom implements OceanMonumentPieces.MonumentRoomFitter {
       private FitDoubleYZRoom() {
       }
 
       public boolean fits(OceanMonumentPieces.RoomDefinition var1) {
@@ -211,14 +214,14 @@
       }
    }
 
    public static class OceanMonumentPenthouse extends OceanMonumentPieces.OceanMonumentPiece {
       public OceanMonumentPenthouse(Direction var1, BoundingBox var2) {
-         super(StructurePieceType.OCEAN_MONUMENT_PENTHOUSE, var1, var2);
+         super(StructurePieceType.OCEAN_MONUMENT_PENTHOUSE, var1, 1, var2);
       }
 
-      public OceanMonumentPenthouse(StructureManager var1, CompoundTag var2) {
+      public OceanMonumentPenthouse(ServerLevel var1, CompoundTag var2) {
          super(StructurePieceType.OCEAN_MONUMENT_PENTHOUSE, var2);
       }
 
       public boolean postProcess(WorldGenLevel var1, StructureFeatureManager var2, ChunkGenerator var3, Random var4, BoundingBox var5, ChunkPos var6, BlockPos var7) {
          this.generateBox(var1, var5, 2, -1, 2, 11, -1, 11, BASE_LIGHT, BASE_LIGHT, false);
@@ -268,15 +271,15 @@
 
    public static class OceanMonumentWingRoom extends OceanMonumentPieces.OceanMonumentPiece {
       private int mainDesign;
 
       public OceanMonumentWingRoom(Direction var1, BoundingBox var2, int var3) {
-         super(StructurePieceType.OCEAN_MONUMENT_WING_ROOM, var1, var2);
+         super(StructurePieceType.OCEAN_MONUMENT_WING_ROOM, var1, 1, var2);
          this.mainDesign = var3 & 1;
       }
 
-      public OceanMonumentWingRoom(StructureManager var1, CompoundTag var2) {
+      public OceanMonumentWingRoom(ServerLevel var1, CompoundTag var2) {
          super(StructurePieceType.OCEAN_MONUMENT_WING_ROOM, var2);
       }
 
       public boolean postProcess(WorldGenLevel var1, StructureFeatureManager var2, ChunkGenerator var3, Random var4, BoundingBox var5, ChunkPos var6, BlockPos var7) {
          if (this.mainDesign == 0) {
@@ -376,11 +379,11 @@
    public static class OceanMonumentCoreRoom extends OceanMonumentPieces.OceanMonumentPiece {
       public OceanMonumentCoreRoom(Direction var1, OceanMonumentPieces.RoomDefinition var2) {
          super(StructurePieceType.OCEAN_MONUMENT_CORE_ROOM, 1, var1, var2, 2, 2, 2);
       }
 
-      public OceanMonumentCoreRoom(StructureManager var1, CompoundTag var2) {
+      public OceanMonumentCoreRoom(ServerLevel var1, CompoundTag var2) {
          super(StructurePieceType.OCEAN_MONUMENT_CORE_ROOM, var2);
       }
 
       public boolean postProcess(WorldGenLevel var1, StructureFeatureManager var2, ChunkGenerator var3, Random var4, BoundingBox var5, ChunkPos var6, BlockPos var7) {
          this.generateBoxOnFillOnly(var1, var5, 1, 8, 0, 14, 8, 14, BASE_GRAY);
@@ -455,11 +458,11 @@
    public static class OceanMonumentDoubleYZRoom extends OceanMonumentPieces.OceanMonumentPiece {
       public OceanMonumentDoubleYZRoom(Direction var1, OceanMonumentPieces.RoomDefinition var2) {
          super(StructurePieceType.OCEAN_MONUMENT_DOUBLE_YZ_ROOM, 1, var1, var2, 1, 2, 2);
       }
 
-      public OceanMonumentDoubleYZRoom(StructureManager var1, CompoundTag var2) {
+      public OceanMonumentDoubleYZRoom(ServerLevel var1, CompoundTag var2) {
          super(StructurePieceType.OCEAN_MONUMENT_DOUBLE_YZ_ROOM, var2);
       }
 
       public boolean postProcess(WorldGenLevel var1, StructureFeatureManager var2, ChunkGenerator var3, Random var4, BoundingBox var5, ChunkPos var6, BlockPos var7) {
          OceanMonumentPieces.RoomDefinition var8 = this.roomDefinition.connections[Direction.NORTH.get3DDataValue()];
@@ -569,11 +572,11 @@
    public static class OceanMonumentDoubleXYRoom extends OceanMonumentPieces.OceanMonumentPiece {
       public OceanMonumentDoubleXYRoom(Direction var1, OceanMonumentPieces.RoomDefinition var2) {
          super(StructurePieceType.OCEAN_MONUMENT_DOUBLE_XY_ROOM, 1, var1, var2, 2, 2, 1);
       }
 
-      public OceanMonumentDoubleXYRoom(StructureManager var1, CompoundTag var2) {
+      public OceanMonumentDoubleXYRoom(ServerLevel var1, CompoundTag var2) {
          super(StructurePieceType.OCEAN_MONUMENT_DOUBLE_XY_ROOM, var2);
       }
 
       public boolean postProcess(WorldGenLevel var1, StructureFeatureManager var2, ChunkGenerator var3, Random var4, BoundingBox var5, ChunkPos var6, BlockPos var7) {
          OceanMonumentPieces.RoomDefinition var8 = this.roomDefinition.connections[Direction.EAST.get3DDataValue()];
@@ -683,11 +686,11 @@
    public static class OceanMonumentDoubleZRoom extends OceanMonumentPieces.OceanMonumentPiece {
       public OceanMonumentDoubleZRoom(Direction var1, OceanMonumentPieces.RoomDefinition var2) {
          super(StructurePieceType.OCEAN_MONUMENT_DOUBLE_Z_ROOM, 1, var1, var2, 1, 1, 2);
       }
 
-      public OceanMonumentDoubleZRoom(StructureManager var1, CompoundTag var2) {
+      public OceanMonumentDoubleZRoom(ServerLevel var1, CompoundTag var2) {
          super(StructurePieceType.OCEAN_MONUMENT_DOUBLE_Z_ROOM, var2);
       }
 
       public boolean postProcess(WorldGenLevel var1, StructureFeatureManager var2, ChunkGenerator var3, Random var4, BoundingBox var5, ChunkPos var6, BlockPos var7) {
          OceanMonumentPieces.RoomDefinition var8 = this.roomDefinition.connections[Direction.NORTH.get3DDataValue()];
@@ -772,11 +775,11 @@
    public static class OceanMonumentDoubleXRoom extends OceanMonumentPieces.OceanMonumentPiece {
       public OceanMonumentDoubleXRoom(Direction var1, OceanMonumentPieces.RoomDefinition var2) {
          super(StructurePieceType.OCEAN_MONUMENT_DOUBLE_X_ROOM, 1, var1, var2, 2, 1, 1);
       }
 
-      public OceanMonumentDoubleXRoom(StructureManager var1, CompoundTag var2) {
+      public OceanMonumentDoubleXRoom(ServerLevel var1, CompoundTag var2) {
          super(StructurePieceType.OCEAN_MONUMENT_DOUBLE_X_ROOM, var2);
       }
 
       public boolean postProcess(WorldGenLevel var1, StructureFeatureManager var2, ChunkGenerator var3, Random var4, BoundingBox var5, ChunkPos var6, BlockPos var7) {
          OceanMonumentPieces.RoomDefinition var8 = this.roomDefinition.connections[Direction.EAST.get3DDataValue()];
@@ -842,11 +845,11 @@
    public static class OceanMonumentDoubleYRoom extends OceanMonumentPieces.OceanMonumentPiece {
       public OceanMonumentDoubleYRoom(Direction var1, OceanMonumentPieces.RoomDefinition var2) {
          super(StructurePieceType.OCEAN_MONUMENT_DOUBLE_Y_ROOM, 1, var1, var2, 1, 2, 1);
       }
 
-      public OceanMonumentDoubleYRoom(StructureManager var1, CompoundTag var2) {
+      public OceanMonumentDoubleYRoom(ServerLevel var1, CompoundTag var2) {
          super(StructurePieceType.OCEAN_MONUMENT_DOUBLE_Y_ROOM, var2);
       }
 
       public boolean postProcess(WorldGenLevel var1, StructureFeatureManager var2, ChunkGenerator var3, Random var4, BoundingBox var5, ChunkPos var6, BlockPos var7) {
          if (this.roomDefinition.index / 25 > 0) {
@@ -923,11 +926,11 @@
    public static class OceanMonumentSimpleTopRoom extends OceanMonumentPieces.OceanMonumentPiece {
       public OceanMonumentSimpleTopRoom(Direction var1, OceanMonumentPieces.RoomDefinition var2) {
          super(StructurePieceType.OCEAN_MONUMENT_SIMPLE_TOP_ROOM, 1, var1, var2, 1, 1, 1);
       }
 
-      public OceanMonumentSimpleTopRoom(StructureManager var1, CompoundTag var2) {
+      public OceanMonumentSimpleTopRoom(ServerLevel var1, CompoundTag var2) {
          super(StructurePieceType.OCEAN_MONUMENT_SIMPLE_TOP_ROOM, var2);
       }
 
       public boolean postProcess(WorldGenLevel var1, StructureFeatureManager var2, ChunkGenerator var3, Random var4, BoundingBox var5, ChunkPos var6, BlockPos var7) {
          if (this.roomDefinition.index / 25 > 0) {
@@ -978,11 +981,11 @@
       public OceanMonumentSimpleRoom(Direction var1, OceanMonumentPieces.RoomDefinition var2, Random var3) {
          super(StructurePieceType.OCEAN_MONUMENT_SIMPLE_ROOM, 1, var1, var2, 1, 1, 1);
          this.mainDesign = var3.nextInt(3);
       }
 
-      public OceanMonumentSimpleRoom(StructureManager var1, CompoundTag var2) {
+      public OceanMonumentSimpleRoom(ServerLevel var1, CompoundTag var2) {
          super(StructurePieceType.OCEAN_MONUMENT_SIMPLE_ROOM, var2);
       }
 
       public boolean postProcess(WorldGenLevel var1, StructureFeatureManager var2, ChunkGenerator var3, Random var4, BoundingBox var5, ChunkPos var6, BlockPos var7) {
          if (this.roomDefinition.index / 25 > 0) {
@@ -1141,11 +1144,11 @@
    public static class OceanMonumentEntryRoom extends OceanMonumentPieces.OceanMonumentPiece {
       public OceanMonumentEntryRoom(Direction var1, OceanMonumentPieces.RoomDefinition var2) {
          super(StructurePieceType.OCEAN_MONUMENT_ENTRY_ROOM, 1, var1, var2, 1, 1, 1);
       }
 
-      public OceanMonumentEntryRoom(StructureManager var1, CompoundTag var2) {
+      public OceanMonumentEntryRoom(ServerLevel var1, CompoundTag var2) {
          super(StructurePieceType.OCEAN_MONUMENT_ENTRY_ROOM, var2);
       }
 
       public boolean postProcess(WorldGenLevel var1, StructureFeatureManager var2, ChunkGenerator var3, Random var4, BoundingBox var5, ChunkPos var6, BlockPos var7) {
          this.generateBox(var1, var5, 0, 3, 0, 2, 3, 7, BASE_LIGHT, BASE_LIGHT, false);
@@ -1172,82 +1175,78 @@
          return true;
       }
    }
 
    public static class MonumentBuilding extends OceanMonumentPieces.OceanMonumentPiece {
+      private static final int WIDTH = 58;
+      private static final int HEIGHT = 22;
+      private static final int DEPTH = 58;
+      public static final int BIOME_RANGE_CHECK = 29;
+      private static final int TOP_POSITION = 61;
       private OceanMonumentPieces.RoomDefinition sourceRoom;
       private OceanMonumentPieces.RoomDefinition coreRoom;
       private final List<OceanMonumentPieces.OceanMonumentPiece> childPieces = Lists.newArrayList();
 
       public MonumentBuilding(Random var1, int var2, int var3, Direction var4) {
-         super(StructurePieceType.OCEAN_MONUMENT_BUILDING, 0);
+         super(StructurePieceType.OCEAN_MONUMENT_BUILDING, var4, 0, makeBoundingBox(var2, 39, var3, var4, 58, 23, 58));
          this.setOrientation(var4);
-         Direction var5 = this.getOrientation();
-         if (var5.getAxis() == Direction.Axis.Z) {
-            this.boundingBox = new BoundingBox(var2, 39, var3, var2 + 58 - 1, 61, var3 + 58 - 1);
-         } else {
-            this.boundingBox = new BoundingBox(var2, 39, var3, var2 + 58 - 1, 61, var3 + 58 - 1);
-         }
-
-         List var6 = this.generateRoomGraph(var1);
+         List var5 = this.generateRoomGraph(var1);
          this.sourceRoom.claimed = true;
-         this.childPieces.add(new OceanMonumentPieces.OceanMonumentEntryRoom(var5, this.sourceRoom));
-         this.childPieces.add(new OceanMonumentPieces.OceanMonumentCoreRoom(var5, this.coreRoom));
-         ArrayList var7 = Lists.newArrayList();
-         var7.add(new OceanMonumentPieces.FitDoubleXYRoom());
-         var7.add(new OceanMonumentPieces.FitDoubleYZRoom());
-         var7.add(new OceanMonumentPieces.FitDoubleZRoom());
-         var7.add(new OceanMonumentPieces.FitDoubleXRoom());
-         var7.add(new OceanMonumentPieces.FitDoubleYRoom());
-         var7.add(new OceanMonumentPieces.FitSimpleTopRoom());
-         var7.add(new OceanMonumentPieces.FitSimpleRoom());
-         Iterator var8 = var6.iterator();
+         this.childPieces.add(new OceanMonumentPieces.OceanMonumentEntryRoom(var4, this.sourceRoom));
+         this.childPieces.add(new OceanMonumentPieces.OceanMonumentCoreRoom(var4, this.coreRoom));
+         ArrayList var6 = Lists.newArrayList();
+         var6.add(new OceanMonumentPieces.FitDoubleXYRoom());
+         var6.add(new OceanMonumentPieces.FitDoubleYZRoom());
+         var6.add(new OceanMonumentPieces.FitDoubleZRoom());
+         var6.add(new OceanMonumentPieces.FitDoubleXRoom());
+         var6.add(new OceanMonumentPieces.FitDoubleYRoom());
+         var6.add(new OceanMonumentPieces.FitSimpleTopRoom());
+         var6.add(new OceanMonumentPieces.FitSimpleRoom());
+         Iterator var7 = var5.iterator();
 
          while(true) {
             while(true) {
-               OceanMonumentPieces.RoomDefinition var9;
+               OceanMonumentPieces.RoomDefinition var8;
                do {
                   do {
-                     if (!var8.hasNext()) {
-                        int var15 = this.boundingBox.y0;
-                        int var16 = this.getWorldX(9, 22);
-                        int var17 = this.getWorldZ(9, 22);
-                        Iterator var18 = this.childPieces.iterator();
+                     if (!var7.hasNext()) {
+                        BlockPos.MutableBlockPos var12 = this.getWorldPos(9, 0, 22);
+                        Iterator var13 = this.childPieces.iterator();
 
-                        while(var18.hasNext()) {
-                           OceanMonumentPieces.OceanMonumentPiece var12 = (OceanMonumentPieces.OceanMonumentPiece)var18.next();
-                           var12.getBoundingBox().move(var16, var15, var17);
+                        while(var13.hasNext()) {
+                           OceanMonumentPieces.OceanMonumentPiece var15 = (OceanMonumentPieces.OceanMonumentPiece)var13.next();
+                           var15.getBoundingBox().move(var12);
                         }
 
-                        BoundingBox var19 = BoundingBox.createProper(this.getWorldX(1, 1), this.getWorldY(1), this.getWorldZ(1, 1), this.getWorldX(23, 21), this.getWorldY(8), this.getWorldZ(23, 21));
-                        BoundingBox var20 = BoundingBox.createProper(this.getWorldX(34, 1), this.getWorldY(1), this.getWorldZ(34, 1), this.getWorldX(56, 21), this.getWorldY(8), this.getWorldZ(56, 21));
-                        BoundingBox var13 = BoundingBox.createProper(this.getWorldX(22, 22), this.getWorldY(13), this.getWorldZ(22, 22), this.getWorldX(35, 35), this.getWorldY(17), this.getWorldZ(35, 35));
-                        int var14 = var1.nextInt();
-                        this.childPieces.add(new OceanMonumentPieces.OceanMonumentWingRoom(var5, var19, var14++));
-                        this.childPieces.add(new OceanMonumentPieces.OceanMonumentWingRoom(var5, var20, var14++));
-                        this.childPieces.add(new OceanMonumentPieces.OceanMonumentPenthouse(var5, var13));
+                        BoundingBox var14 = BoundingBox.fromCorners(this.getWorldPos(1, 1, 1), this.getWorldPos(23, 8, 21));
+                        BoundingBox var16 = BoundingBox.fromCorners(this.getWorldPos(34, 1, 1), this.getWorldPos(56, 8, 21));
+                        BoundingBox var17 = BoundingBox.fromCorners(this.getWorldPos(22, 13, 22), this.getWorldPos(35, 17, 35));
+                        int var11 = var1.nextInt();
+                        this.childPieces.add(new OceanMonumentPieces.OceanMonumentWingRoom(var4, var14, var11++));
+                        this.childPieces.add(new OceanMonumentPieces.OceanMonumentWingRoom(var4, var16, var11++));
+                        this.childPieces.add(new OceanMonumentPieces.OceanMonumentPenthouse(var4, var17));
                         return;
                      }
 
-                     var9 = (OceanMonumentPieces.RoomDefinition)var8.next();
-                  } while(var9.claimed);
-               } while(var9.isSpecial());
+                     var8 = (OceanMonumentPieces.RoomDefinition)var7.next();
+                  } while(var8.claimed);
+               } while(var8.isSpecial());
 
-               Iterator var10 = var7.iterator();
+               Iterator var9 = var6.iterator();
 
-               while(var10.hasNext()) {
-                  OceanMonumentPieces.MonumentRoomFitter var11 = (OceanMonumentPieces.MonumentRoomFitter)var10.next();
-                  if (var11.fits(var9)) {
-                     this.childPieces.add(var11.create(var5, var9, var1));
+               while(var9.hasNext()) {
+                  OceanMonumentPieces.MonumentRoomFitter var10 = (OceanMonumentPieces.MonumentRoomFitter)var9.next();
+                  if (var10.fits(var8)) {
+                     this.childPieces.add(var10.create(var4, var8, var1));
                      break;
                   }
                }
             }
          }
       }
 
-      public MonumentBuilding(StructureManager var1, CompoundTag var2) {
+      public MonumentBuilding(ServerLevel var1, CompoundTag var2) {
          super(StructurePieceType.OCEAN_MONUMENT_BUILDING, var2);
       }
 
       private List<OceanMonumentPieces.RoomDefinition> generateRoomGraph(Random var1) {
          OceanMonumentPieces.RoomDefinition[] var2 = new OceanMonumentPieces.RoomDefinition[75];
@@ -1387,11 +1386,11 @@
          var19.add(var18);
          return var19;
       }
 
       public boolean postProcess(WorldGenLevel var1, StructureFeatureManager var2, ChunkGenerator var3, Random var4, BoundingBox var5, ChunkPos var6, BlockPos var7) {
-         int var8 = Math.max(var1.getSeaLevel(), 64) - this.boundingBox.y0;
+         int var8 = Math.max(var1.getSeaLevel(), 64) - this.boundingBox.minY();
          this.generateWaterBox(var1, var5, 0, 0, 0, 58, var8, 58);
          this.generateWing(false, 0, var1, var4, var5);
          this.generateWing(true, 33, var1, var4, var5);
          this.generateEntranceArchs(var1, var4, var5);
          this.generateEntranceWall(var1, var4, var5);
@@ -1787,67 +1786,74 @@
       protected static final BlockState BASE_GRAY;
       protected static final BlockState BASE_LIGHT;
       protected static final BlockState BASE_BLACK;
       protected static final BlockState DOT_DECO_DATA;
       protected static final BlockState LAMP_BLOCK;
+      protected static final boolean DO_FILL = true;
       protected static final BlockState FILL_BLOCK;
       protected static final Set<Block> FILL_KEEP;
+      protected static final int GRIDROOM_WIDTH = 8;
+      protected static final int GRIDROOM_DEPTH = 8;
+      protected static final int GRIDROOM_HEIGHT = 4;
+      protected static final int GRID_WIDTH = 5;
+      protected static final int GRID_DEPTH = 5;
+      protected static final int GRID_HEIGHT = 3;
+      protected static final int GRID_FLOOR_COUNT = 25;
+      protected static final int GRID_SIZE = 75;
       protected static final int GRIDROOM_SOURCE_INDEX;
       protected static final int GRIDROOM_TOP_CONNECT_INDEX;
       protected static final int GRIDROOM_LEFTWING_CONNECT_INDEX;
       protected static final int GRIDROOM_RIGHTWING_CONNECT_INDEX;
+      protected static final int LEFTWING_INDEX = 1001;
+      protected static final int RIGHTWING_INDEX = 1002;
+      protected static final int PENTHOUSE_INDEX = 1003;
       protected OceanMonumentPieces.RoomDefinition roomDefinition;
 
-      protected static final int getRoomIndex(int var0, int var1, int var2) {
+      protected static int getRoomIndex(int var0, int var1, int var2) {
          return var1 * 25 + var2 * 5 + var0;
       }
 
-      public OceanMonumentPiece(StructurePieceType var1, int var2) {
-         super(var1, var2);
-      }
-
-      public OceanMonumentPiece(StructurePieceType var1, Direction var2, BoundingBox var3) {
-         super(var1, 1);
+      public OceanMonumentPiece(StructurePieceType var1, Direction var2, int var3, BoundingBox var4) {
+         super(var1, var3, var4);
          this.setOrientation(var2);
-         this.boundingBox = var3;
       }
 
       protected OceanMonumentPiece(StructurePieceType var1, int var2, Direction var3, OceanMonumentPieces.RoomDefinition var4, int var5, int var6, int var7) {
-         super(var1, var2);
+         super(var1, var2, makeBoundingBox(var3, var4, var5, var6, var7));
          this.setOrientation(var3);
          this.roomDefinition = var4;
-         int var8 = var4.index;
-         int var9 = var8 % 5;
-         int var10 = var8 / 5 % 5;
-         int var11 = var8 / 25;
-         if (var3 != Direction.NORTH && var3 != Direction.SOUTH) {
-            this.boundingBox = new BoundingBox(0, 0, 0, var7 * 8 - 1, var6 * 4 - 1, var5 * 8 - 1);
-         } else {
-            this.boundingBox = new BoundingBox(0, 0, 0, var5 * 8 - 1, var6 * 4 - 1, var7 * 8 - 1);
-         }
+      }
 
-         switch(var3) {
+      private static BoundingBox makeBoundingBox(Direction var0, OceanMonumentPieces.RoomDefinition var1, int var2, int var3, int var4) {
+         int var5 = var1.index;
+         int var6 = var5 % 5;
+         int var7 = var5 / 5 % 5;
+         int var8 = var5 / 25;
+         BoundingBox var9 = makeBoundingBox(0, 0, 0, var0, var2 * 8, var3 * 4, var4 * 8);
+         switch(var0) {
          case NORTH:
-            this.boundingBox.move(var9 * 8, var11 * 4, -(var10 + var7) * 8 + 1);
+            var9.move(var6 * 8, var8 * 4, -(var7 + var4) * 8 + 1);
             break;
          case SOUTH:
-            this.boundingBox.move(var9 * 8, var11 * 4, var10 * 8);
+            var9.move(var6 * 8, var8 * 4, var7 * 8);
             break;
          case WEST:
-            this.boundingBox.move(-(var10 + var7) * 8 + 1, var11 * 4, var9 * 8);
+            var9.move(-(var7 + var4) * 8 + 1, var8 * 4, var6 * 8);
             break;
+         case EAST:
          default:
-            this.boundingBox.move(var10 * 8, var11 * 4, var9 * 8);
+            var9.move(var7 * 8, var8 * 4, var6 * 8);
          }
 
+         return var9;
       }
 
       public OceanMonumentPiece(StructurePieceType var1, CompoundTag var2) {
          super(var1, var2);
       }
 
-      protected void addAdditionalSaveData(CompoundTag var1) {
+      protected void addAdditionalSaveData(ServerLevel var1, CompoundTag var2) {
       }
 
       protected void generateWaterBox(WorldGenLevel var1, BoundingBox var2, int var3, int var4, int var5, int var6, int var7, int var8) {
          for(int var9 = var4; var9 <= var7; ++var9) {
             for(int var10 = var3; var10 <= var6; ++var10) {
@@ -1902,19 +1908,17 @@
          int var9 = this.getWorldZ(var4, var5);
          return var1.intersects(Math.min(var6, var8), Math.min(var7, var9), Math.max(var6, var8), Math.max(var7, var9));
       }
 
       protected boolean spawnElder(WorldGenLevel var1, BoundingBox var2, int var3, int var4, int var5) {
-         int var6 = this.getWorldX(var3, var5);
-         int var7 = this.getWorldY(var4);
-         int var8 = this.getWorldZ(var3, var5);
-         if (var2.isInside(new BlockPos(var6, var7, var8))) {
-            ElderGuardian var9 = (ElderGuardian)EntityType.ELDER_GUARDIAN.create(var1.getLevel());
-            var9.heal(var9.getMaxHealth());
-            var9.moveTo((double)var6 + 0.5D, (double)var7, (double)var8 + 0.5D, 0.0F, 0.0F);
-            var9.finalizeSpawn(var1, var1.getCurrentDifficultyAt(var9.blockPosition()), MobSpawnType.STRUCTURE, (SpawnGroupData)null, (CompoundTag)null);
-            var1.addFreshEntityWithPassengers(var9);
+         BlockPos.MutableBlockPos var6 = this.getWorldPos(var3, var4, var5);
+         if (var2.isInside(var6)) {
+            ElderGuardian var7 = (ElderGuardian)EntityType.ELDER_GUARDIAN.create(var1.getLevel());
+            var7.heal(var7.getMaxHealth());
+            var7.moveTo((double)var6.getX() + 0.5D, (double)var6.getY(), (double)var6.getZ() + 0.5D, 0.0F, 0.0F);
+            var7.finalizeSpawn(var1, var1.getCurrentDifficultyAt(var7.blockPosition()), MobSpawnType.STRUCTURE, (SpawnGroupData)null, (CompoundTag)null);
+            var1.addFreshEntityWithPassengers(var7);
             return true;
          } else {
             return false;
          }
       }
