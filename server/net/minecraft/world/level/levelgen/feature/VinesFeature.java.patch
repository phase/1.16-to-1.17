--- net/minecraft/world/level/levelgen/feature/VinesFeature.java
+++ net/minecraft/world/level/levelgen/feature/VinesFeature.java
@@ -1,44 +1,38 @@
 package net.minecraft.world.level.levelgen.feature;
 
 import com.mojang.serialization.Codec;
-import java.util.Random;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.world.level.WorldGenLevel;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.VineBlock;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.chunk.ChunkGenerator;
 import net.minecraft.world.level.levelgen.feature.configurations.NoneFeatureConfiguration;
 
 public class VinesFeature extends Feature<NoneFeatureConfiguration> {
-   private static final Direction[] DIRECTIONS = Direction.values();
-
    public VinesFeature(Codec<NoneFeatureConfiguration> var1) {
       super(var1);
    }
 
-   public boolean place(WorldGenLevel var1, ChunkGenerator var2, Random var3, BlockPos var4, NoneFeatureConfiguration var5) {
-      BlockPos.MutableBlockPos var6 = var4.mutable();
+   public boolean place(FeaturePlaceContext<NoneFeatureConfiguration> var1) {
+      WorldGenLevel var2 = var1.level();
+      BlockPos var3 = var1.origin();
+      var1.config();
+      if (!var2.isEmptyBlock(var3)) {
+         return false;
+      } else {
+         Direction[] var4 = Direction.values();
+         int var5 = var4.length;
 
-      for(int var7 = 64; var7 < 256; ++var7) {
-         var6.set(var4);
-         var6.move(var3.nextInt(4) - var3.nextInt(4), 0, var3.nextInt(4) - var3.nextInt(4));
-         var6.setY(var7);
-         if (var1.isEmptyBlock(var6)) {
-            Direction[] var8 = DIRECTIONS;
-            int var9 = var8.length;
-
-            for(int var10 = 0; var10 < var9; ++var10) {
-               Direction var11 = var8[var10];
-               if (var11 != Direction.DOWN && VineBlock.isAcceptableNeighbour(var1, var6, var11)) {
-                  var1.setBlock(var6, (BlockState)Blocks.VINE.defaultBlockState().setValue(VineBlock.getPropertyForFace(var11), true), 2);
-                  break;
-               }
+         for(int var6 = 0; var6 < var5; ++var6) {
+            Direction var7 = var4[var6];
+            if (var7 != Direction.DOWN && VineBlock.isAcceptableNeighbour(var2, var3.relative(var7), var7)) {
+               var2.setBlock(var3, (BlockState)Blocks.VINE.defaultBlockState().setValue(VineBlock.getPropertyForFace(var7), true), 2);
+               return true;
             }
          }
-      }
 
-      return true;
+         return false;
+      }
    }
 }
