--- net/minecraft/world/level/levelgen/feature/OreFeature.java
+++ net/minecraft/world/level/levelgen/feature/OreFeature.java
@@ -1,44 +1,53 @@
 package net.minecraft.world.level.levelgen.feature;
 
 import com.mojang.serialization.Codec;
 import java.util.BitSet;
+import java.util.Iterator;
 import java.util.Random;
+import java.util.function.Function;
 import net.minecraft.core.BlockPos;
+import net.minecraft.core.SectionPos;
 import net.minecraft.util.Mth;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.WorldGenLevel;
-import net.minecraft.world.level.chunk.ChunkGenerator;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.chunk.BulkSectionAccess;
+import net.minecraft.world.level.chunk.LevelChunkSection;
 import net.minecraft.world.level.levelgen.Heightmap;
 import net.minecraft.world.level.levelgen.feature.configurations.OreConfiguration;
 
 public class OreFeature extends Feature<OreConfiguration> {
    public OreFeature(Codec<OreConfiguration> var1) {
       super(var1);
    }
 
-   public boolean place(WorldGenLevel var1, ChunkGenerator var2, Random var3, BlockPos var4, OreConfiguration var5) {
-      float var6 = var3.nextFloat() * 3.1415927F;
+   public boolean place(FeaturePlaceContext<OreConfiguration> var1) {
+      Random var2 = var1.random();
+      BlockPos var3 = var1.origin();
+      WorldGenLevel var4 = var1.level();
+      OreConfiguration var5 = (OreConfiguration)var1.config();
+      float var6 = var2.nextFloat() * 3.1415927F;
       float var7 = (float)var5.size / 8.0F;
       int var8 = Mth.ceil(((float)var5.size / 16.0F * 2.0F + 1.0F) / 2.0F);
-      double var9 = (double)var4.getX() + Math.sin((double)var6) * (double)var7;
-      double var11 = (double)var4.getX() - Math.sin((double)var6) * (double)var7;
-      double var13 = (double)var4.getZ() + Math.cos((double)var6) * (double)var7;
-      double var15 = (double)var4.getZ() - Math.cos((double)var6) * (double)var7;
+      double var9 = (double)var3.getX() + Math.sin((double)var6) * (double)var7;
+      double var11 = (double)var3.getX() - Math.sin((double)var6) * (double)var7;
+      double var13 = (double)var3.getZ() + Math.cos((double)var6) * (double)var7;
+      double var15 = (double)var3.getZ() - Math.cos((double)var6) * (double)var7;
       boolean var17 = true;
-      double var18 = (double)(var4.getY() + var3.nextInt(3) - 2);
-      double var20 = (double)(var4.getY() + var3.nextInt(3) - 2);
-      int var22 = var4.getX() - Mth.ceil(var7) - var8;
-      int var23 = var4.getY() - 2 - var8;
-      int var24 = var4.getZ() - Mth.ceil(var7) - var8;
+      double var18 = (double)(var3.getY() + var2.nextInt(3) - 2);
+      double var20 = (double)(var3.getY() + var2.nextInt(3) - 2);
+      int var22 = var3.getX() - Mth.ceil(var7) - var8;
+      int var23 = var3.getY() - 2 - var8;
+      int var24 = var3.getZ() - Mth.ceil(var7) - var8;
       int var25 = 2 * (Mth.ceil(var7) + var8);
       int var26 = 2 * (2 + var8);
 
       for(int var27 = var22; var27 <= var22 + var25; ++var27) {
          for(int var28 = var24; var28 <= var24 + var25; ++var28) {
-            if (var23 <= var1.getHeight(Heightmap.Types.OCEAN_FLOOR_WG, var27, var28)) {
-               return this.doPlace(var1, var3, var5, var9, var11, var13, var15, var18, var20, var22, var23, var24, var25, var26);
+            if (var23 <= var4.getHeight(Heightmap.Types.OCEAN_FLOOR_WG, var27, var28)) {
+               return this.doPlace(var4, var2, var5, var9, var11, var13, var15, var18, var20, var22, var23, var24, var25, var26);
             }
          }
       }
 
       return false;
@@ -69,66 +78,118 @@
          var25[var26 * 4 + 3] = var36;
       }
 
       for(var26 = 0; var26 < var24 - 1; ++var26) {
          if (var25[var26 * 4 + 3] > 0.0D) {
-            for(int var51 = var26 + 1; var51 < var24; ++var51) {
-               if (var25[var51 * 4 + 3] > 0.0D) {
-                  var28 = var25[var26 * 4 + 0] - var25[var51 * 4 + 0];
-                  var30 = var25[var26 * 4 + 1] - var25[var51 * 4 + 1];
-                  var32 = var25[var26 * 4 + 2] - var25[var51 * 4 + 2];
-                  var34 = var25[var26 * 4 + 3] - var25[var51 * 4 + 3];
+            for(int var70 = var26 + 1; var70 < var24; ++var70) {
+               if (var25[var70 * 4 + 3] > 0.0D) {
+                  var28 = var25[var26 * 4 + 0] - var25[var70 * 4 + 0];
+                  var30 = var25[var26 * 4 + 1] - var25[var70 * 4 + 1];
+                  var32 = var25[var26 * 4 + 2] - var25[var70 * 4 + 2];
+                  var34 = var25[var26 * 4 + 3] - var25[var70 * 4 + 3];
                   if (var34 * var34 > var28 * var28 + var30 * var30 + var32 * var32) {
                      if (var34 > 0.0D) {
-                        var25[var51 * 4 + 3] = -1.0D;
+                        var25[var70 * 4 + 3] = -1.0D;
                      } else {
                         var25[var26 * 4 + 3] = -1.0D;
                      }
                   }
                }
             }
          }
       }
 
-      for(var26 = 0; var26 < var24; ++var26) {
-         double var52 = var25[var26 * 4 + 3];
-         if (var52 >= 0.0D) {
-            double var29 = var25[var26 * 4 + 0];
-            double var31 = var25[var26 * 4 + 1];
-            double var33 = var25[var26 * 4 + 2];
-            int var35 = Math.max(Mth.floor(var29 - var52), var16);
-            int var53 = Math.max(Mth.floor(var31 - var52), var17);
-            int var37 = Math.max(Mth.floor(var33 - var52), var18);
-            int var38 = Math.max(Mth.floor(var29 + var52), var35);
-            int var39 = Math.max(Mth.floor(var31 + var52), var53);
-            int var40 = Math.max(Mth.floor(var33 + var52), var37);
+      BulkSectionAccess var69 = new BulkSectionAccess(var1);
+      Throwable var71 = null;
 
-            for(int var41 = var35; var41 <= var38; ++var41) {
-               double var42 = ((double)var41 + 0.5D - var29) / var52;
-               if (var42 * var42 < 1.0D) {
-                  for(int var44 = var53; var44 <= var39; ++var44) {
-                     double var45 = ((double)var44 + 0.5D - var31) / var52;
-                     if (var42 * var42 + var45 * var45 < 1.0D) {
-                        for(int var47 = var37; var47 <= var40; ++var47) {
-                           double var48 = ((double)var47 + 0.5D - var33) / var52;
-                           if (var42 * var42 + var45 * var45 + var48 * var48 < 1.0D) {
-                              int var50 = var41 - var16 + (var44 - var17) * var19 + (var47 - var18) * var19 * var20;
-                              if (!var22.get(var50)) {
-                                 var22.set(var50);
-                                 var23.set(var41, var44, var47);
-                                 if (var3.target.test(var1.getBlockState(var23), var2)) {
-                                    var1.setBlock(var23, var3.state, 2);
-                                    ++var21;
+      try {
+         for(int var72 = 0; var72 < var24; ++var72) {
+            double var29 = var25[var72 * 4 + 3];
+            if (var29 >= 0.0D) {
+               double var31 = var25[var72 * 4 + 0];
+               double var33 = var25[var72 * 4 + 1];
+               double var35 = var25[var72 * 4 + 2];
+               int var37 = Math.max(Mth.floor(var31 - var29), var16);
+               int var38 = Math.max(Mth.floor(var33 - var29), var17);
+               int var39 = Math.max(Mth.floor(var35 - var29), var18);
+               int var40 = Math.max(Mth.floor(var31 + var29), var37);
+               int var41 = Math.max(Mth.floor(var33 + var29), var38);
+               int var42 = Math.max(Mth.floor(var35 + var29), var39);
+
+               for(int var43 = var37; var43 <= var40; ++var43) {
+                  double var44 = ((double)var43 + 0.5D - var31) / var29;
+                  if (var44 * var44 < 1.0D) {
+                     for(int var46 = var38; var46 <= var41; ++var46) {
+                        double var47 = ((double)var46 + 0.5D - var33) / var29;
+                        if (var44 * var44 + var47 * var47 < 1.0D) {
+                           for(int var49 = var39; var49 <= var42; ++var49) {
+                              double var50 = ((double)var49 + 0.5D - var35) / var29;
+                              if (var44 * var44 + var47 * var47 + var50 * var50 < 1.0D && !var1.isOutsideBuildHeight(var46)) {
+                                 int var52 = var43 - var16 + (var46 - var17) * var19 + (var49 - var18) * var19 * var20;
+                                 if (!var22.get(var52)) {
+                                    var22.set(var52);
+                                    var23.set(var43, var46, var49);
+                                    LevelChunkSection var53 = var69.getSection(var23);
+                                    int var54 = SectionPos.sectionRelative(var43);
+                                    int var55 = SectionPos.sectionRelative(var46);
+                                    int var56 = SectionPos.sectionRelative(var49);
+                                    BlockState var57 = var53.getBlockState(var54, var55, var56);
+                                    Iterator var58 = var3.targetStates.iterator();
+
+                                    while(var58.hasNext()) {
+                                       OreConfiguration.TargetBlockState var59 = (OreConfiguration.TargetBlockState)var58.next();
+                                       if (canPlaceOre(var57, var69::getBlockState, var2, var3, var59, var23)) {
+                                          var53.setBlockState(var54, var55, var56, var59.state, false);
+                                          ++var21;
+                                          break;
+                                       }
+                                    }
                                  }
                               }
                            }
                         }
                      }
                   }
                }
             }
          }
+      } catch (Throwable var67) {
+         var71 = var67;
+         throw var67;
+      } finally {
+         if (var69 != null) {
+            if (var71 != null) {
+               try {
+                  var69.close();
+               } catch (Throwable var66) {
+                  var71.addSuppressed(var66);
+               }
+            } else {
+               var69.close();
+            }
+         }
+
       }
 
       return var21 > 0;
    }
+
+   public static boolean canPlaceOre(BlockState var0, Function<BlockPos, BlockState> var1, Random var2, OreConfiguration var3, OreConfiguration.TargetBlockState var4, BlockPos.MutableBlockPos var5) {
+      if (!var4.target.test(var0, var2)) {
+         return false;
+      } else if (shouldSkipAirCheck(var2, var3.discardChanceOnAirExposure)) {
+         return true;
+      } else {
+         return !isAdjacentToAir(var1, var5);
+      }
+   }
+
+   protected static boolean shouldSkipAirCheck(Random var0, float var1) {
+      if (var1 <= 0.0F) {
+         return true;
+      } else if (var1 >= 1.0F) {
+         return false;
+      } else {
+         return var0.nextFloat() >= var1;
+      }
+   }
 }
