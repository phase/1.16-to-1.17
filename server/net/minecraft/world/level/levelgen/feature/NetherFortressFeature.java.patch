--- net/minecraft/world/level/levelgen/feature/NetherFortressFeature.java
+++ net/minecraft/world/level/levelgen/feature/NetherFortressFeature.java
@@ -2,12 +2,14 @@
 
 import com.google.common.collect.ImmutableList;
 import com.mojang.serialization.Codec;
 import java.util.List;
 import net.minecraft.core.RegistryAccess;
+import net.minecraft.core.SectionPos;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.level.ChunkPos;
+import net.minecraft.world.level.LevelHeightAccessor;
 import net.minecraft.world.level.biome.Biome;
 import net.minecraft.world.level.biome.BiomeSource;
 import net.minecraft.world.level.biome.MobSpawnSettings;
 import net.minecraft.world.level.chunk.ChunkGenerator;
 import net.minecraft.world.level.levelgen.WorldgenRandom;
@@ -23,11 +25,11 @@
 
    public NetherFortressFeature(Codec<NoneFeatureConfiguration> var1) {
       super(var1);
    }
 
-   protected boolean isFeatureChunk(ChunkGenerator var1, BiomeSource var2, long var3, WorldgenRandom var5, int var6, int var7, Biome var8, ChunkPos var9, NoneFeatureConfiguration var10) {
+   protected boolean isFeatureChunk(ChunkGenerator var1, BiomeSource var2, long var3, WorldgenRandom var5, int var6, int var7, Biome var8, ChunkPos var9, NoneFeatureConfiguration var10, LevelHeightAccessor var11) {
       return var5.nextInt(5) < 2;
    }
 
    public StructureFeature.StructureStartFactory<NoneFeatureConfiguration> getStartFactory() {
       return NetherFortressFeature.NetherBridgeStart::new;
@@ -44,20 +46,20 @@
    public static class NetherBridgeStart extends StructureStart<NoneFeatureConfiguration> {
       public NetherBridgeStart(StructureFeature<NoneFeatureConfiguration> var1, int var2, int var3, BoundingBox var4, int var5, long var6) {
          super(var1, var2, var3, var4, var5, var6);
       }
 
-      public void generatePieces(RegistryAccess var1, ChunkGenerator var2, StructureManager var3, int var4, int var5, Biome var6, NoneFeatureConfiguration var7) {
-         NetherBridgePieces.StartPiece var8 = new NetherBridgePieces.StartPiece(this.random, (var4 << 4) + 2, (var5 << 4) + 2);
-         this.pieces.add(var8);
-         var8.addChildren(var8, this.pieces, this.random);
-         List var9 = var8.pendingChildren;
+      public void generatePieces(RegistryAccess var1, ChunkGenerator var2, StructureManager var3, int var4, int var5, Biome var6, NoneFeatureConfiguration var7, LevelHeightAccessor var8) {
+         NetherBridgePieces.StartPiece var9 = new NetherBridgePieces.StartPiece(this.random, SectionPos.sectionToBlockCoord(var4, 2), SectionPos.sectionToBlockCoord(var5, 2));
+         this.pieces.add(var9);
+         var9.addChildren(var9, this.pieces, this.random);
+         List var10 = var9.pendingChildren;
 
-         while(!var9.isEmpty()) {
-            int var10 = this.random.nextInt(var9.size());
-            StructurePiece var11 = (StructurePiece)var9.remove(var10);
-            var11.addChildren(var8, this.pieces, this.random);
+         while(!var10.isEmpty()) {
+            int var11 = this.random.nextInt(var10.size());
+            StructurePiece var12 = (StructurePiece)var10.remove(var11);
+            var12.addChildren(var9, this.pieces, this.random);
          }
 
          this.calculateBoundingBox();
          this.moveInsideHeights(this.random, 48, 70);
       }
