--- net/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacer.java
+++ net/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacer.java
@@ -2,44 +2,44 @@
 
 import com.mojang.datafixers.Products;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 import java.util.Random;
-import java.util.Set;
+import java.util.function.BiConsumer;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Registry;
-import net.minecraft.util.UniformInt;
-import net.minecraft.world.level.LevelSimulatedRW;
+import net.minecraft.util.valueproviders.IntProvider;
+import net.minecraft.world.level.LevelSimulatedReader;
+import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.levelgen.feature.TreeFeature;
 import net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration;
-import net.minecraft.world.level.levelgen.structure.BoundingBox;
 
 public abstract class FoliagePlacer {
    public static final Codec<FoliagePlacer> CODEC;
-   protected final UniformInt radius;
-   protected final UniformInt offset;
+   protected final IntProvider radius;
+   protected final IntProvider offset;
 
-   protected static <P extends FoliagePlacer> Products.P2<RecordCodecBuilder.Mu<P>, UniformInt, UniformInt> foliagePlacerParts(RecordCodecBuilder.Instance<P> var0) {
-      return var0.group(UniformInt.codec(0, 8, 8).fieldOf("radius").forGetter((var0x) -> {
+   protected static <P extends FoliagePlacer> Products.P2<RecordCodecBuilder.Mu<P>, IntProvider, IntProvider> foliagePlacerParts(RecordCodecBuilder.Instance<P> var0) {
+      return var0.group(IntProvider.codec(0, 16).fieldOf("radius").forGetter((var0x) -> {
          return var0x.radius;
-      }), UniformInt.codec(0, 8, 8).fieldOf("offset").forGetter((var0x) -> {
+      }), IntProvider.codec(0, 16).fieldOf("offset").forGetter((var0x) -> {
          return var0x.offset;
       }));
    }
 
-   public FoliagePlacer(UniformInt var1, UniformInt var2) {
+   public FoliagePlacer(IntProvider var1, IntProvider var2) {
       this.radius = var1;
       this.offset = var2;
    }
 
    protected abstract FoliagePlacerType<?> type();
 
-   public void createFoliage(LevelSimulatedRW var1, Random var2, TreeConfiguration var3, int var4, FoliagePlacer.FoliageAttachment var5, int var6, int var7, Set<BlockPos> var8, BoundingBox var9) {
-      this.createFoliage(var1, var2, var3, var4, var5, var6, var7, var8, this.offset(var2), var9);
+   public void createFoliage(LevelSimulatedReader var1, BiConsumer<BlockPos, BlockState> var2, Random var3, TreeConfiguration var4, int var5, FoliagePlacer.FoliageAttachment var6, int var7, int var8) {
+      this.createFoliage(var1, var2, var3, var4, var5, var6, var7, var8, this.offset(var3));
    }
 
-   protected abstract void createFoliage(LevelSimulatedRW var1, Random var2, TreeConfiguration var3, int var4, FoliagePlacer.FoliageAttachment var5, int var6, int var7, Set<BlockPos> var8, int var9, BoundingBox var10);
+   protected abstract void createFoliage(LevelSimulatedReader var1, BiConsumer<BlockPos, BlockState> var2, Random var3, TreeConfiguration var4, int var5, FoliagePlacer.FoliageAttachment var6, int var7, int var8, int var9);
 
    public abstract int foliageHeight(Random var1, int var2, TreeConfiguration var3);
 
    public int foliageRadius(Random var1, int var2) {
       return this.radius.sample(var1);
@@ -63,46 +63,49 @@
       }
 
       return this.shouldSkipLocation(var1, var7, var3, var8, var5, var6);
    }
 
-   protected void placeLeavesRow(LevelSimulatedRW var1, Random var2, TreeConfiguration var3, BlockPos var4, int var5, Set<BlockPos> var6, int var7, boolean var8, BoundingBox var9) {
-      int var10 = var8 ? 1 : 0;
-      BlockPos.MutableBlockPos var11 = new BlockPos.MutableBlockPos();
+   protected void placeLeavesRow(LevelSimulatedReader var1, BiConsumer<BlockPos, BlockState> var2, Random var3, TreeConfiguration var4, BlockPos var5, int var6, int var7, boolean var8) {
+      int var9 = var8 ? 1 : 0;
+      BlockPos.MutableBlockPos var10 = new BlockPos.MutableBlockPos();
 
-      for(int var12 = -var5; var12 <= var5 + var10; ++var12) {
-         for(int var13 = -var5; var13 <= var5 + var10; ++var13) {
-            if (!this.shouldSkipLocationSigned(var2, var12, var7, var13, var5, var8)) {
-               var11.setWithOffset(var4, var12, var7, var13);
-               if (TreeFeature.validTreePos(var1, var11)) {
-                  var1.setBlock(var11, var3.leavesProvider.getState(var2, var11), 19);
-                  var9.expand(new BoundingBox(var11, var11));
-                  var6.add(var11.immutable());
-               }
+      for(int var11 = -var6; var11 <= var6 + var9; ++var11) {
+         for(int var12 = -var6; var12 <= var6 + var9; ++var12) {
+            if (!this.shouldSkipLocationSigned(var3, var11, var7, var12, var6, var8)) {
+               var10.setWithOffset(var5, var11, var7, var12);
+               tryPlaceLeaf(var1, var2, var3, var4, var10);
             }
          }
       }
 
    }
 
+   protected static void tryPlaceLeaf(LevelSimulatedReader var0, BiConsumer<BlockPos, BlockState> var1, Random var2, TreeConfiguration var3, BlockPos var4) {
+      if (TreeFeature.validTreePos(var0, var4)) {
+         var1.accept(var4, var3.foliageProvider.getState(var2, var4));
+      }
+
+   }
+
    static {
       CODEC = Registry.FOLIAGE_PLACER_TYPES.dispatch(FoliagePlacer::type, FoliagePlacerType::codec);
    }
 
    public static final class FoliageAttachment {
-      private final BlockPos foliagePos;
+      private final BlockPos pos;
       private final int radiusOffset;
       private final boolean doubleTrunk;
 
       public FoliageAttachment(BlockPos var1, int var2, boolean var3) {
-         this.foliagePos = var1;
+         this.pos = var1;
          this.radiusOffset = var2;
          this.doubleTrunk = var3;
       }
 
-      public BlockPos foliagePos() {
-         return this.foliagePos;
+      public BlockPos pos() {
+         return this.pos;
       }
 
       public int radiusOffset() {
          return this.radiusOffset;
       }
