--- net/minecraft/world/level/levelgen/feature/foliageplacers/BlobFoliagePlacer.java
+++ net/minecraft/world/level/levelgen/feature/foliageplacers/BlobFoliagePlacer.java
@@ -4,42 +4,42 @@
 import com.mojang.datafixers.kinds.App;
 import com.mojang.datafixers.util.Function3;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 import java.util.Random;
-import java.util.Set;
+import java.util.function.BiConsumer;
 import net.minecraft.core.BlockPos;
-import net.minecraft.util.UniformInt;
-import net.minecraft.world.level.LevelSimulatedRW;
+import net.minecraft.util.valueproviders.IntProvider;
+import net.minecraft.world.level.LevelSimulatedReader;
+import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration;
-import net.minecraft.world.level.levelgen.structure.BoundingBox;
 
 public class BlobFoliagePlacer extends FoliagePlacer {
    public static final Codec<BlobFoliagePlacer> CODEC = RecordCodecBuilder.create((var0) -> {
       return blobParts(var0).apply(var0, (Function3)(BlobFoliagePlacer::new));
    });
    protected final int height;
 
-   protected static <P extends BlobFoliagePlacer> Products.P3<RecordCodecBuilder.Mu<P>, UniformInt, UniformInt, Integer> blobParts(RecordCodecBuilder.Instance<P> var0) {
+   protected static <P extends BlobFoliagePlacer> Products.P3<RecordCodecBuilder.Mu<P>, IntProvider, IntProvider, Integer> blobParts(RecordCodecBuilder.Instance<P> var0) {
       return foliagePlacerParts(var0).and((App)Codec.intRange(0, 16).fieldOf("height").forGetter((var0x) -> {
          return var0x.height;
       }));
    }
 
-   public BlobFoliagePlacer(UniformInt var1, UniformInt var2, int var3) {
+   public BlobFoliagePlacer(IntProvider var1, IntProvider var2, int var3) {
       super(var1, var2);
       this.height = var3;
    }
 
    protected FoliagePlacerType<?> type() {
       return FoliagePlacerType.BLOB_FOLIAGE_PLACER;
    }
 
-   protected void createFoliage(LevelSimulatedRW var1, Random var2, TreeConfiguration var3, int var4, FoliagePlacer.FoliageAttachment var5, int var6, int var7, Set<BlockPos> var8, int var9, BoundingBox var10) {
-      for(int var11 = var9; var11 >= var9 - var6; --var11) {
-         int var12 = Math.max(var7 + var5.radiusOffset() - 1 - var11 / 2, 0);
-         this.placeLeavesRow(var1, var2, var3, var5.foliagePos(), var12, var8, var11, var5.doubleTrunk(), var10);
+   protected void createFoliage(LevelSimulatedReader var1, BiConsumer<BlockPos, BlockState> var2, Random var3, TreeConfiguration var4, int var5, FoliagePlacer.FoliageAttachment var6, int var7, int var8, int var9) {
+      for(int var10 = var9; var10 >= var9 - var7; --var10) {
+         int var11 = Math.max(var8 + var6.radiusOffset() - 1 - var10 / 2, 0);
+         this.placeLeavesRow(var1, var2, var3, var4, var6.pos(), var11, var10, var6.doubleTrunk());
       }
 
    }
 
    public int foliageHeight(Random var1, int var2, TreeConfiguration var3) {
