--- net/minecraft/world/level/levelgen/feature/foliageplacers/MegaPineFoliagePlacer.java
+++ net/minecraft/world/level/levelgen/feature/foliageplacers/MegaPineFoliagePlacer.java
@@ -3,51 +3,51 @@
 import com.mojang.datafixers.kinds.App;
 import com.mojang.datafixers.util.Function3;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 import java.util.Random;
-import java.util.Set;
+import java.util.function.BiConsumer;
 import net.minecraft.core.BlockPos;
 import net.minecraft.util.Mth;
-import net.minecraft.util.UniformInt;
-import net.minecraft.world.level.LevelSimulatedRW;
+import net.minecraft.util.valueproviders.IntProvider;
+import net.minecraft.world.level.LevelSimulatedReader;
+import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration;
-import net.minecraft.world.level.levelgen.structure.BoundingBox;
 
 public class MegaPineFoliagePlacer extends FoliagePlacer {
    public static final Codec<MegaPineFoliagePlacer> CODEC = RecordCodecBuilder.create((var0) -> {
-      return foliagePlacerParts(var0).and((App)UniformInt.codec(0, 16, 8).fieldOf("crown_height").forGetter((var0x) -> {
+      return foliagePlacerParts(var0).and((App)IntProvider.codec(0, 24).fieldOf("crown_height").forGetter((var0x) -> {
          return var0x.crownHeight;
       })).apply(var0, (Function3)(MegaPineFoliagePlacer::new));
    });
-   private final UniformInt crownHeight;
+   private final IntProvider crownHeight;
 
-   public MegaPineFoliagePlacer(UniformInt var1, UniformInt var2, UniformInt var3) {
+   public MegaPineFoliagePlacer(IntProvider var1, IntProvider var2, IntProvider var3) {
       super(var1, var2);
       this.crownHeight = var3;
    }
 
    protected FoliagePlacerType<?> type() {
       return FoliagePlacerType.MEGA_PINE_FOLIAGE_PLACER;
    }
 
-   protected void createFoliage(LevelSimulatedRW var1, Random var2, TreeConfiguration var3, int var4, FoliagePlacer.FoliageAttachment var5, int var6, int var7, Set<BlockPos> var8, int var9, BoundingBox var10) {
-      BlockPos var11 = var5.foliagePos();
-      int var12 = 0;
+   protected void createFoliage(LevelSimulatedReader var1, BiConsumer<BlockPos, BlockState> var2, Random var3, TreeConfiguration var4, int var5, FoliagePlacer.FoliageAttachment var6, int var7, int var8, int var9) {
+      BlockPos var10 = var6.pos();
+      int var11 = 0;
 
-      for(int var13 = var11.getY() - var6 + var9; var13 <= var11.getY() + var9; ++var13) {
-         int var14 = var11.getY() - var13;
-         int var15 = var7 + var5.radiusOffset() + Mth.floor((float)var14 / (float)var6 * 3.5F);
-         int var16;
-         if (var14 > 0 && var15 == var12 && (var13 & 1) == 0) {
-            var16 = var15 + 1;
+      for(int var12 = var10.getY() - var7 + var9; var12 <= var10.getY() + var9; ++var12) {
+         int var13 = var10.getY() - var12;
+         int var14 = var8 + var6.radiusOffset() + Mth.floor((float)var13 / (float)var7 * 3.5F);
+         int var15;
+         if (var13 > 0 && var14 == var11 && (var12 & 1) == 0) {
+            var15 = var14 + 1;
          } else {
-            var16 = var15;
+            var15 = var14;
          }
 
-         this.placeLeavesRow(var1, var2, var3, new BlockPos(var11.getX(), var13, var11.getZ()), var16, var8, 0, var5.doubleTrunk(), var10);
-         var12 = var15;
+         this.placeLeavesRow(var1, var2, var3, var4, new BlockPos(var10.getX(), var12, var10.getZ()), var15, 0, var6.doubleTrunk());
+         var11 = var14;
       }
 
    }
 
    public int foliageHeight(Random var1, int var2, TreeConfiguration var3) {
