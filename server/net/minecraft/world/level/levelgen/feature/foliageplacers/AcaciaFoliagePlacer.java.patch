--- net/minecraft/world/level/levelgen/feature/foliageplacers/AcaciaFoliagePlacer.java
+++ net/minecraft/world/level/levelgen/feature/foliageplacers/AcaciaFoliagePlacer.java
@@ -1,37 +1,37 @@
 package net.minecraft.world.level.levelgen.feature.foliageplacers;
 
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 import java.util.Random;
-import java.util.Set;
+import java.util.function.BiConsumer;
 import java.util.function.BiFunction;
 import net.minecraft.core.BlockPos;
-import net.minecraft.util.UniformInt;
-import net.minecraft.world.level.LevelSimulatedRW;
+import net.minecraft.util.valueproviders.IntProvider;
+import net.minecraft.world.level.LevelSimulatedReader;
+import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration;
-import net.minecraft.world.level.levelgen.structure.BoundingBox;
 
 public class AcaciaFoliagePlacer extends FoliagePlacer {
    public static final Codec<AcaciaFoliagePlacer> CODEC = RecordCodecBuilder.create((var0) -> {
       return foliagePlacerParts(var0).apply(var0, (BiFunction)(AcaciaFoliagePlacer::new));
    });
 
-   public AcaciaFoliagePlacer(UniformInt var1, UniformInt var2) {
+   public AcaciaFoliagePlacer(IntProvider var1, IntProvider var2) {
       super(var1, var2);
    }
 
    protected FoliagePlacerType<?> type() {
       return FoliagePlacerType.ACACIA_FOLIAGE_PLACER;
    }
 
-   protected void createFoliage(LevelSimulatedRW var1, Random var2, TreeConfiguration var3, int var4, FoliagePlacer.FoliageAttachment var5, int var6, int var7, Set<BlockPos> var8, int var9, BoundingBox var10) {
-      boolean var11 = var5.doubleTrunk();
-      BlockPos var12 = var5.foliagePos().above(var9);
-      this.placeLeavesRow(var1, var2, var3, var12, var7 + var5.radiusOffset(), var8, -1 - var6, var11, var10);
-      this.placeLeavesRow(var1, var2, var3, var12, var7 - 1, var8, -var6, var11, var10);
-      this.placeLeavesRow(var1, var2, var3, var12, var7 + var5.radiusOffset() - 1, var8, 0, var11, var10);
+   protected void createFoliage(LevelSimulatedReader var1, BiConsumer<BlockPos, BlockState> var2, Random var3, TreeConfiguration var4, int var5, FoliagePlacer.FoliageAttachment var6, int var7, int var8, int var9) {
+      boolean var10 = var6.doubleTrunk();
+      BlockPos var11 = var6.pos().above(var9);
+      this.placeLeavesRow(var1, var2, var3, var4, var11, var8 + var6.radiusOffset(), -1 - var7, var10);
+      this.placeLeavesRow(var1, var2, var3, var4, var11, var8 - 1, -var7, var10);
+      this.placeLeavesRow(var1, var2, var3, var4, var11, var8 + var6.radiusOffset() - 1, 0, var10);
    }
 
    public int foliageHeight(Random var1, int var2, TreeConfiguration var3) {
       return 0;
    }
