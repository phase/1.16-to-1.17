--- net/minecraft/world/level/levelgen/feature/foliageplacers/DarkOakFoliagePlacer.java
+++ net/minecraft/world/level/levelgen/feature/foliageplacers/DarkOakFoliagePlacer.java
@@ -1,44 +1,44 @@
 package net.minecraft.world.level.levelgen.feature.foliageplacers;
 
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 import java.util.Random;
-import java.util.Set;
+import java.util.function.BiConsumer;
 import java.util.function.BiFunction;
 import net.minecraft.core.BlockPos;
-import net.minecraft.util.UniformInt;
-import net.minecraft.world.level.LevelSimulatedRW;
+import net.minecraft.util.valueproviders.IntProvider;
+import net.minecraft.world.level.LevelSimulatedReader;
+import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration;
-import net.minecraft.world.level.levelgen.structure.BoundingBox;
 
 public class DarkOakFoliagePlacer extends FoliagePlacer {
    public static final Codec<DarkOakFoliagePlacer> CODEC = RecordCodecBuilder.create((var0) -> {
       return foliagePlacerParts(var0).apply(var0, (BiFunction)(DarkOakFoliagePlacer::new));
    });
 
-   public DarkOakFoliagePlacer(UniformInt var1, UniformInt var2) {
+   public DarkOakFoliagePlacer(IntProvider var1, IntProvider var2) {
       super(var1, var2);
    }
 
    protected FoliagePlacerType<?> type() {
       return FoliagePlacerType.DARK_OAK_FOLIAGE_PLACER;
    }
 
-   protected void createFoliage(LevelSimulatedRW var1, Random var2, TreeConfiguration var3, int var4, FoliagePlacer.FoliageAttachment var5, int var6, int var7, Set<BlockPos> var8, int var9, BoundingBox var10) {
-      BlockPos var11 = var5.foliagePos().above(var9);
-      boolean var12 = var5.doubleTrunk();
-      if (var12) {
-         this.placeLeavesRow(var1, var2, var3, var11, var7 + 2, var8, -1, var12, var10);
-         this.placeLeavesRow(var1, var2, var3, var11, var7 + 3, var8, 0, var12, var10);
-         this.placeLeavesRow(var1, var2, var3, var11, var7 + 2, var8, 1, var12, var10);
-         if (var2.nextBoolean()) {
-            this.placeLeavesRow(var1, var2, var3, var11, var7, var8, 2, var12, var10);
+   protected void createFoliage(LevelSimulatedReader var1, BiConsumer<BlockPos, BlockState> var2, Random var3, TreeConfiguration var4, int var5, FoliagePlacer.FoliageAttachment var6, int var7, int var8, int var9) {
+      BlockPos var10 = var6.pos().above(var9);
+      boolean var11 = var6.doubleTrunk();
+      if (var11) {
+         this.placeLeavesRow(var1, var2, var3, var4, var10, var8 + 2, -1, var11);
+         this.placeLeavesRow(var1, var2, var3, var4, var10, var8 + 3, 0, var11);
+         this.placeLeavesRow(var1, var2, var3, var4, var10, var8 + 2, 1, var11);
+         if (var3.nextBoolean()) {
+            this.placeLeavesRow(var1, var2, var3, var4, var10, var8, 2, var11);
          }
       } else {
-         this.placeLeavesRow(var1, var2, var3, var11, var7 + 2, var8, -1, var12, var10);
-         this.placeLeavesRow(var1, var2, var3, var11, var7 + 1, var8, 0, var12, var10);
+         this.placeLeavesRow(var1, var2, var3, var4, var10, var8 + 2, -1, var11);
+         this.placeLeavesRow(var1, var2, var3, var4, var10, var8 + 1, 0, var11);
       }
 
    }
 
    public int foliageHeight(Random var1, int var2, TreeConfiguration var3) {
