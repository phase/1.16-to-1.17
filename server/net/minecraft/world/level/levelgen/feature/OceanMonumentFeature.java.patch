--- net/minecraft/world/level/levelgen/feature/OceanMonumentFeature.java
+++ net/minecraft/world/level/levelgen/feature/OceanMonumentFeature.java
@@ -6,12 +6,14 @@
 import java.util.List;
 import java.util.Random;
 import java.util.Set;
 import net.minecraft.core.Direction;
 import net.minecraft.core.RegistryAccess;
+import net.minecraft.core.SectionPos;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.level.ChunkPos;
+import net.minecraft.world.level.LevelHeightAccessor;
 import net.minecraft.world.level.StructureFeatureManager;
 import net.minecraft.world.level.WorldGenLevel;
 import net.minecraft.world.level.biome.Biome;
 import net.minecraft.world.level.biome.BiomeSource;
 import net.minecraft.world.level.biome.MobSpawnSettings;
@@ -32,34 +34,34 @@
 
    protected boolean linearSeparation() {
       return false;
    }
 
-   protected boolean isFeatureChunk(ChunkGenerator var1, BiomeSource var2, long var3, WorldgenRandom var5, int var6, int var7, Biome var8, ChunkPos var9, NoneFeatureConfiguration var10) {
-      Set var11 = var2.getBiomesWithin(var6 * 16 + 9, var1.getSeaLevel(), var7 * 16 + 9, 16);
-      Iterator var12 = var11.iterator();
+   protected boolean isFeatureChunk(ChunkGenerator var1, BiomeSource var2, long var3, WorldgenRandom var5, int var6, int var7, Biome var8, ChunkPos var9, NoneFeatureConfiguration var10, LevelHeightAccessor var11) {
+      Set var12 = var2.getBiomesWithin(SectionPos.sectionToBlockCoord(var6, 9), var1.getSeaLevel(), SectionPos.sectionToBlockCoord(var7, 9), 16);
+      Iterator var13 = var12.iterator();
 
-      Biome var13;
+      Biome var14;
       do {
-         if (!var12.hasNext()) {
-            Set var15 = var2.getBiomesWithin(var6 * 16 + 9, var1.getSeaLevel(), var7 * 16 + 9, 29);
-            Iterator var16 = var15.iterator();
+         if (!var13.hasNext()) {
+            Set var16 = var2.getBiomesWithin(SectionPos.sectionToBlockCoord(var6, 9), var1.getSeaLevel(), SectionPos.sectionToBlockCoord(var7, 9), 29);
+            Iterator var17 = var16.iterator();
 
-            Biome var14;
+            Biome var15;
             do {
-               if (!var16.hasNext()) {
+               if (!var17.hasNext()) {
                   return true;
                }
 
-               var14 = (Biome)var16.next();
-            } while(var14.getBiomeCategory() == Biome.BiomeCategory.OCEAN || var14.getBiomeCategory() == Biome.BiomeCategory.RIVER);
+               var15 = (Biome)var17.next();
+            } while(var15.getBiomeCategory() == Biome.BiomeCategory.OCEAN || var15.getBiomeCategory() == Biome.BiomeCategory.RIVER);
 
             return false;
          }
 
-         var13 = (Biome)var12.next();
-      } while(var13.getGenerationSettings().isValidStart(this));
+         var14 = (Biome)var13.next();
+      } while(var14.getGenerationSettings().isValidStart(this));
 
       return false;
    }
 
    public StructureFeature.StructureStartFactory<NoneFeatureConfiguration> getStartFactory() {
@@ -79,17 +81,17 @@
 
       public OceanMonumentStart(StructureFeature<NoneFeatureConfiguration> var1, int var2, int var3, BoundingBox var4, int var5, long var6) {
          super(var1, var2, var3, var4, var5, var6);
       }
 
-      public void generatePieces(RegistryAccess var1, ChunkGenerator var2, StructureManager var3, int var4, int var5, Biome var6, NoneFeatureConfiguration var7) {
+      public void generatePieces(RegistryAccess var1, ChunkGenerator var2, StructureManager var3, int var4, int var5, Biome var6, NoneFeatureConfiguration var7, LevelHeightAccessor var8) {
          this.generatePieces(var4, var5);
       }
 
       private void generatePieces(int var1, int var2) {
-         int var3 = var1 * 16 - 29;
-         int var4 = var2 * 16 - 29;
+         int var3 = SectionPos.sectionToBlockCoord(var1) - 29;
+         int var4 = SectionPos.sectionToBlockCoord(var2) - 29;
          Direction var5 = Direction.Plane.HORIZONTAL.getRandomDirection(this.random);
          this.pieces.add(new OceanMonumentPieces.MonumentBuilding(this.random, var3, var4, var5));
          this.calculateBoundingBox();
          this.isCreated = true;
       }
