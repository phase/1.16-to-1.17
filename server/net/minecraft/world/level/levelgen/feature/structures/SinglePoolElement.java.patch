--- net/minecraft/world/level/levelgen/feature/structures/SinglePoolElement.java
+++ net/minecraft/world/level/levelgen/feature/structures/SinglePoolElement.java
@@ -1,7 +1,8 @@
 package net.minecraft.world.level.levelgen.feature.structures;
 
+import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Lists;
 import com.mojang.datafixers.util.Either;
 import com.mojang.datafixers.util.Function3;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.DataResult;
@@ -9,15 +10,17 @@
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.Random;
 import java.util.function.Function;
 import java.util.function.Supplier;
 import net.minecraft.core.BlockPos;
+import net.minecraft.core.Vec3i;
 import net.minecraft.data.worldgen.ProcessorLists;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.level.StructureFeatureManager;
 import net.minecraft.world.level.WorldGenLevel;
 import net.minecraft.world.level.block.Blocks;
@@ -39,11 +42,11 @@
    protected final Either<ResourceLocation, StructureTemplate> template;
    protected final Supplier<StructureProcessorList> processors;
 
    private static <T> DataResult<T> encodeTemplate(Either<ResourceLocation, StructureTemplate> var0, DynamicOps<T> var1, T var2) {
       Optional var3 = var0.left();
-      return !var3.isPresent() ? DataResult.error("Can not serialize a runtime pool element") : ResourceLocation.CODEC.encode(var3.get(), var1, var2);
+      return !var3.isPresent() ? DataResult.error("Can not serialize a runtime pool element") : ResourceLocation.CODEC.encode((ResourceLocation)var3.get(), var1, var2);
    }
 
    protected static <E extends SinglePoolElement> RecordCodecBuilder<E, Supplier<StructureProcessorList>> processorsCodec() {
       return StructureProcessorType.LIST_CODEC.fieldOf("processors").forGetter((var0) -> {
          return var0.processors;
@@ -66,12 +69,19 @@
       this(Either.right(var1), () -> {
          return ProcessorLists.EMPTY;
       }, StructureTemplatePool.Projection.RIGID);
    }
 
+   public Vec3i getSize(StructureManager var1, Rotation var2) {
+      StructureTemplate var3 = this.getTemplate(var1);
+      return var3.getSize(var2);
+   }
+
    private StructureTemplate getTemplate(StructureManager var1) {
-      return (StructureTemplate)this.template.map(var1::getOrCreate, Function.identity());
+      Either var10000 = this.template;
+      Objects.requireNonNull(var1);
+      return (StructureTemplate)var10000.map(var1::getOrCreate, Function.identity());
    }
 
    public List<StructureTemplate.StructureBlockInfo> getDataMarkers(StructureManager var1, BlockPos var2, Rotation var3, boolean var4) {
       StructureTemplate var5 = this.getTemplate(var1);
       List var6 = var5.filterBlocks(var2, (new StructurePlaceSettings()).setRotation(var3), Blocks.STRUCTURE_BLOCK, var4);
@@ -131,12 +141,16 @@
       var4.setFinalizeEntities(true);
       if (!var3) {
          var4.addProcessor(JigsawReplacementProcessor.INSTANCE);
       }
 
-      ((StructureProcessorList)this.processors.get()).list().forEach(var4::addProcessor);
-      this.getProjection().getProcessors().forEach(var4::addProcessor);
+      List var10000 = ((StructureProcessorList)this.processors.get()).list();
+      Objects.requireNonNull(var4);
+      var10000.forEach(var4::addProcessor);
+      ImmutableList var5 = this.getProjection().getProcessors();
+      Objects.requireNonNull(var4);
+      var5.forEach(var4::addProcessor);
       return var4;
    }
 
    public StructurePoolElementType<?> getType() {
       return StructurePoolElementType.SINGLE;
