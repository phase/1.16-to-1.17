--- net/minecraft/world/level/levelgen/feature/configurations/OreConfiguration.java
+++ net/minecraft/world/level/levelgen/feature/configurations/OreConfiguration.java
@@ -1,44 +1,87 @@
 package net.minecraft.world.level.levelgen.feature.configurations;
 
+import com.google.common.collect.ImmutableList;
 import com.mojang.datafixers.util.Function3;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
+import java.util.List;
+import java.util.function.BiFunction;
 import net.minecraft.tags.BlockTags;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.levelgen.structure.templatesystem.BlockMatchTest;
 import net.minecraft.world.level.levelgen.structure.templatesystem.RuleTest;
 import net.minecraft.world.level.levelgen.structure.templatesystem.TagMatchTest;
 
 public class OreConfiguration implements FeatureConfiguration {
    public static final Codec<OreConfiguration> CODEC = RecordCodecBuilder.create((var0) -> {
-      return var0.group(RuleTest.CODEC.fieldOf("target").forGetter((var0x) -> {
-         return var0x.target;
-      }), BlockState.CODEC.fieldOf("state").forGetter((var0x) -> {
-         return var0x.state;
+      return var0.group(Codec.list(OreConfiguration.TargetBlockState.CODEC).fieldOf("targets").forGetter((var0x) -> {
+         return var0x.targetStates;
       }), Codec.intRange(0, 64).fieldOf("size").forGetter((var0x) -> {
          return var0x.size;
+      }), Codec.floatRange(0.0F, 1.0F).fieldOf("discard_chance_on_air_exposure").forGetter((var0x) -> {
+         return var0x.discardChanceOnAirExposure;
       })).apply(var0, (Function3)(OreConfiguration::new));
    });
-   public final RuleTest target;
+   public final List<OreConfiguration.TargetBlockState> targetStates;
    public final int size;
-   public final BlockState state;
+   public final float discardChanceOnAirExposure;
 
+   public OreConfiguration(List<OreConfiguration.TargetBlockState> var1, int var2, float var3) {
+      this.size = var2;
+      this.targetStates = var1;
+      this.discardChanceOnAirExposure = var3;
+   }
+
+   public OreConfiguration(List<OreConfiguration.TargetBlockState> var1, int var2) {
+      this(var1, var2, 0.0F);
+   }
+
+   public OreConfiguration(RuleTest var1, BlockState var2, int var3, float var4) {
+      this(ImmutableList.of(new OreConfiguration.TargetBlockState(var1, var2)), var3, var4);
+   }
+
    public OreConfiguration(RuleTest var1, BlockState var2, int var3) {
-      this.size = var3;
-      this.state = var2;
-      this.target = var1;
+      this(ImmutableList.of(new OreConfiguration.TargetBlockState(var1, var2)), var3, 0.0F);
    }
 
+   public static OreConfiguration.TargetBlockState target(RuleTest var0, BlockState var1) {
+      return new OreConfiguration.TargetBlockState(var0, var1);
+   }
+
+   public static class TargetBlockState {
+      public static final Codec<OreConfiguration.TargetBlockState> CODEC = RecordCodecBuilder.create((var0) -> {
+         return var0.group(RuleTest.CODEC.fieldOf("target").forGetter((var0x) -> {
+            return var0x.target;
+         }), BlockState.CODEC.fieldOf("state").forGetter((var0x) -> {
+            return var0x.state;
+         })).apply(var0, (BiFunction)(OreConfiguration.TargetBlockState::new));
+      });
+      public final RuleTest target;
+      public final BlockState state;
+
+      private TargetBlockState(RuleTest var1, BlockState var2) {
+         this.target = var1;
+         this.state = var2;
+      }
+   }
+
    public static final class Predicates {
       public static final RuleTest NATURAL_STONE;
+      public static final RuleTest STONE_ORE_REPLACEABLES;
+      public static final RuleTest DEEPSLATE_ORE_REPLACEABLES;
       public static final RuleTest NETHERRACK;
       public static final RuleTest NETHER_ORE_REPLACEABLES;
 
+      public Predicates() {
+      }
+
       static {
          NATURAL_STONE = new TagMatchTest(BlockTags.BASE_STONE_OVERWORLD);
+         STONE_ORE_REPLACEABLES = new TagMatchTest(BlockTags.STONE_ORE_REPLACEABLES);
+         DEEPSLATE_ORE_REPLACEABLES = new TagMatchTest(BlockTags.DEEPSLATE_ORE_REPLACEABLES);
          NETHERRACK = new BlockMatchTest(Blocks.NETHERRACK);
          NETHER_ORE_REPLACEABLES = new TagMatchTest(BlockTags.BASE_STONE_NETHER);
       }
    }
 }
