--- net/minecraft/world/level/levelgen/feature/configurations/VegetationPatchConfiguration.java
+++ net/minecraft/world/level/levelgen/feature/configurations/VegetationPatchConfiguration.java
@@ -1,0 +1,60 @@
+package net.minecraft.world.level.levelgen.feature.configurations;
+
+import com.mojang.datafixers.util.Function10;
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.codecs.RecordCodecBuilder;
+import java.util.function.Supplier;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.util.UniformInt;
+import net.minecraft.world.level.levelgen.feature.ConfiguredFeature;
+import net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider;
+import net.minecraft.world.level.levelgen.placement.CaveSurface;
+
+public class VegetationPatchConfiguration implements FeatureConfiguration {
+   public static final Codec<VegetationPatchConfiguration> CODEC = RecordCodecBuilder.create((var0) -> {
+      return var0.group(ResourceLocation.CODEC.fieldOf("replaceable").forGetter((var0x) -> {
+         return var0x.replaceable;
+      }), BlockStateProvider.CODEC.fieldOf("ground_state").forGetter((var0x) -> {
+         return var0x.groundState;
+      }), ConfiguredFeature.CODEC.fieldOf("vegetation_feature").forGetter((var0x) -> {
+         return var0x.vegetationFeature;
+      }), CaveSurface.CODEC.fieldOf("surface").forGetter((var0x) -> {
+         return var0x.surface;
+      }), UniformInt.codec(1, 64, 64).fieldOf("depth").forGetter((var0x) -> {
+         return var0x.depth;
+      }), Codec.floatRange(0.0F, 1.0F).fieldOf("extra_bottom_block_chance").forGetter((var0x) -> {
+         return var0x.extraBottomBlockChance;
+      }), Codec.intRange(1, 256).fieldOf("vertical_range").forGetter((var0x) -> {
+         return var0x.verticalRange;
+      }), Codec.floatRange(0.0F, 1.0F).fieldOf("vegetation_chance").forGetter((var0x) -> {
+         return var0x.vegetationChance;
+      }), UniformInt.CODEC.fieldOf("xz_radius").forGetter((var0x) -> {
+         return var0x.xzRadius;
+      }), Codec.floatRange(0.0F, 1.0F).fieldOf("extra_edge_column_chance").forGetter((var0x) -> {
+         return var0x.extraEdgeColumnChance;
+      })).apply(var0, (Function10)(VegetationPatchConfiguration::new));
+   });
+   public final ResourceLocation replaceable;
+   public final BlockStateProvider groundState;
+   public final Supplier<ConfiguredFeature<?, ?>> vegetationFeature;
+   public final CaveSurface surface;
+   public final UniformInt depth;
+   public final float extraBottomBlockChance;
+   public final int verticalRange;
+   public final float vegetationChance;
+   public final UniformInt xzRadius;
+   public final float extraEdgeColumnChance;
+
+   public VegetationPatchConfiguration(ResourceLocation var1, BlockStateProvider var2, Supplier<ConfiguredFeature<?, ?>> var3, CaveSurface var4, UniformInt var5, float var6, int var7, float var8, UniformInt var9, float var10) {
+      this.replaceable = var1;
+      this.groundState = var2;
+      this.vegetationFeature = var3;
+      this.surface = var4;
+      this.depth = var5;
+      this.extraBottomBlockChance = var6;
+      this.verticalRange = var7;
+      this.vegetationChance = var8;
+      this.xzRadius = var9;
+      this.extraEdgeColumnChance = var10;
+   }
+}
