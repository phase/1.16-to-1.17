--- net/minecraft/world/level/levelgen/feature/IcebergFeature.java
+++ net/minecraft/world/level/levelgen/feature/IcebergFeature.java
@@ -5,72 +5,73 @@
 import net.minecraft.core.BlockPos;
 import net.minecraft.util.Mth;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.WorldGenLevel;
-import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.chunk.ChunkGenerator;
 import net.minecraft.world.level.levelgen.feature.configurations.BlockStateConfiguration;
 import net.minecraft.world.level.material.Material;
 
 public class IcebergFeature extends Feature<BlockStateConfiguration> {
    public IcebergFeature(Codec<BlockStateConfiguration> var1) {
       super(var1);
    }
 
-   public boolean place(WorldGenLevel var1, ChunkGenerator var2, Random var3, BlockPos var4, BlockStateConfiguration var5) {
-      var4 = new BlockPos(var4.getX(), var2.getSeaLevel(), var4.getZ());
-      boolean var6 = var3.nextDouble() > 0.7D;
-      BlockState var7 = var5.state;
-      double var8 = var3.nextDouble() * 2.0D * 3.141592653589793D;
-      int var10 = 11 - var3.nextInt(5);
-      int var11 = 3 + var3.nextInt(3);
-      boolean var12 = var3.nextDouble() > 0.7D;
-      boolean var13 = true;
-      int var14 = var12 ? var3.nextInt(6) + 6 : var3.nextInt(15) + 3;
-      if (!var12 && var3.nextDouble() > 0.9D) {
-         var14 += var3.nextInt(19) + 7;
+   public boolean place(FeaturePlaceContext<BlockStateConfiguration> var1) {
+      BlockPos var2 = var1.origin();
+      WorldGenLevel var3 = var1.level();
+      var2 = new BlockPos(var2.getX(), var1.chunkGenerator().getSeaLevel(), var2.getZ());
+      Random var4 = var1.random();
+      boolean var5 = var4.nextDouble() > 0.7D;
+      BlockState var6 = ((BlockStateConfiguration)var1.config()).state;
+      double var7 = var4.nextDouble() * 2.0D * 3.141592653589793D;
+      int var9 = 11 - var4.nextInt(5);
+      int var10 = 3 + var4.nextInt(3);
+      boolean var11 = var4.nextDouble() > 0.7D;
+      boolean var12 = true;
+      int var13 = var11 ? var4.nextInt(6) + 6 : var4.nextInt(15) + 3;
+      if (!var11 && var4.nextDouble() > 0.9D) {
+         var13 += var4.nextInt(19) + 7;
       }
 
-      int var15 = Math.min(var14 + var3.nextInt(11), 18);
-      int var16 = Math.min(var14 + var3.nextInt(7) - var3.nextInt(5), 11);
-      int var17 = var12 ? var10 : 11;
+      int var14 = Math.min(var13 + var4.nextInt(11), 18);
+      int var15 = Math.min(var13 + var4.nextInt(7) - var4.nextInt(5), 11);
+      int var16 = var11 ? var9 : 11;
 
+      int var17;
       int var18;
       int var19;
       int var20;
-      int var21;
-      for(var18 = -var17; var18 < var17; ++var18) {
-         for(var19 = -var17; var19 < var17; ++var19) {
-            for(var20 = 0; var20 < var14; ++var20) {
-               var21 = var12 ? this.heightDependentRadiusEllipse(var20, var14, var16) : this.heightDependentRadiusRound(var3, var20, var14, var16);
-               if (var12 || var18 < var21) {
-                  this.generateIcebergBlock(var1, var3, var4, var14, var18, var20, var19, var21, var17, var12, var11, var8, var6, var7);
+      for(var17 = -var16; var17 < var16; ++var17) {
+         for(var18 = -var16; var18 < var16; ++var18) {
+            for(var19 = 0; var19 < var13; ++var19) {
+               var20 = var11 ? this.heightDependentRadiusEllipse(var19, var13, var15) : this.heightDependentRadiusRound(var4, var19, var13, var15);
+               if (var11 || var17 < var20) {
+                  this.generateIcebergBlock(var3, var4, var2, var13, var17, var19, var18, var20, var16, var11, var10, var7, var5, var6);
                }
             }
          }
       }
 
-      this.smooth(var1, var4, var16, var14, var12, var10);
+      this.smooth(var3, var2, var15, var13, var11, var9);
 
-      for(var18 = -var17; var18 < var17; ++var18) {
-         for(var19 = -var17; var19 < var17; ++var19) {
-            for(var20 = -1; var20 > -var15; --var20) {
-               var21 = var12 ? Mth.ceil((float)var17 * (1.0F - (float)Math.pow((double)var20, 2.0D) / ((float)var15 * 8.0F))) : var17;
-               int var22 = this.heightDependentRadiusSteep(var3, -var20, var15, var16);
-               if (var18 < var22) {
-                  this.generateIcebergBlock(var1, var3, var4, var15, var18, var20, var19, var22, var21, var12, var11, var8, var6, var7);
+      for(var17 = -var16; var17 < var16; ++var17) {
+         for(var18 = -var16; var18 < var16; ++var18) {
+            for(var19 = -1; var19 > -var14; --var19) {
+               var20 = var11 ? Mth.ceil((float)var16 * (1.0F - (float)Math.pow((double)var19, 2.0D) / ((float)var14 * 8.0F))) : var16;
+               int var21 = this.heightDependentRadiusSteep(var4, -var19, var14, var15);
+               if (var17 < var21) {
+                  this.generateIcebergBlock(var3, var4, var2, var14, var17, var19, var18, var21, var20, var11, var10, var7, var5, var6);
                }
             }
          }
       }
 
-      boolean var23 = var12 ? var3.nextDouble() > 0.1D : var3.nextDouble() > 0.7D;
-      if (var23) {
-         this.generateCutOut(var3, var1, var16, var14, var4, var12, var10, var8, var11);
+      boolean var22 = var11 ? var4.nextDouble() > 0.1D : var4.nextDouble() > 0.7D;
+      if (var22) {
+         this.generateCutOut(var4, var3, var15, var13, var2, var11, var9, var7, var10);
       }
 
       return true;
    }
 
@@ -115,12 +116,12 @@
       for(int var13 = -var11; var13 < var11; ++var13) {
          for(int var14 = -var11; var14 < var11; ++var14) {
             double var15 = this.signedDistanceEllipse(var13, var14, var8, var11, var12, var6);
             if (var15 < 0.0D) {
                BlockPos var17 = var3.offset(var13, var2, var14);
-               Block var18 = var4.getBlockState(var17).getBlock();
-               if (this.isIcebergBlock(var18) || var18 == Blocks.SNOW_BLOCK) {
+               BlockState var18 = var4.getBlockState(var17);
+               if (isIcebergState(var18) || var18.is(Blocks.SNOW_BLOCK)) {
                   if (var5) {
                      this.setBlock(var4, var17, Blocks.WATER.defaultBlockState());
                   } else {
                      this.setBlock(var4, var17, Blocks.AIR.defaultBlockState());
                      this.removeFloatingSnowLayer(var4, var17);
@@ -206,12 +207,12 @@
       float var5 = 1.0F + var1.nextFloat() / 2.0F;
       float var6 = (1.0F - (float)var2 / ((float)var3 * var5)) * (float)var4;
       return Mth.ceil(var6 / 2.0F);
    }
 
-   private boolean isIcebergBlock(Block var1) {
-      return var1 == Blocks.PACKED_ICE || var1 == Blocks.SNOW_BLOCK || var1 == Blocks.BLUE_ICE;
+   private static boolean isIcebergState(BlockState var0) {
+      return var0.is(Blocks.PACKED_ICE) || var0.is(Blocks.SNOW_BLOCK) || var0.is(Blocks.BLUE_ICE);
    }
 
    private boolean belowIsAir(BlockGetter var1, BlockPos var2) {
       return var1.getBlockState(var2.below()).getMaterial() == Material.AIR;
    }
@@ -221,24 +222,24 @@
 
       for(int var8 = -var7; var8 <= var7; ++var8) {
          for(int var9 = -var7; var9 <= var7; ++var9) {
             for(int var10 = 0; var10 <= var4; ++var10) {
                BlockPos var11 = var2.offset(var8, var10, var9);
-               Block var12 = var1.getBlockState(var11).getBlock();
-               if (this.isIcebergBlock(var12) || var12 == Blocks.SNOW) {
+               BlockState var12 = var1.getBlockState(var11);
+               if (isIcebergState(var12) || var12.is(Blocks.SNOW)) {
                   if (this.belowIsAir(var1, var11)) {
                      this.setBlock(var1, var11, Blocks.AIR.defaultBlockState());
                      this.setBlock(var1, var11.above(), Blocks.AIR.defaultBlockState());
-                  } else if (this.isIcebergBlock(var12)) {
-                     Block[] var13 = new Block[]{var1.getBlockState(var11.west()).getBlock(), var1.getBlockState(var11.east()).getBlock(), var1.getBlockState(var11.north()).getBlock(), var1.getBlockState(var11.south()).getBlock()};
+                  } else if (isIcebergState(var12)) {
+                     BlockState[] var13 = new BlockState[]{var1.getBlockState(var11.west()), var1.getBlockState(var11.east()), var1.getBlockState(var11.north()), var1.getBlockState(var11.south())};
                      int var14 = 0;
-                     Block[] var15 = var13;
+                     BlockState[] var15 = var13;
                      int var16 = var13.length;
 
                      for(int var17 = 0; var17 < var16; ++var17) {
-                        Block var18 = var15[var17];
-                        if (!this.isIcebergBlock(var18)) {
+                        BlockState var18 = var15[var17];
+                        if (!isIcebergState(var18)) {
                            ++var14;
                         }
                      }
 
                      if (var14 >= 3) {
