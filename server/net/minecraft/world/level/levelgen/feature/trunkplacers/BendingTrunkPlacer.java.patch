--- net/minecraft/world/level/levelgen/feature/trunkplacers/BendingTrunkPlacer.java
+++ net/minecraft/world/level/levelgen/feature/trunkplacers/BendingTrunkPlacer.java
@@ -1,0 +1,79 @@
+package net.minecraft.world.level.levelgen.feature.trunkplacers;
+
+import com.google.common.collect.Lists;
+import com.mojang.datafixers.util.Function5;
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.codecs.RecordCodecBuilder;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Random;
+import java.util.Set;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
+import net.minecraft.util.UniformInt;
+import net.minecraft.world.level.LevelSimulatedRW;
+import net.minecraft.world.level.levelgen.feature.TreeFeature;
+import net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration;
+import net.minecraft.world.level.levelgen.feature.foliageplacers.FoliagePlacer;
+import net.minecraft.world.level.levelgen.structure.BoundingBox;
+
+public class BendingTrunkPlacer extends TrunkPlacer {
+   public static final Codec<BendingTrunkPlacer> CODEC = RecordCodecBuilder.create((var0) -> {
+      return trunkPlacerParts(var0).and(var0.group(Codec.intRange(1, Integer.MAX_VALUE).optionalFieldOf("min_height_for_leaves", 1).forGetter((var0x) -> {
+         return var0x.minHeightForLeaves;
+      }), UniformInt.codec(1, 32, 32).fieldOf("bend_length").forGetter((var0x) -> {
+         return var0x.bendLength;
+      }))).apply(var0, (Function5)(BendingTrunkPlacer::new));
+   });
+   private final int minHeightForLeaves;
+   private final UniformInt bendLength;
+
+   public BendingTrunkPlacer(int var1, int var2, int var3, int var4, UniformInt var5) {
+      super(var1, var2, var3);
+      this.minHeightForLeaves = var4;
+      this.bendLength = var5;
+   }
+
+   protected TrunkPlacerType<?> type() {
+      return TrunkPlacerType.BENDING_TRUNK_PLACER;
+   }
+
+   public List<FoliagePlacer.FoliageAttachment> placeTrunk(LevelSimulatedRW var1, Random var2, int var3, BlockPos var4, Set<BlockPos> var5, BoundingBox var6, TreeConfiguration var7) {
+      Direction var8 = Direction.Plane.HORIZONTAL.getRandomDirection(var2);
+      int var9 = var3 - 1;
+      BlockPos.MutableBlockPos var10 = var4.mutable();
+      BlockPos var11 = var10.below();
+      setDirtAt(var1, var2, var11, var7);
+      ArrayList var12 = Lists.newArrayList();
+
+      int var13;
+      for(var13 = 0; var13 <= var9; ++var13) {
+         if (var13 + 1 >= var9 + var2.nextInt(2)) {
+            var10.move(var8);
+         }
+
+         if (TreeFeature.validTreePos(var1, var10)) {
+            placeLog(var1, var2, var10, var5, var6, var7);
+         }
+
+         if (var13 >= this.minHeightForLeaves) {
+            var12.add(new FoliagePlacer.FoliageAttachment(var10.immutable(), 0, false));
+         }
+
+         var10.move(Direction.UP);
+      }
+
+      var13 = this.bendLength.sample(var2);
+
+      for(int var14 = 0; var14 <= var13; ++var14) {
+         if (TreeFeature.validTreePos(var1, var10)) {
+            placeLog(var1, var2, var10, var5, var6, var7);
+         }
+
+         var12.add(new FoliagePlacer.FoliageAttachment(var10.immutable(), 0, false));
+         var10.move(var8);
+      }
+
+      return var12;
+   }
+}
