--- net/minecraft/world/level/levelgen/feature/GeodeFeature.java
+++ net/minecraft/world/level/levelgen/feature/GeodeFeature.java
@@ -1,0 +1,183 @@
+package net.minecraft.world.level.levelgen.feature;
+
+import com.google.common.collect.Lists;
+import com.mojang.datafixers.util.Pair;
+import com.mojang.serialization.Codec;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Random;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
+import net.minecraft.core.Vec3i;
+import net.minecraft.util.Mth;
+import net.minecraft.world.level.WorldGenLevel;
+import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.block.BuddingAmethystBlock;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.properties.BlockStateProperties;
+import net.minecraft.world.level.levelgen.GeodeBlockSettings;
+import net.minecraft.world.level.levelgen.GeodeCrackSettings;
+import net.minecraft.world.level.levelgen.GeodeLayerSettings;
+import net.minecraft.world.level.levelgen.WorldgenRandom;
+import net.minecraft.world.level.levelgen.feature.configurations.GeodeConfiguration;
+import net.minecraft.world.level.levelgen.synth.NormalNoise;
+
+public class GeodeFeature extends Feature<GeodeConfiguration> {
+   private static final Direction[] DIRECTIONS = Direction.values();
+
+   public GeodeFeature(Codec<GeodeConfiguration> var1) {
+      super(var1);
+   }
+
+   public boolean place(FeaturePlaceContext<GeodeConfiguration> var1) {
+      GeodeConfiguration var2 = (GeodeConfiguration)var1.config();
+      Random var3 = var1.random();
+      BlockPos var4 = var1.origin();
+      WorldGenLevel var5 = var1.level();
+      int var6 = var2.minGenOffset;
+      int var7 = var2.maxGenOffset;
+      LinkedList var8 = Lists.newLinkedList();
+      int var9 = var2.minDistributionPoints + var3.nextInt(var2.maxDistributionPoints - var2.minDistributionPoints);
+      WorldgenRandom var10 = new WorldgenRandom(var5.getSeed());
+      NormalNoise var11 = NormalNoise.create(var10, -4, (double[])(1.0D));
+      LinkedList var12 = Lists.newLinkedList();
+      double var13 = (double)var9 / (double)var2.maxOuterWallDistance;
+      GeodeLayerSettings var15 = var2.geodeLayerSettings;
+      GeodeBlockSettings var16 = var2.geodeBlockSettings;
+      GeodeCrackSettings var17 = var2.geodeCrackSettings;
+      double var18 = 1.0D / Math.sqrt(var15.filling);
+      double var20 = 1.0D / Math.sqrt(var15.innerLayer + var13);
+      double var22 = 1.0D / Math.sqrt(var15.middleLayer + var13);
+      double var24 = 1.0D / Math.sqrt(var15.outerLayer + var13);
+      double var26 = 1.0D / Math.sqrt(var17.baseCrackSize + var3.nextDouble() / 2.0D + (var9 > 3 ? var13 : 0.0D));
+      boolean var28 = (double)var3.nextFloat() < var17.generateCrackChance;
+      int var29 = 0;
+
+      int var30;
+      int var31;
+      for(var30 = 0; var30 < var9; ++var30) {
+         var31 = var2.minOuterWallDistance + var3.nextInt(var2.maxOuterWallDistance - var2.minOuterWallDistance);
+         int var32 = var2.minOuterWallDistance + var3.nextInt(var2.maxOuterWallDistance - var2.minOuterWallDistance);
+         int var33 = var2.minOuterWallDistance + var3.nextInt(var2.maxOuterWallDistance - var2.minOuterWallDistance);
+         BlockPos var34 = var4.offset(var31, var32, var33);
+         BlockState var35 = var5.getBlockState(var34);
+         if (var35.isAir() || var35.is(Blocks.WATER) || var35.is(Blocks.LAVA)) {
+            ++var29;
+            if (var29 > var2.invalidBlocksThreshold) {
+               return false;
+            }
+         }
+
+         var8.add(Pair.of(var34, var2.minPointOffset + var3.nextInt(var2.maxPointOffset - var2.minPointOffset)));
+      }
+
+      if (var28) {
+         var30 = var3.nextInt(4);
+         var31 = var9 * 2 + 1;
+         if (var30 == 0) {
+            var12.add(var4.offset(var31, 7, 0));
+            var12.add(var4.offset(var31, 5, 0));
+            var12.add(var4.offset(var31, 1, 0));
+         } else if (var30 == 1) {
+            var12.add(var4.offset(0, 7, var31));
+            var12.add(var4.offset(0, 5, var31));
+            var12.add(var4.offset(0, 1, var31));
+         } else if (var30 == 2) {
+            var12.add(var4.offset(var31, 7, var31));
+            var12.add(var4.offset(var31, 5, var31));
+            var12.add(var4.offset(var31, 1, var31));
+         } else {
+            var12.add(var4.offset(0, 7, 0));
+            var12.add(var4.offset(0, 5, 0));
+            var12.add(var4.offset(0, 1, 0));
+         }
+      }
+
+      ArrayList var41 = Lists.newArrayList();
+      Iterator var42 = BlockPos.betweenClosed(var4.offset(var6, var6, var6), var4.offset(var7, var7, var7)).iterator();
+
+      while(true) {
+         while(true) {
+            double var37;
+            BlockPos var44;
+            double var49;
+            do {
+               if (!var42.hasNext()) {
+                  List var43 = var16.innerPlacements;
+                  Iterator var45 = var41.iterator();
+
+                  while(true) {
+                     while(var45.hasNext()) {
+                        BlockPos var47 = (BlockPos)var45.next();
+                        BlockState var48 = (BlockState)var43.get(var3.nextInt(var43.size()));
+                        Direction[] var50 = DIRECTIONS;
+                        int var36 = var50.length;
+
+                        for(int var51 = 0; var51 < var36; ++var51) {
+                           Direction var38 = var50[var51];
+                           if (var48.hasProperty(BlockStateProperties.FACING)) {
+                              var48 = (BlockState)var48.setValue(BlockStateProperties.FACING, var38);
+                           }
+
+                           BlockPos var53 = var47.relative(var38);
+                           BlockState var55 = var5.getBlockState(var53);
+                           if (var48.hasProperty(BlockStateProperties.WATERLOGGED)) {
+                              var48 = (BlockState)var48.setValue(BlockStateProperties.WATERLOGGED, var55.getFluidState().isSource());
+                           }
+
+                           if (BuddingAmethystBlock.canClusterGrowAtState(var55)) {
+                              var5.setBlock(var53, var48, 2);
+                              break;
+                           }
+                        }
+                     }
+
+                     return true;
+                  }
+               }
+
+               var44 = (BlockPos)var42.next();
+               double var46 = var11.getValue((double)var44.getX(), (double)var44.getY(), (double)var44.getZ()) * var2.noiseMultiplier;
+               var49 = 0.0D;
+               var37 = 0.0D;
+
+               Iterator var39;
+               Pair var40;
+               for(var39 = var8.iterator(); var39.hasNext(); var49 += Mth.fastInvSqrt(var44.distSqr((Vec3i)var40.getFirst()) + (double)(Integer)var40.getSecond()) + var46) {
+                  var40 = (Pair)var39.next();
+               }
+
+               BlockPos var54;
+               for(var39 = var12.iterator(); var39.hasNext(); var37 += Mth.fastInvSqrt(var44.distSqr(var54) + (double)var17.crackPointOffset) + var46) {
+                  var54 = (BlockPos)var39.next();
+               }
+            } while(var49 < var24);
+
+            if (var28 && var37 >= var26 && var49 < var18) {
+               if (var5.getFluidState(var44).isEmpty()) {
+                  var5.setBlock(var44, Blocks.AIR.defaultBlockState(), 2);
+               }
+            } else if (var49 >= var18) {
+               var5.setBlock(var44, var16.fillingProvider.getState(var3, var44), 2);
+            } else if (var49 >= var20) {
+               boolean var52 = (double)var3.nextFloat() < var2.useAlternateLayer0Chance;
+               if (var52) {
+                  var5.setBlock(var44, var16.alternateInnerLayerProvider.getState(var3, var44), 2);
+               } else {
+                  var5.setBlock(var44, var16.innerLayerProvider.getState(var3, var44), 2);
+               }
+
+               if ((!var2.placementsRequireLayer0Alternate || var52) && (double)var3.nextFloat() < var2.usePotentialPlacementsChance) {
+                  var41.add(var44.immutable());
+               }
+            } else if (var49 >= var22) {
+               var5.setBlock(var44, var16.middleLayerProvider.getState(var3, var44), 2);
+            } else if (var49 >= var24) {
+               var5.setBlock(var44, var16.outerLayerProvider.getState(var3, var44), 2);
+            }
+         }
+      }
+   }
+}
