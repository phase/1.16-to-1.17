--- net/minecraft/world/level/levelgen/feature/BasaltColumnsFeature.java
+++ net/minecraft/world/level/levelgen/feature/BasaltColumnsFeature.java
@@ -10,37 +10,44 @@
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.WorldGenLevel;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.chunk.ChunkGenerator;
 import net.minecraft.world.level.levelgen.feature.configurations.ColumnFeatureConfiguration;
 
 public class BasaltColumnsFeature extends Feature<ColumnFeatureConfiguration> {
    private static final ImmutableList<Block> CANNOT_PLACE_ON;
+   private static final int CLUSTERED_REACH = 5;
+   private static final int CLUSTERED_SIZE = 50;
+   private static final int UNCLUSTERED_REACH = 8;
+   private static final int UNCLUSTERED_SIZE = 15;
 
    public BasaltColumnsFeature(Codec<ColumnFeatureConfiguration> var1) {
       super(var1);
    }
 
-   public boolean place(WorldGenLevel var1, ChunkGenerator var2, Random var3, BlockPos var4, ColumnFeatureConfiguration var5) {
-      int var6 = var2.getSeaLevel();
-      if (!canPlaceAt(var1, var6, var4.mutable())) {
+   public boolean place(FeaturePlaceContext<ColumnFeatureConfiguration> var1) {
+      int var2 = var1.chunkGenerator().getSeaLevel();
+      BlockPos var3 = var1.origin();
+      WorldGenLevel var4 = var1.level();
+      Random var5 = var1.random();
+      ColumnFeatureConfiguration var6 = (ColumnFeatureConfiguration)var1.config();
+      if (!canPlaceAt(var4, var2, var3.mutable())) {
          return false;
       } else {
-         int var7 = var5.height().sample(var3);
-         boolean var8 = var3.nextFloat() < 0.9F;
+         int var7 = var6.height().sample(var5);
+         boolean var8 = var5.nextFloat() < 0.9F;
          int var9 = Math.min(var7, var8 ? 5 : 8);
          int var10 = var8 ? 50 : 15;
          boolean var11 = false;
-         Iterator var12 = BlockPos.randomBetweenClosed(var3, var10, var4.getX() - var9, var4.getY(), var4.getZ() - var9, var4.getX() + var9, var4.getY(), var4.getZ() + var9).iterator();
+         Iterator var12 = BlockPos.randomBetweenClosed(var5, var10, var3.getX() - var9, var3.getY(), var3.getZ() - var9, var3.getX() + var9, var3.getY(), var3.getZ() + var9).iterator();
 
          while(var12.hasNext()) {
             BlockPos var13 = (BlockPos)var12.next();
-            int var14 = var7 - var13.distManhattan(var4);
+            int var14 = var7 - var13.distManhattan(var3);
             if (var14 >= 0) {
-               var11 |= this.placeColumn(var1, var6, var13, var14, var5.reach().sample(var3));
+               var11 |= this.placeColumn(var4, var2, var13, var14, var6.reach().sample(var5));
             }
          }
 
          return var11;
       }
@@ -81,11 +88,11 @@
       }
    }
 
    @Nullable
    private static BlockPos findSurface(LevelAccessor var0, int var1, BlockPos.MutableBlockPos var2, int var3) {
-      while(var2.getY() > 1 && var3 > 0) {
+      while(var2.getY() > var0.getMinBuildHeight() + 1 && var3 > 0) {
          --var3;
          if (canPlaceAt(var0, var1, var2)) {
             return var2;
          }
 
