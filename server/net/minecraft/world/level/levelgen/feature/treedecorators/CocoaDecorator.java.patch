--- net/minecraft/world/level/levelgen/feature/treedecorators/CocoaDecorator.java
+++ net/minecraft/world/level/levelgen/feature/treedecorators/CocoaDecorator.java
@@ -2,19 +2,18 @@
 
 import com.mojang.serialization.Codec;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
-import java.util.Set;
+import java.util.function.BiConsumer;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
-import net.minecraft.world.level.WorldGenLevel;
+import net.minecraft.world.level.LevelSimulatedReader;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.CocoaBlock;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.levelgen.feature.Feature;
-import net.minecraft.world.level.levelgen.structure.BoundingBox;
 
 public class CocoaDecorator extends TreeDecorator {
    public static final Codec<CocoaDecorator> CODEC = Codec.floatRange(0.0F, 1.0F).fieldOf("probability").xmap(CocoaDecorator::new, (var0) -> {
       return var0.probability;
    }).codec();
@@ -26,26 +25,25 @@
 
    protected TreeDecoratorType<?> type() {
       return TreeDecoratorType.COCOA;
    }
 
-   public void place(WorldGenLevel var1, Random var2, List<BlockPos> var3, List<BlockPos> var4, Set<BlockPos> var5, BoundingBox var6) {
-      if (var2.nextFloat() < this.probability) {
-         int var7 = ((BlockPos)var3.get(0)).getY();
-         var3.stream().filter((var1x) -> {
-            return var1x.getY() - var7 <= 2;
-         }).forEach((var5x) -> {
-            Iterator var6x = Direction.Plane.HORIZONTAL.iterator();
+   public void place(LevelSimulatedReader var1, BiConsumer<BlockPos, BlockState> var2, Random var3, List<BlockPos> var4, List<BlockPos> var5) {
+      if (var3.nextFloat() < this.probability) {
+         int var6 = ((BlockPos)var4.get(0)).getY();
+         var4.stream().filter((var1x) -> {
+            return var1x.getY() - var6 <= 2;
+         }).forEach((var3x) -> {
+            Iterator var4 = Direction.Plane.HORIZONTAL.iterator();
 
-            while(var6x.hasNext()) {
-               Direction var7 = (Direction)var6x.next();
-               if (var2.nextFloat() <= 0.25F) {
-                  Direction var8 = var7.getOpposite();
-                  BlockPos var9 = var5x.offset(var8.getStepX(), 0, var8.getStepZ());
-                  if (Feature.isAir(var1, var9)) {
-                     BlockState var10 = (BlockState)((BlockState)Blocks.COCOA.defaultBlockState().setValue(CocoaBlock.AGE, var2.nextInt(3))).setValue(CocoaBlock.FACING, var7);
-                     this.setBlock(var1, var9, var10, var5, var6);
+            while(var4.hasNext()) {
+               Direction var5 = (Direction)var4.next();
+               if (var3.nextFloat() <= 0.25F) {
+                  Direction var6 = var5.getOpposite();
+                  BlockPos var7 = var3x.offset(var6.getStepX(), 0, var6.getStepZ());
+                  if (Feature.isAir(var1, var7)) {
+                     var2.accept(var7, ((BlockState)Blocks.COCOA.defaultBlockState().setValue(CocoaBlock.AGE, var3.nextInt(3))).setValue(CocoaBlock.FACING, var5));
                   }
                }
             }
 
          });
