--- net/minecraft/world/level/levelgen/feature/treedecorators/AlterGroundDecorator.java
+++ net/minecraft/world/level/levelgen/feature/treedecorators/AlterGroundDecorator.java
@@ -1,17 +1,16 @@
 package net.minecraft.world.level.levelgen.feature.treedecorators;
 
 import com.mojang.serialization.Codec;
 import java.util.List;
 import java.util.Random;
-import java.util.Set;
+import java.util.function.BiConsumer;
 import net.minecraft.core.BlockPos;
-import net.minecraft.world.level.LevelSimulatedRW;
-import net.minecraft.world.level.WorldGenLevel;
+import net.minecraft.world.level.LevelSimulatedReader;
+import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.levelgen.feature.Feature;
 import net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider;
-import net.minecraft.world.level.levelgen.structure.BoundingBox;
 
 public class AlterGroundDecorator extends TreeDecorator {
    public static final Codec<AlterGroundDecorator> CODEC;
    private final BlockStateProvider provider;
 
@@ -21,52 +20,52 @@
 
    protected TreeDecoratorType<?> type() {
       return TreeDecoratorType.ALTER_GROUND;
    }
 
-   public void place(WorldGenLevel var1, Random var2, List<BlockPos> var3, List<BlockPos> var4, Set<BlockPos> var5, BoundingBox var6) {
-      int var7 = ((BlockPos)var3.get(0)).getY();
-      var3.stream().filter((var1x) -> {
-         return var1x.getY() == var7;
-      }).forEach((var3x) -> {
-         this.placeCircle(var1, var2, var3x.west().north());
-         this.placeCircle(var1, var2, var3x.east(2).north());
-         this.placeCircle(var1, var2, var3x.west().south(2));
-         this.placeCircle(var1, var2, var3x.east(2).south(2));
+   public void place(LevelSimulatedReader var1, BiConsumer<BlockPos, BlockState> var2, Random var3, List<BlockPos> var4, List<BlockPos> var5) {
+      int var6 = ((BlockPos)var4.get(0)).getY();
+      var4.stream().filter((var1x) -> {
+         return var1x.getY() == var6;
+      }).forEach((var4x) -> {
+         this.placeCircle(var1, var2, var3, var4x.west().north());
+         this.placeCircle(var1, var2, var3, var4x.east(2).north());
+         this.placeCircle(var1, var2, var3, var4x.west().south(2));
+         this.placeCircle(var1, var2, var3, var4x.east(2).south(2));
 
-         for(int var4 = 0; var4 < 5; ++var4) {
-            int var5 = var2.nextInt(64);
-            int var6 = var5 % 8;
-            int var7 = var5 / 8;
-            if (var6 == 0 || var6 == 7 || var7 == 0 || var7 == 7) {
-               this.placeCircle(var1, var2, var3x.offset(-3 + var6, 0, -3 + var7));
+         for(int var5 = 0; var5 < 5; ++var5) {
+            int var6 = var3.nextInt(64);
+            int var7 = var6 % 8;
+            int var8 = var6 / 8;
+            if (var7 == 0 || var7 == 7 || var8 == 0 || var8 == 7) {
+               this.placeCircle(var1, var2, var3, var4x.offset(-3 + var7, 0, -3 + var8));
             }
          }
 
       });
    }
 
-   private void placeCircle(LevelSimulatedRW var1, Random var2, BlockPos var3) {
-      for(int var4 = -2; var4 <= 2; ++var4) {
-         for(int var5 = -2; var5 <= 2; ++var5) {
-            if (Math.abs(var4) != 2 || Math.abs(var5) != 2) {
-               this.placeBlockAt(var1, var2, var3.offset(var4, 0, var5));
+   private void placeCircle(LevelSimulatedReader var1, BiConsumer<BlockPos, BlockState> var2, Random var3, BlockPos var4) {
+      for(int var5 = -2; var5 <= 2; ++var5) {
+         for(int var6 = -2; var6 <= 2; ++var6) {
+            if (Math.abs(var5) != 2 || Math.abs(var6) != 2) {
+               this.placeBlockAt(var1, var2, var3, var4.offset(var5, 0, var6));
             }
          }
       }
 
    }
 
-   private void placeBlockAt(LevelSimulatedRW var1, Random var2, BlockPos var3) {
-      for(int var4 = 2; var4 >= -3; --var4) {
-         BlockPos var5 = var3.above(var4);
-         if (Feature.isGrassOrDirt(var1, var5)) {
-            var1.setBlock(var5, this.provider.getState(var2, var3), 19);
+   private void placeBlockAt(LevelSimulatedReader var1, BiConsumer<BlockPos, BlockState> var2, Random var3, BlockPos var4) {
+      for(int var5 = 2; var5 >= -3; --var5) {
+         BlockPos var6 = var4.above(var5);
+         if (Feature.isGrassOrDirt(var1, var6)) {
+            var2.accept(var6, this.provider.getState(var3, var4));
             break;
          }
 
-         if (!Feature.isAir(var1, var5) && var4 < 0) {
+         if (!Feature.isAir(var1, var6) && var5 < 0) {
             break;
          }
       }
 
    }
