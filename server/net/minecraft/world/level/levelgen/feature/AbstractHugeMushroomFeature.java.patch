--- net/minecraft/world/level/levelgen/feature/AbstractHugeMushroomFeature.java
+++ net/minecraft/world/level/levelgen/feature/AbstractHugeMushroomFeature.java
@@ -3,16 +3,13 @@
 import com.mojang.serialization.Codec;
 import java.util.Random;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.tags.BlockTags;
-import net.minecraft.tags.Tag;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.WorldGenLevel;
-import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.chunk.ChunkGenerator;
 import net.minecraft.world.level.levelgen.feature.configurations.HugeMushroomFeatureConfiguration;
 
 public abstract class AbstractHugeMushroomFeature extends Feature<HugeMushroomFeatureConfiguration> {
    public AbstractHugeMushroomFeature(Codec<HugeMushroomFeatureConfiguration> var1) {
       super(var1);
@@ -37,13 +34,13 @@
       return var2;
    }
 
    protected boolean isValidPosition(LevelAccessor var1, BlockPos var2, int var3, BlockPos.MutableBlockPos var4, HugeMushroomFeatureConfiguration var5) {
       int var6 = var2.getY();
-      if (var6 >= 1 && var6 + var3 + 1 < 256) {
-         Block var7 = var1.getBlockState(var2.below()).getBlock();
-         if (!isDirt(var7) && !var7.is((Tag)BlockTags.MUSHROOM_GROW_BLOCK)) {
+      if (var6 >= var1.getMinBuildHeight() + 1 && var6 + var3 + 1 < var1.getMaxBuildHeight()) {
+         BlockState var7 = var1.getBlockState(var2.below());
+         if (!isDirt(var7) && !var7.is(BlockTags.MUSHROOM_GROW_BLOCK)) {
             return false;
          } else {
             for(int var8 = 0; var8 <= var3; ++var8) {
                int var9 = this.getTreeRadiusForHeight(-1, -1, var5.foliageRadius, var8);
 
@@ -62,18 +59,22 @@
       } else {
          return false;
       }
    }
 
-   public boolean place(WorldGenLevel var1, ChunkGenerator var2, Random var3, BlockPos var4, HugeMushroomFeatureConfiguration var5) {
-      int var6 = this.getTreeHeight(var3);
+   public boolean place(FeaturePlaceContext<HugeMushroomFeatureConfiguration> var1) {
+      WorldGenLevel var2 = var1.level();
+      BlockPos var3 = var1.origin();
+      Random var4 = var1.random();
+      HugeMushroomFeatureConfiguration var5 = (HugeMushroomFeatureConfiguration)var1.config();
+      int var6 = this.getTreeHeight(var4);
       BlockPos.MutableBlockPos var7 = new BlockPos.MutableBlockPos();
-      if (!this.isValidPosition(var1, var4, var6, var7, var5)) {
+      if (!this.isValidPosition(var2, var3, var6, var7, var5)) {
          return false;
       } else {
-         this.makeCap(var1, var3, var4, var6, var7, var5);
-         this.placeTrunk(var1, var3, var4, var5, var6, var7);
+         this.makeCap(var2, var4, var3, var6, var7, var5);
+         this.placeTrunk(var2, var4, var3, var5, var6, var7);
          return true;
       }
    }
 
    protected abstract int getTreeRadiusForHeight(int var1, int var2, int var3, int var4);
