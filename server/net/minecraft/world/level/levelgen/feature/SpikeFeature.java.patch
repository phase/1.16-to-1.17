--- net/minecraft/world/level/levelgen/feature/SpikeFeature.java
+++ net/minecraft/world/level/levelgen/feature/SpikeFeature.java
@@ -14,23 +14,26 @@
 import java.util.Random;
 import java.util.concurrent.TimeUnit;
 import java.util.stream.Collectors;
 import java.util.stream.IntStream;
 import net.minecraft.core.BlockPos;
+import net.minecraft.core.SectionPos;
 import net.minecraft.util.Mth;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.boss.enderdragon.EndCrystal;
 import net.minecraft.world.level.ServerLevelAccessor;
 import net.minecraft.world.level.WorldGenLevel;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.IronBarsBlock;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.chunk.ChunkGenerator;
+import net.minecraft.world.level.dimension.DimensionType;
 import net.minecraft.world.level.levelgen.feature.configurations.SpikeConfiguration;
 import net.minecraft.world.phys.AABB;
 
 public class SpikeFeature extends Feature<SpikeConfiguration> {
+   public static final int NUMBER_OF_SPIKES = 10;
+   private static final int SPIKE_DISTANCE = 42;
    private static final LoadingCache<Long, List<SpikeFeature.EndSpike>> SPIKE_CACHE;
 
    public SpikeFeature(Codec<SpikeConfiguration> var1) {
       super(var1);
    }
@@ -39,31 +42,35 @@
       Random var1 = new Random(var0.getSeed());
       long var2 = var1.nextLong() & 65535L;
       return (List)SPIKE_CACHE.getUnchecked(var2);
    }
 
-   public boolean place(WorldGenLevel var1, ChunkGenerator var2, Random var3, BlockPos var4, SpikeConfiguration var5) {
-      List var6 = var5.getSpikes();
+   public boolean place(FeaturePlaceContext<SpikeConfiguration> var1) {
+      SpikeConfiguration var2 = (SpikeConfiguration)var1.config();
+      WorldGenLevel var3 = var1.level();
+      Random var4 = var1.random();
+      BlockPos var5 = var1.origin();
+      List var6 = var2.getSpikes();
       if (var6.isEmpty()) {
-         var6 = getSpikesForLevel(var1);
+         var6 = getSpikesForLevel(var3);
       }
 
       Iterator var7 = var6.iterator();
 
       while(var7.hasNext()) {
          SpikeFeature.EndSpike var8 = (SpikeFeature.EndSpike)var7.next();
-         if (var8.isCenterWithinChunk(var4)) {
-            this.placeSpike(var1, var3, var5, var8);
+         if (var8.isCenterWithinChunk(var5)) {
+            this.placeSpike(var3, var4, var2, var8);
          }
       }
 
       return true;
    }
 
    private void placeSpike(ServerLevelAccessor var1, Random var2, SpikeConfiguration var3, SpikeFeature.EndSpike var4) {
       int var5 = var4.getRadius();
-      Iterator var6 = BlockPos.betweenClosed(new BlockPos(var4.getCenterX() - var5, 0, var4.getCenterZ() - var5), new BlockPos(var4.getCenterX() + var5, var4.getHeight() + 10, var4.getCenterZ() + var5)).iterator();
+      Iterator var6 = BlockPos.betweenClosed(new BlockPos(var4.getCenterX() - var5, var1.getMinBuildHeight(), var4.getCenterZ() - var5), new BlockPos(var4.getCenterX() + var5, var4.getHeight() + 10, var4.getCenterZ() + var5)).iterator();
 
       while(true) {
          while(var6.hasNext()) {
             BlockPos var7 = (BlockPos)var6.next();
             if (var7.distSqr((double)var4.getCenterX(), (double)var7.getY(), (double)var4.getCenterZ(), false) <= (double)(var5 * var5 + 1) && var7.getY() < var4.getHeight()) {
@@ -158,15 +165,15 @@
          this.centerX = var1;
          this.centerZ = var2;
          this.radius = var3;
          this.height = var4;
          this.guarded = var5;
-         this.topBoundingBox = new AABB((double)(var1 - var3), 0.0D, (double)(var2 - var3), (double)(var1 + var3), 256.0D, (double)(var2 + var3));
+         this.topBoundingBox = new AABB((double)(var1 - var3), (double)DimensionType.MIN_Y, (double)(var2 - var3), (double)(var1 + var3), (double)DimensionType.MAX_Y, (double)(var2 + var3));
       }
 
       public boolean isCenterWithinChunk(BlockPos var1) {
-         return var1.getX() >> 4 == this.centerX >> 4 && var1.getZ() >> 4 == this.centerZ >> 4;
+         return SectionPos.blockToSectionCoord(var1.getX()) == SectionPos.blockToSectionCoord(this.centerX) && SectionPos.blockToSectionCoord(var1.getZ()) == SectionPos.blockToSectionCoord(this.centerZ);
       }
 
       public int getCenterX() {
          return this.centerX;
       }
