--- net/minecraft/world/level/levelgen/carver/CarverDebugSettings.java
+++ net/minecraft/world/level/levelgen/carver/CarverDebugSettings.java
@@ -1,0 +1,38 @@
+package net.minecraft.world.level.levelgen.carver;
+
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.codecs.RecordCodecBuilder;
+import java.util.function.BiFunction;
+import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.block.state.BlockState;
+
+public class CarverDebugSettings {
+   public static final CarverDebugSettings DEFAULT;
+   public static final Codec<CarverDebugSettings> CODEC;
+   private boolean debugMode;
+   private final BlockState airState;
+
+   public static CarverDebugSettings of(boolean var0, BlockState var1) {
+      return new CarverDebugSettings(var0, var1);
+   }
+
+   private CarverDebugSettings(boolean var1, BlockState var2) {
+      this.debugMode = var1;
+      this.airState = var2;
+   }
+
+   public boolean isDebugMode() {
+      return this.debugMode;
+   }
+
+   public BlockState getAirState() {
+      return this.airState;
+   }
+
+   static {
+      DEFAULT = new CarverDebugSettings(false, Blocks.ACACIA_BUTTON.defaultBlockState());
+      CODEC = RecordCodecBuilder.create((var0) -> {
+         return var0.group(Codec.BOOL.optionalFieldOf("debug_mode", false).forGetter(CarverDebugSettings::isDebugMode), BlockState.CODEC.optionalFieldOf("air_state", DEFAULT.getAirState()).forGetter(CarverDebugSettings::getAirState)).apply(var0, (BiFunction)(CarverDebugSettings::new));
+      });
+   }
+}
