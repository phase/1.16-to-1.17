--- net/minecraft/world/level/levelgen/carver/CaveWorldCarver.java
+++ net/minecraft/world/level/levelgen/carver/CaveWorldCarver.java
@@ -3,48 +3,56 @@
 import com.mojang.serialization.Codec;
 import java.util.BitSet;
 import java.util.Random;
 import java.util.function.Function;
 import net.minecraft.core.BlockPos;
+import net.minecraft.core.SectionPos;
 import net.minecraft.util.Mth;
+import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.biome.Biome;
 import net.minecraft.world.level.chunk.ChunkAccess;
-import net.minecraft.world.level.levelgen.feature.configurations.ProbabilityFeatureConfiguration;
+import net.minecraft.world.level.levelgen.Aquifer;
 
-public class CaveWorldCarver extends WorldCarver<ProbabilityFeatureConfiguration> {
-   public CaveWorldCarver(Codec<ProbabilityFeatureConfiguration> var1, int var2) {
-      super(var1, var2);
+public class CaveWorldCarver extends WorldCarver<CaveCarverConfiguration> {
+   public CaveWorldCarver(Codec<CaveCarverConfiguration> var1) {
+      super(var1);
    }
 
-   public boolean isStartChunk(Random var1, int var2, int var3, ProbabilityFeatureConfiguration var4) {
-      return var1.nextFloat() <= var4.probability;
+   public boolean isStartChunk(CaveCarverConfiguration var1, Random var2) {
+      return var2.nextFloat() <= var1.probability;
    }
 
-   public boolean carve(ChunkAccess var1, Function<BlockPos, Biome> var2, Random var3, int var4, int var5, int var6, int var7, int var8, BitSet var9, ProbabilityFeatureConfiguration var10) {
-      int var11 = (this.getRange() * 2 - 1) * 16;
-      int var12 = var3.nextInt(var3.nextInt(var3.nextInt(this.getCaveBound()) + 1) + 1);
+   public boolean carve(CarvingContext var1, CaveCarverConfiguration var2, ChunkAccess var3, Function<BlockPos, Biome> var4, Random var5, Aquifer var6, ChunkPos var7, BitSet var8) {
+      int var9 = SectionPos.sectionToBlockCoord(this.getRange() * 2 - 1);
+      int var10 = var5.nextInt(var5.nextInt(var5.nextInt(this.getCaveBound()) + 1) + 1);
 
-      for(int var13 = 0; var13 < var12; ++var13) {
-         double var14 = (double)(var5 * 16 + var3.nextInt(16));
-         double var16 = (double)this.getCaveY(var3);
-         double var18 = (double)(var6 * 16 + var3.nextInt(16));
-         int var20 = 1;
-         float var23;
-         if (var3.nextInt(4) == 0) {
-            double var21 = 0.5D;
-            var23 = 1.0F + var3.nextFloat() * 6.0F;
-            this.genRoom(var1, var2, var3.nextLong(), var4, var7, var8, var14, var16, var18, var23, 0.5D, var9);
-            var20 += var3.nextInt(4);
+      for(int var11 = 0; var11 < var10; ++var11) {
+         double var12 = (double)var7.getBlockX(var5.nextInt(16));
+         double var14 = (double)var2.y.sample(var5, var1);
+         double var16 = (double)var7.getBlockZ(var5.nextInt(16));
+         double var18 = (double)var2.horizontalRadiusMultiplier.sample(var5);
+         double var20 = (double)var2.verticalRadiusMultiplier.sample(var5);
+         double var22 = (double)var2.floorLevel.sample(var5);
+         WorldCarver.CarveSkipChecker var24 = (var2x, var3x, var5x, var7x, var9x) -> {
+            return shouldSkip(var3x, var5x, var7x, var22);
+         };
+         int var25 = 1;
+         float var28;
+         if (var5.nextInt(4) == 0) {
+            double var26 = (double)var2.yScale.sample(var5);
+            var28 = 1.0F + var5.nextFloat() * 6.0F;
+            this.createRoom(var1, var2, var3, var4, var5.nextLong(), var6, var12, var14, var16, var28, var26, var8, var24);
+            var25 += var5.nextInt(4);
          }
 
-         for(int var27 = 0; var27 < var20; ++var27) {
-            float var22 = var3.nextFloat() * 6.2831855F;
-            var23 = (var3.nextFloat() - 0.5F) / 4.0F;
-            float var24 = this.getThickness(var3);
-            int var25 = var11 - var3.nextInt(var11 / 4);
-            boolean var26 = false;
-            this.genTunnel(var1, var2, var3.nextLong(), var4, var7, var8, var14, var16, var18, var24, var22, var23, 0, var25, this.getYScale(), var9);
+         for(int var32 = 0; var32 < var25; ++var32) {
+            float var27 = var5.nextFloat() * 6.2831855F;
+            var28 = (var5.nextFloat() - 0.5F) / 4.0F;
+            float var29 = this.getThickness(var5);
+            int var30 = var9 - var5.nextInt(var9 / 4);
+            boolean var31 = false;
+            this.createTunnel(var1, var2, var3, var4, var5.nextLong(), var6, var12, var14, var16, var18, var20, var29, var27, var28, 0, var30, this.getYScale(), var8, var24);
          }
       }
 
       return true;
    }
@@ -64,57 +72,57 @@
 
    protected double getYScale() {
       return 1.0D;
    }
 
-   protected int getCaveY(Random var1) {
-      return var1.nextInt(var1.nextInt(120) + 8);
+   protected void createRoom(CarvingContext var1, CaveCarverConfiguration var2, ChunkAccess var3, Function<BlockPos, Biome> var4, long var5, Aquifer var7, double var8, double var10, double var12, float var14, double var15, BitSet var17, WorldCarver.CarveSkipChecker var18) {
+      double var19 = 1.5D + (double)(Mth.sin(1.5707964F) * var14);
+      double var21 = var19 * var15;
+      this.carveEllipsoid(var1, var2, var3, var4, var5, var7, var8 + 1.0D, var10, var12, var19, var21, var17, var18);
    }
 
-   protected void genRoom(ChunkAccess var1, Function<BlockPos, Biome> var2, long var3, int var5, int var6, int var7, double var8, double var10, double var12, float var14, double var15, BitSet var17) {
-      double var18 = 1.5D + (double)(Mth.sin(1.5707964F) * var14);
-      double var20 = var18 * var15;
-      this.carveSphere(var1, var2, var3, var5, var6, var7, var8 + 1.0D, var10, var12, var18, var20, var17);
-   }
+   protected void createTunnel(CarvingContext var1, CaveCarverConfiguration var2, ChunkAccess var3, Function<BlockPos, Biome> var4, long var5, Aquifer var7, double var8, double var10, double var12, double var14, double var16, float var18, float var19, float var20, int var21, int var22, double var23, BitSet var25, WorldCarver.CarveSkipChecker var26) {
+      Random var27 = new Random(var5);
+      int var28 = var27.nextInt(var22 / 2) + var22 / 4;
+      boolean var29 = var27.nextInt(6) == 0;
+      float var30 = 0.0F;
+      float var31 = 0.0F;
 
-   protected void genTunnel(ChunkAccess var1, Function<BlockPos, Biome> var2, long var3, int var5, int var6, int var7, double var8, double var10, double var12, float var14, float var15, float var16, int var17, int var18, double var19, BitSet var21) {
-      Random var22 = new Random(var3);
-      int var23 = var22.nextInt(var18 / 2) + var18 / 4;
-      boolean var24 = var22.nextInt(6) == 0;
-      float var25 = 0.0F;
-      float var26 = 0.0F;
-
-      for(int var27 = var17; var27 < var18; ++var27) {
-         double var28 = 1.5D + (double)(Mth.sin(3.1415927F * (float)var27 / (float)var18) * var14);
-         double var30 = var28 * var19;
-         float var32 = Mth.cos(var16);
-         var8 += (double)(Mth.cos(var15) * var32);
-         var10 += (double)Mth.sin(var16);
-         var12 += (double)(Mth.sin(var15) * var32);
-         var16 *= var24 ? 0.92F : 0.7F;
-         var16 += var26 * 0.1F;
-         var15 += var25 * 0.1F;
-         var26 *= 0.9F;
-         var25 *= 0.75F;
-         var26 += (var22.nextFloat() - var22.nextFloat()) * var22.nextFloat() * 2.0F;
-         var25 += (var22.nextFloat() - var22.nextFloat()) * var22.nextFloat() * 4.0F;
-         if (var27 == var23 && var14 > 1.0F) {
-            this.genTunnel(var1, var2, var22.nextLong(), var5, var6, var7, var8, var10, var12, var22.nextFloat() * 0.5F + 0.5F, var15 - 1.5707964F, var16 / 3.0F, var27, var18, 1.0D, var21);
-            this.genTunnel(var1, var2, var22.nextLong(), var5, var6, var7, var8, var10, var12, var22.nextFloat() * 0.5F + 0.5F, var15 + 1.5707964F, var16 / 3.0F, var27, var18, 1.0D, var21);
+      for(int var32 = var21; var32 < var22; ++var32) {
+         double var33 = 1.5D + (double)(Mth.sin(3.1415927F * (float)var32 / (float)var22) * var18);
+         double var35 = var33 * var23;
+         float var37 = Mth.cos(var20);
+         var8 += (double)(Mth.cos(var19) * var37);
+         var10 += (double)Mth.sin(var20);
+         var12 += (double)(Mth.sin(var19) * var37);
+         var20 *= var29 ? 0.92F : 0.7F;
+         var20 += var31 * 0.1F;
+         var19 += var30 * 0.1F;
+         var31 *= 0.9F;
+         var30 *= 0.75F;
+         var31 += (var27.nextFloat() - var27.nextFloat()) * var27.nextFloat() * 2.0F;
+         var30 += (var27.nextFloat() - var27.nextFloat()) * var27.nextFloat() * 4.0F;
+         if (var32 == var28 && var18 > 1.0F) {
+            this.createTunnel(var1, var2, var3, var4, var27.nextLong(), var7, var8, var10, var12, var14, var16, var27.nextFloat() * 0.5F + 0.5F, var19 - 1.5707964F, var20 / 3.0F, var32, var22, 1.0D, var25, var26);
+            this.createTunnel(var1, var2, var3, var4, var27.nextLong(), var7, var8, var10, var12, var14, var16, var27.nextFloat() * 0.5F + 0.5F, var19 + 1.5707964F, var20 / 3.0F, var32, var22, 1.0D, var25, var26);
             return;
          }
 
-         if (var22.nextInt(4) != 0) {
-            if (!this.canReach(var6, var7, var8, var12, var27, var18, var14)) {
+         if (var27.nextInt(4) != 0) {
+            if (!canReach(var3.getPos(), var8, var12, var32, var22, var18)) {
                return;
             }
 
-            this.carveSphere(var1, var2, var3, var5, var6, var7, var8, var10, var12, var28, var30, var21);
+            this.carveEllipsoid(var1, var2, var3, var4, var5, var7, var8, var10, var12, var33 * var14, var35 * var16, var25, var26);
          }
       }
 
    }
 
-   protected boolean skip(double var1, double var3, double var5, int var7) {
-      return var3 <= -0.7D || var1 * var1 + var3 * var3 + var5 * var5 >= 1.0D;
+   private static boolean shouldSkip(double var0, double var2, double var4, double var6) {
+      if (var2 <= var6) {
+         return true;
+      } else {
+         return var0 * var0 + var2 * var2 + var4 * var4 >= 1.0D;
+      }
    }
 }
