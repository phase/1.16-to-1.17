--- net/minecraft/world/level/levelgen/Beardifier.java
+++ net/minecraft/world/level/levelgen/Beardifier.java
@@ -1,0 +1,149 @@
+package net.minecraft.world.level.levelgen;
+
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
+import it.unimi.dsi.fastutil.objects.ObjectList;
+import it.unimi.dsi.fastutil.objects.ObjectListIterator;
+import java.util.Iterator;
+import net.minecraft.Util;
+import net.minecraft.core.SectionPos;
+import net.minecraft.util.Mth;
+import net.minecraft.world.level.ChunkPos;
+import net.minecraft.world.level.StructureFeatureManager;
+import net.minecraft.world.level.chunk.ChunkAccess;
+import net.minecraft.world.level.levelgen.feature.StructureFeature;
+import net.minecraft.world.level.levelgen.feature.structures.JigsawJunction;
+import net.minecraft.world.level.levelgen.feature.structures.StructureTemplatePool;
+import net.minecraft.world.level.levelgen.structure.BoundingBox;
+import net.minecraft.world.level.levelgen.structure.PoolElementStructurePiece;
+import net.minecraft.world.level.levelgen.structure.StructurePiece;
+
+public class Beardifier {
+   public static final Beardifier NO_BEARDS = new Beardifier();
+   private static final float[] BEARD_KERNEL = (float[])Util.make(new float[13824], (var0) -> {
+      for(int var1 = 0; var1 < 24; ++var1) {
+         for(int var2 = 0; var2 < 24; ++var2) {
+            for(int var3 = 0; var3 < 24; ++var3) {
+               var0[var1 * 24 * 24 + var2 * 24 + var3] = (float)computeBeardContribution(var2 - 12, var3 - 12, var1 - 12);
+            }
+         }
+      }
+
+   });
+   private final ObjectList<StructurePiece> rigids;
+   private final ObjectList<JigsawJunction> junctions;
+   private final ObjectListIterator<StructurePiece> pieceIterator;
+   private final ObjectListIterator<JigsawJunction> junctionIterator;
+
+   protected Beardifier(StructureFeatureManager var1, ChunkAccess var2) {
+      ChunkPos var3 = var2.getPos();
+      int var4 = var3.x;
+      int var5 = var3.z;
+      int var6 = var3.getMinBlockX();
+      int var7 = var3.getMinBlockZ();
+      this.junctions = new ObjectArrayList(32);
+      this.rigids = new ObjectArrayList(10);
+      Iterator var8 = StructureFeature.NOISE_AFFECTING_FEATURES.iterator();
+
+      while(var8.hasNext()) {
+         StructureFeature var9 = (StructureFeature)var8.next();
+         var1.startsForFeature(SectionPos.bottomOf(var2), var9).forEach((var4x) -> {
+            Iterator var5 = var4x.getPieces().iterator();
+
+            while(true) {
+               while(true) {
+                  StructurePiece var6x;
+                  do {
+                     if (!var5.hasNext()) {
+                        return;
+                     }
+
+                     var6x = (StructurePiece)var5.next();
+                  } while(!var6x.isCloseToChunk(var3, 12));
+
+                  if (var6x instanceof PoolElementStructurePiece) {
+                     PoolElementStructurePiece var7x = (PoolElementStructurePiece)var6x;
+                     StructureTemplatePool.Projection var8 = var7x.getElement().getProjection();
+                     if (var8 == StructureTemplatePool.Projection.RIGID) {
+                        this.rigids.add(var7x);
+                     }
+
+                     Iterator var9 = var7x.getJunctions().iterator();
+
+                     while(var9.hasNext()) {
+                        JigsawJunction var10 = (JigsawJunction)var9.next();
+                        int var11 = var10.getSourceX();
+                        int var12 = var10.getSourceZ();
+                        if (var11 > var6 - 12 && var12 > var7 - 12 && var11 < var6 + 15 + 12 && var12 < var7 + 15 + 12) {
+                           this.junctions.add(var10);
+                        }
+                     }
+                  } else {
+                     this.rigids.add(var6x);
+                  }
+               }
+            }
+         });
+      }
+
+      this.pieceIterator = this.rigids.iterator();
+      this.junctionIterator = this.junctions.iterator();
+   }
+
+   private Beardifier() {
+      this.junctions = new ObjectArrayList();
+      this.rigids = new ObjectArrayList();
+      this.pieceIterator = this.rigids.iterator();
+      this.junctionIterator = this.junctions.iterator();
+   }
+
+   protected double beardify(int var1, int var2, int var3) {
+      double var4;
+      int var8;
+      int var9;
+      int var10;
+      for(var4 = 0.0D; this.pieceIterator.hasNext(); var4 += getContribution(var8, var9, var10) * 0.8D) {
+         StructurePiece var6 = (StructurePiece)this.pieceIterator.next();
+         BoundingBox var7 = var6.getBoundingBox();
+         var8 = Math.max(0, Math.max(var7.x0 - var1, var1 - var7.x1));
+         var9 = var2 - (var7.y0 + (var6 instanceof PoolElementStructurePiece ? ((PoolElementStructurePiece)var6).getGroundLevelDelta() : 0));
+         var10 = Math.max(0, Math.max(var7.z0 - var3, var3 - var7.z1));
+      }
+
+      this.pieceIterator.back(this.rigids.size());
+
+      while(this.junctionIterator.hasNext()) {
+         JigsawJunction var11 = (JigsawJunction)this.junctionIterator.next();
+         int var12 = var1 - var11.getSourceX();
+         var8 = var2 - var11.getSourceGroundY();
+         var9 = var3 - var11.getSourceZ();
+         var4 += getContribution(var12, var8, var9) * 0.4D;
+      }
+
+      this.junctionIterator.back(this.junctions.size());
+      return var4;
+   }
+
+   private static double getContribution(int var0, int var1, int var2) {
+      int var3 = var0 + 12;
+      int var4 = var1 + 12;
+      int var5 = var2 + 12;
+      if (var3 >= 0 && var3 < 24) {
+         if (var4 >= 0 && var4 < 24) {
+            return var5 >= 0 && var5 < 24 ? (double)BEARD_KERNEL[var5 * 24 * 24 + var3 * 24 + var4] : 0.0D;
+         } else {
+            return 0.0D;
+         }
+      } else {
+         return 0.0D;
+      }
+   }
+
+   private static double computeBeardContribution(int var0, int var1, int var2) {
+      double var3 = (double)(var0 * var0 + var2 * var2);
+      double var5 = (double)var1 + 0.5D;
+      double var7 = var5 * var5;
+      double var9 = Math.pow(2.718281828459045D, -(var7 / 16.0D + var3 / 16.0D));
+      double var11 = -var5 * Mth.fastInvSqrt(var7 / 2.0D + var3 / 2.0D) / 2.0D;
+      return var11 * var9;
+   }
+}
