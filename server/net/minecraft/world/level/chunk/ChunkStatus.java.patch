--- net/minecraft/world/level/chunk/ChunkStatus.java
+++ net/minecraft/world/level/chunk/ChunkStatus.java
@@ -8,10 +8,11 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.EnumSet;
 import java.util.List;
 import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.Executor;
 import java.util.function.Function;
 import javax.annotation.Nullable;
 import net.minecraft.Util;
 import net.minecraft.core.Registry;
 import net.minecraft.resources.ResourceLocation;
@@ -87,11 +88,11 @@
 
    private static boolean isLighted(ChunkStatus var0, ChunkAccess var1) {
       return var1.getStatus().isOrAfter(var0) && var1.isLightCorrect();
    }
 
-   public static ChunkStatus getStatus(int var0) {
+   public static ChunkStatus getStatusAroundFullChunk(int var0) {
       if (var0 >= STATUS_BY_RANGE.size()) {
          return EMPTY;
       } else {
          return var0 < 0 ? FULL : (ChunkStatus)STATUS_BY_RANGE.get(var0);
       }
@@ -126,12 +127,12 @@
 
    public ChunkStatus getParent() {
       return this.parent;
    }
 
-   public CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> generate(ServerLevel var1, ChunkGenerator var2, StructureManager var3, ThreadedLevelLightEngine var4, Function<ChunkAccess, CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>>> var5, List<ChunkAccess> var6) {
-      return this.generationTask.doWork(this, var1, var2, var3, var4, var5, var6, (ChunkAccess)var6.get(var6.size() / 2));
+   public CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> generate(Executor var1, ServerLevel var2, ChunkGenerator var3, StructureManager var4, ThreadedLevelLightEngine var5, Function<ChunkAccess, CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>>> var6, List<ChunkAccess> var7) {
+      return this.generationTask.doWork(this, var1, var2, var3, var4, var5, var6, var7, (ChunkAccess)var7.get(var7.size() / 2));
    }
 
    public CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> load(ServerLevel var1, StructureManager var2, ThreadedLevelLightEngine var3, Function<ChunkAccess, CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>>> var4, ChunkAccess var5) {
       return this.loadingTask.doWork(this, var1, var2, var3, var4, var5);
    }
@@ -170,67 +171,77 @@
 
          return CompletableFuture.completedFuture(Either.left(var5));
       };
       EMPTY = registerSimple("empty", (ChunkStatus)null, -1, PRE_FEATURES, ChunkStatus.ChunkType.PROTOCHUNK, (var0, var1, var2, var3) -> {
       });
-      STRUCTURE_STARTS = register("structure_starts", EMPTY, 0, PRE_FEATURES, ChunkStatus.ChunkType.PROTOCHUNK, (var0, var1, var2, var3, var4, var5, var6, var7) -> {
-         if (!var7.getStatus().isOrAfter(var0)) {
-            if (var1.getServer().getWorldData().worldGenSettings().generateFeatures()) {
-               var2.createStructures(var1.registryAccess(), var1.structureFeatureManager(), var7, var3, var1.getSeed());
+      STRUCTURE_STARTS = register("structure_starts", EMPTY, 0, PRE_FEATURES, ChunkStatus.ChunkType.PROTOCHUNK, (var0, var1, var2, var3, var4, var5, var6, var7, var8) -> {
+         if (!var8.getStatus().isOrAfter(var0)) {
+            if (var2.getServer().getWorldData().worldGenSettings().generateFeatures()) {
+               var3.createStructures(var2.registryAccess(), var2.structureFeatureManager(), var8, var4, var2.getSeed());
             }
 
-            if (var7 instanceof ProtoChunk) {
-               ((ProtoChunk)var7).setStatus(var0);
+            if (var8 instanceof ProtoChunk) {
+               ((ProtoChunk)var8).setStatus(var0);
             }
          }
 
-         return CompletableFuture.completedFuture(Either.left(var7));
+         return CompletableFuture.completedFuture(Either.left(var8));
       });
       STRUCTURE_REFERENCES = registerSimple("structure_references", STRUCTURE_STARTS, 8, PRE_FEATURES, ChunkStatus.ChunkType.PROTOCHUNK, (var0, var1, var2, var3) -> {
          WorldGenRegion var4 = new WorldGenRegion(var0, var2);
          var1.createReferences(var4, var0.structureFeatureManager().forWorldGenRegion(var4), var3);
       });
       BIOMES = registerSimple("biomes", STRUCTURE_REFERENCES, 0, PRE_FEATURES, ChunkStatus.ChunkType.PROTOCHUNK, (var0, var1, var2, var3) -> {
          var1.createBiomes(var0.registryAccess().registryOrThrow(Registry.BIOME_REGISTRY), var3);
       });
-      NOISE = registerSimple("noise", BIOMES, 8, PRE_FEATURES, ChunkStatus.ChunkType.PROTOCHUNK, (var0, var1, var2, var3) -> {
-         WorldGenRegion var4 = new WorldGenRegion(var0, var2);
-         var1.fillFromNoise(var4, var0.structureFeatureManager().forWorldGenRegion(var4), var3);
+      NOISE = register("noise", BIOMES, 8, PRE_FEATURES, ChunkStatus.ChunkType.PROTOCHUNK, (var0, var1, var2, var3, var4, var5, var6, var7, var8) -> {
+         if (!var8.getStatus().isOrAfter(var0)) {
+            WorldGenRegion var9 = new WorldGenRegion(var2, var7);
+            return var3.fillFromNoise(var1, var2.structureFeatureManager().forWorldGenRegion(var9), var8).thenApply((var1x) -> {
+               if (var1x instanceof ProtoChunk) {
+                  ((ProtoChunk)var1x).setStatus(var0);
+               }
+
+               return Either.left(var1x);
+            });
+         } else {
+            return CompletableFuture.completedFuture(Either.left(var8));
+         }
       });
       SURFACE = registerSimple("surface", NOISE, 0, PRE_FEATURES, ChunkStatus.ChunkType.PROTOCHUNK, (var0, var1, var2, var3) -> {
          var1.buildSurfaceAndBedrock(new WorldGenRegion(var0, var2), var3);
       });
       CARVERS = registerSimple("carvers", SURFACE, 0, PRE_FEATURES, ChunkStatus.ChunkType.PROTOCHUNK, (var0, var1, var2, var3) -> {
          var1.applyCarvers(var0.getSeed(), var0.getBiomeManager(), var3, GenerationStep.Carving.AIR);
       });
       LIQUID_CARVERS = registerSimple("liquid_carvers", CARVERS, 0, POST_FEATURES, ChunkStatus.ChunkType.PROTOCHUNK, (var0, var1, var2, var3) -> {
          var1.applyCarvers(var0.getSeed(), var0.getBiomeManager(), var3, GenerationStep.Carving.LIQUID);
       });
-      FEATURES = register("features", LIQUID_CARVERS, 8, POST_FEATURES, ChunkStatus.ChunkType.PROTOCHUNK, (var0, var1, var2, var3, var4, var5, var6, var7) -> {
-         ProtoChunk var8 = (ProtoChunk)var7;
-         var8.setLightEngine(var4);
-         if (!var7.getStatus().isOrAfter(var0)) {
-            Heightmap.primeHeightmaps(var7, EnumSet.of(Heightmap.Types.MOTION_BLOCKING, Heightmap.Types.MOTION_BLOCKING_NO_LEAVES, Heightmap.Types.OCEAN_FLOOR, Heightmap.Types.WORLD_SURFACE));
-            WorldGenRegion var9 = new WorldGenRegion(var1, var6);
-            var2.applyBiomeDecoration(var9, var1.structureFeatureManager().forWorldGenRegion(var9));
-            var8.setStatus(var0);
+      FEATURES = register("features", LIQUID_CARVERS, 8, POST_FEATURES, ChunkStatus.ChunkType.PROTOCHUNK, (var0, var1, var2, var3, var4, var5, var6, var7, var8) -> {
+         ProtoChunk var9 = (ProtoChunk)var8;
+         var9.setLightEngine(var5);
+         if (!var8.getStatus().isOrAfter(var0)) {
+            Heightmap.primeHeightmaps(var8, EnumSet.of(Heightmap.Types.MOTION_BLOCKING, Heightmap.Types.MOTION_BLOCKING_NO_LEAVES, Heightmap.Types.OCEAN_FLOOR, Heightmap.Types.WORLD_SURFACE));
+            WorldGenRegion var10 = new WorldGenRegion(var2, var7);
+            var3.applyBiomeDecoration(var10, var2.structureFeatureManager().forWorldGenRegion(var10));
+            var9.setStatus(var0);
          }
 
-         return CompletableFuture.completedFuture(Either.left(var7));
+         return CompletableFuture.completedFuture(Either.left(var8));
       });
-      LIGHT = register("light", FEATURES, 1, POST_FEATURES, ChunkStatus.ChunkType.PROTOCHUNK, (var0, var1, var2, var3, var4, var5, var6, var7) -> {
-         return lightChunk(var0, var4, var7);
+      LIGHT = register("light", FEATURES, 1, POST_FEATURES, ChunkStatus.ChunkType.PROTOCHUNK, (var0, var1, var2, var3, var4, var5, var6, var7, var8) -> {
+         return lightChunk(var0, var5, var8);
       }, (var0, var1, var2, var3, var4, var5) -> {
          return lightChunk(var0, var3, var5);
       });
       SPAWN = registerSimple("spawn", LIGHT, 0, POST_FEATURES, ChunkStatus.ChunkType.PROTOCHUNK, (var0, var1, var2, var3) -> {
          var1.spawnOriginalMobs(new WorldGenRegion(var0, var2));
       });
       HEIGHTMAPS = registerSimple("heightmaps", SPAWN, 0, POST_FEATURES, ChunkStatus.ChunkType.PROTOCHUNK, (var0, var1, var2, var3) -> {
       });
-      FULL = register("full", HEIGHTMAPS, 0, POST_FEATURES, ChunkStatus.ChunkType.LEVELCHUNK, (var0, var1, var2, var3, var4, var5, var6, var7) -> {
-         return (CompletableFuture)var5.apply(var7);
+      FULL = register("full", HEIGHTMAPS, 0, POST_FEATURES, ChunkStatus.ChunkType.LEVELCHUNK, (var0, var1, var2, var3, var4, var5, var6, var7, var8) -> {
+         return (CompletableFuture)var6.apply(var8);
       }, (var0, var1, var2, var3, var4, var5) -> {
          return (CompletableFuture)var4.apply(var5);
       });
       STATUS_BY_RANGE = ImmutableList.of(FULL, FEATURES, LIQUID_CARVERS, STRUCTURE_STARTS, STRUCTURE_STARTS, STRUCTURE_STARTS, STRUCTURE_STARTS, STRUCTURE_STARTS, STRUCTURE_STARTS, STRUCTURE_STARTS, STRUCTURE_STARTS);
       RANGE_BY_STATUS = (IntList)Util.make(new IntArrayList(getStatusList().size()), (var0) -> {
@@ -254,27 +265,27 @@
       private ChunkType() {
       }
    }
 
    interface SimpleGenerationTask extends ChunkStatus.GenerationTask {
-      default CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> doWork(ChunkStatus var1, ServerLevel var2, ChunkGenerator var3, StructureManager var4, ThreadedLevelLightEngine var5, Function<ChunkAccess, CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>>> var6, List<ChunkAccess> var7, ChunkAccess var8) {
-         if (!var8.getStatus().isOrAfter(var1)) {
-            this.doWork(var2, var3, var7, var8);
-            if (var8 instanceof ProtoChunk) {
-               ((ProtoChunk)var8).setStatus(var1);
+      default CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> doWork(ChunkStatus var1, Executor var2, ServerLevel var3, ChunkGenerator var4, StructureManager var5, ThreadedLevelLightEngine var6, Function<ChunkAccess, CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>>> var7, List<ChunkAccess> var8, ChunkAccess var9) {
+         if (!var9.getStatus().isOrAfter(var1)) {
+            this.doWork(var3, var4, var8, var9);
+            if (var9 instanceof ProtoChunk) {
+               ((ProtoChunk)var9).setStatus(var1);
             }
          }
 
-         return CompletableFuture.completedFuture(Either.left(var8));
+         return CompletableFuture.completedFuture(Either.left(var9));
       }
 
       void doWork(ServerLevel var1, ChunkGenerator var2, List<ChunkAccess> var3, ChunkAccess var4);
    }
 
    interface LoadingTask {
       CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> doWork(ChunkStatus var1, ServerLevel var2, StructureManager var3, ThreadedLevelLightEngine var4, Function<ChunkAccess, CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>>> var5, ChunkAccess var6);
    }
 
    interface GenerationTask {
-      CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> doWork(ChunkStatus var1, ServerLevel var2, ChunkGenerator var3, StructureManager var4, ThreadedLevelLightEngine var5, Function<ChunkAccess, CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>>> var6, List<ChunkAccess> var7, ChunkAccess var8);
+      CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> doWork(ChunkStatus var1, Executor var2, ServerLevel var3, ChunkGenerator var4, StructureManager var5, ThreadedLevelLightEngine var6, Function<ChunkAccess, CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>>> var7, List<ChunkAccess> var8, ChunkAccess var9);
    }
 }
