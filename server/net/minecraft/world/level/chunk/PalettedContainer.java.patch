--- net/minecraft/world/level/chunk/PalettedContainer.java
+++ net/minecraft/world/level/chunk/PalettedContainer.java
@@ -1,23 +1,18 @@
 package net.minecraft.world.level.chunk;
 
 import it.unimi.dsi.fastutil.ints.Int2IntOpenHashMap;
-import java.util.Arrays;
-import java.util.Objects;
 import java.util.concurrent.locks.ReentrantLock;
 import java.util.function.Function;
 import java.util.function.Predicate;
-import java.util.stream.Collectors;
-import net.minecraft.CrashReport;
-import net.minecraft.CrashReportCategory;
-import net.minecraft.ReportedException;
 import net.minecraft.core.IdMapper;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.util.BitStorage;
 import net.minecraft.util.Mth;
+import net.minecraft.util.ThreadingDetector;
 
 public class PalettedContainer<T> implements PaletteResize<T> {
    private final Palette<T> globalPalette;
    private final PaletteResize<T> dummyPaletteResize = (var0, var1x) -> {
       return 0;
@@ -30,21 +25,11 @@
    private Palette<T> palette;
    private int bits;
    private final ReentrantLock lock = new ReentrantLock();
 
    public void acquire() {
-      if (this.lock.isLocked() && !this.lock.isHeldByCurrentThread()) {
-         String var1 = (String)Thread.getAllStackTraces().keySet().stream().filter(Objects::nonNull).map((var0) -> {
-            return var0.getName() + ": \n\tat " + (String)Arrays.stream(var0.getStackTrace()).map(Object::toString).collect(Collectors.joining("\n\tat "));
-         }).collect(Collectors.joining("\n"));
-         CrashReport var2 = new CrashReport("Writing into PalettedContainer from multiple threads", new IllegalStateException());
-         CrashReportCategory var3 = var2.addCategory("Thread dumps");
-         var3.setDetail("Thread dumps", (Object)var1);
-         throw new ReportedException(var2);
-      } else {
-         this.lock.lock();
-      }
+      ThreadingDetector.checkAndLock(this.lock, "PalettedContainer");
    }
 
    public void release() {
       this.lock.unlock();
    }
