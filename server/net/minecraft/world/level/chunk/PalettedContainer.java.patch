--- net/minecraft/world/level/chunk/PalettedContainer.java
+++ net/minecraft/world/level/chunk/PalettedContainer.java
@@ -1,25 +1,26 @@
 package net.minecraft.world.level.chunk;
 
+import com.mojang.datafixers.util.Pair;
 import it.unimi.dsi.fastutil.ints.Int2IntOpenHashMap;
-import java.util.Arrays;
-import java.util.Objects;
-import java.util.concurrent.locks.ReentrantLock;
+import java.util.concurrent.Semaphore;
 import java.util.function.Function;
 import java.util.function.Predicate;
-import java.util.stream.Collectors;
-import net.minecraft.CrashReport;
-import net.minecraft.CrashReportCategory;
-import net.minecraft.ReportedException;
+import javax.annotation.Nullable;
 import net.minecraft.core.IdMapper;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.util.BitStorage;
+import net.minecraft.util.DebugBuffer;
 import net.minecraft.util.Mth;
+import net.minecraft.util.ThreadingDetector;
 
 public class PalettedContainer<T> implements PaletteResize<T> {
+   private static final int SIZE = 4096;
+   public static final int GLOBAL_PALETTE_BITS = 9;
+   public static final int MIN_PALETTE_SIZE = 4;
    private final Palette<T> globalPalette;
    private final PaletteResize<T> dummyPaletteResize = (var0, var1x) -> {
       return 0;
    };
    private final IdMapper<T> registry;
@@ -27,28 +28,25 @@
    private final Function<T, CompoundTag> writer;
    private final T defaultValue;
    protected BitStorage storage;
    private Palette<T> palette;
    private int bits;
-   private final ReentrantLock lock = new ReentrantLock();
+   private final Semaphore lock = new Semaphore(1);
+   @Nullable
+   private final DebugBuffer<Pair<Thread, StackTraceElement[]>> traces = null;
 
    public void acquire() {
-      if (this.lock.isLocked() && !this.lock.isHeldByCurrentThread()) {
-         String var1 = (String)Thread.getAllStackTraces().keySet().stream().filter(Objects::nonNull).map((var0) -> {
-            return var0.getName() + ": \n\tat " + (String)Arrays.stream(var0.getStackTrace()).map(Object::toString).collect(Collectors.joining("\n\tat "));
-         }).collect(Collectors.joining("\n"));
-         CrashReport var2 = new CrashReport("Writing into PalettedContainer from multiple threads", new IllegalStateException());
-         CrashReportCategory var3 = var2.addCategory("Thread dumps");
-         var3.setDetail("Thread dumps", (Object)var1);
-         throw new ReportedException(var2);
-      } else {
-         this.lock.lock();
+      if (this.traces != null) {
+         Thread var1 = Thread.currentThread();
+         this.traces.push(Pair.of(var1, var1.getStackTrace()));
       }
+
+      ThreadingDetector.checkAndLock(this.lock, this.traces, "PalettedContainer");
    }
 
    public void release() {
-      this.lock.unlock();
+      this.lock.release();
    }
 
    public PalettedContainer(Palette<T> var1, IdMapper<T> var2, Function<CompoundTag, T> var3, Function<T, CompoundTag> var4, T var5) {
       this.globalPalette = var1;
       this.registry = var2;
@@ -79,26 +77,22 @@
          this.storage = new BitStorage(this.bits, 4096);
       }
    }
 
    public int onResize(int var1, T var2) {
-      this.acquire();
       BitStorage var3 = this.storage;
       Palette var4 = this.palette;
       this.setBits(var1);
 
-      int var5;
-      for(var5 = 0; var5 < var3.getSize(); ++var5) {
+      for(int var5 = 0; var5 < var3.getSize(); ++var5) {
          Object var6 = var4.valueFor(var3.get(var5));
          if (var6 != null) {
             this.set(var5, var6);
          }
       }
 
-      var5 = this.palette.idFor(var2);
-      this.release();
-      return var5;
+      return this.palette.idFor(var2);
    }
 
    public T getAndSet(int var1, int var2, int var3, T var4) {
       this.acquire();
       Object var5 = this.getAndSet(getIndex(var1, var2, var3), var4);
@@ -108,18 +102,24 @@
 
    public T getAndSetUnchecked(int var1, int var2, int var3, T var4) {
       return this.getAndSet(getIndex(var1, var2, var3), var4);
    }
 
-   protected T getAndSet(int var1, T var2) {
+   private T getAndSet(int var1, T var2) {
       int var3 = this.palette.idFor(var2);
       int var4 = this.storage.getAndSet(var1, var3);
       Object var5 = this.palette.valueFor(var4);
       return var5 == null ? this.defaultValue : var5;
    }
 
-   protected void set(int var1, T var2) {
+   public void set(int var1, int var2, int var3, T var4) {
+      this.acquire();
+      this.set(getIndex(var1, var2, var3), var4);
+      this.release();
+   }
+
+   private void set(int var1, T var2) {
       int var3 = this.palette.idFor(var2);
       this.storage.set(var1, var3);
    }
 
    public T get(int var1, int var2, int var3) {
@@ -129,10 +129,22 @@
    protected T get(int var1) {
       Object var2 = this.palette.valueFor(this.storage.get(var1));
       return var2 == null ? this.defaultValue : var2;
    }
 
+   public void read(FriendlyByteBuf var1) {
+      this.acquire();
+      byte var2 = var1.readByte();
+      if (this.bits != var2) {
+         this.setBits(var2);
+      }
+
+      this.palette.read(var1);
+      var1.readLongArray(this.storage.getRaw());
+      this.release();
+   }
+
    public void write(FriendlyByteBuf var1) {
       this.acquire();
       var1.writeByte(this.bits);
       this.palette.write(var1);
       var1.writeLongArray(this.storage.getRaw());
