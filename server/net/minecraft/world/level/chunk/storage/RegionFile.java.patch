--- net/minecraft/world/level/chunk/storage/RegionFile.java
+++ net/minecraft/world/level/chunk/storage/RegionFile.java
@@ -25,14 +25,23 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class RegionFile implements AutoCloseable {
    private static final Logger LOGGER = LogManager.getLogger();
+   private static final int SECTOR_BYTES = 4096;
+   @VisibleForTesting
+   protected static final int SECTOR_INTS = 1024;
+   private static final int CHUNK_HEADER_SIZE = 5;
+   private static final int HEADER_OFFSET = 0;
    private static final ByteBuffer PADDING_BUFFER = ByteBuffer.allocateDirect(1);
+   private static final String EXTERNAL_FILE_EXTENSION = ".mcc";
+   private static final int EXTERNAL_STREAM_FLAG = 128;
+   private static final int EXTERNAL_CHUNK_THRESHOLD = 256;
+   private static final int CHUNK_NOT_PRESENT = 0;
    private final FileChannel file;
    private final Path externalFileDir;
-   private final RegionFileVersion version;
+   final RegionFileVersion version;
    private final ByteBuffer header;
    private final IntBuffer offsets;
    private final IntBuffer timestamps;
    @VisibleForTesting
    protected final RegionBitmap usedSectors;
@@ -139,10 +148,14 @@
             }
          }
       }
    }
 
+   private static int getTimestamp() {
+      return (int)(Util.getEpochMillis() / 1000L);
+   }
+
    private static boolean isExternalStreamChunk(byte var0) {
       return (var0 & 128) != 0;
    }
 
    private static byte getExternalChunkVersion(byte var0) {
@@ -245,10 +258,22 @@
 
    public void flush() throws IOException {
       this.file.force(true);
    }
 
+   public void clear(ChunkPos var1) throws IOException {
+      int var2 = getOffsetIndex(var1);
+      int var3 = this.offsets.get(var2);
+      if (var3 != 0) {
+         this.offsets.put(var2, 0);
+         this.timestamps.put(var2, getTimestamp());
+         this.writeHeader();
+         Files.deleteIfExists(this.getExternalChunkPath(var1));
+         this.usedSectors.free(getSectorNumber(var3), getNumSectors(var3));
+      }
+   }
+
    protected synchronized void write(ChunkPos var1, ByteBuffer var2) throws IOException {
       int var3 = getOffsetIndex(var1);
       int var4 = this.offsets.get(var3);
       int var5 = getSectorNumber(var4);
       int var6 = getNumSectors(var4);
@@ -270,13 +295,12 @@
             Files.deleteIfExists(this.getExternalChunkPath(var1));
          };
          this.file.write(var2, (long)(var9 * 4096));
       }
 
-      int var13 = (int)(Util.getEpochMillis() / 1000L);
       this.offsets.put(var3, this.packSectorOffset(var9, var8));
-      this.timestamps.put(var3, var13);
+      this.timestamps.put(var3, getTimestamp());
       this.writeHeader();
       var10.run();
       if (var5 != 0) {
          this.usedSectors.free(var5, var6);
       }
@@ -292,33 +316,30 @@
    }
 
    private RegionFile.CommitOp writeToExternalFile(Path var1, ByteBuffer var2) throws IOException {
       Path var3 = Files.createTempFile(this.externalFileDir, "tmp", (String)null);
       FileChannel var4 = FileChannel.open(var3, StandardOpenOption.CREATE, StandardOpenOption.WRITE);
-      Throwable var5 = null;
 
       try {
          var2.position(5);
          var4.write(var2);
-      } catch (Throwable var14) {
-         var5 = var14;
-         throw var14;
-      } finally {
+      } catch (Throwable var8) {
          if (var4 != null) {
-            if (var5 != null) {
-               try {
-                  var4.close();
-               } catch (Throwable var13) {
-                  var5.addSuppressed(var13);
-               }
-            } else {
+            try {
                var4.close();
+            } catch (Throwable var7) {
+               var8.addSuppressed(var7);
             }
          }
 
+         throw var8;
       }
 
+      if (var4 != null) {
+         var4.close();
+      }
+
       return () -> {
          Files.move(var3, var1, StandardCopyOption.REPLACE_EXISTING);
       };
    }
 
@@ -361,15 +382,11 @@
          this.file.write(var3, (long)(var2 - 1));
       }
 
    }
 
-   interface CommitOp {
-      void run() throws IOException;
-   }
-
-   class ChunkBuffer extends ByteArrayOutputStream {
+   private class ChunkBuffer extends ByteArrayOutputStream {
       private final ChunkPos pos;
 
       public ChunkBuffer(ChunkPos var2) {
          super(8096);
          super.write(0);
@@ -384,6 +401,10 @@
          ByteBuffer var1 = ByteBuffer.wrap(this.buf, 0, this.count);
          var1.putInt(0, this.count - 5 + 1);
          RegionFile.this.write(this.pos, var1);
       }
    }
+
+   private interface CommitOp {
+      void run() throws IOException;
+   }
 }
