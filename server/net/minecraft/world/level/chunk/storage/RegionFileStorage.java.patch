--- net/minecraft/world/level/chunk/storage/RegionFileStorage.java
+++ net/minecraft/world/level/chunk/storage/RegionFileStorage.java
@@ -1,20 +1,24 @@
 package net.minecraft.world.level.chunk.storage;
 
 import it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap;
 import it.unimi.dsi.fastutil.objects.ObjectIterator;
+import java.io.DataInput;
 import java.io.DataInputStream;
+import java.io.DataOutput;
 import java.io.DataOutputStream;
 import java.io.File;
 import java.io.IOException;
 import javax.annotation.Nullable;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtIo;
 import net.minecraft.util.ExceptionCollector;
 import net.minecraft.world.level.ChunkPos;
 
 public final class RegionFileStorage implements AutoCloseable {
+   public static final String ANVIL_EXTENSION = ".mca";
+   private static final int MAX_CACHE_SIZE = 256;
    private final Long2ObjectLinkedOpenHashMap<RegionFile> regionCache = new Long2ObjectLinkedOpenHashMap();
    private final File folder;
    private final boolean sync;
 
    RegionFileStorage(File var1, boolean var2) {
@@ -34,75 +38,83 @@
 
          if (!this.folder.exists()) {
             this.folder.mkdirs();
          }
 
-         File var5 = new File(this.folder, "r." + var1.getRegionX() + "." + var1.getRegionZ() + ".mca");
+         File var10002 = this.folder;
+         int var10003 = var1.getRegionX();
+         File var5 = new File(var10002, "r." + var10003 + "." + var1.getRegionZ() + ".mca");
          RegionFile var6 = new RegionFile(var5, this.folder, this.sync);
          this.regionCache.putAndMoveToFirst(var2, var6);
          return var6;
       }
    }
 
    @Nullable
    public CompoundTag read(ChunkPos var1) throws IOException {
       RegionFile var2 = this.getRegionFile(var1);
       DataInputStream var3 = var2.getChunkDataInputStream(var1);
-      Throwable var4 = null;
 
-      CompoundTag var5;
-      try {
-         if (var3 == null) {
-            var5 = null;
-            return var5;
-         }
+      CompoundTag var4;
+      label43: {
+         try {
+            if (var3 == null) {
+               var4 = null;
+               break label43;
+            }
 
-         var5 = NbtIo.read(var3);
-      } catch (Throwable var15) {
-         var4 = var15;
-         throw var15;
-      } finally {
-         if (var3 != null) {
-            if (var4 != null) {
+            var4 = NbtIo.read((DataInput)var3);
+         } catch (Throwable var7) {
+            if (var3 != null) {
                try {
                   var3.close();
-               } catch (Throwable var14) {
-                  var4.addSuppressed(var14);
+               } catch (Throwable var6) {
+                  var7.addSuppressed(var6);
                }
-            } else {
-               var3.close();
             }
+
+            throw var7;
          }
 
+         if (var3 != null) {
+            var3.close();
+         }
+
+         return var4;
       }
 
-      return var5;
+      if (var3 != null) {
+         var3.close();
+      }
+
+      return var4;
    }
 
-   protected void write(ChunkPos var1, CompoundTag var2) throws IOException {
+   protected void write(ChunkPos var1, @Nullable CompoundTag var2) throws IOException {
       RegionFile var3 = this.getRegionFile(var1);
-      DataOutputStream var4 = var3.getChunkDataOutputStream(var1);
-      Throwable var5 = null;
+      if (var2 == null) {
+         var3.clear(var1);
+      } else {
+         DataOutputStream var4 = var3.getChunkDataOutputStream(var1);
 
-      try {
-         NbtIo.write(var2, var4);
-      } catch (Throwable var14) {
-         var5 = var14;
-         throw var14;
-      } finally {
-         if (var4 != null) {
-            if (var5 != null) {
+         try {
+            NbtIo.write(var2, (DataOutput)var4);
+         } catch (Throwable var8) {
+            if (var4 != null) {
                try {
                   var4.close();
-               } catch (Throwable var13) {
-                  var5.addSuppressed(var13);
+               } catch (Throwable var7) {
+                  var8.addSuppressed(var7);
                }
-            } else {
-               var4.close();
             }
+
+            throw var8;
          }
 
+         if (var4 != null) {
+            var4.close();
+         }
       }
 
    }
 
    public void close() throws IOException {
