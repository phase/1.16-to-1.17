--- net/minecraft/world/level/chunk/storage/IOWorker.java
+++ net/minecraft/world/level/chunk/storage/IOWorker.java
@@ -32,11 +32,11 @@
    protected IOWorker(File var1, boolean var2, String var3) {
       this.storage = new RegionFileStorage(var1, var2);
       this.mailbox = new ProcessorMailbox(new StrictQueue.FixedPriorityQueue(IOWorker.Priority.values().length), Util.ioPool(), "IOWorker-" + var3);
    }
 
-   public CompletableFuture<Void> store(ChunkPos var1, CompoundTag var2) {
+   public CompletableFuture<Void> store(ChunkPos var1, @Nullable CompoundTag var2) {
       return this.submitTask(() -> {
          IOWorker.PendingStore var3 = (IOWorker.PendingStore)this.pendingWrites.computeIfAbsent(var1, (var1x) -> {
             return new IOWorker.PendingStore(var2);
          });
          var3.data = var2;
@@ -44,11 +44,25 @@
       }).thenCompose(Function.identity());
    }
 
    @Nullable
    public CompoundTag load(ChunkPos var1) throws IOException {
-      CompletableFuture var2 = this.submitTask(() -> {
+      CompletableFuture var2 = this.loadAsync(var1);
+
+      try {
+         return (CompoundTag)var2.join();
+      } catch (CompletionException var4) {
+         if (var4.getCause() instanceof IOException) {
+            throw (IOException)var4.getCause();
+         } else {
+            throw var4;
+         }
+      }
+   }
+
+   protected CompletableFuture<CompoundTag> loadAsync(ChunkPos var1) {
+      return this.submitTask(() -> {
          IOWorker.PendingStore var2 = (IOWorker.PendingStore)this.pendingWrites.get(var1);
          if (var2 != null) {
             return Either.left(var2.data);
          } else {
             try {
@@ -58,20 +72,10 @@
                LOGGER.warn((String)"Failed to read chunk {}", (Object)var1, (Object)var4);
                return Either.right(var4);
             }
          }
       });
-
-      try {
-         return (CompoundTag)var2.join();
-      } catch (CompletionException var4) {
-         if (var4.getCause() instanceof IOException) {
-            throw (IOException)var4.getCause();
-         } else {
-            throw var4;
-         }
-      }
    }
 
    public CompletableFuture<Void> synchronize() {
       CompletableFuture var1 = this.submitTask(() -> {
          return Either.left(CompletableFuture.allOf((CompletableFuture[])this.pendingWrites.values().stream().map((var0) -> {
@@ -93,11 +97,11 @@
       });
    }
 
    private <T> CompletableFuture<T> submitTask(Supplier<Either<T, Exception>> var1) {
       return this.mailbox.askEither((var2) -> {
-         return new StrictQueue.IntRunnable(IOWorker.Priority.HIGH.ordinal(), () -> {
+         return new StrictQueue.IntRunnable(IOWorker.Priority.FOREGROUND.ordinal(), () -> {
             if (!this.shutdownRequested.get()) {
                var2.tell(var1.get());
             }
 
             this.tellStorePending();
@@ -114,11 +118,11 @@
          this.tellStorePending();
       }
    }
 
    private void tellStorePending() {
-      this.mailbox.tell(new StrictQueue.IntRunnable(IOWorker.Priority.LOW.ordinal(), this::storePendingChunk));
+      this.mailbox.tell(new StrictQueue.IntRunnable(IOWorker.Priority.BACKGROUND.ordinal(), this::storePendingChunk));
    }
 
    private void runStore(ChunkPos var1, IOWorker.PendingStore var2) {
       try {
          this.storage.write(var1, var2.data);
@@ -130,51 +134,40 @@
 
    }
 
    public void close() throws IOException {
       if (this.shutdownRequested.compareAndSet(false, true)) {
-         CompletableFuture var1 = this.mailbox.ask((var0) -> {
-            return new StrictQueue.IntRunnable(IOWorker.Priority.HIGH.ordinal(), () -> {
+         this.mailbox.ask((var0) -> {
+            return new StrictQueue.IntRunnable(IOWorker.Priority.SHUTDOWN.ordinal(), () -> {
                var0.tell(Unit.INSTANCE);
             });
-         });
-
-         try {
-            var1.join();
-         } catch (CompletionException var4) {
-            if (var4.getCause() instanceof IOException) {
-               throw (IOException)var4.getCause();
-            }
-
-            throw var4;
-         }
-
+         }).join();
          this.mailbox.close();
-         this.pendingWrites.forEach(this::runStore);
-         this.pendingWrites.clear();
 
          try {
             this.storage.close();
-         } catch (Exception var3) {
-            LOGGER.error((String)"Failed to close storage", (Throwable)var3);
+         } catch (Exception var2) {
+            LOGGER.error((String)"Failed to close storage", (Throwable)var2);
          }
 
       }
    }
 
    static class PendingStore {
+      @Nullable
       private CompoundTag data;
       private final CompletableFuture<Void> result = new CompletableFuture();
 
-      public PendingStore(CompoundTag var1) {
+      public PendingStore(@Nullable CompoundTag var1) {
          this.data = var1;
       }
    }
 
    static enum Priority {
-      HIGH,
-      LOW;
+      FOREGROUND,
+      BACKGROUND,
+      SHUTDOWN;
 
       private Priority() {
       }
    }
 }
