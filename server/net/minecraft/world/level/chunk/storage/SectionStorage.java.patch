--- net/minecraft/world/level/chunk/storage/SectionStorage.java
+++ net/minecraft/world/level/chunk/storage/SectionStorage.java
@@ -25,29 +25,32 @@
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtOps;
 import net.minecraft.nbt.Tag;
 import net.minecraft.util.datafix.DataFixTypes;
 import net.minecraft.world.level.ChunkPos;
-import net.minecraft.world.level.Level;
+import net.minecraft.world.level.LevelHeightAccessor;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class SectionStorage<R> implements AutoCloseable {
    private static final Logger LOGGER = LogManager.getLogger();
+   private static final String SECTIONS_TAG = "Sections";
    private final IOWorker worker;
    private final Long2ObjectMap<Optional<R>> storage = new Long2ObjectOpenHashMap();
    private final LongLinkedOpenHashSet dirty = new LongLinkedOpenHashSet();
    private final Function<Runnable, Codec<R>> codec;
    private final Function<Runnable, R> factory;
    private final DataFixer fixerUpper;
    private final DataFixTypes type;
+   protected final LevelHeightAccessor levelHeightAccessor;
 
-   public SectionStorage(File var1, Function<Runnable, Codec<R>> var2, Function<Runnable, R> var3, DataFixer var4, DataFixTypes var5, boolean var6) {
+   public SectionStorage(File var1, Function<Runnable, Codec<R>> var2, Function<Runnable, R> var3, DataFixer var4, DataFixTypes var5, boolean var6, LevelHeightAccessor var7) {
       this.codec = var2;
       this.factory = var3;
       this.fixerUpper = var4;
       this.type = var5;
+      this.levelHeightAccessor = var7;
       this.worker = new IOWorker(var1, var6, var1.getName());
    }
 
    protected void tick(BooleanSupplier var1) {
       while(!this.dirty.isEmpty() && var1.getAsBoolean()) {
@@ -61,43 +64,47 @@
    protected Optional<R> get(long var1) {
       return (Optional)this.storage.get(var1);
    }
 
    protected Optional<R> getOrLoad(long var1) {
-      SectionPos var3 = SectionPos.of(var1);
-      if (this.outsideStoredRange(var3)) {
+      if (this.outsideStoredRange(var1)) {
          return Optional.empty();
       } else {
-         Optional var4 = this.get(var1);
-         if (var4 != null) {
-            return var4;
+         Optional var3 = this.get(var1);
+         if (var3 != null) {
+            return var3;
          } else {
-            this.readColumn(var3.chunk());
-            var4 = this.get(var1);
-            if (var4 == null) {
+            this.readColumn(SectionPos.of(var1).chunk());
+            var3 = this.get(var1);
+            if (var3 == null) {
                throw (IllegalStateException)Util.pauseInIde(new IllegalStateException());
             } else {
-               return var4;
+               return var3;
             }
          }
       }
    }
 
-   protected boolean outsideStoredRange(SectionPos var1) {
-      return Level.isOutsideBuildHeight(SectionPos.sectionToBlockCoord(var1.y()));
+   protected boolean outsideStoredRange(long var1) {
+      int var3 = SectionPos.sectionToBlockCoord(SectionPos.y(var1));
+      return this.levelHeightAccessor.isOutsideBuildHeight(var3);
    }
 
    protected R getOrCreate(long var1) {
-      Optional var3 = this.getOrLoad(var1);
-      if (var3.isPresent()) {
-         return var3.get();
+      if (this.outsideStoredRange(var1)) {
+         throw (IllegalArgumentException)Util.pauseInIde(new IllegalArgumentException("sectionPos out of bounds"));
       } else {
-         Object var4 = this.factory.apply(() -> {
-            this.setDirty(var1);
-         });
-         this.storage.put(var1, Optional.of(var4));
-         return var4;
+         Optional var3 = this.getOrLoad(var1);
+         if (var3.isPresent()) {
+            return var3.get();
+         } else {
+            Object var4 = this.factory.apply(() -> {
+               this.setDirty(var1);
+            });
+            this.storage.put(var1, Optional.of(var4));
+            return var4;
+         }
       }
    }
 
    private void readColumn(ChunkPos var1) {
       this.readColumn(var1, NbtOps.INSTANCE, this.tryRead(var1));
@@ -113,23 +120,23 @@
       }
    }
 
    private <T> void readColumn(ChunkPos var1, DynamicOps<T> var2, @Nullable T var3) {
       if (var3 == null) {
-         for(int var4 = 0; var4 < 16; ++var4) {
-            this.storage.put(SectionPos.of(var1, var4).asLong(), Optional.empty());
+         for(int var4 = this.levelHeightAccessor.getMinSection(); var4 < this.levelHeightAccessor.getMaxSection(); ++var4) {
+            this.storage.put(getKey(var1, var4), Optional.empty());
          }
       } else {
          Dynamic var14 = new Dynamic(var2, var3);
          int var5 = getVersion(var14);
          int var6 = SharedConstants.getCurrentVersion().getWorldVersion();
          boolean var7 = var5 != var6;
          Dynamic var8 = this.fixerUpper.update(this.type.getType(), var14, var5, var6);
          OptionalDynamic var9 = var8.get("Sections");
 
-         for(int var10 = 0; var10 < 16; ++var10) {
-            long var11 = SectionPos.of(var1, var10).asLong();
+         for(int var10 = this.levelHeightAccessor.getMinSection(); var10 < this.levelHeightAccessor.getMaxSection(); ++var10) {
+            long var11 = getKey(var1, var10);
             Optional var13 = var9.get(Integer.toString(var10)).result().flatMap((var3x) -> {
                DataResult var10000 = ((Codec)this.codec.apply(() -> {
                   this.setDirty(var11);
                })).parse(var3x);
                Logger var10001 = LOGGER;
@@ -161,12 +168,12 @@
    }
 
    private <T> Dynamic<T> writeColumn(ChunkPos var1, DynamicOps<T> var2) {
       HashMap var3 = Maps.newHashMap();
 
-      for(int var4 = 0; var4 < 16; ++var4) {
-         long var5 = SectionPos.of(var1, var4).asLong();
+      for(int var4 = this.levelHeightAccessor.getMinSection(); var4 < this.levelHeightAccessor.getMaxSection(); ++var4) {
+         long var5 = getKey(var1, var4);
          this.dirty.remove(var5);
          Optional var7 = (Optional)this.storage.get(var5);
          if (var7 != null && var7.isPresent()) {
             DataResult var8 = ((Codec)this.codec.apply(() -> {
                this.setDirty(var5);
@@ -181,10 +188,14 @@
       }
 
       return new Dynamic(var2, var2.createMap((Map)ImmutableMap.of(var2.createString("Sections"), var2.createMap((Map)var3), var2.createString("DataVersion"), var2.createInt(SharedConstants.getCurrentVersion().getWorldVersion()))));
    }
 
+   private static long getKey(ChunkPos var0, int var1) {
+      return SectionPos.asLong(var0.x, var1, var0.z);
+   }
+
    protected void onSectionLoad(long var1) {
    }
 
    protected void setDirty(long var1) {
       Optional var3 = (Optional)this.storage.get(var1);
@@ -199,12 +210,12 @@
       return var0.get("DataVersion").asInt(1945);
    }
 
    public void flush(ChunkPos var1) {
       if (!this.dirty.isEmpty()) {
-         for(int var2 = 0; var2 < 16; ++var2) {
-            long var3 = SectionPos.of(var1, var2).asLong();
+         for(int var2 = this.levelHeightAccessor.getMinSection(); var2 < this.levelHeightAccessor.getMaxSection(); ++var2) {
+            long var3 = getKey(var1, var2);
             if (this.dirty.contains(var3)) {
                this.writeColumn(var1);
                return;
             }
          }
