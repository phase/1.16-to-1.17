--- net/minecraft/world/level/pathfinder/PathFinder.java
+++ net/minecraft/world/level/pathfinder/PathFinder.java
@@ -12,17 +12,21 @@
 import java.util.Set;
 import java.util.function.Function;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
+import net.minecraft.util.profiling.ProfilerFiller;
+import net.minecraft.util.profiling.metrics.MetricCategory;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.level.PathNavigationRegion;
 
 public class PathFinder {
+   private static final float FUDGING = 1.5F;
    private final Node[] neighbors = new Node[32];
    private final int maxVisitedNodes;
    private final NodeEvaluator nodeEvaluator;
+   private static final boolean DEBUG = false;
    private final BinaryHeap openSet = new BinaryHeap();
 
    public PathFinder(NodeEvaluator var1, int var2) {
       this.nodeEvaluator = var1;
       this.maxVisitedNodes = var2;
@@ -34,93 +38,96 @@
       this.nodeEvaluator.prepare(var1, var2);
       Node var7 = this.nodeEvaluator.getStart();
       Map var8 = (Map)var3.stream().collect(Collectors.toMap((var1x) -> {
          return this.nodeEvaluator.getGoal((double)var1x.getX(), (double)var1x.getY(), (double)var1x.getZ());
       }, Function.identity()));
-      Path var9 = this.findPath(var7, var8, var4, var5, var6);
+      Path var9 = this.findPath(var1.getProfiler(), var7, var8, var4, var5, var6);
       this.nodeEvaluator.done();
       return var9;
    }
 
    @Nullable
-   private Path findPath(Node var1, Map<Target, BlockPos> var2, float var3, int var4, float var5) {
-      Set var6 = var2.keySet();
-      var1.g = 0.0F;
-      var1.h = this.getBestH(var1, var6);
-      var1.f = var1.h;
+   private Path findPath(ProfilerFiller var1, Node var2, Map<Target, BlockPos> var3, float var4, int var5, float var6) {
+      var1.push("find_path");
+      var1.markForCharting(MetricCategory.PATH_FINDING);
+      Set var7 = var3.keySet();
+      var2.g = 0.0F;
+      var2.h = this.getBestH(var2, var7);
+      var2.f = var2.h;
       this.openSet.clear();
-      this.openSet.insert(var1);
-      ImmutableSet var7 = ImmutableSet.of();
-      int var8 = 0;
-      HashSet var9 = Sets.newHashSetWithExpectedSize(var6.size());
-      int var10 = (int)((float)this.maxVisitedNodes * var5);
+      this.openSet.insert(var2);
+      ImmutableSet var8 = ImmutableSet.of();
+      int var9 = 0;
+      HashSet var10 = Sets.newHashSetWithExpectedSize(var7.size());
+      int var11 = (int)((float)this.maxVisitedNodes * var6);
 
       while(!this.openSet.isEmpty()) {
-         ++var8;
-         if (var8 >= var10) {
+         ++var9;
+         if (var9 >= var11) {
             break;
          }
 
-         Node var11 = this.openSet.pop();
-         var11.closed = true;
-         Iterator var12 = var6.iterator();
+         Node var12 = this.openSet.pop();
+         var12.closed = true;
+         Iterator var13 = var7.iterator();
 
-         while(var12.hasNext()) {
-            Target var13 = (Target)var12.next();
-            if (var11.distanceManhattan((Node)var13) <= (float)var4) {
-               var13.setReached();
-               var9.add(var13);
+         while(var13.hasNext()) {
+            Target var14 = (Target)var13.next();
+            if (var12.distanceManhattan((Node)var14) <= (float)var5) {
+               var14.setReached();
+               var10.add(var14);
             }
          }
 
-         if (!var9.isEmpty()) {
+         if (!var10.isEmpty()) {
             break;
          }
 
-         if (var11.distanceTo(var1) < var3) {
-            int var18 = this.nodeEvaluator.getNeighbors(this.neighbors, var11);
+         if (var12.distanceTo(var2) < var4) {
+            int var19 = this.nodeEvaluator.getNeighbors(this.neighbors, var12);
 
-            for(int var20 = 0; var20 < var18; ++var20) {
-               Node var14 = this.neighbors[var20];
-               float var15 = var11.distanceTo(var14);
-               var14.walkedDistance = var11.walkedDistance + var15;
-               float var16 = var11.g + var15 + var14.costMalus;
-               if (var14.walkedDistance < var3 && (!var14.inOpenSet() || var16 < var14.g)) {
-                  var14.cameFrom = var11;
-                  var14.g = var16;
-                  var14.h = this.getBestH(var14, var6) * 1.5F;
-                  if (var14.inOpenSet()) {
-                     this.openSet.changeCost(var14, var14.g + var14.h);
+            for(int var21 = 0; var21 < var19; ++var21) {
+               Node var15 = this.neighbors[var21];
+               float var16 = var12.distanceTo(var15);
+               var15.walkedDistance = var12.walkedDistance + var16;
+               float var17 = var12.g + var16 + var15.costMalus;
+               if (var15.walkedDistance < var4 && (!var15.inOpenSet() || var17 < var15.g)) {
+                  var15.cameFrom = var12;
+                  var15.g = var17;
+                  var15.h = this.getBestH(var15, var7) * 1.5F;
+                  if (var15.inOpenSet()) {
+                     this.openSet.changeCost(var15, var15.g + var15.h);
                   } else {
-                     var14.f = var14.g + var14.h;
-                     this.openSet.insert(var14);
+                     var15.f = var15.g + var15.h;
+                     this.openSet.insert(var15);
                   }
                }
             }
          }
       }
 
-      Optional var17 = !var9.isEmpty() ? var9.stream().map((var2x) -> {
-         return this.reconstructPath(var2x.getBestNode(), (BlockPos)var2.get(var2x), true);
-      }).min(Comparator.comparingInt(Path::getNodeCount)) : var6.stream().map((var2x) -> {
-         return this.reconstructPath(var2x.getBestNode(), (BlockPos)var2.get(var2x), false);
+      Optional var18 = !var10.isEmpty() ? var10.stream().map((var2x) -> {
+         return this.reconstructPath(var2x.getBestNode(), (BlockPos)var3.get(var2x), true);
+      }).min(Comparator.comparingInt(Path::getNodeCount)) : var7.stream().map((var2x) -> {
+         return this.reconstructPath(var2x.getBestNode(), (BlockPos)var3.get(var2x), false);
       }).min(Comparator.comparingDouble(Path::getDistToTarget).thenComparingInt(Path::getNodeCount));
-      if (!var17.isPresent()) {
+      var1.pop();
+      if (!var18.isPresent()) {
          return null;
       } else {
-         Path var19 = (Path)var17.get();
-         return var19;
+         Path var20 = (Path)var18.get();
+         return var20;
       }
    }
 
    private float getBestH(Node var1, Set<Target> var2) {
       float var3 = Float.MAX_VALUE;
 
       float var6;
       for(Iterator var4 = var2.iterator(); var4.hasNext(); var3 = Math.min(var6, var3)) {
          Target var5 = (Target)var4.next();
-         var6 = var1.distanceTo(var5);
+         var6 = var1.distanceTo((Node)var5);
          var5.updateBest(var6, var1);
       }
 
       return var3;
    }
