--- net/minecraft/world/level/pathfinder/Path.java
+++ net/minecraft/world/level/pathfinder/Path.java
@@ -1,17 +1,26 @@
 package net.minecraft.world.level.pathfinder;
 
+import com.google.common.collect.Lists;
+import com.google.common.collect.Sets;
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.Iterator;
 import java.util.List;
+import java.util.Set;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.util.VisibleForDebug;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.phys.Vec3;
 
 public class Path {
    private final List<Node> nodes;
    private Node[] openSet = new Node[0];
    private Node[] closedSet = new Node[0];
+   private Set<Target> targetNodes;
    private int nextNodeIndex;
    private final BlockPos target;
    private final float distToTarget;
    private final boolean reached;
 
@@ -115,10 +124,107 @@
 
    public boolean canReach() {
       return this.reached;
    }
 
+   @VisibleForDebug
+   void setDebug(Node[] var1, Node[] var2, Set<Target> var3) {
+      this.openSet = var1;
+      this.closedSet = var2;
+      this.targetNodes = var3;
+   }
+
+   @VisibleForDebug
+   public Node[] getOpenSet() {
+      return this.openSet;
+   }
+
+   @VisibleForDebug
+   public Node[] getClosedSet() {
+      return this.closedSet;
+   }
+
+   public void writeToStream(FriendlyByteBuf var1) {
+      if (this.targetNodes != null && !this.targetNodes.isEmpty()) {
+         var1.writeBoolean(this.reached);
+         var1.writeInt(this.nextNodeIndex);
+         var1.writeInt(this.targetNodes.size());
+         this.targetNodes.forEach((var1x) -> {
+            var1x.writeToStream(var1);
+         });
+         var1.writeInt(this.target.getX());
+         var1.writeInt(this.target.getY());
+         var1.writeInt(this.target.getZ());
+         var1.writeInt(this.nodes.size());
+         Iterator var2 = this.nodes.iterator();
+
+         while(var2.hasNext()) {
+            Node var3 = (Node)var2.next();
+            var3.writeToStream(var1);
+         }
+
+         var1.writeInt(this.openSet.length);
+         Node[] var6 = this.openSet;
+         int var7 = var6.length;
+
+         int var4;
+         Node var5;
+         for(var4 = 0; var4 < var7; ++var4) {
+            var5 = var6[var4];
+            var5.writeToStream(var1);
+         }
+
+         var1.writeInt(this.closedSet.length);
+         var6 = this.closedSet;
+         var7 = var6.length;
+
+         for(var4 = 0; var4 < var7; ++var4) {
+            var5 = var6[var4];
+            var5.writeToStream(var1);
+         }
+
+      }
+   }
+
+   public static Path createFromStream(FriendlyByteBuf var0) {
+      boolean var1 = var0.readBoolean();
+      int var2 = var0.readInt();
+      int var3 = var0.readInt();
+      HashSet var4 = Sets.newHashSet();
+
+      for(int var5 = 0; var5 < var3; ++var5) {
+         var4.add(Target.createFromStream(var0));
+      }
+
+      BlockPos var12 = new BlockPos(var0.readInt(), var0.readInt(), var0.readInt());
+      ArrayList var6 = Lists.newArrayList();
+      int var7 = var0.readInt();
+
+      for(int var8 = 0; var8 < var7; ++var8) {
+         var6.add(Node.createFromStream(var0));
+      }
+
+      Node[] var13 = new Node[var0.readInt()];
+
+      for(int var9 = 0; var9 < var13.length; ++var9) {
+         var13[var9] = Node.createFromStream(var0);
+      }
+
+      Node[] var14 = new Node[var0.readInt()];
+
+      for(int var10 = 0; var10 < var14.length; ++var10) {
+         var14[var10] = Node.createFromStream(var0);
+      }
+
+      Path var11 = new Path(var6, var12, var1);
+      var11.openSet = var13;
+      var11.closedSet = var14;
+      var11.targetNodes = var4;
+      var11.nextNodeIndex = var2;
+      return var11;
+   }
+
    public String toString() {
       return "Path(length=" + this.nodes.size() + ")";
    }
 
    public BlockPos getTarget() {
