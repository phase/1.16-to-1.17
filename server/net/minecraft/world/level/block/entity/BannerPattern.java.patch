--- net/minecraft/world/level/block/entity/BannerPattern.java
+++ net/minecraft/world/level/block/entity/BannerPattern.java
@@ -1,15 +1,17 @@
 package net.minecraft.world.level.block.entity;
 
 import com.google.common.collect.Lists;
+import com.mojang.datafixers.util.Pair;
 import java.util.Arrays;
 import java.util.Iterator;
 import java.util.List;
+import javax.annotation.Nullable;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
+import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.item.DyeColor;
-import org.apache.commons.lang3.tuple.Pair;
 
 public enum BannerPattern {
    BASE("base", "b", false),
    SQUARE_BOTTOM_LEFT("square_bottom_left", "bl"),
    SQUARE_BOTTOM_RIGHT("square_bottom_right", "br"),
@@ -58,11 +60,11 @@
       return var0.hasPatternItem;
    }).count();
    public static final int AVAILABLE_PATTERNS = COUNT - PATTERN_ITEM_COUNT - 1;
    private final boolean hasPatternItem;
    private final String filename;
-   private final String hashname;
+   final String hashname;
 
    private BannerPattern(String var3, String var4) {
       this(var3, var4, false);
    }
 
@@ -70,34 +72,77 @@
       this.filename = var3;
       this.hashname = var4;
       this.hasPatternItem = var5;
    }
 
+   public ResourceLocation location(boolean var1) {
+      String var2 = var1 ? "banner" : "shield";
+      return new ResourceLocation("entity/" + var2 + "/" + this.getFilename());
+   }
+
+   public String getFilename() {
+      return this.filename;
+   }
+
    public String getHashname() {
       return this.hashname;
    }
 
+   @Nullable
+   public static BannerPattern byHash(String var0) {
+      BannerPattern[] var1 = values();
+      int var2 = var1.length;
+
+      for(int var3 = 0; var3 < var2; ++var3) {
+         BannerPattern var4 = var1[var3];
+         if (var4.hashname.equals(var0)) {
+            return var4;
+         }
+      }
+
+      return null;
+   }
+
+   @Nullable
+   public static BannerPattern byFilename(String var0) {
+      BannerPattern[] var1 = values();
+      int var2 = var1.length;
+
+      for(int var3 = 0; var3 < var2; ++var3) {
+         BannerPattern var4 = var1[var3];
+         if (var4.filename.equals(var0)) {
+            return var4;
+         }
+      }
+
+      return null;
+   }
+
    public static class Builder {
       private final List<Pair<BannerPattern, DyeColor>> patterns = Lists.newArrayList();
 
       public Builder() {
       }
 
       public BannerPattern.Builder addPattern(BannerPattern var1, DyeColor var2) {
-         this.patterns.add(Pair.of(var1, var2));
+         return this.addPattern(Pair.of(var1, var2));
+      }
+
+      public BannerPattern.Builder addPattern(Pair<BannerPattern, DyeColor> var1) {
+         this.patterns.add(var1);
          return this;
       }
 
       public ListTag toListTag() {
          ListTag var1 = new ListTag();
          Iterator var2 = this.patterns.iterator();
 
          while(var2.hasNext()) {
             Pair var3 = (Pair)var2.next();
             CompoundTag var4 = new CompoundTag();
-            var4.putString("Pattern", ((BannerPattern)var3.getLeft()).hashname);
-            var4.putInt("Color", ((DyeColor)var3.getRight()).getId());
+            var4.putString("Pattern", ((BannerPattern)var3.getFirst()).hashname);
+            var4.putInt("Color", ((DyeColor)var3.getSecond()).getId());
             var1.add(var4);
          }
 
          return var1;
       }
