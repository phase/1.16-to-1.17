--- net/minecraft/world/level/block/entity/StructureBlockEntity.java
+++ net/minecraft/world/level/block/entity/StructureBlockEntity.java
@@ -1,28 +1,26 @@
 package net.minecraft.world.level.block.entity;
 
-import com.google.common.collect.Lists;
-import java.util.ArrayList;
 import java.util.Iterator;
-import java.util.List;
 import java.util.Objects;
+import java.util.Optional;
 import java.util.Random;
-import java.util.function.Predicate;
-import java.util.stream.Collectors;
+import java.util.stream.Stream;
 import javax.annotation.Nullable;
 import net.minecraft.ResourceLocationException;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
+import net.minecraft.core.Vec3i;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.protocol.game.ClientboundBlockEntityDataPacket;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.util.Mth;
 import net.minecraft.util.StringUtil;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.player.Player;
-import net.minecraft.world.level.ChunkPos;
+import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.Mirror;
 import net.minecraft.world.level.block.Rotation;
 import net.minecraft.world.level.block.StructureBlock;
 import net.minecraft.world.level.block.state.BlockState;
@@ -36,30 +34,30 @@
 public class StructureBlockEntity extends BlockEntity {
    private ResourceLocation structureName;
    private String author = "";
    private String metaData = "";
    private BlockPos structurePos = new BlockPos(0, 1, 0);
-   private BlockPos structureSize;
+   private Vec3i structureSize;
    private Mirror mirror;
    private Rotation rotation;
    private StructureMode mode;
    private boolean ignoreEntities;
    private boolean powered;
    private boolean showAir;
    private boolean showBoundingBox;
    private float integrity;
    private long seed;
 
-   public StructureBlockEntity() {
-      super(BlockEntityType.STRUCTURE_BLOCK);
-      this.structureSize = BlockPos.ZERO;
+   public StructureBlockEntity(BlockPos var1, BlockState var2) {
+      super(BlockEntityType.STRUCTURE_BLOCK, var1, var2);
+      this.structureSize = Vec3i.ZERO;
       this.mirror = Mirror.NONE;
       this.rotation = Rotation.NONE;
-      this.mode = StructureMode.DATA;
       this.ignoreEntities = true;
       this.showBoundingBox = true;
       this.integrity = 1.0F;
+      this.mode = (StructureMode)var2.getValue(StructureBlock.MODE);
    }
 
    public CompoundTag save(CompoundTag var1) {
       super.save(var1);
       var1.putString("name", this.getStructureName());
@@ -81,53 +79,53 @@
       var1.putFloat("integrity", this.integrity);
       var1.putLong("seed", this.seed);
       return var1;
    }
 
-   public void load(BlockState var1, CompoundTag var2) {
-      super.load(var1, var2);
-      this.setStructureName(var2.getString("name"));
-      this.author = var2.getString("author");
-      this.metaData = var2.getString("metadata");
-      int var3 = Mth.clamp(var2.getInt("posX"), -48, 48);
-      int var4 = Mth.clamp(var2.getInt("posY"), -48, 48);
-      int var5 = Mth.clamp(var2.getInt("posZ"), -48, 48);
-      this.structurePos = new BlockPos(var3, var4, var5);
-      int var6 = Mth.clamp(var2.getInt("sizeX"), 0, 48);
-      int var7 = Mth.clamp(var2.getInt("sizeY"), 0, 48);
-      int var8 = Mth.clamp(var2.getInt("sizeZ"), 0, 48);
-      this.structureSize = new BlockPos(var6, var7, var8);
+   public void load(CompoundTag var1) {
+      super.load(var1);
+      this.setStructureName(var1.getString("name"));
+      this.author = var1.getString("author");
+      this.metaData = var1.getString("metadata");
+      int var2 = Mth.clamp(var1.getInt("posX"), -48, 48);
+      int var3 = Mth.clamp(var1.getInt("posY"), -48, 48);
+      int var4 = Mth.clamp(var1.getInt("posZ"), -48, 48);
+      this.structurePos = new BlockPos(var2, var3, var4);
+      int var5 = Mth.clamp(var1.getInt("sizeX"), 0, 48);
+      int var6 = Mth.clamp(var1.getInt("sizeY"), 0, 48);
+      int var7 = Mth.clamp(var1.getInt("sizeZ"), 0, 48);
+      this.structureSize = new Vec3i(var5, var6, var7);
 
       try {
-         this.rotation = Rotation.valueOf(var2.getString("rotation"));
-      } catch (IllegalArgumentException var12) {
+         this.rotation = Rotation.valueOf(var1.getString("rotation"));
+      } catch (IllegalArgumentException var11) {
          this.rotation = Rotation.NONE;
       }
 
       try {
-         this.mirror = Mirror.valueOf(var2.getString("mirror"));
-      } catch (IllegalArgumentException var11) {
+         this.mirror = Mirror.valueOf(var1.getString("mirror"));
+      } catch (IllegalArgumentException var10) {
          this.mirror = Mirror.NONE;
       }
 
       try {
-         this.mode = StructureMode.valueOf(var2.getString("mode"));
-      } catch (IllegalArgumentException var10) {
+         this.mode = StructureMode.valueOf(var1.getString("mode"));
+      } catch (IllegalArgumentException var9) {
          this.mode = StructureMode.DATA;
       }
 
-      this.ignoreEntities = var2.getBoolean("ignoreEntities");
-      this.powered = var2.getBoolean("powered");
-      this.showAir = var2.getBoolean("showair");
-      this.showBoundingBox = var2.getBoolean("showboundingbox");
-      if (var2.contains("integrity")) {
-         this.integrity = var2.getFloat("integrity");
+      this.ignoreEntities = var1.getBoolean("ignoreEntities");
+      this.powered = var1.getBoolean("powered");
+      this.showAir = var1.getBoolean("showair");
+      this.showBoundingBox = var1.getBoolean("showboundingbox");
+      if (var1.contains("integrity")) {
+         this.integrity = var1.getFloat("integrity");
       } else {
          this.integrity = 1.0F;
       }
 
-      this.seed = var2.getLong("seed");
+      this.seed = var1.getLong("seed");
       this.updateBlockState();
    }
 
    private void updateBlockState() {
       if (this.level != null) {
@@ -187,15 +185,15 @@
 
    public void setStructurePos(BlockPos var1) {
       this.structurePos = var1;
    }
 
-   public BlockPos getStructureSize() {
+   public Vec3i getStructureSize() {
       return this.structureSize;
    }
 
-   public void setStructureSize(BlockPos var1) {
+   public void setStructureSize(Vec3i var1) {
       this.structureSize = var1;
    }
 
    public void setMirror(Mirror var1) {
       this.mirror = var1;
@@ -242,91 +240,61 @@
       if (this.mode != StructureMode.SAVE) {
          return false;
       } else {
          BlockPos var1 = this.getBlockPos();
          boolean var2 = true;
-         BlockPos var3 = new BlockPos(var1.getX() - 80, 0, var1.getZ() - 80);
-         BlockPos var4 = new BlockPos(var1.getX() + 80, 255, var1.getZ() + 80);
-         List var5 = this.getNearbyCornerBlocks(var3, var4);
-         List var6 = this.filterRelatedCornerBlocks(var5);
-         if (var6.size() < 1) {
-            return false;
-         } else {
-            BoundingBox var7 = this.calculateEnclosingBoundingBox(var1, var6);
-            if (var7.x1 - var7.x0 > 1 && var7.y1 - var7.y0 > 1 && var7.z1 - var7.z0 > 1) {
-               this.structurePos = new BlockPos(var7.x0 - var1.getX() + 1, var7.y0 - var1.getY() + 1, var7.z0 - var1.getZ() + 1);
-               this.structureSize = new BlockPos(var7.x1 - var7.x0 - 1, var7.y1 - var7.y0 - 1, var7.z1 - var7.z0 - 1);
+         BlockPos var3 = new BlockPos(var1.getX() - 80, this.level.getMinBuildHeight(), var1.getZ() - 80);
+         BlockPos var4 = new BlockPos(var1.getX() + 80, this.level.getMaxBuildHeight() - 1, var1.getZ() + 80);
+         Stream var5 = this.getRelatedCorners(var3, var4);
+         return calculateEnclosingBoundingBox(var1, var5).filter((var2x) -> {
+            int var3 = var2x.x1 - var2x.x0;
+            int var4 = var2x.y1 - var2x.y0;
+            int var5 = var2x.z1 - var2x.z0;
+            if (var3 > 1 && var4 > 1 && var5 > 1) {
+               this.structurePos = new BlockPos(var2x.x0 - var1.getX() + 1, var2x.y0 - var1.getY() + 1, var2x.z0 - var1.getZ() + 1);
+               this.structureSize = new Vec3i(var3 - 1, var4 - 1, var5 - 1);
                this.setChanged();
-               BlockState var8 = this.level.getBlockState(var1);
-               this.level.sendBlockUpdated(var1, var8, var8, 3);
+               BlockState var6 = this.level.getBlockState(var1);
+               this.level.sendBlockUpdated(var1, var6, var6, 3);
                return true;
             } else {
                return false;
             }
-         }
+         }).isPresent();
       }
    }
 
-   private List<StructureBlockEntity> filterRelatedCornerBlocks(List<StructureBlockEntity> var1) {
-      Predicate var2 = (var1x) -> {
+   private Stream<BlockPos> getRelatedCorners(BlockPos var1, BlockPos var2) {
+      Stream var10000 = BlockPos.betweenClosedStream(var1, var2).filter((var1x) -> {
+         return this.level.getBlockState(var1x).is(Blocks.STRUCTURE_BLOCK);
+      });
+      Level var10001 = this.level;
+      var10001.getClass();
+      return var10000.map(var10001::getBlockEntity).filter((var0) -> {
+         return var0 instanceof StructureBlockEntity;
+      }).map((var0) -> {
+         return (StructureBlockEntity)var0;
+      }).filter((var1x) -> {
          return var1x.mode == StructureMode.CORNER && Objects.equals(this.structureName, var1x.structureName);
-      };
-      return (List)var1.stream().filter(var2).collect(Collectors.toList());
+      }).map(BlockEntity::getBlockPos);
    }
 
-   private List<StructureBlockEntity> getNearbyCornerBlocks(BlockPos var1, BlockPos var2) {
-      ArrayList var3 = Lists.newArrayList();
-      Iterator var4 = BlockPos.betweenClosed(var1, var2).iterator();
-
-      while(var4.hasNext()) {
-         BlockPos var5 = (BlockPos)var4.next();
-         BlockState var6 = this.level.getBlockState(var5);
-         if (var6.is(Blocks.STRUCTURE_BLOCK)) {
-            BlockEntity var7 = this.level.getBlockEntity(var5);
-            if (var7 != null && var7 instanceof StructureBlockEntity) {
-               var3.add((StructureBlockEntity)var7);
-            }
-         }
-      }
-
-      return var3;
-   }
-
-   private BoundingBox calculateEnclosingBoundingBox(BlockPos var1, List<StructureBlockEntity> var2) {
-      BoundingBox var3;
-      if (var2.size() > 1) {
-         BlockPos var4 = ((StructureBlockEntity)var2.get(0)).getBlockPos();
-         var3 = new BoundingBox(var4, var4);
+   private static Optional<BoundingBox> calculateEnclosingBoundingBox(BlockPos var0, Stream<BlockPos> var1) {
+      Iterator var2 = var1.iterator();
+      if (!var2.hasNext()) {
+         return Optional.empty();
       } else {
-         var3 = new BoundingBox(var1, var1);
-      }
-
-      Iterator var7 = var2.iterator();
-
-      while(var7.hasNext()) {
-         StructureBlockEntity var5 = (StructureBlockEntity)var7.next();
-         BlockPos var6 = var5.getBlockPos();
-         if (var6.getX() < var3.x0) {
-            var3.x0 = var6.getX();
-         } else if (var6.getX() > var3.x1) {
-            var3.x1 = var6.getX();
+         BlockPos var3 = (BlockPos)var2.next();
+         BoundingBox var4 = new BoundingBox(var3);
+         if (var2.hasNext()) {
+            var2.forEachRemaining(var4::encapsulate);
+         } else {
+            var4.encapsulate(var0);
          }
 
-         if (var6.getY() < var3.y0) {
-            var3.y0 = var6.getY();
-         } else if (var6.getY() > var3.y1) {
-            var3.y1 = var6.getY();
-         }
-
-         if (var6.getZ() < var3.z0) {
-            var3.z0 = var6.getZ();
-         } else if (var6.getZ() > var3.z1) {
-            var3.z1 = var6.getZ();
-         }
+         return Optional.of(var4);
       }
-
-      return var3;
    }
 
    public boolean saveStructure() {
       return this.saveStructure(true);
    }
@@ -389,11 +357,11 @@
       BlockPos var4 = this.getBlockPos();
       if (!StringUtil.isNullOrEmpty(var3.getAuthor())) {
          this.author = var3.getAuthor();
       }
 
-      BlockPos var5 = var3.getSize();
+      Vec3i var5 = var3.getSize();
       boolean var6 = this.structureSize.equals(var5);
       if (!var6) {
          this.structureSize = var5;
          this.setChanged();
          BlockState var7 = var1.getBlockState(var4);
@@ -401,17 +369,17 @@
       }
 
       if (var2 && !var6) {
          return false;
       } else {
-         StructurePlaceSettings var9 = (new StructurePlaceSettings()).setMirror(this.mirror).setRotation(this.rotation).setIgnoreEntities(this.ignoreEntities).setChunkPos((ChunkPos)null);
+         StructurePlaceSettings var9 = (new StructurePlaceSettings()).setMirror(this.mirror).setRotation(this.rotation).setIgnoreEntities(this.ignoreEntities);
          if (this.integrity < 1.0F) {
             var9.clearProcessors().addProcessor(new BlockRotProcessor(Mth.clamp(this.integrity, 0.0F, 1.0F))).setRandom(createRandom(this.seed));
          }
 
          BlockPos var8 = var4.offset(this.structurePos);
-         var3.placeInWorldChunk(var1, var8, var9, createRandom(this.seed));
+         var3.placeInWorld(var1, var8, var8, var9, createRandom(this.seed), 2);
          return true;
       }
    }
 
    public void unloadStructure() {
