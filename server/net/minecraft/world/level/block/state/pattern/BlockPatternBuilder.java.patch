--- net/minecraft/world/level/block/state/pattern/BlockPatternBuilder.java
+++ net/minecraft/world/level/block/state/pattern/BlockPatternBuilder.java
@@ -39,11 +39,12 @@
             int var3 = var1.length;
 
             for(int var4 = 0; var4 < var3; ++var4) {
                String var5 = var2[var4];
                if (var5.length() != this.width) {
-                  throw new IllegalArgumentException("Not all rows in the given aisle are the correct width (expected " + this.width + ", found one with " + var5.length() + ")");
+                  int var10002 = this.width;
+                  throw new IllegalArgumentException("Not all rows in the given aisle are the correct width (expected " + var10002 + ", found one with " + var5.length() + ")");
                }
 
                char[] var6 = var5.toCharArray();
                int var7 = var6.length;
 
@@ -76,11 +77,11 @@
       return new BlockPattern(this.createPattern());
    }
 
    private Predicate<BlockInWorld>[][][] createPattern() {
       this.ensureAllCharactersMatched();
-      Predicate[][][] var1 = (Predicate[][][])((Predicate[][][])Array.newInstance(Predicate.class, new int[]{this.pattern.size(), this.height, this.width}));
+      Predicate[][][] var1 = (Predicate[][][])Array.newInstance(Predicate.class, new int[]{this.pattern.size(), this.height, this.width});
 
       for(int var2 = 0; var2 < this.pattern.size(); ++var2) {
          for(int var3 = 0; var3 < this.height; ++var3) {
             for(int var4 = 0; var4 < this.width; ++var4) {
                var1[var2][var3][var4] = (Predicate)this.lookup.get(((String[])this.pattern.get(var2))[var3].charAt(var4));
@@ -96,11 +97,11 @@
       Iterator var2 = this.lookup.entrySet().iterator();
 
       while(var2.hasNext()) {
          Entry var3 = (Entry)var2.next();
          if (var3.getValue() == null) {
-            var1.add(var3.getKey());
+            var1.add((Character)var3.getKey());
          }
       }
 
       if (!var1.isEmpty()) {
          throw new IllegalStateException("Predicates for character(s) " + COMMA_JOINED.join((Iterable)var1) + " are missing");
