--- net/minecraft/world/level/block/state/BlockBehaviour.java
+++ net/minecraft/world/level/block/state/BlockBehaviour.java
@@ -40,10 +40,13 @@
 import net.minecraft.world.level.block.Mirror;
 import net.minecraft.world.level.block.RenderShape;
 import net.minecraft.world.level.block.Rotation;
 import net.minecraft.world.level.block.SoundType;
 import net.minecraft.world.level.block.SupportType;
+import net.minecraft.world.level.block.entity.BlockEntity;
+import net.minecraft.world.level.block.entity.BlockEntityTicker;
+import net.minecraft.world.level.block.entity.BlockEntityType;
 import net.minecraft.world.level.block.state.properties.Property;
 import net.minecraft.world.level.material.Fluid;
 import net.minecraft.world.level.material.FluidState;
 import net.minecraft.world.level.material.Fluids;
 import net.minecraft.world.level.material.Material;
@@ -112,21 +115,26 @@
    public BlockState updateShape(BlockState var1, Direction var2, BlockState var3, LevelAccessor var4, BlockPos var5, BlockPos var6) {
       return var1;
    }
 
    @Deprecated
+   public boolean skipRendering(BlockState var1, BlockState var2, Direction var3) {
+      return false;
+   }
+
+   @Deprecated
    public void neighborChanged(BlockState var1, Level var2, BlockPos var3, Block var4, BlockPos var5, boolean var6) {
       DebugPackets.sendNeighborsUpdatePacket(var2, var3);
    }
 
    @Deprecated
    public void onPlace(BlockState var1, Level var2, BlockPos var3, BlockState var4, boolean var5) {
    }
 
    @Deprecated
    public void onRemove(BlockState var1, Level var2, BlockPos var3, BlockState var4, boolean var5) {
-      if (this.isEntityBlock() && !var1.is(var4.getBlock())) {
+      if (var1.hasBlockEntity() && !var1.is(var4.getBlock())) {
          var2.removeBlockEntity(var3);
       }
 
    }
 
@@ -172,10 +180,14 @@
 
    public BlockBehaviour.OffsetType getOffsetType() {
       return BlockBehaviour.OffsetType.NONE;
    }
 
+   public float getMaxHorizontalOffset() {
+      return 0.25F;
+   }
+
    @Deprecated
    public BlockState rotate(BlockState var1, Rotation var2) {
       return var1;
    }
 
@@ -184,11 +196,11 @@
       return var1;
    }
 
    @Deprecated
    public boolean canBeReplaced(BlockState var1, BlockPlaceContext var2) {
-      return this.material.isReplaceable() && (var2.getItemInHand().isEmpty() || var2.getItemInHand().getItem() != this.asItem());
+      return this.material.isReplaceable() && (var2.getItemInHand().isEmpty() || !var2.getItemInHand().is(this.asItem()));
    }
 
    @Deprecated
    public boolean canBeReplaced(BlockState var1, Fluid var2) {
       return this.material.isReplaceable() || !this.material.isSolid();
@@ -206,10 +218,15 @@
          return var6.getRandomItems(var4);
       }
    }
 
    @Deprecated
+   public long getSeed(BlockState var1, BlockPos var2) {
+      return Mth.getSeed(var2);
+   }
+
+   @Deprecated
    public VoxelShape getOcclusionShape(BlockState var1, BlockGetter var2, BlockPos var3) {
       return var1.getShape(var2, var3);
    }
 
    @Deprecated
@@ -241,10 +258,15 @@
    public boolean canSurvive(BlockState var1, LevelReader var2, BlockPos var3) {
       return true;
    }
 
    @Deprecated
+   public float getShadeBrightness(BlockState var1, BlockGetter var2, BlockPos var3) {
+      return var1.isCollisionShapeFullBlock(var2, var3) ? 0.2F : 1.0F;
+   }
+
+   @Deprecated
    public int getAnalogOutputSignal(BlockState var1, Level var2, BlockPos var3) {
       return 0;
    }
 
    @Deprecated
@@ -302,14 +324,10 @@
    @Deprecated
    public int getDirectSignal(BlockState var1, BlockGetter var2, BlockPos var3, Direction var4) {
       return 0;
    }
 
-   public final boolean isEntityBlock() {
-      return this instanceof EntityBlock;
-   }
-
    public final ResourceLocation getLootTable() {
       if (this.drops == null) {
          ResourceLocation var1 = Registry.BLOCK.getKey(this.asBlock());
          this.drops = new ResourceLocation(var1.getNamespace(), "blocks/" + var1.getPath());
       }
@@ -441,10 +459,18 @@
 
       public RenderShape getRenderShape() {
          return this.getBlock().getRenderShape(this.asState());
       }
 
+      public boolean emissiveRendering(BlockGetter var1, BlockPos var2) {
+         return this.emissiveRendering.test(this.asState(), var1, var2);
+      }
+
+      public float getShadeBrightness(BlockGetter var1, BlockPos var2) {
+         return this.getBlock().getShadeBrightness(this.asState(), var1, var2);
+      }
+
       public boolean isRedstoneConductor(BlockGetter var1, BlockPos var2) {
          return this.isRedstoneConductor.test(this.asState(), var1, var2);
       }
 
       public boolean isSignalSource() {
@@ -490,10 +516,14 @@
 
       public boolean canOcclude() {
          return this.canOcclude;
       }
 
+      public boolean skipRendering(BlockState var1, Direction var2) {
+         return this.getBlock().skipRendering(this.asState(), var1, var2);
+      }
+
       public VoxelShape getShape(BlockGetter var1, BlockPos var2) {
          return this.getShape(var1, var2, CollisionContext.empty());
       }
 
       public VoxelShape getShape(BlockGetter var1, BlockPos var2, CollisionContext var3) {
@@ -527,16 +557,21 @@
       public final boolean entityCanStandOnFace(BlockGetter var1, BlockPos var2, Entity var3, Direction var4) {
          return Block.isFaceFull(this.getCollisionShape(var1, var2, CollisionContext.of(var3)), var4);
       }
 
       public Vec3 getOffset(BlockGetter var1, BlockPos var2) {
-         BlockBehaviour.OffsetType var3 = this.getBlock().getOffsetType();
-         if (var3 == BlockBehaviour.OffsetType.NONE) {
+         Block var3 = this.getBlock();
+         BlockBehaviour.OffsetType var4 = var3.getOffsetType();
+         if (var4 == BlockBehaviour.OffsetType.NONE) {
             return Vec3.ZERO;
          } else {
-            long var4 = Mth.getSeed(var2.getX(), 0, var2.getZ());
-            return new Vec3(((double)((float)(var4 & 15L) / 15.0F) - 0.5D) * 0.5D, var3 == BlockBehaviour.OffsetType.XYZ ? ((double)((float)(var4 >> 4 & 15L) / 15.0F) - 1.0D) * 0.2D : 0.0D, ((double)((float)(var4 >> 8 & 15L) / 15.0F) - 0.5D) * 0.5D);
+            long var5 = Mth.getSeed(var2.getX(), 0, var2.getZ());
+            float var7 = var3.getMaxHorizontalOffset();
+            double var8 = Mth.clamp(((double)((float)(var5 & 15L) / 15.0F) - 0.5D) * 0.5D, (double)(-var7), (double)var7);
+            double var10 = var4 == BlockBehaviour.OffsetType.XYZ ? ((double)((float)(var5 >> 4 & 15L) / 15.0F) - 1.0D) * 0.2D : 0.0D;
+            double var12 = Mth.clamp(((double)((float)(var5 >> 8 & 15L) / 15.0F) - 0.5D) * 0.5D, (double)(-var7), (double)var7);
+            return new Vec3(var8, var10, var12);
          }
       }
 
       public boolean triggerEvent(Level var1, BlockPos var2, int var3, int var4) {
          return this.getBlock().triggerEvent(this.asState(), var1, var2, var3, var4);
@@ -556,11 +591,11 @@
          Direction[] var6 = BlockBehaviour.UPDATE_SHAPE_ORDER;
          int var7 = var6.length;
 
          for(int var8 = 0; var8 < var7; ++var8) {
             Direction var9 = var6[var8];
-            var5.setWithOffset(var2, var9);
+            var5.setWithOffset(var2, (Direction)var9);
             BlockState var10 = var1.getBlockState(var5);
             BlockState var11 = var10.updateShape(var9.getOpposite(), this.asState(), var1, var5, var2);
             Block.updateOrDestroy(var10, var11, var1, var5, var3, var4);
          }
 
@@ -612,10 +647,14 @@
 
       public boolean isSuffocating(BlockGetter var1, BlockPos var2) {
          return this.isSuffocating.test(this.asState(), var1, var2);
       }
 
+      public boolean isViewBlocking(BlockGetter var1, BlockPos var2) {
+         return this.isViewBlocking.test(this.asState(), var1, var2);
+      }
+
       public BlockState updateShape(Direction var1, BlockState var2, LevelAccessor var3, BlockPos var4, BlockPos var5) {
          return this.getBlock().updateShape(this.asState(), var1, var2, var3, var4, var5);
       }
 
       public boolean isPathfindable(BlockGetter var1, BlockPos var2, PathComputationType var3) {
@@ -642,29 +681,42 @@
       public MenuProvider getMenuProvider(Level var1, BlockPos var2) {
          return this.getBlock().getMenuProvider(this.asState(), var1, var2);
       }
 
       public boolean is(Tag<Block> var1) {
-         return this.getBlock().is(var1);
+         return var1.contains(this.getBlock());
       }
 
       public boolean is(Tag<Block> var1, Predicate<BlockBehaviour.BlockStateBase> var2) {
-         return this.getBlock().is(var1) && var2.test(this);
+         return this.is(var1) && var2.test(this);
       }
 
+      public boolean hasBlockEntity() {
+         return this.getBlock() instanceof EntityBlock;
+      }
+
+      @Nullable
+      public <T extends BlockEntity> BlockEntityTicker<T> getTicker(Level var1, BlockEntityType<T> var2) {
+         return this.getBlock() instanceof EntityBlock ? ((EntityBlock)this.getBlock()).getTicker(var1, this.asState(), var2) : null;
+      }
+
       public boolean is(Block var1) {
-         return this.getBlock().is(var1);
+         return this.getBlock() == var1;
       }
 
       public FluidState getFluidState() {
          return this.getBlock().getFluidState(this.asState());
       }
 
       public boolean isRandomlyTicking() {
          return this.getBlock().isRandomlyTicking(this.asState());
       }
 
+      public long getSeed(BlockPos var1) {
+         return this.getBlock().getSeed(this.asState(), var1);
+      }
+
       public SoundType getSoundType() {
          return this.getBlock().getSoundType(this.asState());
       }
 
       public void onProjectileHit(Level var1, BlockState var2, BlockHitResult var3, Projectile var4) {
@@ -957,10 +1009,17 @@
 
       public BlockBehaviour.Properties requiresCorrectToolForDrops() {
          this.requiresCorrectToolForDrops = true;
          return this;
       }
+
+      public BlockBehaviour.Properties color(MaterialColor var1) {
+         this.materialColor = (var1x) -> {
+            return var1;
+         };
+         return this;
+      }
    }
 
    public static enum OffsetType {
       NONE,
       XZ,
