--- net/minecraft/world/level/block/RespawnAnchorBlock.java
+++ net/minecraft/world/level/block/RespawnAnchorBlock.java
@@ -1,14 +1,16 @@
 package net.minecraft.world.level.block;
 
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.UnmodifiableIterator;
 import java.util.Optional;
+import java.util.Random;
 import java.util.stream.Stream;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.Vec3i;
+import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.tags.FluidTags;
 import net.minecraft.util.Mth;
@@ -35,10 +37,12 @@
 import net.minecraft.world.level.pathfinder.PathComputationType;
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.Vec3;
 
 public class RespawnAnchorBlock extends Block {
+   public static final int MIN_CHARGES = 0;
+   public static final int MAX_CHARGES = 4;
    public static final IntegerProperty CHARGE;
    private static final ImmutableList<Vec3i> RESPAWN_HORIZONTAL_OFFSETS;
    private static final ImmutableList<Vec3i> RESPAWN_OFFSETS;
 
    public RespawnAnchorBlock(BlockBehaviour.Properties var1) {
@@ -50,11 +54,11 @@
       ItemStack var7 = var4.getItemInHand(var5);
       if (var5 == InteractionHand.MAIN_HAND && !isRespawnFuel(var7) && isRespawnFuel(var4.getItemInHand(InteractionHand.OFF_HAND))) {
          return InteractionResult.PASS;
       } else if (isRespawnFuel(var7) && canBeCharged(var1)) {
          charge(var2, var3, var1);
-         if (!var4.abilities.instabuild) {
+         if (!var4.getAbilities().instabuild) {
             var7.shrink(1);
          }
 
          return InteractionResult.sidedSuccess(var2.isClientSide);
       } else if ((Integer)var1.getValue(CHARGE) == 0) {
@@ -66,11 +70,11 @@
 
          return InteractionResult.sidedSuccess(var2.isClientSide);
       } else {
          if (!var2.isClientSide) {
             ServerPlayer var8 = (ServerPlayer)var4;
-            if (var8.getRespawnDimension() != var2.dimension() || !var8.getRespawnPosition().equals(var3)) {
+            if (var8.getRespawnDimension() != var2.dimension() || !var3.equals(var8.getRespawnPosition())) {
                var8.setRespawnPosition(var2.dimension(), var3, 0.0F, false, true);
                var2.playSound((Player)null, (double)var3.getX() + 0.5D, (double)var3.getY() + 0.5D, (double)var3.getZ() + 0.5D, SoundEvents.RESPAWN_ANCHOR_SET_SPAWN, SoundSource.BLOCKS, 1.0F, 1.0F);
                return InteractionResult.SUCCESS;
             }
          }
@@ -78,11 +82,11 @@
          return InteractionResult.CONSUME;
       }
    }
 
    private static boolean isRespawnFuel(ItemStack var0) {
-      return var0.getItem() == Items.GLOWSTONE;
+      return var0.is(Items.GLOWSTONE);
    }
 
    private static boolean canBeCharged(BlockState var0) {
       return (Integer)var0.getValue(CHARGE) < 4;
    }
@@ -127,10 +131,24 @@
    public static void charge(Level var0, BlockPos var1, BlockState var2) {
       var0.setBlock(var1, (BlockState)var2.setValue(CHARGE, (Integer)var2.getValue(CHARGE) + 1), 3);
       var0.playSound((Player)null, (double)var1.getX() + 0.5D, (double)var1.getY() + 0.5D, (double)var1.getZ() + 0.5D, SoundEvents.RESPAWN_ANCHOR_CHARGE, SoundSource.BLOCKS, 1.0F, 1.0F);
    }
 
+   public void animateTick(BlockState var1, Level var2, BlockPos var3, Random var4) {
+      if ((Integer)var1.getValue(CHARGE) != 0) {
+         if (var4.nextInt(100) == 0) {
+            var2.playSound((Player)null, (double)var3.getX() + 0.5D, (double)var3.getY() + 0.5D, (double)var3.getZ() + 0.5D, SoundEvents.RESPAWN_ANCHOR_AMBIENT, SoundSource.BLOCKS, 1.0F, 1.0F);
+         }
+
+         double var5 = (double)var3.getX() + 0.5D + (0.5D - var4.nextDouble());
+         double var7 = (double)var3.getY() + 1.0D;
+         double var9 = (double)var3.getZ() + 0.5D + (0.5D - var4.nextDouble());
+         double var11 = (double)var4.nextFloat() * 0.04D;
+         var2.addParticle(ParticleTypes.REVERSE_PORTAL, var5, var7, var9, 0.0D, var11, 0.0D);
+      }
+   }
+
    protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> var1) {
       var1.add(CHARGE);
    }
 
    public boolean hasAnalogOutputSignal(BlockState var1) {
