--- net/minecraft/world/level/block/ComposterBlock.java
+++ net/minecraft/world/level/block/ComposterBlock.java
@@ -5,13 +5,15 @@
 import java.util.Random;
 import javax.annotation.Nullable;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
+import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
+import net.minecraft.stats.Stats;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.SimpleContainer;
 import net.minecraft.world.WorldlyContainer;
 import net.minecraft.world.WorldlyContainerHolder;
@@ -34,12 +36,16 @@
 import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
 
 public class ComposterBlock extends Block implements WorldlyContainerHolder {
+   public static final int READY = 8;
+   public static final int MIN_LEVEL = 0;
+   public static final int MAX_LEVEL = 7;
    public static final IntegerProperty LEVEL;
    public static final Object2FloatMap<ItemLike> COMPOSTABLES;
+   private static final int AABB_SIDE_THICKNESS = 2;
    private static final VoxelShape OUTER_SHAPE;
    private static final VoxelShape[] SHAPES;
 
    public static void bootStrap() {
       COMPOSTABLES.defaultReturnValue(-1.0F);
@@ -52,10 +58,11 @@
       add(0.3F, Items.OAK_LEAVES);
       add(0.3F, Items.SPRUCE_LEAVES);
       add(0.3F, Items.DARK_OAK_LEAVES);
       add(0.3F, Items.ACACIA_LEAVES);
       add(0.3F, Items.BIRCH_LEAVES);
+      add(0.3F, Items.AZALEA_LEAVES);
       add(0.3F, Items.OAK_SAPLING);
       add(0.3F, Items.SPRUCE_SAPLING);
       add(0.3F, Items.BIRCH_SAPLING);
       add(0.3F, Items.JUNGLE_SAPLING);
       add(0.3F, Items.ACACIA_SAPLING);
@@ -66,20 +73,26 @@
       add(0.3F, Items.KELP);
       add(0.3F, Items.MELON_SEEDS);
       add(0.3F, Items.PUMPKIN_SEEDS);
       add(0.3F, Items.SEAGRASS);
       add(0.3F, Items.SWEET_BERRIES);
+      add(0.3F, Items.GLOW_BERRIES);
       add(0.3F, Items.WHEAT_SEEDS);
+      add(0.3F, Items.MOSS_CARPET);
+      add(0.3F, Items.SMALL_DRIPLEAF);
+      add(0.3F, Items.HANGING_ROOTS);
       add(0.5F, Items.DRIED_KELP_BLOCK);
       add(0.5F, Items.TALL_GRASS);
+      add(0.5F, Items.AZALEA_LEAVES_FLOWERS);
       add(0.5F, Items.CACTUS);
       add(0.5F, Items.SUGAR_CANE);
       add(0.5F, Items.VINE);
       add(0.5F, Items.NETHER_SPROUTS);
       add(0.5F, Items.WEEPING_VINES);
       add(0.5F, Items.TWISTING_VINES);
       add(0.5F, Items.MELON_SLICE);
+      add(0.5F, Items.GLOW_LICHEN);
       add(0.65F, Items.SEA_PICKLE);
       add(0.65F, Items.LILY_PAD);
       add(0.65F, Items.PUMPKIN);
       add(0.65F, Items.CARVED_PUMPKIN);
       add(0.65F, Items.MELON);
@@ -115,15 +128,20 @@
       add(0.65F, Items.SUNFLOWER);
       add(0.65F, Items.LILAC);
       add(0.65F, Items.ROSE_BUSH);
       add(0.65F, Items.PEONY);
       add(0.65F, Items.LARGE_FERN);
+      add(0.65F, Items.SPORE_BLOSSOM);
+      add(0.65F, Items.AZALEA);
+      add(0.65F, Items.MOSS_BLOCK);
+      add(0.65F, Items.BIG_DRIPLEAF);
       add(0.85F, Items.HAY_BLOCK);
       add(0.85F, Items.BROWN_MUSHROOM_BLOCK);
       add(0.85F, Items.RED_MUSHROOM_BLOCK);
       add(0.85F, Items.NETHER_WART_BLOCK);
       add(0.85F, Items.WARPED_WART_BLOCK);
+      add(0.85F, Items.FLOWERING_AZALEA);
       add(0.85F, Items.BREAD);
       add(0.85F, Items.BAKED_POTATO);
       add(0.85F, Items.COOKIE);
       add(1.0F, Items.CAKE);
       add(1.0F, Items.PUMPKIN_PIE);
@@ -136,10 +154,27 @@
    public ComposterBlock(BlockBehaviour.Properties var1) {
       super(var1);
       this.registerDefaultState((BlockState)((BlockState)this.stateDefinition.any()).setValue(LEVEL, 0));
    }
 
+   public static void handleFill(Level var0, BlockPos var1, boolean var2) {
+      BlockState var3 = var0.getBlockState(var1);
+      var0.playLocalSound((double)var1.getX(), (double)var1.getY(), (double)var1.getZ(), var2 ? SoundEvents.COMPOSTER_FILL_SUCCESS : SoundEvents.COMPOSTER_FILL, SoundSource.BLOCKS, 1.0F, 1.0F, false);
+      double var4 = var3.getShape(var0, var1).max(Direction.Axis.Y, 0.5D, 0.5D) + 0.03125D;
+      double var6 = 0.13124999403953552D;
+      double var8 = 0.737500011920929D;
+      Random var10 = var0.getRandom();
+
+      for(int var11 = 0; var11 < 10; ++var11) {
+         double var12 = var10.nextGaussian() * 0.02D;
+         double var14 = var10.nextGaussian() * 0.02D;
+         double var16 = var10.nextGaussian() * 0.02D;
+         var0.addParticle(ParticleTypes.COMPOSTER, (double)var1.getX() + 0.13124999403953552D + 0.737500011920929D * (double)var10.nextFloat(), (double)var1.getY() + var4 + (double)var10.nextFloat() * (1.0D - var4), (double)var1.getZ() + 0.13124999403953552D + 0.737500011920929D * (double)var10.nextFloat(), var12, var14, var16);
+      }
+
+   }
+
    public VoxelShape getShape(BlockState var1, BlockGetter var2, BlockPos var3, CollisionContext var4) {
       return SHAPES[(Integer)var1.getValue(LEVEL)];
    }
 
    public VoxelShape getInteractionShape(BlockState var1, BlockGetter var2, BlockPos var3) {
@@ -162,11 +197,12 @@
       ItemStack var8 = var4.getItemInHand(var5);
       if (var7 < 8 && COMPOSTABLES.containsKey(var8.getItem())) {
          if (var7 < 7 && !var2.isClientSide) {
             BlockState var9 = addItem(var1, var2, var3, var8);
             var2.levelEvent(1500, var3, var1 != var9 ? 1 : 0);
-            if (!var4.abilities.instabuild) {
+            var4.awardStat(Stats.ITEM_USED.get(var8.getItem()));
+            if (!var4.getAbilities().instabuild) {
                var8.shrink(1);
             }
          }
 
          return InteractionResult.sidedSuccess(var2.isClientSide);
@@ -203,17 +239,17 @@
       BlockState var11 = empty(var0, var1, var2);
       var1.playSound((Player)null, (BlockPos)var2, SoundEvents.COMPOSTER_EMPTY, SoundSource.BLOCKS, 1.0F, 1.0F);
       return var11;
    }
 
-   private static BlockState empty(BlockState var0, LevelAccessor var1, BlockPos var2) {
+   static BlockState empty(BlockState var0, LevelAccessor var1, BlockPos var2) {
       BlockState var3 = (BlockState)var0.setValue(LEVEL, 0);
       var1.setBlock(var2, var3, 3);
       return var3;
    }
 
-   private static BlockState addItem(BlockState var0, LevelAccessor var1, BlockPos var2, ItemStack var3) {
+   static BlockState addItem(BlockState var0, LevelAccessor var1, BlockPos var2, ItemStack var3) {
       int var4 = (Integer)var0.getValue(LEVEL);
       float var5 = COMPOSTABLES.getFloat(var3.getItem());
       if ((var4 != 0 || var5 <= 0.0F) && var1.getRandom().nextDouble() >= (double)var5) {
          return var0;
       } else {
@@ -272,87 +308,87 @@
 
          var0[8] = var0[7];
       });
    }
 
-   static class InputContainer extends SimpleContainer implements WorldlyContainer {
+   private static class OutputContainer extends SimpleContainer implements WorldlyContainer {
       private final BlockState state;
       private final LevelAccessor level;
       private final BlockPos pos;
       private boolean changed;
 
-      public InputContainer(BlockState var1, LevelAccessor var2, BlockPos var3) {
-         super(1);
+      public OutputContainer(BlockState var1, LevelAccessor var2, BlockPos var3, ItemStack var4) {
+         super(var4);
          this.state = var1;
          this.level = var2;
          this.pos = var3;
       }
 
       public int getMaxStackSize() {
          return 1;
       }
 
       public int[] getSlotsForFace(Direction var1) {
-         return var1 == Direction.UP ? new int[]{0} : new int[0];
+         return var1 == Direction.DOWN ? new int[]{0} : new int[0];
       }
 
       public boolean canPlaceItemThroughFace(int var1, ItemStack var2, @Nullable Direction var3) {
-         return !this.changed && var3 == Direction.UP && ComposterBlock.COMPOSTABLES.containsKey(var2.getItem());
+         return false;
       }
 
       public boolean canTakeItemThroughFace(int var1, ItemStack var2, Direction var3) {
-         return false;
+         return !this.changed && var3 == Direction.DOWN && var2.is(Items.BONE_MEAL);
       }
 
       public void setChanged() {
-         ItemStack var1 = this.getItem(0);
-         if (!var1.isEmpty()) {
-            this.changed = true;
-            BlockState var2 = ComposterBlock.addItem(this.state, this.level, this.pos, var1);
-            this.level.levelEvent(1500, this.pos, var2 != this.state ? 1 : 0);
-            this.removeItemNoUpdate(0);
-         }
-
+         ComposterBlock.empty(this.state, this.level, this.pos);
+         this.changed = true;
       }
    }
 
-   static class OutputContainer extends SimpleContainer implements WorldlyContainer {
+   static class InputContainer extends SimpleContainer implements WorldlyContainer {
       private final BlockState state;
       private final LevelAccessor level;
       private final BlockPos pos;
       private boolean changed;
 
-      public OutputContainer(BlockState var1, LevelAccessor var2, BlockPos var3, ItemStack var4) {
-         super(var4);
+      public InputContainer(BlockState var1, LevelAccessor var2, BlockPos var3) {
+         super(1);
          this.state = var1;
          this.level = var2;
          this.pos = var3;
       }
 
       public int getMaxStackSize() {
          return 1;
       }
 
       public int[] getSlotsForFace(Direction var1) {
-         return var1 == Direction.DOWN ? new int[]{0} : new int[0];
+         return var1 == Direction.UP ? new int[]{0} : new int[0];
       }
 
       public boolean canPlaceItemThroughFace(int var1, ItemStack var2, @Nullable Direction var3) {
-         return false;
+         return !this.changed && var3 == Direction.UP && ComposterBlock.COMPOSTABLES.containsKey(var2.getItem());
       }
 
       public boolean canTakeItemThroughFace(int var1, ItemStack var2, Direction var3) {
-         return !this.changed && var3 == Direction.DOWN && var2.getItem() == Items.BONE_MEAL;
+         return false;
       }
 
       public void setChanged() {
-         ComposterBlock.empty(this.state, this.level, this.pos);
-         this.changed = true;
+         ItemStack var1 = this.getItem(0);
+         if (!var1.isEmpty()) {
+            this.changed = true;
+            BlockState var2 = ComposterBlock.addItem(this.state, this.level, this.pos, var1);
+            this.level.levelEvent(1500, this.pos, var2 != this.state ? 1 : 0);
+            this.removeItemNoUpdate(0);
+         }
+
       }
    }
 
-   static class EmptyContainer extends SimpleContainer implements WorldlyContainer {
+   private static class EmptyContainer extends SimpleContainer implements WorldlyContainer {
       public EmptyContainer() {
          super(0);
       }
 
       public int[] getSlotsForFace(Direction var1) {
