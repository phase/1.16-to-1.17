--- net/minecraft/world/level/block/piston/MovingPistonBlock.java
+++ net/minecraft/world/level/block/piston/MovingPistonBlock.java
@@ -15,10 +15,12 @@
 import net.minecraft.world.level.block.BaseEntityBlock;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Mirror;
 import net.minecraft.world.level.block.Rotation;
 import net.minecraft.world.level.block.entity.BlockEntity;
+import net.minecraft.world.level.block.entity.BlockEntityTicker;
+import net.minecraft.world.level.block.entity.BlockEntityType;
 import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.StateDefinition;
 import net.minecraft.world.level.block.state.properties.DirectionProperty;
 import net.minecraft.world.level.block.state.properties.EnumProperty;
@@ -40,18 +42,23 @@
       super(var1);
       this.registerDefaultState((BlockState)((BlockState)((BlockState)this.stateDefinition.any()).setValue(FACING, Direction.NORTH)).setValue(TYPE, PistonType.DEFAULT));
    }
 
    @Nullable
-   public BlockEntity newBlockEntity(BlockGetter var1) {
+   public BlockEntity newBlockEntity(BlockPos var1, BlockState var2) {
       return null;
    }
 
-   public static BlockEntity newMovingBlockEntity(BlockState var0, Direction var1, boolean var2, boolean var3) {
-      return new PistonMovingBlockEntity(var0, var1, var2, var3);
+   public static BlockEntity newMovingBlockEntity(BlockPos var0, BlockState var1, BlockState var2, Direction var3, boolean var4, boolean var5) {
+      return new PistonMovingBlockEntity(var0, var1, var2, var3, var4, var5);
    }
 
+   @Nullable
+   public <T extends BlockEntity> BlockEntityTicker<T> getTicker(Level var1, BlockState var2, BlockEntityType<T> var3) {
+      return createTickerHelper(var3, BlockEntityType.PISTON, PistonMovingBlockEntity::tick);
+   }
+
    public void onRemove(BlockState var1, Level var2, BlockPos var3, BlockState var4, boolean var5) {
       if (!var1.is(var4.getBlock())) {
          BlockEntity var6 = var2.getBlockEntity(var3);
          if (var6 instanceof PistonMovingBlockEntity) {
             ((PistonMovingBlockEntity)var6).finalTick();
@@ -96,10 +103,14 @@
    private PistonMovingBlockEntity getBlockEntity(BlockGetter var1, BlockPos var2) {
       BlockEntity var3 = var1.getBlockEntity(var2);
       return var3 instanceof PistonMovingBlockEntity ? (PistonMovingBlockEntity)var3 : null;
    }
 
+   public ItemStack getCloneItemStack(BlockGetter var1, BlockPos var2, BlockState var3) {
+      return ItemStack.EMPTY;
+   }
+
    public BlockState rotate(BlockState var1, Rotation var2) {
       return (BlockState)var1.setValue(FACING, var2.rotate((Direction)var1.getValue(FACING)));
    }
 
    public BlockState mirror(BlockState var1, Mirror var2) {
