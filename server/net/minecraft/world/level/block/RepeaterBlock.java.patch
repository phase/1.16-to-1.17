--- net/minecraft/world/level/block/RepeaterBlock.java
+++ net/minecraft/world/level/block/RepeaterBlock.java
@@ -1,9 +1,11 @@
 package net.minecraft.world.level.block;
 
+import java.util.Random;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
+import net.minecraft.core.particles.DustParticleOptions;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.context.BlockPlaceContext;
 import net.minecraft.world.level.Level;
@@ -25,11 +27,11 @@
       super(var1);
       this.registerDefaultState((BlockState)((BlockState)((BlockState)((BlockState)((BlockState)this.stateDefinition.any()).setValue(FACING, Direction.NORTH)).setValue(DELAY, 1)).setValue(LOCKED, false)).setValue(POWERED, false));
    }
 
    public InteractionResult use(BlockState var1, Level var2, BlockPos var3, Player var4, InteractionHand var5, BlockHitResult var6) {
-      if (!var4.abilities.mayBuild) {
+      if (!var4.getAbilities().mayBuild) {
          return InteractionResult.PASS;
       } else {
          var2.setBlock(var3, (BlockState)var1.cycle(DELAY), 3);
          return InteractionResult.sidedSuccess(var2.isClientSide);
       }
@@ -54,10 +56,28 @@
 
    protected boolean isAlternateInput(BlockState var1) {
       return isDiode(var1);
    }
 
+   public void animateTick(BlockState var1, Level var2, BlockPos var3, Random var4) {
+      if ((Boolean)var1.getValue(POWERED)) {
+         Direction var5 = (Direction)var1.getValue(FACING);
+         double var6 = (double)var3.getX() + 0.5D + (var4.nextDouble() - 0.5D) * 0.2D;
+         double var8 = (double)var3.getY() + 0.4D + (var4.nextDouble() - 0.5D) * 0.2D;
+         double var10 = (double)var3.getZ() + 0.5D + (var4.nextDouble() - 0.5D) * 0.2D;
+         float var12 = -5.0F;
+         if (var4.nextBoolean()) {
+            var12 = (float)((Integer)var1.getValue(DELAY) * 2 - 1);
+         }
+
+         var12 /= 16.0F;
+         double var13 = (double)(var12 * (float)var5.getStepX());
+         double var15 = (double)(var12 * (float)var5.getStepZ());
+         var2.addParticle(DustParticleOptions.REDSTONE, var6 + var13, var8, var10 + var15, 0.0D, 0.0D, 0.0D);
+      }
+   }
+
    protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> var1) {
       var1.add(FACING, DELAY, LOCKED, POWERED);
    }
 
    static {
