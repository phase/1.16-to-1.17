--- net/minecraft/world/level/block/BeehiveBlock.java
+++ net/minecraft/world/level/block/BeehiveBlock.java
@@ -6,14 +6,17 @@
 import javax.annotation.Nullable;
 import net.minecraft.Util;
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
+import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
+import net.minecraft.tags.BlockTags;
+import net.minecraft.util.Mth;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.animal.Bee;
@@ -27,31 +30,36 @@
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.context.BlockPlaceContext;
 import net.minecraft.world.item.enchantment.EnchantmentHelper;
 import net.minecraft.world.item.enchantment.Enchantments;
-import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.block.entity.BeehiveBlockEntity;
 import net.minecraft.world.level.block.entity.BlockEntity;
+import net.minecraft.world.level.block.entity.BlockEntityTicker;
+import net.minecraft.world.level.block.entity.BlockEntityType;
 import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.StateDefinition;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.block.state.properties.DirectionProperty;
 import net.minecraft.world.level.block.state.properties.IntegerProperty;
+import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.storage.loot.LootContext;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParams;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.BlockHitResult;
+import net.minecraft.world.phys.shapes.VoxelShape;
 
 public class BeehiveBlock extends BaseEntityBlock {
    private static final Direction[] SPAWN_DIRECTIONS;
    public static final DirectionProperty FACING;
    public static final IntegerProperty HONEY_LEVEL;
+   public static final int MAX_HONEY_LEVELS = 5;
+   private static final int SHEARED_HONEYCOMB_COUNT = 3;
 
    public BeehiveBlock(BlockBehaviour.Properties var1) {
       super(var1);
       this.registerDefaultState((BlockState)((BlockState)((BlockState)this.stateDefinition.any()).setValue(HONEY_LEVEL, 0)).setValue(FACING, Direction.NORTH));
    }
@@ -72,11 +80,11 @@
             var7.emptyAllLivingFromHive(var2, var4, BeehiveBlockEntity.BeeReleaseStatus.EMERGENCY);
             var1.updateNeighbourForOutputSignal(var3, this);
             this.angerNearbyBees(var1, var3);
          }
 
-         CriteriaTriggers.BEE_NEST_DESTROYED.trigger((ServerPlayer)var2, var4.getBlock(), var6, var7.getOccupantCount());
+         CriteriaTriggers.BEE_NEST_DESTROYED.trigger((ServerPlayer)var2, var4, var6, var7.getOccupantCount());
       }
 
    }
 
    private void angerNearbyBees(Level var1, BlockPos var2) {
@@ -103,27 +111,29 @@
    public InteractionResult use(BlockState var1, Level var2, BlockPos var3, Player var4, InteractionHand var5, BlockHitResult var6) {
       ItemStack var7 = var4.getItemInHand(var5);
       int var8 = (Integer)var1.getValue(HONEY_LEVEL);
       boolean var9 = false;
       if (var8 >= 5) {
-         if (var7.getItem() == Items.SHEARS) {
+         if (var7.is(Items.SHEARS)) {
             var2.playSound(var4, var4.getX(), var4.getY(), var4.getZ(), SoundEvents.BEEHIVE_SHEAR, SoundSource.NEUTRAL, 1.0F, 1.0F);
             dropHoneycomb(var2, var3);
             var7.hurtAndBreak(1, var4, (var1x) -> {
                var1x.broadcastBreakEvent(var5);
             });
             var9 = true;
-         } else if (var7.getItem() == Items.GLASS_BOTTLE) {
+            var2.gameEvent(var4, GameEvent.SHEAR, var3);
+         } else if (var7.is(Items.GLASS_BOTTLE)) {
             var7.shrink(1);
             var2.playSound(var4, var4.getX(), var4.getY(), var4.getZ(), SoundEvents.BOTTLE_FILL, SoundSource.NEUTRAL, 1.0F, 1.0F);
             if (var7.isEmpty()) {
                var4.setItemInHand(var5, new ItemStack(Items.HONEY_BOTTLE));
-            } else if (!var4.inventory.add(new ItemStack(Items.HONEY_BOTTLE))) {
+            } else if (!var4.getInventory().add(new ItemStack(Items.HONEY_BOTTLE))) {
                var4.drop(new ItemStack(Items.HONEY_BOTTLE), false);
             }
 
             var9 = true;
+            var2.gameEvent(var4, GameEvent.FLUID_PICKUP, var3);
          }
       }
 
       if (var9) {
          if (!CampfireBlock.isSmokeyPos(var2, var3)) {
@@ -164,10 +174,49 @@
 
    public void resetHoneyLevel(Level var1, BlockState var2, BlockPos var3) {
       var1.setBlock(var3, (BlockState)var2.setValue(HONEY_LEVEL, 0), 3);
    }
 
+   public void animateTick(BlockState var1, Level var2, BlockPos var3, Random var4) {
+      if ((Integer)var1.getValue(HONEY_LEVEL) >= 5) {
+         for(int var5 = 0; var5 < var4.nextInt(1) + 1; ++var5) {
+            this.trySpawnDripParticles(var2, var3, var1);
+         }
+      }
+
+   }
+
+   private void trySpawnDripParticles(Level var1, BlockPos var2, BlockState var3) {
+      if (var3.getFluidState().isEmpty() && var1.random.nextFloat() >= 0.3F) {
+         VoxelShape var4 = var3.getCollisionShape(var1, var2);
+         double var5 = var4.max(Direction.Axis.Y);
+         if (var5 >= 1.0D && !var3.is(BlockTags.IMPERMEABLE)) {
+            double var7 = var4.min(Direction.Axis.Y);
+            if (var7 > 0.0D) {
+               this.spawnParticle(var1, var2, var4, (double)var2.getY() + var7 - 0.05D);
+            } else {
+               BlockPos var9 = var2.below();
+               BlockState var10 = var1.getBlockState(var9);
+               VoxelShape var11 = var10.getCollisionShape(var1, var9);
+               double var12 = var11.max(Direction.Axis.Y);
+               if ((var12 < 1.0D || !var10.isCollisionShapeFullBlock(var1, var9)) && var10.getFluidState().isEmpty()) {
+                  this.spawnParticle(var1, var2, var4, (double)var2.getY() - 0.05D);
+               }
+            }
+         }
+
+      }
+   }
+
+   private void spawnParticle(Level var1, BlockPos var2, VoxelShape var3, double var4) {
+      this.spawnFluidParticle(var1, (double)var2.getX() + var3.min(Direction.Axis.X), (double)var2.getX() + var3.max(Direction.Axis.X), (double)var2.getZ() + var3.min(Direction.Axis.Z), (double)var2.getZ() + var3.max(Direction.Axis.Z), var4);
+   }
+
+   private void spawnFluidParticle(Level var1, double var2, double var4, double var6, double var8, double var10) {
+      var1.addParticle(ParticleTypes.DRIPPING_HONEY, Mth.lerp(var1.random.nextDouble(), var2, var4), var10, Mth.lerp(var1.random.nextDouble(), var6, var8), 0.0D, 0.0D, 0.0D);
+   }
+
    public BlockState getStateForPlacement(BlockPlaceContext var1) {
       return (BlockState)this.defaultBlockState().setValue(FACING, var1.getHorizontalDirection().getOpposite());
    }
 
    protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> var1) {
@@ -177,39 +226,42 @@
    public RenderShape getRenderShape(BlockState var1) {
       return RenderShape.MODEL;
    }
 
    @Nullable
-   public BlockEntity newBlockEntity(BlockGetter var1) {
-      return new BeehiveBlockEntity();
+   public BlockEntity newBlockEntity(BlockPos var1, BlockState var2) {
+      return new BeehiveBlockEntity(var1, var2);
    }
 
+   @Nullable
+   public <T extends BlockEntity> BlockEntityTicker<T> getTicker(Level var1, BlockState var2, BlockEntityType<T> var3) {
+      return var1.isClientSide ? null : createTickerHelper(var3, BlockEntityType.BEEHIVE, BeehiveBlockEntity::serverTick);
+   }
+
    public void playerWillDestroy(Level var1, BlockPos var2, BlockState var3, Player var4) {
       if (!var1.isClientSide && var4.isCreative() && var1.getGameRules().getBoolean(GameRules.RULE_DOBLOCKDROPS)) {
          BlockEntity var5 = var1.getBlockEntity(var2);
          if (var5 instanceof BeehiveBlockEntity) {
             BeehiveBlockEntity var6 = (BeehiveBlockEntity)var5;
             ItemStack var7 = new ItemStack(this);
             int var8 = (Integer)var3.getValue(HONEY_LEVEL);
             boolean var9 = !var6.isEmpty();
-            if (!var9 && var8 == 0) {
-               return;
-            }
+            if (var9 || var8 > 0) {
+               CompoundTag var10;
+               if (var9) {
+                  var10 = new CompoundTag();
+                  var10.put("Bees", var6.writeBees());
+                  var7.addTagElement("BlockEntityTag", var10);
+               }
 
-            CompoundTag var10;
-            if (var9) {
                var10 = new CompoundTag();
-               var10.put("Bees", var6.writeBees());
-               var7.addTagElement("BlockEntityTag", var10);
+               var10.putInt("honey_level", var8);
+               var7.addTagElement("BlockStateTag", var10);
+               ItemEntity var11 = new ItemEntity(var1, (double)var2.getX(), (double)var2.getY(), (double)var2.getZ(), var7);
+               var11.setDefaultPickUpDelay();
+               var1.addFreshEntity(var11);
             }
-
-            var10 = new CompoundTag();
-            var10.putInt("honey_level", var8);
-            var7.addTagElement("BlockStateTag", var10);
-            ItemEntity var11 = new ItemEntity(var1, (double)var2.getX(), (double)var2.getY(), (double)var2.getZ(), var7);
-            var11.setDefaultPickUpDelay();
-            var1.addFreshEntity(var11);
          }
       }
 
       super.playerWillDestroy(var1, var2, var3, var4);
    }
