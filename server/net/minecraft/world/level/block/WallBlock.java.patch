--- net/minecraft/world/level/block/WallBlock.java
+++ net/minecraft/world/level/block/WallBlock.java
@@ -4,11 +4,10 @@
 import java.util.Iterator;
 import java.util.Map;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.tags.BlockTags;
-import net.minecraft.tags.Tag;
 import net.minecraft.world.item.context.BlockPlaceContext;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.LevelReader;
@@ -35,10 +34,16 @@
    public static final EnumProperty<WallSide> SOUTH_WALL;
    public static final EnumProperty<WallSide> WEST_WALL;
    public static final BooleanProperty WATERLOGGED;
    private final Map<BlockState, VoxelShape> shapeByIndex;
    private final Map<BlockState, VoxelShape> collisionShapeByIndex;
+   private static final int WALL_WIDTH = 3;
+   private static final int WALL_HEIGHT = 14;
+   private static final int POST_WIDTH = 4;
+   private static final int POST_COVER_WIDTH = 1;
+   private static final int WALL_COVER_START = 7;
+   private static final int WALL_COVER_END = 9;
    private static final VoxelShape POST_TEST;
    private static final VoxelShape NORTH_TEST;
    private static final VoxelShape SOUTH_TEST;
    private static final VoxelShape WEST_TEST;
    private static final VoxelShape EAST_TEST;
@@ -101,12 +106,12 @@
                      if (var22) {
                         var31 = Shapes.or(var31, var11);
                      }
 
                      BlockState var32 = (BlockState)((BlockState)((BlockState)((BlockState)((BlockState)this.defaultBlockState().setValue(UP, var22)).setValue(EAST_WALL, var24)).setValue(WEST_WALL, var28)).setValue(NORTH_WALL, var26)).setValue(SOUTH_WALL, var30);
-                     var20.put(var32.setValue(WATERLOGGED, false), var31);
-                     var20.put(var32.setValue(WATERLOGGED, true), var31);
+                     var20.put((BlockState)var32.setValue(WATERLOGGED, false), var31);
+                     var20.put((BlockState)var32.setValue(WATERLOGGED, true), var31);
                   }
                }
             }
          }
       }
@@ -127,11 +132,11 @@
    }
 
    private boolean connectsTo(BlockState var1, boolean var2, Direction var3) {
       Block var4 = var1.getBlock();
       boolean var5 = var4 instanceof FenceGateBlock && FenceGateBlock.connectsToDirection(var1, var3);
-      return var1.is(BlockTags.WALLS) || !isExceptionForConnection(var4) && var2 || var4 instanceof IronBarsBlock || var5;
+      return var1.is(BlockTags.WALLS) || !isExceptionForConnection(var1) && var2 || var4 instanceof IronBarsBlock || var5;
    }
 
    public BlockState getStateForPlacement(BlockPlaceContext var1) {
       Level var2 = var1.getLevel();
       BlockPos var3 = var1.getClickedPos();
@@ -218,11 +223,11 @@
          } else {
             boolean var14 = var5 == WallSide.TALL && var6 == WallSide.TALL || var7 == WallSide.TALL && var8 == WallSide.TALL;
             if (var14) {
                return false;
             } else {
-               return var2.getBlock().is((Tag)BlockTags.WALL_POST_OVERRIDE) || isCovered(var3, POST_TEST);
+               return var2.is(BlockTags.WALL_POST_OVERRIDE) || isCovered(var3, POST_TEST);
             }
          }
       }
    }
 
@@ -251,26 +256,26 @@
    }
 
    public BlockState rotate(BlockState var1, Rotation var2) {
       switch(var2) {
       case CLOCKWISE_180:
-         return (BlockState)((BlockState)((BlockState)((BlockState)var1.setValue(NORTH_WALL, var1.getValue(SOUTH_WALL))).setValue(EAST_WALL, var1.getValue(WEST_WALL))).setValue(SOUTH_WALL, var1.getValue(NORTH_WALL))).setValue(WEST_WALL, var1.getValue(EAST_WALL));
+         return (BlockState)((BlockState)((BlockState)((BlockState)var1.setValue(NORTH_WALL, (WallSide)var1.getValue(SOUTH_WALL))).setValue(EAST_WALL, (WallSide)var1.getValue(WEST_WALL))).setValue(SOUTH_WALL, (WallSide)var1.getValue(NORTH_WALL))).setValue(WEST_WALL, (WallSide)var1.getValue(EAST_WALL));
       case COUNTERCLOCKWISE_90:
-         return (BlockState)((BlockState)((BlockState)((BlockState)var1.setValue(NORTH_WALL, var1.getValue(EAST_WALL))).setValue(EAST_WALL, var1.getValue(SOUTH_WALL))).setValue(SOUTH_WALL, var1.getValue(WEST_WALL))).setValue(WEST_WALL, var1.getValue(NORTH_WALL));
+         return (BlockState)((BlockState)((BlockState)((BlockState)var1.setValue(NORTH_WALL, (WallSide)var1.getValue(EAST_WALL))).setValue(EAST_WALL, (WallSide)var1.getValue(SOUTH_WALL))).setValue(SOUTH_WALL, (WallSide)var1.getValue(WEST_WALL))).setValue(WEST_WALL, (WallSide)var1.getValue(NORTH_WALL));
       case CLOCKWISE_90:
-         return (BlockState)((BlockState)((BlockState)((BlockState)var1.setValue(NORTH_WALL, var1.getValue(WEST_WALL))).setValue(EAST_WALL, var1.getValue(NORTH_WALL))).setValue(SOUTH_WALL, var1.getValue(EAST_WALL))).setValue(WEST_WALL, var1.getValue(SOUTH_WALL));
+         return (BlockState)((BlockState)((BlockState)((BlockState)var1.setValue(NORTH_WALL, (WallSide)var1.getValue(WEST_WALL))).setValue(EAST_WALL, (WallSide)var1.getValue(NORTH_WALL))).setValue(SOUTH_WALL, (WallSide)var1.getValue(EAST_WALL))).setValue(WEST_WALL, (WallSide)var1.getValue(SOUTH_WALL));
       default:
          return var1;
       }
    }
 
    public BlockState mirror(BlockState var1, Mirror var2) {
       switch(var2) {
       case LEFT_RIGHT:
-         return (BlockState)((BlockState)var1.setValue(NORTH_WALL, var1.getValue(SOUTH_WALL))).setValue(SOUTH_WALL, var1.getValue(NORTH_WALL));
+         return (BlockState)((BlockState)var1.setValue(NORTH_WALL, (WallSide)var1.getValue(SOUTH_WALL))).setValue(SOUTH_WALL, (WallSide)var1.getValue(NORTH_WALL));
       case FRONT_BACK:
-         return (BlockState)((BlockState)var1.setValue(EAST_WALL, var1.getValue(WEST_WALL))).setValue(WEST_WALL, var1.getValue(EAST_WALL));
+         return (BlockState)((BlockState)var1.setValue(EAST_WALL, (WallSide)var1.getValue(WEST_WALL))).setValue(WEST_WALL, (WallSide)var1.getValue(EAST_WALL));
       default:
          return super.mirror(var1, var2);
       }
    }
 
