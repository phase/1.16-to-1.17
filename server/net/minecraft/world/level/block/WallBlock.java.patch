--- net/minecraft/world/level/block/WallBlock.java
+++ net/minecraft/world/level/block/WallBlock.java
@@ -4,11 +4,10 @@
 import java.util.Iterator;
 import java.util.Map;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.tags.BlockTags;
-import net.minecraft.tags.Tag;
 import net.minecraft.world.item.context.BlockPlaceContext;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.LevelReader;
@@ -127,11 +126,11 @@
    }
 
    private boolean connectsTo(BlockState var1, boolean var2, Direction var3) {
       Block var4 = var1.getBlock();
       boolean var5 = var4 instanceof FenceGateBlock && FenceGateBlock.connectsToDirection(var1, var3);
-      return var1.is(BlockTags.WALLS) || !isExceptionForConnection(var4) && var2 || var4 instanceof IronBarsBlock || var5;
+      return var1.is(BlockTags.WALLS) || !isExceptionForConnection(var1) && var2 || var4 instanceof IronBarsBlock || var5;
    }
 
    public BlockState getStateForPlacement(BlockPlaceContext var1) {
       Level var2 = var1.getLevel();
       BlockPos var3 = var1.getClickedPos();
@@ -218,11 +217,11 @@
          } else {
             boolean var14 = var5 == WallSide.TALL && var6 == WallSide.TALL || var7 == WallSide.TALL && var8 == WallSide.TALL;
             if (var14) {
                return false;
             } else {
-               return var2.getBlock().is((Tag)BlockTags.WALL_POST_OVERRIDE) || isCovered(var3, POST_TEST);
+               return var2.is(BlockTags.WALL_POST_OVERRIDE) || isCovered(var3, POST_TEST);
             }
          }
       }
    }
 
