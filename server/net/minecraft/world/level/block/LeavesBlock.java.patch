--- net/minecraft/world/level/block/LeavesBlock.java
+++ net/minecraft/world/level/block/LeavesBlock.java
@@ -1,14 +1,16 @@
 package net.minecraft.world.level.block;
 
 import java.util.Random;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
+import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.tags.BlockTags;
 import net.minecraft.world.item.context.BlockPlaceContext;
 import net.minecraft.world.level.BlockGetter;
+import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.StateDefinition;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
@@ -16,12 +18,14 @@
 import net.minecraft.world.level.block.state.properties.IntegerProperty;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
 
 public class LeavesBlock extends Block {
+   public static final int DECAY_DISTANCE = 7;
    public static final IntegerProperty DISTANCE;
    public static final BooleanProperty PERSISTENT;
+   private static final int TICK_DELAY = 1;
 
    public LeavesBlock(BlockBehaviour.Properties var1) {
       super(var1);
       this.registerDefaultState((BlockState)((BlockState)((BlockState)this.stateDefinition.any()).setValue(DISTANCE, 7)).setValue(PERSISTENT, false));
    }
@@ -65,28 +69,43 @@
       Direction[] var5 = Direction.values();
       int var6 = var5.length;
 
       for(int var7 = 0; var7 < var6; ++var7) {
          Direction var8 = var5[var7];
-         var4.setWithOffset(var2, var8);
+         var4.setWithOffset(var2, (Direction)var8);
          var3 = Math.min(var3, getDistanceAt(var1.getBlockState(var4)) + 1);
          if (var3 == 1) {
             break;
          }
       }
 
       return (BlockState)var0.setValue(DISTANCE, var3);
    }
 
    private static int getDistanceAt(BlockState var0) {
-      if (BlockTags.LOGS.contains(var0.getBlock())) {
+      if (var0.is(BlockTags.LOGS)) {
          return 0;
       } else {
          return var0.getBlock() instanceof LeavesBlock ? (Integer)var0.getValue(DISTANCE) : 7;
       }
    }
 
+   public void animateTick(BlockState var1, Level var2, BlockPos var3, Random var4) {
+      if (var2.isRainingAt(var3.above())) {
+         if (var4.nextInt(15) == 1) {
+            BlockPos var5 = var3.below();
+            BlockState var6 = var2.getBlockState(var5);
+            if (!var6.canOcclude() || !var6.isFaceSturdy(var2, var5, Direction.UP)) {
+               double var7 = (double)var3.getX() + var4.nextDouble();
+               double var9 = (double)var3.getY() - 0.05D;
+               double var11 = (double)var3.getZ() + var4.nextDouble();
+               var2.addParticle(ParticleTypes.DRIPPING_WATER, var7, var9, var11, 0.0D, 0.0D, 0.0D);
+            }
+         }
+      }
+   }
+
    protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> var1) {
       var1.add(DISTANCE, PERSISTENT);
    }
 
    public BlockState getStateForPlacement(BlockPlaceContext var1) {
