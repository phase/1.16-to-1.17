--- net/minecraft/world/level/block/SignBlock.java
+++ net/minecraft/world/level/block/SignBlock.java
@@ -1,14 +1,18 @@
 package net.minecraft.world.level.block;
 
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.sounds.SoundEvents;
+import net.minecraft.sounds.SoundSource;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.DyeItem;
 import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.Items;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.entity.SignBlockEntity;
@@ -23,10 +27,11 @@
 import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.world.phys.shapes.VoxelShape;
 
 public abstract class SignBlock extends BaseEntityBlock implements SimpleWaterloggedBlock {
    public static final BooleanProperty WATERLOGGED;
+   protected static final float AABB_OFFSET = 4.0F;
    protected static final VoxelShape SHAPE;
    private final WoodType type;
 
    protected SignBlock(BlockBehaviour.Properties var1, WoodType var2) {
       super(var1);
@@ -47,41 +52,64 @@
 
    public boolean isPossibleToRespawnInThis() {
       return true;
    }
 
-   public BlockEntity newBlockEntity(BlockGetter var1) {
-      return new SignBlockEntity();
+   public BlockEntity newBlockEntity(BlockPos var1, BlockState var2) {
+      return new SignBlockEntity(var1, var2);
    }
 
    public InteractionResult use(BlockState var1, Level var2, BlockPos var3, Player var4, InteractionHand var5, BlockHitResult var6) {
       ItemStack var7 = var4.getItemInHand(var5);
-      boolean var8 = var7.getItem() instanceof DyeItem && var4.abilities.mayBuild;
+      boolean var8 = var7.getItem() instanceof DyeItem;
+      boolean var9 = var7.is(Items.GLOW_INK_SAC);
+      boolean var10 = var7.is(Items.INK_SAC);
+      boolean var11 = (var9 || var8 || var10) && var4.getAbilities().mayBuild;
       if (var2.isClientSide) {
-         return var8 ? InteractionResult.SUCCESS : InteractionResult.CONSUME;
+         return var11 ? InteractionResult.SUCCESS : InteractionResult.CONSUME;
       } else {
-         BlockEntity var9 = var2.getBlockEntity(var3);
-         if (var9 instanceof SignBlockEntity) {
-            SignBlockEntity var10 = (SignBlockEntity)var9;
-            if (var8) {
-               boolean var11 = var10.setColor(((DyeItem)var7.getItem()).getDyeColor());
-               if (var11 && !var4.isCreative()) {
-                  var7.shrink(1);
+         BlockEntity var12 = var2.getBlockEntity(var3);
+         if (!(var12 instanceof SignBlockEntity)) {
+            return InteractionResult.PASS;
+         } else {
+            SignBlockEntity var13 = (SignBlockEntity)var12;
+            boolean var14 = var13.hasGlowingText();
+            if ((!var9 || !var14) && (!var10 || var14)) {
+               if (var11) {
+                  boolean var15;
+                  if (var9) {
+                     var2.playSound((Player)null, (BlockPos)var3, SoundEvents.GLOW_INK_SAC_USE, SoundSource.BLOCKS, 1.0F, 1.0F);
+                     var15 = var13.setHasGlowingText(true);
+                  } else if (var10) {
+                     var2.playSound((Player)null, (BlockPos)var3, SoundEvents.INK_SAC_USE, SoundSource.BLOCKS, 1.0F, 1.0F);
+                     var15 = var13.setHasGlowingText(false);
+                  } else {
+                     var2.playSound((Player)null, (BlockPos)var3, SoundEvents.DYE_USE, SoundSource.BLOCKS, 1.0F, 1.0F);
+                     var15 = var13.setColor(((DyeItem)var7.getItem()).getDyeColor());
+                  }
+
+                  if (var15 && !var4.isCreative()) {
+                     var7.shrink(1);
+                  }
                }
-            }
 
-            return var10.executeClickCommands(var4) ? InteractionResult.SUCCESS : InteractionResult.PASS;
-         } else {
-            return InteractionResult.PASS;
+               return var13.executeClickCommands((ServerPlayer)var4) ? InteractionResult.SUCCESS : InteractionResult.PASS;
+            } else {
+               return InteractionResult.PASS;
+            }
          }
       }
    }
 
    public FluidState getFluidState(BlockState var1) {
       return (Boolean)var1.getValue(WATERLOGGED) ? Fluids.WATER.getSource(false) : super.getFluidState(var1);
    }
 
+   public WoodType type() {
+      return this.type;
+   }
+
    static {
       WATERLOGGED = BlockStateProperties.WATERLOGGED;
       SHAPE = Block.box(4.0D, 0.0D, 4.0D, 12.0D, 16.0D, 12.0D);
    }
 }
