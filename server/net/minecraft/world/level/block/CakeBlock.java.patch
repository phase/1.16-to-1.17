--- net/minecraft/world/level/block/CakeBlock.java
+++ net/minecraft/world/level/block/CakeBlock.java
@@ -1,13 +1,18 @@
 package net.minecraft.world.level.block;
 
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
+import net.minecraft.sounds.SoundEvents;
+import net.minecraft.sounds.SoundSource;
 import net.minecraft.stats.Stats;
+import net.minecraft.tags.ItemTags;
+import net.minecraft.tags.Tag;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.LevelReader;
@@ -21,10 +26,11 @@
 import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.world.phys.shapes.VoxelShape;
 
 public class CakeBlock extends Block {
    public static final IntegerProperty BITES;
+   public static final int FULL_CAKE_SIGNAL;
    protected static final VoxelShape[] SHAPE_BY_BITE;
 
    protected CakeBlock(BlockBehaviour.Properties var1) {
       super(var1);
       this.registerDefaultState((BlockState)((BlockState)this.stateDefinition.any()).setValue(BITES, 0));
@@ -33,35 +39,49 @@
    public VoxelShape getShape(BlockState var1, BlockGetter var2, BlockPos var3, CollisionContext var4) {
       return SHAPE_BY_BITE[(Integer)var1.getValue(BITES)];
    }
 
    public InteractionResult use(BlockState var1, Level var2, BlockPos var3, Player var4, InteractionHand var5, BlockHitResult var6) {
+      ItemStack var7 = var4.getItemInHand(var5);
+      Item var8 = var7.getItem();
+      if (var7.is((Tag)ItemTags.CANDLES) && (Integer)var1.getValue(BITES) == 0) {
+         Block var9 = Block.byItem(var8);
+         if (var9 instanceof CandleBlock) {
+            if (!var4.isCreative()) {
+               var7.shrink(1);
+            }
+
+            var2.playSound((Player)null, (BlockPos)var3, SoundEvents.CAKE_ADD_CANDLE, SoundSource.BLOCKS, 1.0F, 1.0F);
+            var2.setBlockAndUpdate(var3, CandleCakeBlock.byCandle(var9));
+            return InteractionResult.SUCCESS;
+         }
+      }
+
       if (var2.isClientSide) {
-         ItemStack var7 = var4.getItemInHand(var5);
-         if (this.eat(var2, var3, var1, var4).consumesAction()) {
+         if (eat(var2, var3, var1, var4).consumesAction()) {
             return InteractionResult.SUCCESS;
          }
 
          if (var7.isEmpty()) {
             return InteractionResult.CONSUME;
          }
       }
 
-      return this.eat(var2, var3, var1, var4);
+      return eat(var2, var3, var1, var4);
    }
 
-   private InteractionResult eat(LevelAccessor var1, BlockPos var2, BlockState var3, Player var4) {
-      if (!var4.canEat(false)) {
+   protected static InteractionResult eat(LevelAccessor var0, BlockPos var1, BlockState var2, Player var3) {
+      if (!var3.canEat(false)) {
          return InteractionResult.PASS;
       } else {
-         var4.awardStat(Stats.EAT_CAKE_SLICE);
-         var4.getFoodData().eat(2, 0.1F);
-         int var5 = (Integer)var3.getValue(BITES);
-         if (var5 < 6) {
-            var1.setBlock(var2, (BlockState)var3.setValue(BITES, var5 + 1), 3);
+         var3.awardStat(Stats.EAT_CAKE_SLICE);
+         var3.getFoodData().eat(2, 0.1F);
+         int var4 = (Integer)var2.getValue(BITES);
+         if (var4 < 6) {
+            var0.setBlock(var1, (BlockState)var2.setValue(BITES, var4 + 1), 3);
          } else {
-            var1.removeBlock(var2, false);
+            var0.removeBlock(var1, false);
          }
 
          return InteractionResult.SUCCESS;
       }
    }
@@ -77,21 +97,26 @@
    protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> var1) {
       var1.add(BITES);
    }
 
    public int getAnalogOutputSignal(BlockState var1, Level var2, BlockPos var3) {
-      return (7 - (Integer)var1.getValue(BITES)) * 2;
+      return getOutputSignal((Integer)var1.getValue(BITES));
    }
 
+   public static int getOutputSignal(int var0) {
+      return (7 - var0) * 2;
+   }
+
    public boolean hasAnalogOutputSignal(BlockState var1) {
       return true;
    }
 
    public boolean isPathfindable(BlockState var1, BlockGetter var2, BlockPos var3, PathComputationType var4) {
       return false;
    }
 
    static {
       BITES = BlockStateProperties.BITES;
+      FULL_CAKE_SIGNAL = getOutputSignal(0);
       SHAPE_BY_BITE = new VoxelShape[]{Block.box(1.0D, 0.0D, 1.0D, 15.0D, 8.0D, 15.0D), Block.box(3.0D, 0.0D, 1.0D, 15.0D, 8.0D, 15.0D), Block.box(5.0D, 0.0D, 1.0D, 15.0D, 8.0D, 15.0D), Block.box(7.0D, 0.0D, 1.0D, 15.0D, 8.0D, 15.0D), Block.box(9.0D, 0.0D, 1.0D, 15.0D, 8.0D, 15.0D), Block.box(11.0D, 0.0D, 1.0D, 15.0D, 8.0D, 15.0D), Block.box(13.0D, 0.0D, 1.0D, 15.0D, 8.0D, 15.0D)};
    }
 }
