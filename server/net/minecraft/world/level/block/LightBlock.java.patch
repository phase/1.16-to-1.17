--- net/minecraft/world/level/block/LightBlock.java
+++ net/minecraft/world/level/block/LightBlock.java
@@ -1,0 +1,98 @@
+package net.minecraft.world.level.block;
+
+import java.util.function.ToIntFunction;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.world.InteractionHand;
+import net.minecraft.world.InteractionResult;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.Items;
+import net.minecraft.world.level.BlockGetter;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.block.state.BlockBehaviour;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.StateDefinition;
+import net.minecraft.world.level.block.state.properties.BlockStateProperties;
+import net.minecraft.world.level.block.state.properties.BooleanProperty;
+import net.minecraft.world.level.block.state.properties.IntegerProperty;
+import net.minecraft.world.level.material.FluidState;
+import net.minecraft.world.level.material.Fluids;
+import net.minecraft.world.phys.BlockHitResult;
+import net.minecraft.world.phys.shapes.CollisionContext;
+import net.minecraft.world.phys.shapes.Shapes;
+import net.minecraft.world.phys.shapes.VoxelShape;
+
+public class LightBlock extends Block implements SimpleWaterloggedBlock {
+   public static final int MAX_LEVEL = 15;
+   public static final IntegerProperty LEVEL;
+   public static final BooleanProperty WATERLOGGED;
+   public static final ToIntFunction<BlockState> LIGHT_EMISSION;
+
+   public LightBlock(BlockBehaviour.Properties var1) {
+      super(var1);
+      this.registerDefaultState((BlockState)((BlockState)((BlockState)this.stateDefinition.any()).setValue(LEVEL, 15)).setValue(WATERLOGGED, false));
+   }
+
+   protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> var1) {
+      var1.add(LEVEL, WATERLOGGED);
+   }
+
+   public InteractionResult use(BlockState var1, Level var2, BlockPos var3, Player var4, InteractionHand var5, BlockHitResult var6) {
+      if (!var2.isClientSide) {
+         var2.setBlock(var3, (BlockState)var1.cycle(LEVEL), 2);
+         return InteractionResult.SUCCESS;
+      } else {
+         return InteractionResult.CONSUME;
+      }
+   }
+
+   public VoxelShape getShape(BlockState var1, BlockGetter var2, BlockPos var3, CollisionContext var4) {
+      return var4.isHoldingItem(Items.LIGHT) ? Shapes.block() : Shapes.empty();
+   }
+
+   public boolean propagatesSkylightDown(BlockState var1, BlockGetter var2, BlockPos var3) {
+      return true;
+   }
+
+   public RenderShape getRenderShape(BlockState var1) {
+      return RenderShape.INVISIBLE;
+   }
+
+   public float getShadeBrightness(BlockState var1, BlockGetter var2, BlockPos var3) {
+      return 1.0F;
+   }
+
+   public BlockState updateShape(BlockState var1, Direction var2, BlockState var3, LevelAccessor var4, BlockPos var5, BlockPos var6) {
+      if ((Boolean)var1.getValue(WATERLOGGED)) {
+         var4.getLiquidTicks().scheduleTick(var5, Fluids.WATER, Fluids.WATER.getTickDelay(var4));
+      }
+
+      return super.updateShape(var1, var2, var3, var4, var5, var6);
+   }
+
+   public FluidState getFluidState(BlockState var1) {
+      return (Boolean)var1.getValue(WATERLOGGED) ? Fluids.WATER.getSource(false) : super.getFluidState(var1);
+   }
+
+   public ItemStack getCloneItemStack(BlockGetter var1, BlockPos var2, BlockState var3) {
+      ItemStack var4 = super.getCloneItemStack(var1, var2, var3);
+      if ((Integer)var3.getValue(LEVEL) != 15) {
+         CompoundTag var5 = new CompoundTag();
+         var5.putString(LEVEL.getName(), String.valueOf(var3.getValue(LEVEL)));
+         var4.addTagElement("BlockStateTag", var5);
+      }
+
+      return var4;
+   }
+
+   static {
+      LEVEL = BlockStateProperties.LEVEL;
+      WATERLOGGED = BlockStateProperties.WATERLOGGED;
+      LIGHT_EMISSION = (var0) -> {
+         return (Integer)var0.getValue(LEVEL);
+      };
+   }
+}
