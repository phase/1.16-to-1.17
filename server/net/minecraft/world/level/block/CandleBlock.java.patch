--- net/minecraft/world/level/block/CandleBlock.java
+++ net/minecraft/world/level/block/CandleBlock.java
@@ -1,0 +1,161 @@
+package net.minecraft.world.level.block;
+
+import com.google.common.collect.ImmutableList;
+import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
+import it.unimi.dsi.fastutil.ints.Int2ObjectMaps;
+import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
+import java.util.List;
+import java.util.function.ToIntFunction;
+import net.minecraft.Util;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
+import net.minecraft.tags.BlockTags;
+import net.minecraft.world.InteractionHand;
+import net.minecraft.world.InteractionResult;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.item.context.BlockPlaceContext;
+import net.minecraft.world.level.BlockGetter;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.LevelReader;
+import net.minecraft.world.level.block.state.BlockBehaviour;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.StateDefinition;
+import net.minecraft.world.level.block.state.properties.BlockStateProperties;
+import net.minecraft.world.level.block.state.properties.BooleanProperty;
+import net.minecraft.world.level.block.state.properties.IntegerProperty;
+import net.minecraft.world.level.material.FluidState;
+import net.minecraft.world.level.material.Fluids;
+import net.minecraft.world.phys.BlockHitResult;
+import net.minecraft.world.phys.Vec3;
+import net.minecraft.world.phys.shapes.CollisionContext;
+import net.minecraft.world.phys.shapes.VoxelShape;
+
+public class CandleBlock extends AbstractCandleBlock implements SimpleWaterloggedBlock {
+   public static final int MIN_CANDLES = 1;
+   public static final int MAX_CANDLES = 4;
+   public static final IntegerProperty CANDLES;
+   public static final BooleanProperty LIT;
+   public static final BooleanProperty WATERLOGGED;
+   public static final ToIntFunction<BlockState> LIGHT_EMISSION;
+   private static final Int2ObjectMap<List<Vec3>> PARTICLE_OFFSETS;
+   private static final VoxelShape ONE_AABB;
+   private static final VoxelShape TWO_AABB;
+   private static final VoxelShape THREE_AABB;
+   private static final VoxelShape FOUR_AABB;
+
+   public CandleBlock(BlockBehaviour.Properties var1) {
+      super(var1);
+      this.registerDefaultState((BlockState)((BlockState)((BlockState)((BlockState)this.stateDefinition.any()).setValue(CANDLES, 1)).setValue(LIT, false)).setValue(WATERLOGGED, false));
+   }
+
+   public InteractionResult use(BlockState var1, Level var2, BlockPos var3, Player var4, InteractionHand var5, BlockHitResult var6) {
+      if (var4.getAbilities().mayBuild && var4.getItemInHand(var5).isEmpty() && (Boolean)var1.getValue(LIT)) {
+         extinguish(var4, var1, var2, var3);
+         return InteractionResult.sidedSuccess(var2.isClientSide);
+      } else {
+         return InteractionResult.PASS;
+      }
+   }
+
+   public boolean canBeReplaced(BlockState var1, BlockPlaceContext var2) {
+      return !var2.isSecondaryUseActive() && var2.getItemInHand().getItem() == this.asItem() && (Integer)var1.getValue(CANDLES) < 4 ? true : super.canBeReplaced(var1, var2);
+   }
+
+   public BlockState getStateForPlacement(BlockPlaceContext var1) {
+      BlockState var2 = var1.getLevel().getBlockState(var1.getClickedPos());
+      if (var2.is(this)) {
+         return (BlockState)var2.cycle(CANDLES);
+      } else {
+         FluidState var3 = var1.getLevel().getFluidState(var1.getClickedPos());
+         boolean var4 = var3.getType() == Fluids.WATER;
+         return (BlockState)super.getStateForPlacement(var1).setValue(WATERLOGGED, var4);
+      }
+   }
+
+   public BlockState updateShape(BlockState var1, Direction var2, BlockState var3, LevelAccessor var4, BlockPos var5, BlockPos var6) {
+      if ((Boolean)var1.getValue(WATERLOGGED)) {
+         var4.getLiquidTicks().scheduleTick(var5, Fluids.WATER, Fluids.WATER.getTickDelay(var4));
+      }
+
+      return super.updateShape(var1, var2, var3, var4, var5, var6);
+   }
+
+   public FluidState getFluidState(BlockState var1) {
+      return (Boolean)var1.getValue(WATERLOGGED) ? Fluids.WATER.getSource(false) : super.getFluidState(var1);
+   }
+
+   public VoxelShape getShape(BlockState var1, BlockGetter var2, BlockPos var3, CollisionContext var4) {
+      switch((Integer)var1.getValue(CANDLES)) {
+      case 1:
+      default:
+         return ONE_AABB;
+      case 2:
+         return TWO_AABB;
+      case 3:
+         return THREE_AABB;
+      case 4:
+         return FOUR_AABB;
+      }
+   }
+
+   protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> var1) {
+      var1.add(CANDLES, LIT, WATERLOGGED);
+   }
+
+   public boolean placeLiquid(LevelAccessor var1, BlockPos var2, BlockState var3, FluidState var4) {
+      if (!(Boolean)var3.getValue(WATERLOGGED) && var4.getType() == Fluids.WATER) {
+         BlockState var5 = (BlockState)var3.setValue(WATERLOGGED, true);
+         if ((Boolean)var3.getValue(LIT)) {
+            extinguish((Player)null, var5, var1, var2);
+         } else {
+            var1.setBlock(var2, var5, 3);
+         }
+
+         var1.getLiquidTicks().scheduleTick(var2, var4.getType(), var4.getType().getTickDelay(var1));
+         return true;
+      } else {
+         return false;
+      }
+   }
+
+   public static boolean canLight(BlockState var0) {
+      return var0.is(BlockTags.CANDLES, (var0x) -> {
+         return var0x.hasProperty(LIT) && var0x.hasProperty(WATERLOGGED);
+      }) && !(Boolean)var0.getValue(LIT) && !(Boolean)var0.getValue(WATERLOGGED);
+   }
+
+   protected Iterable<Vec3> getParticleOffsets(BlockState var1) {
+      return (Iterable)PARTICLE_OFFSETS.get((Integer)var1.getValue(CANDLES));
+   }
+
+   protected boolean canBeLit(BlockState var1) {
+      return !(Boolean)var1.getValue(WATERLOGGED) && super.canBeLit(var1);
+   }
+
+   public boolean canSurvive(BlockState var1, LevelReader var2, BlockPos var3) {
+      return Block.canSupportCenter(var2, var3.below(), Direction.UP);
+   }
+
+   static {
+      CANDLES = BlockStateProperties.CANDLES;
+      LIT = AbstractCandleBlock.LIT;
+      WATERLOGGED = BlockStateProperties.WATERLOGGED;
+      LIGHT_EMISSION = (var0) -> {
+         return (Boolean)var0.getValue(LIT) ? 3 * (Integer)var0.getValue(CANDLES) : 0;
+      };
+      PARTICLE_OFFSETS = (Int2ObjectMap)Util.make(() -> {
+         Int2ObjectOpenHashMap var0 = new Int2ObjectOpenHashMap();
+         var0.defaultReturnValue(ImmutableList.of());
+         var0.put(1, ImmutableList.of(new Vec3(0.5D, 0.5D, 0.5D)));
+         var0.put(2, ImmutableList.of(new Vec3(0.375D, 0.44D, 0.5D), new Vec3(0.625D, 0.5D, 0.44D)));
+         var0.put(3, ImmutableList.of(new Vec3(0.5D, 0.313D, 0.625D), new Vec3(0.375D, 0.44D, 0.5D), new Vec3(0.56D, 0.5D, 0.44D)));
+         var0.put(4, ImmutableList.of(new Vec3(0.44D, 0.313D, 0.56D), new Vec3(0.625D, 0.44D, 0.56D), new Vec3(0.375D, 0.44D, 0.375D), new Vec3(0.56D, 0.5D, 0.375D)));
+         return Int2ObjectMaps.unmodifiable(var0);
+      });
+      ONE_AABB = Block.box(7.0D, 0.0D, 7.0D, 9.0D, 6.0D, 9.0D);
+      TWO_AABB = Block.box(5.0D, 0.0D, 6.0D, 11.0D, 6.0D, 9.0D);
+      THREE_AABB = Block.box(5.0D, 0.0D, 6.0D, 10.0D, 6.0D, 11.0D);
+      FOUR_AABB = Block.box(5.0D, 0.0D, 5.0D, 11.0D, 6.0D, 10.0D);
+   }
+}
