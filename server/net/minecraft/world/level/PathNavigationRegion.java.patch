--- net/minecraft/world/level/PathNavigationRegion.java
+++ net/minecraft/world/level/PathNavigationRegion.java
@@ -2,10 +2,11 @@
 
 import java.util.function.Predicate;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
+import net.minecraft.core.SectionPos;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.border.WorldBorder;
@@ -24,14 +25,14 @@
    protected boolean allEmpty;
    protected final Level level;
 
    public PathNavigationRegion(Level var1, BlockPos var2, BlockPos var3) {
       this.level = var1;
-      this.centerX = var2.getX() >> 4;
-      this.centerZ = var2.getZ() >> 4;
-      int var4 = var3.getX() >> 4;
-      int var5 = var3.getZ() >> 4;
+      this.centerX = SectionPos.blockToSectionCoord(var2.getX());
+      this.centerZ = SectionPos.blockToSectionCoord(var2.getZ());
+      int var4 = SectionPos.blockToSectionCoord(var3.getX());
+      int var5 = SectionPos.blockToSectionCoord(var3.getZ());
       this.chunks = new ChunkAccess[var4 - this.centerX + 1][var5 - this.centerZ + 1];
       ChunkSource var6 = var1.getChunkSource();
       this.allEmpty = true;
 
       int var7;
@@ -40,12 +41,12 @@
          for(var8 = this.centerZ; var8 <= var5; ++var8) {
             this.chunks[var7 - this.centerX][var8 - this.centerZ] = var6.getChunkNow(var7, var8);
          }
       }
 
-      for(var7 = var2.getX() >> 4; var7 <= var3.getX() >> 4; ++var7) {
-         for(var8 = var2.getZ() >> 4; var8 <= var3.getZ() >> 4; ++var8) {
+      for(var7 = SectionPos.blockToSectionCoord(var2.getX()); var7 <= SectionPos.blockToSectionCoord(var3.getX()); ++var7) {
+         for(var8 = SectionPos.blockToSectionCoord(var2.getZ()); var8 <= SectionPos.blockToSectionCoord(var3.getZ()); ++var8) {
             ChunkAccess var9 = this.chunks[var7 - this.centerX][var8 - this.centerZ];
             if (var9 != null && !var9.isYSpaceEmpty(var2.getY(), var3.getY())) {
                this.allEmpty = false;
                return;
             }
@@ -53,11 +54,11 @@
       }
 
    }
 
    private ChunkAccess getChunk(BlockPos var1) {
-      return this.getChunk(var1.getX() >> 4, var1.getZ() >> 4);
+      return this.getChunk(SectionPos.blockToSectionCoord(var1.getX()), SectionPos.blockToSectionCoord(var1.getZ()));
    }
 
    private ChunkAccess getChunk(int var1, int var2) {
       int var3 = var1 - this.centerX;
       int var4 = var2 - this.centerZ;
@@ -82,11 +83,11 @@
       ChunkAccess var2 = this.getChunk(var1);
       return var2.getBlockEntity(var1);
    }
 
    public BlockState getBlockState(BlockPos var1) {
-      if (Level.isOutsideBuildHeight(var1)) {
+      if (this.isOutsideBuildHeight(var1)) {
          return Blocks.AIR.defaultBlockState();
       } else {
          ChunkAccess var2 = this.getChunk(var1);
          return var2.getBlockState(var1);
       }
@@ -99,13 +100,21 @@
    public Stream<VoxelShape> getCollisions(@Nullable Entity var1, AABB var2, Predicate<Entity> var3) {
       return this.getBlockCollisions(var1, var2);
    }
 
    public FluidState getFluidState(BlockPos var1) {
-      if (Level.isOutsideBuildHeight(var1)) {
+      if (this.isOutsideBuildHeight(var1)) {
          return Fluids.EMPTY.defaultFluidState();
       } else {
          ChunkAccess var2 = this.getChunk(var1);
          return var2.getFluidState(var1);
       }
    }
+
+   public int getMinBuildHeight() {
+      return this.level.getMinBuildHeight();
+   }
+
+   public int getHeight() {
+      return this.level.getHeight();
+   }
 }
