--- net/minecraft/world/level/storage/DimensionDataStorage.java
+++ net/minecraft/world/level/storage/DimensionDataStorage.java
@@ -1,17 +1,18 @@
 package net.minecraft.world.level.storage;
 
 import com.google.common.collect.Maps;
 import com.mojang.datafixers.DataFixer;
+import java.io.DataInput;
 import java.io.DataInputStream;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.PushbackInputStream;
-import java.util.Iterator;
 import java.util.Map;
+import java.util.function.Function;
 import java.util.function.Supplier;
 import javax.annotation.Nullable;
 import net.minecraft.SharedConstants;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtIo;
@@ -34,130 +35,106 @@
 
    private File getDataFile(String var1) {
       return new File(this.dataFolder, var1 + ".dat");
    }
 
-   public <T extends SavedData> T computeIfAbsent(Supplier<T> var1, String var2) {
-      SavedData var3 = this.get(var1, var2);
-      if (var3 != null) {
-         return var3;
-      } else {
-         SavedData var4 = (SavedData)var1.get();
-         this.set(var4);
+   public <T extends SavedData> T computeIfAbsent(Function<CompoundTag, T> var1, Supplier<T> var2, String var3) {
+      SavedData var4 = this.get(var1, var3);
+      if (var4 != null) {
          return var4;
+      } else {
+         SavedData var5 = (SavedData)var2.get();
+         this.set(var3, var5);
+         return var5;
       }
    }
 
    @Nullable
-   public <T extends SavedData> T get(Supplier<T> var1, String var2) {
+   public <T extends SavedData> T get(Function<CompoundTag, T> var1, String var2) {
       SavedData var3 = (SavedData)this.cache.get(var2);
       if (var3 == null && !this.cache.containsKey(var2)) {
          var3 = this.readSavedData(var1, var2);
          this.cache.put(var2, var3);
       }
 
       return var3;
    }
 
    @Nullable
-   private <T extends SavedData> T readSavedData(Supplier<T> var1, String var2) {
+   private <T extends SavedData> T readSavedData(Function<CompoundTag, T> var1, String var2) {
       try {
          File var3 = this.getDataFile(var2);
          if (var3.exists()) {
-            SavedData var4 = (SavedData)var1.get();
-            CompoundTag var5 = this.readTagFromDisk(var2, SharedConstants.getCurrentVersion().getWorldVersion());
-            var4.load(var5.getCompound("data"));
-            return var4;
+            CompoundTag var4 = this.readTagFromDisk(var2, SharedConstants.getCurrentVersion().getWorldVersion());
+            return (SavedData)var1.apply(var4.getCompound("data"));
          }
-      } catch (Exception var6) {
-         LOGGER.error((String)"Error loading saved data: {}", (Object)var2, (Object)var6);
+      } catch (Exception var5) {
+         LOGGER.error((String)"Error loading saved data: {}", (Object)var2, (Object)var5);
       }
 
       return null;
    }
 
-   public void set(SavedData var1) {
-      this.cache.put(var1.getId(), var1);
+   public void set(String var1, SavedData var2) {
+      this.cache.put(var1, var2);
    }
 
    public CompoundTag readTagFromDisk(String var1, int var2) throws IOException {
       File var3 = this.getDataFile(var1);
       FileInputStream var4 = new FileInputStream(var3);
-      Throwable var5 = null;
 
-      Object var10;
+      CompoundTag var8;
       try {
-         PushbackInputStream var6 = new PushbackInputStream(var4, 2);
-         Throwable var7 = null;
+         PushbackInputStream var5 = new PushbackInputStream(var4, 2);
 
          try {
-            CompoundTag var8;
-            if (this.isGzip(var6)) {
-               var8 = NbtIo.readCompressed((InputStream)var6);
+            CompoundTag var6;
+            if (this.isGzip(var5)) {
+               var6 = NbtIo.readCompressed((InputStream)var5);
             } else {
-               DataInputStream var9 = new DataInputStream(var6);
-               var10 = null;
+               DataInputStream var7 = new DataInputStream(var5);
 
                try {
-                  var8 = NbtIo.read(var9);
-               } catch (Throwable var54) {
-                  var10 = var54;
-                  throw var54;
-               } finally {
-                  if (var9 != null) {
-                     if (var10 != null) {
-                        try {
-                           var9.close();
-                        } catch (Throwable var53) {
-                           ((Throwable)var10).addSuppressed(var53);
-                        }
-                     } else {
-                        var9.close();
-                     }
+                  var6 = NbtIo.read((DataInput)var7);
+               } catch (Throwable var13) {
+                  try {
+                     var7.close();
+                  } catch (Throwable var12) {
+                     var13.addSuppressed(var12);
                   }
 
+                  throw var13;
                }
+
+               var7.close();
             }
 
-            int var60 = var8.contains("DataVersion", 99) ? var8.getInt("DataVersion") : 1343;
-            var10 = NbtUtils.update(this.fixerUpper, DataFixTypes.SAVED_DATA, var8, var60, var2);
-         } catch (Throwable var56) {
-            var7 = var56;
-            throw var56;
-         } finally {
-            if (var6 != null) {
-               if (var7 != null) {
-                  try {
-                     var6.close();
-                  } catch (Throwable var52) {
-                     var7.addSuppressed(var52);
-                  }
-               } else {
-                  var6.close();
-               }
+            int var16 = var6.contains("DataVersion", 99) ? var6.getInt("DataVersion") : 1343;
+            var8 = NbtUtils.update(this.fixerUpper, DataFixTypes.SAVED_DATA, var6, var16, var2);
+         } catch (Throwable var14) {
+            try {
+               var5.close();
+            } catch (Throwable var11) {
+               var14.addSuppressed(var11);
             }
 
+            throw var14;
          }
-      } catch (Throwable var58) {
-         var5 = var58;
-         throw var58;
-      } finally {
-         if (var4 != null) {
-            if (var5 != null) {
-               try {
-                  var4.close();
-               } catch (Throwable var51) {
-                  var5.addSuppressed(var51);
-               }
-            } else {
-               var4.close();
-            }
+
+         var5.close();
+      } catch (Throwable var15) {
+         try {
+            var4.close();
+         } catch (Throwable var10) {
+            var15.addSuppressed(var10);
          }
 
+         throw var15;
       }
 
-      return (CompoundTag)var10;
+      var4.close();
+      return var8;
    }
 
    private boolean isGzip(PushbackInputStream var1) throws IOException {
       byte[] var2 = new byte[2];
       boolean var3 = false;
@@ -175,16 +152,13 @@
 
       return var3;
    }
 
    public void save() {
-      Iterator var1 = this.cache.values().iterator();
-
-      while(var1.hasNext()) {
-         SavedData var2 = (SavedData)var1.next();
+      this.cache.forEach((var1, var2) -> {
          if (var2 != null) {
-            var2.save(this.getDataFile(var2.getId()));
+            var2.save(this.getDataFile(var1));
          }
-      }
 
+      });
    }
 }
