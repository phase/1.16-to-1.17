--- net/minecraft/world/level/storage/loot/functions/SetLoreFunction.java
+++ net/minecraft/world/level/storage/loot/functions/SetLoreFunction.java
@@ -1,9 +1,10 @@
 package net.minecraft.world.level.storage.loot.functions;
 
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSet;
+import com.google.common.collect.Lists;
 import com.google.common.collect.Streams;
 import com.google.gson.JsonArray;
 import com.google.gson.JsonDeserializationContext;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonSerializationContext;
@@ -93,10 +94,14 @@
       } else {
          return null;
       }
    }
 
+   public static SetLoreFunction.Builder setLore() {
+      return new SetLoreFunction.Builder();
+   }
+
    public static class Serializer extends LootItemConditionalFunction.Serializer<SetLoreFunction> {
       public Serializer() {
       }
 
       public void serialize(JsonObject var1, SetLoreFunction var2, JsonSerializationContext var3) {
@@ -122,6 +127,38 @@
          List var5 = (List)Streams.stream((Iterable)GsonHelper.getAsJsonArray(var1, "lore")).map(Component.Serializer::fromJson).collect(ImmutableList.toImmutableList());
          LootContext.EntityTarget var6 = (LootContext.EntityTarget)GsonHelper.getAsObject(var1, "entity", (Object)null, var2, LootContext.EntityTarget.class);
          return new SetLoreFunction(var3, var4, var5, var6);
       }
    }
+
+   public static class Builder extends LootItemConditionalFunction.Builder<SetLoreFunction.Builder> {
+      private boolean replace;
+      private LootContext.EntityTarget resolutionContext;
+      private final List<Component> lore = Lists.newArrayList();
+
+      public Builder() {
+      }
+
+      public SetLoreFunction.Builder setReplace(boolean var1) {
+         this.replace = var1;
+         return this;
+      }
+
+      public SetLoreFunction.Builder setResolutionContext(LootContext.EntityTarget var1) {
+         this.resolutionContext = var1;
+         return this;
+      }
+
+      public SetLoreFunction.Builder addLine(Component var1) {
+         this.lore.add(var1);
+         return this;
+      }
+
+      protected SetLoreFunction.Builder getThis() {
+         return this;
+      }
+
+      public LootItemFunction build() {
+         return new SetLoreFunction(this.getConditions(), this.replace, this.lore, this.resolutionContext);
+      }
+   }
 }
