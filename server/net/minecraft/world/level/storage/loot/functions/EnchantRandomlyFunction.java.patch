--- net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction.java
+++ net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction.java
@@ -31,13 +31,13 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class EnchantRandomlyFunction extends LootItemConditionalFunction {
    private static final Logger LOGGER = LogManager.getLogger();
-   private final List<Enchantment> enchantments;
+   final List<Enchantment> enchantments;
 
-   private EnchantRandomlyFunction(LootItemCondition[] var1, Collection<Enchantment> var2) {
+   EnchantRandomlyFunction(LootItemCondition[] var1, Collection<Enchantment> var2) {
       super(var1);
       this.enchantments = ImmutableList.copyOf(var2);
    }
 
    public LootItemFunctionType getType() {
@@ -46,11 +46,11 @@
 
    public ItemStack run(ItemStack var1, LootContext var2) {
       Random var4 = var2.getRandom();
       Enchantment var3;
       if (this.enchantments.isEmpty()) {
-         boolean var5 = var1.getItem() == Items.BOOK;
+         boolean var5 = var1.is(Items.BOOK);
          List var6 = (List)Registry.ENCHANTMENT.stream().filter(Enchantment::isDiscoverable).filter((var2x) -> {
             return var5 || var2x.canEnchant(var1);
          }).collect(Collectors.toList());
          if (var6.isEmpty()) {
             LOGGER.warn((String)"Couldn't find a compatible enchantment for {}", (Object)var1);
@@ -65,26 +65,50 @@
       return enchantItem(var1, var3, var4);
    }
 
    private static ItemStack enchantItem(ItemStack var0, Enchantment var1, Random var2) {
       int var3 = Mth.nextInt(var2, var1.getMinLevel(), var1.getMaxLevel());
-      if (var0.getItem() == Items.BOOK) {
+      if (var0.is(Items.BOOK)) {
          var0 = new ItemStack(Items.ENCHANTED_BOOK);
          EnchantedBookItem.addEnchantment(var0, new EnchantmentInstance(var1, var3));
       } else {
          var0.enchant(var1, var3);
       }
 
       return var0;
    }
 
+   public static EnchantRandomlyFunction.Builder randomEnchantment() {
+      return new EnchantRandomlyFunction.Builder();
+   }
+
    public static LootItemConditionalFunction.Builder<?> randomApplicableEnchantment() {
       return simpleBuilder((var0) -> {
          return new EnchantRandomlyFunction(var0, ImmutableList.of());
       });
    }
 
+   public static class Builder extends LootItemConditionalFunction.Builder<EnchantRandomlyFunction.Builder> {
+      private final Set<Enchantment> enchantments = Sets.newHashSet();
+
+      public Builder() {
+      }
+
+      protected EnchantRandomlyFunction.Builder getThis() {
+         return this;
+      }
+
+      public EnchantRandomlyFunction.Builder withEnchantment(Enchantment var1) {
+         this.enchantments.add(var1);
+         return this;
+      }
+
+      public LootItemFunction build() {
+         return new EnchantRandomlyFunction(this.getConditions(), this.enchantments);
+      }
+   }
+
    public static class Serializer extends LootItemConditionalFunction.Serializer<EnchantRandomlyFunction> {
       public Serializer() {
       }
 
       public void serialize(JsonObject var1, EnchantRandomlyFunction var2, JsonSerializationContext var3) {
@@ -125,26 +149,6 @@
          }
 
          return new EnchantRandomlyFunction(var3, var4);
       }
    }
-
-   public static class Builder extends LootItemConditionalFunction.Builder<EnchantRandomlyFunction.Builder> {
-      private final Set<Enchantment> enchantments = Sets.newHashSet();
-
-      public Builder() {
-      }
-
-      protected EnchantRandomlyFunction.Builder getThis() {
-         return this;
-      }
-
-      public EnchantRandomlyFunction.Builder withEnchantment(Enchantment var1) {
-         this.enchantments.add(var1);
-         return this;
-      }
-
-      public LootItemFunction build() {
-         return new EnchantRandomlyFunction(this.getConditions(), this.enchantments);
-      }
-   }
 }
