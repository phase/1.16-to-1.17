--- net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction.java
+++ net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction.java
@@ -46,11 +46,11 @@
 
    public ItemStack run(ItemStack var1, LootContext var2) {
       Random var4 = var2.getRandom();
       Enchantment var3;
       if (this.enchantments.isEmpty()) {
-         boolean var5 = var1.getItem() == Items.BOOK;
+         boolean var5 = var1.is(Items.BOOK);
          List var6 = (List)Registry.ENCHANTMENT.stream().filter(Enchantment::isDiscoverable).filter((var2x) -> {
             return var5 || var2x.canEnchant(var1);
          }).collect(Collectors.toList());
          if (var6.isEmpty()) {
             LOGGER.warn((String)"Couldn't find a compatible enchantment for {}", (Object)var1);
@@ -65,20 +65,24 @@
       return enchantItem(var1, var3, var4);
    }
 
    private static ItemStack enchantItem(ItemStack var0, Enchantment var1, Random var2) {
       int var3 = Mth.nextInt(var2, var1.getMinLevel(), var1.getMaxLevel());
-      if (var0.getItem() == Items.BOOK) {
+      if (var0.is(Items.BOOK)) {
          var0 = new ItemStack(Items.ENCHANTED_BOOK);
          EnchantedBookItem.addEnchantment(var0, new EnchantmentInstance(var1, var3));
       } else {
          var0.enchant(var1, var3);
       }
 
       return var0;
    }
 
+   public static EnchantRandomlyFunction.Builder randomEnchantment() {
+      return new EnchantRandomlyFunction.Builder();
+   }
+
    public static LootItemConditionalFunction.Builder<?> randomApplicableEnchantment() {
       return simpleBuilder((var0) -> {
          return new EnchantRandomlyFunction(var0, ImmutableList.of());
       });
    }
