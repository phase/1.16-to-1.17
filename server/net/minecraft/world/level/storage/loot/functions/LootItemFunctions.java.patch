--- net/minecraft/world/level/storage/loot/functions/LootItemFunctions.java
+++ net/minecraft/world/level/storage/loot/functions/LootItemFunctions.java
@@ -13,10 +13,11 @@
       return var0;
    };
    public static final LootItemFunctionType SET_COUNT = register("set_count", new SetItemCountFunction.Serializer());
    public static final LootItemFunctionType ENCHANT_WITH_LEVELS = register("enchant_with_levels", new EnchantWithLevelsFunction.Serializer());
    public static final LootItemFunctionType ENCHANT_RANDOMLY = register("enchant_randomly", new EnchantRandomlyFunction.Serializer());
+   public static final LootItemFunctionType SET_ENCHANTMENTS = register("set_enchantments", new SetEnchantmentsFunction.Serializer());
    public static final LootItemFunctionType SET_NBT = register("set_nbt", new SetNbtFunction.Serializer());
    public static final LootItemFunctionType FURNACE_SMELT = register("furnace_smelt", new SmeltItemFunction.Serializer());
    public static final LootItemFunctionType LOOTING_ENCHANT = register("looting_enchant", new LootingEnchantFunction.Serializer());
    public static final LootItemFunctionType SET_DAMAGE = register("set_damage", new SetItemDamageFunction.Serializer());
    public static final LootItemFunctionType SET_ATTRIBUTES = register("set_attributes", new SetAttributesFunction.Serializer());
@@ -31,11 +32,15 @@
    public static final LootItemFunctionType EXPLOSION_DECAY = register("explosion_decay", new ApplyExplosionDecay.Serializer());
    public static final LootItemFunctionType SET_LORE = register("set_lore", new SetLoreFunction.Serializer());
    public static final LootItemFunctionType FILL_PLAYER_HEAD = register("fill_player_head", new FillPlayerHead.Serializer());
    public static final LootItemFunctionType COPY_NBT = register("copy_nbt", new CopyNbtFunction.Serializer());
    public static final LootItemFunctionType COPY_STATE = register("copy_state", new CopyBlockState.Serializer());
+   public static final LootItemFunctionType SET_BANNER_PATTERN = register("set_banner_pattern", new SetBannerPatternFunction.Serializer());
 
+   public LootItemFunctions() {
+   }
+
    private static LootItemFunctionType register(String var0, Serializer<? extends LootItemFunction> var1) {
       return (LootItemFunctionType)Registry.register(Registry.LOOT_FUNCTION_TYPE, (ResourceLocation)(new ResourceLocation(var0)), new LootItemFunctionType(var1));
    }
 
    public static Object createGsonAdapter() {
@@ -50,11 +55,11 @@
          return var0[0];
       case 2:
          BiFunction var1 = var0[0];
          BiFunction var2 = var0[1];
          return (var2x, var3) -> {
-            return (ItemStack)var2.apply(var1.apply(var2x, var3), var3);
+            return (ItemStack)var2.apply((ItemStack)var1.apply(var2x, var3), var3);
          };
       default:
          return (var1x, var2x) -> {
             BiFunction[] var3 = var0;
             int var4 = var0.length;
