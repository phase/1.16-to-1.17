--- net/minecraft/world/level/storage/loot/functions/SetStewEffectFunction.java
+++ net/minecraft/world/level/storage/loot/functions/SetStewEffectFunction.java
@@ -1,8 +1,9 @@
 package net.minecraft.world.level.storage.loot.functions;
 
 import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Maps;
 import com.google.gson.JsonArray;
 import com.google.gson.JsonDeserializationContext;
 import com.google.gson.JsonElement;
@@ -12,41 +13,49 @@
 import com.google.gson.JsonSyntaxException;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.Map;
 import java.util.Random;
+import java.util.Set;
 import java.util.Map.Entry;
 import net.minecraft.core.Registry;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.util.GsonHelper;
 import net.minecraft.world.effect.MobEffect;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.SuspiciousStewItem;
 import net.minecraft.world.level.storage.loot.LootContext;
-import net.minecraft.world.level.storage.loot.RandomValueBounds;
+import net.minecraft.world.level.storage.loot.parameters.LootContextParam;
 import net.minecraft.world.level.storage.loot.predicates.LootItemCondition;
+import net.minecraft.world.level.storage.loot.providers.number.NumberProvider;
 
 public class SetStewEffectFunction extends LootItemConditionalFunction {
-   private final Map<MobEffect, RandomValueBounds> effectDurationMap;
+   private final Map<MobEffect, NumberProvider> effectDurationMap;
 
-   private SetStewEffectFunction(LootItemCondition[] var1, Map<MobEffect, RandomValueBounds> var2) {
+   private SetStewEffectFunction(LootItemCondition[] var1, Map<MobEffect, NumberProvider> var2) {
       super(var1);
       this.effectDurationMap = ImmutableMap.copyOf(var2);
    }
 
    public LootItemFunctionType getType() {
       return LootItemFunctions.SET_STEW_EFFECT;
    }
 
+   public Set<LootContextParam<?>> getReferencedContextParams() {
+      return (Set)this.effectDurationMap.values().stream().flatMap((var0) -> {
+         return var0.getReferencedContextParams().stream();
+      }).collect(ImmutableSet.toImmutableSet());
+   }
+
    public ItemStack run(ItemStack var1, LootContext var2) {
-      if (var1.getItem() == Items.SUSPICIOUS_STEW && !this.effectDurationMap.isEmpty()) {
+      if (var1.is(Items.SUSPICIOUS_STEW) && !this.effectDurationMap.isEmpty()) {
          Random var3 = var2.getRandom();
          int var4 = var3.nextInt(this.effectDurationMap.size());
          Entry var5 = (Entry)Iterables.get(this.effectDurationMap.entrySet(), var4);
          MobEffect var6 = (MobEffect)var5.getKey();
-         int var7 = ((RandomValueBounds)var5.getValue()).getInt(var3);
+         int var7 = ((NumberProvider)var5.getValue()).getInt(var2);
          if (!var6.isInstantenous()) {
             var7 *= 20;
          }
 
          SuspiciousStewItem.saveMobEffect(var1, var6, var7);
@@ -98,30 +107,30 @@
                JsonElement var7 = (JsonElement)var6.next();
                String var8 = GsonHelper.getAsString(var7.getAsJsonObject(), "type");
                MobEffect var9 = (MobEffect)Registry.MOB_EFFECT.getOptional(new ResourceLocation(var8)).orElseThrow(() -> {
                   return new JsonSyntaxException("Unknown mob effect '" + var8 + "'");
                });
-               RandomValueBounds var10 = (RandomValueBounds)GsonHelper.getAsObject(var7.getAsJsonObject(), "duration", var2, RandomValueBounds.class);
+               NumberProvider var10 = (NumberProvider)GsonHelper.getAsObject(var7.getAsJsonObject(), "duration", var2, NumberProvider.class);
                var4.put(var9, var10);
             }
          }
 
          return new SetStewEffectFunction(var3, var4);
       }
    }
 
    public static class Builder extends LootItemConditionalFunction.Builder<SetStewEffectFunction.Builder> {
-      private final Map<MobEffect, RandomValueBounds> effectDurationMap = Maps.newHashMap();
+      private final Map<MobEffect, NumberProvider> effectDurationMap = Maps.newHashMap();
 
       public Builder() {
       }
 
       protected SetStewEffectFunction.Builder getThis() {
          return this;
       }
 
-      public SetStewEffectFunction.Builder withEffect(MobEffect var1, RandomValueBounds var2) {
+      public SetStewEffectFunction.Builder withEffect(MobEffect var1, NumberProvider var2) {
          this.effectDurationMap.put(var1, var2);
          return this;
       }
 
       public LootItemFunction build() {
