--- net/minecraft/world/level/storage/loot/parameters/LootContextParamSet.java
+++ net/minecraft/world/level/storage/loot/parameters/LootContextParamSet.java
@@ -2,35 +2,43 @@
 
 import com.google.common.base.Joiner;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Sets;
 import java.util.Collection;
+import java.util.Iterator;
 import java.util.Set;
 import net.minecraft.world.level.storage.loot.LootContextUser;
 import net.minecraft.world.level.storage.loot.ValidationContext;
 
 public class LootContextParamSet {
    private final Set<LootContextParam<?>> required;
    private final Set<LootContextParam<?>> all;
 
-   private LootContextParamSet(Set<LootContextParam<?>> var1, Set<LootContextParam<?>> var2) {
+   LootContextParamSet(Set<LootContextParam<?>> var1, Set<LootContextParam<?>> var2) {
       this.required = ImmutableSet.copyOf((Collection)var1);
       this.all = ImmutableSet.copyOf((Collection)Sets.union(var1, var2));
    }
 
+   public boolean isAllowed(LootContextParam<?> var1) {
+      return this.all.contains(var1);
+   }
+
    public Set<LootContextParam<?>> getRequired() {
       return this.required;
    }
 
    public Set<LootContextParam<?>> getAllowed() {
       return this.all;
    }
 
    public String toString() {
-      return "[" + Joiner.on(", ").join(this.all.stream().map((var1) -> {
-         return (this.required.contains(var1) ? "!" : "") + var1.getName();
-      }).iterator()) + "]";
+      Joiner var10000 = Joiner.on(", ");
+      Iterator var10001 = this.all.stream().map((var1) -> {
+         String var10000 = this.required.contains(var1) ? "!" : "";
+         return var10000 + var1.getName();
+      }).iterator();
+      return "[" + var10000.join(var10001) + "]";
    }
 
    public void validateUser(ValidationContext var1, LootContextUser var2) {
       Set var3 = var2.getReferencedContextParams();
       Sets.SetView var4 = Sets.difference(var3, this.all);
@@ -38,10 +46,14 @@
          var1.reportProblem("Parameters " + var4 + " are not provided in this context");
       }
 
    }
 
+   public static LootContextParamSet.Builder builder() {
+      return new LootContextParamSet.Builder();
+   }
+
    public static class Builder {
       private final Set<LootContextParam<?>> required = Sets.newIdentityHashSet();
       private final Set<LootContextParam<?>> optional = Sets.newIdentityHashSet();
 
       public Builder() {
