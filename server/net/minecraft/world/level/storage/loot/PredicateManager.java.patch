--- net/minecraft/world/level/storage/loot/PredicateManager.java
+++ net/minecraft/world/level/storage/loot/PredicateManager.java
@@ -3,17 +3,19 @@
 import com.google.common.collect.ImmutableMap;
 import com.google.gson.Gson;
 import com.google.gson.JsonElement;
 import java.util.Collections;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Set;
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.packs.resources.ResourceManager;
 import net.minecraft.server.packs.resources.SimpleJsonResourceReloadListener;
 import net.minecraft.util.profiling.ProfilerFiller;
+import net.minecraft.world.level.storage.loot.parameters.LootContextParamSet;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParamSets;
 import net.minecraft.world.level.storage.loot.predicates.LootItemCondition;
 import net.minecraft.world.level.storage.loot.predicates.LootItemConditionType;
 import net.minecraft.world.level.storage.loot.predicates.LootItemConditions;
 import org.apache.logging.log4j.LogManager;
@@ -48,31 +50,33 @@
             LOGGER.error((String)"Couldn't parse loot table {}", (Object)var1x, (Object)var4x);
          }
 
       });
       ImmutableMap var5 = var4.build();
-      ValidationContext var6 = new ValidationContext(LootContextParamSets.ALL_PARAMS, var5::get, (var0) -> {
+      LootContextParamSet var10002 = LootContextParamSets.ALL_PARAMS;
+      Objects.requireNonNull(var5);
+      ValidationContext var6 = new ValidationContext(var10002, var5::get, (var0) -> {
          return null;
       });
       var5.forEach((var1x, var2x) -> {
          var2x.validate(var6.enterCondition("{" + var1x + "}", var1x));
       });
       var6.getProblems().forEach((var0, var1x) -> {
-         LOGGER.warn("Found validation problem in " + var0 + ": " + var1x);
+         LOGGER.warn((String)"Found validation problem in {}: {}", (Object)var0, (Object)var1x);
       });
       this.conditions = var5;
    }
 
    public Set<ResourceLocation> getKeys() {
       return Collections.unmodifiableSet(this.conditions.keySet());
    }
 
-   static class CompositePredicate implements LootItemCondition {
+   private static class CompositePredicate implements LootItemCondition {
       private final LootItemCondition[] terms;
       private final Predicate<LootContext> composedPredicate;
 
-      private CompositePredicate(LootItemCondition[] var1) {
+      CompositePredicate(LootItemCondition[] var1) {
          this.terms = var1;
          this.composedPredicate = LootItemConditions.andConditions(var1);
       }
 
       public final boolean test(LootContext var1) {
