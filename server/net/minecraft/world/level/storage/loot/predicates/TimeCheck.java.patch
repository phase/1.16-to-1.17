--- net/minecraft/world/level/storage/loot/predicates/TimeCheck.java
+++ net/minecraft/world/level/storage/loot/predicates/TimeCheck.java
@@ -1,38 +1,44 @@
 package net.minecraft.world.level.storage.loot.predicates;
 
 import com.google.gson.JsonDeserializationContext;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonSerializationContext;
+import java.util.Set;
 import javax.annotation.Nullable;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.util.GsonHelper;
+import net.minecraft.world.level.storage.loot.IntRange;
 import net.minecraft.world.level.storage.loot.LootContext;
-import net.minecraft.world.level.storage.loot.RandomValueBounds;
+import net.minecraft.world.level.storage.loot.parameters.LootContextParam;
 
 public class TimeCheck implements LootItemCondition {
    @Nullable
    private final Long period;
-   private final RandomValueBounds value;
+   private final IntRange value;
 
-   private TimeCheck(@Nullable Long var1, RandomValueBounds var2) {
+   private TimeCheck(@Nullable Long var1, IntRange var2) {
       this.period = var1;
       this.value = var2;
    }
 
    public LootItemConditionType getType() {
       return LootItemConditions.TIME_CHECK;
    }
 
+   public Set<LootContextParam<?>> getReferencedContextParams() {
+      return this.value.getReferencedContextParams();
+   }
+
    public boolean test(LootContext var1) {
       ServerLevel var2 = var1.getLevel();
       long var3 = var2.getDayTime();
       if (this.period != null) {
          var3 %= this.period;
       }
 
-      return this.value.matchesValue((int)var3);
+      return this.value.test(var1, (int)var3);
    }
 
    public static class Serializer implements net.minecraft.world.level.storage.loot.Serializer<TimeCheck> {
       public Serializer() {
       }
@@ -42,10 +48,10 @@
          var1.add("value", var3.serialize(var2.value));
       }
 
       public TimeCheck deserialize(JsonObject var1, JsonDeserializationContext var2) {
          Long var3 = var1.has("period") ? GsonHelper.getAsLong(var1, "period") : null;
-         RandomValueBounds var4 = (RandomValueBounds)GsonHelper.getAsObject(var1, "value", var2, RandomValueBounds.class);
+         IntRange var4 = (IntRange)GsonHelper.getAsObject(var1, "value", var2, IntRange.class);
          return new TimeCheck(var3, var4);
       }
    }
 }
