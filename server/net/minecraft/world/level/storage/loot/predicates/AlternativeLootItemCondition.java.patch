--- net/minecraft/world/level/storage/loot/predicates/AlternativeLootItemCondition.java
+++ net/minecraft/world/level/storage/loot/predicates/AlternativeLootItemCondition.java
@@ -9,14 +9,14 @@
 import net.minecraft.util.GsonHelper;
 import net.minecraft.world.level.storage.loot.LootContext;
 import net.minecraft.world.level.storage.loot.ValidationContext;
 
 public class AlternativeLootItemCondition implements LootItemCondition {
-   private final LootItemCondition[] terms;
+   final LootItemCondition[] terms;
    private final Predicate<LootContext> composedPredicate;
 
-   private AlternativeLootItemCondition(LootItemCondition[] var1) {
+   AlternativeLootItemCondition(LootItemCondition[] var1) {
       this.terms = var1;
       this.composedPredicate = LootItemConditions.orConditions(var1);
    }
 
    public LootItemConditionType getType() {
@@ -38,24 +38,10 @@
 
    public static AlternativeLootItemCondition.Builder alternative(LootItemCondition.Builder... var0) {
       return new AlternativeLootItemCondition.Builder(var0);
    }
 
-   public static class Serializer implements net.minecraft.world.level.storage.loot.Serializer<AlternativeLootItemCondition> {
-      public Serializer() {
-      }
-
-      public void serialize(JsonObject var1, AlternativeLootItemCondition var2, JsonSerializationContext var3) {
-         var1.add("terms", var3.serialize(var2.terms));
-      }
-
-      public AlternativeLootItemCondition deserialize(JsonObject var1, JsonDeserializationContext var2) {
-         LootItemCondition[] var3 = (LootItemCondition[])GsonHelper.getAsObject(var1, "terms", var2, LootItemCondition[].class);
-         return new AlternativeLootItemCondition(var3);
-      }
-   }
-
    public static class Builder implements LootItemCondition.Builder {
       private final List<LootItemCondition> terms = Lists.newArrayList();
 
       public Builder(LootItemCondition.Builder... var1) {
          LootItemCondition.Builder[] var2 = var1;
@@ -75,6 +61,20 @@
 
       public LootItemCondition build() {
          return new AlternativeLootItemCondition((LootItemCondition[])this.terms.toArray(new LootItemCondition[0]));
       }
    }
+
+   public static class Serializer implements net.minecraft.world.level.storage.loot.Serializer<AlternativeLootItemCondition> {
+      public Serializer() {
+      }
+
+      public void serialize(JsonObject var1, AlternativeLootItemCondition var2, JsonSerializationContext var3) {
+         var1.add("terms", var3.serialize(var2.terms));
+      }
+
+      public AlternativeLootItemCondition deserialize(JsonObject var1, JsonDeserializationContext var2) {
+         LootItemCondition[] var3 = (LootItemCondition[])GsonHelper.getAsObject(var1, "terms", var2, LootItemCondition[].class);
+         return new AlternativeLootItemCondition(var3);
+      }
+   }
 }
