--- net/minecraft/world/level/storage/LevelStorageSource.java
+++ net/minecraft/world/level/storage/LevelStorageSource.java
@@ -1,37 +1,52 @@
 package net.minecraft.world.level.storage;
 
 import com.google.common.collect.ImmutableList;
+import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.UnmodifiableIterator;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.serialization.DataResult;
 import com.mojang.serialization.Dynamic;
 import com.mojang.serialization.DynamicOps;
 import com.mojang.serialization.Lifecycle;
+import java.io.BufferedOutputStream;
 import java.io.File;
 import java.io.IOException;
+import java.io.OutputStream;
+import java.nio.file.FileVisitResult;
 import java.nio.file.Files;
 import java.nio.file.LinkOption;
 import java.nio.file.Path;
+import java.nio.file.Paths;
+import java.nio.file.SimpleFileVisitor;
+import java.nio.file.attribute.BasicFileAttributes;
+import java.time.LocalDateTime;
 import java.time.format.DateTimeFormatter;
 import java.time.format.DateTimeFormatterBuilder;
 import java.time.format.SignStyle;
 import java.time.temporal.ChronoField;
+import java.util.ArrayList;
+import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.function.BiFunction;
+import java.util.zip.ZipEntry;
+import java.util.zip.ZipOutputStream;
 import javax.annotation.Nullable;
+import net.minecraft.FileUtil;
 import net.minecraft.SharedConstants;
 import net.minecraft.Util;
 import net.minecraft.core.Registry;
 import net.minecraft.core.RegistryAccess;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtIo;
 import net.minecraft.nbt.NbtOps;
 import net.minecraft.nbt.Tag;
+import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.resources.RegistryLookupCodec;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.util.DirectoryLock;
 import net.minecraft.util.ProgressListener;
 import net.minecraft.util.datafix.DataFixTypes;
@@ -44,16 +59,17 @@
 import net.minecraft.world.level.levelgen.WorldGenSettings;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class LevelStorageSource {
-   private static final Logger LOGGER = LogManager.getLogger();
-   private static final DateTimeFormatter FORMATTER;
+   static final Logger LOGGER = LogManager.getLogger();
+   static final DateTimeFormatter FORMATTER;
+   private static final String ICON_FILENAME = "icon.png";
    private static final ImmutableList<String> OLD_SETTINGS_KEYS;
-   private final Path baseDir;
+   final Path baseDir;
    private final Path backupDir;
-   private final DataFixer fixerUpper;
+   final DataFixer fixerUpper;
 
    public LevelStorageSource(Path var1, Path var2, DataFixer var3) {
       this.fixerUpper = var3;
 
       try {
@@ -83,47 +99,82 @@
       }
 
       Dynamic var8 = var1.update(References.WORLD_GEN_SETTINGS, var3, var2, SharedConstants.getCurrentVersion().getWorldVersion());
       DataResult var7 = WorldGenSettings.CODEC.parse(var8);
       Logger var10002 = LOGGER;
-      var10002.getClass();
-      return Pair.of(var7.resultOrPartial(Util.prefix("WorldGenSettings: ", var10002::error)).orElseGet(() -> {
+      Objects.requireNonNull(var10002);
+      return Pair.of((WorldGenSettings)var7.resultOrPartial(Util.prefix("WorldGenSettings: ", var10002::error)).orElseGet(() -> {
          DataResult var10000 = RegistryLookupCodec.create(Registry.DIMENSION_TYPE_REGISTRY).codec().parse(var8);
          Logger var10002 = LOGGER;
-         var10002.getClass();
+         Objects.requireNonNull(var10002);
          Registry var1 = (Registry)var10000.resultOrPartial(Util.prefix("Dimension type registry: ", var10002::error)).orElseThrow(() -> {
             return new IllegalStateException("Failed to get dimension registry");
          });
          var10000 = RegistryLookupCodec.create(Registry.BIOME_REGISTRY).codec().parse(var8);
          var10002 = LOGGER;
-         var10002.getClass();
+         Objects.requireNonNull(var10002);
          Registry var2 = (Registry)var10000.resultOrPartial(Util.prefix("Biome registry: ", var10002::error)).orElseThrow(() -> {
             return new IllegalStateException("Failed to get biome registry");
          });
          var10000 = RegistryLookupCodec.create(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY).codec().parse(var8);
          var10002 = LOGGER;
-         var10002.getClass();
+         Objects.requireNonNull(var10002);
          Registry var3 = (Registry)var10000.resultOrPartial(Util.prefix("Noise settings registry: ", var10002::error)).orElseThrow(() -> {
             return new IllegalStateException("Failed to get noise settings registry");
          });
          return WorldGenSettings.makeDefault(var1, var2, var3);
       }), var7.lifecycle());
    }
 
    private static DataPackConfig readDataPackConfig(Dynamic<?> var0) {
       DataResult var10000 = DataPackConfig.CODEC.parse(var0);
       Logger var10001 = LOGGER;
-      var10001.getClass();
+      Objects.requireNonNull(var10001);
       return (DataPackConfig)var10000.resultOrPartial(var10001::error).orElse(DataPackConfig.DEFAULT);
    }
 
-   private int getStorageVersion() {
+   public String getName() {
+      return "Anvil";
+   }
+
+   public List<LevelSummary> getLevelList() throws LevelStorageException {
+      if (!Files.isDirectory(this.baseDir, new LinkOption[0])) {
+         throw new LevelStorageException((new TranslatableComponent("selectWorld.load_folder_access")).getString());
+      } else {
+         ArrayList var1 = Lists.newArrayList();
+         File[] var2 = this.baseDir.toFile().listFiles();
+         File[] var3 = var2;
+         int var4 = var2.length;
+
+         for(int var5 = 0; var5 < var4; ++var5) {
+            File var6 = var3[var5];
+            if (var6.isDirectory()) {
+               boolean var7;
+               try {
+                  var7 = DirectoryLock.isLocked(var6.toPath());
+               } catch (Exception var9) {
+                  LOGGER.warn((String)"Failed to read {} lock", (Object)var6, (Object)var9);
+                  continue;
+               }
+
+               LevelSummary var8 = (LevelSummary)this.readLevelData(var6, this.levelSummaryReader(var6, var7));
+               if (var8 != null) {
+                  var1.add(var8);
+               }
+            }
+         }
+
+         return var1;
+      }
+   }
+
+   int getStorageVersion() {
       return 19133;
    }
 
    @Nullable
-   private <T> T readLevelData(File var1, BiFunction<File, DataFixer, T> var2) {
+   <T> T readLevelData(File var1, BiFunction<File, DataFixer, T> var2) {
       if (!var1.exists()) {
          return null;
       } else {
          File var3 = new File(var1, "level.dat");
          if (var3.exists()) {
@@ -151,11 +202,11 @@
          LOGGER.error((String)"Exception reading {}", (Object)var0, (Object)var6);
          return null;
       }
    }
 
-   private static BiFunction<File, DataFixer, PrimaryLevelData> getLevelData(DynamicOps<Tag> var0, DataPackConfig var1) {
+   static BiFunction<File, DataFixer, PrimaryLevelData> getLevelData(DynamicOps<Tag> var0, DataPackConfig var1) {
       return (var2, var3) -> {
          try {
             CompoundTag var4 = NbtIo.readCompressed(var2);
             CompoundTag var5 = var4.getCompound("Data");
             CompoundTag var6 = var5.contains("Player", 10) ? var5.getCompound("Player") : null;
@@ -171,11 +222,11 @@
             return null;
          }
       };
    }
 
-   private BiFunction<File, DataFixer, LevelSummary> levelSummaryReader(File var1, boolean var2) {
+   BiFunction<File, DataFixer, LevelSummary> levelSummaryReader(File var1, boolean var2) {
       return (var3, var4) -> {
          try {
             CompoundTag var5 = NbtIo.readCompressed(var3);
             CompoundTag var6 = var5.getCompound("Data");
             var6.remove("Player");
@@ -197,22 +248,45 @@
             return null;
          }
       };
    }
 
+   public boolean isNewLevelIdAcceptable(String var1) {
+      try {
+         Path var2 = this.baseDir.resolve(var1);
+         Files.createDirectory(var2);
+         Files.deleteIfExists(var2);
+         return true;
+      } catch (IOException var3) {
+         return false;
+      }
+   }
+
+   public boolean levelExists(String var1) {
+      return Files.isDirectory(this.baseDir.resolve(var1), new LinkOption[0]);
+   }
+
+   public Path getBaseDir() {
+      return this.baseDir;
+   }
+
+   public Path getBackupPath() {
+      return this.backupDir;
+   }
+
    public LevelStorageSource.LevelStorageAccess createAccess(String var1) throws IOException {
       return new LevelStorageSource.LevelStorageAccess(var1);
    }
 
    static {
       FORMATTER = (new DateTimeFormatterBuilder()).appendValue(ChronoField.YEAR, 4, 10, SignStyle.EXCEEDS_PAD).appendLiteral('-').appendValue(ChronoField.MONTH_OF_YEAR, 2).appendLiteral('-').appendValue(ChronoField.DAY_OF_MONTH, 2).appendLiteral('_').appendValue(ChronoField.HOUR_OF_DAY, 2).appendLiteral('-').appendValue(ChronoField.MINUTE_OF_HOUR, 2).appendLiteral('-').appendValue(ChronoField.SECOND_OF_MINUTE, 2).toFormatter();
       OLD_SETTINGS_KEYS = ImmutableList.of("RandomSeed", "generatorName", "generatorOptions", "generatorVersion", "legacy_custom_options", "MapFeatures", "BonusChest");
    }
 
    public class LevelStorageAccess implements AutoCloseable {
-      private final DirectoryLock lock;
-      private final Path levelPath;
+      final DirectoryLock lock;
+      final Path levelPath;
       private final String levelId;
       private final Map<LevelResource, Path> resources = Maps.newHashMap();
 
       public LevelStorageAccess(String var2) throws IOException {
          this.levelId = var2;
@@ -268,13 +342,11 @@
       }
 
       @Nullable
       public DataPackConfig getDataPacks() {
          this.checkLock();
-         return (DataPackConfig)LevelStorageSource.this.readLevelData(this.levelPath.toFile(), (var0, var1) -> {
-            return LevelStorageSource.getDataPacks(var0, var1);
-         });
+         return (DataPackConfig)LevelStorageSource.this.readLevelData(this.levelPath.toFile(), LevelStorageSource::getDataPacks);
       }
 
       public void saveDataTag(RegistryAccess var1, WorldData var2) {
          this.saveDataTag(var1, var2, (CompoundTag)null);
       }
@@ -300,10 +372,122 @@
       public File getIconFile() {
          this.checkLock();
          return this.levelPath.resolve("icon.png").toFile();
       }
 
+      public void deleteLevel() throws IOException {
+         this.checkLock();
+         final Path var1 = this.levelPath.resolve("session.lock");
+         int var2 = 1;
+
+         while(var2 <= 5) {
+            LevelStorageSource.LOGGER.info((String)"Attempt {}...", (Object)var2);
+
+            try {
+               Files.walkFileTree(this.levelPath, new SimpleFileVisitor<Path>() {
+                  public FileVisitResult visitFile(Path var1x, BasicFileAttributes var2) throws IOException {
+                     if (!var1x.equals(var1)) {
+                        LevelStorageSource.LOGGER.debug((String)"Deleting {}", (Object)var1x);
+                        Files.delete(var1x);
+                     }
+
+                     return FileVisitResult.CONTINUE;
+                  }
+
+                  public FileVisitResult postVisitDirectory(Path var1x, IOException var2) throws IOException {
+                     if (var2 != null) {
+                        throw var2;
+                     } else {
+                        if (var1x.equals(LevelStorageAccess.this.levelPath)) {
+                           LevelStorageAccess.this.lock.close();
+                           Files.deleteIfExists(var1);
+                        }
+
+                        Files.delete(var1x);
+                        return FileVisitResult.CONTINUE;
+                     }
+                  }
+               });
+               break;
+            } catch (IOException var6) {
+               if (var2 >= 5) {
+                  throw var6;
+               }
+
+               LevelStorageSource.LOGGER.warn((String)"Failed to delete {}", (Object)this.levelPath, (Object)var6);
+
+               try {
+                  Thread.sleep(500L);
+               } catch (InterruptedException var5) {
+               }
+
+               ++var2;
+            }
+         }
+
+      }
+
+      public void renameLevel(String var1) throws IOException {
+         this.checkLock();
+         File var2 = new File(LevelStorageSource.this.baseDir.toFile(), this.levelId);
+         if (var2.exists()) {
+            File var3 = new File(var2, "level.dat");
+            if (var3.exists()) {
+               CompoundTag var4 = NbtIo.readCompressed(var3);
+               CompoundTag var5 = var4.getCompound("Data");
+               var5.putString("LevelName", var1);
+               NbtIo.writeCompressed(var4, var3);
+            }
+
+         }
+      }
+
+      public long makeWorldBackup() throws IOException {
+         this.checkLock();
+         String var10000 = LocalDateTime.now().format(LevelStorageSource.FORMATTER);
+         String var1 = var10000 + "_" + this.levelId;
+         Path var2 = LevelStorageSource.this.getBackupPath();
+
+         try {
+            Files.createDirectories(Files.exists(var2, new LinkOption[0]) ? var2.toRealPath() : var2);
+         } catch (IOException var9) {
+            throw new RuntimeException(var9);
+         }
+
+         Path var3 = var2.resolve(FileUtil.findAvailableName(var2, var1, ".zip"));
+         final ZipOutputStream var4 = new ZipOutputStream(new BufferedOutputStream(Files.newOutputStream(var3)));
+
+         try {
+            final Path var5 = Paths.get(this.levelId);
+            Files.walkFileTree(this.levelPath, new SimpleFileVisitor<Path>() {
+               public FileVisitResult visitFile(Path var1, BasicFileAttributes var2) throws IOException {
+                  if (var1.endsWith("session.lock")) {
+                     return FileVisitResult.CONTINUE;
+                  } else {
+                     String var3 = var5.resolve(LevelStorageAccess.this.levelPath.relativize(var1)).toString().replace('\\', '/');
+                     ZipEntry var4x = new ZipEntry(var3);
+                     var4.putNextEntry(var4x);
+                     com.google.common.io.Files.asByteSource(var1.toFile()).copyTo((OutputStream)var4);
+                     var4.closeEntry();
+                     return FileVisitResult.CONTINUE;
+                  }
+               }
+            });
+         } catch (Throwable var8) {
+            try {
+               var4.close();
+            } catch (Throwable var7) {
+               var8.addSuppressed(var7);
+            }
+
+            throw var8;
+         }
+
+         var4.close();
+         return Files.size(var3);
+      }
+
       public void close() throws IOException {
          this.lock.close();
       }
    }
 }
