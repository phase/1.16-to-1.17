--- net/minecraft/world/level/storage/McRegionUpgrader.java
+++ net/minecraft/world/level/storage/McRegionUpgrader.java
@@ -1,19 +1,20 @@
 package net.minecraft.world.level.storage;
 
 import com.google.common.collect.Lists;
+import java.io.DataInput;
 import java.io.DataInputStream;
+import java.io.DataOutput;
 import java.io.DataOutputStream;
 import java.io.File;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.Iterator;
 import net.minecraft.core.Registry;
 import net.minecraft.core.RegistryAccess;
-import net.minecraft.core.WritableRegistry;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtIo;
 import net.minecraft.nbt.NbtOps;
 import net.minecraft.resources.RegistryReadOps;
 import net.minecraft.server.packs.resources.ResourceManager;
@@ -31,11 +32,15 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class McRegionUpgrader {
    private static final Logger LOGGER = LogManager.getLogger();
+   private static final String MCREGION_EXTENSION = ".mcr";
 
+   public McRegionUpgrader() {
+   }
+
    static boolean convertLevel(LevelStorageSource.LevelStorageAccess var0, ProgressListener var1) {
       var1.progressStagePercentage(0);
       ArrayList var2 = Lists.newArrayList();
       ArrayList var3 = Lists.newArrayList();
       ArrayList var4 = Lists.newArrayList();
@@ -56,11 +61,11 @@
       LOGGER.info((String)"Total conversion count is {}", (Object)var8);
       RegistryAccess.RegistryHolder var9 = RegistryAccess.builtin();
       RegistryReadOps var10 = RegistryReadOps.create(NbtOps.INSTANCE, (ResourceManager)ResourceManager.Empty.INSTANCE, var9);
       WorldData var11 = var0.getDataTag(var10, DataPackConfig.DEFAULT);
       long var12 = var11 != null ? var11.worldGenSettings().seed() : 0L;
-      WritableRegistry var15 = var9.registryOrThrow(Registry.BIOME_REGISTRY);
+      Registry var15 = var9.registryOrThrow(Registry.BIOME_REGISTRY);
       Object var14;
       if (var11 != null && var11.worldGenSettings().isFlatWorld()) {
          var14 = new FixedBiomeSource((Biome)var15.getOrThrow(Biomes.PLAINS));
       } else {
          var14 = new OverworldBiomeSource(var12, false, false, var15);
@@ -126,11 +131,11 @@
                               if (var16 == null) {
                                  LOGGER.warn((String)"Failed to fetch input stream for chunk {}", (Object)var14);
                                  continue;
                               }
 
-                              var15 = NbtIo.read(var16);
+                              var15 = NbtIo.read((DataInput)var16);
                            } catch (Throwable var105) {
                               var17 = var105;
                               throw var105;
                            } finally {
                               if (var16 != null) {
@@ -159,11 +164,11 @@
                         OldChunkStorage.convertToAnvilFormat(var0, var115, var19, var3);
                         DataOutputStream var20 = var10.getChunkDataOutputStream(var14);
                         Throwable var21 = null;
 
                         try {
-                           NbtIo.write(var18, var20);
+                           NbtIo.write(var18, (DataOutput)var20);
                         } catch (Throwable var103) {
                            var21 = var103;
                            throw var103;
                         } finally {
                            if (var20 != null) {
