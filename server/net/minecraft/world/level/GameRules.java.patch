--- net/minecraft/world/level/GameRules.java
+++ net/minecraft/world/level/GameRules.java
@@ -25,10 +25,11 @@
 import net.minecraft.server.level.ServerPlayer;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class GameRules {
+   public static final int DEFAULT_RANDOM_TICK_SPEED = 3;
    private static final Logger LOGGER = LogManager.getLogger();
    private static final Map<GameRules.Key<?>, GameRules.Type<?>> GAME_RULE_TYPES = Maps.newTreeMap(Comparator.comparing((var0) -> {
       return var0.id;
    }));
    public static final GameRules.Key<GameRules.BooleanValue> RULE_DOFIRETICK;
@@ -58,14 +59,16 @@
    public static final GameRules.Key<GameRules.BooleanValue> RULE_DOINSOMNIA;
    public static final GameRules.Key<GameRules.BooleanValue> RULE_DO_IMMEDIATE_RESPAWN;
    public static final GameRules.Key<GameRules.BooleanValue> RULE_DROWNING_DAMAGE;
    public static final GameRules.Key<GameRules.BooleanValue> RULE_FALL_DAMAGE;
    public static final GameRules.Key<GameRules.BooleanValue> RULE_FIRE_DAMAGE;
+   public static final GameRules.Key<GameRules.BooleanValue> RULE_FREEZE_DAMAGE;
    public static final GameRules.Key<GameRules.BooleanValue> RULE_DO_PATROL_SPAWNING;
    public static final GameRules.Key<GameRules.BooleanValue> RULE_DO_TRADER_SPAWNING;
    public static final GameRules.Key<GameRules.BooleanValue> RULE_FORGIVE_DEAD_PLAYERS;
    public static final GameRules.Key<GameRules.BooleanValue> RULE_UNIVERSAL_ANGER;
+   public static final GameRules.Key<GameRules.IntegerValue> RULE_PLAYERS_SLEEPING_PERCENTAGE;
    private final Map<GameRules.Key<?>, GameRules.Value<?>> rules;
 
    private static <T extends GameRules.Value<T>> GameRules.Key<T> register(String var0, GameRules.Category var1, GameRules.Type<T> var2) {
       GameRules.Key var3 = new GameRules.Key(var0, var1);
       GameRules.Type var4 = (GameRules.Type)GAME_RULE_TYPES.put(var3, var2);
@@ -124,10 +127,21 @@
    private static <T extends GameRules.Value<T>> void callVisitorCap(GameRules.GameRuleTypeVisitor var0, GameRules.Key<?> var1, GameRules.Type<?> var2) {
       var0.visit(var1, var2);
       var2.callVisitor(var0, var1);
    }
 
+   public void assignFrom(GameRules var1, @Nullable MinecraftServer var2) {
+      var1.rules.keySet().forEach((var3) -> {
+         this.assignCap(var3, var1, var2);
+      });
+   }
+
+   private <T extends GameRules.Value<T>> void assignCap(GameRules.Key<T> var1, GameRules var2, @Nullable MinecraftServer var3) {
+      GameRules.Value var4 = var2.getRule(var1);
+      this.getRule(var1).setFrom(var4, var3);
+   }
+
    public boolean getBoolean(GameRules.Key<GameRules.BooleanValue> var1) {
       return ((GameRules.BooleanValue)this.getRule(var1)).get();
    }
 
    public int getInt(GameRules.Key<GameRules.IntegerValue> var1) {
@@ -179,14 +193,16 @@
 
       }));
       RULE_DROWNING_DAMAGE = register("drowningDamage", GameRules.Category.PLAYER, GameRules.BooleanValue.create(true));
       RULE_FALL_DAMAGE = register("fallDamage", GameRules.Category.PLAYER, GameRules.BooleanValue.create(true));
       RULE_FIRE_DAMAGE = register("fireDamage", GameRules.Category.PLAYER, GameRules.BooleanValue.create(true));
+      RULE_FREEZE_DAMAGE = register("freezeDamage", GameRules.Category.PLAYER, GameRules.BooleanValue.create(true));
       RULE_DO_PATROL_SPAWNING = register("doPatrolSpawning", GameRules.Category.SPAWNING, GameRules.BooleanValue.create(true));
       RULE_DO_TRADER_SPAWNING = register("doTraderSpawning", GameRules.Category.SPAWNING, GameRules.BooleanValue.create(true));
       RULE_FORGIVE_DEAD_PLAYERS = register("forgiveDeadPlayers", GameRules.Category.MOBS, GameRules.BooleanValue.create(true));
       RULE_UNIVERSAL_ANGER = register("universalAnger", GameRules.Category.MOBS, GameRules.BooleanValue.create(false));
+      RULE_PLAYERS_SLEEPING_PERCENTAGE = register("playersSleepingPercentage", GameRules.Category.PLAYER, GameRules.IntegerValue.create(100));
    }
 
    public static class BooleanValue extends GameRules.Value<GameRules.BooleanValue> {
       private boolean value;
 
@@ -236,10 +252,15 @@
       }
 
       protected GameRules.BooleanValue copy() {
          return new GameRules.BooleanValue(this.type, this.value);
       }
+
+      public void setFrom(GameRules.BooleanValue var1, @Nullable MinecraftServer var2) {
+         this.value = var1.value;
+         this.onChanged(var2);
+      }
    }
 
    public static class IntegerValue extends GameRules.Value<GameRules.IntegerValue> {
       private int value;
 
@@ -265,18 +286,32 @@
 
       public int get() {
          return this.value;
       }
 
+      public void set(int var1, @Nullable MinecraftServer var2) {
+         this.value = var1;
+         this.onChanged(var2);
+      }
+
       public String serialize() {
          return Integer.toString(this.value);
       }
 
       protected void deserialize(String var1) {
          this.value = safeParse(var1);
       }
 
+      public boolean tryDeserialize(String var1) {
+         try {
+            this.value = Integer.parseInt(var1);
+            return true;
+         } catch (NumberFormatException var3) {
+            return false;
+         }
+      }
+
       private static int safeParse(String var0) {
          if (!var0.isEmpty()) {
             try {
                return Integer.parseInt(var0);
             } catch (NumberFormatException var2) {
@@ -296,10 +331,15 @@
       }
 
       protected GameRules.IntegerValue copy() {
          return new GameRules.IntegerValue(this.type, this.value);
       }
+
+      public void setFrom(GameRules.IntegerValue var1, @Nullable MinecraftServer var2) {
+         this.value = var1.value;
+         this.onChanged(var2);
+      }
    }
 
    public abstract static class Value<T extends GameRules.Value<T>> {
       protected final GameRules.Type<T> type;
 
@@ -332,10 +372,12 @@
       public abstract int getCommandResult();
 
       protected abstract T getSelf();
 
       protected abstract T copy();
+
+      public abstract void setFrom(T var1, @Nullable MinecraftServer var2);
    }
 
    public static class Type<T extends GameRules.Value<T>> {
       private final Supplier<ArgumentType<?>> argument;
       private final Function<GameRules.Type<T>, T> constructor;
@@ -392,10 +434,14 @@
       }
 
       public String getDescriptionId() {
          return "gamerule." + this.id;
       }
+
+      public GameRules.Category getCategory() {
+         return this.category;
+      }
    }
 
    public interface GameRuleTypeVisitor {
       default <T extends GameRules.Value<T>> void visit(GameRules.Key<T> var1, GameRules.Type<T> var2) {
       }
@@ -423,7 +469,11 @@
       private final String descriptionId;
 
       private Category(String var3) {
          this.descriptionId = var3;
       }
+
+      public String getDescriptionId() {
+         return this.descriptionId;
+      }
    }
 }
