--- net/minecraft/world/effect/MobEffectInstance.java
+++ net/minecraft/world/effect/MobEffectInstance.java
@@ -10,12 +10,12 @@
 public class MobEffectInstance implements Comparable<MobEffectInstance> {
    private static final Logger LOGGER = LogManager.getLogger();
    private final MobEffect effect;
    private int duration;
    private int amplifier;
-   private boolean splash;
    private boolean ambient;
+   private boolean noCounter;
    private boolean visible;
    private boolean showIcon;
    @Nullable
    private MobEffectInstance hiddenEffect;
 
@@ -166,21 +166,20 @@
    public String getDescriptionId() {
       return this.effect.getDescriptionId();
    }
 
    public String toString() {
+      String var10000;
       String var1;
       if (this.amplifier > 0) {
-         var1 = this.getDescriptionId() + " x " + (this.amplifier + 1) + ", Duration: " + this.duration;
+         var10000 = this.getDescriptionId();
+         var1 = var10000 + " x " + (this.amplifier + 1) + ", Duration: " + this.duration;
       } else {
-         var1 = this.getDescriptionId() + ", Duration: " + this.duration;
+         var10000 = this.getDescriptionId();
+         var1 = var10000 + ", Duration: " + this.duration;
       }
 
-      if (this.splash) {
-         var1 = var1 + ", Splash: true";
-      }
-
       if (!this.visible) {
          var1 = var1 + ", Particles: false";
       }
 
       if (!this.showIcon) {
@@ -195,19 +194,18 @@
          return true;
       } else if (!(var1 instanceof MobEffectInstance)) {
          return false;
       } else {
          MobEffectInstance var2 = (MobEffectInstance)var1;
-         return this.duration == var2.duration && this.amplifier == var2.amplifier && this.splash == var2.splash && this.ambient == var2.ambient && this.effect.equals(var2.effect);
+         return this.duration == var2.duration && this.amplifier == var2.amplifier && this.ambient == var2.ambient && this.effect.equals(var2.effect);
       }
    }
 
    public int hashCode() {
       int var1 = this.effect.hashCode();
       var1 = 31 * var1 + this.duration;
       var1 = 31 * var1 + this.amplifier;
-      var1 = 31 * var1 + (this.splash ? 1 : 0);
       var1 = 31 * var1 + (this.ambient ? 1 : 0);
       return var1;
    }
 
    public CompoundTag save(CompoundTag var1) {
@@ -228,10 +226,11 @@
          var1.put("HiddenEffect", var2);
       }
 
    }
 
+   @Nullable
    public static MobEffectInstance load(CompoundTag var0) {
       byte var1 = var0.getByte("Id");
       MobEffect var2 = MobEffect.byId(var1);
       return var2 == null ? null : loadSpecifiedEffect(var2, var0);
    }
@@ -256,10 +255,18 @@
       }
 
       return new MobEffectInstance(var0, var3, var2 < 0 ? 0 : var2, var4, var5, var6, var7);
    }
 
+   public void setNoCounter(boolean var1) {
+      this.noCounter = var1;
+   }
+
+   public boolean isNoCounter() {
+      return this.noCounter;
+   }
+
    public int compareTo(MobEffectInstance var1) {
       boolean var2 = true;
       return (this.getDuration() <= 32147 || var1.getDuration() <= 32147) && (!this.isAmbient() || !var1.isAmbient()) ? ComparisonChain.start().compare(this.isAmbient(), var1.isAmbient()).compare(this.getDuration(), var1.getDuration()).compare(this.getEffect().getColor(), var1.getEffect().getColor()).result() : ComparisonChain.start().compare(this.isAmbient(), var1.isAmbient()).compare(this.getEffect().getColor(), var1.getEffect().getColor()).result();
    }
 }
