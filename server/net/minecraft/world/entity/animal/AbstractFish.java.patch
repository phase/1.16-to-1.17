--- net/minecraft/world/entity/animal/AbstractFish.java
+++ net/minecraft/world/entity/animal/AbstractFish.java
@@ -1,16 +1,14 @@
 package net.minecraft.world.entity.animal;
 
 import java.util.Random;
 import java.util.function.Predicate;
-import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.core.BlockPos;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.EntityDataSerializers;
 import net.minecraft.network.syncher.SynchedEntityData;
-import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.tags.FluidTags;
 import net.minecraft.util.Mth;
 import net.minecraft.world.InteractionHand;
@@ -31,18 +29,18 @@
 import net.minecraft.world.entity.ai.goal.RandomSwimmingGoal;
 import net.minecraft.world.entity.ai.navigation.PathNavigation;
 import net.minecraft.world.entity.ai.navigation.WaterBoundPathNavigation;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
-import net.minecraft.world.item.Items;
+import net.minecraft.world.item.ItemUtils;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.phys.Vec3;
 
-public abstract class AbstractFish extends WaterAnimal {
+public abstract class AbstractFish extends WaterAnimal implements Bucketable {
    private static final EntityDataAccessor<Boolean> FROM_BUCKET;
 
    public AbstractFish(EntityType<? extends AbstractFish> var1, Level var2) {
       super(var1, var2);
       this.moveControl = new AbstractFish.FishMoveControl(this);
@@ -75,11 +73,11 @@
    protected void defineSynchedData() {
       super.defineSynchedData();
       this.entityData.define(FROM_BUCKET, false);
    }
 
-   private boolean fromBucket() {
+   public boolean fromBucket() {
       return (Boolean)this.entityData.get(FROM_BUCKET);
    }
 
    public void setFromBucket(boolean var1) {
       this.entityData.set(FROM_BUCKET, var1);
@@ -133,31 +131,15 @@
 
       super.aiStep();
    }
 
    protected InteractionResult mobInteract(Player var1, InteractionHand var2) {
-      ItemStack var3 = var1.getItemInHand(var2);
-      if (var3.getItem() == Items.WATER_BUCKET && this.isAlive()) {
-         this.playSound(SoundEvents.BUCKET_FILL_FISH, 1.0F, 1.0F);
-         var3.shrink(1);
-         ItemStack var4 = this.getBucketItemStack();
-         this.saveToBucketTag(var4);
-         if (!this.level.isClientSide) {
-            CriteriaTriggers.FILLED_BUCKET.trigger((ServerPlayer)var1, var4);
-         }
-
-         if (var3.isEmpty()) {
-            var1.setItemInHand(var2, var4);
-         } else if (!var1.inventory.add(var4)) {
-            var1.drop(var4, false);
-         }
-
-         this.remove();
-         return InteractionResult.sidedSuccess(this.level.isClientSide);
-      } else {
-         return super.mobInteract(var1, var2);
-      }
+      return (InteractionResult)ItemUtils.bucketMobPickup(var1, var2, this, SoundEvents.BUCKET_FILL_FISH, () -> {
+         ItemStack var1 = this.getBucketItemStack();
+         this.saveToBucketTag(var1);
+         return var1;
+      }).orElse(super.mobInteract(var1, var2));
    }
 
    protected void saveToBucketTag(ItemStack var1) {
       if (this.hasCustomName()) {
          var1.setHoverName(this.getCustomName());
