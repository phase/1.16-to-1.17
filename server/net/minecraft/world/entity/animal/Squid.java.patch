--- net/minecraft/world/entity/animal/Squid.java
+++ net/minecraft/world/entity/animal/Squid.java
@@ -1,27 +1,30 @@
 package net.minecraft.world.entity.animal;
 
 import java.util.Random;
 import net.minecraft.core.BlockPos;
+import net.minecraft.core.particles.ParticleOptions;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.tags.FluidTags;
 import net.minecraft.util.Mth;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.effect.MobEffects;
+import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.MoverType;
 import net.minecraft.world.entity.Pose;
 import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
 import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.ai.goal.Goal;
+import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.material.FluidState;
 import net.minecraft.world.phys.Vec3;
@@ -71,16 +74,24 @@
 
    protected SoundEvent getDeathSound() {
       return SoundEvents.SQUID_DEATH;
    }
 
+   protected SoundEvent getSquirtSound() {
+      return SoundEvents.SQUID_SQUIRT;
+   }
+
+   public boolean canBeLeashed(Player var1) {
+      return !this.isLeashed();
+   }
+
    protected float getSoundVolume() {
       return 0.4F;
    }
 
-   protected boolean isMovementNoisy() {
-      return false;
+   protected Entity.MovementEmission getMovementEmission() {
+      return Entity.MovementEmission.EVENTS;
    }
 
    public void aiStep() {
       super.aiStep();
       this.xBodyRotO = this.xBodyRot;
@@ -119,27 +130,27 @@
 
          if (!this.level.isClientSide) {
             this.setDeltaMovement((double)(this.tx * this.speed), (double)(this.ty * this.speed), (double)(this.tz * this.speed));
          }
 
-         Vec3 var3 = this.getDeltaMovement();
-         float var2 = Mth.sqrt(getHorizontalDistanceSqr(var3));
-         this.yBodyRot += (-((float)Mth.atan2(var3.x, var3.z)) * 57.295776F - this.yBodyRot) * 0.1F;
-         this.yRot = this.yBodyRot;
+         Vec3 var4 = this.getDeltaMovement();
+         double var2 = var4.horizontalDistance();
+         this.yBodyRot += (-((float)Mth.atan2(var4.x, var4.z)) * 57.295776F - this.yBodyRot) * 0.1F;
+         this.setYRot(this.yBodyRot);
          this.zBodyRot = (float)((double)this.zBodyRot + 3.141592653589793D * (double)this.rotateSpeed * 1.5D);
-         this.xBodyRot += (-((float)Mth.atan2((double)var2, var3.y)) * 57.295776F - this.xBodyRot) * 0.1F;
+         this.xBodyRot += (-((float)Mth.atan2(var2, var4.y)) * 57.295776F - this.xBodyRot) * 0.1F;
       } else {
          this.tentacleAngle = Mth.abs(Mth.sin(this.tentacleMovement)) * 3.1415927F * 0.25F;
          if (!this.level.isClientSide) {
-            double var4 = this.getDeltaMovement().y;
+            double var5 = this.getDeltaMovement().y;
             if (this.hasEffect(MobEffects.LEVITATION)) {
-               var4 = 0.05D * (double)(this.getEffect(MobEffects.LEVITATION).getAmplifier() + 1);
+               var5 = 0.05D * (double)(this.getEffect(MobEffects.LEVITATION).getAmplifier() + 1);
             } else if (!this.isNoGravity()) {
-               var4 -= 0.08D;
+               var5 -= 0.08D;
             }
 
-            this.setDeltaMovement(0.0D, var4 * 0.9800000190734863D, 0.0D);
+            this.setDeltaMovement(0.0D, var5 * 0.9800000190734863D, 0.0D);
          }
 
          this.xBodyRot = (float)((double)this.xBodyRot + (double)(-90.0F - this.xBodyRot) * 0.02D);
       }
 
@@ -159,43 +170,85 @@
       var2 = var2.yRot(-this.yBodyRotO * 0.017453292F);
       return var2;
    }
 
    private void spawnInk() {
-      this.playSound(SoundEvents.SQUID_SQUIRT, this.getSoundVolume(), this.getVoicePitch());
+      this.playSound(this.getSquirtSound(), this.getSoundVolume(), this.getVoicePitch());
       Vec3 var1 = this.rotateVector(new Vec3(0.0D, -1.0D, 0.0D)).add(this.getX(), this.getY(), this.getZ());
 
       for(int var2 = 0; var2 < 30; ++var2) {
          Vec3 var3 = this.rotateVector(new Vec3((double)this.random.nextFloat() * 0.6D - 0.3D, -1.0D, (double)this.random.nextFloat() * 0.6D - 0.3D));
          Vec3 var4 = var3.scale(0.3D + (double)(this.random.nextFloat() * 2.0F));
-         ((ServerLevel)this.level).sendParticles(ParticleTypes.SQUID_INK, var1.x, var1.y + 0.5D, var1.z, 0, var4.x, var4.y, var4.z, 0.10000000149011612D);
+         ((ServerLevel)this.level).sendParticles(this.getInkParticle(), var1.x, var1.y + 0.5D, var1.z, 0, var4.x, var4.y, var4.z, 0.10000000149011612D);
       }
 
    }
 
+   protected ParticleOptions getInkParticle() {
+      return ParticleTypes.SQUID_INK;
+   }
+
    public void travel(Vec3 var1) {
       this.move(MoverType.SELF, this.getDeltaMovement());
    }
 
    public static boolean checkSquidSpawnRules(EntityType<Squid> var0, LevelAccessor var1, MobSpawnType var2, BlockPos var3, Random var4) {
       return var3.getY() > 45 && var3.getY() < var1.getSeaLevel();
    }
 
+   public void handleEntityEvent(byte var1) {
+      if (var1 == 19) {
+         this.tentacleMovement = 0.0F;
+      } else {
+         super.handleEntityEvent(var1);
+      }
+
+   }
+
    public void setMovementVector(float var1, float var2, float var3) {
       this.tx = var1;
       this.ty = var2;
       this.tz = var3;
    }
 
    public boolean hasMovementVector() {
       return this.tx != 0.0F || this.ty != 0.0F || this.tz != 0.0F;
    }
 
-   class SquidFleeGoal extends Goal {
+   private class SquidRandomMovementGoal extends Goal {
+      private final Squid squid;
+
+      public SquidRandomMovementGoal(Squid var2) {
+         this.squid = var2;
+      }
+
+      public boolean canUse() {
+         return true;
+      }
+
+      public void tick() {
+         int var1 = this.squid.getNoActionTime();
+         if (var1 > 100) {
+            this.squid.setMovementVector(0.0F, 0.0F, 0.0F);
+         } else if (this.squid.getRandom().nextInt(50) == 0 || !this.squid.wasTouchingWater || !this.squid.hasMovementVector()) {
+            float var2 = this.squid.getRandom().nextFloat() * 6.2831855F;
+            float var3 = Mth.cos(var2) * 0.2F;
+            float var4 = -0.1F + this.squid.getRandom().nextFloat() * 0.2F;
+            float var5 = Mth.sin(var2) * 0.2F;
+            this.squid.setMovementVector(var3, var4, var5);
+         }
+
+      }
+   }
+
+   private class SquidFleeGoal extends Goal {
+      private static final float SQUID_FLEE_SPEED = 3.0F;
+      private static final float SQUID_FLEE_MIN_DISTANCE = 5.0F;
+      private static final float SQUID_FLEE_MAX_DISTANCE = 10.0F;
       private int fleeTicks;
 
-      private SquidFleeGoal() {
+      SquidFleeGoal() {
       }
 
       public boolean canUse() {
          LivingEntity var1 = Squid.this.getLastHurtByMob();
          if (Squid.this.isInWater() && var1 != null) {
@@ -242,32 +295,6 @@
             }
 
          }
       }
    }
-
-   class SquidRandomMovementGoal extends Goal {
-      private final Squid squid;
-
-      public SquidRandomMovementGoal(Squid var2) {
-         this.squid = var2;
-      }
-
-      public boolean canUse() {
-         return true;
-      }
-
-      public void tick() {
-         int var1 = this.squid.getNoActionTime();
-         if (var1 > 100) {
-            this.squid.setMovementVector(0.0F, 0.0F, 0.0F);
-         } else if (this.squid.getRandom().nextInt(50) == 0 || !this.squid.wasTouchingWater || !this.squid.hasMovementVector()) {
-            float var2 = this.squid.getRandom().nextFloat() * 6.2831855F;
-            float var3 = Mth.cos(var2) * 0.2F;
-            float var4 = -0.1F + this.squid.getRandom().nextFloat() * 0.2F;
-            float var5 = Mth.sin(var2) * 0.2F;
-            this.squid.setMovementVector(var3, var4, var5);
-         }
-
-      }
-   }
 }
