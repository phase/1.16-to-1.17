--- net/minecraft/world/entity/animal/horse/AbstractChestedHorse.java
+++ net/minecraft/world/entity/animal/horse/AbstractChestedHorse.java
@@ -7,20 +7,22 @@
 import net.minecraft.network.syncher.SynchedEntityData;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.SlotAccess;
 import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
 import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Blocks;
 
 public abstract class AbstractChestedHorse extends AbstractHorse {
    private static final EntityDataAccessor<Boolean> DATA_ID_CHEST;
+   public static final int INV_CHEST_COUNT = 15;
 
    protected AbstractChestedHorse(EntityType<? extends AbstractChestedHorse> var1, Level var2) {
       super(var1, var2);
       this.canGallop = false;
    }
@@ -88,13 +90,13 @@
    }
 
    public void readAdditionalSaveData(CompoundTag var1) {
       super.readAdditionalSaveData(var1);
       this.setChest(var1.getBoolean("ChestedHorse"));
+      this.createInventory();
       if (this.hasChest()) {
          ListTag var2 = var1.getList("Items", 10);
-         this.createInventory();
 
          for(int var3 = 0; var3 < var2.size(); ++var3) {
             CompoundTag var4 = var2.getCompound(var3);
             int var5 = var4.getByte("Slot") & 255;
             if (var5 >= 2 && var5 < this.inventory.getContainerSize()) {
@@ -104,26 +106,36 @@
       }
 
       this.updateContainerEquipment();
    }
 
-   public boolean setSlot(int var1, ItemStack var2) {
-      if (var1 == 499) {
-         if (this.hasChest() && var2.isEmpty()) {
-            this.setChest(false);
-            this.createInventory();
-            return true;
+   public SlotAccess getSlot(int var1) {
+      return var1 == 499 ? new SlotAccess() {
+         public ItemStack get() {
+            return AbstractChestedHorse.this.hasChest() ? new ItemStack(Items.CHEST) : ItemStack.EMPTY;
          }
 
-         if (!this.hasChest() && var2.getItem() == Blocks.CHEST.asItem()) {
-            this.setChest(true);
-            this.createInventory();
-            return true;
-         }
-      }
+         public boolean set(ItemStack var1) {
+            if (var1.isEmpty()) {
+               if (AbstractChestedHorse.this.hasChest()) {
+                  AbstractChestedHorse.this.setChest(false);
+                  AbstractChestedHorse.this.createInventory();
+               }
 
-      return super.setSlot(var1, var2);
+               return true;
+            } else if (var1.is(Items.CHEST)) {
+               if (!AbstractChestedHorse.this.hasChest()) {
+                  AbstractChestedHorse.this.setChest(true);
+                  AbstractChestedHorse.this.createInventory();
+               }
+
+               return true;
+            } else {
+               return false;
+            }
+         }
+      } : super.getSlot(var1);
    }
 
    public InteractionResult mobInteract(Player var1, InteractionHand var2) {
       ItemStack var3 = var1.getItemInHand(var2);
       if (!this.isBaby()) {
@@ -145,22 +157,22 @@
          if (!this.isTamed()) {
             this.makeMad();
             return InteractionResult.sidedSuccess(this.level.isClientSide);
          }
 
-         if (!this.hasChest() && var3.getItem() == Blocks.CHEST.asItem()) {
+         if (!this.hasChest() && var3.is(Blocks.CHEST.asItem())) {
             this.setChest(true);
             this.playChestEquipsSound();
-            if (!var1.abilities.instabuild) {
+            if (!var1.getAbilities().instabuild) {
                var3.shrink(1);
             }
 
             this.createInventory();
             return InteractionResult.sidedSuccess(this.level.isClientSide);
          }
 
-         if (!this.isBaby() && !this.isSaddled() && var3.getItem() == Items.SADDLE) {
+         if (!this.isBaby() && !this.isSaddled() && var3.is(Items.SADDLE)) {
             this.openInventory(var1);
             return InteractionResult.sidedSuccess(this.level.isClientSide);
          }
       }
 
