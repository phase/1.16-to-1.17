--- net/minecraft/world/entity/animal/Dolphin.java
+++ net/minecraft/world/entity/animal/Dolphin.java
@@ -6,20 +6,22 @@
 import java.util.Optional;
 import java.util.Random;
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
+import net.minecraft.core.particles.ParticleOptions;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.EntityDataSerializers;
 import net.minecraft.network.syncher.SynchedEntityData;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.tags.FluidTags;
 import net.minecraft.tags.ItemTags;
+import net.minecraft.tags.Tag;
 import net.minecraft.util.Mth;
 import net.minecraft.world.DifficultyInstance;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.damagesource.DamageSource;
@@ -34,12 +36,12 @@
 import net.minecraft.world.entity.MoverType;
 import net.minecraft.world.entity.Pose;
 import net.minecraft.world.entity.SpawnGroupData;
 import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
 import net.minecraft.world.entity.ai.attributes.Attributes;
-import net.minecraft.world.entity.ai.control.DolphinLookControl;
-import net.minecraft.world.entity.ai.control.MoveControl;
+import net.minecraft.world.entity.ai.control.SmoothSwimmingLookControl;
+import net.minecraft.world.entity.ai.control.SmoothSwimmingMoveControl;
 import net.minecraft.world.entity.ai.goal.AvoidEntityGoal;
 import net.minecraft.world.entity.ai.goal.BreathAirGoal;
 import net.minecraft.world.entity.ai.goal.DolphinJumpGoal;
 import net.minecraft.world.entity.ai.goal.FollowBoatGoal;
 import net.minecraft.world.entity.ai.goal.Goal;
@@ -50,11 +52,11 @@
 import net.minecraft.world.entity.ai.goal.TryFindWaterGoal;
 import net.minecraft.world.entity.ai.goal.target.HurtByTargetGoal;
 import net.minecraft.world.entity.ai.navigation.PathNavigation;
 import net.minecraft.world.entity.ai.navigation.WaterBoundPathNavigation;
 import net.minecraft.world.entity.ai.targeting.TargetingConditions;
-import net.minecraft.world.entity.ai.util.RandomPos;
+import net.minecraft.world.entity.ai.util.DefaultRandomPos;
 import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.monster.Guardian;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.Level;
@@ -68,16 +70,18 @@
 public class Dolphin extends WaterAnimal {
    private static final EntityDataAccessor<BlockPos> TREASURE_POS;
    private static final EntityDataAccessor<Boolean> GOT_FISH;
    private static final EntityDataAccessor<Integer> MOISTNESS_LEVEL;
    private static final TargetingConditions SWIM_WITH_PLAYER_TARGETING;
+   public static final int TOTAL_AIR_SUPPLY = 4800;
+   private static final int TOTAL_MOISTNESS_LEVEL = 2400;
    public static final Predicate<ItemEntity> ALLOWED_ITEMS;
 
    public Dolphin(EntityType<? extends Dolphin> var1, Level var2) {
       super(var1, var2);
-      this.moveControl = new Dolphin.DolphinMoveControl(this);
-      this.lookControl = new DolphinLookControl(this, 10);
+      this.moveControl = new SmoothSwimmingMoveControl(this, 85, 10, 0.02F, 0.1F, true);
+      this.lookControl = new SmoothSwimmingLookControl(this, 10);
       this.setCanPickUpLoot(true);
    }
 
    @Nullable
    public SpawnGroupData finalizeSpawn(ServerLevelAccessor var1, DifficultyInstance var2, MobSpawnType var3, @Nullable SpawnGroupData var4, @Nullable CompoundTag var5) {
@@ -216,11 +220,11 @@
          if (this.canHoldItem(var2)) {
             this.onItemPickup(var1);
             this.setItemSlot(EquipmentSlot.MAINHAND, var2);
             this.handDropChances[EquipmentSlot.MAINHAND.getIndex()] = 2.0F;
             this.take(var1, var2.getCount());
-            var1.remove();
+            var1.discard();
          }
       }
 
    }
 
@@ -258,19 +262,38 @@
          }
 
       }
    }
 
+   public void handleEntityEvent(byte var1) {
+      if (var1 == 38) {
+         this.addParticlesAroundSelf(ParticleTypes.HAPPY_VILLAGER);
+      } else {
+         super.handleEntityEvent(var1);
+      }
+
+   }
+
+   private void addParticlesAroundSelf(ParticleOptions var1) {
+      for(int var2 = 0; var2 < 7; ++var2) {
+         double var3 = this.random.nextGaussian() * 0.01D;
+         double var5 = this.random.nextGaussian() * 0.01D;
+         double var7 = this.random.nextGaussian() * 0.01D;
+         this.level.addParticle(var1, this.getRandomX(1.0D), this.getRandomY() + 0.2D, this.getRandomZ(1.0D), var3, var5, var7);
+      }
+
+   }
+
    protected InteractionResult mobInteract(Player var1, InteractionHand var2) {
       ItemStack var3 = var1.getItemInHand(var2);
-      if (!var3.isEmpty() && var3.getItem().is(ItemTags.FISHES)) {
+      if (!var3.isEmpty() && var3.is((Tag)ItemTags.FISHES)) {
          if (!this.level.isClientSide) {
             this.playSound(SoundEvents.DOLPHIN_EAT, 1.0F, 1.0F);
          }
 
          this.setGotFish(true);
-         if (!var1.abilities.instabuild) {
+         if (!var1.getAbilities().instabuild) {
             var3.shrink(1);
          }
 
          return InteractionResult.sidedSuccess(this.level.isClientSide);
       } else {
@@ -399,19 +422,19 @@
 
       public void tick() {
          Level var1 = this.dolphin.level;
          if (this.dolphin.closeToNextPos() || this.dolphin.getNavigation().isDone()) {
             Vec3 var2 = Vec3.atCenterOf(this.dolphin.getTreasurePos());
-            Vec3 var3 = RandomPos.getPosTowards(this.dolphin, 16, 1, var2, 0.39269909262657166D);
+            Vec3 var3 = DefaultRandomPos.getPosTowards(this.dolphin, 16, 1, var2, 0.39269909262657166D);
             if (var3 == null) {
-               var3 = RandomPos.getPosTowards(this.dolphin, 8, 4, var2);
+               var3 = DefaultRandomPos.getPosTowards(this.dolphin, 8, 4, var2, 1.5707963705062866D);
             }
 
             if (var3 != null) {
                BlockPos var4 = new BlockPos(var3);
                if (!var1.getFluidState(var4).is(FluidTags.WATER) || !var1.getBlockState(var4).isPathfindable(var1, var4, PathComputationType.WATER)) {
-                  var3 = RandomPos.getPosTowards(this.dolphin, 8, 5, var2);
+                  var3 = DefaultRandomPos.getPosTowards(this.dolphin, 8, 5, var2, 1.5707963705062866D);
                }
             }
 
             if (var3 == null) {
                this.stuck = true;
@@ -535,55 +558,6 @@
             var4.setDeltaMovement((double)(0.3F * -Mth.sin(Dolphin.this.yRot * 0.017453292F) * Mth.cos(Dolphin.this.xRot * 0.017453292F) + Mth.cos(var6) * var7), (double)(0.3F * Mth.sin(Dolphin.this.xRot * 0.017453292F) * 1.5F), (double)(0.3F * Mth.cos(Dolphin.this.yRot * 0.017453292F) * Mth.cos(Dolphin.this.xRot * 0.017453292F) + Mth.sin(var6) * var7));
             Dolphin.this.level.addFreshEntity(var4);
          }
       }
    }
-
-   static class DolphinMoveControl extends MoveControl {
-      private final Dolphin dolphin;
-
-      public DolphinMoveControl(Dolphin var1) {
-         super(var1);
-         this.dolphin = var1;
-      }
-
-      public void tick() {
-         if (this.dolphin.isInWater()) {
-            this.dolphin.setDeltaMovement(this.dolphin.getDeltaMovement().add(0.0D, 0.005D, 0.0D));
-         }
-
-         if (this.operation == MoveControl.Operation.MOVE_TO && !this.dolphin.getNavigation().isDone()) {
-            double var1 = this.wantedX - this.dolphin.getX();
-            double var3 = this.wantedY - this.dolphin.getY();
-            double var5 = this.wantedZ - this.dolphin.getZ();
-            double var7 = var1 * var1 + var3 * var3 + var5 * var5;
-            if (var7 < 2.500000277905201E-7D) {
-               this.mob.setZza(0.0F);
-            } else {
-               float var9 = (float)(Mth.atan2(var5, var1) * 57.2957763671875D) - 90.0F;
-               this.dolphin.yRot = this.rotlerp(this.dolphin.yRot, var9, 10.0F);
-               this.dolphin.yBodyRot = this.dolphin.yRot;
-               this.dolphin.yHeadRot = this.dolphin.yRot;
-               float var10 = (float)(this.speedModifier * this.dolphin.getAttributeValue(Attributes.MOVEMENT_SPEED));
-               if (this.dolphin.isInWater()) {
-                  this.dolphin.setSpeed(var10 * 0.02F);
-                  float var11 = -((float)(Mth.atan2(var3, (double)Mth.sqrt(var1 * var1 + var5 * var5)) * 57.2957763671875D));
-                  var11 = Mth.clamp(Mth.wrapDegrees(var11), -85.0F, 85.0F);
-                  this.dolphin.xRot = this.rotlerp(this.dolphin.xRot, var11, 5.0F);
-                  float var12 = Mth.cos(this.dolphin.xRot * 0.017453292F);
-                  float var13 = Mth.sin(this.dolphin.xRot * 0.017453292F);
-                  this.dolphin.zza = var12 * var10;
-                  this.dolphin.yya = -var13 * var10;
-               } else {
-                  this.dolphin.setSpeed(var10 * 0.1F);
-               }
-
-            }
-         } else {
-            this.dolphin.setSpeed(0.0F);
-            this.dolphin.setXxa(0.0F);
-            this.dolphin.setYya(0.0F);
-            this.dolphin.setZza(0.0F);
-         }
-      }
-   }
 }
