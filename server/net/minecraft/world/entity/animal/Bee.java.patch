--- net/minecraft/world/entity/animal/Bee.java
+++ net/minecraft/world/entity/animal/Bee.java
@@ -24,18 +24,19 @@
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.tags.BlockTags;
 import net.minecraft.tags.ItemTags;
 import net.minecraft.tags.Tag;
-import net.minecraft.util.IntRange;
 import net.minecraft.util.Mth;
 import net.minecraft.util.TimeUtil;
+import net.minecraft.util.VisibleForDebug;
+import net.minecraft.util.valueproviders.UniformInt;
 import net.minecraft.world.Difficulty;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.effect.MobEffectInstance;
 import net.minecraft.world.effect.MobEffects;
-import net.minecraft.world.entity.AgableMob;
+import net.minecraft.world.entity.AgeableMob;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
@@ -49,18 +50,21 @@
 import net.minecraft.world.entity.ai.control.LookControl;
 import net.minecraft.world.entity.ai.goal.BreedGoal;
 import net.minecraft.world.entity.ai.goal.FloatGoal;
 import net.minecraft.world.entity.ai.goal.FollowParentGoal;
 import net.minecraft.world.entity.ai.goal.Goal;
+import net.minecraft.world.entity.ai.goal.GoalSelector;
 import net.minecraft.world.entity.ai.goal.MeleeAttackGoal;
 import net.minecraft.world.entity.ai.goal.TemptGoal;
 import net.minecraft.world.entity.ai.goal.target.HurtByTargetGoal;
 import net.minecraft.world.entity.ai.goal.target.NearestAttackableTargetGoal;
 import net.minecraft.world.entity.ai.goal.target.ResetUniversalAngerTargetGoal;
 import net.minecraft.world.entity.ai.navigation.FlyingPathNavigation;
 import net.minecraft.world.entity.ai.navigation.PathNavigation;
-import net.minecraft.world.entity.ai.util.RandomPos;
+import net.minecraft.world.entity.ai.util.AirAndWaterRandomPos;
+import net.minecraft.world.entity.ai.util.AirRandomPos;
+import net.minecraft.world.entity.ai.util.HoverRandomPos;
 import net.minecraft.world.entity.ai.village.poi.PoiManager;
 import net.minecraft.world.entity.ai.village.poi.PoiRecord;
 import net.minecraft.world.entity.ai.village.poi.PoiType;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
@@ -83,33 +87,59 @@
 import net.minecraft.world.level.pathfinder.BlockPathTypes;
 import net.minecraft.world.level.pathfinder.Path;
 import net.minecraft.world.phys.Vec3;
 
 public class Bee extends Animal implements NeutralMob, FlyingAnimal {
+   public static final float FLAP_DEGREES_PER_TICK = 120.32113F;
+   public static final int TICKS_PER_FLAP = Mth.ceil(1.4959966F);
    private static final EntityDataAccessor<Byte> DATA_FLAGS_ID;
    private static final EntityDataAccessor<Integer> DATA_REMAINING_ANGER_TIME;
-   private static final IntRange PERSISTENT_ANGER_TIME;
+   private static final int FLAG_ROLL = 2;
+   private static final int FLAG_HAS_STUNG = 4;
+   private static final int FLAG_HAS_NECTAR = 8;
+   private static final int STING_DEATH_COUNTDOWN = 1200;
+   private static final int TICKS_BEFORE_GOING_TO_KNOWN_FLOWER = 2400;
+   private static final int TICKS_WITHOUT_NECTAR_BEFORE_GOING_HOME = 3600;
+   private static final int MIN_ATTACK_DIST = 4;
+   private static final int MAX_CROPS_GROWABLE = 10;
+   private static final int POISON_SECONDS_NORMAL = 10;
+   private static final int POISON_SECONDS_HARD = 18;
+   private static final int TOO_FAR_DISTANCE = 32;
+   private static final int HIVE_CLOSE_ENOUGH_DISTANCE = 2;
+   private static final int PATHFIND_TO_HIVE_WHEN_CLOSER_THAN = 16;
+   private static final int HIVE_SEARCH_DISTANCE = 20;
+   public static final String TAG_CROPS_GROWN_SINCE_POLLINATION = "CropsGrownSincePollination";
+   public static final String TAG_CANNOT_ENTER_HIVE_TICKS = "CannotEnterHiveTicks";
+   public static final String TAG_TICKS_SINCE_POLLINATION = "TicksSincePollination";
+   public static final String TAG_HAS_STUNG = "HasStung";
+   public static final String TAG_HAS_NECTAR = "HasNectar";
+   public static final String TAG_FLOWER_POS = "FlowerPos";
+   public static final String TAG_HIVE_POS = "HivePos";
+   private static final UniformInt PERSISTENT_ANGER_TIME;
    private UUID persistentAngerTarget;
    private float rollAmount;
    private float rollAmountO;
    private int timeSinceSting;
    private int ticksWithoutNectarSinceExitingHive;
    private int stayOutOfHiveCountdown;
    private int numCropsGrownSincePollination;
-   private int remainingCooldownBeforeLocatingNewHive = 0;
-   private int remainingCooldownBeforeLocatingNewFlower = 0;
+   private static final int COOLDOWN_BEFORE_LOCATING_NEW_HIVE = 200;
+   private int remainingCooldownBeforeLocatingNewHive;
+   private static final int COOLDOWN_BEFORE_LOCATING_NEW_FLOWER = 200;
+   private int remainingCooldownBeforeLocatingNewFlower;
    @Nullable
-   private BlockPos savedFlowerPos = null;
+   private BlockPos savedFlowerPos;
    @Nullable
-   private BlockPos hivePos = null;
+   private BlockPos hivePos;
    private Bee.BeePollinateGoal beePollinateGoal;
    private Bee.BeeGoToHiveGoal goToHiveGoal;
    private Bee.BeeGoToKnownFlowerGoal goToKnownFlowerGoal;
    private int underWaterTicks;
 
    public Bee(EntityType<? extends Bee> var1, Level var2) {
       super(var1, var2);
+      this.remainingCooldownBeforeLocatingNewFlower = Mth.nextInt(this.random, 20, 60);
       this.moveControl = new FlyingMoveControl(this, 20, true);
       this.lookControl = new Bee.BeeLookControl(this);
       this.setPathfindingMalus(BlockPathTypes.DANGER_FIRE, -1.0F);
       this.setPathfindingMalus(BlockPathTypes.WATER, -1.0F);
       this.setPathfindingMalus(BlockPathTypes.WATER_BORDER, 16.0F);
@@ -181,11 +211,11 @@
       this.setHasNectar(var1.getBoolean("HasNectar"));
       this.setHasStung(var1.getBoolean("HasStung"));
       this.ticksWithoutNectarSinceExitingHive = var1.getInt("TicksSincePollination");
       this.stayOutOfHiveCountdown = var1.getInt("CannotEnterHiveTicks");
       this.numCropsGrownSincePollination = var1.getInt("CropsGrownSincePollination");
-      this.readPersistentAngerSaveData((ServerLevel)this.level, var1);
+      this.readPersistentAngerSaveData(this.level, var1);
    }
 
    public boolean doHurtTarget(Entity var1) {
       boolean var2 = var1.hurt(DamageSource.sting(this), (float)((int)this.getAttributeValue(Attributes.ATTACK_DAMAGE)));
       if (var2) {
@@ -244,11 +274,11 @@
       if (var8 < 15) {
          var6 = var8 / 2;
          var7 = var8 / 2;
       }
 
-      Vec3 var9 = RandomPos.getAirPosTowards(this, var6, var7, var3, var2, 0.3141592741012573D);
+      Vec3 var9 = AirRandomPos.getPosTowards(this, var6, var7, var3, var2, 0.3141592741012573D);
       if (var9 != null) {
          this.navigation.setMaxVisitedNodesMultiplier(0.5F);
          this.navigation.moveTo(var9.x, var9.y, var9.z, 1.0D);
       }
    }
@@ -264,10 +294,20 @@
 
    public void setSavedFlowerPos(BlockPos var1) {
       this.savedFlowerPos = var1;
    }
 
+   @VisibleForDebug
+   public int getTravellingTicks() {
+      return Math.max(this.goToHiveGoal.travellingTicks, this.goToKnownFlowerGoal.travellingTicks);
+   }
+
+   @VisibleForDebug
+   public List<BlockPos> getBlacklistedHives() {
+      return this.goToHiveGoal.blacklistedTargets;
+   }
+
    private boolean isTiredOfLookingForNectar() {
       return this.ticksWithoutNectarSinceExitingHive > 3600;
    }
 
    private boolean wantsToEnterHive() {
@@ -281,10 +321,14 @@
 
    public void setStayOutOfHiveCountdown(int var1) {
       this.stayOutOfHiveCountdown = var1;
    }
 
+   public float getRollAmount(float var1) {
+      return Mth.lerp(var1, this.rollAmountO, this.rollAmount);
+   }
+
    private void updateRollAmount() {
       this.rollAmountO = this.rollAmount;
       if (this.isRolling()) {
          this.rollAmount = Math.min(1.0F, this.rollAmount + 0.2F);
       } else {
@@ -305,11 +349,11 @@
          this.hurt(DamageSource.DROWN, 1.0F);
       }
 
       if (var1) {
          ++this.timeSinceSting;
-         if (this.timeSinceSting % 5 == 0 && this.random.nextInt(Mth.clamp(1200 - this.timeSinceSting, 1, 1200)) == 0) {
+         if (this.timeSinceSting % 5 == 0 && this.random.nextInt(Mth.clamp((int)(1200 - this.timeSinceSting), (int)1, (int)1200)) == 0) {
             this.hurt(DamageSource.GENERIC, this.getHealth());
          }
       }
 
       if (!this.hasNectar()) {
@@ -350,11 +394,11 @@
    public void setPersistentAngerTarget(@Nullable UUID var1) {
       this.persistentAngerTarget = var1;
    }
 
    public void startPersistentAngerTimer() {
-      this.setRemainingPersistentAngerTime(PERSISTENT_ANGER_TIME.randomValue(this.random));
+      this.setRemainingPersistentAngerTime(PERSISTENT_ANGER_TIME.sample(this.random));
    }
 
    private boolean doesHiveHaveSpace(BlockPos var1) {
       BlockEntity var2 = this.level.getBlockEntity(var1);
       if (var2 instanceof BeehiveBlockEntity) {
@@ -362,19 +406,26 @@
       } else {
          return false;
       }
    }
 
+   @VisibleForDebug
    public boolean hasHive() {
       return this.hivePos != null;
    }
 
    @Nullable
+   @VisibleForDebug
    public BlockPos getHivePos() {
       return this.hivePos;
    }
 
+   @VisibleForDebug
+   public GoalSelector getGoalSelector() {
+      return this.goalSelector;
+   }
+
    protected void sendDebugPackets() {
       super.sendDebugPackets();
       DebugPackets.sendBeeInfo(this);
    }
 
@@ -489,15 +540,15 @@
       var2.setCanPassDoors(true);
       return var2;
    }
 
    public boolean isFood(ItemStack var1) {
-      return var1.getItem().is(ItemTags.FLOWERS);
+      return var1.is((Tag)ItemTags.FLOWERS);
    }
 
    private boolean isFlowerValid(BlockPos var1) {
-      return this.level.isLoaded(var1) && this.level.getBlockState(var1).getBlock().is((Tag)BlockTags.FLOWERS);
+      return this.level.isLoaded(var1) && this.level.getBlockState(var1).is(BlockTags.FLOWERS);
    }
 
    protected void playStepSound(BlockPos var1, BlockState var2) {
    }
 
@@ -515,39 +566,42 @@
 
    protected float getSoundVolume() {
       return 0.4F;
    }
 
-   public Bee getBreedOffspring(ServerLevel var1, AgableMob var2) {
+   public Bee getBreedOffspring(ServerLevel var1, AgeableMob var2) {
       return (Bee)EntityType.BEE.create(var1);
    }
 
    protected float getStandingEyeHeight(Pose var1, EntityDimensions var2) {
       return this.isBaby() ? var2.height * 0.5F : var2.height * 0.5F;
    }
 
-   public boolean causeFallDamage(float var1, float var2) {
+   public boolean causeFallDamage(float var1, float var2, DamageSource var3) {
       return false;
    }
 
    protected void checkFallDamage(double var1, boolean var3, BlockState var4, BlockPos var5) {
    }
 
-   protected boolean makeFlySound() {
-      return true;
+   public boolean isFlapping() {
+      return this.isFlying() && this.tickCount % TICKS_PER_FLAP == 0;
    }
 
+   public boolean isFlying() {
+      return !this.onGround;
+   }
+
    public void dropOffNectar() {
       this.setHasNectar(false);
       this.resetNumCropsGrownSincePollination();
    }
 
    public boolean hurt(DamageSource var1, float var2) {
       if (this.isInvulnerableTo(var1)) {
          return false;
       } else {
-         Entity var3 = var1.getEntity();
          if (!this.level.isClientSide) {
             this.beePollinateGoal.stopPollinating();
          }
 
          return super.hurt(var1, var2);
@@ -560,10 +614,14 @@
 
    protected void jumpInLiquid(Tag<Fluid> var1) {
       this.setDeltaMovement(this.getDeltaMovement().add(0.0D, 0.01D, 0.0D));
    }
 
+   public Vec3 getLeashOffset() {
+      return new Vec3(0.0D, (double)(0.5F * this.getEyeHeight()), (double)(this.getBbWidth() * 0.2F));
+   }
+
    private boolean closerThan(BlockPos var1, int var2) {
       return var1.closerThan(this.blockPosition(), (double)var2);
    }
 
    static {
@@ -620,10 +678,12 @@
          return super.canContinueToUse() && Bee.this.isAngry() && !Bee.this.hasStung();
       }
    }
 
    class BeeGrowCropGoal extends Bee.BaseBeeGoal {
+      static final int GROW_CHANCE = 30;
+
       private BeeGrowCropGoal() {
          super(null);
       }
 
       public boolean canBeeUse() {
@@ -646,11 +706,11 @@
                BlockPos var2 = Bee.this.blockPosition().below(var1);
                BlockState var3 = Bee.this.level.getBlockState(var2);
                Block var4 = var3.getBlock();
                boolean var5 = false;
                IntegerProperty var6 = null;
-               if (var4.is((Tag)BlockTags.BEE_GROWABLES)) {
+               if (var3.is(BlockTags.BEE_GROWABLES)) {
                   if (var4 instanceof CropBlock) {
                      CropBlock var7 = (CropBlock)var4;
                      if (!var7.isMaxAge(var3)) {
                         var5 = true;
                         var6 = var7.getAgeProperty();
@@ -661,11 +721,11 @@
                         var8 = (Integer)var3.getValue(StemBlock.AGE);
                         if (var8 < 7) {
                            var5 = true;
                            var6 = StemBlock.AGE;
                         }
-                     } else if (var4 == Blocks.SWEET_BERRY_BUSH) {
+                     } else if (var3.is(Blocks.SWEET_BERRY_BUSH)) {
                         var8 = (Integer)var3.getValue(SweetBerryBushBlock.AGE);
                         if (var8 < 3) {
                            var5 = true;
                            var6 = SweetBerryBushBlock.AGE;
                         }
@@ -731,10 +791,13 @@
          })).collect(Collectors.toList());
       }
    }
 
    class BeePollinateGoal extends Bee.BaseBeeGoal {
+      private static final int MIN_POLLINATION_TICKS = 400;
+      private static final int MIN_FIND_FLOWER_RETRY_COOLDOWN = 20;
+      private static final int MAX_FIND_FLOWER_RETRY_COOLDOWN = 60;
       private final Predicate<BlockState> VALID_POLLINATION_BLOCKS = (var0) -> {
          if (var0.is(BlockTags.TALL_FLOWERS)) {
             if (var0.is(Blocks.SUNFLOWER)) {
                return var0.getValue(DoublePlantBlock.HALF) == DoubleBlockHalf.UPPER;
             } else {
@@ -742,15 +805,21 @@
             }
          } else {
             return var0.is(BlockTags.SMALL_FLOWERS);
          }
       };
-      private int successfulPollinatingTicks = 0;
-      private int lastSoundPlayedTick = 0;
+      private static final double ARRIVAL_THRESHOLD = 0.1D;
+      private static final int POSITION_CHANGE_CHANCE = 25;
+      private static final float SPEED_MODIFIER = 0.35F;
+      private static final float HOVER_HEIGHT_WITHIN_FLOWER = 0.6F;
+      private static final float HOVER_POS_OFFSET = 0.33333334F;
+      private int successfulPollinatingTicks;
+      private int lastSoundPlayedTick;
       private boolean pollinating;
       private Vec3 hoverPos;
-      private int pollinatingTicks = 0;
+      private int pollinatingTicks;
+      private static final int MAX_POLLINATING_TICKS = 600;
 
       BeePollinateGoal() {
          super(null);
          this.setFlags(EnumSet.of(Goal.Flag.MOVE));
       }
@@ -760,19 +829,18 @@
             return false;
          } else if (Bee.this.hasNectar()) {
             return false;
          } else if (Bee.this.level.isRaining()) {
             return false;
-         } else if (Bee.this.random.nextFloat() < 0.7F) {
-            return false;
          } else {
             Optional var1 = this.findNearbyFlower();
             if (var1.isPresent()) {
                Bee.this.savedFlowerPos = (BlockPos)var1.get();
                Bee.this.navigation.moveTo((double)Bee.this.savedFlowerPos.getX() + 0.5D, (double)Bee.this.savedFlowerPos.getY() + 0.5D, (double)Bee.this.savedFlowerPos.getZ() + 0.5D, 1.2000000476837158D);
                return true;
             } else {
+               Bee.this.remainingCooldownBeforeLocatingNewFlower = Mth.nextInt(Bee.this.random, 20, 60);
                return false;
             }
          }
       }
 
@@ -917,10 +985,11 @@
          return !Bee.this.beePollinateGoal.isPollinating();
       }
    }
 
    public class BeeGoToKnownFlowerGoal extends Bee.BaseBeeGoal {
+      private static final int MAX_TRAVELLING_TICKS = 600;
       private int travellingTicks;
 
       BeeGoToKnownFlowerGoal() {
          super(null);
          this.travellingTicks = Bee.this.level.random.nextInt(10);
@@ -964,22 +1033,25 @@
       private boolean wantsToGoToKnownFlower() {
          return Bee.this.ticksWithoutNectarSinceExitingHive > 2400;
       }
    }
 
+   @VisibleForDebug
    public class BeeGoToHiveGoal extends Bee.BaseBeeGoal {
+      public static final int MAX_TRAVELLING_TICKS = 600;
       private int travellingTicks;
-      private List<BlockPos> blacklistedTargets;
+      private static final int MAX_BLACKLISTED_TARGETS = 3;
+      private final List<BlockPos> blacklistedTargets;
       @Nullable
       private Path lastPath;
+      private static final int TICKS_BEFORE_HIVE_DROP = 60;
       private int ticksStuck;
 
       BeeGoToHiveGoal() {
          super(null);
          this.travellingTicks = Bee.this.level.random.nextInt(10);
          this.blacklistedTargets = Lists.newArrayList();
-         this.lastPath = null;
          this.setFlags(EnumSet.of(Goal.Flag.MOVE));
       }
 
       public boolean canBeeUse() {
          return Bee.this.hivePos != null && !Bee.this.hasRestriction() && Bee.this.wantsToEnterHive() && !this.hasReachedTarget(Bee.this.hivePos) && Bee.this.level.getBlockState(Bee.this.hivePos).is(BlockTags.BEEHIVES);
@@ -1078,10 +1150,12 @@
          }
       }
    }
 
    class BeeWanderGoal extends Goal {
+      private static final int WANDER_THRESHOLD = 22;
+
       BeeWanderGoal() {
          this.setFlags(EnumSet.of(Goal.Flag.MOVE));
       }
 
       public boolean canUse() {
@@ -1109,12 +1183,12 @@
          } else {
             var1 = Bee.this.getViewVector(0.0F);
          }
 
          boolean var4 = true;
-         Vec3 var3 = RandomPos.getAboveLandPos(Bee.this, 8, 7, var1, 1.5707964F, 2, 1);
-         return var3 != null ? var3 : RandomPos.getAirPos(Bee.this, 8, 4, -2, var1, 1.5707963705062866D);
+         Vec3 var3 = HoverRandomPos.getPos(Bee.this, 8, 7, var1.x, var1.z, 1.5707964F, 3, 1);
+         return var3 != null ? var3 : AirAndWaterRandomPos.getPos(Bee.this, 8, 4, -2, var1.x, var1.z, 1.5707963705062866D);
       }
    }
 
    abstract class BaseBeeGoal extends Goal {
       private BaseBeeGoal() {
