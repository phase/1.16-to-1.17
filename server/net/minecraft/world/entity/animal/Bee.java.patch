--- net/minecraft/world/entity/animal/Bee.java
+++ net/minecraft/world/entity/animal/Bee.java
@@ -31,11 +31,11 @@
 import net.minecraft.util.TimeUtil;
 import net.minecraft.world.Difficulty;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.effect.MobEffectInstance;
 import net.minecraft.world.effect.MobEffects;
-import net.minecraft.world.entity.AgableMob;
+import net.minecraft.world.entity.AgeableMob;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
@@ -56,11 +56,13 @@
 import net.minecraft.world.entity.ai.goal.target.HurtByTargetGoal;
 import net.minecraft.world.entity.ai.goal.target.NearestAttackableTargetGoal;
 import net.minecraft.world.entity.ai.goal.target.ResetUniversalAngerTargetGoal;
 import net.minecraft.world.entity.ai.navigation.FlyingPathNavigation;
 import net.minecraft.world.entity.ai.navigation.PathNavigation;
-import net.minecraft.world.entity.ai.util.RandomPos;
+import net.minecraft.world.entity.ai.util.AirAndWaterRandomPos;
+import net.minecraft.world.entity.ai.util.AirRandomPos;
+import net.minecraft.world.entity.ai.util.HoverRandomPos;
 import net.minecraft.world.entity.ai.village.poi.PoiManager;
 import net.minecraft.world.entity.ai.village.poi.PoiRecord;
 import net.minecraft.world.entity.ai.village.poi.PoiType;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
@@ -93,23 +95,24 @@
    private float rollAmountO;
    private int timeSinceSting;
    private int ticksWithoutNectarSinceExitingHive;
    private int stayOutOfHiveCountdown;
    private int numCropsGrownSincePollination;
-   private int remainingCooldownBeforeLocatingNewHive = 0;
-   private int remainingCooldownBeforeLocatingNewFlower = 0;
+   private int remainingCooldownBeforeLocatingNewHive;
+   private int remainingCooldownBeforeLocatingNewFlower;
    @Nullable
-   private BlockPos savedFlowerPos = null;
+   private BlockPos savedFlowerPos;
    @Nullable
-   private BlockPos hivePos = null;
+   private BlockPos hivePos;
    private Bee.BeePollinateGoal beePollinateGoal;
    private Bee.BeeGoToHiveGoal goToHiveGoal;
    private Bee.BeeGoToKnownFlowerGoal goToKnownFlowerGoal;
    private int underWaterTicks;
 
    public Bee(EntityType<? extends Bee> var1, Level var2) {
       super(var1, var2);
+      this.remainingCooldownBeforeLocatingNewFlower = Mth.nextInt(this.random, 20, 60);
       this.moveControl = new FlyingMoveControl(this, 20, true);
       this.lookControl = new Bee.BeeLookControl(this);
       this.setPathfindingMalus(BlockPathTypes.DANGER_FIRE, -1.0F);
       this.setPathfindingMalus(BlockPathTypes.WATER, -1.0F);
       this.setPathfindingMalus(BlockPathTypes.WATER_BORDER, 16.0F);
@@ -181,11 +184,11 @@
       this.setHasNectar(var1.getBoolean("HasNectar"));
       this.setHasStung(var1.getBoolean("HasStung"));
       this.ticksWithoutNectarSinceExitingHive = var1.getInt("TicksSincePollination");
       this.stayOutOfHiveCountdown = var1.getInt("CannotEnterHiveTicks");
       this.numCropsGrownSincePollination = var1.getInt("CropsGrownSincePollination");
-      this.readPersistentAngerSaveData((ServerLevel)this.level, var1);
+      this.readPersistentAngerSaveData(this.level, var1);
    }
 
    public boolean doHurtTarget(Entity var1) {
       boolean var2 = var1.hurt(DamageSource.sting(this), (float)((int)this.getAttributeValue(Attributes.ATTACK_DAMAGE)));
       if (var2) {
@@ -244,11 +247,11 @@
       if (var8 < 15) {
          var6 = var8 / 2;
          var7 = var8 / 2;
       }
 
-      Vec3 var9 = RandomPos.getAirPosTowards(this, var6, var7, var3, var2, 0.3141592741012573D);
+      Vec3 var9 = AirRandomPos.getPosTowards(this, var6, var7, var3, var2, 0.3141592741012573D);
       if (var9 != null) {
          this.navigation.setMaxVisitedNodesMultiplier(0.5F);
          this.navigation.moveTo(var9.x, var9.y, var9.z, 1.0D);
       }
    }
@@ -489,15 +492,15 @@
       var2.setCanPassDoors(true);
       return var2;
    }
 
    public boolean isFood(ItemStack var1) {
-      return var1.getItem().is(ItemTags.FLOWERS);
+      return var1.is((Tag)ItemTags.FLOWERS);
    }
 
    private boolean isFlowerValid(BlockPos var1) {
-      return this.level.isLoaded(var1) && this.level.getBlockState(var1).getBlock().is((Tag)BlockTags.FLOWERS);
+      return this.level.isLoaded(var1) && this.level.getBlockState(var1).is(BlockTags.FLOWERS);
    }
 
    protected void playStepSound(BlockPos var1, BlockState var2) {
    }
 
@@ -515,19 +518,19 @@
 
    protected float getSoundVolume() {
       return 0.4F;
    }
 
-   public Bee getBreedOffspring(ServerLevel var1, AgableMob var2) {
+   public Bee getBreedOffspring(ServerLevel var1, AgeableMob var2) {
       return (Bee)EntityType.BEE.create(var1);
    }
 
    protected float getStandingEyeHeight(Pose var1, EntityDimensions var2) {
       return this.isBaby() ? var2.height * 0.5F : var2.height * 0.5F;
    }
 
-   public boolean causeFallDamage(float var1, float var2) {
+   public boolean causeFallDamage(float var1, float var2, DamageSource var3) {
       return false;
    }
 
    protected void checkFallDamage(double var1, boolean var3, BlockState var4, BlockPos var5) {
    }
@@ -543,11 +546,10 @@
 
    public boolean hurt(DamageSource var1, float var2) {
       if (this.isInvulnerableTo(var1)) {
          return false;
       } else {
-         Entity var3 = var1.getEntity();
          if (!this.level.isClientSide) {
             this.beePollinateGoal.stopPollinating();
          }
 
          return super.hurt(var1, var2);
@@ -646,11 +648,11 @@
                BlockPos var2 = Bee.this.blockPosition().below(var1);
                BlockState var3 = Bee.this.level.getBlockState(var2);
                Block var4 = var3.getBlock();
                boolean var5 = false;
                IntegerProperty var6 = null;
-               if (var4.is((Tag)BlockTags.BEE_GROWABLES)) {
+               if (var3.is(BlockTags.BEE_GROWABLES)) {
                   if (var4 instanceof CropBlock) {
                      CropBlock var7 = (CropBlock)var4;
                      if (!var7.isMaxAge(var3)) {
                         var5 = true;
                         var6 = var7.getAgeProperty();
@@ -661,11 +663,11 @@
                         var8 = (Integer)var3.getValue(StemBlock.AGE);
                         if (var8 < 7) {
                            var5 = true;
                            var6 = StemBlock.AGE;
                         }
-                     } else if (var4 == Blocks.SWEET_BERRY_BUSH) {
+                     } else if (var3.is(Blocks.SWEET_BERRY_BUSH)) {
                         var8 = (Integer)var3.getValue(SweetBerryBushBlock.AGE);
                         if (var8 < 3) {
                            var5 = true;
                            var6 = SweetBerryBushBlock.AGE;
                         }
@@ -742,15 +744,15 @@
             }
          } else {
             return var0.is(BlockTags.SMALL_FLOWERS);
          }
       };
-      private int successfulPollinatingTicks = 0;
-      private int lastSoundPlayedTick = 0;
+      private int successfulPollinatingTicks;
+      private int lastSoundPlayedTick;
       private boolean pollinating;
       private Vec3 hoverPos;
-      private int pollinatingTicks = 0;
+      private int pollinatingTicks;
 
       BeePollinateGoal() {
          super(null);
          this.setFlags(EnumSet.of(Goal.Flag.MOVE));
       }
@@ -760,19 +762,18 @@
             return false;
          } else if (Bee.this.hasNectar()) {
             return false;
          } else if (Bee.this.level.isRaining()) {
             return false;
-         } else if (Bee.this.random.nextFloat() < 0.7F) {
-            return false;
          } else {
             Optional var1 = this.findNearbyFlower();
             if (var1.isPresent()) {
                Bee.this.savedFlowerPos = (BlockPos)var1.get();
                Bee.this.navigation.moveTo((double)Bee.this.savedFlowerPos.getX() + 0.5D, (double)Bee.this.savedFlowerPos.getY() + 0.5D, (double)Bee.this.savedFlowerPos.getZ() + 0.5D, 1.2000000476837158D);
                return true;
             } else {
+               Bee.this.remainingCooldownBeforeLocatingNewFlower = Mth.nextInt(Bee.this.random, 20, 60);
                return false;
             }
          }
       }
 
@@ -966,20 +967,19 @@
       }
    }
 
    public class BeeGoToHiveGoal extends Bee.BaseBeeGoal {
       private int travellingTicks;
-      private List<BlockPos> blacklistedTargets;
+      private final List<BlockPos> blacklistedTargets;
       @Nullable
       private Path lastPath;
       private int ticksStuck;
 
       BeeGoToHiveGoal() {
          super(null);
          this.travellingTicks = Bee.this.level.random.nextInt(10);
          this.blacklistedTargets = Lists.newArrayList();
-         this.lastPath = null;
          this.setFlags(EnumSet.of(Goal.Flag.MOVE));
       }
 
       public boolean canBeeUse() {
          return Bee.this.hivePos != null && !Bee.this.hasRestriction() && Bee.this.wantsToEnterHive() && !this.hasReachedTarget(Bee.this.hivePos) && Bee.this.level.getBlockState(Bee.this.hivePos).is(BlockTags.BEEHIVES);
@@ -1109,12 +1109,12 @@
          } else {
             var1 = Bee.this.getViewVector(0.0F);
          }
 
          boolean var4 = true;
-         Vec3 var3 = RandomPos.getAboveLandPos(Bee.this, 8, 7, var1, 1.5707964F, 2, 1);
-         return var3 != null ? var3 : RandomPos.getAirPos(Bee.this, 8, 4, -2, var1, 1.5707963705062866D);
+         Vec3 var3 = HoverRandomPos.getPos(Bee.this, 8, 7, var1.x, var1.z, 1.5707964F, 3, 1);
+         return var3 != null ? var3 : AirAndWaterRandomPos.getPos(Bee.this, 8, 4, -2, var1.x, var1.z, 1.5707963705062866D);
       }
    }
 
    abstract class BaseBeeGoal extends Goal {
       private BaseBeeGoal() {
