--- net/minecraft/world/entity/animal/Cat.java
+++ net/minecraft/world/entity/animal/Cat.java
@@ -16,17 +16,16 @@
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.tags.BlockTags;
-import net.minecraft.tags.Tag;
 import net.minecraft.util.Mth;
 import net.minecraft.world.DifficultyInstance;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.damagesource.DamageSource;
-import net.minecraft.world.entity.AgableMob;
+import net.minecraft.world.entity.AgeableMob;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
 import net.minecraft.world.entity.EntitySelector;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
@@ -223,20 +222,20 @@
 
    public static AttributeSupplier.Builder createAttributes() {
       return Mob.createMobAttributes().add(Attributes.MAX_HEALTH, 10.0D).add(Attributes.MOVEMENT_SPEED, 0.30000001192092896D).add(Attributes.ATTACK_DAMAGE, 3.0D);
    }
 
-   public boolean causeFallDamage(float var1, float var2) {
+   public boolean causeFallDamage(float var1, float var2, DamageSource var3) {
       return false;
    }
 
-   protected void usePlayerItem(Player var1, ItemStack var2) {
-      if (this.isFood(var2)) {
+   protected void usePlayerItem(Player var1, InteractionHand var2, ItemStack var3) {
+      if (this.isFood(var3)) {
          this.playSound(SoundEvents.CAT_EAT, 1.0F, 1.0F);
       }
 
-      super.usePlayerItem(var1, var2);
+      super.usePlayerItem(var1, var2, var3);
    }
 
    private float getAttackDamage() {
       return (float)this.getAttributeValue(Attributes.ATTACK_DAMAGE);
    }
@@ -284,11 +283,11 @@
          this.relaxStateOneAmount = Math.max(0.0F, this.relaxStateOneAmount - 0.13F);
       }
 
    }
 
-   public Cat getBreedOffspring(ServerLevel var1, AgableMob var2) {
+   public Cat getBreedOffspring(ServerLevel var1, AgeableMob var2) {
       Cat var3 = (Cat)EntityType.CAT.create(var1);
       if (var2 instanceof Cat) {
          if (this.random.nextBoolean()) {
             var3.setCatType(this.getCatType());
          } else {
@@ -351,11 +350,11 @@
          InteractionResult var6;
          if (this.isTame()) {
             if (this.isOwnedBy(var1)) {
                if (!(var4 instanceof DyeItem)) {
                   if (var4.isEdible() && this.isFood(var3) && this.getHealth() < this.getMaxHealth()) {
-                     this.usePlayerItem(var1, var3);
+                     this.usePlayerItem(var1, var2, var3);
                      this.heal((float)var4.getFoodProperties().getNutrition());
                      return InteractionResult.CONSUME;
                   }
 
                   var6 = super.mobInteract(var1, var2);
@@ -367,20 +366,20 @@
                }
 
                DyeColor var5 = ((DyeItem)var4).getDyeColor();
                if (var5 != this.getCollarColor()) {
                   this.setCollarColor(var5);
-                  if (!var1.abilities.instabuild) {
+                  if (!var1.getAbilities().instabuild) {
                      var3.shrink(1);
                   }
 
                   this.setPersistenceRequired();
                   return InteractionResult.CONSUME;
                }
             }
          } else if (this.isFood(var3)) {
-            this.usePlayerItem(var1, var3);
+            this.usePlayerItem(var1, var2, var3);
             if (this.random.nextInt(3) == 0) {
                this.tame(var1);
                this.setOrderedToSit(true);
                this.level.broadcastEntityEvent(this, (byte)7);
             } else {
@@ -472,11 +471,11 @@
                   return false;
                }
 
                BlockPos var2 = this.ownerPlayer.blockPosition();
                BlockState var3 = this.cat.level.getBlockState(var2);
-               if (var3.getBlock().is((Tag)BlockTags.BEDS)) {
+               if (var3.is(BlockTags.BEDS)) {
                   this.goalPos = (BlockPos)var3.getOptionalValue(BedBlock.FACING).map((var1x) -> {
                      return var2.relative(var1x.getOpposite());
                   }).orElseGet(() -> {
                      return new BlockPos(var2);
                   });
