--- net/minecraft/world/entity/animal/Sheep.java
+++ net/minecraft/world/entity/animal/Sheep.java
@@ -1,10 +1,11 @@
 package net.minecraft.world.entity.animal;
 
 import com.google.common.collect.Maps;
 import java.util.Arrays;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.Random;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
 import net.minecraft.Util;
@@ -16,15 +17,16 @@
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
+import net.minecraft.util.Mth;
 import net.minecraft.world.DifficultyInstance;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.damagesource.DamageSource;
-import net.minecraft.world.entity.AgableMob;
+import net.minecraft.world.entity.AgeableMob;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.MobSpawnType;
@@ -56,13 +58,15 @@
 import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.ServerLevelAccessor;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.storage.loot.BuiltInLootTables;
 
 public class Sheep extends Animal implements Shearable {
+   private static final int EAT_ANIMATION_TICKS = 40;
    private static final EntityDataAccessor<Byte> DATA_WOOL_ID;
    private static final Map<DyeColor, ItemLike> ITEM_BY_DYE;
    private static final Map<DyeColor, float[]> COLORARRAY_BY_COLOR;
    private int eatAnimationTick;
    private EatBlockGoal eatBlockGoal;
@@ -75,10 +79,14 @@
          float var2 = 0.75F;
          return new float[]{var1[0] * 0.75F, var1[1] * 0.75F, var1[2] * 0.75F};
       }
    }
 
+   public static float[] getColorArray(DyeColor var0) {
+      return (float[])COLORARRAY_BY_COLOR.get(var0);
+   }
+
    public Sheep(EntityType<? extends Sheep> var1, Level var2) {
       super(var1, var2);
    }
 
    protected void registerGoals() {
@@ -156,15 +164,44 @@
             return BuiltInLootTables.SHEEP_BLACK;
          }
       }
    }
 
+   public void handleEntityEvent(byte var1) {
+      if (var1 == 10) {
+         this.eatAnimationTick = 40;
+      } else {
+         super.handleEntityEvent(var1);
+      }
+
+   }
+
+   public float getHeadEatPositionScale(float var1) {
+      if (this.eatAnimationTick <= 0) {
+         return 0.0F;
+      } else if (this.eatAnimationTick >= 4 && this.eatAnimationTick <= 36) {
+         return 1.0F;
+      } else {
+         return this.eatAnimationTick < 4 ? ((float)this.eatAnimationTick - var1) / 4.0F : -((float)(this.eatAnimationTick - 40) - var1) / 4.0F;
+      }
+   }
+
+   public float getHeadEatAngleScale(float var1) {
+      if (this.eatAnimationTick > 4 && this.eatAnimationTick <= 36) {
+         float var2 = ((float)(this.eatAnimationTick - 4) - var1) / 32.0F;
+         return 0.62831855F + 0.21991149F * Mth.sin(var2 * 28.7F);
+      } else {
+         return this.eatAnimationTick > 0 ? 0.62831855F : this.getXRot() * 0.017453292F;
+      }
+   }
+
    public InteractionResult mobInteract(Player var1, InteractionHand var2) {
       ItemStack var3 = var1.getItemInHand(var2);
-      if (var3.getItem() == Items.SHEARS) {
+      if (var3.is(Items.SHEARS)) {
          if (!this.level.isClientSide && this.readyForShearing()) {
             this.shear(SoundSource.PLAYERS);
+            this.gameEvent(GameEvent.SHEAR, var1);
             var3.hurtAndBreak(1, var1, (var1x) -> {
                var1x.broadcastBreakEvent(var2);
             });
             return InteractionResult.SUCCESS;
          } else {
@@ -257,11 +294,11 @@
       } else {
          return var0.nextInt(500) == 0 ? DyeColor.PINK : DyeColor.WHITE;
       }
    }
 
-   public Sheep getBreedOffspring(ServerLevel var1, AgableMob var2) {
+   public Sheep getBreedOffspring(ServerLevel var1, AgeableMob var2) {
       Sheep var3 = (Sheep)var2;
       Sheep var4 = (Sheep)EntityType.SHEEP.create(var1);
       var4.setColor(this.getOffspringColor(this, var3));
       return var4;
    }
@@ -285,13 +322,13 @@
       DyeColor var4 = ((Sheep)var2).getColor();
       CraftingContainer var5 = makeContainer(var3, var4);
       Optional var10000 = this.level.getRecipeManager().getRecipeFor(RecipeType.CRAFTING, var5, this.level).map((var1x) -> {
          return var1x.assemble(var5);
       }).map(ItemStack::getItem);
-      DyeItem.class.getClass();
+      Objects.requireNonNull(DyeItem.class);
       var10000 = var10000.filter(DyeItem.class::isInstance);
-      DyeItem.class.getClass();
+      Objects.requireNonNull(DyeItem.class);
       return (DyeColor)var10000.map(DyeItem.class::cast).map(DyeItem::getDyeColor).orElseGet(() -> {
          return this.level.random.nextBoolean() ? var3 : var4;
       });
    }
 
