--- net/minecraft/world/entity/npc/AbstractVillager.java
+++ net/minecraft/world/entity/npc/AbstractVillager.java
@@ -3,39 +3,45 @@
 import com.google.common.collect.Sets;
 import java.util.HashSet;
 import java.util.Iterator;
 import javax.annotation.Nullable;
 import net.minecraft.advancements.CriteriaTriggers;
+import net.minecraft.core.particles.ParticleOptions;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.EntityDataSerializers;
 import net.minecraft.network.syncher.SynchedEntityData;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
+import net.minecraft.util.Mth;
 import net.minecraft.world.DifficultyInstance;
 import net.minecraft.world.SimpleContainer;
 import net.minecraft.world.damagesource.DamageSource;
-import net.minecraft.world.entity.AgableMob;
+import net.minecraft.world.entity.AgeableMob;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.Pose;
+import net.minecraft.world.entity.SlotAccess;
 import net.minecraft.world.entity.SpawnGroupData;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.trading.Merchant;
 import net.minecraft.world.item.trading.MerchantOffer;
 import net.minecraft.world.item.trading.MerchantOffers;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.ServerLevelAccessor;
 import net.minecraft.world.level.pathfinder.BlockPathTypes;
+import net.minecraft.world.phys.Vec3;
 
-public abstract class AbstractVillager extends AgableMob implements Npc, Merchant {
+public abstract class AbstractVillager extends AgeableMob implements InventoryCarrier, Npc, Merchant {
    private static final EntityDataAccessor<Integer> DATA_UNHAPPY_COUNTER;
+   public static final int VILLAGER_SLOT_OFFSET = 300;
+   private static final int VILLAGER_INVENTORY_SIZE = 8;
    @Nullable
    private Player tradingPlayer;
    @Nullable
    protected MerchantOffers offers;
    private final SimpleContainer inventory = new SimpleContainer(8);
@@ -46,11 +52,11 @@
       this.setPathfindingMalus(BlockPathTypes.DAMAGE_FIRE, -1.0F);
    }
 
    public SpawnGroupData finalizeSpawn(ServerLevelAccessor var1, DifficultyInstance var2, MobSpawnType var3, @Nullable SpawnGroupData var4, @Nullable CompoundTag var5) {
       if (var4 == null) {
-         var4 = new AgableMob.AgableMobGroupData(false);
+         var4 = new AgeableMob.AgeableMobGroupData(false);
       }
 
       return super.finalizeSpawn(var1, var2, var3, (SpawnGroupData)var4, var5);
    }
 
@@ -95,10 +101,13 @@
       }
 
       return this.offers;
    }
 
+   public void overrideOffers(@Nullable MerchantOffers var1) {
+   }
+
    public void overrideXp(int var1) {
    }
 
    public void notifyTrade(MerchantOffer var1) {
       var1.increaseUses();
@@ -168,30 +177,31 @@
    public void die(DamageSource var1) {
       super.die(var1);
       this.stopTrading();
    }
 
+   protected void addParticlesAroundSelf(ParticleOptions var1) {
+      for(int var2 = 0; var2 < 5; ++var2) {
+         double var3 = this.random.nextGaussian() * 0.02D;
+         double var5 = this.random.nextGaussian() * 0.02D;
+         double var7 = this.random.nextGaussian() * 0.02D;
+         this.level.addParticle(var1, this.getRandomX(1.0D), this.getRandomY() + 1.0D, this.getRandomZ(1.0D), var3, var5, var7);
+      }
+
+   }
+
    public boolean canBeLeashed(Player var1) {
       return false;
    }
 
    public SimpleContainer getInventory() {
       return this.inventory;
    }
 
-   public boolean setSlot(int var1, ItemStack var2) {
-      if (super.setSlot(var1, var2)) {
-         return true;
-      } else {
-         int var3 = var1 - 300;
-         if (var3 >= 0 && var3 < this.inventory.getContainerSize()) {
-            this.inventory.setItem(var3, var2);
-            return true;
-         } else {
-            return false;
-         }
-      }
+   public SlotAccess getSlot(int var1) {
+      int var2 = var1 - 300;
+      return var2 >= 0 && var2 < this.inventory.getContainerSize() ? SlotAccess.forContainer(this.inventory, var2) : super.getSlot(var1);
    }
 
    public Level getLevel() {
       return this.level;
    }
@@ -221,9 +231,15 @@
          }
       }
 
    }
 
+   public Vec3 getRopeHoldPosition(float var1) {
+      float var2 = Mth.lerp(var1, this.yBodyRotO, this.yBodyRot) * 0.017453292F;
+      Vec3 var3 = new Vec3(0.0D, this.getBoundingBox().getYsize() - 1.0D, 0.2D);
+      return this.getPosition(var1).add(var3.yRot(-var2));
+   }
+
    static {
       DATA_UNHAPPY_COUNTER = SynchedEntityData.defineId(AbstractVillager.class, EntityDataSerializers.INT);
    }
 }
