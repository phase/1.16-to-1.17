--- net/minecraft/world/entity/boss/wither/WitherBoss.java
+++ net/minecraft/world/entity/boss/wither/WitherBoss.java
@@ -26,10 +26,11 @@
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.MobType;
+import net.minecraft.world.entity.PowerableMob;
 import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
 import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.ai.goal.Goal;
 import net.minecraft.world.entity.ai.goal.LookAtPlayerGoal;
 import net.minecraft.world.entity.ai.goal.RandomLookAroundGoal;
@@ -49,16 +50,17 @@
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.phys.Vec3;
 
-public class WitherBoss extends Monster implements RangedAttackMob {
+public class WitherBoss extends Monster implements PowerableMob, RangedAttackMob {
    private static final EntityDataAccessor<Integer> DATA_TARGET_A;
    private static final EntityDataAccessor<Integer> DATA_TARGET_B;
    private static final EntityDataAccessor<Integer> DATA_TARGET_C;
    private static final List<EntityDataAccessor<Integer>> DATA_TARGETS;
    private static final EntityDataAccessor<Integer> DATA_ID_INV;
+   private static final int INVULNERABLE_TICKS = 220;
    private final float[] xRotHeads = new float[2];
    private final float[] yRotHeads = new float[2];
    private final float[] xRotOHeads = new float[2];
    private final float[] yRotOHeads = new float[2];
    private final int[] nextHeadUpdate = new int[2];
@@ -205,10 +207,11 @@
 
    protected void customServerAiStep() {
       int var1;
       if (this.getInvulnerableTicks() > 0) {
          var1 = this.getInvulnerableTicks() - 1;
+         this.bossEvent.setProgress(1.0F - (float)var1 / 220.0F);
          if (var1 <= 0) {
             Explosion.BlockInteraction var14 = this.level.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING) ? Explosion.BlockInteraction.DESTROY : Explosion.BlockInteraction.NONE;
             this.level.explode(this, this.getX(), this.getEyeY(), this.getZ(), 7.0F, false, var14);
             if (!this.isSilent()) {
                this.level.globalLevelEvent(1023, this.blockPosition(), 0);
@@ -245,11 +248,11 @@
 
                var13 = this.getAlternativeTarget(var1);
                if (var13 > 0) {
                   Entity var16 = this.level.getEntity(var13);
                   if (var16 != null && var16.isAlive() && this.distanceToSqr(var16) <= 900.0D && this.canSee(var16)) {
-                     if (var16 instanceof Player && ((Player)var16).abilities.invulnerable) {
+                     if (var16 instanceof Player && ((Player)var16).getAbilities().invulnerable) {
                         this.setAlternativeTarget(var1, 0);
                      } else {
                         this.performRangedAttack(var1 + 1, (LivingEntity)var16);
                         this.nextHeadUpdate[var1 - 1] = this.tickCount + 40 + this.random.nextInt(20);
                         this.idleHeadUpdates[var1 - 1] = 0;
@@ -262,11 +265,11 @@
 
                   for(int var18 = 0; var18 < 10 && !var15.isEmpty(); ++var18) {
                      LivingEntity var5 = (LivingEntity)var15.get(this.random.nextInt(var15.size()));
                      if (var5 != this && var5.isAlive() && this.canSee(var5)) {
                         if (var5 instanceof Player) {
-                           if (!((Player)var5).abilities.invulnerable) {
+                           if (!((Player)var5).getAbilities().invulnerable) {
                               this.setAlternativeTarget(var1, var5.getId());
                            }
                         } else {
                            this.setAlternativeTarget(var1, var5.getId());
                         }
@@ -316,20 +319,21 @@
 
          if (this.tickCount % 20 == 0) {
             this.heal(1.0F);
          }
 
-         this.bossEvent.setPercent(this.getHealth() / this.getMaxHealth());
+         this.bossEvent.setProgress(this.getHealth() / this.getMaxHealth());
       }
    }
 
    public static boolean canDestroy(BlockState var0) {
-      return !var0.isAir() && !BlockTags.WITHER_IMMUNE.contains(var0.getBlock());
+      return !var0.isAir() && !var0.is(BlockTags.WITHER_IMMUNE);
    }
 
    public void makeInvulnerable() {
       this.setInvulnerableTicks(220);
+      this.bossEvent.setProgress(0.0F);
       this.setHealth(this.getMaxHealth() / 3.0F);
    }
 
    public void makeStuckInBlock(BlockState var1, Vec3 var2) {
    }
@@ -455,17 +459,17 @@
 
    }
 
    public void checkDespawn() {
       if (this.level.getDifficulty() == Difficulty.PEACEFUL && this.shouldDespawnInPeaceful()) {
-         this.remove();
+         this.discard();
       } else {
          this.noActionTime = 0;
       }
    }
 
-   public boolean causeFallDamage(float var1, float var2) {
+   public boolean causeFallDamage(float var1, float var2, DamageSource var3) {
       return false;
    }
 
    public boolean addEffect(MobEffectInstance var1) {
       return false;
@@ -473,10 +477,18 @@
 
    public static AttributeSupplier.Builder createAttributes() {
       return Monster.createMonsterAttributes().add(Attributes.MAX_HEALTH, 300.0D).add(Attributes.MOVEMENT_SPEED, 0.6000000238418579D).add(Attributes.FOLLOW_RANGE, 40.0D).add(Attributes.ARMOR, 4.0D);
    }
 
+   public float getHeadYRot(int var1) {
+      return this.yRotHeads[var1];
+   }
+
+   public float getHeadXRot(int var1) {
+      return this.xRotHeads[var1];
+   }
+
    public int getInvulnerableTicks() {
       return (Integer)this.entityData.get(DATA_ID_INV);
    }
 
    public void setInvulnerableTicks(int var1) {
