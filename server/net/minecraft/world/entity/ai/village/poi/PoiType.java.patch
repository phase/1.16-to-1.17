--- net/minecraft/world/entity/ai/village/poi/PoiType.java
+++ net/minecraft/world/entity/ai/village/poi/PoiType.java
@@ -31,10 +31,11 @@
    };
    public static final Predicate<PoiType> ALL = (var0) -> {
       return true;
    };
    private static final Set<BlockState> BEDS;
+   private static final Set<BlockState> CAULDRONS;
    private static final Map<BlockState, PoiType> TYPE_BY_STATE;
    public static final PoiType UNEMPLOYED;
    public static final PoiType ARMORER;
    public static final PoiType BUTCHER;
    public static final PoiType CARTOGRAPHER;
@@ -53,10 +54,11 @@
    public static final PoiType MEETING;
    public static final PoiType BEEHIVE;
    public static final PoiType BEE_NEST;
    public static final PoiType NETHER_PORTAL;
    public static final PoiType LODESTONE;
+   public static final PoiType LIGHTNING_ROD;
    protected static final Set<BlockState> ALL_STATES;
    private final String name;
    private final Set<BlockState> matchingStates;
    private final int maxTickets;
    private final Predicate<PoiType> predicate;
@@ -82,18 +84,26 @@
          return var1x == this;
       };
       this.validRange = var4;
    }
 
+   public String getName() {
+      return this.name;
+   }
+
    public int getMaxTickets() {
       return this.maxTickets;
    }
 
    public Predicate<PoiType> getPredicate() {
       return this.predicate;
    }
 
+   public boolean is(BlockState var1) {
+      return this.matchingStates.contains(var1);
+   }
+
    public int getValidRange() {
       return this.validRange;
    }
 
    public String toString() {
@@ -117,29 +127,32 @@
       });
       return var0;
    }
 
    public static Optional<PoiType> forState(BlockState var0) {
-      return Optional.ofNullable(TYPE_BY_STATE.get(var0));
+      return Optional.ofNullable((PoiType)TYPE_BY_STATE.get(var0));
    }
 
    static {
       BEDS = (Set)ImmutableList.of(Blocks.RED_BED, Blocks.BLACK_BED, Blocks.BLUE_BED, Blocks.BROWN_BED, Blocks.CYAN_BED, Blocks.GRAY_BED, Blocks.GREEN_BED, Blocks.LIGHT_BLUE_BED, Blocks.LIGHT_GRAY_BED, Blocks.LIME_BED, Blocks.MAGENTA_BED, Blocks.ORANGE_BED, Blocks.PINK_BED, Blocks.PURPLE_BED, Blocks.WHITE_BED, Blocks.YELLOW_BED).stream().flatMap((var0) -> {
          return var0.getStateDefinition().getPossibleStates().stream();
       }).filter((var0) -> {
          return var0.getValue(BedBlock.PART) == BedPart.HEAD;
       }).collect(ImmutableSet.toImmutableSet());
+      CAULDRONS = (Set)ImmutableList.of(Blocks.CAULDRON, Blocks.LAVA_CAULDRON, Blocks.WATER_CAULDRON, Blocks.POWDER_SNOW_CAULDRON).stream().flatMap((var0) -> {
+         return var0.getStateDefinition().getPossibleStates().stream();
+      }).collect(ImmutableSet.toImmutableSet());
       TYPE_BY_STATE = Maps.newHashMap();
       UNEMPLOYED = register("unemployed", ImmutableSet.of(), 1, ALL_JOBS, 1);
       ARMORER = register("armorer", getBlockStates(Blocks.BLAST_FURNACE), 1, 1);
       BUTCHER = register("butcher", getBlockStates(Blocks.SMOKER), 1, 1);
       CARTOGRAPHER = register("cartographer", getBlockStates(Blocks.CARTOGRAPHY_TABLE), 1, 1);
       CLERIC = register("cleric", getBlockStates(Blocks.BREWING_STAND), 1, 1);
       FARMER = register("farmer", getBlockStates(Blocks.COMPOSTER), 1, 1);
       FISHERMAN = register("fisherman", getBlockStates(Blocks.BARREL), 1, 1);
       FLETCHER = register("fletcher", getBlockStates(Blocks.FLETCHING_TABLE), 1, 1);
-      LEATHERWORKER = register("leatherworker", getBlockStates(Blocks.CAULDRON), 1, 1);
+      LEATHERWORKER = register("leatherworker", CAULDRONS, 1, 1);
       LIBRARIAN = register("librarian", getBlockStates(Blocks.LECTERN), 1, 1);
       MASON = register("mason", getBlockStates(Blocks.STONECUTTER), 1, 1);
       NITWIT = register("nitwit", ImmutableSet.of(), 1, 1);
       SHEPHERD = register("shepherd", getBlockStates(Blocks.LOOM), 1, 1);
       TOOLSMITH = register("toolsmith", getBlockStates(Blocks.SMITHING_TABLE), 1, 1);
@@ -148,8 +161,9 @@
       MEETING = register("meeting", getBlockStates(Blocks.BELL), 32, 6);
       BEEHIVE = register("beehive", getBlockStates(Blocks.BEEHIVE), 0, 1);
       BEE_NEST = register("bee_nest", getBlockStates(Blocks.BEE_NEST), 0, 1);
       NETHER_PORTAL = register("nether_portal", getBlockStates(Blocks.NETHER_PORTAL), 0, 1);
       LODESTONE = register("lodestone", getBlockStates(Blocks.LODESTONE), 0, 1);
+      LIGHTNING_ROD = register("lightning_rod", getBlockStates(Blocks.LIGHTNING_ROD), 0, 1);
       ALL_STATES = new ObjectOpenHashSet(TYPE_BY_STATE.keySet());
    }
 }
