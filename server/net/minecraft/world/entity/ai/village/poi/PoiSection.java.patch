--- net/minecraft/world/entity/ai/village/poi/PoiSection.java
+++ net/minecraft/world/entity/ai/village/poi/PoiSection.java
@@ -15,14 +15,14 @@
 import java.util.Set;
 import java.util.function.BiConsumer;
 import java.util.function.Consumer;
 import java.util.function.Predicate;
 import java.util.stream.Stream;
-import net.minecraft.SharedConstants;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.SectionPos;
+import net.minecraft.util.VisibleForDebug;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class PoiSection {
    private static final Logger LOGGER = LogManager.getLogger();
@@ -86,16 +86,11 @@
       if (var5 != null) {
          if (var3.equals(var5.getPoiType())) {
             return false;
          }
 
-         String var6 = "POI data mismatch: already registered at " + var2;
-         if (SharedConstants.IS_RUNNING_IN_IDE) {
-            throw (IllegalStateException)Util.pauseInIde(new IllegalStateException(var6));
-         }
-
-         LOGGER.error(var6);
+         Util.logAndPauseIfInIde("POI data mismatch: already registered at " + var2);
       }
 
       this.records.put(var4, var1);
       ((Set)this.byType.computeIfAbsent(var3, (var0) -> {
          return Sets.newHashSet();
@@ -104,18 +99,24 @@
    }
 
    public void remove(BlockPos var1) {
       PoiRecord var2 = (PoiRecord)this.records.remove(SectionPos.sectionRelativePos(var1));
       if (var2 == null) {
-         LOGGER.error("POI data mismatch: never registered at " + var1);
+         LOGGER.error((String)"POI data mismatch: never registered at {}", (Object)var1);
       } else {
          ((Set)this.byType.get(var2.getPoiType())).remove(var2);
          LOGGER.debug("Removed POI of type {} @ {}", var2::getPoiType, var2::getPos);
          this.setDirty.run();
       }
    }
 
+   @Deprecated
+   @VisibleForDebug
+   public int getFreeTickets(BlockPos var1) {
+      return (Integer)this.getPoiRecord(var1).map(PoiRecord::getFreeTickets).orElse(0);
+   }
+
    public boolean release(BlockPos var1) {
       PoiRecord var2 = (PoiRecord)this.records.get(SectionPos.sectionRelativePos(var1));
       if (var2 == null) {
          throw (IllegalStateException)Util.pauseInIde(new IllegalStateException("POI never registered at " + var1));
       } else {
@@ -124,21 +125,21 @@
          return var3;
       }
    }
 
    public boolean exists(BlockPos var1, Predicate<PoiType> var2) {
-      short var3 = SectionPos.sectionRelativePos(var1);
-      PoiRecord var4 = (PoiRecord)this.records.get(var3);
-      return var4 != null && var2.test(var4.getPoiType());
+      return this.getType(var1).filter(var2).isPresent();
    }
 
    public Optional<PoiType> getType(BlockPos var1) {
-      short var2 = SectionPos.sectionRelativePos(var1);
-      PoiRecord var3 = (PoiRecord)this.records.get(var2);
-      return var3 != null ? Optional.of(var3.getPoiType()) : Optional.empty();
+      return this.getPoiRecord(var1).map(PoiRecord::getPoiType);
    }
 
+   private Optional<PoiRecord> getPoiRecord(BlockPos var1) {
+      return Optional.ofNullable(this.records.get(SectionPos.sectionRelativePos(var1)));
+   }
+
    public void refresh(Consumer<BiConsumer<BlockPos, PoiType>> var1) {
       if (!this.isValid) {
          Short2ObjectOpenHashMap var2 = new Short2ObjectOpenHashMap(this.records);
          this.clear();
          var1.accept((var2x, var3) -> {
