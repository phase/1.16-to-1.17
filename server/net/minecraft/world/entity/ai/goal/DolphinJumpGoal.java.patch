--- net/minecraft/world/entity/ai/goal/DolphinJumpGoal.java
+++ net/minecraft/world/entity/ai/goal/DolphinJumpGoal.java
@@ -3,11 +3,10 @@
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.tags.FluidTags;
 import net.minecraft.util.Mth;
-import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.animal.Dolphin;
 import net.minecraft.world.level.material.FluidState;
 import net.minecraft.world.phys.Vec3;
 
 public class DolphinJumpGoal extends JumpGoal {
@@ -52,11 +51,11 @@
       return this.dolphin.level.getBlockState(var1.offset(var2 * var4, 1, var3 * var4)).isAir() && this.dolphin.level.getBlockState(var1.offset(var2 * var4, 2, var3 * var4)).isAir();
    }
 
    public boolean canContinueToUse() {
       double var1 = this.dolphin.getDeltaMovement().y;
-      return (var1 * var1 >= 0.029999999329447746D || this.dolphin.xRot == 0.0F || Math.abs(this.dolphin.xRot) >= 10.0F || !this.dolphin.isInWater()) && !this.dolphin.isOnGround();
+      return (var1 * var1 >= 0.029999999329447746D || this.dolphin.getXRot() == 0.0F || Math.abs(this.dolphin.getXRot()) >= 10.0F || !this.dolphin.isInWater()) && !this.dolphin.isOnGround();
    }
 
    public boolean isInterruptable() {
       return false;
    }
@@ -66,11 +65,11 @@
       this.dolphin.setDeltaMovement(this.dolphin.getDeltaMovement().add((double)var1.getStepX() * 0.6D, 0.7D, (double)var1.getStepZ() * 0.6D));
       this.dolphin.getNavigation().stop();
    }
 
    public void stop() {
-      this.dolphin.xRot = 0.0F;
+      this.dolphin.setXRot(0.0F);
    }
 
    public void tick() {
       boolean var1 = this.breached;
       if (!var1) {
@@ -81,15 +80,15 @@
       if (this.breached && !var1) {
          this.dolphin.playSound(SoundEvents.DOLPHIN_JUMP, 1.0F, 1.0F);
       }
 
       Vec3 var7 = this.dolphin.getDeltaMovement();
-      if (var7.y * var7.y < 0.029999999329447746D && this.dolphin.xRot != 0.0F) {
-         this.dolphin.xRot = Mth.rotlerp(this.dolphin.xRot, 0.0F, 0.2F);
-      } else {
-         double var3 = Math.sqrt(Entity.getHorizontalDistanceSqr(var7));
-         double var5 = Math.signum(-var7.y) * Math.acos(var3 / var7.length()) * 57.2957763671875D;
-         this.dolphin.xRot = (float)var5;
+      if (var7.y * var7.y < 0.029999999329447746D && this.dolphin.getXRot() != 0.0F) {
+         this.dolphin.setXRot(Mth.rotlerp(this.dolphin.getXRot(), 0.0F, 0.2F));
+      } else if (var7.length() > 9.999999747378752E-6D) {
+         double var3 = var7.horizontalDistance();
+         double var5 = Math.atan2(-var7.y, var3) * 57.2957763671875D;
+         this.dolphin.setXRot((float)var5);
       }
 
    }
 }
