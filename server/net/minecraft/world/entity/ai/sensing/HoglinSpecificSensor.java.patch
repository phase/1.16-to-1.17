--- net/minecraft/world/entity/ai/sensing/HoglinSpecificSensor.java
+++ net/minecraft/world/entity/ai/sensing/HoglinSpecificSensor.java
@@ -19,20 +19,20 @@
 public class HoglinSpecificSensor extends Sensor<Hoglin> {
    public HoglinSpecificSensor() {
    }
 
    public Set<MemoryModuleType<?>> requires() {
-      return ImmutableSet.of(MemoryModuleType.VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_REPELLENT, MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLIN, MemoryModuleType.NEAREST_VISIBLE_ADULT_HOGLINS, MemoryModuleType.VISIBLE_ADULT_PIGLIN_COUNT, MemoryModuleType.VISIBLE_ADULT_HOGLIN_COUNT);
+      return ImmutableSet.of(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_REPELLENT, MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLIN, MemoryModuleType.NEAREST_VISIBLE_ADULT_HOGLINS, MemoryModuleType.VISIBLE_ADULT_PIGLIN_COUNT, MemoryModuleType.VISIBLE_ADULT_HOGLIN_COUNT);
    }
 
    protected void doTick(ServerLevel var1, Hoglin var2) {
       Brain var3 = var2.getBrain();
       var3.setMemory(MemoryModuleType.NEAREST_REPELLENT, this.findNearestRepellent(var1, var2));
       Optional var4 = Optional.empty();
       int var5 = 0;
       ArrayList var6 = Lists.newArrayList();
-      List var7 = (List)var3.getMemory(MemoryModuleType.VISIBLE_LIVING_ENTITIES).orElse(Lists.newArrayList());
+      List var7 = (List)var3.getMemory(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES).orElse(Lists.newArrayList());
       Iterator var8 = var7.iterator();
 
       while(var8.hasNext()) {
          LivingEntity var9 = (LivingEntity)var8.next();
          if (var9 instanceof Piglin && !var9.isBaby()) {
