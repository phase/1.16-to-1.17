--- net/minecraft/world/entity/ai/sensing/NearestVisibleLivingEntitySensor.java
+++ net/minecraft/world/entity/ai/sensing/NearestVisibleLivingEntitySensor.java
@@ -1,0 +1,43 @@
+package net.minecraft.world.entity.ai.sensing;
+
+import com.google.common.collect.ImmutableSet;
+import java.util.Comparator;
+import java.util.List;
+import java.util.Objects;
+import java.util.Optional;
+import java.util.Set;
+import java.util.stream.Stream;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.entity.ai.memory.MemoryModuleType;
+
+public abstract class NearestVisibleLivingEntitySensor extends Sensor<LivingEntity> {
+   public NearestVisibleLivingEntitySensor() {
+   }
+
+   protected abstract boolean isMatchingEntity(LivingEntity var1, LivingEntity var2);
+
+   protected abstract MemoryModuleType<LivingEntity> getMemory();
+
+   public Set<MemoryModuleType<?>> requires() {
+      return ImmutableSet.of(this.getMemory());
+   }
+
+   protected void doTick(ServerLevel var1, LivingEntity var2) {
+      var2.getBrain().setMemory(this.getMemory(), this.getNearestEntity(var2));
+   }
+
+   private Optional<LivingEntity> getNearestEntity(LivingEntity var1) {
+      return this.getVisibleEntities(var1).flatMap((var2) -> {
+         Stream var10000 = var2.stream().filter((var2x) -> {
+            return this.isMatchingEntity(var1, var2x);
+         });
+         Objects.requireNonNull(var1);
+         return var10000.min(Comparator.comparingDouble(var1::distanceToSqr));
+      });
+   }
+
+   protected Optional<List<LivingEntity>> getVisibleEntities(LivingEntity var1) {
+      return var1.getBrain().getMemory(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES);
+   }
+}
