--- net/minecraft/world/entity/ai/behavior/InteractWith.java
+++ net/minecraft/world/entity/ai/behavior/InteractWith.java
@@ -19,11 +19,11 @@
    private final Predicate<T> targetFilter;
    private final Predicate<E> selfFilter;
    private final MemoryModuleType<T> memory;
 
    public InteractWith(EntityType<? extends T> var1, int var2, Predicate<E> var3, Predicate<T> var4, MemoryModuleType<T> var5, float var6, int var7) {
-      super(ImmutableMap.of(MemoryModuleType.LOOK_TARGET, MemoryStatus.REGISTERED, MemoryModuleType.WALK_TARGET, MemoryStatus.VALUE_ABSENT, MemoryModuleType.VISIBLE_LIVING_ENTITIES, MemoryStatus.VALUE_PRESENT));
+      super(ImmutableMap.of(MemoryModuleType.LOOK_TARGET, MemoryStatus.REGISTERED, MemoryModuleType.WALK_TARGET, MemoryStatus.VALUE_ABSENT, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryStatus.VALUE_PRESENT));
       this.type = var1;
       this.speedModifier = var6;
       this.interactionRangeSqr = var2 * var2;
       this.maxDist = var7;
       this.targetFilter = var4;
@@ -37,26 +37,32 @@
       }, (var0x) -> {
          return true;
       }, var2, var3, var4);
    }
 
+   public static <T extends LivingEntity> InteractWith<LivingEntity, T> of(EntityType<? extends T> var0, int var1, Predicate<T> var2, MemoryModuleType<T> var3, float var4, int var5) {
+      return new InteractWith(var0, var1, (var0x) -> {
+         return true;
+      }, var2, var3, var4, var5);
+   }
+
    protected boolean checkExtraStartConditions(ServerLevel var1, E var2) {
       return this.selfFilter.test(var2) && this.seesAtLeastOneValidTarget(var2);
    }
 
    private boolean seesAtLeastOneValidTarget(E var1) {
-      List var2 = (List)var1.getBrain().getMemory(MemoryModuleType.VISIBLE_LIVING_ENTITIES).get();
+      List var2 = (List)var1.getBrain().getMemory(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES).get();
       return var2.stream().anyMatch(this::isTargetValid);
    }
 
    private boolean isTargetValid(LivingEntity var1) {
       return this.type.equals(var1.getType()) && this.targetFilter.test(var1);
    }
 
    protected void start(ServerLevel var1, E var2, long var3) {
       Brain var5 = var2.getBrain();
-      var5.getMemory(MemoryModuleType.VISIBLE_LIVING_ENTITIES).ifPresent((var3x) -> {
+      var5.getMemory(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES).ifPresent((var3x) -> {
          var3x.stream().filter((var1) -> {
             return this.type.equals(var1.getType());
          }).map((var0) -> {
             return var0;
          }).filter((var2x) -> {
