--- net/minecraft/world/entity/ai/behavior/SetEntityLookTarget.java
+++ net/minecraft/world/entity/ai/behavior/SetEntityLookTarget.java
@@ -2,10 +2,11 @@
 
 import com.google.common.collect.ImmutableMap;
 import java.util.List;
 import java.util.function.Predicate;
 import net.minecraft.server.level.ServerLevel;
+import net.minecraft.tags.Tag;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.MobCategory;
 import net.minecraft.world.entity.ai.Brain;
 import net.minecraft.world.entity.ai.memory.MemoryModuleType;
@@ -13,10 +14,16 @@
 
 public class SetEntityLookTarget extends Behavior<LivingEntity> {
    private final Predicate<LivingEntity> predicate;
    private final float maxDistSqr;
 
+   public SetEntityLookTarget(Tag<EntityType<?>> var1, float var2) {
+      this((var1x) -> {
+         return var1x.getType().is(var1);
+      }, var2);
+   }
+
    public SetEntityLookTarget(MobCategory var1, float var2) {
       this((var1x) -> {
          return var1.equals(var1x.getType().getCategory());
       }, var2);
    }
@@ -32,22 +39,22 @@
          return true;
       }, var1);
    }
 
    public SetEntityLookTarget(Predicate<LivingEntity> var1, float var2) {
-      super(ImmutableMap.of(MemoryModuleType.LOOK_TARGET, MemoryStatus.VALUE_ABSENT, MemoryModuleType.VISIBLE_LIVING_ENTITIES, MemoryStatus.VALUE_PRESENT));
+      super(ImmutableMap.of(MemoryModuleType.LOOK_TARGET, MemoryStatus.VALUE_ABSENT, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryStatus.VALUE_PRESENT));
       this.predicate = var1;
       this.maxDistSqr = var2 * var2;
    }
 
    protected boolean checkExtraStartConditions(ServerLevel var1, LivingEntity var2) {
-      return ((List)var2.getBrain().getMemory(MemoryModuleType.VISIBLE_LIVING_ENTITIES).get()).stream().anyMatch(this.predicate);
+      return ((List)var2.getBrain().getMemory(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES).get()).stream().anyMatch(this.predicate);
    }
 
    protected void start(ServerLevel var1, LivingEntity var2, long var3) {
       Brain var5 = var2.getBrain();
-      var5.getMemory(MemoryModuleType.VISIBLE_LIVING_ENTITIES).ifPresent((var3x) -> {
+      var5.getMemory(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES).ifPresent((var3x) -> {
          var3x.stream().filter(this.predicate).filter((var2x) -> {
             return var2x.distanceToSqr(var2) <= (double)this.maxDistSqr;
          }).findFirst().ifPresent((var1) -> {
             var5.setMemory(MemoryModuleType.LOOK_TARGET, (Object)(new EntityTracker(var1, true)));
          });
