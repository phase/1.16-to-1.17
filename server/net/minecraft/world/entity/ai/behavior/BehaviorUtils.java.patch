--- net/minecraft/world/entity/ai/behavior/BehaviorUtils.java
+++ net/minecraft/world/entity/ai/behavior/BehaviorUtils.java
@@ -4,25 +4,29 @@
 import java.util.List;
 import java.util.Optional;
 import java.util.UUID;
 import java.util.function.Predicate;
 import java.util.stream.Stream;
+import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.SectionPos;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
+import net.minecraft.world.entity.PathfinderMob;
 import net.minecraft.world.entity.ai.Brain;
 import net.minecraft.world.entity.ai.memory.MemoryModuleType;
 import net.minecraft.world.entity.ai.memory.WalkTarget;
+import net.minecraft.world.entity.ai.util.DefaultRandomPos;
 import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.npc.Villager;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.ProjectileWeaponItem;
+import net.minecraft.world.level.pathfinder.PathComputationType;
 import net.minecraft.world.phys.Vec3;
 
 public class BehaviorUtils {
    public static void lockGazeAndWalkToEachOther(LivingEntity var0, LivingEntity var1, float var2) {
       lookAtEachOther(var0, var1);
@@ -102,14 +106,13 @@
       } else {
          return isWithinMeleeAttackRange(var0, var1);
       }
    }
 
-   public static boolean isWithinMeleeAttackRange(LivingEntity var0, LivingEntity var1) {
+   public static boolean isWithinMeleeAttackRange(Mob var0, LivingEntity var1) {
       double var2 = var0.distanceToSqr(var1.getX(), var1.getY(), var1.getZ());
-      double var4 = (double)(var0.getBbWidth() * 2.0F * var0.getBbWidth() * 2.0F + var1.getBbWidth());
-      return var2 <= var4;
+      return var2 <= var0.getMeleeAttackRangeSqr(var1);
    }
 
    public static boolean isOtherTargetMuchFurtherAwayThanCurrentAttackTarget(LivingEntity var0, LivingEntity var1, double var2) {
       Optional var4 = var0.getBrain().getMemory(MemoryModuleType.ATTACK_TARGET);
       if (!var4.isPresent()) {
@@ -137,11 +140,13 @@
    }
 
    public static Optional<LivingEntity> getLivingEntityFromUUIDMemory(LivingEntity var0, MemoryModuleType<UUID> var1) {
       Optional var2 = var0.getBrain().getMemory(var1);
       return var2.map((var1x) -> {
-         return (LivingEntity)((ServerLevel)var0.level).getEntity(var1x);
+         return ((ServerLevel)var0.level).getEntity(var1x);
+      }).map((var0x) -> {
+         return var0x instanceof LivingEntity ? (LivingEntity)var0x : null;
       });
    }
 
    public static Stream<Villager> getNearbyVillagersWithCondition(Villager var0, Predicate<Villager> var1) {
       return (Stream)var0.getBrain().getMemory(MemoryModuleType.LIVING_ENTITIES).map((var2) -> {
@@ -150,6 +155,16 @@
          }).map((var0x) -> {
             return (Villager)var0x;
          }).filter(LivingEntity::isAlive).filter(var1);
       }).orElseGet(Stream::empty);
    }
+
+   @Nullable
+   public static Vec3 getRandomSwimmablePos(PathfinderMob var0, int var1, int var2) {
+      Vec3 var3 = DefaultRandomPos.getPos(var0, var1, var2);
+
+      for(int var4 = 0; var3 != null && !var0.level.getBlockState(new BlockPos(var3)).isPathfindable(var0.level, new BlockPos(var3), PathComputationType.WATER) && var4++ < 10; var3 = DefaultRandomPos.getPos(var0, var1, var2)) {
+      }
+
+      return var3;
+   }
 }
