--- net/minecraft/world/entity/ai/behavior/PlayTagWithOtherKids.java
+++ net/minecraft/world/entity/ai/behavior/PlayTagWithOtherKids.java
@@ -15,14 +15,21 @@
 import net.minecraft.world.entity.PathfinderMob;
 import net.minecraft.world.entity.ai.Brain;
 import net.minecraft.world.entity.ai.memory.MemoryModuleType;
 import net.minecraft.world.entity.ai.memory.MemoryStatus;
 import net.minecraft.world.entity.ai.memory.WalkTarget;
-import net.minecraft.world.entity.ai.util.RandomPos;
+import net.minecraft.world.entity.ai.util.LandRandomPos;
 import net.minecraft.world.phys.Vec3;
 
 public class PlayTagWithOtherKids extends Behavior<PathfinderMob> {
+   private static final int MAX_FLEE_XZ_DIST = 20;
+   private static final int MAX_FLEE_Y_DIST = 8;
+   private static final float FLEE_SPEED_MODIFIER = 0.6F;
+   private static final float CHASE_SPEED_MODIFIER = 0.6F;
+   private static final int MAX_CHASERS_PER_TARGET = 5;
+   private static final int AVERAGE_WAIT_TIME_BETWEEN_RUNS = 10;
+
    public PlayTagWithOtherKids() {
       super(ImmutableMap.of(MemoryModuleType.VISIBLE_VILLAGER_BABIES, MemoryStatus.VALUE_PRESENT, MemoryModuleType.WALK_TARGET, MemoryStatus.VALUE_ABSENT, MemoryModuleType.LOOK_TARGET, MemoryStatus.REGISTERED, MemoryModuleType.INTERACTION_TARGET, MemoryStatus.REGISTERED));
    }
 
    protected boolean checkExtraStartConditions(ServerLevel var1, PathfinderMob var2) {
@@ -45,11 +52,11 @@
       }
    }
 
    private void fleeFromChaser(ServerLevel var1, PathfinderMob var2, LivingEntity var3) {
       for(int var4 = 0; var4 < 10; ++var4) {
-         Vec3 var5 = RandomPos.getLandPos(var2, 20, 8);
+         Vec3 var5 = LandRandomPos.getPos(var2, 20, 8);
          if (var5 != null && var1.isVillage(new BlockPos(var5))) {
             var2.getBrain().setMemory(MemoryModuleType.WALK_TARGET, (Object)(new WalkTarget(var5, 0.6F, 0)));
             return;
          }
       }
@@ -75,11 +82,11 @@
    }
 
    private Map<LivingEntity, Integer> checkHowManyChasersEachFriendHas(PathfinderMob var1) {
       HashMap var2 = Maps.newHashMap();
       this.getFriendsNearby(var1).stream().filter(this::isChasingSomeone).forEach((var2x) -> {
-         Integer var10000 = (Integer)var2.compute(this.whoAreYouChasing(var2x), (var0, var1) -> {
+         var2.compute(this.whoAreYouChasing(var2x), (var0, var1) -> {
             return var1 == null ? 1 : var1 + 1;
          });
       });
       return var2;
    }
