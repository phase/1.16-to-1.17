--- net/minecraft/world/entity/ai/targeting/TargetingConditions.java
+++ net/minecraft/world/entity/ai/targeting/TargetingConditions.java
@@ -4,44 +4,46 @@
 import javax.annotation.Nullable;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
 
 public class TargetingConditions {
-   public static final TargetingConditions DEFAULT = new TargetingConditions();
+   public static final TargetingConditions DEFAULT = forCombat();
+   private static final double MIN_VISIBILITY_DISTANCE_FOR_INVISIBLE_TARGET = 2.0D;
+   private final boolean isCombat;
    private double range = -1.0D;
-   private boolean allowInvulnerable;
-   private boolean allowSameTeam;
-   private boolean allowUnseeable;
-   private boolean allowNonAttackable;
+   private boolean checkLineOfSight = true;
    private boolean testInvisible = true;
    private Predicate<LivingEntity> selector;
 
-   public TargetingConditions() {
+   private TargetingConditions(boolean var1) {
+      this.isCombat = var1;
    }
 
-   public TargetingConditions range(double var1) {
-      this.range = var1;
-      return this;
+   public static TargetingConditions forCombat() {
+      return new TargetingConditions(true);
    }
 
-   public TargetingConditions allowInvulnerable() {
-      this.allowInvulnerable = true;
-      return this;
+   public static TargetingConditions forNonCombat() {
+      return new TargetingConditions(false);
    }
 
-   public TargetingConditions allowSameTeam() {
-      this.allowSameTeam = true;
-      return this;
+   public TargetingConditions copy() {
+      TargetingConditions var1 = this.isCombat ? forCombat() : forNonCombat();
+      var1.range = this.range;
+      var1.checkLineOfSight = this.checkLineOfSight;
+      var1.testInvisible = this.testInvisible;
+      var1.selector = this.selector;
+      return var1;
    }
 
-   public TargetingConditions allowUnseeable() {
-      this.allowUnseeable = true;
+   public TargetingConditions range(double var1) {
+      this.range = var1;
       return this;
    }
 
-   public TargetingConditions allowNonAttackable() {
-      this.allowNonAttackable = true;
+   public TargetingConditions ignoreLineOfSight() {
+      this.checkLineOfSight = false;
       return this;
    }
 
    public TargetingConditions ignoreInvisibilityTesting() {
       this.testInvisible = false;
@@ -54,31 +56,21 @@
    }
 
    public boolean test(@Nullable LivingEntity var1, LivingEntity var2) {
       if (var1 == var2) {
          return false;
-      } else if (var2.isSpectator()) {
+      } else if (!var2.canBeSeenByAnyone()) {
          return false;
-      } else if (!var2.isAlive()) {
-         return false;
-      } else if (!this.allowInvulnerable && var2.isInvulnerable()) {
-         return false;
       } else if (this.selector != null && !this.selector.test(var2)) {
          return false;
       } else {
-         if (var1 != null) {
-            if (!this.allowNonAttackable) {
-               if (!var1.canAttack(var2)) {
-                  return false;
-               }
-
-               if (!var1.canAttackType(var2.getType())) {
-                  return false;
-               }
+         if (var1 == null) {
+            if (this.isCombat && !var2.canBeSeenAsEnemy()) {
+               return false;
             }
-
-            if (!this.allowSameTeam && var1.isAlliedTo(var2)) {
+         } else {
+            if (this.isCombat && (!var1.canAttack(var2) || !var1.canAttackType(var2.getType()) || var1.isAlliedTo(var2))) {
                return false;
             }
 
             if (this.range > 0.0D) {
                double var3 = this.testInvisible ? var2.getVisibilityPercent(var1) : 1.0D;
@@ -87,11 +79,11 @@
                if (var7 > var5 * var5) {
                   return false;
                }
             }
 
-            if (!this.allowUnseeable && var1 instanceof Mob && !((Mob)var1).getSensing().canSee(var2)) {
+            if (this.checkLineOfSight && var1 instanceof Mob && !((Mob)var1).getSensing().hasLineOfSight(var2)) {
                return false;
             }
          }
 
          return true;
