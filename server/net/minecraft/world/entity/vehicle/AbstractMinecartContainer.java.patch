--- net/minecraft/world/entity/vehicle/AbstractMinecartContainer.java
+++ net/minecraft/world/entity/vehicle/AbstractMinecartContainer.java
@@ -15,39 +15,38 @@
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.MenuProvider;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.SlotAccess;
 import net.minecraft.world.entity.monster.piglin.PiglinAi;
 import net.minecraft.world.entity.player.Inventory;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.inventory.AbstractContainerMenu;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.Level;
+import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.storage.loot.LootContext;
 import net.minecraft.world.level.storage.loot.LootTable;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParamSets;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParams;
 
 public abstract class AbstractMinecartContainer extends AbstractMinecart implements Container, MenuProvider {
    private NonNullList<ItemStack> itemStacks;
-   private boolean dropEquipment;
    @Nullable
    private ResourceLocation lootTable;
    private long lootTableSeed;
 
    protected AbstractMinecartContainer(EntityType<?> var1, Level var2) {
       super(var1, var2);
       this.itemStacks = NonNullList.withSize(36, ItemStack.EMPTY);
-      this.dropEquipment = true;
    }
 
    protected AbstractMinecartContainer(EntityType<?> var1, double var2, double var4, double var6, Level var8) {
       super(var1, var8, var2, var4, var6);
       this.itemStacks = NonNullList.withSize(36, ItemStack.EMPTY);
-      this.dropEquipment = true;
    }
 
    public void destroy(DamageSource var1) {
       super.destroy(var1);
       if (this.level.getGameRules().getBoolean(GameRules.RULE_DOENTITYDROPS)) {
@@ -105,42 +104,40 @@
          var2.setCount(this.getMaxStackSize());
       }
 
    }
 
-   public boolean setSlot(int var1, ItemStack var2) {
-      if (var1 >= 0 && var1 < this.getContainerSize()) {
-         this.setItem(var1, var2);
-         return true;
-      } else {
-         return false;
-      }
+   public SlotAccess getSlot(final int var1) {
+      return var1 >= 0 && var1 < this.getContainerSize() ? new SlotAccess() {
+         public ItemStack get() {
+            return AbstractMinecartContainer.this.getItem(var1);
+         }
+
+         public boolean set(ItemStack var1x) {
+            AbstractMinecartContainer.this.setItem(var1, var1x);
+            return true;
+         }
+      } : super.getSlot(var1);
    }
 
    public void setChanged() {
    }
 
    public boolean stillValid(Player var1) {
-      if (this.removed) {
+      if (this.isRemoved()) {
          return false;
       } else {
          return var1.distanceToSqr(this) <= 64.0D;
       }
    }
 
-   @Nullable
-   public Entity changeDimension(ServerLevel var1) {
-      this.dropEquipment = false;
-      return super.changeDimension(var1);
-   }
-
-   public void remove() {
-      if (!this.level.isClientSide && this.dropEquipment) {
+   public void remove(Entity.RemovalReason var1) {
+      if (!this.level.isClientSide && var1.shouldDestroy()) {
          Containers.dropContents(this.level, (Entity)this, (Container)this);
       }
 
-      super.remove();
+      super.remove(var1);
    }
 
    protected void addAdditionalSaveData(CompoundTag var1) {
       super.addAdditionalSaveData(var1);
       if (this.lootTable != null) {
@@ -167,10 +164,11 @@
    }
 
    public InteractionResult interact(Player var1, InteractionHand var2) {
       var1.openMenu(this);
       if (!var1.level.isClientSide) {
+         this.gameEvent(GameEvent.CONTAINER_OPEN, var1);
          PiglinAi.angerNearbyPiglins(var1, true);
          return InteractionResult.CONSUME;
       } else {
          return InteractionResult.SUCCESS;
       }
@@ -181,10 +179,14 @@
       if (this.lootTable == null) {
          int var2 = 15 - AbstractContainerMenu.getRedstoneSignalFromContainer(this);
          var1 += (float)var2 * 0.001F;
       }
 
+      if (this.isInWater()) {
+         var1 *= 0.95F;
+      }
+
       this.setDeltaMovement(this.getDeltaMovement().multiply((double)var1, 0.0D, (double)var1));
    }
 
    public void unpackLootTable(@Nullable Player var1) {
       if (this.lootTable != null && this.level.getServer() != null) {
