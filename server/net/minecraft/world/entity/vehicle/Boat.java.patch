--- net/minecraft/world/entity/vehicle/Boat.java
+++ net/minecraft/world/entity/vehicle/Boat.java
@@ -86,11 +86,10 @@
    }
 
    public Boat(Level var1, double var2, double var4, double var6) {
       this(EntityType.BOAT, var1);
       this.setPos(var2, var4, var6);
-      this.setDeltaMovement(Vec3.ZERO);
       this.xo = var2;
       this.yo = var4;
       this.zo = var6;
    }
 
@@ -137,22 +136,22 @@
    }
 
    public boolean hurt(DamageSource var1, float var2) {
       if (this.isInvulnerableTo(var1)) {
          return false;
-      } else if (!this.level.isClientSide && !this.removed) {
+      } else if (!this.level.isClientSide && !this.isRemoved()) {
          this.setHurtDir(-this.getHurtDir());
          this.setHurtTime(10);
          this.setDamage(this.getDamage() + var2 * 10.0F);
          this.markHurt();
-         boolean var3 = var1.getEntity() instanceof Player && ((Player)var1.getEntity()).abilities.instabuild;
+         boolean var3 = var1.getEntity() instanceof Player && ((Player)var1.getEntity()).getAbilities().instabuild;
          if (var3 || this.getDamage() > 40.0F) {
             if (!var3 && this.level.getGameRules().getBoolean(GameRules.RULE_DOENTITYDROPS)) {
                this.spawnAtLocation(this.getDropItem());
             }
 
-            this.remove();
+            this.discard();
          }
 
          return true;
       } else {
          return true;
@@ -203,11 +202,11 @@
          return Items.DARK_OAK_BOAT;
       }
    }
 
    public boolean isPickable() {
-      return !this.removed;
+      return !this.isRemoved();
    }
 
    public Direction getMotionDirection() {
       return this.getDirection().getClockWise();
    }
@@ -234,11 +233,11 @@
       }
 
       super.tick();
       this.tickLerp();
       if (this.isControlledByLocalInstance()) {
-         if (this.getPassengers().isEmpty() || !(this.getPassengers().get(0) instanceof Player)) {
+         if (!(this.getFirstPassenger() instanceof Player)) {
             this.setPaddleState(false, false);
          }
 
          this.floatBoat();
          if (this.level.isClientSide) {
@@ -319,11 +318,13 @@
                Vec3 var3 = this.getDeltaMovement();
                if (this.bubbleColumnDirectionIsDown) {
                   this.setDeltaMovement(var3.add(0.0D, -0.7D, 0.0D));
                   this.ejectPassengers();
                } else {
-                  this.setDeltaMovement(var3.x, this.hasPassenger(Player.class) ? 2.7D : 0.6D, var3.z);
+                  this.setDeltaMovement(var3.x, this.hasPassenger((var0) -> {
+                     return var0 instanceof Player;
+                  }) ? 2.7D : 0.6D, var3.z);
                }
             }
 
             this.isAboveBubbleColumn = false;
          }
@@ -591,11 +592,11 @@
    }
 
    public void positionRider(Entity var1) {
       if (this.hasPassenger(var1)) {
          float var2 = 0.0F;
-         float var3 = (float)((this.removed ? 0.009999999776482582D : this.getPassengersRidingOffset()) + var1.getMyRidingOffset());
+         float var3 = (float)((this.isRemoved() ? 0.009999999776482582D : this.getPassengersRidingOffset()) + var1.getMyRidingOffset());
          if (this.getPassengers().size() > 1) {
             int var4 = this.getPassengers().indexOf(var1);
             if (var4 == 0) {
                var2 = 0.2F;
             } else {
@@ -694,12 +695,12 @@
                   this.fallDistance = 0.0F;
                   return;
                }
 
                this.causeFallDamage(this.fallDistance, 1.0F);
-               if (!this.level.isClientSide && !this.removed) {
-                  this.remove();
+               if (!this.level.isClientSide && !this.isRemoved()) {
+                  this.kill();
                   if (this.level.getGameRules().getBoolean(GameRules.RULE_DOENTITYDROPS)) {
                      int var6;
                      for(var6 = 0; var6 < 3; ++var6) {
                         this.spawnAtLocation(this.getBoatType().getPlanks());
                      }
@@ -767,12 +768,11 @@
       return this.getPassengers().size() < 2 && !this.isEyeInFluid(FluidTags.WATER);
    }
 
    @Nullable
    public Entity getControllingPassenger() {
-      List var1 = this.getPassengers();
-      return var1.isEmpty() ? null : (Entity)var1.get(0);
+      return this.getFirstPassenger();
    }
 
    public Packet<?> getAddEntityPacket() {
       return new ClientboundAddEntityPacket(this);
    }
