--- net/minecraft/world/entity/vehicle/Boat.java
+++ net/minecraft/world/entity/vehicle/Boat.java
@@ -1,8 +1,11 @@
 package net.minecraft.world.entity.vehicle;
 
+import com.google.common.collect.Lists;
 import com.google.common.collect.UnmodifiableIterator;
+import java.util.ArrayList;
+import java.util.Iterator;
 import java.util.List;
 import javax.annotation.Nullable;
 import net.minecraft.BlockUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
@@ -30,17 +33,19 @@
 import net.minecraft.world.entity.Pose;
 import net.minecraft.world.entity.animal.Animal;
 import net.minecraft.world.entity.animal.WaterAnimal;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.Item;
+import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.WaterlilyBlock;
 import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.material.FluidState;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.phys.shapes.BooleanOp;
 import net.minecraft.world.phys.shapes.Shapes;
@@ -52,10 +57,16 @@
    private static final EntityDataAccessor<Float> DATA_ID_DAMAGE;
    private static final EntityDataAccessor<Integer> DATA_ID_TYPE;
    private static final EntityDataAccessor<Boolean> DATA_ID_PADDLE_LEFT;
    private static final EntityDataAccessor<Boolean> DATA_ID_PADDLE_RIGHT;
    private static final EntityDataAccessor<Integer> DATA_ID_BUBBLE_TIME;
+   public static final int PADDLE_LEFT = 0;
+   public static final int PADDLE_RIGHT = 1;
+   private static final int TIME_TO_EJECT = 60;
+   private static final double PADDLE_SPEED = 0.39269909262657166D;
+   public static final double PADDLE_SOUND_TIME = 0.7853981852531433D;
+   public static final int BUBBLE_TIME = 60;
    private final float[] paddlePositions;
    private float invFriction;
    private float outOfControlTicks;
    private float deltaRotation;
    private int lerpSteps;
@@ -86,22 +97,21 @@
    }
 
    public Boat(Level var1, double var2, double var4, double var6) {
       this(EntityType.BOAT, var1);
       this.setPos(var2, var4, var6);
-      this.setDeltaMovement(Vec3.ZERO);
       this.xo = var2;
       this.yo = var4;
       this.zo = var6;
    }
 
    protected float getEyeHeight(Pose var1, EntityDimensions var2) {
       return var2.height;
    }
 
-   protected boolean isMovementNoisy() {
-      return false;
+   protected Entity.MovementEmission getMovementEmission() {
+      return Entity.MovementEmission.NONE;
    }
 
    protected void defineSynchedData() {
       this.entityData.define(DATA_ID_HURT, 0);
       this.entityData.define(DATA_ID_HURTDIR, 1);
@@ -137,22 +147,23 @@
    }
 
    public boolean hurt(DamageSource var1, float var2) {
       if (this.isInvulnerableTo(var1)) {
          return false;
-      } else if (!this.level.isClientSide && !this.removed) {
+      } else if (!this.level.isClientSide && !this.isRemoved()) {
          this.setHurtDir(-this.getHurtDir());
          this.setHurtTime(10);
          this.setDamage(this.getDamage() + var2 * 10.0F);
          this.markHurt();
-         boolean var3 = var1.getEntity() instanceof Player && ((Player)var1.getEntity()).abilities.instabuild;
+         this.gameEvent(GameEvent.ENTITY_DAMAGED, var1.getEntity());
+         boolean var3 = var1.getEntity() instanceof Player && ((Player)var1.getEntity()).getAbilities().instabuild;
          if (var3 || this.getDamage() > 40.0F) {
             if (!var3 && this.level.getGameRules().getBoolean(GameRules.RULE_DOENTITYDROPS)) {
                this.spawnAtLocation(this.getDropItem());
             }
 
-            this.remove();
+            this.discard();
          }
 
          return true;
       } else {
          return true;
@@ -171,10 +182,11 @@
       this.level.addParticle(ParticleTypes.SPLASH, this.getX() + (double)this.random.nextFloat(), this.getY() + 0.7D, this.getZ() + (double)this.random.nextFloat(), 0.0D, 0.0D, 0.0D);
       if (this.random.nextInt(20) == 0) {
          this.level.playLocalSound(this.getX(), this.getY(), this.getZ(), this.getSwimSplashSound(), this.getSoundSource(), 1.0F, 0.8F + 0.4F * this.random.nextFloat(), false);
       }
 
+      this.gameEvent(GameEvent.SPLASH, this.getControllingPassenger());
    }
 
    public void push(Entity var1) {
       if (var1 instanceof Boat) {
          if (var1.getBoundingBox().minY < this.getBoundingBox().maxY) {
@@ -202,14 +214,29 @@
       case DARK_OAK:
          return Items.DARK_OAK_BOAT;
       }
    }
 
+   public void animateHurt() {
+      this.setHurtDir(-this.getHurtDir());
+      this.setHurtTime(10);
+      this.setDamage(this.getDamage() * 11.0F);
+   }
+
    public boolean isPickable() {
-      return !this.removed;
+      return !this.isRemoved();
    }
 
+   public void lerpTo(double var1, double var3, double var5, float var7, float var8, int var9, boolean var10) {
+      this.lerpX = var1;
+      this.lerpY = var3;
+      this.lerpZ = var5;
+      this.lerpYRot = (double)var7;
+      this.lerpXRot = (double)var8;
+      this.lerpSteps = 10;
+   }
+
    public Direction getMotionDirection() {
       return this.getDirection().getClockWise();
    }
 
    public void tick() {
@@ -234,11 +261,11 @@
       }
 
       super.tick();
       this.tickLerp();
       if (this.isControlledByLocalInstance()) {
-         if (this.getPassengers().isEmpty() || !(this.getPassengers().get(0) instanceof Player)) {
+         if (!(this.getFirstPassenger() instanceof Player)) {
             this.setPaddleState(false, false);
          }
 
          this.floatBoat();
          if (this.level.isClientSide) {
@@ -260,10 +287,11 @@
                if (var2 != null) {
                   Vec3 var3 = this.getViewVector(1.0F);
                   double var4 = var1 == 1 ? -var3.z : var3.z;
                   double var6 = var1 == 1 ? var3.x : -var3.x;
                   this.level.playSound((Player)null, this.getX() + var4, this.getY(), this.getZ() + var6, var2, this.getSoundSource(), 1.0F, 0.8F + 0.4F * this.random.nextFloat());
+                  this.level.gameEvent(this.getControllingPassenger(), GameEvent.SPLASH, new BlockPos(this.getX() + var4, this.getY(), this.getZ() + var6));
                }
             }
 
             float[] var10000 = this.paddlePositions;
             var10000[var1] = (float)((double)var10000[var1] + 0.39269909262657166D);
@@ -319,11 +347,13 @@
                Vec3 var3 = this.getDeltaMovement();
                if (this.bubbleColumnDirectionIsDown) {
                   this.setDeltaMovement(var3.add(0.0D, -0.7D, 0.0D));
                   this.ejectPassengers();
                } else {
-                  this.setDeltaMovement(var3.x, this.hasPassenger(Player.class) ? 2.7D : 0.6D, var3.z);
+                  this.setDeltaMovement(var3.x, this.hasPassenger((var0) -> {
+                     return var0 instanceof Player;
+                  }) ? 2.7D : 0.6D, var3.z);
                }
             }
 
             this.isAboveBubbleColumn = false;
          }
@@ -354,24 +384,28 @@
 
       if (this.lerpSteps > 0) {
          double var1 = this.getX() + (this.lerpX - this.getX()) / (double)this.lerpSteps;
          double var3 = this.getY() + (this.lerpY - this.getY()) / (double)this.lerpSteps;
          double var5 = this.getZ() + (this.lerpZ - this.getZ()) / (double)this.lerpSteps;
-         double var7 = Mth.wrapDegrees(this.lerpYRot - (double)this.yRot);
-         this.yRot = (float)((double)this.yRot + var7 / (double)this.lerpSteps);
-         this.xRot = (float)((double)this.xRot + (this.lerpXRot - (double)this.xRot) / (double)this.lerpSteps);
+         double var7 = Mth.wrapDegrees(this.lerpYRot - (double)this.getYRot());
+         this.setYRot(this.getYRot() + (float)var7 / (float)this.lerpSteps);
+         this.setXRot(this.getXRot() + (float)(this.lerpXRot - (double)this.getXRot()) / (float)this.lerpSteps);
          --this.lerpSteps;
          this.setPos(var1, var3, var5);
-         this.setRot(this.yRot, this.xRot);
+         this.setRot(this.getYRot(), this.getXRot());
       }
    }
 
    public void setPaddleState(boolean var1, boolean var2) {
       this.entityData.set(DATA_ID_PADDLE_LEFT, var1);
       this.entityData.set(DATA_ID_PADDLE_RIGHT, var2);
    }
 
+   public float getRowingTime(int var1, float var2) {
+      return this.getPaddleState(var1) ? (float)Mth.clampedLerp((double)this.paddlePositions[var1] - 0.39269909262657166D, (double)this.paddlePositions[var1], (double)var2) : 0.0F;
+   }
+
    private Boat.Status getStatus() {
       Boat.Status var1 = this.isUnderwater();
       if (var1 != null) {
          this.waterLevel = this.getBoundingBox().maxY;
          return var1;
@@ -466,11 +500,11 @@
       int var4 = Mth.floor(var1.minY);
       int var5 = Mth.ceil(var1.minY + 0.001D);
       int var6 = Mth.floor(var1.minZ);
       int var7 = Mth.ceil(var1.maxZ);
       boolean var8 = false;
-      this.waterLevel = Double.MIN_VALUE;
+      this.waterLevel = -1.7976931348623157E308D;
       BlockPos.MutableBlockPos var9 = new BlockPos.MutableBlockPos();
 
       for(int var10 = var2; var10 < var3; ++var10) {
          for(int var11 = var4; var11 < var5; ++var11) {
             for(int var12 = var6; var12 < var7; ++var12) {
@@ -574,28 +608,28 @@
 
          if (this.inputRight != this.inputLeft && !this.inputUp && !this.inputDown) {
             var1 += 0.005F;
          }
 
-         this.yRot += this.deltaRotation;
+         this.setYRot(this.getYRot() + this.deltaRotation);
          if (this.inputUp) {
             var1 += 0.04F;
          }
 
          if (this.inputDown) {
             var1 -= 0.005F;
          }
 
-         this.setDeltaMovement(this.getDeltaMovement().add((double)(Mth.sin(-this.yRot * 0.017453292F) * var1), 0.0D, (double)(Mth.cos(this.yRot * 0.017453292F) * var1)));
+         this.setDeltaMovement(this.getDeltaMovement().add((double)(Mth.sin(-this.getYRot() * 0.017453292F) * var1), 0.0D, (double)(Mth.cos(this.getYRot() * 0.017453292F) * var1)));
          this.setPaddleState(this.inputRight && !this.inputLeft || this.inputUp, this.inputLeft && !this.inputRight || this.inputUp);
       }
    }
 
    public void positionRider(Entity var1) {
       if (this.hasPassenger(var1)) {
          float var2 = 0.0F;
-         float var3 = (float)((this.removed ? 0.009999999776482582D : this.getPassengersRidingOffset()) + var1.getMyRidingOffset());
+         float var3 = (float)((this.isRemoved() ? 0.009999999776482582D : this.getPassengersRidingOffset()) + var1.getMyRidingOffset());
          if (this.getPassengers().size() > 1) {
             int var4 = this.getPassengers().indexOf(var1);
             if (var4 == 0) {
                var2 = 0.2F;
             } else {
@@ -605,13 +639,13 @@
             if (var1 instanceof Animal) {
                var2 = (float)((double)var2 + 0.2D);
             }
          }
 
-         Vec3 var6 = (new Vec3((double)var2, 0.0D, 0.0D)).yRot(-this.yRot * 0.017453292F - 1.5707964F);
+         Vec3 var6 = (new Vec3((double)var2, 0.0D, 0.0D)).yRot(-this.getYRot() * 0.017453292F - 1.5707964F);
          var1.setPos(this.getX() + var6.x, this.getY() + (double)var3, this.getZ() + var6.z);
-         var1.yRot += this.deltaRotation;
+         var1.setYRot(var1.getYRot() + this.deltaRotation);
          var1.setYHeadRot(var1.getYHeadRot() + this.deltaRotation);
          this.clampRotation(var1);
          if (var1 instanceof Animal && this.getPassengers().size() > 1) {
             int var5 = var1.getId() % 2 == 0 ? 90 : 270;
             var1.setYBodyRot(((Animal)var1).yBodyRot + (float)var5);
@@ -620,48 +654,59 @@
 
       }
    }
 
    public Vec3 getDismountLocationForPassenger(LivingEntity var1) {
-      Vec3 var2 = getCollisionHorizontalEscapeVector((double)(this.getBbWidth() * Mth.SQRT_OF_TWO), (double)var1.getBbWidth(), this.yRot);
+      Vec3 var2 = getCollisionHorizontalEscapeVector((double)(this.getBbWidth() * Mth.SQRT_OF_TWO), (double)var1.getBbWidth(), var1.getYRot());
       double var3 = this.getX() + var2.x;
       double var5 = this.getZ() + var2.z;
       BlockPos var7 = new BlockPos(var3, this.getBoundingBox().maxY, var5);
       BlockPos var8 = var7.below();
       if (!this.level.isWaterAt(var8)) {
-         double var9 = (double)var7.getY() + this.level.getBlockFloorHeight(var7);
-         double var11 = (double)var7.getY() + this.level.getBlockFloorHeight(var8);
-         UnmodifiableIterator var13 = var1.getDismountPoses().iterator();
+         ArrayList var9 = Lists.newArrayList();
+         double var10 = this.level.getBlockFloorHeight(var7);
+         if (DismountHelper.isBlockFloorValid(var10)) {
+            var9.add(new Vec3(var3, (double)var7.getY() + var10, var5));
+         }
 
-         while(var13.hasNext()) {
-            Pose var14 = (Pose)var13.next();
-            Vec3 var15 = DismountHelper.findDismountLocation(this.level, var3, var9, var5, var1, var14);
-            if (var15 != null) {
-               var1.setPose(var14);
-               return var15;
-            }
+         double var12 = this.level.getBlockFloorHeight(var8);
+         if (DismountHelper.isBlockFloorValid(var12)) {
+            var9.add(new Vec3(var3, (double)var8.getY() + var12, var5));
+         }
 
-            Vec3 var16 = DismountHelper.findDismountLocation(this.level, var3, var11, var5, var1, var14);
-            if (var16 != null) {
-               var1.setPose(var14);
-               return var16;
+         UnmodifiableIterator var14 = var1.getDismountPoses().iterator();
+
+         while(var14.hasNext()) {
+            Pose var15 = (Pose)var14.next();
+            Iterator var16 = var9.iterator();
+
+            while(var16.hasNext()) {
+               Vec3 var17 = (Vec3)var16.next();
+               if (DismountHelper.canDismountTo(this.level, var17, var1, var15)) {
+                  var1.setPose(var15);
+                  return var17;
+               }
             }
          }
       }
 
       return super.getDismountLocationForPassenger(var1);
    }
 
    protected void clampRotation(Entity var1) {
-      var1.setYBodyRot(this.yRot);
-      float var2 = Mth.wrapDegrees(var1.yRot - this.yRot);
+      var1.setYBodyRot(this.getYRot());
+      float var2 = Mth.wrapDegrees(var1.getYRot() - this.getYRot());
       float var3 = Mth.clamp(var2, -105.0F, 105.0F);
       var1.yRotO += var3 - var2;
-      var1.yRot += var3 - var2;
-      var1.setYHeadRot(var1.yRot);
+      var1.setYRot(var1.getYRot() + var3 - var2);
+      var1.setYHeadRot(var1.getYRot());
    }
 
+   public void onPassengerTurned(Entity var1) {
+      this.clampRotation(var1);
+   }
+
    protected void addAdditionalSaveData(CompoundTag var1) {
       var1.putString("Type", this.getBoatType().getName());
    }
 
    protected void readAdditionalSaveData(CompoundTag var1) {
@@ -693,13 +738,13 @@
                if (this.status != Boat.Status.ON_LAND) {
                   this.fallDistance = 0.0F;
                   return;
                }
 
-               this.causeFallDamage(this.fallDistance, 1.0F);
-               if (!this.level.isClientSide && !this.removed) {
-                  this.remove();
+               this.causeFallDamage(this.fallDistance, 1.0F, DamageSource.FALL);
+               if (!this.level.isClientSide && !this.isRemoved()) {
+                  this.kill();
                   if (this.level.getGameRules().getBoolean(GameRules.RULE_DOENTITYDROPS)) {
                      int var6;
                      for(var6 = 0; var6 < 3; ++var6) {
                         this.spawnAtLocation(this.getBoatType().getPlanks());
                      }
@@ -745,10 +790,14 @@
 
    private int getBubbleTime() {
       return (Integer)this.entityData.get(DATA_ID_BUBBLE_TIME);
    }
 
+   public float getBubbleAngle(float var1) {
+      return Mth.lerp(var1, this.bubbleAngleO, this.bubbleAngle);
+   }
+
    public void setHurtDir(int var1) {
       this.entityData.set(DATA_ID_HURTDIR, var1);
    }
 
    public int getHurtDir() {
@@ -767,22 +816,32 @@
       return this.getPassengers().size() < 2 && !this.isEyeInFluid(FluidTags.WATER);
    }
 
    @Nullable
    public Entity getControllingPassenger() {
-      List var1 = this.getPassengers();
-      return var1.isEmpty() ? null : (Entity)var1.get(0);
+      return this.getFirstPassenger();
    }
 
+   public void setInput(boolean var1, boolean var2, boolean var3, boolean var4) {
+      this.inputLeft = var1;
+      this.inputRight = var2;
+      this.inputUp = var3;
+      this.inputDown = var4;
+   }
+
    public Packet<?> getAddEntityPacket() {
       return new ClientboundAddEntityPacket(this);
    }
 
    public boolean isUnderWater() {
       return this.status == Boat.Status.UNDER_WATER || this.status == Boat.Status.UNDER_FLOWING_WATER;
    }
 
+   public ItemStack getPickResult() {
+      return new ItemStack(this.getDropItem());
+   }
+
    static {
       DATA_ID_HURT = SynchedEntityData.defineId(Boat.class, EntityDataSerializers.INT);
       DATA_ID_HURTDIR = SynchedEntityData.defineId(Boat.class, EntityDataSerializers.INT);
       DATA_ID_DAMAGE = SynchedEntityData.defineId(Boat.class, EntityDataSerializers.FLOAT);
       DATA_ID_TYPE = SynchedEntityData.defineId(Boat.class, EntityDataSerializers.INT);
