--- net/minecraft/world/entity/vehicle/AbstractMinecart.java
+++ net/minecraft/world/entity/vehicle/AbstractMinecart.java
@@ -31,20 +31,22 @@
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.MoverType;
 import net.minecraft.world.entity.Pose;
 import net.minecraft.world.entity.animal.IronGolem;
 import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.BaseRailBlock;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.PoweredRailBlock;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.properties.RailShape;
+import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
 
 public abstract class AbstractMinecart extends Entity {
    private static final EntityDataAccessor<Integer> DATA_ID_HURT;
@@ -52,28 +54,31 @@
    private static final EntityDataAccessor<Float> DATA_ID_DAMAGE;
    private static final EntityDataAccessor<Integer> DATA_ID_DISPLAY_BLOCK;
    private static final EntityDataAccessor<Integer> DATA_ID_DISPLAY_OFFSET;
    private static final EntityDataAccessor<Boolean> DATA_ID_CUSTOM_DISPLAY;
    private static final ImmutableMap<Pose, ImmutableList<Integer>> POSE_DISMOUNT_HEIGHTS;
+   protected static final float WATER_SLOWDOWN_FACTOR = 0.95F;
    private boolean flipped;
    private static final Map<RailShape, Pair<Vec3i, Vec3i>> EXITS;
    private int lSteps;
    private double lx;
    private double ly;
    private double lz;
    private double lyr;
    private double lxr;
+   private double lxd;
+   private double lyd;
+   private double lzd;
 
    protected AbstractMinecart(EntityType<?> var1, Level var2) {
       super(var1, var2);
       this.blocksBuilding = true;
    }
 
    protected AbstractMinecart(EntityType<?> var1, Level var2, double var3, double var5, double var7) {
       this(var1, var2);
       this.setPos(var3, var5, var7);
-      this.setDeltaMovement(Vec3.ZERO);
       this.xo = var3;
       this.yo = var5;
       this.zo = var7;
    }
 
@@ -91,12 +96,12 @@
       } else {
          return (AbstractMinecart)(var7 == AbstractMinecart.Type.COMMAND_BLOCK ? new MinecartCommandBlock(var0, var1, var3, var5) : new Minecart(var0, var1, var3, var5));
       }
    }
 
-   protected boolean isMovementNoisy() {
-      return false;
+   protected Entity.MovementEmission getMovementEmission() {
+      return Entity.MovementEmission.EVENTS;
    }
 
    protected void defineSynchedData() {
       this.entityData.define(DATA_ID_HURT, 0);
       this.entityData.define(DATA_ID_HURTDIR, 1);
@@ -182,23 +187,24 @@
          return super.getDismountLocationForPassenger(var1);
       }
    }
 
    public boolean hurt(DamageSource var1, float var2) {
-      if (!this.level.isClientSide && !this.removed) {
+      if (!this.level.isClientSide && !this.isRemoved()) {
          if (this.isInvulnerableTo(var1)) {
             return false;
          } else {
             this.setHurtDir(-this.getHurtDir());
             this.setHurtTime(10);
             this.markHurt();
             this.setDamage(this.getDamage() + var2 * 10.0F);
-            boolean var3 = var1.getEntity() instanceof Player && ((Player)var1.getEntity()).abilities.instabuild;
+            this.gameEvent(GameEvent.ENTITY_DAMAGED, var1.getEntity());
+            boolean var3 = var1.getEntity() instanceof Player && ((Player)var1.getEntity()).getAbilities().instabuild;
             if (var3 || this.getDamage() > 40.0F) {
                this.ejectPassengers();
                if (var3 && !this.hasCustomName()) {
-                  this.remove();
+                  this.discard();
                } else {
                   this.destroy(var1);
                }
             }
 
@@ -213,11 +219,11 @@
       BlockState var1 = this.level.getBlockState(this.blockPosition());
       return var1.is(BlockTags.RAILS) ? 1.0F : super.getBlockSpeedFactor();
    }
 
    public void destroy(DamageSource var1) {
-      this.remove();
+      this.remove(Entity.RemovalReason.KILLED);
       if (this.level.getGameRules().getBoolean(GameRules.RULE_DOENTITYDROPS)) {
          ItemStack var2 = new ItemStack(Items.MINECART);
          if (this.hasCustomName()) {
             var2.setHoverName(this.getCustomName());
          }
@@ -225,12 +231,18 @@
          this.spawnAtLocation(var2);
       }
 
    }
 
+   public void animateHurt() {
+      this.setHurtDir(-this.getHurtDir());
+      this.setHurtTime(10);
+      this.setDamage(this.getDamage() + this.getDamage() * 10.0F);
+   }
+
    public boolean isPickable() {
-      return !this.removed;
+      return !this.isRemoved();
    }
 
    private static Pair<Vec3i, Vec3i> exits(RailShape var0) {
       return (Pair)EXITS.get(var0);
    }
@@ -246,73 +258,72 @@
 
       if (this.getDamage() > 0.0F) {
          this.setDamage(this.getDamage() - 1.0F);
       }
 
-      if (this.getY() < -64.0D) {
-         this.outOfWorld();
-      }
-
+      this.checkOutOfWorld();
       this.handleNetherPortal();
+      double var1;
       if (this.level.isClientSide) {
          if (this.lSteps > 0) {
-            double var15 = this.getX() + (this.lx - this.getX()) / (double)this.lSteps;
+            var1 = this.getX() + (this.lx - this.getX()) / (double)this.lSteps;
             double var16 = this.getY() + (this.ly - this.getY()) / (double)this.lSteps;
             double var17 = this.getZ() + (this.lz - this.getZ()) / (double)this.lSteps;
-            double var7 = Mth.wrapDegrees(this.lyr - (double)this.yRot);
-            this.yRot = (float)((double)this.yRot + var7 / (double)this.lSteps);
-            this.xRot = (float)((double)this.xRot + (this.lxr - (double)this.xRot) / (double)this.lSteps);
+            double var7 = Mth.wrapDegrees(this.lyr - (double)this.getYRot());
+            this.setYRot(this.getYRot() + (float)var7 / (float)this.lSteps);
+            this.setXRot(this.getXRot() + (float)(this.lxr - (double)this.getXRot()) / (float)this.lSteps);
             --this.lSteps;
-            this.setPos(var15, var16, var17);
-            this.setRot(this.yRot, this.xRot);
+            this.setPos(var1, var16, var17);
+            this.setRot(this.getYRot(), this.getXRot());
          } else {
             this.reapplyPosition();
-            this.setRot(this.yRot, this.xRot);
+            this.setRot(this.getYRot(), this.getXRot());
          }
 
       } else {
          if (!this.isNoGravity()) {
-            this.setDeltaMovement(this.getDeltaMovement().add(0.0D, -0.04D, 0.0D));
+            var1 = this.isInWater() ? -0.005D : -0.04D;
+            this.setDeltaMovement(this.getDeltaMovement().add(0.0D, var1, 0.0D));
          }
 
-         int var1 = Mth.floor(this.getX());
+         int var15 = Mth.floor(this.getX());
          int var2 = Mth.floor(this.getY());
          int var3 = Mth.floor(this.getZ());
-         if (this.level.getBlockState(new BlockPos(var1, var2 - 1, var3)).is(BlockTags.RAILS)) {
+         if (this.level.getBlockState(new BlockPos(var15, var2 - 1, var3)).is(BlockTags.RAILS)) {
             --var2;
          }
 
-         BlockPos var4 = new BlockPos(var1, var2, var3);
+         BlockPos var4 = new BlockPos(var15, var2, var3);
          BlockState var5 = this.level.getBlockState(var4);
          if (BaseRailBlock.isRail(var5)) {
             this.moveAlongTrack(var4, var5);
             if (var5.is(Blocks.ACTIVATOR_RAIL)) {
-               this.activateMinecart(var1, var2, var3, (Boolean)var5.getValue(PoweredRailBlock.POWERED));
+               this.activateMinecart(var15, var2, var3, (Boolean)var5.getValue(PoweredRailBlock.POWERED));
             }
          } else {
             this.comeOffTrack();
          }
 
          this.checkInsideBlocks();
-         this.xRot = 0.0F;
+         this.setXRot(0.0F);
          double var6 = this.xo - this.getX();
          double var8 = this.zo - this.getZ();
          if (var6 * var6 + var8 * var8 > 0.001D) {
-            this.yRot = (float)(Mth.atan2(var8, var6) * 180.0D / 3.141592653589793D);
+            this.setYRot((float)(Mth.atan2(var8, var6) * 180.0D / 3.141592653589793D));
             if (this.flipped) {
-               this.yRot += 180.0F;
+               this.setYRot(this.getYRot() + 180.0F);
             }
          }
 
-         double var10 = (double)Mth.wrapDegrees(this.yRot - this.yRotO);
+         double var10 = (double)Mth.wrapDegrees(this.getYRot() - this.yRotO);
          if (var10 < -170.0D || var10 >= 170.0D) {
-            this.yRot += 180.0F;
+            this.setYRot(this.getYRot() + 180.0F);
             this.flipped = !this.flipped;
          }
 
-         this.setRot(this.yRot, this.xRot);
-         if (this.getMinecartType() == AbstractMinecart.Type.RIDEABLE && getHorizontalDistanceSqr(this.getDeltaMovement()) > 0.01D) {
+         this.setRot(this.getYRot(), this.getXRot());
+         if (this.getMinecartType() == AbstractMinecart.Type.RIDEABLE && this.getDeltaMovement().horizontalDistanceSqr() > 0.01D) {
             List var18 = this.level.getEntities((Entity)this, this.getBoundingBox().inflate(0.20000000298023224D, 0.0D, 0.20000000298023224D), EntitySelector.pushableBy(this));
             if (!var18.isEmpty()) {
                for(int var19 = 0; var19 < var18.size(); ++var19) {
                   Entity var14 = (Entity)var18.get(var19);
                   if (!(var14 instanceof Player) && !(var14 instanceof IronGolem) && !(var14 instanceof AbstractMinecart) && !this.isVehicle() && !var14.isPassenger()) {
@@ -342,11 +353,11 @@
          this.firstTick = false;
       }
    }
 
    protected double getMaxSpeed() {
-      return 0.4D;
+      return (this.isInWater() ? 4.0D : 8.0D) / 20.0D;
    }
 
    public void activateMinecart(int var1, int var2, int var3, boolean var4) {
    }
 
@@ -372,158 +383,161 @@
       double var7 = this.getZ();
       Vec3 var9 = this.getPos(var3, var5, var7);
       var5 = (double)var1.getY();
       boolean var10 = false;
       boolean var11 = false;
-      BaseRailBlock var12 = (BaseRailBlock)var2.getBlock();
-      if (var12 == Blocks.POWERED_RAIL) {
+      if (var2.is(Blocks.POWERED_RAIL)) {
          var10 = (Boolean)var2.getValue(PoweredRailBlock.POWERED);
          var11 = !var10;
       }
 
-      double var13 = 0.0078125D;
-      Vec3 var15 = this.getDeltaMovement();
-      RailShape var16 = (RailShape)var2.getValue(var12.getShapeProperty());
-      switch(var16) {
+      double var12 = 0.0078125D;
+      if (this.isInWater()) {
+         var12 *= 0.2D;
+      }
+
+      Vec3 var14 = this.getDeltaMovement();
+      RailShape var15 = (RailShape)var2.getValue(((BaseRailBlock)var2.getBlock()).getShapeProperty());
+      switch(var15) {
       case ASCENDING_EAST:
-         this.setDeltaMovement(var15.add(-0.0078125D, 0.0D, 0.0D));
+         this.setDeltaMovement(var14.add(-var12, 0.0D, 0.0D));
          ++var5;
          break;
       case ASCENDING_WEST:
-         this.setDeltaMovement(var15.add(0.0078125D, 0.0D, 0.0D));
+         this.setDeltaMovement(var14.add(var12, 0.0D, 0.0D));
          ++var5;
          break;
       case ASCENDING_NORTH:
-         this.setDeltaMovement(var15.add(0.0D, 0.0D, 0.0078125D));
+         this.setDeltaMovement(var14.add(0.0D, 0.0D, var12));
          ++var5;
          break;
       case ASCENDING_SOUTH:
-         this.setDeltaMovement(var15.add(0.0D, 0.0D, -0.0078125D));
+         this.setDeltaMovement(var14.add(0.0D, 0.0D, -var12));
          ++var5;
       }
 
-      var15 = this.getDeltaMovement();
-      Pair var17 = exits(var16);
-      Vec3i var18 = (Vec3i)var17.getFirst();
-      Vec3i var19 = (Vec3i)var17.getSecond();
-      double var20 = (double)(var19.getX() - var18.getX());
-      double var22 = (double)(var19.getZ() - var18.getZ());
-      double var24 = Math.sqrt(var20 * var20 + var22 * var22);
-      double var26 = var15.x * var20 + var15.z * var22;
-      if (var26 < 0.0D) {
-         var20 = -var20;
-         var22 = -var22;
+      var14 = this.getDeltaMovement();
+      Pair var16 = exits(var15);
+      Vec3i var17 = (Vec3i)var16.getFirst();
+      Vec3i var18 = (Vec3i)var16.getSecond();
+      double var19 = (double)(var18.getX() - var17.getX());
+      double var21 = (double)(var18.getZ() - var17.getZ());
+      double var23 = Math.sqrt(var19 * var19 + var21 * var21);
+      double var25 = var14.x * var19 + var14.z * var21;
+      if (var25 < 0.0D) {
+         var19 = -var19;
+         var21 = -var21;
       }
 
-      double var28 = Math.min(2.0D, Math.sqrt(getHorizontalDistanceSqr(var15)));
-      var15 = new Vec3(var28 * var20 / var24, var15.y, var28 * var22 / var24);
-      this.setDeltaMovement(var15);
-      Entity var30 = this.getPassengers().isEmpty() ? null : (Entity)this.getPassengers().get(0);
-      if (var30 instanceof Player) {
-         Vec3 var31 = var30.getDeltaMovement();
-         double var32 = getHorizontalDistanceSqr(var31);
-         double var34 = getHorizontalDistanceSqr(this.getDeltaMovement());
-         if (var32 > 1.0E-4D && var34 < 0.01D) {
-            this.setDeltaMovement(this.getDeltaMovement().add(var31.x * 0.1D, 0.0D, var31.z * 0.1D));
+      double var27 = Math.min(2.0D, var14.horizontalDistance());
+      var14 = new Vec3(var27 * var19 / var23, var14.y, var27 * var21 / var23);
+      this.setDeltaMovement(var14);
+      Entity var29 = this.getFirstPassenger();
+      if (var29 instanceof Player) {
+         Vec3 var30 = var29.getDeltaMovement();
+         double var31 = var30.horizontalDistanceSqr();
+         double var33 = this.getDeltaMovement().horizontalDistanceSqr();
+         if (var31 > 1.0E-4D && var33 < 0.01D) {
+            this.setDeltaMovement(this.getDeltaMovement().add(var30.x * 0.1D, 0.0D, var30.z * 0.1D));
             var11 = false;
          }
       }
 
-      double var58;
+      double var57;
       if (var11) {
-         var58 = Math.sqrt(getHorizontalDistanceSqr(this.getDeltaMovement()));
-         if (var58 < 0.03D) {
+         var57 = this.getDeltaMovement().horizontalDistance();
+         if (var57 < 0.03D) {
             this.setDeltaMovement(Vec3.ZERO);
          } else {
             this.setDeltaMovement(this.getDeltaMovement().multiply(0.5D, 0.0D, 0.5D));
          }
       }
 
-      var58 = (double)var1.getX() + 0.5D + (double)var18.getX() * 0.5D;
-      double var33 = (double)var1.getZ() + 0.5D + (double)var18.getZ() * 0.5D;
-      double var35 = (double)var1.getX() + 0.5D + (double)var19.getX() * 0.5D;
-      double var37 = (double)var1.getZ() + 0.5D + (double)var19.getZ() * 0.5D;
-      var20 = var35 - var58;
-      var22 = var37 - var33;
-      double var39;
-      double var41;
-      double var43;
-      if (var20 == 0.0D) {
-         var39 = var7 - (double)var1.getZ();
-      } else if (var22 == 0.0D) {
-         var39 = var3 - (double)var1.getX();
+      var57 = (double)var1.getX() + 0.5D + (double)var17.getX() * 0.5D;
+      double var32 = (double)var1.getZ() + 0.5D + (double)var17.getZ() * 0.5D;
+      double var34 = (double)var1.getX() + 0.5D + (double)var18.getX() * 0.5D;
+      double var36 = (double)var1.getZ() + 0.5D + (double)var18.getZ() * 0.5D;
+      var19 = var34 - var57;
+      var21 = var36 - var32;
+      double var38;
+      double var40;
+      double var42;
+      if (var19 == 0.0D) {
+         var38 = var7 - (double)var1.getZ();
+      } else if (var21 == 0.0D) {
+         var38 = var3 - (double)var1.getX();
       } else {
-         var41 = var3 - var58;
-         var43 = var7 - var33;
-         var39 = (var41 * var20 + var43 * var22) * 2.0D;
+         var40 = var3 - var57;
+         var42 = var7 - var32;
+         var38 = (var40 * var19 + var42 * var21) * 2.0D;
       }
 
-      var3 = var58 + var20 * var39;
-      var7 = var33 + var22 * var39;
+      var3 = var57 + var19 * var38;
+      var7 = var32 + var21 * var38;
       this.setPos(var3, var5, var7);
-      var41 = this.isVehicle() ? 0.75D : 1.0D;
-      var43 = this.getMaxSpeed();
-      var15 = this.getDeltaMovement();
-      this.move(MoverType.SELF, new Vec3(Mth.clamp(var41 * var15.x, -var43, var43), 0.0D, Mth.clamp(var41 * var15.z, -var43, var43)));
-      if (var18.getY() != 0 && Mth.floor(this.getX()) - var1.getX() == var18.getX() && Mth.floor(this.getZ()) - var1.getZ() == var18.getZ()) {
+      var40 = this.isVehicle() ? 0.75D : 1.0D;
+      var42 = this.getMaxSpeed();
+      var14 = this.getDeltaMovement();
+      this.move(MoverType.SELF, new Vec3(Mth.clamp(var40 * var14.x, -var42, var42), 0.0D, Mth.clamp(var40 * var14.z, -var42, var42)));
+      if (var17.getY() != 0 && Mth.floor(this.getX()) - var1.getX() == var17.getX() && Mth.floor(this.getZ()) - var1.getZ() == var17.getZ()) {
+         this.setPos(this.getX(), this.getY() + (double)var17.getY(), this.getZ());
+      } else if (var18.getY() != 0 && Mth.floor(this.getX()) - var1.getX() == var18.getX() && Mth.floor(this.getZ()) - var1.getZ() == var18.getZ()) {
          this.setPos(this.getX(), this.getY() + (double)var18.getY(), this.getZ());
-      } else if (var19.getY() != 0 && Mth.floor(this.getX()) - var1.getX() == var19.getX() && Mth.floor(this.getZ()) - var1.getZ() == var19.getZ()) {
-         this.setPos(this.getX(), this.getY() + (double)var19.getY(), this.getZ());
       }
 
       this.applyNaturalSlowdown();
-      Vec3 var45 = this.getPos(this.getX(), this.getY(), this.getZ());
-      Vec3 var48;
-      double var49;
-      if (var45 != null && var9 != null) {
-         double var46 = (var9.y - var45.y) * 0.05D;
-         var48 = this.getDeltaMovement();
-         var49 = Math.sqrt(getHorizontalDistanceSqr(var48));
-         if (var49 > 0.0D) {
-            this.setDeltaMovement(var48.multiply((var49 + var46) / var49, 1.0D, (var49 + var46) / var49));
+      Vec3 var44 = this.getPos(this.getX(), this.getY(), this.getZ());
+      Vec3 var47;
+      double var48;
+      if (var44 != null && var9 != null) {
+         double var45 = (var9.y - var44.y) * 0.05D;
+         var47 = this.getDeltaMovement();
+         var48 = var47.horizontalDistance();
+         if (var48 > 0.0D) {
+            this.setDeltaMovement(var47.multiply((var48 + var45) / var48, 1.0D, (var48 + var45) / var48));
          }
 
-         this.setPos(this.getX(), var45.y, this.getZ());
+         this.setPos(this.getX(), var44.y, this.getZ());
       }
 
-      int var56 = Mth.floor(this.getX());
-      int var47 = Mth.floor(this.getZ());
-      if (var56 != var1.getX() || var47 != var1.getZ()) {
-         var48 = this.getDeltaMovement();
-         var49 = Math.sqrt(getHorizontalDistanceSqr(var48));
-         this.setDeltaMovement(var49 * (double)(var56 - var1.getX()), var48.y, var49 * (double)(var47 - var1.getZ()));
+      int var55 = Mth.floor(this.getX());
+      int var46 = Mth.floor(this.getZ());
+      if (var55 != var1.getX() || var46 != var1.getZ()) {
+         var47 = this.getDeltaMovement();
+         var48 = var47.horizontalDistance();
+         this.setDeltaMovement(var48 * (double)(var55 - var1.getX()), var47.y, var48 * (double)(var46 - var1.getZ()));
       }
 
       if (var10) {
-         var48 = this.getDeltaMovement();
-         var49 = Math.sqrt(getHorizontalDistanceSqr(var48));
-         if (var49 > 0.01D) {
-            double var51 = 0.06D;
-            this.setDeltaMovement(var48.add(var48.x / var49 * 0.06D, 0.0D, var48.z / var49 * 0.06D));
+         var47 = this.getDeltaMovement();
+         var48 = var47.horizontalDistance();
+         if (var48 > 0.01D) {
+            double var50 = 0.06D;
+            this.setDeltaMovement(var47.add(var47.x / var48 * 0.06D, 0.0D, var47.z / var48 * 0.06D));
          } else {
-            Vec3 var57 = this.getDeltaMovement();
-            double var52 = var57.x;
-            double var54 = var57.z;
-            if (var16 == RailShape.EAST_WEST) {
+            Vec3 var56 = this.getDeltaMovement();
+            double var51 = var56.x;
+            double var53 = var56.z;
+            if (var15 == RailShape.EAST_WEST) {
                if (this.isRedstoneConductor(var1.west())) {
-                  var52 = 0.02D;
+                  var51 = 0.02D;
                } else if (this.isRedstoneConductor(var1.east())) {
-                  var52 = -0.02D;
+                  var51 = -0.02D;
                }
             } else {
-               if (var16 != RailShape.NORTH_SOUTH) {
+               if (var15 != RailShape.NORTH_SOUTH) {
                   return;
                }
 
                if (this.isRedstoneConductor(var1.north())) {
-                  var54 = 0.02D;
+                  var53 = 0.02D;
                } else if (this.isRedstoneConductor(var1.south())) {
-                  var54 = -0.02D;
+                  var53 = -0.02D;
                }
             }
 
-            this.setDeltaMovement(var52, var57.y, var54);
+            this.setDeltaMovement(var51, var56.y, var53);
          }
       }
 
    }
 
@@ -531,14 +545,59 @@
       return this.level.getBlockState(var1).isRedstoneConductor(this.level, var1);
    }
 
    protected void applyNaturalSlowdown() {
       double var1 = this.isVehicle() ? 0.997D : 0.96D;
-      this.setDeltaMovement(this.getDeltaMovement().multiply(var1, 0.0D, var1));
+      Vec3 var3 = this.getDeltaMovement();
+      var3 = var3.multiply(var1, 0.0D, var1);
+      if (this.isInWater()) {
+         var3 = var3.scale(0.949999988079071D);
+      }
+
+      this.setDeltaMovement(var3);
    }
 
    @Nullable
+   public Vec3 getPosOffs(double var1, double var3, double var5, double var7) {
+      int var9 = Mth.floor(var1);
+      int var10 = Mth.floor(var3);
+      int var11 = Mth.floor(var5);
+      if (this.level.getBlockState(new BlockPos(var9, var10 - 1, var11)).is(BlockTags.RAILS)) {
+         --var10;
+      }
+
+      BlockState var12 = this.level.getBlockState(new BlockPos(var9, var10, var11));
+      if (BaseRailBlock.isRail(var12)) {
+         RailShape var13 = (RailShape)var12.getValue(((BaseRailBlock)var12.getBlock()).getShapeProperty());
+         var3 = (double)var10;
+         if (var13.isAscending()) {
+            var3 = (double)(var10 + 1);
+         }
+
+         Pair var14 = exits(var13);
+         Vec3i var15 = (Vec3i)var14.getFirst();
+         Vec3i var16 = (Vec3i)var14.getSecond();
+         double var17 = (double)(var16.getX() - var15.getX());
+         double var19 = (double)(var16.getZ() - var15.getZ());
+         double var21 = Math.sqrt(var17 * var17 + var19 * var19);
+         var17 /= var21;
+         var19 /= var21;
+         var1 += var17 * var7;
+         var5 += var19 * var7;
+         if (var15.getY() != 0 && Mth.floor(var1) - var9 == var15.getX() && Mth.floor(var5) - var11 == var15.getZ()) {
+            var3 += (double)var15.getY();
+         } else if (var16.getY() != 0 && Mth.floor(var1) - var9 == var16.getX() && Mth.floor(var5) - var11 == var16.getZ()) {
+            var3 += (double)var16.getY();
+         }
+
+         return this.getPos(var1, var3, var5);
+      } else {
+         return null;
+      }
+   }
+
+   @Nullable
    public Vec3 getPos(double var1, double var3, double var5) {
       int var7 = Mth.floor(var1);
       int var8 = Mth.floor(var3);
       int var9 = Mth.floor(var5);
       if (this.level.getBlockState(new BlockPos(var7, var8 - 1, var9)).is(BlockTags.RAILS)) {
@@ -584,10 +643,15 @@
       } else {
          return null;
       }
    }
 
+   public AABB getBoundingBoxForCulling() {
+      AABB var1 = this.getBoundingBox();
+      return this.hasCustomDisplay() ? var1.inflate((double)Math.abs(this.getDisplayOffset()) / 16.0D) : var1;
+   }
+
    protected void readAdditionalSaveData(CompoundTag var1) {
       if (var1.getBoolean("CustomDisplayTile")) {
          this.setDisplayBlockState(NbtUtils.readBlockState(var1.getCompound("DisplayState")));
          this.setDisplayOffset(var1.getInt("DisplayOffset"));
       }
@@ -609,11 +673,11 @@
             if (!this.hasPassenger(var1)) {
                double var2 = var1.getX() - this.getX();
                double var4 = var1.getZ() - this.getZ();
                double var6 = var2 * var2 + var4 * var4;
                if (var6 >= 9.999999747378752E-5D) {
-                  var6 = (double)Mth.sqrt(var6);
+                  var6 = Math.sqrt(var6);
                   var2 /= var6;
                   var4 /= var6;
                   double var8 = 1.0D / var6;
                   if (var8 > 1.0D) {
                      var8 = 1.0D;
@@ -621,19 +685,17 @@
 
                   var2 *= var8;
                   var4 *= var8;
                   var2 *= 0.10000000149011612D;
                   var4 *= 0.10000000149011612D;
-                  var2 *= (double)(1.0F - this.pushthrough);
-                  var4 *= (double)(1.0F - this.pushthrough);
                   var2 *= 0.5D;
                   var4 *= 0.5D;
                   if (var1 instanceof AbstractMinecart) {
                      double var10 = var1.getX() - this.getX();
                      double var12 = var1.getZ() - this.getZ();
                      Vec3 var14 = (new Vec3(var10, 0.0D, var12)).normalize();
-                     Vec3 var15 = (new Vec3((double)Mth.cos(this.yRot * 0.017453292F), 0.0D, (double)Mth.sin(this.yRot * 0.017453292F))).normalize();
+                     Vec3 var15 = (new Vec3((double)Mth.cos(this.getYRot() * 0.017453292F), 0.0D, (double)Mth.sin(this.getYRot() * 0.017453292F))).normalize();
                      double var16 = Math.abs(var14.dot(var15));
                      if (var16 < 0.800000011920929D) {
                         return;
                      }
 
@@ -664,10 +726,27 @@
             }
          }
       }
    }
 
+   public void lerpTo(double var1, double var3, double var5, float var7, float var8, int var9, boolean var10) {
+      this.lx = var1;
+      this.ly = var3;
+      this.lz = var5;
+      this.lyr = (double)var7;
+      this.lxr = (double)var8;
+      this.lSteps = var9 + 2;
+      this.setDeltaMovement(this.lxd, this.lyd, this.lzd);
+   }
+
+   public void lerpMotion(double var1, double var3, double var5) {
+      this.lxd = var1;
+      this.lyd = var3;
+      this.lzd = var5;
+      this.setDeltaMovement(this.lxd, this.lyd, this.lzd);
+   }
+
    public void setDamage(float var1) {
       this.entityData.set(DATA_ID_DAMAGE, var1);
    }
 
    public float getDamage() {
@@ -728,10 +807,35 @@
 
    public Packet<?> getAddEntityPacket() {
       return new ClientboundAddEntityPacket(this);
    }
 
+   public ItemStack getPickResult() {
+      Item var1;
+      switch(this.getMinecartType()) {
+      case FURNACE:
+         var1 = Items.FURNACE_MINECART;
+         break;
+      case CHEST:
+         var1 = Items.CHEST_MINECART;
+         break;
+      case TNT:
+         var1 = Items.TNT_MINECART;
+         break;
+      case HOPPER:
+         var1 = Items.HOPPER_MINECART;
+         break;
+      case COMMAND_BLOCK:
+         var1 = Items.COMMAND_BLOCK_MINECART;
+         break;
+      default:
+         var1 = Items.MINECART;
+      }
+
+      return new ItemStack(var1);
+   }
+
    static {
       DATA_ID_HURT = SynchedEntityData.defineId(AbstractMinecart.class, EntityDataSerializers.INT);
       DATA_ID_HURTDIR = SynchedEntityData.defineId(AbstractMinecart.class, EntityDataSerializers.INT);
       DATA_ID_DAMAGE = SynchedEntityData.defineId(AbstractMinecart.class, EntityDataSerializers.FLOAT);
       DATA_ID_DISPLAY_BLOCK = SynchedEntityData.defineId(AbstractMinecart.class, EntityDataSerializers.INT);
