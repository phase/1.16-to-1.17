--- net/minecraft/world/entity/decoration/ArmorStand.java
+++ net/minecraft/world/entity/decoration/ArmorStand.java
@@ -34,10 +34,11 @@
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.material.PushReaction;
 import net.minecraft.world.phys.Vec3;
 
 public class ArmorStand extends LivingEntity {
    private static final Rotations DEFAULT_HEAD_POSE = new Rotations(0.0F, 0.0F, 0.0F);
@@ -134,47 +135,21 @@
 
    public void setItemSlot(EquipmentSlot var1, ItemStack var2) {
       switch(var1.getType()) {
       case HAND:
          this.playEquipSound(var2);
+         this.gameEvent((Entity)null, GameEvent.ARMOR_STAND_ADD_ITEM);
          this.handItems.set(var1.getIndex(), var2);
          break;
       case ARMOR:
          this.playEquipSound(var2);
+         this.gameEvent((Entity)null, GameEvent.ARMOR_STAND_ADD_ITEM);
          this.armorItems.set(var1.getIndex(), var2);
       }
 
    }
 
-   public boolean setSlot(int var1, ItemStack var2) {
-      EquipmentSlot var3;
-      if (var1 == 98) {
-         var3 = EquipmentSlot.MAINHAND;
-      } else if (var1 == 99) {
-         var3 = EquipmentSlot.OFFHAND;
-      } else if (var1 == 100 + EquipmentSlot.HEAD.getIndex()) {
-         var3 = EquipmentSlot.HEAD;
-      } else if (var1 == 100 + EquipmentSlot.CHEST.getIndex()) {
-         var3 = EquipmentSlot.CHEST;
-      } else if (var1 == 100 + EquipmentSlot.LEGS.getIndex()) {
-         var3 = EquipmentSlot.LEGS;
-      } else {
-         if (var1 != 100 + EquipmentSlot.FEET.getIndex()) {
-            return false;
-         }
-
-         var3 = EquipmentSlot.FEET;
-      }
-
-      if (!var2.isEmpty() && !Mob.isValidSlotForItem(var3, var2) && var3 != EquipmentSlot.HEAD) {
-         return false;
-      } else {
-         this.setItemSlot(var3, var2);
-         return true;
-      }
-   }
-
    public boolean canTakeItem(ItemStack var1) {
       EquipmentSlot var2 = Mob.getEquipmentSlotForItem(var1);
       return this.getItemBySlot(var2).isEmpty() && !this.isDisabled(var2);
    }
 
@@ -310,11 +285,11 @@
 
    }
 
    public InteractionResult interactAt(Player var1, Vec3 var2, InteractionHand var3) {
       ItemStack var4 = var1.getItemInHand(var3);
-      if (!this.isMarker() && var4.getItem() != Items.NAME_TAG) {
+      if (!this.isMarker() && !var4.is(Items.NAME_TAG)) {
          if (var1.isSpectator()) {
             return InteractionResult.SUCCESS;
          } else if (var1.level.isClientSide) {
             return InteractionResult.CONSUME;
          } else {
@@ -376,11 +351,11 @@
          return false;
       } else if (var5.isEmpty() && (this.disabledSlots & 1 << var2.getFilterFlag() + 16) != 0) {
          return false;
       } else {
          ItemStack var6;
-         if (var1.abilities.instabuild && var5.isEmpty() && !var3.isEmpty()) {
+         if (var1.getAbilities().instabuild && var5.isEmpty() && !var3.isEmpty()) {
             var6 = var3.copy();
             var6.setCount(1);
             this.setItemSlot(var2, var6);
             return true;
          } else if (!var3.isEmpty() && var3.getCount() > 1) {
@@ -400,18 +375,18 @@
          }
       }
    }
 
    public boolean hurt(DamageSource var1, float var2) {
-      if (!this.level.isClientSide && !this.removed) {
+      if (!this.level.isClientSide && !this.isRemoved()) {
          if (DamageSource.OUT_OF_WORLD.equals(var1)) {
-            this.remove();
+            this.kill();
             return false;
          } else if (!this.isInvulnerableTo(var1) && !this.invisible && !this.isMarker()) {
             if (var1.isExplosion()) {
                this.brokenByAnything(var1);
-               this.remove();
+               this.kill();
                return false;
             } else if (DamageSource.IN_FIRE.equals(var1)) {
                if (this.isOnFire()) {
                   this.causeDamage(var1, 0.15F);
                } else {
@@ -426,26 +401,28 @@
                boolean var3 = var1.getDirectEntity() instanceof AbstractArrow;
                boolean var4 = var3 && ((AbstractArrow)var1.getDirectEntity()).getPierceLevel() > 0;
                boolean var5 = "player".equals(var1.getMsgId());
                if (!var5 && !var3) {
                   return false;
-               } else if (var1.getEntity() instanceof Player && !((Player)var1.getEntity()).abilities.mayBuild) {
+               } else if (var1.getEntity() instanceof Player && !((Player)var1.getEntity()).getAbilities().mayBuild) {
                   return false;
                } else if (var1.isCreativePlayer()) {
                   this.playBrokenSound();
+                  this.gameEvent(var1.getEntity(), GameEvent.ENTITY_HIT);
                   this.showBreakingParticles();
-                  this.remove();
+                  this.kill();
                   return var4;
                } else {
                   long var6 = this.level.getGameTime();
                   if (var6 - this.lastHit > 5L && !var3) {
                      this.level.broadcastEntityEvent(this, (byte)32);
+                     this.gameEvent(var1.getEntity(), GameEvent.ENTITY_HIT);
                      this.lastHit = var6;
                   } else {
                      this.brokenByPlayer(var1);
                      this.showBreakingParticles();
-                     this.remove();
+                     this.kill();
                   }
 
                   return true;
                }
             }
@@ -467,11 +444,11 @@
    private void causeDamage(DamageSource var1, float var2) {
       float var3 = this.getHealth();
       var3 -= var2;
       if (var3 <= 0.5F) {
          this.brokenByAnything(var1);
-         this.remove();
+         this.kill();
       } else {
          this.setHealth(var3);
       }
 
    }
@@ -481,10 +458,11 @@
       this.brokenByAnything(var1);
    }
 
    private void brokenByAnything(DamageSource var1) {
       this.playBrokenSound();
+      this.gameEvent(var1.getEntity(), GameEvent.BLOCK_DESTROY);
       this.dropAllDeathLoot(var1);
 
       int var2;
       ItemStack var3;
       for(var2 = 0; var2 < this.handItems.size(); ++var2) {
@@ -585,11 +563,11 @@
    public boolean isBaby() {
       return this.isSmall();
    }
 
    public void kill() {
-      this.remove();
+      this.remove(Entity.RemovalReason.KILLED);
    }
 
    public boolean ignoreExplosion() {
       return this.isInvisible();
    }
