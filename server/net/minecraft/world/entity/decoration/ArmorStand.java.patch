--- net/minecraft/world/entity/decoration/ArmorStand.java
+++ net/minecraft/world/entity/decoration/ArmorStand.java
@@ -2,10 +2,11 @@
 
 import java.util.Iterator;
 import java.util.List;
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
+import net.minecraft.core.BlockPos;
 import net.minecraft.core.NonNullList;
 import net.minecraft.core.Rotations;
 import net.minecraft.core.particles.BlockParticleOption;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.nbt.CompoundTag;
@@ -32,24 +33,39 @@
 import net.minecraft.world.entity.projectile.AbstractArrow;
 import net.minecraft.world.entity.vehicle.AbstractMinecart;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.level.Level;
+import net.minecraft.world.level.LightLayer;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.material.PushReaction;
+import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
 
 public class ArmorStand extends LivingEntity {
+   public static final int WOBBLE_TIME = 5;
+   private static final boolean ENABLE_ARMS = true;
    private static final Rotations DEFAULT_HEAD_POSE = new Rotations(0.0F, 0.0F, 0.0F);
    private static final Rotations DEFAULT_BODY_POSE = new Rotations(0.0F, 0.0F, 0.0F);
    private static final Rotations DEFAULT_LEFT_ARM_POSE = new Rotations(-10.0F, 0.0F, -10.0F);
    private static final Rotations DEFAULT_RIGHT_ARM_POSE = new Rotations(-15.0F, 0.0F, 10.0F);
    private static final Rotations DEFAULT_LEFT_LEG_POSE = new Rotations(-1.0F, 0.0F, -1.0F);
    private static final Rotations DEFAULT_RIGHT_LEG_POSE = new Rotations(1.0F, 0.0F, 1.0F);
    private static final EntityDimensions MARKER_DIMENSIONS = new EntityDimensions(0.0F, 0.0F, true);
    private static final EntityDimensions BABY_DIMENSIONS;
+   private static final double FEET_OFFSET = 0.1D;
+   private static final double CHEST_OFFSET = 0.9D;
+   private static final double LEGS_OFFSET = 0.4D;
+   private static final double HEAD_OFFSET = 1.6D;
+   public static final int DISABLE_TAKING_OFFSET = 8;
+   public static final int DISABLE_PUTTING_OFFSET = 16;
+   public static final int CLIENT_FLAG_SMALL = 1;
+   public static final int CLIENT_FLAG_SHOW_ARMS = 4;
+   public static final int CLIENT_FLAG_NO_BASEPLATE = 8;
+   public static final int CLIENT_FLAG_MARKER = 16;
    public static final EntityDataAccessor<Byte> DATA_CLIENT_FLAGS;
    public static final EntityDataAccessor<Rotations> DATA_HEAD_POSE;
    public static final EntityDataAccessor<Rotations> DATA_BODY_POSE;
    public static final EntityDataAccessor<Rotations> DATA_LEFT_ARM_POSE;
    public static final EntityDataAccessor<Rotations> DATA_RIGHT_ARM_POSE;
@@ -133,48 +149,20 @@
    }
 
    public void setItemSlot(EquipmentSlot var1, ItemStack var2) {
       switch(var1.getType()) {
       case HAND:
-         this.playEquipSound(var2);
+         this.equipEventAndSound(var2);
          this.handItems.set(var1.getIndex(), var2);
          break;
       case ARMOR:
-         this.playEquipSound(var2);
+         this.equipEventAndSound(var2);
          this.armorItems.set(var1.getIndex(), var2);
       }
 
    }
 
-   public boolean setSlot(int var1, ItemStack var2) {
-      EquipmentSlot var3;
-      if (var1 == 98) {
-         var3 = EquipmentSlot.MAINHAND;
-      } else if (var1 == 99) {
-         var3 = EquipmentSlot.OFFHAND;
-      } else if (var1 == 100 + EquipmentSlot.HEAD.getIndex()) {
-         var3 = EquipmentSlot.HEAD;
-      } else if (var1 == 100 + EquipmentSlot.CHEST.getIndex()) {
-         var3 = EquipmentSlot.CHEST;
-      } else if (var1 == 100 + EquipmentSlot.LEGS.getIndex()) {
-         var3 = EquipmentSlot.LEGS;
-      } else {
-         if (var1 != 100 + EquipmentSlot.FEET.getIndex()) {
-            return false;
-         }
-
-         var3 = EquipmentSlot.FEET;
-      }
-
-      if (!var2.isEmpty() && !Mob.isValidSlotForItem(var3, var2) && var3 != EquipmentSlot.HEAD) {
-         return false;
-      } else {
-         this.setItemSlot(var3, var2);
-         return true;
-      }
-   }
-
    public boolean canTakeItem(ItemStack var1) {
       EquipmentSlot var2 = Mob.getEquipmentSlotForItem(var1);
       return this.getItemBySlot(var2).isEmpty() && !this.isDisabled(var2);
    }
 
@@ -310,11 +298,11 @@
 
    }
 
    public InteractionResult interactAt(Player var1, Vec3 var2, InteractionHand var3) {
       ItemStack var4 = var1.getItemInHand(var3);
-      if (!this.isMarker() && var4.getItem() != Items.NAME_TAG) {
+      if (!this.isMarker() && !var4.is(Items.NAME_TAG)) {
          if (var1.isSpectator()) {
             return InteractionResult.SUCCESS;
          } else if (var1.level.isClientSide) {
             return InteractionResult.CONSUME;
          } else {
@@ -376,11 +364,11 @@
          return false;
       } else if (var5.isEmpty() && (this.disabledSlots & 1 << var2.getFilterFlag() + 16) != 0) {
          return false;
       } else {
          ItemStack var6;
-         if (var1.abilities.instabuild && var5.isEmpty() && !var3.isEmpty()) {
+         if (var1.getAbilities().instabuild && var5.isEmpty() && !var3.isEmpty()) {
             var6 = var3.copy();
             var6.setCount(1);
             this.setItemSlot(var2, var6);
             return true;
          } else if (!var3.isEmpty() && var3.getCount() > 1) {
@@ -400,18 +388,18 @@
          }
       }
    }
 
    public boolean hurt(DamageSource var1, float var2) {
-      if (!this.level.isClientSide && !this.removed) {
+      if (!this.level.isClientSide && !this.isRemoved()) {
          if (DamageSource.OUT_OF_WORLD.equals(var1)) {
-            this.remove();
+            this.kill();
             return false;
          } else if (!this.isInvulnerableTo(var1) && !this.invisible && !this.isMarker()) {
             if (var1.isExplosion()) {
                this.brokenByAnything(var1);
-               this.remove();
+               this.kill();
                return false;
             } else if (DamageSource.IN_FIRE.equals(var1)) {
                if (this.isOnFire()) {
                   this.causeDamage(var1, 0.15F);
                } else {
@@ -426,26 +414,27 @@
                boolean var3 = var1.getDirectEntity() instanceof AbstractArrow;
                boolean var4 = var3 && ((AbstractArrow)var1.getDirectEntity()).getPierceLevel() > 0;
                boolean var5 = "player".equals(var1.getMsgId());
                if (!var5 && !var3) {
                   return false;
-               } else if (var1.getEntity() instanceof Player && !((Player)var1.getEntity()).abilities.mayBuild) {
+               } else if (var1.getEntity() instanceof Player && !((Player)var1.getEntity()).getAbilities().mayBuild) {
                   return false;
                } else if (var1.isCreativePlayer()) {
                   this.playBrokenSound();
                   this.showBreakingParticles();
-                  this.remove();
+                  this.kill();
                   return var4;
                } else {
                   long var6 = this.level.getGameTime();
                   if (var6 - this.lastHit > 5L && !var3) {
                      this.level.broadcastEntityEvent(this, (byte)32);
+                     this.gameEvent(GameEvent.ENTITY_DAMAGED, var1.getEntity());
                      this.lastHit = var6;
                   } else {
                      this.brokenByPlayer(var1);
                      this.showBreakingParticles();
-                     this.remove();
+                     this.kill();
                   }
 
                   return true;
                }
             }
@@ -455,10 +444,32 @@
       } else {
          return false;
       }
    }
 
+   public void handleEntityEvent(byte var1) {
+      if (var1 == 32) {
+         if (this.level.isClientSide) {
+            this.level.playLocalSound(this.getX(), this.getY(), this.getZ(), SoundEvents.ARMOR_STAND_HIT, this.getSoundSource(), 0.3F, 1.0F, false);
+            this.lastHit = this.level.getGameTime();
+         }
+      } else {
+         super.handleEntityEvent(var1);
+      }
+
+   }
+
+   public boolean shouldRenderAtSqrDistance(double var1) {
+      double var3 = this.getBoundingBox().getSize() * 4.0D;
+      if (Double.isNaN(var3) || var3 == 0.0D) {
+         var3 = 4.0D;
+      }
+
+      var3 *= 64.0D;
+      return var1 < var3 * var3;
+   }
+
    private void showBreakingParticles() {
       if (this.level instanceof ServerLevel) {
          ((ServerLevel)this.level).sendParticles(new BlockParticleOption(ParticleTypes.BLOCK, Blocks.OAK_PLANKS.defaultBlockState()), this.getX(), this.getY(0.6666666666666666D), this.getZ(), 10, (double)(this.getBbWidth() / 4.0F), (double)(this.getBbHeight() / 4.0F), (double)(this.getBbWidth() / 4.0F), 0.05D);
       }
 
@@ -467,13 +478,14 @@
    private void causeDamage(DamageSource var1, float var2) {
       float var3 = this.getHealth();
       var3 -= var2;
       if (var3 <= 0.5F) {
          this.brokenByAnything(var1);
-         this.remove();
+         this.kill();
       } else {
          this.setHealth(var3);
+         this.gameEvent(GameEvent.ENTITY_DAMAGED, var1.getEntity());
       }
 
    }
 
    private void brokenByPlayer(DamageSource var1) {
@@ -509,11 +521,11 @@
       this.level.playSound((Player)null, this.getX(), this.getY(), this.getZ(), SoundEvents.ARMOR_STAND_BREAK, this.getSoundSource(), 1.0F, 1.0F);
    }
 
    protected float tickHeadTurn(float var1, float var2) {
       this.yBodyRotO = this.yRotO;
-      this.yBodyRot = this.yRot;
+      this.yBodyRot = this.getYRot();
       return 0.0F;
    }
 
    protected float getStandingEyeHeight(Pose var1, EntityDimensions var2) {
       return var2.height * (this.isBaby() ? 0.5F : 0.9F);
@@ -585,11 +597,11 @@
    public boolean isBaby() {
       return this.isSmall();
    }
 
    public void kill() {
-      this.remove();
+      this.remove(Entity.RemovalReason.KILLED);
    }
 
    public boolean ignoreExplosion() {
       return this.isInvisible();
    }
@@ -676,10 +688,26 @@
 
    public Rotations getBodyPose() {
       return this.bodyPose;
    }
 
+   public Rotations getLeftArmPose() {
+      return this.leftArmPose;
+   }
+
+   public Rotations getRightArmPose() {
+      return this.rightArmPose;
+   }
+
+   public Rotations getLeftLegPose() {
+      return this.leftLegPose;
+   }
+
+   public Rotations getRightLegPose() {
+      return this.rightLegPose;
+   }
+
    public boolean isPickable() {
       return super.isPickable() && !this.isMarker();
    }
 
    public boolean skipAttackInteraction(Entity var1) {
@@ -734,10 +762,44 @@
       } else {
          return this.isBaby() ? BABY_DIMENSIONS : this.getType().getDimensions();
       }
    }
 
+   public Vec3 getLightProbePosition(float var1) {
+      if (this.isMarker()) {
+         AABB var2 = this.getDimensionsMarker(false).makeBoundingBox(this.position());
+         BlockPos var3 = this.blockPosition();
+         int var4 = Integer.MIN_VALUE;
+         Iterator var5 = BlockPos.betweenClosed(new BlockPos(var2.minX, var2.minY, var2.minZ), new BlockPos(var2.maxX, var2.maxY, var2.maxZ)).iterator();
+
+         while(var5.hasNext()) {
+            BlockPos var6 = (BlockPos)var5.next();
+            int var7 = Math.max(this.level.getBrightness(LightLayer.BLOCK, var6), this.level.getBrightness(LightLayer.SKY, var6));
+            if (var7 == 15) {
+               return Vec3.atCenterOf(var6);
+            }
+
+            if (var7 > var4) {
+               var4 = var7;
+               var3 = var6.immutable();
+            }
+         }
+
+         return Vec3.atCenterOf(var3);
+      } else {
+         return super.getLightProbePosition(var1);
+      }
+   }
+
+   public ItemStack getPickResult() {
+      return new ItemStack(Items.ARMOR_STAND);
+   }
+
+   public boolean canBeSeenByAnyone() {
+      return !this.isInvisible() && !this.isMarker();
+   }
+
    static {
       BABY_DIMENSIONS = EntityType.ARMOR_STAND.getDimensions().scale(0.5F);
       DATA_CLIENT_FLAGS = SynchedEntityData.defineId(ArmorStand.class, EntityDataSerializers.BYTE);
       DATA_HEAD_POSE = SynchedEntityData.defineId(ArmorStand.class, EntityDataSerializers.ROTATIONS);
       DATA_BODY_POSE = SynchedEntityData.defineId(ArmorStand.class, EntityDataSerializers.ROTATIONS);
