--- net/minecraft/world/entity/decoration/LeashFenceKnotEntity.java
+++ net/minecraft/world/entity/decoration/LeashFenceKnotEntity.java
@@ -8,44 +8,41 @@
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.game.ClientboundAddEntityPacket;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.tags.BlockTags;
-import net.minecraft.tags.Tag;
-import net.minecraft.util.Mth;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.Pose;
 import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.Items;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.phys.AABB;
+import net.minecraft.world.phys.Vec3;
 
 public class LeashFenceKnotEntity extends HangingEntity {
+   public static final double OFFSET_Y = 0.375D;
+
    public LeashFenceKnotEntity(EntityType<? extends LeashFenceKnotEntity> var1, Level var2) {
       super(var1, var2);
    }
 
    public LeashFenceKnotEntity(Level var1, BlockPos var2) {
       super(EntityType.LEASH_KNOT, var1, var2);
-      this.setPos((double)var2.getX() + 0.5D, (double)var2.getY() + 0.5D, (double)var2.getZ() + 0.5D);
-      float var3 = 0.125F;
-      float var4 = 0.1875F;
-      float var5 = 0.25F;
-      this.setBoundingBox(new AABB(this.getX() - 0.1875D, this.getY() - 0.25D + 0.125D, this.getZ() - 0.1875D, this.getX() + 0.1875D, this.getY() + 0.25D + 0.125D, this.getZ() + 0.1875D));
-      this.forcedLoading = true;
+      this.setPos((double)var2.getX(), (double)var2.getY(), (double)var2.getZ());
    }
 
-   public void setPos(double var1, double var3, double var5) {
-      super.setPos((double)Mth.floor(var1) + 0.5D, (double)Mth.floor(var3) + 0.5D, (double)Mth.floor(var5) + 0.5D);
-   }
-
    protected void recalculateBoundingBox() {
-      this.setPosRaw((double)this.pos.getX() + 0.5D, (double)this.pos.getY() + 0.5D, (double)this.pos.getZ() + 0.5D);
+      this.setPosRaw((double)this.pos.getX() + 0.5D, (double)this.pos.getY() + 0.375D, (double)this.pos.getZ() + 0.5D);
+      double var1 = (double)this.getType().getWidth() / 2.0D;
+      double var3 = (double)this.getType().getHeight();
+      this.setBoundingBox(new AABB(this.getX() - var1, this.getY(), this.getZ() - var1, this.getX() + var1, this.getY() + var3, this.getZ() + var1));
    }
 
    public void setDirection(Direction var1) {
    }
 
@@ -56,13 +53,17 @@
    public int getHeight() {
       return 9;
    }
 
    protected float getEyeHeight(Pose var1, EntityDimensions var2) {
-      return -0.0625F;
+      return 0.0625F;
    }
 
+   public boolean shouldRenderAtSqrDistance(double var1) {
+      return var1 < 1024.0D;
+   }
+
    public void dropItem(@Nullable Entity var1) {
       this.playSound(SoundEvents.LEASH_KNOT_BREAK, 1.0F, 1.0F);
    }
 
    public void addAdditionalSaveData(CompoundTag var1) {
@@ -88,12 +89,12 @@
                var3 = true;
             }
          }
 
          if (!var3) {
-            this.remove();
-            if (var1.abilities.instabuild) {
+            this.discard();
+            if (var1.getAbilities().instabuild) {
                var7 = var6.iterator();
 
                while(var7.hasNext()) {
                   var8 = (Mob)var7.next();
                   if (var8.isLeashed() && var8.getLeashHolder() == this) {
@@ -106,11 +107,11 @@
          return InteractionResult.CONSUME;
       }
    }
 
    public boolean survives() {
-      return this.level.getBlockState(this.pos).getBlock().is((Tag)BlockTags.FENCES);
+      return this.level.getBlockState(this.pos).is(BlockTags.FENCES);
    }
 
    public static LeashFenceKnotEntity getOrCreateKnot(Level var0, BlockPos var1) {
       int var2 = var1.getX();
       int var3 = var1.getY();
@@ -121,11 +122,10 @@
       LeashFenceKnotEntity var7;
       do {
          if (!var6.hasNext()) {
             LeashFenceKnotEntity var8 = new LeashFenceKnotEntity(var0, var1);
             var0.addFreshEntity(var8);
-            var8.playPlacementSound();
             return var8;
          }
 
          var7 = (LeashFenceKnotEntity)var6.next();
       } while(!var7.getPos().equals(var1));
@@ -138,6 +138,14 @@
    }
 
    public Packet<?> getAddEntityPacket() {
       return new ClientboundAddEntityPacket(this, this.getType(), 0, this.getPos());
    }
+
+   public Vec3 getRopeHoldPosition(float var1) {
+      return this.getPosition(var1).add(0.0D, 0.2D, 0.0D);
+   }
+
+   public ItemStack getPickResult() {
+      return new ItemStack(Items.LEAD);
+   }
 }
