--- net/minecraft/world/entity/ambient/Bat.java
+++ net/minecraft/world/entity/ambient/Bat.java
@@ -27,19 +27,26 @@
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.phys.Vec3;
 
 public class Bat extends AmbientCreature {
+   public static final float FLAP_DEGREES_PER_TICK = 74.48451F;
+   public static final int TICKS_PER_FLAP = Mth.ceil(2.4166098F);
    private static final EntityDataAccessor<Byte> DATA_ID_FLAGS;
+   private static final int FLAG_RESTING = 1;
    private static final TargetingConditions BAT_RESTING_TARGETING;
    private BlockPos targetPosition;
 
    public Bat(EntityType<? extends Bat> var1, Level var2) {
       super(var1, var2);
       this.setResting(true);
    }
 
+   public boolean isFlapping() {
+      return !this.isResting() && this.tickCount % TICKS_PER_FLAP == 0;
+   }
+
    protected void defineSynchedData() {
       super.defineSynchedData();
       this.entityData.define(DATA_ID_FLAGS, (byte)0);
    }
 
@@ -125,11 +132,11 @@
             if (!var3) {
                this.level.levelEvent((Player)null, 1025, var1, 0);
             }
          }
       } else {
-         if (this.targetPosition != null && (!this.level.isEmptyBlock(this.targetPosition) || this.targetPosition.getY() < 1)) {
+         if (this.targetPosition != null && (!this.level.isEmptyBlock(this.targetPosition) || this.targetPosition.getY() <= this.level.getMinBuildHeight())) {
             this.targetPosition = null;
          }
 
          if (this.targetPosition == null || this.random.nextInt(30) == 0 || this.targetPosition.closerThan(this.position(), 2.0D)) {
             this.targetPosition = new BlockPos(this.getX() + (double)this.random.nextInt(7) - (double)this.random.nextInt(7), this.getY() + (double)this.random.nextInt(6) - 2.0D, this.getZ() + (double)this.random.nextInt(7) - (double)this.random.nextInt(7));
@@ -150,15 +157,15 @@
          }
       }
 
    }
 
-   protected boolean isMovementNoisy() {
-      return false;
+   protected Entity.MovementEmission getMovementEmission() {
+      return Entity.MovementEmission.EVENTS;
    }
 
-   public boolean causeFallDamage(float var1, float var2) {
+   public boolean causeFallDamage(float var1, float var2, DamageSource var3) {
       return false;
    }
 
    protected void checkFallDamage(double var1, boolean var3, BlockState var4, BlockPos var5) {
    }
