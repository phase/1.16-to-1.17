--- net/minecraft/world/entity/projectile/Arrow.java
+++ net/minecraft/world/entity/projectile/Arrow.java
@@ -21,11 +21,14 @@
 import net.minecraft.world.item.alchemy.PotionUtils;
 import net.minecraft.world.item.alchemy.Potions;
 import net.minecraft.world.level.Level;
 
 public class Arrow extends AbstractArrow {
+   private static final int EXPOSED_POTION_DECAY_TIME = 600;
+   private static final int NO_EFFECT_COLOR = -1;
    private static final EntityDataAccessor<Integer> ID_EFFECT_COLOR;
+   private static final byte EVENT_POTION_PUFF = 0;
    private Potion potion;
    private final Set<MobEffectInstance> effects;
    private boolean fixedColor;
 
    public Arrow(EntityType<? extends Arrow> var1, Level var2) {
@@ -45,11 +48,11 @@
       this.potion = Potions.EMPTY;
       this.effects = Sets.newHashSet();
    }
 
    public void setEffectsFromItem(ItemStack var1) {
-      if (var1.getItem() == Items.TIPPED_ARROW) {
+      if (var1.is(Items.TIPPED_ARROW)) {
          this.potion = PotionUtils.getPotion(var1);
          List var2 = PotionUtils.getCustomEffects(var1);
          if (!var2.isEmpty()) {
             Iterator var3 = var2.iterator();
 
@@ -63,11 +66,11 @@
          if (var5 == -1) {
             this.updateColor();
          } else {
             this.setFixedColor(var5);
          }
-      } else if (var1.getItem() == Items.ARROW) {
+      } else if (var1.is(Items.ARROW)) {
          this.potion = Potions.EMPTY;
          this.effects.clear();
          this.entityData.set(ID_EFFECT_COLOR, -1);
       }
 
@@ -219,9 +222,27 @@
 
          return var1;
       }
    }
 
+   public void handleEntityEvent(byte var1) {
+      if (var1 == 0) {
+         int var2 = this.getColor();
+         if (var2 != -1) {
+            double var3 = (double)(var2 >> 16 & 255) / 255.0D;
+            double var5 = (double)(var2 >> 8 & 255) / 255.0D;
+            double var7 = (double)(var2 >> 0 & 255) / 255.0D;
+
+            for(int var9 = 0; var9 < 20; ++var9) {
+               this.level.addParticle(ParticleTypes.ENTITY_EFFECT, this.getRandomX(0.5D), this.getRandomY(), this.getRandomZ(0.5D), var3, var5, var7);
+            }
+         }
+      } else {
+         super.handleEntityEvent(var1);
+      }
+
+   }
+
    static {
       ID_EFFECT_COLOR = SynchedEntityData.defineId(Arrow.class, EntityDataSerializers.INT);
    }
 }
