--- net/minecraft/world/entity/projectile/FishingHook.java
+++ net/minecraft/world/entity/projectile/FishingHook.java
@@ -19,10 +19,11 @@
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.stats.Stats;
 import net.minecraft.tags.FluidTags;
 import net.minecraft.tags.ItemTags;
+import net.minecraft.tags.Tag;
 import net.minecraft.util.Mth;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.ExperienceOrb;
 import net.minecraft.world.entity.MoverType;
@@ -46,39 +47,44 @@
 
 public class FishingHook extends Projectile {
    private final Random syncronizedRandom;
    private boolean biting;
    private int outOfWaterTime;
+   private static final int MAX_OUT_OF_WATER_TIME = 10;
    private static final EntityDataAccessor<Integer> DATA_HOOKED_ENTITY;
    private static final EntityDataAccessor<Boolean> DATA_BITING;
    private int life;
    private int nibble;
    private int timeUntilLured;
    private int timeUntilHooked;
    private float fishAngle;
    private boolean openWater;
+   @Nullable
    private Entity hookedIn;
    private FishingHook.FishHookState currentState;
    private final int luck;
    private final int lureSpeed;
 
-   private FishingHook(Level var1, Player var2, int var3, int var4) {
-      super(EntityType.FISHING_BOBBER, var1);
+   private FishingHook(EntityType<? extends FishingHook> var1, Level var2, int var3, int var4) {
+      super(var1, var2);
       this.syncronizedRandom = new Random();
       this.openWater = true;
       this.currentState = FishingHook.FishHookState.FLYING;
       this.noCulling = true;
-      this.setOwner(var2);
-      var2.fishing = this;
       this.luck = Math.max(0, var3);
       this.lureSpeed = Math.max(0, var4);
    }
 
+   public FishingHook(EntityType<? extends FishingHook> var1, Level var2) {
+      this((EntityType)var1, var2, 0, 0);
+   }
+
    public FishingHook(Player var1, Level var2, int var3, int var4) {
-      this(var2, var1, var3, var4);
-      float var5 = var1.xRot;
-      float var6 = var1.yRot;
+      this(EntityType.FISHING_BOBBER, var2, var3, var4);
+      this.setOwner(var1);
+      float var5 = var1.getXRot();
+      float var6 = var1.getYRot();
       float var7 = Mth.cos(-var6 * 0.017453292F - 3.1415927F);
       float var8 = Mth.sin(-var6 * 0.017453292F - 3.1415927F);
       float var9 = -Mth.cos(-var5 * 0.017453292F);
       float var10 = Mth.sin(-var5 * 0.017453292F);
       double var11 = var1.getX() - (double)var8 * 0.3D;
@@ -87,14 +93,14 @@
       this.moveTo(var11, var13, var15, var6, var5);
       Vec3 var17 = new Vec3((double)(-var8), (double)Mth.clamp(-(var10 / var9), -5.0F, 5.0F), (double)(-var7));
       double var18 = var17.length();
       var17 = var17.multiply(0.6D / var18 + 0.5D + this.random.nextGaussian() * 0.0045D, 0.6D / var18 + 0.5D + this.random.nextGaussian() * 0.0045D, 0.6D / var18 + 0.5D + this.random.nextGaussian() * 0.0045D);
       this.setDeltaMovement(var17);
-      this.yRot = (float)(Mth.atan2(var17.x, var17.z) * 57.2957763671875D);
-      this.xRot = (float)(Mth.atan2(var17.y, (double)Mth.sqrt(getHorizontalDistanceSqr(var17))) * 57.2957763671875D);
-      this.yRotO = this.yRot;
-      this.xRotO = this.xRot;
+      this.setYRot((float)(Mth.atan2(var17.x, var17.z) * 57.2957763671875D));
+      this.setXRot((float)(Mth.atan2(var17.y, var17.horizontalDistance()) * 57.2957763671875D));
+      this.yRotO = this.getYRot();
+      this.xRotO = this.getXRot();
    }
 
    protected void defineSynchedData() {
       this.getEntityData().define(DATA_HOOKED_ENTITY, 0);
       this.getEntityData().define(DATA_BITING, false);
@@ -114,21 +120,29 @@
       }
 
       super.onSyncedDataUpdated(var1);
    }
 
+   public boolean shouldRenderAtSqrDistance(double var1) {
+      double var3 = 64.0D;
+      return var1 < 4096.0D;
+   }
+
+   public void lerpTo(double var1, double var3, double var5, float var7, float var8, int var9, boolean var10) {
+   }
+
    public void tick() {
       this.syncronizedRandom.setSeed(this.getUUID().getLeastSignificantBits() ^ this.level.getGameTime());
       super.tick();
       Player var1 = this.getPlayerOwner();
       if (var1 == null) {
-         this.remove();
+         this.discard();
       } else if (this.level.isClientSide || !this.shouldStopFishing(var1)) {
          if (this.onGround) {
             ++this.life;
             if (this.life >= 1200) {
-               this.remove();
+               this.discard();
                return;
             }
          } else {
             this.life = 0;
          }
@@ -156,15 +170,15 @@
 
             this.checkCollision();
          } else {
             if (this.currentState == FishingHook.FishHookState.HOOKED_IN_ENTITY) {
                if (this.hookedIn != null) {
-                  if (this.hookedIn.removed) {
-                     this.hookedIn = null;
-                     this.currentState = FishingHook.FishHookState.FLYING;
-                  } else {
+                  if (!this.hookedIn.isRemoved() && this.hookedIn.level.dimension() == this.level.dimension()) {
                      this.setPos(this.hookedIn.getX(), this.hookedIn.getY(0.8D), this.hookedIn.getZ());
+                  } else {
+                     this.setHookedEntity((Entity)null);
+                     this.currentState = FishingHook.FishHookState.FLYING;
                   }
                }
 
                return;
             }
@@ -215,16 +229,16 @@
    }
 
    private boolean shouldStopFishing(Player var1) {
       ItemStack var2 = var1.getMainHandItem();
       ItemStack var3 = var1.getOffhandItem();
-      boolean var4 = var2.getItem() == Items.FISHING_ROD;
-      boolean var5 = var3.getItem() == Items.FISHING_ROD;
-      if (!var1.removed && var1.isAlive() && (var4 || var5) && this.distanceToSqr(var1) <= 1024.0D) {
+      boolean var4 = var2.is(Items.FISHING_ROD);
+      boolean var5 = var3.is(Items.FISHING_ROD);
+      if (!var1.isRemoved() && var1.isAlive() && (var4 || var5) && this.distanceToSqr(var1) <= 1024.0D) {
          return false;
       } else {
-         this.remove();
+         this.discard();
          return true;
       }
    }
 
    private void checkCollision() {
@@ -237,23 +251,23 @@
    }
 
    protected void onHitEntity(EntityHitResult var1) {
       super.onHitEntity(var1);
       if (!this.level.isClientSide) {
-         this.hookedIn = var1.getEntity();
-         this.setHookedEntity();
+         this.setHookedEntity(var1.getEntity());
       }
 
    }
 
    protected void onHitBlock(BlockHitResult var1) {
       super.onHitBlock(var1);
       this.setDeltaMovement(this.getDeltaMovement().normalize().scale(var1.distanceTo(this)));
    }
 
-   private void setHookedEntity() {
-      this.getEntityData().set(DATA_HOOKED_ENTITY, this.hookedIn.getId() + 1);
+   private void setHookedEntity(@Nullable Entity var1) {
+      this.hookedIn = var1;
+      this.getEntityData().set(DATA_HOOKED_ENTITY, var1 == null ? 0 : var1.getId() + 1);
    }
 
    private void catchingFish(BlockPos var1) {
       ServerLevel var2 = (ServerLevel)this.level;
       int var3 = 1;
@@ -396,14 +410,14 @@
    public void readAdditionalSaveData(CompoundTag var1) {
    }
 
    public int retrieve(ItemStack var1) {
       Player var2 = this.getPlayerOwner();
-      if (!this.level.isClientSide && var2 != null) {
+      if (!this.level.isClientSide && var2 != null && !this.shouldStopFishing(var2)) {
          int var3 = 0;
          if (this.hookedIn != null) {
-            this.bringInHookedEntity();
+            this.pullEntity(this.hookedIn);
             CriteriaTriggers.FISHING_ROD_HOOKED.trigger((ServerPlayer)var2, var1, this, Collections.emptyList());
             this.level.broadcastEntityEvent(this, (byte)31);
             var3 = this.hookedIn instanceof ItemEntity ? 3 : 5;
          } else if (this.nibble > 0) {
             LootContext.Builder var4 = (new LootContext.Builder((ServerLevel)this.level)).withParameter(LootContextParams.ORIGIN, this.position()).withParameter(LootContextParams.TOOL, var1).withParameter(LootContextParams.THIS_ENTITY, this).withRandom(this.random).withLuck((float)this.luck + var2.getLuck());
@@ -420,11 +434,11 @@
                double var14 = var2.getZ() - this.getZ();
                double var16 = 0.1D;
                var9.setDeltaMovement(var10 * 0.1D, var12 * 0.1D + Math.sqrt(Math.sqrt(var10 * var10 + var12 * var12 + var14 * var14)) * 0.08D, var14 * 0.1D);
                this.level.addFreshEntity(var9);
                var2.level.addFreshEntity(new ExperienceOrb(var2.level, var2.getX(), var2.getY() + 0.5D, var2.getZ() + 0.5D, this.random.nextInt(6) + 1));
-               if (var8.getItem().is(ItemTags.FISHES)) {
+               if (var8.is((Tag)ItemTags.FISHES)) {
                   var2.awardStat((ResourceLocation)Stats.FISH_CAUGHT, 1);
                }
             }
 
             var3 = 1;
@@ -432,34 +446,55 @@
 
          if (this.onGround) {
             var3 = 2;
          }
 
-         this.remove();
+         this.discard();
          return var3;
       } else {
          return 0;
       }
    }
 
-   protected void bringInHookedEntity() {
-      Entity var1 = this.getOwner();
-      if (var1 != null) {
-         Vec3 var2 = (new Vec3(var1.getX() - this.getX(), var1.getY() - this.getY(), var1.getZ() - this.getZ())).scale(0.1D);
-         this.hookedIn.setDeltaMovement(this.hookedIn.getDeltaMovement().add(var2));
+   public void handleEntityEvent(byte var1) {
+      if (var1 == 31 && this.level.isClientSide && this.hookedIn instanceof Player && ((Player)this.hookedIn).isLocalPlayer()) {
+         this.pullEntity(this.hookedIn);
       }
+
+      super.handleEntityEvent(var1);
    }
 
-   protected boolean isMovementNoisy() {
-      return false;
+   protected void pullEntity(Entity var1) {
+      Entity var2 = this.getOwner();
+      if (var2 != null) {
+         Vec3 var3 = (new Vec3(var2.getX() - this.getX(), var2.getY() - this.getY(), var2.getZ() - this.getZ())).scale(0.1D);
+         var1.setDeltaMovement(var1.getDeltaMovement().add(var3));
+      }
    }
 
-   public void remove() {
-      super.remove();
-      Player var1 = this.getPlayerOwner();
-      if (var1 != null) {
-         var1.fishing = null;
+   protected Entity.MovementEmission getMovementEmission() {
+      return Entity.MovementEmission.NONE;
+   }
+
+   public void remove(Entity.RemovalReason var1) {
+      this.updateOwnerInfo((FishingHook)null);
+      super.remove(var1);
+   }
+
+   public void onClientRemoval() {
+      this.updateOwnerInfo((FishingHook)null);
+   }
+
+   public void setOwner(@Nullable Entity var1) {
+      super.setOwner(var1);
+      this.updateOwnerInfo(this);
+   }
+
+   private void updateOwnerInfo(@Nullable FishingHook var1) {
+      Player var2 = this.getPlayerOwner();
+      if (var2 != null) {
+         var2.fishing = var1;
       }
 
    }
 
    @Nullable
@@ -480,28 +515,38 @@
    public Packet<?> getAddEntityPacket() {
       Entity var1 = this.getOwner();
       return new ClientboundAddEntityPacket(this, var1 == null ? this.getId() : var1.getId());
    }
 
+   public void recreateFromPacket(ClientboundAddEntityPacket var1) {
+      super.recreateFromPacket(var1);
+      if (this.getPlayerOwner() == null) {
+         int var2 = var1.getData();
+         LOGGER.error((String)"Failed to recreate fishing hook on client. {} (id: {}) is not a valid owner.", (Object)this.level.getEntity(var2), (Object)var2);
+         this.kill();
+      }
+
+   }
+
    static {
       DATA_HOOKED_ENTITY = SynchedEntityData.defineId(FishingHook.class, EntityDataSerializers.INT);
       DATA_BITING = SynchedEntityData.defineId(FishingHook.class, EntityDataSerializers.BOOLEAN);
    }
 
-   static enum OpenWaterType {
-      ABOVE_WATER,
-      INSIDE_WATER,
-      INVALID;
-
-      private OpenWaterType() {
-      }
-   }
-
    static enum FishHookState {
       FLYING,
       HOOKED_IN_ENTITY,
       BOBBING;
 
       private FishHookState() {
       }
    }
+
+   static enum OpenWaterType {
+      ABOVE_WATER,
+      INSIDE_WATER,
+      INVALID;
+
+      private OpenWaterType() {
+      }
+   }
 }
