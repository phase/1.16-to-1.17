--- net/minecraft/world/entity/projectile/FireworkRocketEntity.java
+++ net/minecraft/world/entity/projectile/FireworkRocketEntity.java
@@ -6,12 +6,10 @@
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
-import net.minecraft.network.protocol.Packet;
-import net.minecraft.network.protocol.game.ClientboundAddEntityPacket;
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.EntityDataSerializers;
 import net.minecraft.network.syncher.SynchedEntityData;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
@@ -20,18 +18,20 @@
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.MoverType;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.Items;
 import net.minecraft.world.level.ClipContext;
 import net.minecraft.world.level.Level;
+import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.EntityHitResult;
 import net.minecraft.world.phys.HitResult;
 import net.minecraft.world.phys.Vec3;
 
-public class FireworkRocketEntity extends Projectile {
+public class FireworkRocketEntity extends Projectile implements ItemSupplier {
    private static final EntityDataAccessor<ItemStack> DATA_ID_FIREWORKS_ITEM;
    private static final EntityDataAccessor<OptionalInt> DATA_ATTACHED_TO_TARGET;
    private static final EntityDataAccessor<Boolean> DATA_SHOT_AT_ANGLE;
    private int life;
    private int lifetime;
@@ -80,10 +80,18 @@
       this.entityData.define(DATA_ID_FIREWORKS_ITEM, ItemStack.EMPTY);
       this.entityData.define(DATA_ATTACHED_TO_TARGET, OptionalInt.empty());
       this.entityData.define(DATA_SHOT_AT_ANGLE, false);
    }
 
+   public boolean shouldRenderAtSqrDistance(double var1) {
+      return var1 < 4096.0D && !this.isAttachedToEntity();
+   }
+
+   public boolean shouldRender(double var1, double var3, double var5) {
+      return super.shouldRender(var1, var3, var5) && !this.isAttachedToEntity();
+   }
+
    public void tick() {
       super.tick();
       Vec3 var1;
       if (this.isAttachedToEntity()) {
          if (this.attachedToEntity == null) {
@@ -141,12 +149,13 @@
 
    }
 
    private void explode() {
       this.level.broadcastEntityEvent(this, (byte)17);
+      this.gameEvent(GameEvent.EXPLODE, this.getOwner());
       this.dealExplosionDamage();
-      this.remove();
+      this.discard();
    }
 
    protected void onHitEntity(EntityHitResult var1) {
       super.onHitEntity(var1);
       if (!this.level.isClientSide) {
@@ -227,10 +236,27 @@
 
    public boolean isShotAtAngle() {
       return (Boolean)this.entityData.get(DATA_SHOT_AT_ANGLE);
    }
 
+   public void handleEntityEvent(byte var1) {
+      if (var1 == 17 && this.level.isClientSide) {
+         if (!this.hasExplosion()) {
+            for(int var2 = 0; var2 < this.random.nextInt(3) + 2; ++var2) {
+               this.level.addParticle(ParticleTypes.POOF, this.getX(), this.getY(), this.getZ(), this.random.nextGaussian() * 0.05D, 0.005D, this.random.nextGaussian() * 0.05D);
+            }
+         } else {
+            ItemStack var5 = (ItemStack)this.entityData.get(DATA_ID_FIREWORKS_ITEM);
+            CompoundTag var3 = var5.isEmpty() ? null : var5.getTagElement("Fireworks");
+            Vec3 var4 = this.getDeltaMovement();
+            this.level.createFireworks(this.getX(), this.getY(), this.getZ(), var4.x, var4.y, var4.z, var3);
+         }
+      }
+
+      super.handleEntityEvent(var1);
+   }
+
    public void addAdditionalSaveData(CompoundTag var1) {
       super.addAdditionalSaveData(var1);
       var1.putInt("Life", this.life);
       var1.putInt("LifeTime", this.lifetime);
       ItemStack var2 = (ItemStack)this.entityData.get(DATA_ID_FIREWORKS_ITEM);
@@ -254,18 +280,19 @@
          this.entityData.set(DATA_SHOT_AT_ANGLE, var1.getBoolean("ShotAtAngle"));
       }
 
    }
 
+   public ItemStack getItem() {
+      ItemStack var1 = (ItemStack)this.entityData.get(DATA_ID_FIREWORKS_ITEM);
+      return var1.isEmpty() ? new ItemStack(Items.FIREWORK_ROCKET) : var1;
+   }
+
    public boolean isAttackable() {
       return false;
    }
 
-   public Packet<?> getAddEntityPacket() {
-      return new ClientboundAddEntityPacket(this);
-   }
-
    static {
       DATA_ID_FIREWORKS_ITEM = SynchedEntityData.defineId(FireworkRocketEntity.class, EntityDataSerializers.ITEM_STACK);
       DATA_ATTACHED_TO_TARGET = SynchedEntityData.defineId(FireworkRocketEntity.class, EntityDataSerializers.OPTIONAL_UNSIGNED_INT);
       DATA_SHOT_AT_ANGLE = SynchedEntityData.defineId(FireworkRocketEntity.class, EntityDataSerializers.BOOLEAN);
    }
