--- net/minecraft/world/entity/item/ItemEntity.java
+++ net/minecraft/world/entity/item/ItemEntity.java
@@ -13,63 +13,81 @@
 import net.minecraft.network.protocol.game.ClientboundAddEntityPacket;
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.EntityDataSerializers;
 import net.minecraft.network.syncher.SynchedEntityData;
 import net.minecraft.server.level.ServerLevel;
-import net.minecraft.sounds.SoundEvents;
+import net.minecraft.sounds.SoundSource;
 import net.minecraft.stats.Stats;
 import net.minecraft.tags.FluidTags;
+import net.minecraft.tags.ItemTags;
 import net.minecraft.util.Mth;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.MoverType;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.level.Level;
+import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.phys.Vec3;
 
 public class ItemEntity extends Entity {
    private static final EntityDataAccessor<ItemStack> DATA_ITEM;
+   private static final int LIFETIME = 6000;
+   private static final int INFINITE_PICKUP_DELAY = 32767;
+   private static final int INFINITE_LIFETIME = -32768;
    private int age;
    private int pickupDelay;
    private int health;
    private UUID thrower;
    private UUID owner;
    public final float bobOffs;
 
    public ItemEntity(EntityType<? extends ItemEntity> var1, Level var2) {
       super(var1, var2);
       this.health = 5;
-      this.bobOffs = (float)(Math.random() * 3.141592653589793D * 2.0D);
+      this.bobOffs = this.random.nextFloat() * 3.1415927F * 2.0F;
+      this.setYRot(this.random.nextFloat() * 360.0F);
    }
 
-   public ItemEntity(Level var1, double var2, double var4, double var6) {
+   public ItemEntity(Level var1, double var2, double var4, double var6, ItemStack var8) {
+      this(var1, var2, var4, var6, var8, var1.random.nextDouble() * 0.2D - 0.1D, 0.2D, var1.random.nextDouble() * 0.2D - 0.1D);
+   }
+
+   public ItemEntity(Level var1, double var2, double var4, double var6, ItemStack var8, double var9, double var11, double var13) {
       this(EntityType.ITEM, var1);
       this.setPos(var2, var4, var6);
-      this.yRot = this.random.nextFloat() * 360.0F;
-      this.setDeltaMovement(this.random.nextDouble() * 0.2D - 0.1D, 0.2D, this.random.nextDouble() * 0.2D - 0.1D);
+      this.setDeltaMovement(var9, var11, var13);
+      this.setItem(var8);
    }
 
-   public ItemEntity(Level var1, double var2, double var4, double var6, ItemStack var8) {
-      this(var1, var2, var4, var6);
-      this.setItem(var8);
+   private ItemEntity(ItemEntity var1) {
+      super(var1.getType(), var1.level);
+      this.health = 5;
+      this.setItem(var1.getItem().copy());
+      this.copyPosition(var1);
+      this.age = var1.age;
+      this.bobOffs = var1.bobOffs;
    }
 
-   protected boolean isMovementNoisy() {
-      return false;
+   public boolean occludesVibrations() {
+      return ItemTags.OCCLUDES_VIBRATION_SIGNALS.contains(this.getItem().getItem());
    }
 
+   protected Entity.MovementEmission getMovementEmission() {
+      return Entity.MovementEmission.NONE;
+   }
+
    protected void defineSynchedData() {
       this.getEntityData().define(DATA_ITEM, ItemStack.EMPTY);
    }
 
    public void tick() {
       if (this.getItem().isEmpty()) {
-         this.remove();
+         this.discard();
       } else {
          super.tick();
          if (this.pickupDelay > 0 && this.pickupDelay != 32767) {
             --this.pickupDelay;
          }
@@ -88,17 +106,19 @@
          }
 
          if (this.level.isClientSide) {
             this.noPhysics = false;
          } else {
-            this.noPhysics = !this.level.noCollision(this);
+            this.noPhysics = !this.level.noCollision(this, this.getBoundingBox().deflate(1.0E-7D), (var0) -> {
+               return true;
+            });
             if (this.noPhysics) {
                this.moveTowardsClosestSpace(this.getX(), (this.getBoundingBox().minY + this.getBoundingBox().maxY) / 2.0D, this.getZ());
             }
          }
 
-         if (!this.onGround || getHorizontalDistanceSqr(this.getDeltaMovement()) > 9.999999747378752E-6D || (this.tickCount + this.getId()) % 4 == 0) {
+         if (!this.onGround || this.getDeltaMovement().horizontalDistanceSqr() > 9.999999747378752E-6D || (this.tickCount + this.getId()) % 4 == 0) {
             this.move(MoverType.SELF, this.getDeltaMovement());
             float var3 = 0.98F;
             if (this.onGround) {
                var3 = this.level.getBlockState(new BlockPos(this.getX(), this.getY() - 1.0D, this.getZ())).getBlock().getFriction() * 0.98F;
             }
@@ -112,18 +132,12 @@
             }
          }
 
          boolean var7 = Mth.floor(this.xo) != Mth.floor(this.getX()) || Mth.floor(this.yo) != Mth.floor(this.getY()) || Mth.floor(this.zo) != Mth.floor(this.getZ());
          int var8 = var7 ? 2 : 40;
-         if (this.tickCount % var8 == 0) {
-            if (this.level.getFluidState(this.blockPosition()).is(FluidTags.LAVA) && !this.fireImmune()) {
-               this.playSound(SoundEvents.GENERIC_BURN, 0.4F, 2.0F + this.random.nextFloat() * 0.4F);
-            }
-
-            if (!this.level.isClientSide && this.isMergable()) {
-               this.mergeWithNeighbours();
-            }
+         if (this.tickCount % var8 == 0 && !this.level.isClientSide && this.isMergable()) {
+            this.mergeWithNeighbours();
          }
 
          if (this.age != -32768) {
             ++this.age;
          }
@@ -135,11 +149,11 @@
                this.hasImpulse = true;
             }
          }
 
          if (!this.level.isClientSide && this.age >= 6000) {
-            this.remove();
+            this.discard();
          }
 
       }
    }
 
@@ -162,11 +176,11 @@
 
          while(var2.hasNext()) {
             ItemEntity var3 = (ItemEntity)var2.next();
             if (var3.isMergable()) {
                this.tryToMerge(var3);
-               if (this.removed) {
+               if (this.isRemoved()) {
                   break;
                }
             }
          }
 
@@ -190,11 +204,11 @@
 
       }
    }
 
    public static boolean areMergable(ItemStack var0, ItemStack var1) {
-      if (var1.getItem() != var0.getItem()) {
+      if (!var1.is(var0.getItem())) {
          return false;
       } else if (var1.getCount() + var0.getCount() > var1.getMaxStackSize()) {
          return false;
       } else if (var1.hasTag() ^ var0.hasTag()) {
          return false;
@@ -219,11 +233,11 @@
    private static void merge(ItemEntity var0, ItemStack var1, ItemEntity var2, ItemStack var3) {
       merge(var0, var1, var3);
       var0.pickupDelay = Math.max(var0.pickupDelay, var2.pickupDelay);
       var0.age = Math.min(var0.age, var2.age);
       if (var3.isEmpty()) {
-         var2.remove();
+         var2.discard();
       }
 
    }
 
    public boolean fireImmune() {
@@ -231,22 +245,24 @@
    }
 
    public boolean hurt(DamageSource var1, float var2) {
       if (this.isInvulnerableTo(var1)) {
          return false;
-      } else if (!this.getItem().isEmpty() && this.getItem().getItem() == Items.NETHER_STAR && var1.isExplosion()) {
+      } else if (!this.getItem().isEmpty() && this.getItem().is(Items.NETHER_STAR) && var1.isExplosion()) {
          return false;
       } else if (!this.getItem().getItem().canBeHurtBy(var1)) {
          return false;
       } else {
          this.markHurt();
          this.health = (int)((float)this.health - var2);
+         this.gameEvent(GameEvent.ENTITY_DAMAGED, var1.getEntity());
          if (this.health <= 0) {
-            this.remove();
+            this.getItem().onDestroyed(this);
+            this.discard();
          }
 
-         return false;
+         return true;
       }
    }
 
    public void addAdditionalSaveData(CompoundTag var1) {
       var1.putShort("Health", (short)this.health);
@@ -282,24 +298,24 @@
       }
 
       CompoundTag var2 = var1.getCompound("Item");
       this.setItem(ItemStack.of(var2));
       if (this.getItem().isEmpty()) {
-         this.remove();
+         this.discard();
       }
 
    }
 
    public void playerTouch(Player var1) {
       if (!this.level.isClientSide) {
          ItemStack var2 = this.getItem();
          Item var3 = var2.getItem();
          int var4 = var2.getCount();
-         if (this.pickupDelay == 0 && (this.owner == null || this.owner.equals(var1.getUUID())) && var1.inventory.add(var2)) {
+         if (this.pickupDelay == 0 && (this.owner == null || this.owner.equals(var1.getUUID())) && var1.getInventory().add(var2)) {
             var1.take(this, var4);
             if (var2.isEmpty()) {
-               this.remove();
+               this.discard();
                var2.setCount(var4);
             }
 
             var1.awardStat(Stats.ITEM_PICKED_UP.get(var3), var4);
             var1.onItemPickup(this);
@@ -359,10 +375,14 @@
 
    public void setThrower(@Nullable UUID var1) {
       this.thrower = var1;
    }
 
+   public int getAge() {
+      return this.age;
+   }
+
    public void setDefaultPickUpDelay() {
       this.pickupDelay = 10;
    }
 
    public void setNoPickUpDelay() {
@@ -379,22 +399,38 @@
 
    public boolean hasPickUpDelay() {
       return this.pickupDelay > 0;
    }
 
+   public void setUnlimitedLifetime() {
+      this.age = -32768;
+   }
+
    public void setExtendedLifetime() {
       this.age = -6000;
    }
 
    public void makeFakeItem() {
       this.setNeverPickUp();
       this.age = 5999;
    }
 
+   public float getSpin(float var1) {
+      return ((float)this.getAge() + var1) / 20.0F + this.bobOffs;
+   }
+
    public Packet<?> getAddEntityPacket() {
       return new ClientboundAddEntityPacket(this);
    }
 
+   public ItemEntity copy() {
+      return new ItemEntity(this);
+   }
+
+   public SoundSource getSoundSource() {
+      return SoundSource.AMBIENT;
+   }
+
    static {
       DATA_ITEM = SynchedEntityData.defineId(ItemEntity.class, EntityDataSerializers.ITEM_STACK);
    }
 }
