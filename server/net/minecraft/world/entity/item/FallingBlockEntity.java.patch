--- net/minecraft/world/entity/item/FallingBlockEntity.java
+++ net/minecraft/world/entity/item/FallingBlockEntity.java
@@ -1,10 +1,9 @@
 package net.minecraft.world.entity.item;
 
-import com.google.common.collect.Lists;
-import java.util.ArrayList;
 import java.util.Iterator;
+import java.util.function.Predicate;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtUtils;
@@ -17,10 +16,11 @@
 import net.minecraft.tags.BlockTags;
 import net.minecraft.tags.FluidTags;
 import net.minecraft.util.Mth;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.EntitySelector;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.MoverType;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.context.DirectionalPlaceContext;
 import net.minecraft.world.level.ClipContext;
@@ -28,11 +28,11 @@
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.AnvilBlock;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.ConcretePowderBlock;
-import net.minecraft.world.level.block.EntityBlock;
+import net.minecraft.world.level.block.Fallable;
 import net.minecraft.world.level.block.FallingBlock;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.material.Fluids;
@@ -45,20 +45,19 @@
    public int time;
    public boolean dropItem;
    private boolean cancelDrop;
    private boolean hurtEntities;
    private int fallDamageMax;
-   private float fallDamageAmount;
+   private float fallDamagePerDistance;
    public CompoundTag blockData;
    protected static final EntityDataAccessor<BlockPos> DATA_START_POS;
 
    public FallingBlockEntity(EntityType<? extends FallingBlockEntity> var1, Level var2) {
       super(var1, var2);
       this.blockState = Blocks.SAND.defaultBlockState();
       this.dropItem = true;
       this.fallDamageMax = 40;
-      this.fallDamageAmount = 2.0F;
    }
 
    public FallingBlockEntity(Level var1, double var2, double var4, double var6, BlockState var8) {
       this(EntityType.FALLING_BLOCK, var1);
       this.blockState = var8;
@@ -77,34 +76,34 @@
 
    public void setStartPos(BlockPos var1) {
       this.entityData.set(DATA_START_POS, var1);
    }
 
-   protected boolean isMovementNoisy() {
-      return false;
+   protected Entity.MovementEmission getMovementEmission() {
+      return Entity.MovementEmission.NONE;
    }
 
    protected void defineSynchedData() {
       this.entityData.define(DATA_START_POS, BlockPos.ZERO);
    }
 
    public boolean isPickable() {
-      return !this.removed;
+      return !this.isRemoved();
    }
 
    public void tick() {
       if (this.blockState.isAir()) {
-         this.remove();
+         this.discard();
       } else {
          Block var1 = this.blockState.getBlock();
          BlockPos var2;
          if (this.time++ == 0) {
             var2 = this.blockPosition();
             if (this.level.getBlockState(var2).is(var1)) {
                this.level.removeBlock(var2, false);
             } else if (!this.level.isClientSide) {
-               this.remove();
+               this.discard();
                return;
             }
          }
 
          if (!this.isNoGravity()) {
@@ -124,37 +123,37 @@
                   var4 = true;
                }
             }
 
             if (!this.onGround && !var4) {
-               if (!this.level.isClientSide && (this.time > 100 && (var2.getY() < 1 || var2.getY() > 256) || this.time > 600)) {
+               if (!this.level.isClientSide && (this.time > 100 && (var2.getY() <= this.level.getMinBuildHeight() || var2.getY() > this.level.getMaxBuildHeight()) || this.time > 600)) {
                   if (this.dropItem && this.level.getGameRules().getBoolean(GameRules.RULE_DOENTITYDROPS)) {
                      this.spawnAtLocation(var1);
                   }
 
-                  this.remove();
+                  this.discard();
                }
             } else {
                BlockState var16 = this.level.getBlockState(var2);
                this.setDeltaMovement(this.getDeltaMovement().multiply(0.7D, -0.5D, 0.7D));
                if (!var16.is(Blocks.MOVING_PISTON)) {
-                  this.remove();
+                  this.discard();
                   if (!this.cancelDrop) {
                      boolean var8 = var16.canBeReplaced(new DirectionalPlaceContext(this.level, var2, Direction.DOWN, ItemStack.EMPTY, Direction.UP));
                      boolean var9 = FallingBlock.isFree(this.level.getBlockState(var2.below())) && (!var3 || !var4);
                      boolean var10 = this.blockState.canSurvive(this.level, var2) && !var9;
                      if (var8 && var10) {
                         if (this.blockState.hasProperty(BlockStateProperties.WATERLOGGED) && this.level.getFluidState(var2).getType() == Fluids.WATER) {
                            this.blockState = (BlockState)this.blockState.setValue(BlockStateProperties.WATERLOGGED, true);
                         }
 
                         if (this.level.setBlock(var2, this.blockState, 3)) {
-                           if (var1 instanceof FallingBlock) {
-                              ((FallingBlock)var1).onLand(this.level, var2, this.blockState, var16, this);
+                           if (var1 instanceof Fallable) {
+                              ((Fallable)var1).onLand(this.level, var2, this.blockState, var16, this);
                            }
 
-                           if (this.blockData != null && var1 instanceof EntityBlock) {
+                           if (this.blockData != null && this.blockState.hasBlockEntity()) {
                               BlockEntity var11 = this.level.getBlockEntity(var2);
                               if (var11 != null) {
                                  CompoundTag var12 = var11.save(new CompoundTag());
                                  Iterator var13 = this.blockData.getAllKeys().iterator();
 
@@ -164,65 +163,84 @@
                                     if (!"x".equals(var14) && !"y".equals(var14) && !"z".equals(var14)) {
                                        var12.put(var14, var15.copy());
                                     }
                                  }
 
-                                 var11.load(this.blockState, var12);
+                                 var11.load(var12);
                                  var11.setChanged();
                               }
                            }
                         } else if (this.dropItem && this.level.getGameRules().getBoolean(GameRules.RULE_DOENTITYDROPS)) {
+                           this.callOnBrokenAfterFall(var1, var2);
                            this.spawnAtLocation(var1);
                         }
                      } else if (this.dropItem && this.level.getGameRules().getBoolean(GameRules.RULE_DOENTITYDROPS)) {
+                        this.callOnBrokenAfterFall(var1, var2);
                         this.spawnAtLocation(var1);
                      }
-                  } else if (var1 instanceof FallingBlock) {
-                     ((FallingBlock)var1).onBroken(this.level, var2, this);
+                  } else {
+                     this.callOnBrokenAfterFall(var1, var2);
                   }
                }
             }
          }
 
          this.setDeltaMovement(this.getDeltaMovement().scale(0.98D));
       }
    }
 
-   public boolean causeFallDamage(float var1, float var2) {
-      if (this.hurtEntities) {
-         int var3 = Mth.ceil(var1 - 1.0F);
-         if (var3 > 0) {
-            ArrayList var4 = Lists.newArrayList((Iterable)this.level.getEntities(this, this.getBoundingBox()));
-            boolean var5 = this.blockState.is(BlockTags.ANVIL);
-            DamageSource var6 = var5 ? DamageSource.ANVIL : DamageSource.FALLING_BLOCK;
-            Iterator var7 = var4.iterator();
+   public void callOnBrokenAfterFall(Block var1, BlockPos var2) {
+      if (var1 instanceof Fallable) {
+         ((Fallable)var1).onBrokenAfterFall(this.level, var2, this);
+      }
 
-            while(var7.hasNext()) {
-               Entity var8 = (Entity)var7.next();
-               var8.hurt(var6, (float)Math.min(Mth.floor((float)var3 * this.fallDamageAmount), this.fallDamageMax));
+   }
+
+   public boolean causeFallDamage(float var1, float var2, DamageSource var3) {
+      if (!this.hurtEntities) {
+         return false;
+      } else {
+         int var4 = Mth.ceil(var1 - 1.0F);
+         if (var4 < 0) {
+            return false;
+         } else {
+            Predicate var5;
+            DamageSource var6;
+            if (this.blockState.getBlock() instanceof Fallable) {
+               Fallable var7 = (Fallable)this.blockState.getBlock();
+               var5 = var7.getHurtsEntitySelector();
+               var6 = var7.getFallDamageSource();
+            } else {
+               var5 = EntitySelector.NO_SPECTATORS;
+               var6 = DamageSource.FALLING_BLOCK;
             }
 
-            if (var5 && (double)this.random.nextFloat() < 0.05000000074505806D + (double)var3 * 0.05D) {
+            float var10 = (float)Math.min(Mth.floor((float)var4 * this.fallDamagePerDistance), this.fallDamageMax);
+            this.level.getEntities((Entity)this, this.getBoundingBox(), var5).forEach((var2x) -> {
+               var2x.hurt(var6, var10);
+            });
+            boolean var8 = this.blockState.is(BlockTags.ANVIL);
+            if (var8 && (double)this.random.nextFloat() < 0.05000000074505806D + (double)var4 * 0.05D) {
                BlockState var9 = AnvilBlock.damage(this.blockState);
                if (var9 == null) {
                   this.cancelDrop = true;
                } else {
                   this.blockState = var9;
                }
             }
+
+            return false;
          }
       }
-
-      return false;
    }
 
    protected void addAdditionalSaveData(CompoundTag var1) {
       var1.put("BlockState", NbtUtils.writeBlockState(this.blockState));
       var1.putInt("Time", this.time);
       var1.putBoolean("DropItem", this.dropItem);
       var1.putBoolean("HurtEntities", this.hurtEntities);
-      var1.putFloat("FallHurtAmount", this.fallDamageAmount);
+      var1.putFloat("FallHurtAmount", this.fallDamagePerDistance);
       var1.putInt("FallHurtMax", this.fallDamageMax);
       if (this.blockData != null) {
          var1.put("TileEntityData", this.blockData);
       }
 
@@ -231,11 +249,11 @@
    protected void readAdditionalSaveData(CompoundTag var1) {
       this.blockState = NbtUtils.readBlockState(var1.getCompound("BlockState"));
       this.time = var1.getInt("Time");
       if (var1.contains("HurtEntities", 99)) {
          this.hurtEntities = var1.getBoolean("HurtEntities");
-         this.fallDamageAmount = var1.getFloat("FallHurtAmount");
+         this.fallDamagePerDistance = var1.getFloat("FallHurtAmount");
          this.fallDamageMax = var1.getInt("FallHurtMax");
       } else if (this.blockState.is(BlockTags.ANVIL)) {
          this.hurtEntities = true;
       }
 
@@ -251,12 +269,14 @@
          this.blockState = Blocks.SAND.defaultBlockState();
       }
 
    }
 
-   public void setHurtsEntities(boolean var1) {
-      this.hurtEntities = var1;
+   public void setHurtsEntities(float var1, int var2) {
+      this.hurtEntities = true;
+      this.fallDamagePerDistance = var1;
+      this.fallDamageMax = var2;
    }
 
    public void fillCrashReportCategory(CrashReportCategory var1) {
       super.fillCrashReportCategory(var1);
       var1.setDetail("Immitating BlockState", (Object)this.blockState.toString());
