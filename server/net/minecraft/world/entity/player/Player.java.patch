--- net/minecraft/world/entity/player/Player.java
+++ net/minecraft/world/entity/player/Player.java
@@ -4,20 +4,22 @@
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfile;
 import com.mojang.datafixers.util.Either;
 import java.nio.charset.StandardCharsets;
+import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Optional;
 import java.util.OptionalInt;
 import java.util.UUID;
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
 import net.minecraft.SharedConstants;
+import net.minecraft.Util;
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.nbt.CompoundTag;
@@ -116,11 +118,11 @@
    protected static final EntityDataAccessor<Byte> DATA_PLAYER_MODE_CUSTOMISATION;
    protected static final EntityDataAccessor<Byte> DATA_PLAYER_MAIN_HAND;
    protected static final EntityDataAccessor<CompoundTag> DATA_SHOULDER_LEFT;
    protected static final EntityDataAccessor<CompoundTag> DATA_SHOULDER_RIGHT;
    private long timeEntitySatOnShoulder;
-   public final Inventory inventory = new Inventory(this);
+   private final Inventory inventory = new Inventory(this);
    protected PlayerEnderChestContainer enderChestInventory = new PlayerEnderChestContainer();
    public final InventoryMenu inventoryMenu;
    public AbstractContainerMenu containerMenu;
    protected FoodData foodData = new FoodData();
    protected int jumpTriggerTime;
@@ -133,11 +135,11 @@
    public double xCloak;
    public double yCloak;
    public double zCloak;
    private int sleepCounter;
    protected boolean wasUnderwater;
-   public final Abilities abilities = new Abilities();
+   private final Abilities abilities = new Abilities();
    public int experienceLevel;
    public int totalExperience;
    public float experienceProgress;
    protected int enchantmentSeed;
    protected final float defaultFlySpeed = 0.02F;
@@ -276,11 +278,11 @@
       return this.wasUnderwater;
    }
 
    private void turtleHelmetTick() {
       ItemStack var1 = this.getItemBySlot(EquipmentSlot.HEAD);
-      if (var1.getItem() == Items.TURTLE_HELMET && !this.isEyeInFluid(FluidTags.WATER)) {
+      if (var1.is(Items.TURTLE_HELMET) && !this.isEyeInFluid(FluidTags.WATER)) {
          this.addEffect(new MobEffectInstance(MobEffects.WATER_BREATHING, 200, 0, false, false, true));
       }
 
    }
 
@@ -455,24 +457,31 @@
       }
 
       this.bob += (var1 - this.bob) * 0.4F;
       if (this.getHealth() > 0.0F && !this.isSpectator()) {
          AABB var2;
-         if (this.isPassenger() && !this.getVehicle().removed) {
+         if (this.isPassenger() && !this.getVehicle().isRemoved()) {
             var2 = this.getBoundingBox().minmax(this.getVehicle().getBoundingBox()).inflate(1.0D, 0.0D, 1.0D);
          } else {
             var2 = this.getBoundingBox().inflate(1.0D, 0.5D, 1.0D);
          }
 
          List var3 = this.level.getEntities(this, var2);
+         ArrayList var4 = Lists.newArrayList();
 
-         for(int var4 = 0; var4 < var3.size(); ++var4) {
-            Entity var5 = (Entity)var3.get(var4);
-            if (!var5.removed) {
-               this.touch(var5);
+         for(int var5 = 0; var5 < var3.size(); ++var5) {
+            Entity var6 = (Entity)var3.get(var5);
+            if (var6.getType() == EntityType.EXPERIENCE_ORB) {
+               var4.add(var6);
+            } else if (!var6.isRemoved()) {
+               this.touch(var6);
             }
          }
+
+         if (!var4.isEmpty()) {
+            this.touch((Entity)Util.getRandom((List)var4, this.random));
+         }
       }
 
       this.playShoulderEntityAmbientSound(this.getShoulderEntityLeft());
       this.playShoulderEntityAmbientSound(this.getShoulderEntityRight());
       if (!this.level.isClientSide && (this.fallDistance > 0.5F || this.isInWater()) || this.abilities.flying || this.isSleeping()) {
@@ -783,11 +792,11 @@
    protected void hurtArmor(DamageSource var1, float var2) {
       this.inventory.hurtArmor(var1, var2);
    }
 
    protected void hurtCurrentlyUsedShield(float var1) {
-      if (this.useItem.getItem() == Items.SHIELD) {
+      if (this.useItem.is(Items.SHIELD)) {
          if (!this.level.isClientSide) {
             this.awardStat(Stats.ITEM_USED.get(this.useItem.getItem()));
          }
 
          if (var1 >= 3.0F) {
@@ -1181,12 +1190,12 @@
          ((ServerLevel)this.level).sendParticles(ParticleTypes.SWEEP_ATTACK, this.getX() + var1, this.getY(0.5D), this.getZ() + var3, 0, var1, 0.0D, var3, 0.0D);
       }
 
    }
 
-   public void remove() {
-      super.remove();
+   public void remove(Entity.RemovalReason var1) {
+      super.remove(var1);
       this.inventoryMenu.removed(this);
       if (this.containerMenu != null) {
          this.containerMenu.removed(this);
       }
 
@@ -1198,10 +1207,18 @@
 
    public GameProfile getGameProfile() {
       return this.gameProfile;
    }
 
+   public Inventory getInventory() {
+      return this.inventory;
+   }
+
+   public Abilities getAbilities() {
+      return this.abilities;
+   }
+
    public Either<Player.BedSleepingProblem, Unit> startSleepInBed(BlockPos var1) {
       this.startSleeping(var1);
       this.sleepCounter = 0;
       return Either.right(Unit.INSTANCE);
    }
@@ -1425,11 +1442,11 @@
    }
 
    public boolean tryToStartFallFlying() {
       if (!this.onGround && !this.isFallFlying() && !this.isInWater() && !this.hasEffect(MobEffects.LEVITATION)) {
          ItemStack var1 = this.getItemBySlot(EquipmentSlot.CHEST);
-         if (var1.getItem() == Items.ELYTRA && ElytraItem.isFlyEnabled(var1)) {
+         if (var1.is(Items.ELYTRA) && ElytraItem.isFlyEnabled(var1)) {
             this.startFallFlying();
             return true;
          }
       }
 
@@ -1899,10 +1916,14 @@
 
    protected boolean shouldRemoveSoulSpeed(BlockState var1) {
       return this.abilities.flying || super.shouldRemoveSoulSpeed(var1);
    }
 
+   public boolean isAlwaysTicking() {
+      return true;
+   }
+
    static {
       POSES = ImmutableMap.builder().put(Pose.STANDING, STANDING_DIMENSIONS).put(Pose.SLEEPING, SLEEPING_DIMENSIONS).put(Pose.FALL_FLYING, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.SWIMMING, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.SPIN_ATTACK, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.CROUCHING, EntityDimensions.scalable(0.6F, 1.5F)).put(Pose.DYING, EntityDimensions.fixed(0.2F, 0.2F)).build();
       DATA_PLAYER_ABSORPTION_ID = SynchedEntityData.defineId(Player.class, EntityDataSerializers.FLOAT);
       DATA_SCORE_ID = SynchedEntityData.defineId(Player.class, EntityDataSerializers.INT);
       DATA_PLAYER_MODE_CUSTOMISATION = SynchedEntityData.defineId(Player.class, EntityDataSerializers.BYTE);
