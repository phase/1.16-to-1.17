--- net/minecraft/world/entity/player/Player.java
+++ net/minecraft/world/entity/player/Player.java
@@ -4,23 +4,26 @@
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfile;
 import com.mojang.datafixers.util.Either;
 import java.nio.charset.StandardCharsets;
+import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Optional;
 import java.util.OptionalInt;
 import java.util.UUID;
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
 import net.minecraft.SharedConstants;
+import net.minecraft.Util;
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
+import net.minecraft.core.particles.ParticleOptions;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.network.chat.ClickEvent;
 import net.minecraft.network.chat.Component;
@@ -59,10 +62,11 @@
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.MobType;
 import net.minecraft.world.entity.MoverType;
 import net.minecraft.world.entity.Pose;
+import net.minecraft.world.entity.SlotAccess;
 import net.minecraft.world.entity.TamableAnimal;
 import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
 import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.animal.Parrot;
 import net.minecraft.world.entity.animal.Pig;
@@ -74,13 +78,13 @@
 import net.minecraft.world.entity.projectile.FishingHook;
 import net.minecraft.world.entity.vehicle.AbstractMinecart;
 import net.minecraft.world.entity.vehicle.Boat;
 import net.minecraft.world.food.FoodData;
 import net.minecraft.world.inventory.AbstractContainerMenu;
+import net.minecraft.world.inventory.ClickAction;
 import net.minecraft.world.inventory.InventoryMenu;
 import net.minecraft.world.inventory.PlayerEnderChestContainer;
-import net.minecraft.world.item.ArmorItem;
 import net.minecraft.world.item.AxeItem;
 import net.minecraft.world.item.ElytraItem;
 import net.minecraft.world.item.ItemCooldowns;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
@@ -107,20 +111,31 @@
 import net.minecraft.world.scores.PlayerTeam;
 import net.minecraft.world.scores.Scoreboard;
 import net.minecraft.world.scores.Team;
 
 public abstract class Player extends LivingEntity {
+   public static final String UUID_PREFIX_OFFLINE_PLAYER = "OfflinePlayer:";
+   public static final int MAX_NAME_LENGTH = 16;
+   public static final int MAX_HEALTH = 20;
+   public static final int SLEEP_DURATION = 100;
+   public static final int WAKE_UP_DURATION = 10;
+   public static final int ENDER_SLOT_OFFSET = 200;
+   public static final float CROUCH_BB_HEIGHT = 1.5F;
+   public static final float SWIMMING_BB_WIDTH = 0.6F;
+   public static final float SWIMMING_BB_HEIGHT = 0.6F;
+   public static final float DEFAULT_EYE_HEIGHT = 1.62F;
    public static final EntityDimensions STANDING_DIMENSIONS = EntityDimensions.scalable(0.6F, 1.8F);
    private static final Map<Pose, EntityDimensions> POSES;
+   private static final int FLY_ACHIEVEMENT_SPEED = 25;
    private static final EntityDataAccessor<Float> DATA_PLAYER_ABSORPTION_ID;
    private static final EntityDataAccessor<Integer> DATA_SCORE_ID;
    protected static final EntityDataAccessor<Byte> DATA_PLAYER_MODE_CUSTOMISATION;
    protected static final EntityDataAccessor<Byte> DATA_PLAYER_MAIN_HAND;
    protected static final EntityDataAccessor<CompoundTag> DATA_SHOULDER_LEFT;
    protected static final EntityDataAccessor<CompoundTag> DATA_SHOULDER_RIGHT;
    private long timeEntitySatOnShoulder;
-   public final Inventory inventory = new Inventory(this);
+   private final Inventory inventory = new Inventory(this);
    protected PlayerEnderChestContainer enderChestInventory = new PlayerEnderChestContainer();
    public final InventoryMenu inventoryMenu;
    public AbstractContainerMenu containerMenu;
    protected FoodData foodData = new FoodData();
    protected int jumpTriggerTime;
@@ -133,18 +148,19 @@
    public double xCloak;
    public double yCloak;
    public double zCloak;
    private int sleepCounter;
    protected boolean wasUnderwater;
-   public final Abilities abilities = new Abilities();
+   private final Abilities abilities = new Abilities();
    public int experienceLevel;
    public int totalExperience;
    public float experienceProgress;
    protected int enchantmentSeed;
    protected final float defaultFlySpeed = 0.02F;
    private int lastLevelUpTime;
    private final GameProfile gameProfile;
+   private boolean reducedDebugInfo;
    private ItemStack lastItemInMainHand;
    private final ItemCooldowns cooldowns;
    @Nullable
    public FishingHook fishing;
 
@@ -221,11 +237,12 @@
       }
 
       this.moveCloak();
       if (!this.level.isClientSide) {
          this.foodData.tick(this);
-         this.awardStat(Stats.PLAY_ONE_MINUTE);
+         this.awardStat(Stats.PLAY_TIME);
+         this.awardStat(Stats.TOTAL_WORLD_TIME);
          if (this.isAlive()) {
             this.awardStat(Stats.TIME_SINCE_DEATH);
          }
 
          if (this.isDiscrete()) {
@@ -276,11 +293,11 @@
       return this.wasUnderwater;
    }
 
    private void turtleHelmetTick() {
       ItemStack var1 = this.getItemBySlot(EquipmentSlot.HEAD);
-      if (var1.getItem() == Items.TURTLE_HELMET && !this.isEyeInFluid(FluidTags.WATER)) {
+      if (var1.is(Items.TURTLE_HELMET) && !this.isEyeInFluid(FluidTags.WATER)) {
          this.addEffect(new MobEffectInstance(MobEffects.WATER_BREATHING, 200, 0, false, false, true));
       }
 
    }
 
@@ -396,16 +413,41 @@
 
    protected int getFireImmuneTicks() {
       return 20;
    }
 
+   public void handleEntityEvent(byte var1) {
+      if (var1 == 9) {
+         this.completeUsingItem();
+      } else if (var1 == 23) {
+         this.reducedDebugInfo = false;
+      } else if (var1 == 22) {
+         this.reducedDebugInfo = true;
+      } else if (var1 == 43) {
+         this.addParticlesAroundSelf(ParticleTypes.CLOUD);
+      } else {
+         super.handleEntityEvent(var1);
+      }
+
+   }
+
+   private void addParticlesAroundSelf(ParticleOptions var1) {
+      for(int var2 = 0; var2 < 5; ++var2) {
+         double var3 = this.random.nextGaussian() * 0.02D;
+         double var5 = this.random.nextGaussian() * 0.02D;
+         double var7 = this.random.nextGaussian() * 0.02D;
+         this.level.addParticle(var1, this.getRandomX(1.0D), this.getRandomY() + 1.0D, this.getRandomZ(1.0D), var3, var5, var7);
+      }
+
+   }
+
    protected void closeContainer() {
       this.containerMenu = this.inventoryMenu;
    }
 
    public void rideTick() {
-      if (this.wantsToStopRiding() && this.isPassenger()) {
+      if (!this.level.isClientSide && this.wantsToStopRiding() && this.isPassenger()) {
          this.stopRiding();
          this.setShiftKeyDown(false);
       } else {
          double var1 = this.getX();
          double var3 = this.getY();
@@ -418,11 +460,11 @@
    }
 
    protected void serverAiStep() {
       super.serverAiStep();
       this.updateSwingTime();
-      this.yHeadRot = this.yRot;
+      this.yHeadRot = this.getYRot();
    }
 
    public void aiStep() {
       if (this.jumpTriggerTime > 0) {
          --this.jumpTriggerTime;
@@ -447,37 +489,44 @@
       }
 
       this.setSpeed((float)this.getAttributeValue(Attributes.MOVEMENT_SPEED));
       float var1;
       if (this.onGround && !this.isDeadOrDying() && !this.isSwimming()) {
-         var1 = Math.min(0.1F, Mth.sqrt(getHorizontalDistanceSqr(this.getDeltaMovement())));
+         var1 = Math.min(0.1F, (float)this.getDeltaMovement().horizontalDistance());
       } else {
          var1 = 0.0F;
       }
 
       this.bob += (var1 - this.bob) * 0.4F;
       if (this.getHealth() > 0.0F && !this.isSpectator()) {
          AABB var2;
-         if (this.isPassenger() && !this.getVehicle().removed) {
+         if (this.isPassenger() && !this.getVehicle().isRemoved()) {
             var2 = this.getBoundingBox().minmax(this.getVehicle().getBoundingBox()).inflate(1.0D, 0.0D, 1.0D);
          } else {
             var2 = this.getBoundingBox().inflate(1.0D, 0.5D, 1.0D);
          }
 
          List var3 = this.level.getEntities(this, var2);
+         ArrayList var4 = Lists.newArrayList();
 
-         for(int var4 = 0; var4 < var3.size(); ++var4) {
-            Entity var5 = (Entity)var3.get(var4);
-            if (!var5.removed) {
-               this.touch(var5);
+         for(int var5 = 0; var5 < var3.size(); ++var5) {
+            Entity var6 = (Entity)var3.get(var5);
+            if (var6.getType() == EntityType.EXPERIENCE_ORB) {
+               var4.add(var6);
+            } else if (!var6.isRemoved()) {
+               this.touch(var6);
             }
          }
+
+         if (!var4.isEmpty()) {
+            this.touch((Entity)Util.getRandom((List)var4, this.random));
+         }
       }
 
       this.playShoulderEntityAmbientSound(this.getShoulderEntityLeft());
       this.playShoulderEntityAmbientSound(this.getShoulderEntityRight());
-      if (!this.level.isClientSide && (this.fallDistance > 0.5F || this.isInWater()) || this.abilities.flying || this.isSleeping()) {
+      if (!this.level.isClientSide && (this.fallDistance > 0.5F || this.isInWater()) || this.abilities.flying || this.isSleeping() || this.isInPowderSnow) {
          this.removeEntitiesOnShoulder();
       }
 
    }
 
@@ -519,20 +568,20 @@
       if (!this.isSpectator()) {
          this.dropAllDeathLoot(var1);
       }
 
       if (var1 != null) {
-         this.setDeltaMovement((double)(-Mth.cos((this.hurtDir + this.yRot) * 0.017453292F) * 0.1F), 0.10000000149011612D, (double)(-Mth.sin((this.hurtDir + this.yRot) * 0.017453292F) * 0.1F));
+         this.setDeltaMovement((double)(-Mth.cos((this.hurtDir + this.getYRot()) * 0.017453292F) * 0.1F), 0.10000000149011612D, (double)(-Mth.sin((this.hurtDir + this.getYRot()) * 0.017453292F) * 0.1F));
       } else {
          this.setDeltaMovement(0.0D, 0.1D, 0.0D);
       }
 
       this.awardStat(Stats.DEATHS);
       this.resetStat(Stats.CUSTOM.get(Stats.TIME_SINCE_DEATH));
       this.resetStat(Stats.CUSTOM.get(Stats.TIME_SINCE_REST));
       this.clearFire();
-      this.setSharedFlag(0, false);
+      this.setSharedFlagOnFire(false);
    }
 
    protected void dropEquipment() {
       super.dropEquipment();
       if (!this.level.getGameRules().getBoolean(GameRules.RULE_KEEPINVENTORY)) {
@@ -555,12 +604,14 @@
    protected SoundEvent getHurtSound(DamageSource var1) {
       if (var1 == DamageSource.ON_FIRE) {
          return SoundEvents.PLAYER_HURT_ON_FIRE;
       } else if (var1 == DamageSource.DROWN) {
          return SoundEvents.PLAYER_HURT_DROWN;
+      } else if (var1 == DamageSource.SWEET_BERRY_BUSH) {
+         return SoundEvents.PLAYER_HURT_SWEET_BERRY_BUSH;
       } else {
-         return var1 == DamageSource.SWEET_BERRY_BUSH ? SoundEvents.PLAYER_HURT_SWEET_BERRY_BUSH : SoundEvents.PLAYER_HURT;
+         return var1 == DamageSource.FREEZE ? SoundEvents.PLAYER_HURT_FREEZE : SoundEvents.PLAYER_HURT;
       }
    }
 
    protected SoundEvent getDeathSound() {
       return SoundEvents.PLAYER_DEATH;
@@ -597,14 +648,14 @@
             var7 = this.random.nextFloat() * 0.5F;
             var8 = this.random.nextFloat() * 6.2831855F;
             var6.setDeltaMovement((double)(-Mth.sin(var8) * var7), 0.20000000298023224D, (double)(Mth.cos(var8) * var7));
          } else {
             var7 = 0.3F;
-            var8 = Mth.sin(this.xRot * 0.017453292F);
-            float var9 = Mth.cos(this.xRot * 0.017453292F);
-            float var10 = Mth.sin(this.yRot * 0.017453292F);
-            float var11 = Mth.cos(this.yRot * 0.017453292F);
+            var8 = Mth.sin(this.getXRot() * 0.017453292F);
+            float var9 = Mth.cos(this.getXRot() * 0.017453292F);
+            float var10 = Mth.sin(this.getYRot() * 0.017453292F);
+            float var11 = Mth.cos(this.getYRot() * 0.017453292F);
             float var12 = this.random.nextFloat() * 6.2831855F;
             float var13 = 0.02F * this.random.nextFloat();
             var6.setDeltaMovement((double)(-var10 * var9 * 0.3F) + Math.cos((double)var12) * (double)var13, (double)(-var8 * 0.3F + 0.1F + (this.random.nextFloat() - this.random.nextFloat()) * 0.1F), (double)(var11 * var9 * 0.3F) + Math.sin((double)var12) * (double)var13);
          }
 
@@ -721,14 +772,16 @@
    public boolean isInvulnerableTo(DamageSource var1) {
       if (super.isInvulnerableTo(var1)) {
          return true;
       } else if (var1 == DamageSource.DROWN) {
          return !this.level.getGameRules().getBoolean(GameRules.RULE_DROWNING_DAMAGE);
-      } else if (var1 == DamageSource.FALL) {
+      } else if (var1.isFall()) {
          return !this.level.getGameRules().getBoolean(GameRules.RULE_FALL_DAMAGE);
       } else if (var1.isFire()) {
          return !this.level.getGameRules().getBoolean(GameRules.RULE_FIRE_DAMAGE);
+      } else if (var1 == DamageSource.FREEZE) {
+         return !this.level.getGameRules().getBoolean(GameRules.RULE_FREEZE_DAMAGE);
       } else {
          return false;
       }
    }
 
@@ -768,10 +821,14 @@
          this.disableShield(true);
       }
 
    }
 
+   public boolean canBeSeenAsEnemy() {
+      return !this.getAbilities().invulnerable && super.canBeSeenAsEnemy();
+   }
+
    public boolean canHarmPlayer(Player var1) {
       Team var2 = this.getTeam();
       Team var3 = var1.getTeam();
       if (var2 == null) {
          return true;
@@ -779,15 +836,19 @@
          return !var2.isAlliedTo(var3) ? true : var2.isAllowFriendlyFire();
       }
    }
 
    protected void hurtArmor(DamageSource var1, float var2) {
-      this.inventory.hurtArmor(var1, var2);
+      this.inventory.hurtArmor(var1, var2, Inventory.ALL_ARMOR_SLOTS);
    }
 
+   protected void hurtHelmet(DamageSource var1, float var2) {
+      this.inventory.hurtArmor(var1, var2, Inventory.HELMET_SLOT_ONLY);
+   }
+
    protected void hurtCurrentlyUsedShield(float var1) {
-      if (this.useItem.getItem() == Items.SHIELD) {
+      if (this.useItem.is(Items.SHIELD)) {
          if (!this.level.isClientSide) {
             this.awardStat(Stats.ITEM_USED.get(this.useItem.getItem()));
          }
 
          if (var1 >= 3.0F) {
@@ -1040,13 +1101,13 @@
                Vec3 var15 = var1.getDeltaMovement();
                boolean var16 = var1.hurt(DamageSource.playerAttack(this), var2);
                if (var16) {
                   if (var21 > 0) {
                      if (var1 instanceof LivingEntity) {
-                        ((LivingEntity)var1).knockback((float)var21 * 0.5F, (double)Mth.sin(this.yRot * 0.017453292F), (double)(-Mth.cos(this.yRot * 0.017453292F)));
+                        ((LivingEntity)var1).knockback((double)((float)var21 * 0.5F), (double)Mth.sin(this.getYRot() * 0.017453292F), (double)(-Mth.cos(this.getYRot() * 0.017453292F)));
                      } else {
-                        var1.push((double)(-Mth.sin(this.yRot * 0.017453292F) * (float)var21 * 0.5F), 0.1D, (double)(Mth.cos(this.yRot * 0.017453292F) * (float)var21 * 0.5F));
+                        var1.push((double)(-Mth.sin(this.getYRot() * 0.017453292F) * (float)var21 * 0.5F), 0.1D, (double)(Mth.cos(this.getYRot() * 0.017453292F) * (float)var21 * 0.5F));
                      }
 
                      this.setDeltaMovement(this.getDeltaMovement().multiply(0.6D, 1.0D, 0.6D));
                      this.setSprinting(false);
                   }
@@ -1074,11 +1135,11 @@
                               } while(var20 == var1);
                            } while(this.isAlliedTo(var20));
                         } while(var20 instanceof ArmorStand && ((ArmorStand)var20).isMarker());
 
                         if (this.distanceToSqr(var20) < 9.0D) {
-                           var20.knockback(0.4F, (double)Mth.sin(this.yRot * 0.017453292F), (double)(-Mth.cos(this.yRot * 0.017453292F)));
+                           var20.knockback(0.4000000059604645D, (double)Mth.sin(this.getYRot() * 0.017453292F), (double)(-Mth.cos(this.getYRot() * 0.017453292F)));
                            var20.hurt(DamageSource.playerAttack(this), var17);
                         }
                      }
                   }
 
@@ -1173,20 +1234,23 @@
 
    public void magicCrit(Entity var1) {
    }
 
    public void sweepAttack() {
-      double var1 = (double)(-Mth.sin(this.yRot * 0.017453292F));
-      double var3 = (double)Mth.cos(this.yRot * 0.017453292F);
+      double var1 = (double)(-Mth.sin(this.getYRot() * 0.017453292F));
+      double var3 = (double)Mth.cos(this.getYRot() * 0.017453292F);
       if (this.level instanceof ServerLevel) {
          ((ServerLevel)this.level).sendParticles(ParticleTypes.SWEEP_ATTACK, this.getX() + var1, this.getY(0.5D), this.getZ() + var3, 0, var1, 0.0D, var3, 0.0D);
       }
 
    }
 
-   public void remove() {
-      super.remove();
+   public void respawn() {
+   }
+
+   public void remove(Entity.RemovalReason var1) {
+      super.remove(var1);
       this.inventoryMenu.removed(this);
       if (this.containerMenu != null) {
          this.containerMenu.removed(this);
       }
 
@@ -1198,10 +1262,21 @@
 
    public GameProfile getGameProfile() {
       return this.gameProfile;
    }
 
+   public Inventory getInventory() {
+      return this.inventory;
+   }
+
+   public Abilities getAbilities() {
+      return this.abilities;
+   }
+
+   public void updateTutorialInventoryAction(ItemStack var1, ItemStack var2, ClickAction var3) {
+   }
+
    public Either<Player.BedSleepingProblem, Unit> startSleepInBed(BlockPos var1) {
       this.startSleeping(var1);
       this.sleepCounter = 0;
       return Either.right(Unit.INSTANCE);
    }
@@ -1341,33 +1416,33 @@
 
    public void checkMovementStatistics(double var1, double var3, double var5) {
       if (!this.isPassenger()) {
          int var7;
          if (this.isSwimming()) {
-            var7 = Math.round(Mth.sqrt(var1 * var1 + var3 * var3 + var5 * var5) * 100.0F);
+            var7 = Math.round((float)Math.sqrt(var1 * var1 + var3 * var3 + var5 * var5) * 100.0F);
             if (var7 > 0) {
                this.awardStat(Stats.SWIM_ONE_CM, var7);
                this.causeFoodExhaustion(0.01F * (float)var7 * 0.01F);
             }
          } else if (this.isEyeInFluid(FluidTags.WATER)) {
-            var7 = Math.round(Mth.sqrt(var1 * var1 + var3 * var3 + var5 * var5) * 100.0F);
+            var7 = Math.round((float)Math.sqrt(var1 * var1 + var3 * var3 + var5 * var5) * 100.0F);
             if (var7 > 0) {
                this.awardStat(Stats.WALK_UNDER_WATER_ONE_CM, var7);
                this.causeFoodExhaustion(0.01F * (float)var7 * 0.01F);
             }
          } else if (this.isInWater()) {
-            var7 = Math.round(Mth.sqrt(var1 * var1 + var5 * var5) * 100.0F);
+            var7 = Math.round((float)Math.sqrt(var1 * var1 + var5 * var5) * 100.0F);
             if (var7 > 0) {
                this.awardStat(Stats.WALK_ON_WATER_ONE_CM, var7);
                this.causeFoodExhaustion(0.01F * (float)var7 * 0.01F);
             }
          } else if (this.onClimbable()) {
             if (var3 > 0.0D) {
                this.awardStat(Stats.CLIMB_ONE_CM, (int)Math.round(var3 * 100.0D));
             }
          } else if (this.onGround) {
-            var7 = Math.round(Mth.sqrt(var1 * var1 + var5 * var5) * 100.0F);
+            var7 = Math.round((float)Math.sqrt(var1 * var1 + var5 * var5) * 100.0F);
             if (var7 > 0) {
                if (this.isSprinting()) {
                   this.awardStat(Stats.SPRINT_ONE_CM, var7);
                   this.causeFoodExhaustion(0.1F * (float)var7 * 0.01F);
                } else if (this.isCrouching()) {
@@ -1377,25 +1452,25 @@
                   this.awardStat(Stats.WALK_ONE_CM, var7);
                   this.causeFoodExhaustion(0.0F * (float)var7 * 0.01F);
                }
             }
          } else if (this.isFallFlying()) {
-            var7 = Math.round(Mth.sqrt(var1 * var1 + var3 * var3 + var5 * var5) * 100.0F);
+            var7 = Math.round((float)Math.sqrt(var1 * var1 + var3 * var3 + var5 * var5) * 100.0F);
             this.awardStat(Stats.AVIATE_ONE_CM, var7);
          } else {
-            var7 = Math.round(Mth.sqrt(var1 * var1 + var5 * var5) * 100.0F);
+            var7 = Math.round((float)Math.sqrt(var1 * var1 + var5 * var5) * 100.0F);
             if (var7 > 25) {
                this.awardStat(Stats.FLY_ONE_CM, var7);
             }
          }
 
       }
    }
 
    private void checkRidingStatistics(double var1, double var3, double var5) {
       if (this.isPassenger()) {
-         int var7 = Math.round(Mth.sqrt(var1 * var1 + var3 * var3 + var5 * var5) * 100.0F);
+         int var7 = Math.round((float)Math.sqrt(var1 * var1 + var3 * var3 + var5 * var5) * 100.0F);
          if (var7 > 0) {
             Entity var8 = this.getVehicle();
             if (var8 instanceof AbstractMinecart) {
                this.awardStat(Stats.MINECART_ONE_CM, var7);
             } else if (var8 instanceof Boat) {
@@ -1410,26 +1485,26 @@
          }
       }
 
    }
 
-   public boolean causeFallDamage(float var1, float var2) {
+   public boolean causeFallDamage(float var1, float var2, DamageSource var3) {
       if (this.abilities.mayfly) {
          return false;
       } else {
          if (var1 >= 2.0F) {
             this.awardStat(Stats.FALL_ONE_CM, (int)Math.round((double)var1 * 100.0D));
          }
 
-         return super.causeFallDamage(var1, var2);
+         return super.causeFallDamage(var1, var2, var3);
       }
    }
 
    public boolean tryToStartFallFlying() {
       if (!this.onGround && !this.isFallFlying() && !this.isInWater() && !this.hasEffect(MobEffects.LEVITATION)) {
          ItemStack var1 = this.getItemBySlot(EquipmentSlot.CHEST);
-         if (var1.getItem() == Items.ELYTRA && ElytraItem.isFlyEnabled(var1)) {
+         if (var1.is(Items.ELYTRA) && ElytraItem.isFlyEnabled(var1)) {
             this.startFallFlying();
             return true;
          }
       }
 
@@ -1468,11 +1543,11 @@
    }
 
    public void giveExperiencePoints(int var1) {
       this.increaseScore(var1);
       this.experienceProgress += (float)var1 / (float)this.getXpNeededForNextLevel();
-      this.totalExperience = Mth.clamp(this.totalExperience + var1, 0, Integer.MAX_VALUE);
+      this.totalExperience = Mth.clamp((int)(this.totalExperience + var1), (int)0, (int)Integer.MAX_VALUE);
 
       while(this.experienceProgress < 0.0F) {
          float var2 = this.experienceProgress * (float)this.getXpNeededForNextLevel();
          if (this.experienceLevel > 0) {
             this.giveExperienceLevels(-1);
@@ -1576,18 +1651,19 @@
 
    protected boolean isAlwaysExperienceDropper() {
       return true;
    }
 
-   protected boolean isMovementNoisy() {
-      return !this.abilities.flying && (!this.onGround || !this.isDiscrete());
+   public boolean shouldShowName() {
+      return true;
    }
 
-   public void onUpdateAbilities() {
+   protected Entity.MovementEmission getMovementEmission() {
+      return this.abilities.flying || this.onGround && this.isDiscrete() ? Entity.MovementEmission.NONE : Entity.MovementEmission.ALL;
    }
 
-   public void setGameMode(GameType var1) {
+   public void onUpdateAbilities() {
    }
 
    public Component getName() {
       return new TextComponent(this.gameProfile.getName());
    }
@@ -1606,24 +1682,24 @@
       }
    }
 
    public void setItemSlot(EquipmentSlot var1, ItemStack var2) {
       if (var1 == EquipmentSlot.MAINHAND) {
-         this.playEquipSound(var2);
+         this.equipEventAndSound(var2);
          this.inventory.items.set(this.inventory.selected, var2);
       } else if (var1 == EquipmentSlot.OFFHAND) {
-         this.playEquipSound(var2);
+         this.equipEventAndSound(var2);
          this.inventory.offhand.set(0, var2);
       } else if (var1.getType() == EquipmentSlot.Type.ARMOR) {
-         this.playEquipSound(var2);
+         this.equipEventAndSound(var2);
          this.inventory.armor.set(var1.getIndex(), var2);
       }
 
    }
 
    public boolean addItem(ItemStack var1) {
-      this.playEquipSound(var1);
+      this.equipEventAndSound(var1);
       return this.inventory.add(var1);
    }
 
    public Iterable<ItemStack> getHandSlots() {
       return Lists.newArrayList((Object[])(this.getMainHandItem(), this.getOffhandItem()));
@@ -1632,11 +1708,11 @@
    public Iterable<ItemStack> getArmorSlots() {
       return this.inventory.armor;
    }
 
    public boolean setEntityOnShoulder(CompoundTag var1) {
-      if (!this.isPassenger() && this.onGround && !this.isInWater()) {
+      if (!this.isPassenger() && this.onGround && !this.isInWater() && !this.isInPowderSnow) {
          if (this.getShoulderEntityLeft().isEmpty()) {
             this.setShoulderEntityLeft(var1);
             this.timeEntitySatOnShoulder = this.level.getGameTime();
             return true;
          } else if (this.getShoulderEntityRight().isEmpty()) {
@@ -1743,57 +1819,29 @@
 
    public static UUID createPlayerUUID(String var0) {
       return UUID.nameUUIDFromBytes(("OfflinePlayer:" + var0).getBytes(StandardCharsets.UTF_8));
    }
 
-   public boolean setSlot(int var1, ItemStack var2) {
+   public boolean isModelPartShown(PlayerModelPart var1) {
+      return ((Byte)this.getEntityData().get(DATA_PLAYER_MODE_CUSTOMISATION) & var1.getMask()) == var1.getMask();
+   }
+
+   public SlotAccess getSlot(int var1) {
       if (var1 >= 0 && var1 < this.inventory.items.size()) {
-         this.inventory.setItem(var1, var2);
-         return true;
+         return SlotAccess.forContainer(this.inventory, var1);
       } else {
-         EquipmentSlot var3;
-         if (var1 == 100 + EquipmentSlot.HEAD.getIndex()) {
-            var3 = EquipmentSlot.HEAD;
-         } else if (var1 == 100 + EquipmentSlot.CHEST.getIndex()) {
-            var3 = EquipmentSlot.CHEST;
-         } else if (var1 == 100 + EquipmentSlot.LEGS.getIndex()) {
-            var3 = EquipmentSlot.LEGS;
-         } else if (var1 == 100 + EquipmentSlot.FEET.getIndex()) {
-            var3 = EquipmentSlot.FEET;
-         } else {
-            var3 = null;
-         }
+         int var2 = var1 - 200;
+         return var2 >= 0 && var2 < this.enderChestInventory.getContainerSize() ? SlotAccess.forContainer(this.enderChestInventory, var2) : super.getSlot(var1);
+      }
+   }
 
-         if (var1 == 98) {
-            this.setItemSlot(EquipmentSlot.MAINHAND, var2);
-            return true;
-         } else if (var1 == 99) {
-            this.setItemSlot(EquipmentSlot.OFFHAND, var2);
-            return true;
-         } else if (var3 == null) {
-            int var4 = var1 - 200;
-            if (var4 >= 0 && var4 < this.enderChestInventory.getContainerSize()) {
-               this.enderChestInventory.setItem(var4, var2);
-               return true;
-            } else {
-               return false;
-            }
-         } else {
-            if (!var2.isEmpty()) {
-               if (!(var2.getItem() instanceof ArmorItem) && !(var2.getItem() instanceof ElytraItem)) {
-                  if (var3 != EquipmentSlot.HEAD) {
-                     return false;
-                  }
-               } else if (Mob.getEquipmentSlotForItem(var2) != var3) {
-                  return false;
-               }
-            }
+   public boolean isReducedDebugInfo() {
+      return this.reducedDebugInfo;
+   }
 
-            this.inventory.setItem(var3.getIndex() + this.inventory.items.size(), var2);
-            return true;
-         }
-      }
+   public void setReducedDebugInfo(boolean var1) {
+      this.reducedDebugInfo = var1;
    }
 
    public void setRemainingFireTicks(int var1) {
       super.setRemainingFireTicks(this.abilities.invulnerable ? Math.min(var1, 1) : var1);
    }
@@ -1899,10 +1947,53 @@
 
    protected boolean shouldRemoveSoulSpeed(BlockState var1) {
       return this.abilities.flying || super.shouldRemoveSoulSpeed(var1);
    }
 
+   public Vec3 getRopeHoldPosition(float var1) {
+      double var2 = 0.22D * (this.getMainArm() == HumanoidArm.RIGHT ? -1.0D : 1.0D);
+      float var4 = Mth.lerp(var1 * 0.5F, this.getXRot(), this.xRotO) * 0.017453292F;
+      float var5 = Mth.lerp(var1, this.yBodyRotO, this.yBodyRot) * 0.017453292F;
+      double var8;
+      if (!this.isFallFlying() && !this.isAutoSpinAttack()) {
+         if (this.isVisuallySwimming()) {
+            return this.getPosition(var1).add((new Vec3(var2, 0.2D, -0.15D)).xRot(-var4).yRot(-var5));
+         } else {
+            double var17 = this.getBoundingBox().getYsize() - 1.0D;
+            var8 = this.isCrouching() ? -0.2D : 0.07D;
+            return this.getPosition(var1).add((new Vec3(var2, var17, var8)).yRot(-var5));
+         }
+      } else {
+         Vec3 var6 = this.getViewVector(var1);
+         Vec3 var7 = this.getDeltaMovement();
+         var8 = var7.horizontalDistanceSqr();
+         double var10 = var6.horizontalDistanceSqr();
+         float var12;
+         if (var8 > 0.0D && var10 > 0.0D) {
+            double var13 = (var7.x * var6.x + var7.z * var6.z) / Math.sqrt(var8 * var10);
+            double var15 = var7.x * var6.z - var7.z * var6.x;
+            var12 = (float)(Math.signum(var15) * Math.acos(var13));
+         } else {
+            var12 = 0.0F;
+         }
+
+         return this.getPosition(var1).add((new Vec3(var2, -0.11D, 0.85D)).zRot(-var12).xRot(-var4).yRot(-var5));
+      }
+   }
+
+   public boolean isAlwaysTicking() {
+      return true;
+   }
+
+   public boolean isScoping() {
+      return this.isUsingItem() && this.getUseItem().is(Items.SPYGLASS);
+   }
+
+   public boolean shouldBeSaved() {
+      return false;
+   }
+
    static {
       POSES = ImmutableMap.builder().put(Pose.STANDING, STANDING_DIMENSIONS).put(Pose.SLEEPING, SLEEPING_DIMENSIONS).put(Pose.FALL_FLYING, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.SWIMMING, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.SPIN_ATTACK, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.CROUCHING, EntityDimensions.scalable(0.6F, 1.5F)).put(Pose.DYING, EntityDimensions.fixed(0.2F, 0.2F)).build();
       DATA_PLAYER_ABSORPTION_ID = SynchedEntityData.defineId(Player.class, EntityDataSerializers.FLOAT);
       DATA_SCORE_ID = SynchedEntityData.defineId(Player.class, EntityDataSerializers.INT);
       DATA_PLAYER_MODE_CUSTOMISATION = SynchedEntityData.defineId(Player.class, EntityDataSerializers.BYTE);
