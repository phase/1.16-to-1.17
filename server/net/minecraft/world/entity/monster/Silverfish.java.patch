--- net/minecraft/world/entity/monster/Silverfish.java
+++ net/minecraft/world/entity/monster/Silverfish.java
@@ -6,10 +6,11 @@
 import net.minecraft.core.Direction;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.damagesource.EntityDamageSource;
+import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.MobType;
 import net.minecraft.world.entity.Pose;
@@ -57,12 +58,12 @@
 
    public static AttributeSupplier.Builder createAttributes() {
       return Monster.createMonsterAttributes().add(Attributes.MAX_HEALTH, 8.0D).add(Attributes.MOVEMENT_SPEED, 0.25D).add(Attributes.ATTACK_DAMAGE, 1.0D);
    }
 
-   protected boolean isMovementNoisy() {
-      return false;
+   protected Entity.MovementEmission getMovementEmission() {
+      return Entity.MovementEmission.EVENTS;
    }
 
    protected SoundEvent getAmbientSound() {
       return SoundEvents.SILVERFISH_AMBIENT;
    }
@@ -90,16 +91,16 @@
          return super.hurt(var1, var2);
       }
    }
 
    public void tick() {
-      this.yBodyRot = this.yRot;
+      this.yBodyRot = this.getYRot();
       super.tick();
    }
 
    public void setYBodyRot(float var1) {
-      this.yRot = var1;
+      this.setYRot(var1);
       super.setYBodyRot(var1);
    }
 
    public float getWalkTargetValue(BlockPos var1, LevelReader var2) {
       return InfestedBlock.isCompatibleHostBlock(var2.getBlockState(var1.below())) ? 10.0F : super.getWalkTargetValue(var1, var2);
@@ -116,62 +117,10 @@
 
    public MobType getMobType() {
       return MobType.ARTHROPOD;
    }
 
-   static class SilverfishMergeWithStoneGoal extends RandomStrollGoal {
-      private Direction selectedDirection;
-      private boolean doMerge;
-
-      public SilverfishMergeWithStoneGoal(Silverfish var1) {
-         super(var1, 1.0D, 10);
-         this.setFlags(EnumSet.of(Goal.Flag.MOVE));
-      }
-
-      public boolean canUse() {
-         if (this.mob.getTarget() != null) {
-            return false;
-         } else if (!this.mob.getNavigation().isDone()) {
-            return false;
-         } else {
-            Random var1 = this.mob.getRandom();
-            if (this.mob.level.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING) && var1.nextInt(10) == 0) {
-               this.selectedDirection = Direction.getRandom(var1);
-               BlockPos var2 = (new BlockPos(this.mob.getX(), this.mob.getY() + 0.5D, this.mob.getZ())).relative(this.selectedDirection);
-               BlockState var3 = this.mob.level.getBlockState(var2);
-               if (InfestedBlock.isCompatibleHostBlock(var3)) {
-                  this.doMerge = true;
-                  return true;
-               }
-            }
-
-            this.doMerge = false;
-            return super.canUse();
-         }
-      }
-
-      public boolean canContinueToUse() {
-         return this.doMerge ? false : super.canContinueToUse();
-      }
-
-      public void start() {
-         if (!this.doMerge) {
-            super.start();
-         } else {
-            Level var1 = this.mob.level;
-            BlockPos var2 = (new BlockPos(this.mob.getX(), this.mob.getY() + 0.5D, this.mob.getZ())).relative(this.selectedDirection);
-            BlockState var3 = var1.getBlockState(var2);
-            if (InfestedBlock.isCompatibleHostBlock(var3)) {
-               var1.setBlock(var2, InfestedBlock.stateByHostBlock(var3.getBlock()), 3);
-               this.mob.spawnAnim();
-               this.mob.remove();
-            }
-
-         }
-      }
-   }
-
    static class SilverfishWakeUpFriendsGoal extends Goal {
       private final Silverfish silverfish;
       private int lookForFriends;
 
       public SilverfishWakeUpFriendsGoal(Silverfish var1) {
@@ -204,11 +153,11 @@
                      Block var9 = var8.getBlock();
                      if (var9 instanceof InfestedBlock) {
                         if (var1.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING)) {
                            var1.destroyBlock(var7, true, this.silverfish);
                         } else {
-                           var1.setBlock(var7, ((InfestedBlock)var9).getHostBlock().defaultBlockState(), 3);
+                           var1.setBlock(var7, ((InfestedBlock)var9).hostStateByInfested(var1.getBlockState(var7)), 3);
                         }
 
                         if (var2.nextBoolean()) {
                            return;
                         }
@@ -218,6 +167,58 @@
             }
          }
 
       }
    }
+
+   static class SilverfishMergeWithStoneGoal extends RandomStrollGoal {
+      private Direction selectedDirection;
+      private boolean doMerge;
+
+      public SilverfishMergeWithStoneGoal(Silverfish var1) {
+         super(var1, 1.0D, 10);
+         this.setFlags(EnumSet.of(Goal.Flag.MOVE));
+      }
+
+      public boolean canUse() {
+         if (this.mob.getTarget() != null) {
+            return false;
+         } else if (!this.mob.getNavigation().isDone()) {
+            return false;
+         } else {
+            Random var1 = this.mob.getRandom();
+            if (this.mob.level.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING) && var1.nextInt(10) == 0) {
+               this.selectedDirection = Direction.getRandom(var1);
+               BlockPos var2 = (new BlockPos(this.mob.getX(), this.mob.getY() + 0.5D, this.mob.getZ())).relative(this.selectedDirection);
+               BlockState var3 = this.mob.level.getBlockState(var2);
+               if (InfestedBlock.isCompatibleHostBlock(var3)) {
+                  this.doMerge = true;
+                  return true;
+               }
+            }
+
+            this.doMerge = false;
+            return super.canUse();
+         }
+      }
+
+      public boolean canContinueToUse() {
+         return this.doMerge ? false : super.canContinueToUse();
+      }
+
+      public void start() {
+         if (!this.doMerge) {
+            super.start();
+         } else {
+            Level var1 = this.mob.level;
+            BlockPos var2 = (new BlockPos(this.mob.getX(), this.mob.getY() + 0.5D, this.mob.getZ())).relative(this.selectedDirection);
+            BlockState var3 = var1.getBlockState(var2);
+            if (InfestedBlock.isCompatibleHostBlock(var3)) {
+               var1.setBlock(var2, InfestedBlock.infestedStateByHost(var3), 3);
+               this.mob.spawnAnim();
+               this.mob.discard();
+            }
+
+         }
+      }
+   }
 }
