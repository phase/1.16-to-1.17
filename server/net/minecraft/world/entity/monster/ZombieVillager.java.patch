--- net/minecraft/world/entity/monster/ZombieVillager.java
+++ net/minecraft/world/entity/monster/ZombieVillager.java
@@ -1,9 +1,10 @@
 package net.minecraft.world.entity.monster;
 
 import com.mojang.serialization.DataResult;
 import com.mojang.serialization.Dynamic;
+import java.util.Objects;
 import java.util.UUID;
 import javax.annotation.Nullable;
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Registry;
@@ -39,17 +40,22 @@
 import net.minecraft.world.item.enchantment.EnchantmentHelper;
 import net.minecraft.world.item.trading.MerchantOffers;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.ServerLevelAccessor;
 import net.minecraft.world.level.block.BedBlock;
-import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.gameevent.GameEvent;
 import org.apache.logging.log4j.Logger;
 
 public class ZombieVillager extends Zombie implements VillagerDataHolder {
    private static final EntityDataAccessor<Boolean> DATA_CONVERTING_ID;
    private static final EntityDataAccessor<VillagerData> DATA_VILLAGER_DATA;
+   private static final int VILLAGER_CONVERSION_WAIT_MIN = 3600;
+   private static final int VILLAGER_CONVERSION_WAIT_MAX = 6000;
+   private static final int MAX_SPECIAL_BLOCKS_COUNT = 14;
+   private static final int SPECIAL_BLOCK_RADIUS = 4;
    private int villagerConversionTime;
    private UUID conversionStarter;
    private Tag gossips;
    private CompoundTag tradeOffers;
    private int villagerXp;
@@ -67,11 +73,11 @@
 
    public void addAdditionalSaveData(CompoundTag var1) {
       super.addAdditionalSaveData(var1);
       DataResult var10000 = VillagerData.CODEC.encodeStart(NbtOps.INSTANCE, this.getVillagerData());
       Logger var10001 = LOGGER;
-      var10001.getClass();
+      Objects.requireNonNull(var10001);
       var10000.resultOrPartial(var10001::error).ifPresent((var1x) -> {
          var1.put("VillagerData", var1x);
       });
       if (this.tradeOffers != null) {
          var1.put("Offers", this.tradeOffers);
@@ -92,11 +98,11 @@
    public void readAdditionalSaveData(CompoundTag var1) {
       super.readAdditionalSaveData(var1);
       if (var1.contains("VillagerData", 10)) {
          DataResult var2 = VillagerData.CODEC.parse(new Dynamic(NbtOps.INSTANCE, var1.get("VillagerData")));
          Logger var10001 = LOGGER;
-         var10001.getClass();
+         Objects.requireNonNull(var10001);
          var2.resultOrPartial(var10001::error).ifPresent(this::setVillagerData);
       }
 
       if (var1.contains("Offers", 10)) {
          this.tradeOffers = var1.getCompound("Offers");
@@ -128,20 +134,21 @@
       super.tick();
    }
 
    public InteractionResult mobInteract(Player var1, InteractionHand var2) {
       ItemStack var3 = var1.getItemInHand(var2);
-      if (var3.getItem() == Items.GOLDEN_APPLE) {
+      if (var3.is(Items.GOLDEN_APPLE)) {
          if (this.hasEffect(MobEffects.WEAKNESS)) {
-            if (!var1.abilities.instabuild) {
+            if (!var1.getAbilities().instabuild) {
                var3.shrink(1);
             }
 
             if (!this.level.isClientSide) {
                this.startConverting(var1.getUUID(), this.random.nextInt(2401) + 3600);
             }
 
+            this.gameEvent(GameEvent.MOB_INTERACT, this.eyeBlockPosition());
             return InteractionResult.SUCCESS;
          } else {
             return InteractionResult.CONSUME;
          }
       } else {
@@ -168,21 +175,32 @@
       this.removeEffect(MobEffects.WEAKNESS);
       this.addEffect(new MobEffectInstance(MobEffects.DAMAGE_BOOST, var2, Math.min(this.level.getDifficulty().getId() - 1, 0)));
       this.level.broadcastEntityEvent(this, (byte)16);
    }
 
+   public void handleEntityEvent(byte var1) {
+      if (var1 == 16) {
+         if (!this.isSilent()) {
+            this.level.playLocalSound(this.getX(), this.getEyeY(), this.getZ(), SoundEvents.ZOMBIE_VILLAGER_CURE, this.getSoundSource(), 1.0F + this.random.nextFloat(), this.random.nextFloat() * 0.7F + 0.3F, false);
+         }
+
+      } else {
+         super.handleEntityEvent(var1);
+      }
+   }
+
    private void finishConversion(ServerLevel var1) {
       Villager var2 = (Villager)this.convertTo(EntityType.VILLAGER, false);
       EquipmentSlot[] var3 = EquipmentSlot.values();
       int var4 = var3.length;
 
       for(int var5 = 0; var5 < var4; ++var5) {
          EquipmentSlot var6 = var3[var5];
          ItemStack var7 = this.getItemBySlot(var6);
          if (!var7.isEmpty()) {
             if (EnchantmentHelper.hasBindingCurse(var7)) {
-               var2.setSlot(var6.getIndex() + 300, var7);
+               var2.getSlot(var6.getIndex() + 300).set(var7);
             } else {
                double var8 = (double)this.getEquipmentDropChance(var6);
                if (var8 > 1.0D) {
                   this.spawnAtLocation(var7);
                }
@@ -223,12 +241,12 @@
          BlockPos.MutableBlockPos var3 = new BlockPos.MutableBlockPos();
 
          for(int var4 = (int)this.getX() - 4; var4 < (int)this.getX() + 4 && var2 < 14; ++var4) {
             for(int var5 = (int)this.getY() - 4; var5 < (int)this.getY() + 4 && var2 < 14; ++var5) {
                for(int var6 = (int)this.getZ() - 4; var6 < (int)this.getZ() + 4 && var2 < 14; ++var6) {
-                  Block var7 = this.level.getBlockState(var3.set(var4, var5, var6)).getBlock();
-                  if (var7 == Blocks.IRON_BARS || var7 instanceof BedBlock) {
+                  BlockState var7 = this.level.getBlockState(var3.set(var4, var5, var6));
+                  if (var7.is(Blocks.IRON_BARS) || var7.getBlock() instanceof BedBlock) {
                      if (this.random.nextFloat() < 0.3F) {
                         ++var1;
                      }
 
                      ++var2;
@@ -239,11 +257,11 @@
       }
 
       return var1;
    }
 
-   protected float getVoicePitch() {
+   public float getVoicePitch() {
       return this.isBaby() ? (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 2.0F : (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F;
    }
 
    public SoundEvent getAmbientSound() {
       return SoundEvents.ZOMBIE_VILLAGER_AMBIENT;
@@ -290,10 +308,14 @@
 
    public VillagerData getVillagerData() {
       return (VillagerData)this.entityData.get(DATA_VILLAGER_DATA);
    }
 
+   public int getVillagerXp() {
+      return this.villagerXp;
+   }
+
    public void setVillagerXp(int var1) {
       this.villagerXp = var1;
    }
 
    static {
