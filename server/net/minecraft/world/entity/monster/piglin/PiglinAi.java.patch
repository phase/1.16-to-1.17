--- net/minecraft/world/entity/monster/piglin/PiglinAi.java
+++ net/minecraft/world/entity/monster/piglin/PiglinAi.java
@@ -4,24 +4,24 @@
 import com.google.common.collect.ImmutableSet;
 import com.mojang.datafixers.util.Pair;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.Random;
-import java.util.Set;
 import net.minecraft.core.BlockPos;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.tags.ItemTags;
-import net.minecraft.util.IntRange;
+import net.minecraft.tags.Tag;
 import net.minecraft.util.TimeUtil;
+import net.minecraft.util.valueproviders.UniformInt;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.EntitySelector;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.ai.Brain;
 import net.minecraft.world.entity.ai.behavior.BackUpIfTooClose;
@@ -51,11 +51,12 @@
 import net.minecraft.world.entity.ai.behavior.StartAttacking;
 import net.minecraft.world.entity.ai.behavior.StartCelebratingIfTargetDead;
 import net.minecraft.world.entity.ai.behavior.StopAttackingIfTargetInvalid;
 import net.minecraft.world.entity.ai.behavior.StopBeingAngryIfTargetDead;
 import net.minecraft.world.entity.ai.memory.MemoryModuleType;
-import net.minecraft.world.entity.ai.util.RandomPos;
+import net.minecraft.world.entity.ai.sensing.Sensor;
+import net.minecraft.world.entity.ai.util.LandRandomPos;
 import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.monster.hoglin.Hoglin;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.entity.schedule.Activity;
 import net.minecraft.world.item.ArmorItem;
@@ -70,19 +71,50 @@
 import net.minecraft.world.level.storage.loot.parameters.LootContextParamSets;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParams;
 import net.minecraft.world.phys.Vec3;
 
 public class PiglinAi {
+   public static final int REPELLENT_DETECTION_RANGE_HORIZONTAL = 8;
+   public static final int REPELLENT_DETECTION_RANGE_VERTICAL = 4;
    public static final Item BARTERING_ITEM;
-   private static final IntRange TIME_BETWEEN_HUNTS;
-   private static final IntRange RIDE_START_INTERVAL;
-   private static final IntRange RIDE_DURATION;
-   private static final IntRange RETREAT_DURATION;
-   private static final IntRange AVOID_ZOMBIFIED_DURATION;
-   private static final IntRange BABY_AVOID_NEMESIS_DURATION;
-   private static final Set<Item> FOOD_ITEMS;
+   private static final int PLAYER_ANGER_RANGE = 16;
+   private static final int ANGER_DURATION = 600;
+   private static final int ADMIRE_DURATION = 120;
+   private static final int MAX_DISTANCE_TO_WALK_TO_ITEM = 9;
+   private static final int MAX_TIME_TO_WALK_TO_ITEM = 200;
+   private static final int HOW_LONG_TIME_TO_DISABLE_ADMIRE_WALKING_IF_CANT_REACH_ITEM = 200;
+   private static final int CELEBRATION_TIME = 300;
+   private static final UniformInt TIME_BETWEEN_HUNTS;
+   private static final int BABY_FLEE_DURATION_AFTER_GETTING_HIT = 100;
+   private static final int HIT_BY_PLAYER_MEMORY_TIMEOUT = 400;
+   private static final int MAX_WALK_DISTANCE_TO_START_RIDING = 8;
+   private static final UniformInt RIDE_START_INTERVAL;
+   private static final UniformInt RIDE_DURATION;
+   private static final UniformInt RETREAT_DURATION;
+   private static final int MELEE_ATTACK_COOLDOWN = 20;
+   private static final int EAT_COOLDOWN = 200;
+   private static final int DESIRED_DISTANCE_FROM_ENTITY_WHEN_AVOIDING = 12;
+   private static final int MAX_LOOK_DIST = 8;
+   private static final int MAX_LOOK_DIST_FOR_PLAYER_HOLDING_LOVED_ITEM = 14;
+   private static final int INTERACTION_RANGE = 8;
+   private static final int MIN_DESIRED_DIST_FROM_TARGET_WHEN_HOLDING_CROSSBOW = 5;
+   private static final float SPEED_WHEN_STRAFING_BACK_FROM_TARGET = 0.75F;
+   private static final int DESIRED_DISTANCE_FROM_ZOMBIFIED = 6;
+   private static final UniformInt AVOID_ZOMBIFIED_DURATION;
+   private static final UniformInt BABY_AVOID_NEMESIS_DURATION;
+   private static final float PROBABILITY_OF_CELEBRATION_DANCE = 0.1F;
+   private static final float SPEED_MULTIPLIER_WHEN_AVOIDING = 1.0F;
+   private static final float SPEED_MULTIPLIER_WHEN_RETREATING = 1.0F;
+   private static final float SPEED_MULTIPLIER_WHEN_MOUNTING = 0.8F;
+   private static final float SPEED_MULTIPLIER_WHEN_GOING_TO_WANTED_ITEM = 1.0F;
+   private static final float SPEED_MULTIPLIER_WHEN_GOING_TO_CELEBRATE_LOCATION = 1.0F;
+   private static final float SPEED_MULTIPLIER_WHEN_DANCING = 0.6F;
+   private static final float SPEED_MULTIPLIER_WHEN_IDLING = 0.6F;
 
+   public PiglinAi() {
+   }
+
    protected static Brain<?> makeBrain(Piglin var0, Brain<Piglin> var1) {
       initCoreActivity(var1);
       initIdleActivity(var1);
       initAdmireItemActivity(var1);
       initFightActivity(var0, var1);
@@ -94,11 +126,11 @@
       var1.useDefaultActivity();
       return var1;
    }
 
    protected static void initMemories(Piglin var0) {
-      int var1 = TIME_BETWEEN_HUNTS.randomValue(var0.level.random);
+      int var1 = TIME_BETWEEN_HUNTS.sample(var0.level.random);
       var0.getBrain().setMemoryWithExpiry(MemoryModuleType.HUNTED_RECENTLY, true, (long)var1);
    }
 
    private static void initCoreActivity(Brain<Piglin> var0) {
       var0.addActivity(Activity.CORE, 0, ImmutableList.of(new LookAtTargetSink(45, 90), new MoveToTargetSink(), new InteractWithDoor(), babyAvoidNemesis(), avoidZombified(), new StopHoldingItemIfNoLongerAdmiring(), new StartAdmiringItemIfSeen(120), new StartCelebratingIfTargetDead(300, PiglinAi::wantsToDance), new StopBeingAngryIfTargetDead()));
@@ -156,11 +188,13 @@
       Brain var1 = var0.getBrain();
       Activity var2 = (Activity)var1.getActiveNonCoreActivity().orElse((Object)null);
       var1.setActiveActivityToFirstValid(ImmutableList.of(Activity.ADMIRE_ITEM, Activity.FIGHT, Activity.AVOID, Activity.CELEBRATE, Activity.RIDE, Activity.IDLE));
       Activity var3 = (Activity)var1.getActiveNonCoreActivity().orElse((Object)null);
       if (var2 != var3) {
-         getSoundForCurrentActivity(var0).ifPresent(var0::playSound);
+         Optional var10000 = getSoundForCurrentActivity(var0);
+         Objects.requireNonNull(var0);
+         var10000.ifPresent(var0::playSound);
       }
 
       var0.setAggressive(var1.hasMemoryValue(MemoryModuleType.ATTACK_TARGET));
       if (!var1.hasMemoryValue(MemoryModuleType.RIDE_TARGET) && isBabyRidingBaby(var0)) {
          var0.stopRiding();
@@ -183,29 +217,28 @@
    }
 
    protected static void pickUpItem(Piglin var0, ItemEntity var1) {
       stopWalking(var0);
       ItemStack var2;
-      if (var1.getItem().getItem() == Items.GOLD_NUGGET) {
+      if (var1.getItem().is(Items.GOLD_NUGGET)) {
          var0.take(var1, var1.getItem().getCount());
          var2 = var1.getItem();
-         var1.remove();
+         var1.discard();
       } else {
          var0.take(var1, 1);
          var2 = removeOneItemFromItemEntity(var1);
       }
 
-      Item var3 = var2.getItem();
-      if (isLovedItem(var3)) {
+      if (isLovedItem(var2)) {
          var0.getBrain().eraseMemory(MemoryModuleType.TIME_TRYING_TO_REACH_ADMIRE_ITEM);
          holdInOffhand(var0, var2);
          admireGoldItem(var0);
-      } else if (isFood(var3) && !hasEatenRecently(var0)) {
+      } else if (isFood(var2) && !hasEatenRecently(var0)) {
          eat(var0);
       } else {
-         boolean var4 = var0.equipItemIfPossible(var2);
-         if (!var4) {
+         boolean var3 = var0.equipItemIfPossible(var2);
+         if (!var3) {
             putInInventory(var0, var2);
          }
       }
    }
 
@@ -219,11 +252,11 @@
 
    private static ItemStack removeOneItemFromItemEntity(ItemEntity var0) {
       ItemStack var1 = var0.getItem();
       ItemStack var2 = var1.split(1);
       if (var1.isEmpty()) {
-         var0.remove();
+         var0.discard();
       } else {
          var0.setItem(var1);
       }
 
       return var2;
@@ -232,11 +265,11 @@
    protected static void stopHoldingOffHandItem(Piglin var0, boolean var1) {
       ItemStack var2 = var0.getItemInHand(InteractionHand.OFF_HAND);
       var0.setItemInHand(InteractionHand.OFF_HAND, ItemStack.EMPTY);
       boolean var3;
       if (var0.isAdult()) {
-         var3 = isBarterCurrency(var2.getItem());
+         var3 = isBarterCurrency(var2);
          if (var1 && var3) {
             throwItems(var0, getBarterResponseItems(var0));
          } else if (!var3) {
             boolean var4 = var0.equipItemIfPossible(var2);
             if (!var4) {
@@ -245,11 +278,11 @@
          }
       } else {
          var3 = var0.equipItemIfPossible(var2);
          if (!var3) {
             ItemStack var5 = var0.getMainHandItem();
-            if (isLovedItem(var5.getItem())) {
+            if (isLovedItem(var5)) {
                putInInventory(var0, var5);
             } else {
                throwItems(var0, Collections.singletonList(var5));
             }
 
@@ -316,33 +349,34 @@
          return (new Random(var0.level.getGameTime())).nextFloat() < 0.1F;
       }
    }
 
    protected static boolean wantsToPickup(Piglin var0, ItemStack var1) {
-      Item var2 = var1.getItem();
-      if (var2.is(ItemTags.PIGLIN_REPELLENTS)) {
+      if (var0.isBaby() && var1.is((Tag)ItemTags.IGNORED_BY_PIGLIN_BABIES)) {
          return false;
+      } else if (var1.is((Tag)ItemTags.PIGLIN_REPELLENTS)) {
+         return false;
       } else if (isAdmiringDisabled(var0) && var0.getBrain().hasMemoryValue(MemoryModuleType.ATTACK_TARGET)) {
          return false;
-      } else if (isBarterCurrency(var2)) {
+      } else if (isBarterCurrency(var1)) {
          return isNotHoldingLovedItemInOffHand(var0);
       } else {
-         boolean var3 = var0.canAddToInventory(var1);
-         if (var2 == Items.GOLD_NUGGET) {
-            return var3;
-         } else if (isFood(var2)) {
-            return !hasEatenRecently(var0) && var3;
-         } else if (!isLovedItem(var2)) {
+         boolean var2 = var0.canAddToInventory(var1);
+         if (var1.is(Items.GOLD_NUGGET)) {
+            return var2;
+         } else if (isFood(var1)) {
+            return !hasEatenRecently(var0) && var2;
+         } else if (!isLovedItem(var1)) {
             return var0.canReplaceCurrentItem(var1);
          } else {
-            return isNotHoldingLovedItemInOffHand(var0) && var3;
+            return isNotHoldingLovedItemInOffHand(var0) && var2;
          }
       }
    }
 
-   protected static boolean isLovedItem(Item var0) {
-      return var0.is(ItemTags.PIGLIN_LOVED);
+   protected static boolean isLovedItem(ItemStack var0) {
+      return var0.is((Tag)ItemTags.PIGLIN_LOVED);
    }
 
    private static boolean wantsToStopRiding(Piglin var0, Entity var1) {
       if (!(var1 instanceof Mob)) {
          return false;
@@ -372,27 +406,27 @@
       Brain var1 = var0.getBrain();
       if (isNearZombified(var0)) {
          return Optional.empty();
       } else {
          Optional var2 = BehaviorUtils.getLivingEntityFromUUIDMemory(var0, MemoryModuleType.ANGRY_AT);
-         if (var2.isPresent() && isAttackAllowed((LivingEntity)var2.get())) {
+         if (var2.isPresent() && Sensor.isEntityAttackable(var0, (LivingEntity)var2.get())) {
             return var2;
          } else {
             Optional var3;
             if (var1.hasMemoryValue(MemoryModuleType.UNIVERSAL_ANGER)) {
-               var3 = var1.getMemory(MemoryModuleType.NEAREST_VISIBLE_TARGETABLE_PLAYER);
+               var3 = var1.getMemory(MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER);
                if (var3.isPresent()) {
                   return var3;
                }
             }
 
             var3 = var1.getMemory(MemoryModuleType.NEAREST_VISIBLE_NEMESIS);
             if (var3.isPresent()) {
                return var3;
             } else {
                Optional var4 = var1.getMemory(MemoryModuleType.NEAREST_TARGETABLE_PLAYER_NOT_WEARING_GOLD);
-               return var4.isPresent() && isAttackAllowed((LivingEntity)var4.get()) ? var4 : Optional.empty();
+               return var4.isPresent() && Sensor.isEntityAttackable(var0, (LivingEntity)var4.get()) ? var4 : Optional.empty();
             }
          }
       }
    }
 
@@ -422,11 +456,11 @@
          return InteractionResult.PASS;
       }
    }
 
    protected static boolean canAdmire(Piglin var0, ItemStack var1) {
-      return !isAdmiringDisabled(var0) && !isAdmiringItem(var0) && var0.isAdult() && isBarterCurrency(var1.getItem());
+      return !isAdmiringDisabled(var0) && !isAdmiringItem(var0) && var0.isAdult() && isBarterCurrency(var1);
    }
 
    protected static void wasHurtBy(Piglin var0, LivingEntity var1) {
       if (!(var1 instanceof Piglin)) {
          if (isHoldingItemInOffHand(var0)) {
@@ -447,11 +481,11 @@
             }
 
          });
          if (var0.isBaby()) {
             var2.setMemoryWithExpiry(MemoryModuleType.AVOID_TARGET, var1, 100L);
-            if (isAttackAllowed(var1)) {
+            if (Sensor.isEntityAttackable(var0, var1)) {
                broadcastAngerTarget(var0, var1);
             }
 
          } else if (var1.getType() == EntityType.HOGLIN && hoglinsOutnumberPiglins(var0)) {
             setAvoidTargetAndDontHuntForAWhile(var0, var1);
@@ -462,11 +496,11 @@
       }
    }
 
    protected static void maybeRetaliate(AbstractPiglin var0, LivingEntity var1) {
       if (!var0.getBrain().isActive(Activity.AVOID)) {
-         if (isAttackAllowed(var1)) {
+         if (Sensor.isEntityAttackable(var0, var1)) {
             if (!BehaviorUtils.isOtherTargetMuchFurtherAwayThanCurrentAttackTarget(var0, var1, 4.0D)) {
                if (var1.getType() == EntityType.PLAYER && var0.level.getGameRules().getBoolean(GameRules.RULE_UNIVERSAL_ANGER)) {
                   setAngerTargetToNearestTargetablePlayerIfFound(var0, var1);
                   broadcastUniversalAnger(var0);
                } else {
@@ -567,11 +601,11 @@
    protected static void broadcastDontKillAnyMoreHoglinsForAWhile(Piglin var0) {
       getVisibleAdultPiglins(var0).forEach(PiglinAi::dontKillAnyMoreHoglinsForAWhile);
    }
 
    protected static void setAngerTarget(AbstractPiglin var0, LivingEntity var1) {
-      if (isAttackAllowed(var1)) {
+      if (Sensor.isEntityAttackable(var0, var1)) {
          var0.getBrain().eraseMemory(MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE);
          var0.getBrain().setMemoryWithExpiry(MemoryModuleType.ANGRY_AT, var1.getUUID(), 600L);
          if (var1.getType() == EntityType.HOGLIN && var0.canHunt()) {
             dontKillAnyMoreHoglinsForAWhile(var0);
          }
@@ -608,11 +642,11 @@
    public static Optional<LivingEntity> getAvoidTarget(Piglin var0) {
       return var0.getBrain().hasMemoryValue(MemoryModuleType.AVOID_TARGET) ? var0.getBrain().getMemory(MemoryModuleType.AVOID_TARGET) : Optional.empty();
    }
 
    public static Optional<Player> getNearestVisibleTargetablePlayer(AbstractPiglin var0) {
-      return var0.getBrain().hasMemoryValue(MemoryModuleType.NEAREST_VISIBLE_TARGETABLE_PLAYER) ? var0.getBrain().getMemory(MemoryModuleType.NEAREST_VISIBLE_TARGETABLE_PLAYER) : Optional.empty();
+      return var0.getBrain().hasMemoryValue(MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER) ? var0.getBrain().getMemory(MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER) : Optional.empty();
    }
 
    private static void broadcastRetreat(Piglin var0, LivingEntity var1) {
       getVisibleAdultPiglins(var0).stream().filter((var0x) -> {
          return var0x instanceof Piglin;
@@ -657,24 +691,28 @@
 
    private static void setAvoidTargetAndDontHuntForAWhile(Piglin var0, LivingEntity var1) {
       var0.getBrain().eraseMemory(MemoryModuleType.ANGRY_AT);
       var0.getBrain().eraseMemory(MemoryModuleType.ATTACK_TARGET);
       var0.getBrain().eraseMemory(MemoryModuleType.WALK_TARGET);
-      var0.getBrain().setMemoryWithExpiry(MemoryModuleType.AVOID_TARGET, var1, (long)RETREAT_DURATION.randomValue(var0.level.random));
+      var0.getBrain().setMemoryWithExpiry(MemoryModuleType.AVOID_TARGET, var1, (long)RETREAT_DURATION.sample(var0.level.random));
       dontKillAnyMoreHoglinsForAWhile(var0);
    }
 
    protected static void dontKillAnyMoreHoglinsForAWhile(AbstractPiglin var0) {
-      var0.getBrain().setMemoryWithExpiry(MemoryModuleType.HUNTED_RECENTLY, true, (long)TIME_BETWEEN_HUNTS.randomValue(var0.level.random));
+      var0.getBrain().setMemoryWithExpiry(MemoryModuleType.HUNTED_RECENTLY, true, (long)TIME_BETWEEN_HUNTS.sample(var0.level.random));
    }
 
+   private static boolean seesPlayerHoldingWantedItem(Piglin var0) {
+      return var0.getBrain().hasMemoryValue(MemoryModuleType.NEAREST_PLAYER_HOLDING_WANTED_ITEM);
+   }
+
    private static void eat(Piglin var0) {
       var0.getBrain().setMemoryWithExpiry(MemoryModuleType.ATE_RECENTLY, true, 200L);
    }
 
    private static Vec3 getRandomNearbyPos(Piglin var0) {
-      Vec3 var1 = RandomPos.getLandPos(var0, 4, 2);
+      Vec3 var1 = LandRandomPos.getPos(var0, 4, 2);
       return var1 == null ? var0.position() : var1;
    }
 
    private static boolean hasEatenRecently(Piglin var0) {
       return var0.getBrain().hasMemoryValue(MemoryModuleType.ATE_RECENTLY);
@@ -694,22 +732,18 @@
 
    private static boolean isAdmiringItem(Piglin var0) {
       return var0.getBrain().hasMemoryValue(MemoryModuleType.ADMIRING_ITEM);
    }
 
-   private static boolean isBarterCurrency(Item var0) {
-      return var0 == BARTERING_ITEM;
+   private static boolean isBarterCurrency(ItemStack var0) {
+      return var0.is(BARTERING_ITEM);
    }
 
-   private static boolean isFood(Item var0) {
-      return FOOD_ITEMS.contains(var0);
+   private static boolean isFood(ItemStack var0) {
+      return var0.is((Tag)ItemTags.PIGLIN_FOOD);
    }
 
-   private static boolean isAttackAllowed(LivingEntity var0) {
-      return EntitySelector.ATTACK_ALLOWED.test(var0);
-   }
-
    private static boolean isNearRepellent(Piglin var0) {
       return var0.getBrain().hasMemoryValue(MemoryModuleType.NEAREST_REPELLENT);
    }
 
    private static boolean seesPlayerHoldingLovedItem(LivingEntity var0) {
@@ -735,14 +769,14 @@
    private static boolean isHoldingItemInOffHand(Piglin var0) {
       return !var0.getOffhandItem().isEmpty();
    }
 
    private static boolean isNotHoldingLovedItemInOffHand(Piglin var0) {
-      return var0.getOffhandItem().isEmpty() || !isLovedItem(var0.getOffhandItem().getItem());
+      return var0.getOffhandItem().isEmpty() || !isLovedItem(var0.getOffhandItem());
    }
 
-   public static boolean isZombified(EntityType var0) {
+   public static boolean isZombified(EntityType<?> var0) {
       return var0 == EntityType.ZOMBIFIED_PIGLIN || var0 == EntityType.ZOGLIN;
    }
 
    static {
       BARTERING_ITEM = Items.GOLD_INGOT;
@@ -750,8 +784,7 @@
       RIDE_START_INTERVAL = TimeUtil.rangeOfSeconds(10, 40);
       RIDE_DURATION = TimeUtil.rangeOfSeconds(10, 30);
       RETREAT_DURATION = TimeUtil.rangeOfSeconds(5, 20);
       AVOID_ZOMBIFIED_DURATION = TimeUtil.rangeOfSeconds(5, 7);
       BABY_AVOID_NEMESIS_DURATION = TimeUtil.rangeOfSeconds(5, 7);
-      FOOD_ITEMS = ImmutableSet.of(Items.PORKCHOP, Items.COOKED_PORKCHOP);
    }
 }
