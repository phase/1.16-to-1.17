--- net/minecraft/world/entity/monster/piglin/Piglin.java
+++ net/minecraft/world/entity/monster/piglin/Piglin.java
@@ -57,11 +57,11 @@
    private static final EntityDataAccessor<Boolean> DATA_IS_CHARGING_CROSSBOW;
    private static final EntityDataAccessor<Boolean> DATA_IS_DANCING;
    private static final UUID SPEED_MODIFIER_BABY_UUID;
    private static final AttributeModifier SPEED_MODIFIER_BABY;
    private final SimpleContainer inventory = new SimpleContainer(8);
-   private boolean cannotHunt = false;
+   private boolean cannotHunt;
    protected static final ImmutableList<SensorType<? extends Sensor<? super Piglin>>> SENSOR_TYPES;
    protected static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES;
 
    public Piglin(EntityType<? extends AbstractPiglin> var1, Level var2) {
       super(var1, var2);
@@ -256,11 +256,11 @@
    }
 
    public PiglinArmPose getArmPose() {
       if (this.isDancing()) {
          return PiglinArmPose.DANCING;
-      } else if (PiglinAi.isLovedItem(this.getOffhandItem().getItem())) {
+      } else if (PiglinAi.isLovedItem(this.getOffhandItem())) {
          return PiglinArmPose.ADMIRING_ITEM;
       } else if (this.isAggressive() && this.isHoldingMeleeWeapon()) {
          return PiglinArmPose.ATTACKING_WITH_MELEE_WEAPON;
       } else if (this.isChargingCrossbow()) {
          return PiglinArmPose.CROSSBOW_CHARGE;
@@ -305,11 +305,11 @@
    protected void holdInMainHand(ItemStack var1) {
       this.setItemSlotAndDropWhenKilled(EquipmentSlot.MAINHAND, var1);
    }
 
    protected void holdInOffHand(ItemStack var1) {
-      if (var1.getItem() == PiglinAi.BARTERING_ITEM) {
+      if (var1.is(PiglinAi.BARTERING_ITEM)) {
          this.setItemSlot(EquipmentSlot.OFFHAND, var1);
          this.setGuaranteedDrop(EquipmentSlot.OFFHAND);
       } else {
          this.setItemSlotAndDropWhenKilled(EquipmentSlot.OFFHAND, var1);
       }
@@ -328,18 +328,18 @@
 
    protected boolean canReplaceCurrentItem(ItemStack var1, ItemStack var2) {
       if (EnchantmentHelper.hasBindingCurse(var2)) {
          return false;
       } else {
-         boolean var3 = PiglinAi.isLovedItem(var1.getItem()) || var1.getItem() == Items.CROSSBOW;
-         boolean var4 = PiglinAi.isLovedItem(var2.getItem()) || var2.getItem() == Items.CROSSBOW;
+         boolean var3 = PiglinAi.isLovedItem(var1) || var1.is(Items.CROSSBOW);
+         boolean var4 = PiglinAi.isLovedItem(var2) || var2.is(Items.CROSSBOW);
          if (var3 && !var4) {
             return true;
          } else if (!var3 && var4) {
             return false;
          } else {
-            return this.isAdult() && var1.getItem() != Items.CROSSBOW && var2.getItem() == Items.CROSSBOW ? false : super.canReplaceCurrentItem(var1, var2);
+            return this.isAdult() && !var1.is(Items.CROSSBOW) && var2.is(Items.CROSSBOW) ? false : super.canReplaceCurrentItem(var1, var2);
          }
       }
    }
 
    protected void pickUpItem(ItemEntity var1) {
