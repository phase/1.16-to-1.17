--- net/minecraft/world/entity/monster/Phantom.java
+++ net/minecraft/world/entity/monster/Phantom.java
@@ -40,10 +40,12 @@
 import net.minecraft.world.level.ServerLevelAccessor;
 import net.minecraft.world.level.levelgen.Heightmap;
 import net.minecraft.world.phys.Vec3;
 
 public class Phantom extends FlyingMob implements Enemy {
+   public static final float FLAP_DEGREES_PER_TICK = 7.448451F;
+   public static final int TICKS_PER_FLAP = Mth.ceil(24.166098F);
    private static final EntityDataAccessor<Integer> ID_SIZE;
    private Vec3 moveTargetPoint;
    private BlockPos anchorPoint;
    private Phantom.AttackPhase attackPhase;
 
@@ -55,10 +57,14 @@
       this.xpReward = 5;
       this.moveControl = new Phantom.PhantomMoveControl(this);
       this.lookControl = new Phantom.PhantomLookControl(this);
    }
 
+   public boolean isFlapping() {
+      return (this.getUniqueFlapTickOffset() + this.tickCount) % TICKS_PER_FLAP == 0;
+   }
+
    protected BodyRotationControl createBodyControl() {
       return new Phantom.PhantomBodyRotationControl(this);
    }
 
    protected void registerGoals() {
@@ -72,11 +78,11 @@
       super.defineSynchedData();
       this.entityData.define(ID_SIZE, 0);
    }
 
    public void setPhantomSize(int var1) {
-      this.entityData.set(ID_SIZE, Mth.clamp(var1, 0, 64));
+      this.entityData.set(ID_SIZE, Mth.clamp((int)var1, (int)0, (int)64));
    }
 
    private void updatePhantomSizeInfo() {
       this.refreshDimensions();
       this.getAttribute(Attributes.ATTACK_DAMAGE).setBaseValue((double)(6 + this.getPhantomSize()));
@@ -96,19 +102,23 @@
       }
 
       super.onSyncedDataUpdated(var1);
    }
 
+   public int getUniqueFlapTickOffset() {
+      return this.getId() * 3;
+   }
+
    protected boolean shouldDespawnInPeaceful() {
       return true;
    }
 
    public void tick() {
       super.tick();
       if (this.level.isClientSide) {
-         float var1 = Mth.cos((float)(this.getId() * 3 + this.tickCount) * 0.13F + 3.1415927F);
-         float var2 = Mth.cos((float)(this.getId() * 3 + this.tickCount + 1) * 0.13F + 3.1415927F);
+         float var1 = Mth.cos((float)(this.getUniqueFlapTickOffset() + this.tickCount) * 7.448451F * 0.017453292F + 3.1415927F);
+         float var2 = Mth.cos((float)(this.getUniqueFlapTickOffset() + this.tickCount + 1) * 7.448451F * 0.017453292F + 3.1415927F);
          if (var1 > 0.0F && var2 <= 0.0F) {
             this.level.playLocalSound(this.getX(), this.getY(), this.getZ(), SoundEvents.PHANTOM_FLAP, this.getSoundSource(), 0.95F + this.random.nextFloat() * 0.05F, 0.95F + this.random.nextFloat() * 0.05F, false);
          }
 
          int var3 = this.getPhantomSize();
@@ -154,10 +164,14 @@
       var1.putInt("AY", this.anchorPoint.getY());
       var1.putInt("AZ", this.anchorPoint.getZ());
       var1.putInt("Size", this.getPhantomSize());
    }
 
+   public boolean shouldRenderAtSqrDistance(double var1) {
+      return true;
+   }
+
    public SoundSource getSoundSource() {
       return SoundSource.HOSTILE;
    }
 
    protected SoundEvent getAmbientSound() {
