--- net/minecraft/world/phys/Vec3.java
+++ net/minecraft/world/phys/Vec3.java
@@ -1,20 +1,32 @@
 package net.minecraft.world.phys;
 
 import com.mojang.math.Vector3f;
+import com.mojang.serialization.Codec;
 import java.util.EnumSet;
+import java.util.stream.DoubleStream;
+import net.minecraft.Util;
 import net.minecraft.core.Direction;
 import net.minecraft.core.Position;
 import net.minecraft.core.Vec3i;
+import net.minecraft.util.ExtraCodecs;
 import net.minecraft.util.Mth;
 
 public class Vec3 implements Position {
-   public static final Vec3 ZERO = new Vec3(0.0D, 0.0D, 0.0D);
+   public static final Codec<Vec3> CODEC;
+   public static final Vec3 ZERO;
    public final double x;
    public final double y;
    public final double z;
 
+   public static Vec3 fromRGB24(int var0) {
+      double var1 = (double)(var0 >> 16 & 255) / 255.0D;
+      double var3 = (double)(var0 >> 8 & 255) / 255.0D;
+      double var5 = (double)(var0 & 255) / 255.0D;
+      return new Vec3(var1, var3, var5);
+   }
+
    public static Vec3 atCenterOf(Vec3i var0) {
       return new Vec3((double)var0.getX() + 0.5D, (double)var0.getY() + 0.5D, (double)var0.getZ() + 0.5D);
    }
 
    public static Vec3 atLowerCornerOf(Vec3i var0) {
@@ -186,6 +198,17 @@
    }
 
    public final double z() {
       return this.z;
    }
+
+   static {
+      CODEC = ExtraCodecs.DOUBLE_STREAM.comapFlatMap((var0) -> {
+         return Util.fixedSize((DoubleStream)var0, 3).map((var0x) -> {
+            return new Vec3(var0x[0], var0x[1], var0x[2]);
+         });
+      }, (var0) -> {
+         return DoubleStream.of(new double[]{var0.x, var0.y, var0.z});
+      }).stable();
+      ZERO = new Vec3(0.0D, 0.0D, 0.0D);
+   }
 }
