--- net/minecraft/world/phys/Vec3.java
+++ net/minecraft/world/phys/Vec3.java
@@ -11,10 +11,17 @@
    public static final Vec3 ZERO = new Vec3(0.0D, 0.0D, 0.0D);
    public final double x;
    public final double y;
    public final double z;
 
+   public static Vec3 fromRGB24(int var0) {
+      double var1 = (double)(var0 >> 16 & 255) / 255.0D;
+      double var3 = (double)(var0 >> 8 & 255) / 255.0D;
+      double var5 = (double)(var0 & 255) / 255.0D;
+      return new Vec3(var1, var3, var5);
+   }
+
    public static Vec3 atCenterOf(Vec3i var0) {
       return new Vec3((double)var0.getX() + 0.5D, (double)var0.getY() + 0.5D, (double)var0.getZ() + 0.5D);
    }
 
    public static Vec3 atLowerCornerOf(Vec3i var0) {
@@ -42,11 +49,11 @@
    public Vec3 vectorTo(Vec3 var1) {
       return new Vec3(var1.x - this.x, var1.y - this.y, var1.z - this.z);
    }
 
    public Vec3 normalize() {
-      double var1 = (double)Mth.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
+      double var1 = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
       return var1 < 1.0E-4D ? ZERO : new Vec3(this.x / var1, this.y / var1, this.z / var1);
    }
 
    public double dot(Vec3 var1) {
       return this.x * var1.x + this.y * var1.y + this.z * var1.z;
@@ -78,11 +85,11 @@
 
    public double distanceTo(Vec3 var1) {
       double var2 = var1.x - this.x;
       double var4 = var1.y - this.y;
       double var6 = var1.z - this.z;
-      return (double)Mth.sqrt(var2 * var2 + var4 * var4 + var6 * var6);
+      return Math.sqrt(var2 * var2 + var4 * var4 + var6 * var6);
    }
 
    public double distanceToSqr(Vec3 var1) {
       double var2 = var1.x - this.x;
       double var4 = var1.y - this.y;
@@ -99,26 +106,38 @@
 
    public Vec3 scale(double var1) {
       return this.multiply(var1, var1, var1);
    }
 
+   public Vec3 reverse() {
+      return this.scale(-1.0D);
+   }
+
    public Vec3 multiply(Vec3 var1) {
       return this.multiply(var1.x, var1.y, var1.z);
    }
 
    public Vec3 multiply(double var1, double var3, double var5) {
       return new Vec3(this.x * var1, this.y * var3, this.z * var5);
    }
 
    public double length() {
-      return (double)Mth.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
+      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
    }
 
    public double lengthSqr() {
       return this.x * this.x + this.y * this.y + this.z * this.z;
    }
 
+   public double horizontalDistance() {
+      return Math.sqrt(this.x * this.x + this.z * this.z);
+   }
+
+   public double horizontalDistanceSqr() {
+      return this.x * this.x + this.z * this.z;
+   }
+
    public boolean equals(Object var1) {
       if (this == var1) {
          return true;
       } else if (!(var1 instanceof Vec3)) {
          return false;
@@ -146,10 +165,14 @@
 
    public String toString() {
       return "(" + this.x + ", " + this.y + ", " + this.z + ")";
    }
 
+   public Vec3 lerp(Vec3 var1, double var2) {
+      return new Vec3(Mth.lerp(var2, this.x, var1.x), Mth.lerp(var2, this.y, var1.y), Mth.lerp(var2, this.z, var1.z));
+   }
+
    public Vec3 xRot(float var1) {
       float var2 = Mth.cos(var1);
       float var3 = Mth.sin(var1);
       double var4 = this.x;
       double var6 = this.y * (double)var2 + this.z * (double)var3;
@@ -164,10 +187,31 @@
       double var6 = this.y;
       double var8 = this.z * (double)var2 - this.x * (double)var3;
       return new Vec3(var4, var6, var8);
    }
 
+   public Vec3 zRot(float var1) {
+      float var2 = Mth.cos(var1);
+      float var3 = Mth.sin(var1);
+      double var4 = this.x * (double)var2 + this.y * (double)var3;
+      double var6 = this.y * (double)var2 - this.x * (double)var3;
+      double var8 = this.z;
+      return new Vec3(var4, var6, var8);
+   }
+
+   public static Vec3 directionFromRotation(Vec2 var0) {
+      return directionFromRotation(var0.x, var0.y);
+   }
+
+   public static Vec3 directionFromRotation(float var0, float var1) {
+      float var2 = Mth.cos(-var1 * 0.017453292F - 3.1415927F);
+      float var3 = Mth.sin(-var1 * 0.017453292F - 3.1415927F);
+      float var4 = -Mth.cos(-var0 * 0.017453292F);
+      float var5 = Mth.sin(-var0 * 0.017453292F);
+      return new Vec3((double)(var3 * var4), (double)var5, (double)(var2 * var4));
+   }
+
    public Vec3 align(EnumSet<Direction.Axis> var1) {
       double var2 = var1.contains(Direction.Axis.X) ? (double)Mth.floor(this.x) : this.x;
       double var4 = var1.contains(Direction.Axis.Y) ? (double)Mth.floor(this.y) : this.y;
       double var6 = var1.contains(Direction.Axis.Z) ? (double)Mth.floor(this.z) : this.z;
       return new Vec3(var2, var4, var6);
