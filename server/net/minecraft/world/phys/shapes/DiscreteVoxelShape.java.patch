--- net/minecraft/world/phys/shapes/DiscreteVoxelShape.java
+++ net/minecraft/world/phys/shapes/DiscreteVoxelShape.java
@@ -8,13 +8,17 @@
    protected final int xSize;
    protected final int ySize;
    protected final int zSize;
 
    protected DiscreteVoxelShape(int var1, int var2, int var3) {
-      this.xSize = var1;
-      this.ySize = var2;
-      this.zSize = var3;
+      if (var1 >= 0 && var2 >= 0 && var3 >= 0) {
+         this.xSize = var1;
+         this.ySize = var2;
+         this.zSize = var3;
+      } else {
+         throw new IllegalArgumentException("Need all positive sizes: x: " + var1 + ", y: " + var2 + ", z: " + var3);
+      }
    }
 
    public boolean isFullWide(AxisCycle var1, int var2, int var3, int var4) {
       return this.isFullWide(var1.cycle(var2, var3, var4, Direction.Axis.X), var1.cycle(var2, var3, var4, Direction.Axis.Y), var1.cycle(var2, var3, var4, Direction.Axis.Z));
    }
@@ -31,11 +35,11 @@
       return this.isFull(var1.cycle(var2, var3, var4, Direction.Axis.X), var1.cycle(var2, var3, var4, Direction.Axis.Y), var1.cycle(var2, var3, var4, Direction.Axis.Z));
    }
 
    public abstract boolean isFull(int var1, int var2, int var3);
 
-   public abstract void setFull(int var1, int var2, int var3, boolean var4, boolean var5);
+   public abstract void fill(int var1, int var2, int var3);
 
    public boolean isEmpty() {
       Direction.Axis[] var1 = AXIS_VALUES;
       int var2 = var1.length;
 
@@ -51,10 +55,56 @@
 
    public abstract int firstFull(Direction.Axis var1);
 
    public abstract int lastFull(Direction.Axis var1);
 
+   public int firstFull(Direction.Axis var1, int var2, int var3) {
+      int var4 = this.getSize(var1);
+      if (var2 >= 0 && var3 >= 0) {
+         Direction.Axis var5 = AxisCycle.FORWARD.cycle(var1);
+         Direction.Axis var6 = AxisCycle.BACKWARD.cycle(var1);
+         if (var2 < this.getSize(var5) && var3 < this.getSize(var6)) {
+            AxisCycle var7 = AxisCycle.between(Direction.Axis.X, var1);
+
+            for(int var8 = 0; var8 < var4; ++var8) {
+               if (this.isFull(var7, var8, var2, var3)) {
+                  return var8;
+               }
+            }
+
+            return var4;
+         } else {
+            return var4;
+         }
+      } else {
+         return var4;
+      }
+   }
+
+   public int lastFull(Direction.Axis var1, int var2, int var3) {
+      if (var2 >= 0 && var3 >= 0) {
+         Direction.Axis var4 = AxisCycle.FORWARD.cycle(var1);
+         Direction.Axis var5 = AxisCycle.BACKWARD.cycle(var1);
+         if (var2 < this.getSize(var4) && var3 < this.getSize(var5)) {
+            int var6 = this.getSize(var1);
+            AxisCycle var7 = AxisCycle.between(Direction.Axis.X, var1);
+
+            for(int var8 = var6 - 1; var8 >= 0; --var8) {
+               if (this.isFull(var7, var8, var2, var3)) {
+                  return var8 + 1;
+               }
+            }
+
+            return 0;
+         } else {
+            return 0;
+         }
+      } else {
+         return 0;
+      }
+   }
+
    public int getSize(Direction.Axis var1) {
       return var1.choose(this.xSize, this.ySize, this.zSize);
    }
 
    public int getXSize() {
@@ -67,96 +117,61 @@
 
    public int getZSize() {
       return this.getSize(Direction.Axis.Z);
    }
 
-   protected boolean isZStripFull(int var1, int var2, int var3, int var4) {
-      for(int var5 = var1; var5 < var2; ++var5) {
-         if (!this.isFullWide(var3, var4, var5)) {
-            return false;
-         }
-      }
-
-      return true;
+   public void forAllEdges(DiscreteVoxelShape.IntLineConsumer var1, boolean var2) {
+      this.forAllAxisEdges(var1, AxisCycle.NONE, var2);
+      this.forAllAxisEdges(var1, AxisCycle.FORWARD, var2);
+      this.forAllAxisEdges(var1, AxisCycle.BACKWARD, var2);
    }
 
-   protected void setZStrip(int var1, int var2, int var3, int var4, boolean var5) {
-      for(int var6 = var1; var6 < var2; ++var6) {
-         this.setFull(var3, var4, var6, false, var5);
-      }
+   private void forAllAxisEdges(DiscreteVoxelShape.IntLineConsumer var1, AxisCycle var2, boolean var3) {
+      AxisCycle var5 = var2.inverse();
+      int var6 = this.getSize(var5.cycle(Direction.Axis.X));
+      int var7 = this.getSize(var5.cycle(Direction.Axis.Y));
+      int var8 = this.getSize(var5.cycle(Direction.Axis.Z));
 
-   }
+      for(int var9 = 0; var9 <= var6; ++var9) {
+         for(int var10 = 0; var10 <= var7; ++var10) {
+            int var4 = -1;
 
-   protected boolean isXZRectangleFull(int var1, int var2, int var3, int var4, int var5) {
-      for(int var6 = var1; var6 < var2; ++var6) {
-         if (!this.isZStripFull(var3, var4, var6, var5)) {
-            return false;
-         }
-      }
+            for(int var11 = 0; var11 <= var8; ++var11) {
+               int var12 = 0;
+               int var13 = 0;
 
-      return true;
-   }
-
-   public void forAllBoxes(DiscreteVoxelShape.IntLineConsumer var1, boolean var2) {
-      BitSetDiscreteVoxelShape var3 = new BitSetDiscreteVoxelShape(this);
-
-      for(int var4 = 0; var4 <= this.xSize; ++var4) {
-         for(int var5 = 0; var5 <= this.ySize; ++var5) {
-            int var6 = -1;
-
-            for(int var7 = 0; var7 <= this.zSize; ++var7) {
-               if (var3.isFullWide(var4, var5, var7)) {
-                  if (var2) {
-                     if (var6 == -1) {
-                        var6 = var7;
+               for(int var14 = 0; var14 <= 1; ++var14) {
+                  for(int var15 = 0; var15 <= 1; ++var15) {
+                     if (this.isFullWide(var5, var9 + var14 - 1, var10 + var15 - 1, var11)) {
+                        ++var12;
+                        var13 ^= var14 ^ var15;
                      }
-                  } else {
-                     var1.consume(var4, var5, var7, var4 + 1, var5 + 1, var7 + 1);
                   }
-               } else if (var6 != -1) {
-                  int var8 = var4;
-                  int var9 = var4;
-                  int var10 = var5;
-                  int var11 = var5;
-                  var3.setZStrip(var6, var7, var4, var5, false);
+               }
 
-                  while(var3.isZStripFull(var6, var7, var8 - 1, var10)) {
-                     var3.setZStrip(var6, var7, var8 - 1, var10, false);
-                     --var8;
-                  }
-
-                  while(var3.isZStripFull(var6, var7, var9 + 1, var10)) {
-                     var3.setZStrip(var6, var7, var9 + 1, var10, false);
-                     ++var9;
-                  }
-
-                  int var12;
-                  while(var3.isXZRectangleFull(var8, var9 + 1, var6, var7, var10 - 1)) {
-                     for(var12 = var8; var12 <= var9; ++var12) {
-                        var3.setZStrip(var6, var7, var12, var10 - 1, false);
+               if (var12 == 1 || var12 == 3 || var12 == 2 && (var13 & 1) == 0) {
+                  if (var3) {
+                     if (var4 == -1) {
+                        var4 = var11;
                      }
-
-                     --var10;
+                  } else {
+                     var1.consume(var5.cycle(var9, var10, var11, Direction.Axis.X), var5.cycle(var9, var10, var11, Direction.Axis.Y), var5.cycle(var9, var10, var11, Direction.Axis.Z), var5.cycle(var9, var10, var11 + 1, Direction.Axis.X), var5.cycle(var9, var10, var11 + 1, Direction.Axis.Y), var5.cycle(var9, var10, var11 + 1, Direction.Axis.Z));
                   }
-
-                  while(var3.isXZRectangleFull(var8, var9 + 1, var6, var7, var11 + 1)) {
-                     for(var12 = var8; var12 <= var9; ++var12) {
-                        var3.setZStrip(var6, var7, var12, var11 + 1, false);
-                     }
-
-                     ++var11;
-                  }
-
-                  var1.consume(var8, var10, var6, var9 + 1, var11 + 1, var7);
-                  var6 = -1;
+               } else if (var4 != -1) {
+                  var1.consume(var5.cycle(var9, var10, var4, Direction.Axis.X), var5.cycle(var9, var10, var4, Direction.Axis.Y), var5.cycle(var9, var10, var4, Direction.Axis.Z), var5.cycle(var9, var10, var11, Direction.Axis.X), var5.cycle(var9, var10, var11, Direction.Axis.Y), var5.cycle(var9, var10, var11, Direction.Axis.Z));
+                  var4 = -1;
                }
             }
          }
       }
 
    }
 
+   public void forAllBoxes(DiscreteVoxelShape.IntLineConsumer var1, boolean var2) {
+      BitSetDiscreteVoxelShape.forAllBoxes(this, var1, var2);
+   }
+
    public void forAllFaces(DiscreteVoxelShape.IntFaceConsumer var1) {
       this.forAllAxisFaces(var1, AxisCycle.NONE);
       this.forAllAxisFaces(var1, AxisCycle.FORWARD);
       this.forAllAxisFaces(var1, AxisCycle.BACKWARD);
    }
@@ -189,13 +204,13 @@
          }
       }
 
    }
 
-   public interface IntFaceConsumer {
-      void consume(Direction var1, int var2, int var3, int var4);
-   }
-
    public interface IntLineConsumer {
       void consume(int var1, int var2, int var3, int var4, int var5, int var6);
    }
+
+   public interface IntFaceConsumer {
+      void consume(Direction var1, int var2, int var3, int var4);
+   }
 }
