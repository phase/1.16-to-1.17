--- net/minecraft/commands/arguments/NbtPathArgument.java
+++ net/minecraft/commands/arguments/NbtPathArgument.java
@@ -13,10 +13,11 @@
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Objects;
 import java.util.function.BiConsumer;
 import java.util.function.Function;
 import java.util.function.Predicate;
 import java.util.function.Supplier;
 import java.util.stream.Stream;
@@ -34,10 +35,15 @@
    private static final Collection<String> EXAMPLES = Arrays.asList("foo", "foo.bar", "foo[0]", "[0]", "[]", "{foo=bar}");
    public static final SimpleCommandExceptionType ERROR_INVALID_NODE = new SimpleCommandExceptionType(new TranslatableComponent("arguments.nbtpath.node.invalid"));
    public static final DynamicCommandExceptionType ERROR_NOTHING_FOUND = new DynamicCommandExceptionType((var0) -> {
       return new TranslatableComponent("arguments.nbtpath.nothing_found", new Object[]{var0});
    });
+   private static final char INDEX_MATCH_START = '[';
+   private static final char INDEX_MATCH_END = ']';
+   private static final char KEY_MATCH_START = '{';
+   private static final char KEY_MATCH_END = '}';
+   private static final char QUOTED_KEY_START = '"';
 
    public NbtPathArgument() {
    }
 
    public static NbtPathArgument nbtPath() {
@@ -135,16 +141,157 @@
 
    private static boolean isAllowedInUnquotedName(char var0) {
       return var0 != ' ' && var0 != '"' && var0 != '[' && var0 != ']' && var0 != '.' && var0 != '{' && var0 != '}';
    }
 
-   private static Predicate<Tag> createTagPredicate(CompoundTag var0) {
+   static Predicate<Tag> createTagPredicate(CompoundTag var0) {
       return (var1) -> {
          return NbtUtils.compareNbt(var0, var1, true);
       };
    }
 
+   public static class NbtPath {
+      private final String original;
+      private final Object2IntMap<NbtPathArgument.Node> nodeToOriginalPosition;
+      private final NbtPathArgument.Node[] nodes;
+
+      public NbtPath(String var1, NbtPathArgument.Node[] var2, Object2IntMap<NbtPathArgument.Node> var3) {
+         this.original = var1;
+         this.nodes = var2;
+         this.nodeToOriginalPosition = var3;
+      }
+
+      public List<Tag> get(Tag var1) throws CommandSyntaxException {
+         List var2 = Collections.singletonList(var1);
+         NbtPathArgument.Node[] var3 = this.nodes;
+         int var4 = var3.length;
+
+         for(int var5 = 0; var5 < var4; ++var5) {
+            NbtPathArgument.Node var6 = var3[var5];
+            var2 = var6.get(var2);
+            if (var2.isEmpty()) {
+               throw this.createNotFoundException(var6);
+            }
+         }
+
+         return var2;
+      }
+
+      public int countMatching(Tag var1) {
+         List var2 = Collections.singletonList(var1);
+         NbtPathArgument.Node[] var3 = this.nodes;
+         int var4 = var3.length;
+
+         for(int var5 = 0; var5 < var4; ++var5) {
+            NbtPathArgument.Node var6 = var3[var5];
+            var2 = var6.get(var2);
+            if (var2.isEmpty()) {
+               return 0;
+            }
+         }
+
+         return var2.size();
+      }
+
+      private List<Tag> getOrCreateParents(Tag var1) throws CommandSyntaxException {
+         List var2 = Collections.singletonList(var1);
+
+         for(int var3 = 0; var3 < this.nodes.length - 1; ++var3) {
+            NbtPathArgument.Node var4 = this.nodes[var3];
+            int var5 = var3 + 1;
+            NbtPathArgument.Node var10002 = this.nodes[var5];
+            Objects.requireNonNull(var10002);
+            var2 = var4.getOrCreate(var2, var10002::createPreferredParentTag);
+            if (var2.isEmpty()) {
+               throw this.createNotFoundException(var4);
+            }
+         }
+
+         return var2;
+      }
+
+      public List<Tag> getOrCreate(Tag var1, Supplier<Tag> var2) throws CommandSyntaxException {
+         List var3 = this.getOrCreateParents(var1);
+         NbtPathArgument.Node var4 = this.nodes[this.nodes.length - 1];
+         return var4.getOrCreate(var3, var2);
+      }
+
+      private static int apply(List<Tag> var0, Function<Tag, Integer> var1) {
+         return (Integer)var0.stream().map(var1).reduce(0, (var0x, var1x) -> {
+            return var0x + var1x;
+         });
+      }
+
+      public int set(Tag var1, Tag var2) throws CommandSyntaxException {
+         Objects.requireNonNull(var2);
+         return this.set(var1, var2::copy);
+      }
+
+      public int set(Tag var1, Supplier<Tag> var2) throws CommandSyntaxException {
+         List var3 = this.getOrCreateParents(var1);
+         NbtPathArgument.Node var4 = this.nodes[this.nodes.length - 1];
+         return apply(var3, (var2x) -> {
+            return var4.setTag(var2x, var2);
+         });
+      }
+
+      public int remove(Tag var1) {
+         List var2 = Collections.singletonList(var1);
+
+         for(int var3 = 0; var3 < this.nodes.length - 1; ++var3) {
+            var2 = this.nodes[var3].get(var2);
+         }
+
+         NbtPathArgument.Node var4 = this.nodes[this.nodes.length - 1];
+         Objects.requireNonNull(var4);
+         return apply(var2, var4::removeTag);
+      }
+
+      private CommandSyntaxException createNotFoundException(NbtPathArgument.Node var1) {
+         int var2 = this.nodeToOriginalPosition.getInt(var1);
+         return NbtPathArgument.ERROR_NOTHING_FOUND.create(this.original.substring(0, var2));
+      }
+
+      public String toString() {
+         return this.original;
+      }
+   }
+
+   private interface Node {
+      void getTag(Tag var1, List<Tag> var2);
+
+      void getOrCreateTag(Tag var1, Supplier<Tag> var2, List<Tag> var3);
+
+      Tag createPreferredParentTag();
+
+      int setTag(Tag var1, Supplier<Tag> var2);
+
+      int removeTag(Tag var1);
+
+      default List<Tag> get(List<Tag> var1) {
+         return this.collect(var1, this::getTag);
+      }
+
+      default List<Tag> getOrCreate(List<Tag> var1, Supplier<Tag> var2) {
+         return this.collect(var1, (var2x, var3) -> {
+            this.getOrCreateTag(var2x, var2, var3);
+         });
+      }
+
+      default List<Tag> collect(List<Tag> var1, BiConsumer<Tag, List<Tag>> var2) {
+         ArrayList var3 = Lists.newArrayList();
+         Iterator var4 = var1.iterator();
+
+         while(var4.hasNext()) {
+            Tag var5 = (Tag)var4.next();
+            var2.accept(var5, var3);
+         }
+
+         return var3;
+      }
+   }
+
    static class MatchRootObjectNode implements NbtPathArgument.Node {
       private final Predicate<Tag> predicate;
 
       public MatchRootObjectNode(CompoundTag var1) {
          this.predicate = NbtPathArgument.createTagPredicate(var1);
@@ -172,77 +319,88 @@
       public int removeTag(Tag var1) {
          return 0;
       }
    }
 
-   static class MatchObjectNode implements NbtPathArgument.Node {
-      private final String name;
+   static class MatchElementNode implements NbtPathArgument.Node {
       private final CompoundTag pattern;
       private final Predicate<Tag> predicate;
 
-      public MatchObjectNode(String var1, CompoundTag var2) {
-         this.name = var1;
-         this.pattern = var2;
-         this.predicate = NbtPathArgument.createTagPredicate(var2);
+      public MatchElementNode(CompoundTag var1) {
+         this.pattern = var1;
+         this.predicate = NbtPathArgument.createTagPredicate(var1);
       }
 
       public void getTag(Tag var1, List<Tag> var2) {
-         if (var1 instanceof CompoundTag) {
-            Tag var3 = ((CompoundTag)var1).get(this.name);
-            if (this.predicate.test(var3)) {
-               var2.add(var3);
-            }
+         if (var1 instanceof ListTag) {
+            ListTag var3 = (ListTag)var1;
+            Stream var10000 = var3.stream().filter(this.predicate);
+            Objects.requireNonNull(var2);
+            var10000.forEach(var2::add);
          }
 
       }
 
       public void getOrCreateTag(Tag var1, Supplier<Tag> var2, List<Tag> var3) {
-         if (var1 instanceof CompoundTag) {
-            CompoundTag var4 = (CompoundTag)var1;
-            Tag var5 = var4.get(this.name);
-            if (var5 == null) {
+         MutableBoolean var4 = new MutableBoolean();
+         if (var1 instanceof ListTag) {
+            ListTag var5 = (ListTag)var1;
+            var5.stream().filter(this.predicate).forEach((var2x) -> {
+               var3.add(var2x);
+               var4.setTrue();
+            });
+            if (var4.isFalse()) {
                CompoundTag var6 = this.pattern.copy();
-               var4.put(this.name, var6);
+               var5.add(var6);
                var3.add(var6);
-            } else if (this.predicate.test(var5)) {
-               var3.add(var5);
             }
          }
 
       }
 
       public Tag createPreferredParentTag() {
-         return new CompoundTag();
+         return new ListTag();
       }
 
       public int setTag(Tag var1, Supplier<Tag> var2) {
-         if (var1 instanceof CompoundTag) {
-            CompoundTag var3 = (CompoundTag)var1;
-            Tag var4 = var3.get(this.name);
-            if (this.predicate.test(var4)) {
-               Tag var5 = (Tag)var2.get();
-               if (!var5.equals(var4)) {
-                  var3.put(this.name, var5);
-                  return 1;
+         int var3 = 0;
+         if (var1 instanceof ListTag) {
+            ListTag var4 = (ListTag)var1;
+            int var5 = var4.size();
+            if (var5 == 0) {
+               var4.add((Tag)var2.get());
+               ++var3;
+            } else {
+               for(int var6 = 0; var6 < var5; ++var6) {
+                  Tag var7 = var4.get(var6);
+                  if (this.predicate.test(var7)) {
+                     Tag var8 = (Tag)var2.get();
+                     if (!var8.equals(var7) && var4.setTag(var6, var8)) {
+                        ++var3;
+                     }
+                  }
                }
             }
          }
 
-         return 0;
+         return var3;
       }
 
       public int removeTag(Tag var1) {
-         if (var1 instanceof CompoundTag) {
-            CompoundTag var2 = (CompoundTag)var1;
-            Tag var3 = var2.get(this.name);
-            if (this.predicate.test(var3)) {
-               var2.remove(this.name);
-               return 1;
+         int var2 = 0;
+         if (var1 instanceof ListTag) {
+            ListTag var3 = (ListTag)var1;
+
+            for(int var4 = var3.size() - 1; var4 >= 0; --var4) {
+               if (this.predicate.test(var3.get(var4))) {
+                  var3.remove(var4);
+                  ++var2;
+               }
             }
          }
 
-         return 0;
+         return var2;
       }
    }
 
    static class AllElementsNode implements NbtPathArgument.Node {
       public static final NbtPathArgument.AllElementsNode INSTANCE = new NbtPathArgument.AllElementsNode();
@@ -286,11 +444,11 @@
                var3.addTag(0, (Tag)var2.get());
                return 1;
             } else {
                Tag var5 = (Tag)var2.get();
                Stream var10001 = var3.stream();
-               var5.getClass();
+               Objects.requireNonNull(var5);
                int var6 = var4 - (int)var10001.filter(var5::equals).count();
                if (var6 == 0) {
                   return 0;
                } else {
                   var3.clear();
@@ -320,89 +478,10 @@
 
          return 0;
       }
    }
 
-   static class MatchElementNode implements NbtPathArgument.Node {
-      private final CompoundTag pattern;
-      private final Predicate<Tag> predicate;
-
-      public MatchElementNode(CompoundTag var1) {
-         this.pattern = var1;
-         this.predicate = NbtPathArgument.createTagPredicate(var1);
-      }
-
-      public void getTag(Tag var1, List<Tag> var2) {
-         if (var1 instanceof ListTag) {
-            ListTag var3 = (ListTag)var1;
-            var3.stream().filter(this.predicate).forEach(var2::add);
-         }
-
-      }
-
-      public void getOrCreateTag(Tag var1, Supplier<Tag> var2, List<Tag> var3) {
-         MutableBoolean var4 = new MutableBoolean();
-         if (var1 instanceof ListTag) {
-            ListTag var5 = (ListTag)var1;
-            var5.stream().filter(this.predicate).forEach((var2x) -> {
-               var3.add(var2x);
-               var4.setTrue();
-            });
-            if (var4.isFalse()) {
-               CompoundTag var6 = this.pattern.copy();
-               var5.add(var6);
-               var3.add(var6);
-            }
-         }
-
-      }
-
-      public Tag createPreferredParentTag() {
-         return new ListTag();
-      }
-
-      public int setTag(Tag var1, Supplier<Tag> var2) {
-         int var3 = 0;
-         if (var1 instanceof ListTag) {
-            ListTag var4 = (ListTag)var1;
-            int var5 = var4.size();
-            if (var5 == 0) {
-               var4.add(var2.get());
-               ++var3;
-            } else {
-               for(int var6 = 0; var6 < var5; ++var6) {
-                  Tag var7 = var4.get(var6);
-                  if (this.predicate.test(var7)) {
-                     Tag var8 = (Tag)var2.get();
-                     if (!var8.equals(var7) && var4.setTag(var6, var8)) {
-                        ++var3;
-                     }
-                  }
-               }
-            }
-         }
-
-         return var3;
-      }
-
-      public int removeTag(Tag var1) {
-         int var2 = 0;
-         if (var1 instanceof ListTag) {
-            ListTag var3 = (ListTag)var1;
-
-            for(int var4 = var3.size() - 1; var4 >= 0; --var4) {
-               if (this.predicate.test(var3.get(var4))) {
-                  var3.remove(var4);
-                  ++var2;
-               }
-            }
-         }
-
-         return var2;
-      }
-   }
-
    static class IndexedElementNode implements NbtPathArgument.Node {
       private final int index;
 
       public IndexedElementNode(int var1) {
          this.index = var1;
@@ -412,11 +491,11 @@
          if (var1 instanceof CollectionTag) {
             CollectionTag var3 = (CollectionTag)var1;
             int var4 = var3.size();
             int var5 = this.index < 0 ? var4 + this.index : this.index;
             if (0 <= var5 && var5 < var4) {
-               var2.add(var3.get(var5));
+               var2.add((Tag)var3.get(var5));
             }
          }
 
       }
 
@@ -458,39 +537,42 @@
 
          return 0;
       }
    }
 
-   static class CompoundChildNode implements NbtPathArgument.Node {
+   static class MatchObjectNode implements NbtPathArgument.Node {
       private final String name;
+      private final CompoundTag pattern;
+      private final Predicate<Tag> predicate;
 
-      public CompoundChildNode(String var1) {
+      public MatchObjectNode(String var1, CompoundTag var2) {
          this.name = var1;
+         this.pattern = var2;
+         this.predicate = NbtPathArgument.createTagPredicate(var2);
       }
 
       public void getTag(Tag var1, List<Tag> var2) {
          if (var1 instanceof CompoundTag) {
             Tag var3 = ((CompoundTag)var1).get(this.name);
-            if (var3 != null) {
+            if (this.predicate.test(var3)) {
                var2.add(var3);
             }
          }
 
       }
 
       public void getOrCreateTag(Tag var1, Supplier<Tag> var2, List<Tag> var3) {
          if (var1 instanceof CompoundTag) {
             CompoundTag var4 = (CompoundTag)var1;
-            Tag var5;
-            if (var4.contains(this.name)) {
-               var5 = var4.get(this.name);
-            } else {
-               var5 = (Tag)var2.get();
-               var4.put(this.name, var5);
+            Tag var5 = var4.get(this.name);
+            if (var5 == null) {
+               CompoundTag var6 = this.pattern.copy();
+               var4.put(this.name, var6);
+               var3.add(var6);
+            } else if (this.predicate.test(var5)) {
+               var3.add(var5);
             }
-
-            var3.add(var5);
          }
 
       }
 
       public Tag createPreferredParentTag() {
@@ -498,164 +580,95 @@
       }
 
       public int setTag(Tag var1, Supplier<Tag> var2) {
          if (var1 instanceof CompoundTag) {
             CompoundTag var3 = (CompoundTag)var1;
-            Tag var4 = (Tag)var2.get();
-            Tag var5 = var3.put(this.name, var4);
-            if (!var4.equals(var5)) {
-               return 1;
+            Tag var4 = var3.get(this.name);
+            if (this.predicate.test(var4)) {
+               Tag var5 = (Tag)var2.get();
+               if (!var5.equals(var4)) {
+                  var3.put(this.name, var5);
+                  return 1;
+               }
             }
          }
 
          return 0;
       }
 
       public int removeTag(Tag var1) {
          if (var1 instanceof CompoundTag) {
             CompoundTag var2 = (CompoundTag)var1;
-            if (var2.contains(this.name)) {
+            Tag var3 = var2.get(this.name);
+            if (this.predicate.test(var3)) {
                var2.remove(this.name);
                return 1;
             }
          }
 
          return 0;
       }
    }
 
-   interface Node {
-      void getTag(Tag var1, List<Tag> var2);
+   static class CompoundChildNode implements NbtPathArgument.Node {
+      private final String name;
 
-      void getOrCreateTag(Tag var1, Supplier<Tag> var2, List<Tag> var3);
-
-      Tag createPreferredParentTag();
-
-      int setTag(Tag var1, Supplier<Tag> var2);
-
-      int removeTag(Tag var1);
-
-      default List<Tag> get(List<Tag> var1) {
-         return this.collect(var1, this::getTag);
+      public CompoundChildNode(String var1) {
+         this.name = var1;
       }
 
-      default List<Tag> getOrCreate(List<Tag> var1, Supplier<Tag> var2) {
-         return this.collect(var1, (var2x, var3) -> {
-            this.getOrCreateTag(var2x, var2, var3);
-         });
-      }
-
-      default List<Tag> collect(List<Tag> var1, BiConsumer<Tag, List<Tag>> var2) {
-         ArrayList var3 = Lists.newArrayList();
-         Iterator var4 = var1.iterator();
-
-         while(var4.hasNext()) {
-            Tag var5 = (Tag)var4.next();
-            var2.accept(var5, var3);
+      public void getTag(Tag var1, List<Tag> var2) {
+         if (var1 instanceof CompoundTag) {
+            Tag var3 = ((CompoundTag)var1).get(this.name);
+            if (var3 != null) {
+               var2.add(var3);
+            }
          }
 
-         return var3;
       }
-   }
 
-   public static class NbtPath {
-      private final String original;
-      private final Object2IntMap<NbtPathArgument.Node> nodeToOriginalPosition;
-      private final NbtPathArgument.Node[] nodes;
-
-      public NbtPath(String var1, NbtPathArgument.Node[] var2, Object2IntMap<NbtPathArgument.Node> var3) {
-         this.original = var1;
-         this.nodes = var2;
-         this.nodeToOriginalPosition = var3;
-      }
-
-      public List<Tag> get(Tag var1) throws CommandSyntaxException {
-         List var2 = Collections.singletonList(var1);
-         NbtPathArgument.Node[] var3 = this.nodes;
-         int var4 = var3.length;
-
-         for(int var5 = 0; var5 < var4; ++var5) {
-            NbtPathArgument.Node var6 = var3[var5];
-            var2 = var6.get(var2);
-            if (var2.isEmpty()) {
-               throw this.createNotFoundException(var6);
+      public void getOrCreateTag(Tag var1, Supplier<Tag> var2, List<Tag> var3) {
+         if (var1 instanceof CompoundTag) {
+            CompoundTag var4 = (CompoundTag)var1;
+            Tag var5;
+            if (var4.contains(this.name)) {
+               var5 = var4.get(this.name);
+            } else {
+               var5 = (Tag)var2.get();
+               var4.put(this.name, var5);
             }
+
+            var3.add(var5);
          }
 
-         return var2;
       }
 
-      public int countMatching(Tag var1) {
-         List var2 = Collections.singletonList(var1);
-         NbtPathArgument.Node[] var3 = this.nodes;
-         int var4 = var3.length;
+      public Tag createPreferredParentTag() {
+         return new CompoundTag();
+      }
 
-         for(int var5 = 0; var5 < var4; ++var5) {
-            NbtPathArgument.Node var6 = var3[var5];
-            var2 = var6.get(var2);
-            if (var2.isEmpty()) {
-               return 0;
+      public int setTag(Tag var1, Supplier<Tag> var2) {
+         if (var1 instanceof CompoundTag) {
+            CompoundTag var3 = (CompoundTag)var1;
+            Tag var4 = (Tag)var2.get();
+            Tag var5 = var3.put(this.name, var4);
+            if (!var4.equals(var5)) {
+               return 1;
             }
          }
 
-         return var2.size();
+         return 0;
       }
 
-      private List<Tag> getOrCreateParents(Tag var1) throws CommandSyntaxException {
-         List var2 = Collections.singletonList(var1);
-
-         for(int var3 = 0; var3 < this.nodes.length - 1; ++var3) {
-            NbtPathArgument.Node var4 = this.nodes[var3];
-            int var5 = var3 + 1;
-            NbtPathArgument.Node var10002 = this.nodes[var5];
-            var10002.getClass();
-            var2 = var4.getOrCreate(var2, var10002::createPreferredParentTag);
-            if (var2.isEmpty()) {
-               throw this.createNotFoundException(var4);
+      public int removeTag(Tag var1) {
+         if (var1 instanceof CompoundTag) {
+            CompoundTag var2 = (CompoundTag)var1;
+            if (var2.contains(this.name)) {
+               var2.remove(this.name);
+               return 1;
             }
          }
 
-         return var2;
+         return 0;
       }
-
-      public List<Tag> getOrCreate(Tag var1, Supplier<Tag> var2) throws CommandSyntaxException {
-         List var3 = this.getOrCreateParents(var1);
-         NbtPathArgument.Node var4 = this.nodes[this.nodes.length - 1];
-         return var4.getOrCreate(var3, var2);
-      }
-
-      private static int apply(List<Tag> var0, Function<Tag, Integer> var1) {
-         return (Integer)var0.stream().map(var1).reduce(0, (var0x, var1x) -> {
-            return var0x + var1x;
-         });
-      }
-
-      public int set(Tag var1, Supplier<Tag> var2) throws CommandSyntaxException {
-         List var3 = this.getOrCreateParents(var1);
-         NbtPathArgument.Node var4 = this.nodes[this.nodes.length - 1];
-         return apply(var3, (var2x) -> {
-            return var4.setTag(var2x, var2);
-         });
-      }
-
-      public int remove(Tag var1) {
-         List var2 = Collections.singletonList(var1);
-
-         for(int var3 = 0; var3 < this.nodes.length - 1; ++var3) {
-            var2 = this.nodes[var3].get(var2);
-         }
-
-         NbtPathArgument.Node var4 = this.nodes[this.nodes.length - 1];
-         var4.getClass();
-         return apply(var2, var4::removeTag);
-      }
-
-      private CommandSyntaxException createNotFoundException(NbtPathArgument.Node var1) {
-         int var2 = this.nodeToOriginalPosition.getInt(var1);
-         return NbtPathArgument.ERROR_NOTHING_FOUND.create(this.original.substring(0, var2));
-      }
-
-      public String toString() {
-         return this.original;
-      }
    }
 }
