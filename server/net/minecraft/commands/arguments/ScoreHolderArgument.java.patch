--- net/minecraft/commands/arguments/ScoreHolderArgument.java
+++ net/minecraft/commands/arguments/ScoreHolderArgument.java
@@ -12,10 +12,11 @@
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Objects;
 import java.util.Set;
 import java.util.function.Supplier;
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.commands.SharedSuggestionProvider;
 import net.minecraft.commands.arguments.selector.EntitySelector;
@@ -41,11 +42,12 @@
          SharedSuggestionProvider.suggest((Iterable)((CommandSourceStack)var0.getSource()).getOnlinePlayerNames(), var1x);
       });
    };
    private static final Collection<String> EXAMPLES = Arrays.asList("Player", "0123", "*", "@e");
    private static final SimpleCommandExceptionType ERROR_NO_RESULTS = new SimpleCommandExceptionType(new TranslatableComponent("argument.scoreHolder.empty"));
-   private final boolean multiple;
+   private static final byte FLAG_MULTIPLE = 1;
+   final boolean multiple;
 
    public ScoreHolderArgument(boolean var1) {
       this.multiple = var1;
    }
 
@@ -57,11 +59,11 @@
       return getNames(var0, var1, Collections::emptyList);
    }
 
    public static Collection<String> getNamesWithDefaultWildcard(CommandContext<CommandSourceStack> var0, String var1) throws CommandSyntaxException {
       ServerScoreboard var10002 = ((CommandSourceStack)var0.getSource()).getServer().getScoreboard();
-      var10002.getClass();
+      Objects.requireNonNull(var10002);
       return getNames(var0, var1, var10002::getTrackedPlayers);
    }
 
    public static Collection<String> getNames(CommandContext<CommandSourceStack> var0, String var1, Supplier<Collection<String>> var2) throws CommandSyntaxException {
       Collection var3 = ((ScoreHolderArgument.Result)var0.getArgument(var1, ScoreHolderArgument.Result.class)).getNames((CommandSourceStack)var0.getSource(), var2);
@@ -117,32 +119,13 @@
 
    public Collection<String> getExamples() {
       return EXAMPLES;
    }
 
-   public static class Serializer implements ArgumentSerializer<ScoreHolderArgument> {
-      public Serializer() {
-      }
-
-      public void serializeToNetwork(ScoreHolderArgument var1, FriendlyByteBuf var2) {
-         byte var3 = 0;
-         if (var1.multiple) {
-            var3 = (byte)(var3 | 1);
-         }
-
-         var2.writeByte(var3);
-      }
-
-      public ScoreHolderArgument deserializeFromNetwork(FriendlyByteBuf var1) {
-         byte var2 = var1.readByte();
-         boolean var3 = (var2 & 1) != 0;
-         return new ScoreHolderArgument(var3);
-      }
-
-      public void serializeToJson(ScoreHolderArgument var1, JsonObject var2) {
-         var2.addProperty("amount", var1.multiple ? "multiple" : "single");
-      }
+   @FunctionalInterface
+   public interface Result {
+      Collection<String> getNames(CommandSourceStack var1, Supplier<Collection<String>> var2) throws CommandSyntaxException;
    }
 
    public static class SelectorResult implements ScoreHolderArgument.Result {
       private final EntitySelector selector;
 
@@ -166,10 +149,29 @@
             return var4;
          }
       }
    }
 
-   @FunctionalInterface
-   public interface Result {
-      Collection<String> getNames(CommandSourceStack var1, Supplier<Collection<String>> var2) throws CommandSyntaxException;
+   public static class Serializer implements ArgumentSerializer<ScoreHolderArgument> {
+      public Serializer() {
+      }
+
+      public void serializeToNetwork(ScoreHolderArgument var1, FriendlyByteBuf var2) {
+         byte var3 = 0;
+         if (var1.multiple) {
+            var3 = (byte)(var3 | 1);
+         }
+
+         var2.writeByte(var3);
+      }
+
+      public ScoreHolderArgument deserializeFromNetwork(FriendlyByteBuf var1) {
+         byte var2 = var1.readByte();
+         boolean var3 = (var2 & 1) != 0;
+         return new ScoreHolderArgument(var3);
+      }
+
+      public void serializeToJson(ScoreHolderArgument var1, JsonObject var2) {
+         var2.addProperty("amount", var1.multiple ? "multiple" : "single");
+      }
    }
 }
