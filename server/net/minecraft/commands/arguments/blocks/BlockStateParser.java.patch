--- net/minecraft/commands/arguments/blocks/BlockStateParser.java
+++ net/minecraft/commands/arguments/blocks/BlockStateParser.java
@@ -178,20 +178,20 @@
       return var1.buildFuture();
    }
 
    private boolean hasBlockEntity(TagCollection<Block> var1) {
       if (this.state != null) {
-         return this.state.getBlock().isEntityBlock();
+         return this.state.hasBlockEntity();
       } else {
          if (this.tag != null) {
             Tag var2 = var1.getTag(this.tag);
             if (var2 != null) {
                Iterator var3 = var2.getValues().iterator();
 
                while(var3.hasNext()) {
                   Block var4 = (Block)var3.next();
-                  if (var4.isEntityBlock()) {
+                  if (var4.defaultBlockState().hasBlockEntity()) {
                      return true;
                   }
                }
             }
          }
@@ -289,11 +289,11 @@
             Iterator var6 = var3.getValues().iterator();
 
             while(var6.hasNext()) {
                Block var7 = (Block)var6.next();
                var4 |= !var7.getStateDefinition().getProperties().isEmpty();
-               var5 |= var7.isEntityBlock();
+               var5 |= var7.defaultBlockState().hasBlockEntity();
                if (var4 && var5) {
                   break;
                }
             }
 
@@ -314,11 +314,11 @@
       if (var1.getRemaining().isEmpty()) {
          if (!this.state.getBlock().getStateDefinition().getProperties().isEmpty()) {
             var1.suggest(String.valueOf('['));
          }
 
-         if (this.state.getBlock().isEntityBlock()) {
+         if (this.state.hasBlockEntity()) {
             var1.suggest(String.valueOf('{'));
          }
       }
 
       return var1.buildFuture();
