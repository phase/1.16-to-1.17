--- net/minecraft/commands/arguments/item/ItemPredicateArgument.java
+++ net/minecraft/commands/arguments/item/ItemPredicateArgument.java
@@ -11,10 +11,11 @@
 import java.util.Collection;
 import java.util.concurrent.CompletableFuture;
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
 import net.minecraft.commands.CommandSourceStack;
+import net.minecraft.core.Registry;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtUtils;
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.tags.ItemTags;
@@ -43,16 +44,14 @@
             return var4;
          };
       } else {
          ResourceLocation var3 = var2.getTag();
          return (var2x) -> {
-            Tag var3x = ((CommandSourceStack)var2x.getSource()).getServer().getTags().getItems().getTag(var3);
-            if (var3x == null) {
-               throw ERROR_UNKNOWN_TAG.create(var3.toString());
-            } else {
-               return new ItemPredicateArgument.TagPredicate(var3x, var2.getNbt());
-            }
+            Tag var3x = ((CommandSourceStack)var2x.getSource()).getServer().getTags().getTagOrThrow(Registry.ITEM_REGISTRY, var3, (var0) -> {
+               return ERROR_UNKNOWN_TAG.create(var0.toString());
+            });
+            return new ItemPredicateArgument.TagPredicate(var3x, var2.getNbt());
          };
       }
    }
 
    public static Predicate<ItemStack> getItemPredicate(CommandContext<CommandSourceStack> var0, String var1) throws CommandSyntaxException {
@@ -74,39 +73,39 @@
 
    public Collection<String> getExamples() {
       return EXAMPLES;
    }
 
-   static class TagPredicate implements Predicate<ItemStack> {
-      private final Tag<Item> tag;
+   private static class ItemPredicate implements Predicate<ItemStack> {
+      private final Item item;
       @Nullable
       private final CompoundTag nbt;
 
-      public TagPredicate(Tag<Item> var1, @Nullable CompoundTag var2) {
-         this.tag = var1;
+      public ItemPredicate(Item var1, @Nullable CompoundTag var2) {
+         this.item = var1;
          this.nbt = var2;
       }
 
       public boolean test(ItemStack var1) {
-         return this.tag.contains(var1.getItem()) && NbtUtils.compareNbt(this.nbt, var1.getTag(), true);
+         return var1.is(this.item) && NbtUtils.compareNbt(this.nbt, var1.getTag(), true);
       }
    }
 
-   static class ItemPredicate implements Predicate<ItemStack> {
-      private final Item item;
+   public interface Result {
+      Predicate<ItemStack> create(CommandContext<CommandSourceStack> var1) throws CommandSyntaxException;
+   }
+
+   static class TagPredicate implements Predicate<ItemStack> {
+      private final Tag<Item> tag;
       @Nullable
       private final CompoundTag nbt;
 
-      public ItemPredicate(Item var1, @Nullable CompoundTag var2) {
-         this.item = var1;
+      public TagPredicate(Tag<Item> var1, @Nullable CompoundTag var2) {
+         this.tag = var1;
          this.nbt = var2;
       }
 
       public boolean test(ItemStack var1) {
-         return var1.getItem() == this.item && NbtUtils.compareNbt(this.nbt, var1.getTag(), true);
+         return var1.is(this.tag) && NbtUtils.compareNbt(this.nbt, var1.getTag(), true);
       }
    }
-
-   public interface Result {
-      Predicate<ItemStack> create(CommandContext<CommandSourceStack> var1) throws CommandSyntaxException;
-   }
 }
