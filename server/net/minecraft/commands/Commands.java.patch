--- net/minecraft/commands/Commands.java
+++ net/minecraft/commands/Commands.java
@@ -55,10 +55,11 @@
 import net.minecraft.server.commands.FunctionCommand;
 import net.minecraft.server.commands.GameModeCommand;
 import net.minecraft.server.commands.GameRuleCommand;
 import net.minecraft.server.commands.GiveCommand;
 import net.minecraft.server.commands.HelpCommand;
+import net.minecraft.server.commands.ItemCommands;
 import net.minecraft.server.commands.KickCommand;
 import net.minecraft.server.commands.KillCommand;
 import net.minecraft.server.commands.ListPlayersCommand;
 import net.minecraft.server.commands.LocateBiomeCommand;
 import net.minecraft.server.commands.LocateCommand;
@@ -70,11 +71,10 @@
 import net.minecraft.server.commands.ParticleCommand;
 import net.minecraft.server.commands.PlaySoundCommand;
 import net.minecraft.server.commands.PublishCommand;
 import net.minecraft.server.commands.RecipeCommand;
 import net.minecraft.server.commands.ReloadCommand;
-import net.minecraft.server.commands.ReplaceItemCommand;
 import net.minecraft.server.commands.SaveAllCommand;
 import net.minecraft.server.commands.SaveOffCommand;
 import net.minecraft.server.commands.SaveOnCommand;
 import net.minecraft.server.commands.SayCommand;
 import net.minecraft.server.commands.ScheduleCommand;
@@ -130,10 +130,11 @@
       FunctionCommand.register(this.dispatcher);
       GameModeCommand.register(this.dispatcher);
       GameRuleCommand.register(this.dispatcher);
       GiveCommand.register(this.dispatcher);
       HelpCommand.register(this.dispatcher);
+      ItemCommands.register(this.dispatcher);
       KickCommand.register(this.dispatcher);
       KillCommand.register(this.dispatcher);
       ListPlayersCommand.register(this.dispatcher);
       LocateCommand.register(this.dispatcher);
       LocateBiomeCommand.register(this.dispatcher);
@@ -141,11 +142,10 @@
       MsgCommand.register(this.dispatcher);
       ParticleCommand.register(this.dispatcher);
       PlaySoundCommand.register(this.dispatcher);
       ReloadCommand.register(this.dispatcher);
       RecipeCommand.register(this.dispatcher);
-      ReplaceItemCommand.register(this.dispatcher);
       SayCommand.register(this.dispatcher);
       ScheduleCommand.register(this.dispatcher);
       ScoreboardCommand.register(this.dispatcher);
       SeedCommand.register(this.dispatcher, var1 != Commands.CommandSelection.INTEGRATED);
       SetBlockCommand.register(this.dispatcher);
@@ -203,12 +203,14 @@
          var3.skip();
       }
 
       var1.getServer().getProfiler().push(var2);
 
-      byte var18;
+      byte var19;
       try {
+         TextComponent var10000;
+         byte var18;
          try {
             int var4 = this.dispatcher.execute((StringReader)var3, var1);
             return var4;
          } catch (CommandRuntimeException var13) {
             var1.sendFailure(var13.getComponent());
@@ -232,41 +234,42 @@
                }
 
                var20.append((Component)(new TranslatableComponent("command.context.here")).withStyle(new ChatFormatting[]{ChatFormatting.RED, ChatFormatting.ITALIC}));
                var1.sendFailure(var20);
             }
+
+            var18 = 0;
+            return var18;
          } catch (Exception var15) {
-            TextComponent var10000 = new TextComponent;
-            var10000.<init>(var15.getMessage() == null ? var15.getClass().getName() : var15.getMessage());
-            TextComponent var5 = var10000;
-            if (LOGGER.isDebugEnabled()) {
-               LOGGER.error((String)"Command exception: {}", (Object)var2, (Object)var15);
-               StackTraceElement[] var6 = var15.getStackTrace();
+            var10000 = new TextComponent;
+         }
 
-               for(int var7 = 0; var7 < Math.min(var6.length, 3); ++var7) {
-                  var5.append("\n\n").append(var6[var7].getMethodName()).append("\n ").append(var6[var7].getFileName()).append(":").append(String.valueOf(var6[var7].getLineNumber()));
-               }
-            }
+         var10000.<init>(var15.getMessage() == null ? var15.getClass().getName() : var15.getMessage());
+         TextComponent var5 = var10000;
+         if (LOGGER.isDebugEnabled()) {
+            LOGGER.error((String)"Command exception: {}", (Object)var2, (Object)var15);
+            StackTraceElement[] var6 = var15.getStackTrace();
 
-            var1.sendFailure((new TranslatableComponent("command.failed")).withStyle((var1x) -> {
-               return var1x.withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, var5));
-            }));
-            if (SharedConstants.IS_RUNNING_IN_IDE) {
-               var1.sendFailure(new TextComponent(Util.describeError(var15)));
-               LOGGER.error((String)("'" + var2 + "' threw an exception"), (Throwable)var15);
+            for(int var7 = 0; var7 < Math.min(var6.length, 3); ++var7) {
+               var5.append("\n\n").append(var6[var7].getMethodName()).append("\n ").append(var6[var7].getFileName()).append(":").append(String.valueOf(var6[var7].getLineNumber()));
             }
+         }
 
-            byte var19 = 0;
-            return var19;
+         var1.sendFailure((new TranslatableComponent("command.failed")).withStyle((var1x) -> {
+            return var1x.withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, var5));
+         }));
+         if (SharedConstants.IS_RUNNING_IN_IDE) {
+            var1.sendFailure(new TextComponent(Util.describeError(var15)));
+            LOGGER.error((String)"'{}' threw an exception", (Object)var2, (Object)var15);
          }
 
-         var18 = 0;
+         var19 = 0;
       } finally {
          var1.getServer().getProfiler().pop();
       }
 
-      return var18;
+      return var19;
    }
 
    public void sendCommands(ServerPlayer var1) {
       HashMap var2 = Maps.newHashMap();
       RootCommandNode var3 = new RootCommandNode();
