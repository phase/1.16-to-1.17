--- net/minecraft/server/level/ServerPlayer.java
+++ net/minecraft/server/level/ServerPlayer.java
@@ -2,10 +2,12 @@
 
 import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfile;
 import com.mojang.datafixers.util.Either;
 import com.mojang.serialization.DataResult;
+import it.unimi.dsi.fastutil.ints.IntArrayList;
+import it.unimi.dsi.fastutil.ints.IntList;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Optional;
@@ -86,10 +88,11 @@
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.damagesource.EntityDamageSource;
 import net.minecraft.world.effect.MobEffectInstance;
 import net.minecraft.world.effect.MobEffects;
 import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.EntitySelector;
 import net.minecraft.world.entity.HumanoidArm;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.NeutralMob;
 import net.minecraft.world.entity.animal.horse.AbstractHorse;
@@ -101,11 +104,10 @@
 import net.minecraft.world.inventory.AbstractContainerMenu;
 import net.minecraft.world.inventory.ContainerListener;
 import net.minecraft.world.inventory.HorseInventoryMenu;
 import net.minecraft.world.inventory.ResultSlot;
 import net.minecraft.world.item.ComplexItem;
-import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemCooldowns;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.ServerItemCooldowns;
 import net.minecraft.world.item.WrittenBookItem;
@@ -137,11 +139,11 @@
 public class ServerPlayer extends Player implements ContainerListener {
    private static final Logger LOGGER = LogManager.getLogger();
    public ServerGamePacketListenerImpl connection;
    public final MinecraftServer server;
    public final ServerPlayerGameMode gameMode;
-   private final List<Integer> entitiesToRemove = Lists.newLinkedList();
+   private final IntList entitiesToRemove = new IntArrayList();
    private final PlayerAdvancements advancements;
    private final ServerStatsCounter stats;
    private float lastRecordedHealthAndAbsorption = Float.MIN_VALUE;
    private int lastRecordedFoodLevel = Integer.MIN_VALUE;
    private int lastRecordedAirLevel = Integer.MIN_VALUE;
@@ -176,15 +178,14 @@
    private int containerCounter;
    public boolean ignoreSlotUpdateHack;
    public int latency;
    public boolean wonGame;
 
-   public ServerPlayer(MinecraftServer var1, ServerLevel var2, GameProfile var3, ServerPlayerGameMode var4) {
+   public ServerPlayer(MinecraftServer var1, ServerLevel var2, GameProfile var3) {
       super(var2, var2.getSharedSpawnPos(), var2.getSharedSpawnAngle(), var3);
       this.respawnDimension = Level.OVERWORLD;
-      var4.player = this;
-      this.gameMode = var4;
+      this.gameMode = var1.createGameModeForPlayer(this);
       this.server = var1;
       this.stats = var1.getPlayerList().getPlayerStats(this);
       this.advancements = var1.getPlayerList().getPlayerAdvancements(this);
       this.maxUpStep = 1.0F;
       this.fudgeSpawnLocation(var2);
@@ -223,11 +224,11 @@
             }
          }
       } else {
          this.moveTo(var2, 0.0F, 0.0F);
 
-         while(!var1.noCollision(this) && this.getY() < 255.0D) {
+         while(!var1.noCollision(this) && this.getY() < (double)(var1.getMaxBuildHeight() - 1)) {
             this.setPos(this.getX(), this.getY() + 1.0D, this.getZ());
          }
       }
 
    }
@@ -236,18 +237,10 @@
       return var1 <= 16 ? var1 - 1 : 17;
    }
 
    public void readAdditionalSaveData(CompoundTag var1) {
       super.readAdditionalSaveData(var1);
-      if (var1.contains("playerGameType", 99)) {
-         if (this.getServer().getForceGameType()) {
-            this.gameMode.setGameModeForPlayer(this.getServer().getDefaultGameType(), GameType.NOT_SET);
-         } else {
-            this.gameMode.setGameModeForPlayer(GameType.byId(var1.getInt("playerGameType")), var1.contains("previousPlayerGameType", 3) ? GameType.byId(var1.getInt("previousPlayerGameType")) : GameType.NOT_SET);
-         }
-      }
-
       if (var1.contains("enteredNetherPosition", 10)) {
          CompoundTag var2 = var1.getCompound("enteredNetherPosition");
          this.enteredNetherPosition = new Vec3(var2.getDouble("x"), var2.getDouble("y"), var2.getDouble("z"));
       }
 
@@ -274,12 +267,11 @@
 
    }
 
    public void addAdditionalSaveData(CompoundTag var1) {
       super.addAdditionalSaveData(var1);
-      var1.putInt("playerGameType", this.gameMode.getGameModeForPlayer().getId());
-      var1.putInt("previousPlayerGameType", this.gameMode.getPreviousGameModeForPlayer().getId());
+      this.storeGameTypes(var1);
       var1.putBoolean("seenCredits", this.seenCredits);
       if (this.enteredNetherPosition != null) {
          CompoundTag var2 = new CompoundTag();
          var2.putDouble("x", this.enteredNetherPosition.x);
          var2.putDouble("y", this.enteredNetherPosition.y);
@@ -287,11 +279,11 @@
          var1.put("enteredNetherPosition", var2);
       }
 
       Entity var6 = this.getRootVehicle();
       Entity var3 = this.getVehicle();
-      if (var3 != null && var6 != this && var6.hasOnePlayerPassenger()) {
+      if (var3 != null && var6 != this && var6.hasExactlyOnePlayerPassenger()) {
          CompoundTag var4 = new CompoundTag();
          CompoundTag var5 = new CompoundTag();
          var6.save(var5);
          var4.putUUID("Attach", var3.getUUID());
          var4.put("Entity", var5);
@@ -371,28 +363,19 @@
       if (!this.level.isClientSide && !this.containerMenu.stillValid(this)) {
          this.closeContainer();
          this.containerMenu = this.inventoryMenu;
       }
 
-      while(!this.entitiesToRemove.isEmpty()) {
-         int var1 = Math.min(this.entitiesToRemove.size(), Integer.MAX_VALUE);
-         int[] var2 = new int[var1];
-         Iterator var3 = this.entitiesToRemove.iterator();
-         int var4 = 0;
-
-         while(var3.hasNext() && var4 < var1) {
-            var2[var4++] = (Integer)var3.next();
-            var3.remove();
-         }
-
-         this.connection.send(new ClientboundRemoveEntitiesPacket(var2));
+      if (!this.entitiesToRemove.isEmpty()) {
+         this.connection.send(new ClientboundRemoveEntitiesPacket(this.entitiesToRemove.toIntArray()));
+         this.entitiesToRemove.clear();
       }
 
-      Entity var5 = this.getCamera();
-      if (var5 != this) {
-         if (var5.isAlive()) {
-            this.absMoveTo(var5.getX(), var5.getY(), var5.getZ(), var5.yRot, var5.xRot);
+      Entity var1 = this.getCamera();
+      if (var1 != this) {
+         if (var1.isAlive()) {
+            this.absMoveTo(var1.getX(), var1.getY(), var1.getZ(), var1.yRot, var1.xRot);
             this.getLevel().getChunkSource().move(this);
             if (this.wantsToStopRiding()) {
                this.setCamera(this);
             }
          } else {
@@ -412,12 +395,12 @@
       try {
          if (!this.isSpectator() || this.level.hasChunkAt(this.blockPosition())) {
             super.tick();
          }
 
-         for(int var1 = 0; var1 < this.inventory.getContainerSize(); ++var1) {
-            ItemStack var5 = this.inventory.getItem(var1);
+         for(int var1 = 0; var1 < this.getInventory().getContainerSize(); ++var1) {
+            ItemStack var5 = this.getInventory().getItem(var1);
             if (var5.getItem().isComplex()) {
                Packet var6 = ((ComplexItem)var5.getItem()).getUpdatePacket(var5, this.level, this);
                if (var6 != null) {
                   this.connection.send(var6);
                }
@@ -540,11 +523,11 @@
       this.getCombatTracker().recheckStatus();
    }
 
    private void tellNeutralMobsThatIDied() {
       AABB var1 = (new AABB(this.blockPosition())).inflate(32.0D, 10.0D, 32.0D);
-      this.level.getLoadedEntitiesOfClass(Mob.class, var1).stream().filter((var0) -> {
+      this.level.getEntitiesOfClass(Mob.class, var1, EntitySelector.NO_SPECTATORS).stream().filter((var0) -> {
          return var0 instanceof NeutralMob;
       }).forEach((var1x) -> {
          ((NeutralMob)var1x).playerDied(this);
       });
    }
@@ -632,11 +615,11 @@
       this.isChangingDimension = true;
       ServerLevel var2 = this.getLevel();
       ResourceKey var3 = var2.dimension();
       if (var3 == Level.END && var1.dimension() == Level.OVERWORLD) {
          this.unRide();
-         this.getLevel().removePlayerImmediately(this);
+         this.getLevel().removePlayerImmediately(this, Entity.RemovalReason.CHANGED_DIMENSION);
          if (!this.wonGame) {
             this.wonGame = true;
             this.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.WIN_GAME, this.seenCredits ? 0.0F : 1.0F));
             this.seenCredits = true;
          }
@@ -646,12 +629,12 @@
          LevelData var4 = var1.getLevelData();
          this.connection.send(new ClientboundRespawnPacket(var1.dimensionType(), var1.dimension(), BiomeManager.obfuscateSeed(var1.getSeed()), this.gameMode.getGameModeForPlayer(), this.gameMode.getPreviousGameModeForPlayer(), var1.isDebug(), var1.isFlat(), true));
          this.connection.send(new ClientboundChangeDifficultyPacket(var4.getDifficulty(), var4.isDifficultyLocked()));
          PlayerList var5 = this.server.getPlayerList();
          var5.sendPlayerPermissionLevel(this);
-         var2.removePlayerImmediately(this);
-         this.removed = false;
+         var2.removePlayerImmediately(this, Entity.RemovalReason.CHANGED_DIMENSION);
+         this.unsetRemoved();
          PortalInfo var6 = this.findDimensionEntryPoint(var1);
          if (var6 != null) {
             var2.getProfiler().push("moving");
             if (var3 == Level.OVERWORLD && var1.dimension() == Level.NETHER) {
                this.enteredNetherPosition = this.position();
@@ -665,12 +648,11 @@
             var1.addDuringPortalTeleport(this);
             this.setRot(var6.yRot, var6.xRot);
             this.moveTo(var6.pos.x, var6.pos.y, var6.pos.z);
             var2.getProfiler().pop();
             this.triggerDimensionChangeTriggers(var2);
-            this.gameMode.setLevel(var1);
-            this.connection.send(new ClientboundPlayerAbilitiesPacket(this.abilities));
+            this.connection.send(new ClientboundPlayerAbilitiesPacket(this.getAbilities()));
             var5.sendLevelInfo(this, var1);
             var5.sendAllPlayerInfo(this);
             Iterator var7 = this.getActiveEffects().iterator();
 
             while(var7.hasNext()) {
@@ -782,10 +764,14 @@
 
                Either var9 = super.startSleepInBed(var1).ifRight((var1x) -> {
                   this.awardStat(Stats.SLEEP_IN_BED);
                   CriteriaTriggers.SLEPT_IN_BED.trigger(this);
                });
+               if (!this.getLevel().canSleepThroughNights()) {
+                  this.displayClientMessage(new TranslatableComponent("sleep.not_possible"), true);
+               }
+
                ((ServerLevel)this.level).updateSleepingPlayerList();
                return var9;
             }
          }
       } else {
@@ -847,11 +833,11 @@
       }
 
    }
 
    public boolean isInvulnerableTo(DamageSource var1) {
-      return super.isInvulnerableTo(var1) || this.isChangingDimension() || this.abilities.invulnerable && var1 == DamageSource.WITHER;
+      return super.isInvulnerableTo(var1) || this.isChangingDimension() || this.getAbilities().invulnerable && var1 == DamageSource.WITHER;
    }
 
    protected void checkFallDamage(double var1, boolean var3, BlockState var4, BlockPos var5) {
    }
 
@@ -885,11 +871,11 @@
          if (this.containerMenu != this.inventoryMenu) {
             this.closeContainer();
          }
 
          this.nextContainerCounter();
-         AbstractContainerMenu var2 = var1.createMenu(this.containerCounter, this.inventory, this);
+         AbstractContainerMenu var2 = var1.createMenu(this.containerCounter, this.getInventory(), this);
          if (var2 == null) {
             if (this.isSpectator()) {
                this.displayClientMessage((new TranslatableComponent("container.spectatorCantOpen")).withStyle(ChatFormatting.RED), true);
             }
 
@@ -912,17 +898,16 @@
          this.closeContainer();
       }
 
       this.nextContainerCounter();
       this.connection.send(new ClientboundHorseScreenOpenPacket(this.containerCounter, var2.getContainerSize(), var1.getId()));
-      this.containerMenu = new HorseInventoryMenu(this.containerCounter, this.inventory, var2, var1);
+      this.containerMenu = new HorseInventoryMenu(this.containerCounter, this.getInventory(), var2, var1);
       this.containerMenu.addSlotListener(this);
    }
 
    public void openItemGui(ItemStack var1, InteractionHand var2) {
-      Item var3 = var1.getItem();
-      if (var3 == Items.WRITTEN_BOOK) {
+      if (var1.is(Items.WRITTEN_BOOK)) {
          if (WrittenBookItem.resolveBookComponents(var1, this.createCommandSourceStack(), this)) {
             this.containerMenu.broadcastChanges();
          }
 
          this.connection.send(new ClientboundOpenBookPacket(var2));
@@ -936,11 +921,11 @@
    }
 
    public void slotChanged(AbstractContainerMenu var1, int var2, ItemStack var3) {
       if (!(var1.getSlot(var2) instanceof ResultSlot)) {
          if (var1 == this.inventoryMenu) {
-            CriteriaTriggers.INVENTORY_CHANGED.trigger(this, this.inventory, var3);
+            CriteriaTriggers.INVENTORY_CHANGED.trigger(this, this.getInventory(), var3);
          }
 
          if (!this.ignoreSlotUpdateHack) {
             this.connection.send(new ClientboundContainerSetSlotPacket(var1.containerId, var2, var3));
          }
@@ -951,11 +936,11 @@
       this.refreshContainer(var1, var1.getItems());
    }
 
    public void refreshContainer(AbstractContainerMenu var1, NonNullList<ItemStack> var2) {
       this.connection.send(new ClientboundContainerSetContentPacket(var1.containerId, var2));
-      this.connection.send(new ClientboundContainerSetSlotPacket(-1, -1, this.inventory.getCarried()));
+      this.connection.send(new ClientboundContainerSetSlotPacket(-1, -1, this.getInventory().getCarried()));
    }
 
    public void setContainerData(AbstractContainerMenu var1, int var2, int var3) {
       this.connection.send(new ClientboundContainerSetDataPacket(var1.containerId, var2, var3));
    }
@@ -965,11 +950,11 @@
       this.doCloseContainer();
    }
 
    public void broadcastCarriedItem() {
       if (!this.ignoreSlotUpdateHack) {
-         this.connection.send(new ClientboundContainerSetSlotPacket(-1, -1, this.inventory.getCarried()));
+         this.connection.send(new ClientboundContainerSetSlotPacket(-1, -1, this.getInventory().getCarried()));
       }
    }
 
    public void doCloseContainer() {
       this.containerMenu.removed(this);
@@ -1069,21 +1054,22 @@
       super.lookAt(var1, var4);
       this.connection.send(new ClientboundPlayerLookAtPacket(var1, var2, var3));
    }
 
    public void restoreFrom(ServerPlayer var1, boolean var2) {
+      this.gameMode.setGameModeForPlayer(var1.gameMode.getGameModeForPlayer(), var1.gameMode.getPreviousGameModeForPlayer());
       if (var2) {
-         this.inventory.replaceWith(var1.inventory);
+         this.getInventory().replaceWith(var1.getInventory());
          this.setHealth(var1.getHealth());
          this.foodData = var1.foodData;
          this.experienceLevel = var1.experienceLevel;
          this.totalExperience = var1.totalExperience;
          this.experienceProgress = var1.experienceProgress;
          this.setScore(var1.getScore());
          this.portalEntrancePos = var1.portalEntrancePos;
       } else if (this.level.getGameRules().getBoolean(GameRules.RULE_KEEPINVENTORY) || var1.isSpectator()) {
-         this.inventory.replaceWith(var1.inventory);
+         this.getInventory().replaceWith(var1.getInventory());
          this.experienceLevel = var1.experienceLevel;
          this.totalExperience = var1.totalExperience;
          this.experienceProgress = var1.experienceProgress;
          this.setScore(var1.getScore());
       }
@@ -1146,31 +1132,35 @@
       this.getLevel().getChunkSource().broadcastAndSend(this, new ClientboundAnimatePacket(var1, 5));
    }
 
    public void onUpdateAbilities() {
       if (this.connection != null) {
-         this.connection.send(new ClientboundPlayerAbilitiesPacket(this.abilities));
+         this.connection.send(new ClientboundPlayerAbilitiesPacket(this.getAbilities()));
          this.updateInvisibilityStatus();
       }
    }
 
    public ServerLevel getLevel() {
       return (ServerLevel)this.level;
    }
 
-   public void setGameMode(GameType var1) {
-      this.gameMode.setGameModeForPlayer(var1);
-      this.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.CHANGE_GAME_MODE, (float)var1.getId()));
-      if (var1 == GameType.SPECTATOR) {
-         this.removeEntitiesOnShoulder();
-         this.stopRiding();
+   public boolean setGameMode(GameType var1) {
+      if (!this.gameMode.changeGameModeForPlayer(var1)) {
+         return false;
       } else {
-         this.setCamera(this);
-      }
+         this.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.CHANGE_GAME_MODE, (float)var1.getId()));
+         if (var1 == GameType.SPECTATOR) {
+            this.removeEntitiesOnShoulder();
+            this.stopRiding();
+         } else {
+            this.setCamera(this);
+         }
 
-      this.onUpdateAbilities();
-      this.updateEffectVisibility();
+         this.onUpdateAbilities();
+         this.updateEffectVisibility();
+         return true;
+      }
    }
 
    public boolean isSpectator() {
       return this.gameMode.getGameModeForPlayer() == GameType.SPECTATOR;
    }
@@ -1211,12 +1201,12 @@
 
    public ChatVisiblity getChatVisibility() {
       return this.chatVisibility;
    }
 
-   public void sendTexturePack(String var1, String var2) {
-      this.connection.send(new ClientboundResourcePackPacket(var1, var2));
+   public void sendTexturePack(String var1, String var2, boolean var3) {
+      this.connection.send(new ClientboundResourcePackPacket(var1, var2, var3));
    }
 
    protected int getPermissionLevel() {
       return this.server.getProfilePermissions(this.getGameProfile());
    }
@@ -1241,11 +1231,11 @@
       }
 
    }
 
    public void cancelRemoveEntity(Entity var1) {
-      this.entitiesToRemove.remove(var1.getId());
+      this.entitiesToRemove.rem(var1.getId());
    }
 
    protected void updateInvisibilityStatus() {
       if (this.isSpectator()) {
          this.removeEffectParticles();
@@ -1321,18 +1311,17 @@
          ServerLevel var10 = this.getLevel();
          LevelData var11 = var1.getLevelData();
          this.connection.send(new ClientboundRespawnPacket(var1.dimensionType(), var1.dimension(), BiomeManager.obfuscateSeed(var1.getSeed()), this.gameMode.getGameModeForPlayer(), this.gameMode.getPreviousGameModeForPlayer(), var1.isDebug(), var1.isFlat(), true));
          this.connection.send(new ClientboundChangeDifficultyPacket(var11.getDifficulty(), var11.isDifficultyLocked()));
          this.server.getPlayerList().sendPlayerPermissionLevel(this);
-         var10.removePlayerImmediately(this);
-         this.removed = false;
+         var10.removePlayerImmediately(this, Entity.RemovalReason.CHANGED_DIMENSION);
+         this.unsetRemoved();
          this.moveTo(var2, var4, var6, var8, var9);
          this.setLevel(var1);
          var1.addDuringCommandTeleport(this);
          this.triggerDimensionChangeTriggers(var10);
          this.connection.teleport(var2, var4, var6, var8, var9);
-         this.gameMode.setLevel(var1);
          this.server.getPlayerList().sendLevelInfo(this, var1);
          this.server.getPlayerList().sendAllPlayerInfo(this);
       }
 
    }
@@ -1423,6 +1412,38 @@
 
    @Nullable
    public TextFilter getTextFilter() {
       return this.textFilter;
    }
+
+   public void setLevel(ServerLevel var1) {
+      this.level = var1;
+      this.gameMode.setLevel(var1);
+   }
+
+   @Nullable
+   private static GameType readPlayerMode(@Nullable CompoundTag var0, String var1) {
+      return var0 != null && var0.contains(var1, 99) ? GameType.byId(var0.getInt(var1)) : null;
+   }
+
+   private GameType calculateGameModeForNewPlayer(@Nullable GameType var1) {
+      GameType var2 = this.server.getForcedGameType();
+      if (var2 != null) {
+         return var2;
+      } else {
+         return var1 != null ? var1 : this.server.getDefaultGameType();
+      }
+   }
+
+   public void loadGameTypes(@Nullable CompoundTag var1) {
+      this.gameMode.setGameModeForPlayer(this.calculateGameModeForNewPlayer(readPlayerMode(var1, "playerGameType")), readPlayerMode(var1, "previousPlayerGameType"));
+   }
+
+   private void storeGameTypes(CompoundTag var1) {
+      var1.putInt("playerGameType", this.gameMode.getGameModeForPlayer().getId());
+      GameType var2 = this.gameMode.getPreviousGameModeForPlayer();
+      if (var2 != null) {
+         var1.putInt("previousPlayerGameType", var2.getId());
+      }
+
+   }
 }
