--- net/minecraft/server/level/ServerChunkCache.java
+++ net/minecraft/server/level/ServerChunkCache.java
@@ -8,10 +8,11 @@
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.Executor;
 import java.util.function.BooleanSupplier;
 import java.util.function.Consumer;
@@ -21,11 +22,11 @@
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.SectionPos;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.server.level.progress.ChunkProgressListener;
-import net.minecraft.util.Mth;
+import net.minecraft.util.VisibleForDebug;
 import net.minecraft.util.profiling.ProfilerFiller;
 import net.minecraft.util.thread.BlockableEventLoop;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.ai.village.poi.PoiManager;
 import net.minecraft.world.level.BlockGetter;
@@ -37,44 +38,47 @@
 import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.chunk.ChunkGenerator;
 import net.minecraft.world.level.chunk.ChunkSource;
 import net.minecraft.world.level.chunk.ChunkStatus;
 import net.minecraft.world.level.chunk.LevelChunk;
+import net.minecraft.world.level.entity.ChunkStatusUpdateListener;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager;
 import net.minecraft.world.level.storage.DimensionDataStorage;
 import net.minecraft.world.level.storage.LevelData;
 import net.minecraft.world.level.storage.LevelStorageSource;
 
 public class ServerChunkCache extends ChunkSource {
    private static final List<ChunkStatus> CHUNK_STATUSES = ChunkStatus.getStatusList();
    private final DistanceManager distanceManager;
    private final ChunkGenerator generator;
-   private final ServerLevel level;
-   private final Thread mainThread;
-   private final ThreadedLevelLightEngine lightEngine;
+   final ServerLevel level;
+   final Thread mainThread;
+   final ThreadedLevelLightEngine lightEngine;
    private final ServerChunkCache.MainThreadExecutor mainThreadProcessor;
    public final ChunkMap chunkMap;
    private final DimensionDataStorage dataStorage;
    private long lastInhabitedUpdate;
    private boolean spawnEnemies = true;
    private boolean spawnFriendlies = true;
+   private static final int CACHE_SIZE = 4;
    private final long[] lastChunkPos = new long[4];
    private final ChunkStatus[] lastChunkStatus = new ChunkStatus[4];
    private final ChunkAccess[] lastChunk = new ChunkAccess[4];
    @Nullable
+   @VisibleForDebug
    private NaturalSpawner.SpawnState lastSpawnState;
 
-   public ServerChunkCache(ServerLevel var1, LevelStorageSource.LevelStorageAccess var2, DataFixer var3, StructureManager var4, Executor var5, ChunkGenerator var6, int var7, boolean var8, ChunkProgressListener var9, Supplier<DimensionDataStorage> var10) {
+   public ServerChunkCache(ServerLevel var1, LevelStorageSource.LevelStorageAccess var2, DataFixer var3, StructureManager var4, Executor var5, ChunkGenerator var6, int var7, boolean var8, ChunkProgressListener var9, ChunkStatusUpdateListener var10, Supplier<DimensionDataStorage> var11) {
       this.level = var1;
       this.mainThreadProcessor = new ServerChunkCache.MainThreadExecutor(var1);
       this.generator = var6;
       this.mainThread = Thread.currentThread();
-      File var11 = var2.getDimensionPath(var1.dimension());
-      File var12 = new File(var11, "data");
-      var12.mkdirs();
-      this.dataStorage = new DimensionDataStorage(var12, var3);
-      this.chunkMap = new ChunkMap(var1, var2, var3, var4, var5, this.mainThreadProcessor, this, this.getGenerator(), var9, var10, var7, var8);
+      File var12 = var2.getDimensionPath(var1.dimension());
+      File var13 = new File(var12, "data");
+      var13.mkdirs();
+      this.dataStorage = new DimensionDataStorage(var13, var3);
+      this.chunkMap = new ChunkMap(var1, var2, var3, var4, var5, this.mainThreadProcessor, this, this.getGenerator(), var9, var10, var11, var7, var8);
       this.lightEngine = this.chunkMap.getLightEngine();
       this.distanceManager = this.chunkMap.getDistanceManager();
       this.clearCache();
    }
 
@@ -124,11 +128,13 @@
             }
          }
 
          var5.incrementCounter("getChunkCacheMiss");
          CompletableFuture var10 = this.getChunkFutureMainThread(var1, var2, var3, var4);
-         this.mainThreadProcessor.managedBlock(var10::isDone);
+         ServerChunkCache.MainThreadExecutor var10000 = this.mainThreadProcessor;
+         Objects.requireNonNull(var10);
+         var10000.managedBlock(var10::isDone);
          var9 = (ChunkAccess)((Either)var10.join()).map((var0) -> {
             return var0;
          }, (var1x) -> {
             if (var4) {
                throw (IllegalStateException)Util.pauseInIde(new IllegalStateException("Chunk not there when requested: " + var1x));
@@ -182,10 +188,29 @@
       Arrays.fill(this.lastChunkPos, ChunkPos.INVALID_CHUNK_POS);
       Arrays.fill(this.lastChunkStatus, (Object)null);
       Arrays.fill(this.lastChunk, (Object)null);
    }
 
+   public CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> getChunkFuture(int var1, int var2, ChunkStatus var3, boolean var4) {
+      boolean var5 = Thread.currentThread() == this.mainThread;
+      CompletableFuture var6;
+      if (var5) {
+         var6 = this.getChunkFutureMainThread(var1, var2, var3, var4);
+         ServerChunkCache.MainThreadExecutor var10000 = this.mainThreadProcessor;
+         Objects.requireNonNull(var6);
+         var10000.managedBlock(var6::isDone);
+      } else {
+         var6 = CompletableFuture.supplyAsync(() -> {
+            return this.getChunkFutureMainThread(var1, var2, var3, var4);
+         }, this.mainThreadProcessor).thenCompose((var0) -> {
+            return var0;
+         });
+      }
+
+      return var6;
+   }
+
    private CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> getChunkFutureMainThread(int var1, int var2, ChunkStatus var3, boolean var4) {
       ChunkPos var5 = new ChunkPos(var1, var2);
       long var6 = var5.toLong();
       int var8 = 33 + ChunkStatus.getDistance(var3);
       ChunkHolder var9 = this.getVisibleChunkIfPresent(var6);
@@ -246,35 +271,25 @@
 
    public boolean pollTask() {
       return this.mainThreadProcessor.pollTask();
    }
 
-   private boolean runDistanceManagerUpdates() {
+   boolean runDistanceManagerUpdates() {
       boolean var1 = this.distanceManager.runAllUpdates(this.chunkMap);
       boolean var2 = this.chunkMap.promoteChunkMap();
       if (!var1 && !var2) {
          return false;
       } else {
          this.clearCache();
          return true;
       }
    }
 
-   public boolean isEntityTickingChunk(Entity var1) {
-      long var2 = ChunkPos.asLong(Mth.floor(var1.getX()) >> 4, Mth.floor(var1.getZ()) >> 4);
-      return this.checkChunkFuture(var2, ChunkHolder::getEntityTickingChunkFuture);
+   public boolean isPositionTicking(long var1) {
+      return this.checkChunkFuture(var1, ChunkHolder::getTickingChunkFuture);
    }
 
-   public boolean isEntityTickingChunk(ChunkPos var1) {
-      return this.checkChunkFuture(var1.toLong(), ChunkHolder::getEntityTickingChunkFuture);
-   }
-
-   public boolean isTickingChunk(BlockPos var1) {
-      long var2 = ChunkPos.asLong(var1.getX() >> 4, var1.getZ() >> 4);
-      return this.checkChunkFuture(var2, ChunkHolder::getTickingChunkFuture);
-   }
-
    private boolean checkChunkFuture(long var1, Function<ChunkHolder, CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>>> var3) {
       ChunkHolder var4 = this.getVisibleChunkIfPresent(var1);
       if (var4 == null) {
          return false;
       } else {
@@ -326,24 +341,21 @@
          Collections.shuffle(var12);
          var12.forEach((var7x) -> {
             Optional var8x = ((Either)var7x.getTickingChunkFuture().getNow(ChunkHolder.UNLOADED_LEVEL_CHUNK)).left();
             if (var8x.isPresent()) {
                this.level.getProfiler().push("broadcast");
-               var7x.broadcastChanges((LevelChunk)var8x.get());
+               LevelChunk var9x = (LevelChunk)var8x.get();
+               var7x.broadcastChanges(var9x);
                this.level.getProfiler().pop();
-               Optional var9x = ((Either)var7x.getEntityTickingChunkFuture().getNow(ChunkHolder.UNLOADED_LEVEL_CHUNK)).left();
-               if (var9x.isPresent()) {
-                  LevelChunk var10 = (LevelChunk)var9x.get();
-                  ChunkPos var11x = var7x.getPos();
-                  if (!this.chunkMap.noPlayersCloseForSpawning(var11x)) {
-                     var10.setInhabitedTime(var10.getInhabitedTime() + var3);
-                     if (var7 && (this.spawnEnemies || this.spawnFriendlies) && this.level.getWorldBorder().isWithinBounds(var10.getPos())) {
-                        NaturalSpawner.spawnForChunk(this.level, var10, var11, this.spawnFriendlies, this.spawnEnemies, var9);
-                     }
-
-                     this.level.tickChunk(var10, var8);
+               ChunkPos var10 = var9x.getPos();
+               if (this.level.isPositionEntityTicking(var10) && !this.chunkMap.noPlayersCloseForSpawning(var10)) {
+                  var9x.setInhabitedTime(var9x.getInhabitedTime() + var3);
+                  if (var7 && (this.spawnEnemies || this.spawnFriendlies) && this.level.getWorldBorder().isWithinBounds(var10)) {
+                     NaturalSpawner.spawnForChunk(this.level, var9x, var11, this.spawnFriendlies, this.spawnEnemies, var9);
                   }
+
+                  this.level.tickChunk(var9x, var8);
                }
             }
          });
          this.level.getProfiler().push("customSpawners");
          if (var7) {
@@ -364,11 +376,11 @@
       }
 
    }
 
    public String gatherStats() {
-      return "ServerChunkCache: " + this.getLoadedChunksCount();
+      return Integer.toString(this.getLoadedChunksCount());
    }
 
    @VisibleForTesting
    public int getPendingTasksCount() {
       return this.mainThreadProcessor.getPendingTasksCount();
@@ -381,12 +393,12 @@
    public int getLoadedChunksCount() {
       return this.chunkMap.size();
    }
 
    public void blockChanged(BlockPos var1) {
-      int var2 = var1.getX() >> 4;
-      int var3 = var1.getZ() >> 4;
+      int var2 = SectionPos.blockToSectionCoord(var1.getX());
+      int var3 = SectionPos.blockToSectionCoord(var1.getZ());
       ChunkHolder var4 = this.getVisibleChunkIfPresent(ChunkPos.asLong(var2, var3));
       if (var4 != null) {
          var4.blockChanged(var1);
       }
 
@@ -441,25 +453,30 @@
    public void setSpawnSettings(boolean var1, boolean var2) {
       this.spawnEnemies = var1;
       this.spawnFriendlies = var2;
    }
 
+   public String getChunkDebugData(ChunkPos var1) {
+      return this.chunkMap.getChunkDebugData(var1);
+   }
+
    public DimensionDataStorage getDataStorage() {
       return this.dataStorage;
    }
 
    public PoiManager getPoiManager() {
       return this.chunkMap.getPoiManager();
    }
 
    @Nullable
+   @VisibleForDebug
    public NaturalSpawner.SpawnState getLastSpawnState() {
       return this.lastSpawnState;
    }
 
-   final class MainThreadExecutor extends BlockableEventLoop<Runnable> {
-      private MainThreadExecutor(Level var2) {
+   private final class MainThreadExecutor extends BlockableEventLoop<Runnable> {
+      MainThreadExecutor(Level var2) {
          super("Chunk source main thread executor for " + var2.dimension().location());
       }
 
       protected Runnable wrapRunnable(Runnable var1) {
          return var1;
