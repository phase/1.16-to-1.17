--- net/minecraft/server/level/ThreadedLevelLightEngine.java
+++ net/minecraft/server/level/ThreadedLevelLightEngine.java
@@ -50,11 +50,11 @@
       throw (UnsupportedOperationException)Util.pauseInIde(new UnsupportedOperationException("Ran authomatically on a different thread!"));
    }
 
    public void checkBlock(BlockPos var1) {
       BlockPos var2 = var1.immutable();
-      this.addTask(var1.getX() >> 4, var1.getZ() >> 4, ThreadedLevelLightEngine.TaskType.POST_UPDATE, Util.name(() -> {
+      this.addTask(SectionPos.blockToSectionCoord(var1.getX()), SectionPos.blockToSectionCoord(var1.getZ()), ThreadedLevelLightEngine.TaskType.POST_UPDATE, Util.name(() -> {
          super.checkBlock(var2);
       }, () -> {
          return "checkBlock " + var2;
       }));
    }
@@ -65,16 +65,16 @@
       }, ThreadedLevelLightEngine.TaskType.PRE_UPDATE, Util.name(() -> {
          super.retainData(var1, false);
          super.enableLightSources(var1, false);
 
          int var2;
-         for(var2 = -1; var2 < 17; ++var2) {
+         for(var2 = this.getMinLightSection(); var2 < this.getMaxLightSection(); ++var2) {
             super.queueSectionData(LightLayer.BLOCK, SectionPos.of(var1, var2), (DataLayer)null, true);
             super.queueSectionData(LightLayer.SKY, SectionPos.of(var1, var2), (DataLayer)null, true);
          }
 
-         for(var2 = 0; var2 < 16; ++var2) {
+         for(var2 = this.levelHeightAccessor.getMinSection(); var2 < this.levelHeightAccessor.getMaxSection(); ++var2) {
             super.updateSectionStatus(SectionPos.of(var1, var2), true);
          }
 
       }, () -> {
          return "updateChunkStatus " + var1 + " " + true;
@@ -137,14 +137,15 @@
       ChunkPos var3 = var1.getPos();
       var1.setLightCorrect(false);
       this.addTask(var3.x, var3.z, ThreadedLevelLightEngine.TaskType.PRE_UPDATE, Util.name(() -> {
          LevelChunkSection[] var4 = var1.getSections();
 
-         for(int var5 = 0; var5 < 16; ++var5) {
+         for(int var5 = 0; var5 < var1.getSectionsCount(); ++var5) {
             LevelChunkSection var6 = var4[var5];
             if (!LevelChunkSection.isEmpty(var6)) {
-               super.updateSectionStatus(SectionPos.of(var3, var5), false);
+               int var7 = this.levelHeightAccessor.getSectionYFromSectionIndex(var5);
+               super.updateSectionStatus(SectionPos.of(var3, var7), false);
             }
          }
 
          super.enableLightSources(var3, true);
          if (!var2) {
