--- net/minecraft/server/packs/VanillaPackResources.java
+++ net/minecraft/server/packs/VanillaPackResources.java
@@ -5,10 +5,11 @@
 import com.google.common.collect.Sets;
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStream;
+import java.io.UncheckedIOException;
 import java.net.URI;
 import java.net.URISyntaxException;
 import java.net.URL;
 import java.nio.file.FileSystem;
 import java.nio.file.FileSystemNotFoundException;
@@ -29,14 +30,17 @@
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
 import net.minecraft.Util;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.packs.metadata.MetadataSectionSerializer;
+import net.minecraft.server.packs.metadata.pack.PackMetadataSection;
+import net.minecraft.server.packs.resources.Resource;
+import net.minecraft.server.packs.resources.ResourceProvider;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class VanillaPackResources implements PackResources {
+public class VanillaPackResources implements PackResources, ResourceProvider {
    public static Path generatedDir;
    private static final Logger LOGGER = LogManager.getLogger();
    public static Class<?> clientObject;
    private static final Map<PackType, FileSystem> JAR_FILESYSTEM_BY_TYPE = (Map)Util.make(Maps.newHashMap(), (var0) -> {
       Class var1 = VanillaPackResources.class;
@@ -65,14 +69,16 @@
             }
          }
 
       }
    });
+   public final PackMetadataSection packMetadata;
    public final Set<String> namespaces;
 
-   public VanillaPackResources(String... var1) {
-      this.namespaces = ImmutableSet.copyOf((Object[])var1);
+   public VanillaPackResources(PackMetadataSection var1, String... var2) {
+      this.packMetadata = var1;
+      this.namespaces = ImmutableSet.copyOf((Object[])var2);
    }
 
    public InputStream getRootResource(String var1) throws IOException {
       if (!var1.contains("/") && !var1.contains("\\")) {
          if (generatedDir != null) {
@@ -242,39 +248,89 @@
    public <T> T getMetadataSection(MetadataSectionSerializer<T> var1) throws IOException {
       try {
          InputStream var2 = this.getRootResource("pack.mcmeta");
          Throwable var3 = null;
 
-         Object var4;
+         Object var5;
          try {
-            var4 = AbstractPackResources.getMetadataFromStream(var1, var2);
-         } catch (Throwable var14) {
-            var3 = var14;
-            throw var14;
+            if (var2 == null) {
+               return var1 == PackMetadataSection.SERIALIZER ? this.packMetadata : null;
+            }
+
+            Object var4 = AbstractPackResources.getMetadataFromStream(var1, var2);
+            if (var4 == null) {
+               return var1 == PackMetadataSection.SERIALIZER ? this.packMetadata : null;
+            }
+
+            var5 = var4;
+         } catch (Throwable var16) {
+            var3 = var16;
+            throw var16;
          } finally {
             if (var2 != null) {
                if (var3 != null) {
                   try {
                      var2.close();
-                  } catch (Throwable var13) {
-                     var3.addSuppressed(var13);
+                  } catch (Throwable var15) {
+                     var3.addSuppressed(var15);
                   }
                } else {
                   var2.close();
                }
             }
 
          }
 
-         return var4;
-      } catch (FileNotFoundException | RuntimeException var16) {
-         return null;
+         return var5;
+      } catch (FileNotFoundException | RuntimeException var18) {
+         return var1 == PackMetadataSection.SERIALIZER ? this.packMetadata : null;
       }
    }
 
    public String getName() {
       return "Default";
    }
 
    public void close() {
    }
+
+   public Resource getResource(final ResourceLocation var1) throws IOException {
+      return new Resource() {
+         @Nullable
+         InputStream inputStream;
+
+         public void close() throws IOException {
+            if (this.inputStream != null) {
+               this.inputStream.close();
+            }
+
+         }
+
+         public ResourceLocation getLocation() {
+            return var1;
+         }
+
+         public InputStream getInputStream() {
+            try {
+               this.inputStream = VanillaPackResources.this.getResource(PackType.CLIENT_RESOURCES, var1);
+            } catch (IOException var2) {
+               throw new UncheckedIOException("Could not get client resource from vanilla pack", var2);
+            }
+
+            return this.inputStream;
+         }
+
+         public boolean hasMetadata() {
+            return false;
+         }
+
+         @Nullable
+         public <T> T getMetadata(MetadataSectionSerializer<T> var1x) {
+            return null;
+         }
+
+         public String getSourceName() {
+            return var1.toString();
+         }
+      };
+   }
 }
