--- net/minecraft/server/packs/resources/FallbackResourceManager.java
+++ net/minecraft/server/packs/resources/FallbackResourceManager.java
@@ -1,7 +1,8 @@
 package net.minecraft.server.packs.resources;
 
+import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Lists;
 import java.io.ByteArrayOutputStream;
 import java.io.FileNotFoundException;
 import java.io.FilterInputStream;
 import java.io.IOException;
@@ -10,19 +11,21 @@
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Set;
 import java.util.function.Predicate;
+import java.util.stream.Stream;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.packs.PackResources;
 import net.minecraft.server.packs.PackType;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class FallbackResourceManager implements ResourceManager {
-   private static final Logger LOGGER = LogManager.getLogger();
+   static final Logger LOGGER = LogManager.getLogger();
    protected final List<PackResources> fallbacks = Lists.newArrayList();
    private final PackType type;
    private final String namespace;
 
    public FallbackResourceManager(PackType var1, String var2) {
@@ -32,10 +35,14 @@
 
    public void add(PackResources var1) {
       this.fallbacks.add(var1);
    }
 
+   public Set<String> getNamespaces() {
+      return ImmutableSet.of(this.namespace);
+   }
+
    public Resource getResource(ResourceLocation var1) throws IOException {
       this.validateLocation(var1);
       PackResources var2 = null;
       ResourceLocation var3 = getMetadataLocation(var1);
 
@@ -56,10 +63,25 @@
       }
 
       throw new FileNotFoundException(var1.toString());
    }
 
+   public boolean hasResource(ResourceLocation var1) {
+      if (!this.isValidLocation(var1)) {
+         return false;
+      } else {
+         for(int var2 = this.fallbacks.size() - 1; var2 >= 0; --var2) {
+            PackResources var3 = (PackResources)this.fallbacks.get(var2);
+            if (var3.hasResource(this.type, var1)) {
+               return true;
+            }
+         }
+
+         return false;
+      }
+   }
+
    protected InputStream getWrappedResource(ResourceLocation var1, PackResources var2) throws IOException {
       InputStream var3 = var2.getResource(this.type, var1);
       return (InputStream)(LOGGER.isDebugEnabled() ? new FallbackResourceManager.LeakedResourceWarningInputStream(var3, var1, var2.getName()) : var3);
    }
 
@@ -105,10 +127,14 @@
 
       Collections.sort(var3);
       return var3;
    }
 
+   public Stream<PackResources> listPacks() {
+      return this.fallbacks.stream();
+   }
+
    static ResourceLocation getMetadataLocation(ResourceLocation var0) {
       return new ResourceLocation(var0.getNamespace(), var0.getPath() + ".mcmeta");
    }
 
    static class LeakedResourceWarningInputStream extends FilterInputStream {
