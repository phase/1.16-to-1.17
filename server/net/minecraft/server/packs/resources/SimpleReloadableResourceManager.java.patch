--- net/minecraft/server/packs/resources/SimpleReloadableResourceManager.java
+++ net/minecraft/server/packs/resources/SimpleReloadableResourceManager.java
@@ -15,10 +15,11 @@
 import java.util.Set;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.Executor;
 import java.util.function.Predicate;
 import java.util.stream.Collectors;
+import java.util.stream.Stream;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.packs.PackResources;
 import net.minecraft.server.packs.PackType;
 import net.minecraft.util.Unit;
 import org.apache.logging.log4j.LogManager;
@@ -26,11 +27,10 @@
 
 public class SimpleReloadableResourceManager implements ReloadableResourceManager {
    private static final Logger LOGGER = LogManager.getLogger();
    private final Map<String, FallbackResourceManager> namespacedPacks = Maps.newHashMap();
    private final List<PreparableReloadListener> listeners = Lists.newArrayList();
-   private final List<PreparableReloadListener> recentlyRegistered = Lists.newArrayList();
    private final Set<String> namespaces = Sets.newLinkedHashSet();
    private final List<PackResources> packs = Lists.newArrayList();
    private final PackType type;
 
    public SimpleReloadableResourceManager(PackType var1) {
@@ -51,19 +51,28 @@
          }
       }
 
    }
 
+   public Set<String> getNamespaces() {
+      return this.namespaces;
+   }
+
    public Resource getResource(ResourceLocation var1) throws IOException {
       ResourceManager var2 = (ResourceManager)this.namespacedPacks.get(var1.getNamespace());
       if (var2 != null) {
          return var2.getResource(var1);
       } else {
          throw new FileNotFoundException(var1.toString());
       }
    }
 
+   public boolean hasResource(ResourceLocation var1) {
+      ResourceManager var2 = (ResourceManager)this.namespacedPacks.get(var1.getNamespace());
+      return var2 != null ? var2.hasResource(var1) : false;
+   }
+
    public List<Resource> getResources(ResourceLocation var1) throws IOException {
       ResourceManager var2 = (ResourceManager)this.namespacedPacks.get(var1.getNamespace());
       if (var2 != null) {
          return var2.getResources(var1);
       } else {
@@ -96,30 +105,17 @@
       this.clear();
    }
 
    public void registerReloadListener(PreparableReloadListener var1) {
       this.listeners.add(var1);
-      this.recentlyRegistered.add(var1);
    }
 
-   protected ReloadInstance createReload(Executor var1, Executor var2, List<PreparableReloadListener> var3, CompletableFuture<Unit> var4) {
-      Object var5;
-      if (LOGGER.isDebugEnabled()) {
-         var5 = new ProfiledReloadInstance(this, Lists.newArrayList((Iterable)var3), var1, var2, var4);
-      } else {
-         var5 = SimpleReloadInstance.of(this, Lists.newArrayList((Iterable)var3), var1, var2, var4);
-      }
-
-      this.recentlyRegistered.clear();
-      return (ReloadInstance)var5;
-   }
-
-   public ReloadInstance createFullReload(Executor var1, Executor var2, CompletableFuture<Unit> var3, List<PackResources> var4) {
-      this.clear();
+   public ReloadInstance createReload(Executor var1, Executor var2, CompletableFuture<Unit> var3, List<PackResources> var4) {
       LOGGER.info("Reloading ResourceManager: {}", () -> {
          return (String)var4.stream().map(PackResources::getName).collect(Collectors.joining(", "));
       });
+      this.clear();
       Iterator var5 = var4.iterator();
 
       while(var5.hasNext()) {
          PackResources var6 = (PackResources)var5.next();
 
@@ -129,13 +125,17 @@
             LOGGER.error((String)"Failed to add resource pack {}", (Object)var6.getName(), (Object)var8);
             return new SimpleReloadableResourceManager.FailingReloadInstance(new SimpleReloadableResourceManager.ResourcePackLoadingFailure(var6, var8));
          }
       }
 
-      return this.createReload(var1, var2, this.listeners, var3);
+      return (ReloadInstance)(LOGGER.isDebugEnabled() ? new ProfiledReloadInstance(this, Lists.newArrayList((Iterable)this.listeners), var1, var2, var3) : SimpleReloadInstance.of(this, Lists.newArrayList((Iterable)this.listeners), var1, var2, var3));
    }
 
+   public Stream<PackResources> listPacks() {
+      return this.packs.stream();
+   }
+
    static class FailingReloadInstance implements ReloadInstance {
       private final SimpleReloadableResourceManager.ResourcePackLoadingFailure exception;
       private final CompletableFuture<Unit> failedFuture;
 
       public FailingReloadInstance(SimpleReloadableResourceManager.ResourcePackLoadingFailure var1) {
@@ -145,16 +145,32 @@
       }
 
       public CompletableFuture<Unit> done() {
          return this.failedFuture;
       }
+
+      public float getActualProgress() {
+         return 0.0F;
+      }
+
+      public boolean isDone() {
+         return true;
+      }
+
+      public void checkExceptions() {
+         throw this.exception;
+      }
    }
 
    public static class ResourcePackLoadingFailure extends RuntimeException {
       private final PackResources pack;
 
       public ResourcePackLoadingFailure(PackResources var1, Throwable var2) {
          super(var1.getName(), var2);
          this.pack = var1;
       }
+
+      public PackResources getPack() {
+         return this.pack;
+      }
    }
 }
