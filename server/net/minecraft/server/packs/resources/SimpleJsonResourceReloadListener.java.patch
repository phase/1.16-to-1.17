--- net/minecraft/server/packs/resources/SimpleJsonResourceReloadListener.java
+++ net/minecraft/server/packs/resources/SimpleJsonResourceReloadListener.java
@@ -19,10 +19,11 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public abstract class SimpleJsonResourceReloadListener extends SimplePreparableReloadListener<Map<ResourceLocation, JsonElement>> {
    private static final Logger LOGGER = LogManager.getLogger();
+   private static final String PATH_SUFFIX = ".json";
    private static final int PATH_SUFFIX_LENGTH = ".json".length();
    private final Gson gson;
    private final String directory;
 
    public SimpleJsonResourceReloadListener(Gson var1, String var2) {
@@ -42,83 +43,70 @@
          String var7 = var6.getPath();
          ResourceLocation var8 = new ResourceLocation(var6.getNamespace(), var7.substring(var4, var7.length() - PATH_SUFFIX_LENGTH));
 
          try {
             Resource var9 = var1.getResource(var6);
-            Throwable var10 = null;
 
             try {
-               InputStream var11 = var9.getInputStream();
-               Throwable var12 = null;
+               InputStream var10 = var9.getInputStream();
 
                try {
-                  BufferedReader var13 = new BufferedReader(new InputStreamReader(var11, StandardCharsets.UTF_8));
-                  Throwable var14 = null;
+                  BufferedReader var11 = new BufferedReader(new InputStreamReader(var10, StandardCharsets.UTF_8));
 
                   try {
-                     JsonElement var15 = (JsonElement)GsonHelper.fromJson(this.gson, (Reader)var13, JsonElement.class);
-                     if (var15 != null) {
-                        JsonElement var16 = (JsonElement)var3.put(var8, var15);
-                        if (var16 != null) {
+                     JsonElement var12 = (JsonElement)GsonHelper.fromJson(this.gson, (Reader)var11, (Class)JsonElement.class);
+                     if (var12 != null) {
+                        JsonElement var13 = (JsonElement)var3.put(var8, var12);
+                        if (var13 != null) {
                            throw new IllegalStateException("Duplicate data file ignored with ID " + var8);
                         }
                      } else {
                         LOGGER.error((String)"Couldn't load data file {} from {} as it's null or empty", (Object)var8, (Object)var6);
                      }
-                  } catch (Throwable var62) {
-                     var14 = var62;
-                     throw var62;
-                  } finally {
-                     if (var13 != null) {
-                        if (var14 != null) {
-                           try {
-                              var13.close();
-                           } catch (Throwable var61) {
-                              var14.addSuppressed(var61);
-                           }
-                        } else {
-                           var13.close();
-                        }
+                  } catch (Throwable var17) {
+                     try {
+                        var11.close();
+                     } catch (Throwable var16) {
+                        var17.addSuppressed(var16);
                      }
 
+                     throw var17;
                   }
-               } catch (Throwable var64) {
-                  var12 = var64;
-                  throw var64;
-               } finally {
-                  if (var11 != null) {
-                     if (var12 != null) {
-                        try {
-                           var11.close();
-                        } catch (Throwable var60) {
-                           var12.addSuppressed(var60);
-                        }
-                     } else {
-                        var11.close();
+
+                  var11.close();
+               } catch (Throwable var18) {
+                  if (var10 != null) {
+                     try {
+                        var10.close();
+                     } catch (Throwable var15) {
+                        var18.addSuppressed(var15);
                      }
                   }
 
+                  throw var18;
                }
-            } catch (Throwable var66) {
-               var10 = var66;
-               throw var66;
-            } finally {
+
+               if (var10 != null) {
+                  var10.close();
+               }
+            } catch (Throwable var19) {
                if (var9 != null) {
-                  if (var10 != null) {
-                     try {
-                        var9.close();
-                     } catch (Throwable var59) {
-                        var10.addSuppressed(var59);
-                     }
-                  } else {
+                  try {
                      var9.close();
+                  } catch (Throwable var14) {
+                     var19.addSuppressed(var14);
                   }
                }
 
+               throw var19;
             }
-         } catch (IllegalArgumentException | IOException | JsonParseException var68) {
-            LOGGER.error((String)"Couldn't parse data file {} from {}", (Object)var8, var6, var68);
+
+            if (var9 != null) {
+               var9.close();
+            }
+         } catch (IllegalArgumentException | IOException | JsonParseException var20) {
+            LOGGER.error((String)"Couldn't parse data file {} from {}", (Object)var8, var6, var20);
          }
       }
 
       return var3;
    }
