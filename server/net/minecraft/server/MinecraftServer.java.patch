--- net/minecraft/server/MinecraftServer.java
+++ net/minecraft/server/MinecraftServer.java
@@ -74,14 +74,16 @@
 import net.minecraft.network.protocol.game.ClientboundSetTimePacket;
 import net.minecraft.network.protocol.status.ServerStatus;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.bossevents.CustomBossEvents;
+import net.minecraft.server.level.DemoMode;
 import net.minecraft.server.level.PlayerRespawnLogic;
 import net.minecraft.server.level.ServerChunkCache;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.server.level.ServerPlayerGameMode;
 import net.minecraft.server.level.TicketType;
 import net.minecraft.server.level.progress.ChunkProgressListener;
 import net.minecraft.server.level.progress.ChunkProgressListenerFactory;
 import net.minecraft.server.network.ServerConnectionListener;
 import net.minecraft.server.network.TextFilter;
@@ -127,30 +129,30 @@
 import net.minecraft.world.level.border.BorderChangeListener;
 import net.minecraft.world.level.border.WorldBorder;
 import net.minecraft.world.level.chunk.ChunkGenerator;
 import net.minecraft.world.level.dimension.DimensionType;
 import net.minecraft.world.level.dimension.LevelStem;
+import net.minecraft.world.level.levelgen.Heightmap;
 import net.minecraft.world.level.levelgen.PatrolSpawner;
 import net.minecraft.world.level.levelgen.PhantomSpawner;
 import net.minecraft.world.level.levelgen.WorldGenSettings;
 import net.minecraft.world.level.levelgen.feature.ConfiguredFeature;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager;
-import net.minecraft.world.level.saveddata.SaveDataDirtyRunnable;
 import net.minecraft.world.level.storage.CommandStorage;
 import net.minecraft.world.level.storage.DerivedLevelData;
 import net.minecraft.world.level.storage.DimensionDataStorage;
 import net.minecraft.world.level.storage.LevelData;
 import net.minecraft.world.level.storage.LevelResource;
 import net.minecraft.world.level.storage.LevelStorageSource;
 import net.minecraft.world.level.storage.PlayerDataStorage;
 import net.minecraft.world.level.storage.ServerLevelData;
 import net.minecraft.world.level.storage.WorldData;
+import net.minecraft.world.level.storage.loot.ItemModifierManager;
 import net.minecraft.world.level.storage.loot.LootTables;
 import net.minecraft.world.level.storage.loot.PredicateManager;
 import net.minecraft.world.phys.Vec2;
 import net.minecraft.world.phys.Vec3;
-import net.minecraft.world.scores.ScoreboardSaveData;
 import org.apache.commons.lang3.Validate;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTask> implements SnooperPopulator, CommandSource, AutoCloseable {
@@ -181,11 +183,10 @@
    private boolean preventProxyConnections;
    private boolean pvp;
    private boolean allowFlight;
    @Nullable
    private String motd;
-   private int maxBuildHeight;
    private int playerIdleTimeout;
    public final long[] tickTimes;
    @Nullable
    private KeyPair keyPair;
    @Nullable
@@ -194,11 +195,10 @@
    private String resourcePack;
    private String resourcePackHash;
    private volatile boolean isReady;
    private long lastOverloadWarning;
    private boolean delayProfilerStart;
-   private boolean forceGameType;
    private final MinecraftSessionService sessionService;
    private final GameProfileRepository profileRepository;
    private final GameProfileCache profileCache;
    private long lastServerStatus;
    private final Thread serverThread;
@@ -269,13 +269,11 @@
       this.serverThread = var1;
       this.executor = Util.backgroundExecutor();
    }
 
    private void readScoreboard(DimensionDataStorage var1) {
-      ScoreboardSaveData var2 = (ScoreboardSaveData)var1.computeIfAbsent(ScoreboardSaveData::new, "scoreboard");
-      var2.setScoreboard(this.getScoreboard());
-      this.getScoreboard().addDirtyListener(new SaveDataDirtyRunnable(var2));
+      var1.computeIfAbsent(this.getScoreboard()::createData, this.getScoreboard()::createData, "scoreboard");
    }
 
    protected abstract boolean initServer() throws IOException;
 
    public static void convertFromRegionFormatIfNeeded(LevelStorageSource.LevelStorageAccess var0) {
@@ -324,11 +322,11 @@
       MappedRegistry var10 = var3.dimensions();
       LevelStem var12 = (LevelStem)var10.get(LevelStem.OVERWORLD);
       Object var11;
       DimensionType var13;
       if (var12 == null) {
-         var13 = (DimensionType)this.registryHolder.dimensionTypes().getOrThrow(DimensionType.OVERWORLD_LOCATION);
+         var13 = (DimensionType)this.registryHolder.registryOrThrow(Registry.DIMENSION_TYPE_REGISTRY).getOrThrow(DimensionType.OVERWORLD_LOCATION);
          var11 = WorldGenSettings.makeDefaultOverworld(this.registryHolder.registryOrThrow(Registry.BIOME_REGISTRY), this.registryHolder.registryOrThrow(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY), (new Random()).nextLong());
       } else {
          var13 = var12.type();
          var11 = var12.generator();
       }
@@ -340,11 +338,11 @@
       this.commandStorage = new CommandStorage(var15);
       WorldBorder var16 = var14.getWorldBorder();
       var16.applySettings(var2.getWorldBorder());
       if (!var2.isInitialized()) {
          try {
-            setInitialSpawn(var14, var2, var3.generateBonusChest(), var4, true);
+            setInitialSpawn(var14, var2, var3.generateBonusChest(), var4);
             var2.setInitialized(true);
             if (var4) {
                this.setupDebugLevel(this.worldData);
             }
          } catch (Throwable var26) {
@@ -382,67 +380,71 @@
          }
       }
 
    }
 
-   private static void setInitialSpawn(ServerLevel var0, ServerLevelData var1, boolean var2, boolean var3, boolean var4) {
-      ChunkGenerator var5 = var0.getChunkSource().getGenerator();
-      if (!var4) {
-         var1.setSpawn(BlockPos.ZERO.above(var5.getSpawnHeight()), 0.0F);
-      } else if (var3) {
-         var1.setSpawn(BlockPos.ZERO.above(), 0.0F);
+   private static void setInitialSpawn(ServerLevel var0, ServerLevelData var1, boolean var2, boolean var3) {
+      if (var3) {
+         var1.setSpawn(BlockPos.ZERO.above(80), 0.0F);
       } else {
-         BiomeSource var6 = var5.getBiomeSource();
-         Random var7 = new Random(var0.getSeed());
-         BlockPos var8 = var6.findBiomeHorizontal(0, var0.getSeaLevel(), 0, 256, (var0x) -> {
+         ChunkGenerator var4 = var0.getChunkSource().getGenerator();
+         BiomeSource var5 = var4.getBiomeSource();
+         Random var6 = new Random(var0.getSeed());
+         BlockPos var7 = var5.findBiomeHorizontal(0, var0.getSeaLevel(), 0, 256, (var0x) -> {
             return var0x.getMobSettings().playerSpawnFriendly();
-         }, var7);
-         ChunkPos var9 = var8 == null ? new ChunkPos(0, 0) : new ChunkPos(var8);
-         if (var8 == null) {
+         }, var6);
+         ChunkPos var8 = var7 == null ? new ChunkPos(0, 0) : new ChunkPos(var7);
+         if (var7 == null) {
             LOGGER.warn("Unable to find spawn biome");
          }
 
-         boolean var10 = false;
-         Iterator var11 = BlockTags.VALID_SPAWN.getValues().iterator();
+         boolean var9 = false;
+         Iterator var10 = BlockTags.VALID_SPAWN.getValues().iterator();
 
-         while(var11.hasNext()) {
-            Block var12 = (Block)var11.next();
-            if (var6.getSurfaceBlocks().contains(var12.defaultBlockState())) {
-               var10 = true;
+         while(var10.hasNext()) {
+            Block var11 = (Block)var10.next();
+            if (var5.getSurfaceBlocks().contains(var11.defaultBlockState())) {
+               var9 = true;
                break;
             }
          }
 
-         var1.setSpawn(var9.getWorldPosition().offset(8, var5.getSpawnHeight(), 8), 0.0F);
-         int var18 = 0;
-         int var19 = 0;
+         int var18 = var4.getSpawnHeight();
+         if (var18 < var0.getMinBuildHeight()) {
+            BlockPos var19 = var8.getWorldPosition();
+            var18 = var0.getHeight(Heightmap.Types.WORLD_SURFACE, var19.getX() + 8, var19.getZ() + 8);
+         }
+
+         var1.setSpawn(var8.getWorldPosition().offset(8, var18, 8), 0.0F);
+         int var20 = 0;
+         int var12 = 0;
          int var13 = 0;
          int var14 = -1;
          boolean var15 = true;
 
          for(int var16 = 0; var16 < 1024; ++var16) {
-            if (var18 > -16 && var18 <= 16 && var19 > -16 && var19 <= 16) {
-               BlockPos var17 = PlayerRespawnLogic.getSpawnPosInChunk(var0, new ChunkPos(var9.x + var18, var9.z + var19), var10);
+            if (var20 > -16 && var20 <= 16 && var12 > -16 && var12 <= 16) {
+               BlockPos var17 = PlayerRespawnLogic.getSpawnPosInChunk(var0, new ChunkPos(var8.x + var20, var8.z + var12), var9);
                if (var17 != null) {
                   var1.setSpawn(var17, 0.0F);
                   break;
                }
             }
 
-            if (var18 == var19 || var18 < 0 && var18 == -var19 || var18 > 0 && var18 == 1 - var19) {
-               int var21 = var13;
+            if (var20 == var12 || var20 < 0 && var20 == -var12 || var20 > 0 && var20 == 1 - var12) {
+               int var22 = var13;
                var13 = -var14;
-               var14 = var21;
+               var14 = var22;
             }
 
-            var18 += var13;
-            var19 += var14;
+            var20 += var13;
+            var12 += var14;
          }
 
          if (var2) {
-            ConfiguredFeature var20 = Features.BONUS_CHEST;
-            var20.place(var0, var5, var0.random, new BlockPos(var1.getXSpawn(), var1.getYSpawn(), var1.getZSpawn()));
+            ConfiguredFeature var21 = Features.BONUS_CHEST;
+            var21.place(var0, var4, var0.random, new BlockPos(var1.getXSpawn(), var1.getYSpawn(), var1.getZSpawn()));
          }
 
       }
    }
 
@@ -488,11 +490,11 @@
                this.updateMobSpawningFlags();
                return;
             }
 
             var6 = (ServerLevel)var5.next();
-            var7 = (ForcedChunksSavedData)var6.getDataStorage().get(ForcedChunksSavedData::new, "chunks");
+            var7 = (ForcedChunksSavedData)var6.getDataStorage().get(ForcedChunksSavedData::load, "chunks");
          } while(var7 == null);
 
          LongIterator var8 = var7.getChunks().iterator();
 
          while(var8.hasNext()) {
@@ -859,11 +861,11 @@
       this.profiler.popPush("connection");
       this.getConnection().tick();
       this.profiler.popPush("players");
       this.playerList.tick();
       if (SharedConstants.IS_RUNNING_IN_IDE) {
-         GameTestTicker.singleton.tick();
+         GameTestTicker.SINGLETON.tick();
       }
 
       this.profiler.popPush("server gui refresh");
 
       for(int var7 = 0; var7 < this.tickables.size(); ++var7) {
@@ -1078,11 +1080,11 @@
          if (var4 != null) {
             var1.setDynamicData("world[" + var2 + "][dimension]", var4.dimension().location());
             var1.setDynamicData("world[" + var2 + "][mode]", this.worldData.getGameType());
             var1.setDynamicData("world[" + var2 + "][difficulty]", var4.getDifficulty());
             var1.setDynamicData("world[" + var2 + "][hardcore]", this.worldData.isHardcore());
-            var1.setDynamicData("world[" + var2 + "][height]", this.maxBuildHeight);
+            var1.setDynamicData("world[" + var2 + "][height]", var4.getMaxBuildHeight());
             var1.setDynamicData("world[" + var2 + "][chunks_loaded]", var4.getChunkSource().getLoadedChunksCount());
             ++var2;
          }
       }
 
@@ -1143,18 +1145,10 @@
 
    public void setMotd(String var1) {
       this.motd = var1;
    }
 
-   public int getMaxBuildHeight() {
-      return this.maxBuildHeight;
-   }
-
-   public void setMaxBuildHeight(int var1) {
-      this.maxBuildHeight = var1;
-   }
-
    public boolean isStopped() {
       return this.stopped;
    }
 
    public PlayerList getPlayerList() {
@@ -1178,11 +1172,13 @@
 
    public boolean hasGui() {
       return false;
    }
 
-   public abstract boolean publishServer(GameType var1, boolean var2, int var3);
+   public boolean publishServer(@Nullable GameType var1, boolean var2, int var3) {
+      return false;
+   }
 
    public int getTickCount() {
       return this.tickCount;
    }
 
@@ -1192,18 +1188,10 @@
 
    public boolean isUnderSpawnProtection(ServerLevel var1, BlockPos var2, Player var3) {
       return false;
    }
 
-   public void setForceGameType(boolean var1) {
-      this.forceGameType = var1;
-   }
-
-   public boolean getForceGameType() {
-      return this.forceGameType;
-   }
-
    public boolean repliesToStatus() {
       return true;
    }
 
    public int getPlayerIdleTimeout() {
@@ -1275,11 +1263,11 @@
          Stream var10000 = var1.stream();
          PackRepository var10001 = this.packRepository;
          var10001.getClass();
          return (ImmutableList)var10000.map(var10001::getPack).filter(Objects::nonNull).map(Pack::open).collect(ImmutableList.toImmutableList());
       }, this).thenCompose((var1x) -> {
-         return ServerResources.loadResources(var1x, this.isDedicatedServer() ? Commands.CommandSelection.DEDICATED : Commands.CommandSelection.INTEGRATED, this.getFunctionCompilationLevel(), this.executor, this);
+         return ServerResources.loadResources(var1x, this.registryHolder, this.isDedicatedServer() ? Commands.CommandSelection.DEDICATED : Commands.CommandSelection.INTEGRATED, this.getFunctionCompilationLevel(), this.executor, this);
       }).thenAcceptAsync((var2x) -> {
          this.resources.close();
          this.resources = var2x;
          this.packRepository.setSelected(var1);
          this.worldData.setDataPackConfig(getSelectedPacks(this.packRepository));
@@ -1408,10 +1396,14 @@
 
    public PredicateManager getPredicateManager() {
       return this.resources.getPredicateManager();
    }
 
+   public ItemModifierManager getItemModifierManager() {
+      return this.resources.getItemModifierManager();
+   }
+
    public GameRules getGameRules() {
       return this.overworld().getGameRules();
    }
 
    public CustomBossEvents getCustomBossEvents() {
@@ -1536,11 +1528,11 @@
       try {
          final ArrayList var4 = Lists.newArrayList();
          final GameRules var5 = this.getGameRules();
          GameRules.visitGameRuleTypes(new GameRules.GameRuleTypeVisitor() {
             public <T extends GameRules.Value<T>> void visit(GameRules.Key<T> var1, GameRules.Type<T> var2) {
-               var4.add(String.format("%s=%s\n", var1.getId(), var5.getRule(var1).toString()));
+               var4.add(String.format("%s=%s\n", var1.getId(), var5.getRule(var1)));
             }
          });
          Iterator var6 = var4.iterator();
 
          while(var6.hasNext()) {
@@ -1686,12 +1678,24 @@
 
    public RegistryAccess registryAccess() {
       return this.registryHolder;
    }
 
-   @Nullable
    public TextFilter createTextFilterForPlayer(ServerPlayer var1) {
+      return TextFilter.DUMMY;
+   }
+
+   public boolean isResourcePackRequired() {
+      return false;
+   }
+
+   public ServerPlayerGameMode createGameModeForPlayer(ServerPlayer var1) {
+      return (ServerPlayerGameMode)(this.isDemo() ? new DemoMode(var1) : new ServerPlayerGameMode(var1));
+   }
+
+   @Nullable
+   public GameType getForcedGameType() {
       return null;
    }
 
    static {
       DEMO_SETTINGS = new LevelSettings("Demo World", GameType.SURVIVAL, false, Difficulty.NORMAL, false, new GameRules(), DataPackConfig.DEFAULT);
