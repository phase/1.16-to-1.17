--- net/minecraft/server/commands/CloneCommands.java
+++ net/minecraft/server/commands/CloneCommands.java
@@ -27,19 +27,23 @@
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.pattern.BlockInWorld;
 import net.minecraft.world.level.levelgen.structure.BoundingBox;
 
 public class CloneCommands {
+   private static final int MAX_CLONE_AREA = 32768;
    private static final SimpleCommandExceptionType ERROR_OVERLAP = new SimpleCommandExceptionType(new TranslatableComponent("commands.clone.overlap"));
    private static final Dynamic2CommandExceptionType ERROR_AREA_TOO_LARGE = new Dynamic2CommandExceptionType((var0, var1) -> {
       return new TranslatableComponent("commands.clone.toobig", new Object[]{var0, var1});
    });
    private static final SimpleCommandExceptionType ERROR_FAILED = new SimpleCommandExceptionType(new TranslatableComponent("commands.clone.failed"));
    public static final Predicate<BlockInWorld> FILTER_AIR = (var0) -> {
       return !var0.getState().isAir();
    };
 
+   public CloneCommands() {
+   }
+
    public static void register(CommandDispatcher<CommandSourceStack> var0) {
       var0.register((LiteralArgumentBuilder)((LiteralArgumentBuilder)Commands.literal("clone").requires((var0x) -> {
          return var0x.hasPermission(2);
       })).then(Commands.argument("begin", BlockPosArgument.blockPos()).then(Commands.argument("end", BlockPosArgument.blockPos()).then(((RequiredArgumentBuilder)((RequiredArgumentBuilder)((RequiredArgumentBuilder)Commands.argument("destination", BlockPosArgument.blockPos()).executes((var0x) -> {
          return clone((CommandSourceStack)var0x.getSource(), BlockPosArgument.getLoadedBlockPos(var0x, "begin"), BlockPosArgument.getLoadedBlockPos(var0x, "end"), BlockPosArgument.getLoadedBlockPos(var0x, "destination"), (var0) -> {
@@ -79,13 +83,13 @@
          return clone((CommandSourceStack)var0x.getSource(), BlockPosArgument.getLoadedBlockPos(var0x, "begin"), BlockPosArgument.getLoadedBlockPos(var0x, "end"), BlockPosArgument.getLoadedBlockPos(var0x, "destination"), BlockPredicateArgument.getBlockPredicate(var0x, "filter"), CloneCommands.Mode.NORMAL);
       }))))))));
    }
 
    private static int clone(CommandSourceStack var0, BlockPos var1, BlockPos var2, BlockPos var3, Predicate<BlockInWorld> var4, CloneCommands.Mode var5) throws CommandSyntaxException {
-      BoundingBox var6 = new BoundingBox(var1, var2);
+      BoundingBox var6 = BoundingBox.fromCorners(var1, var2);
       BlockPos var7 = var3.offset(var6.getLength());
-      BoundingBox var8 = new BoundingBox(var3, var7);
+      BoundingBox var8 = BoundingBox.fromCorners(var3, var7);
       if (!var5.canOverlap() && var8.intersects(var6)) {
          throw ERROR_OVERLAP.create();
       } else {
          int var9 = var6.getXSpan() * var6.getYSpan() * var6.getZSpan();
          if (var9 > 32768) {
@@ -95,16 +99,16 @@
             if (var10.hasChunksAt(var1, var2) && var10.hasChunksAt(var3, var7)) {
                ArrayList var11 = Lists.newArrayList();
                ArrayList var12 = Lists.newArrayList();
                ArrayList var13 = Lists.newArrayList();
                LinkedList var14 = Lists.newLinkedList();
-               BlockPos var15 = new BlockPos(var8.x0 - var6.x0, var8.y0 - var6.y0, var8.z0 - var6.z0);
+               BlockPos var15 = new BlockPos(var8.minX() - var6.minX(), var8.minY() - var6.minY(), var8.minZ() - var6.minZ());
 
                int var18;
-               for(int var16 = var6.z0; var16 <= var6.z1; ++var16) {
-                  for(int var17 = var6.y0; var17 <= var6.y1; ++var17) {
-                     for(var18 = var6.x0; var18 <= var6.x1; ++var18) {
+               for(int var16 = var6.minZ(); var16 <= var6.maxZ(); ++var16) {
+                  for(int var17 = var6.minY(); var17 <= var6.maxY(); ++var17) {
+                     for(var18 = var6.minX(); var18 <= var6.maxX(); ++var18) {
                         BlockPos var19 = new BlockPos(var18, var17, var16);
                         BlockPos var20 = var19.offset(var15);
                         BlockInWorld var21 = new BlockInWorld(var10, var19, false);
                         BlockState var22 = var21.getState();
                         if (var4.test(var21)) {
@@ -174,11 +178,11 @@
                   BlockEntity var35 = var10.getBlockEntity(var34.pos);
                   if (var34.tag != null && var35 != null) {
                      var34.tag.putInt("x", var34.pos.getX());
                      var34.tag.putInt("y", var34.pos.getY());
                      var34.tag.putInt("z", var34.pos.getZ());
-                     var35.load(var34.state, var34.tag);
+                     var35.load(var34.tag);
                      var35.setChanged();
                   }
                }
 
                var32 = var28.iterator();
@@ -200,24 +204,11 @@
             }
          }
       }
    }
 
-   static class CloneBlockInfo {
-      public final BlockPos pos;
-      public final BlockState state;
-      @Nullable
-      public final CompoundTag tag;
-
-      public CloneBlockInfo(BlockPos var1, BlockState var2, @Nullable CompoundTag var3) {
-         this.pos = var1;
-         this.state = var2;
-         this.tag = var3;
-      }
-   }
-
-   static enum Mode {
+   private static enum Mode {
       FORCE(true),
       MOVE(true),
       NORMAL(false);
 
       private final boolean canOverlap;
@@ -228,6 +219,19 @@
 
       public boolean canOverlap() {
          return this.canOverlap;
       }
    }
+
+   static class CloneBlockInfo {
+      public final BlockPos pos;
+      public final BlockState state;
+      @Nullable
+      public final CompoundTag tag;
+
+      public CloneBlockInfo(BlockPos var1, BlockState var2, @Nullable CompoundTag var3) {
+         this.pos = var1;
+         this.state = var2;
+         this.tag = var3;
+      }
+   }
 }
