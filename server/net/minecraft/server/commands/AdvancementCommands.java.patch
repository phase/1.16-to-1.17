--- net/minecraft/server/commands/AdvancementCommands.java
+++ net/minecraft/server/commands/AdvancementCommands.java
@@ -25,10 +25,13 @@
    private static final SuggestionProvider<CommandSourceStack> SUGGEST_ADVANCEMENTS = (var0, var1) -> {
       Collection var2 = ((CommandSourceStack)var0.getSource()).getServer().getAdvancements().getAllAdvancements();
       return SharedSuggestionProvider.suggestResource(var2.stream().map(Advancement::getId), var1);
    };
 
+   public AdvancementCommands() {
+   }
+
    public static void register(CommandDispatcher<CommandSourceStack> var0) {
       var0.register((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)Commands.literal("advancement").requires((var0x) -> {
          return var0x.hasPermission(2);
       })).then(Commands.literal("grant").then(((RequiredArgumentBuilder)((RequiredArgumentBuilder)((RequiredArgumentBuilder)((RequiredArgumentBuilder)Commands.argument("targets", EntityArgument.players()).then(Commands.literal("only").then(((RequiredArgumentBuilder)Commands.argument("advancement", ResourceLocationArgument.id()).suggests(SUGGEST_ADVANCEMENTS).executes((var0x) -> {
          return perform((CommandSourceStack)var0x.getSource(), EntityArgument.getPlayers(var0x, "targets"), AdvancementCommands.Action.GRANT, getAdvancements(ResourceLocationArgument.getAdvancement(var0x, "advancement"), AdvancementCommands.Mode.ONLY));
@@ -155,27 +158,11 @@
          addChildren(var3, var1);
       }
 
    }
 
-   static enum Mode {
-      ONLY(false, false),
-      THROUGH(true, true),
-      FROM(false, true),
-      UNTIL(true, false),
-      EVERYTHING(true, true);
-
-      private final boolean parents;
-      private final boolean children;
-
-      private Mode(boolean var3, boolean var4) {
-         this.parents = var3;
-         this.children = var4;
-      }
-   }
-
-   static enum Action {
+   private static enum Action {
       GRANT("grant") {
          protected boolean perform(ServerPlayer var1, Advancement var2) {
             AdvancementProgress var3 = var1.getAdvancements().getOrStartProgress(var2);
             if (var3.isDone()) {
                return false;
@@ -217,11 +204,11 @@
          }
       };
 
       private final String key;
 
-      private Action(String var3) {
+      Action(String var3) {
          this.key = "commands.advancement." + var3;
       }
 
       public int perform(ServerPlayer var1, Iterable<Advancement> var2) {
          int var3 = 0;
@@ -243,6 +230,22 @@
 
       protected String getKey() {
          return this.key;
       }
    }
+
+   static enum Mode {
+      ONLY(false, false),
+      THROUGH(true, true),
+      FROM(false, true),
+      UNTIL(true, false),
+      EVERYTHING(true, true);
+
+      final boolean parents;
+      final boolean children;
+
+      private Mode(boolean var3, boolean var4) {
+         this.parents = var3;
+         this.children = var4;
+      }
+   }
 }
