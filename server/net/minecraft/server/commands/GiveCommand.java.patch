--- net/minecraft/server/commands/GiveCommand.java
+++ net/minecraft/server/commands/GiveCommand.java
@@ -19,10 +19,15 @@
 import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
 
 public class GiveCommand {
+   public static final int MAX_ALLOWED_ITEMSTACKS = 100;
+
+   public GiveCommand() {
+   }
+
    public static void register(CommandDispatcher<CommandSourceStack> var0) {
       var0.register((LiteralArgumentBuilder)((LiteralArgumentBuilder)Commands.literal("give").requires((var0x) -> {
          return var0x.hasPermission(2);
       })).then(Commands.argument("targets", EntityArgument.players()).then(((RequiredArgumentBuilder)Commands.argument("item", ItemArgument.item()).executes((var0x) -> {
          return giveItem((CommandSourceStack)var0x.getSource(), ItemArgument.getItem(var0x, "item"), EntityArgument.getPlayers(var0x, "targets"), 1);
@@ -30,52 +35,59 @@
          return giveItem((CommandSourceStack)var0x.getSource(), ItemArgument.getItem(var0x, "item"), EntityArgument.getPlayers(var0x, "targets"), IntegerArgumentType.getInteger(var0x, "count"));
       })))));
    }
 
    private static int giveItem(CommandSourceStack var0, ItemInput var1, Collection<ServerPlayer> var2, int var3) throws CommandSyntaxException {
-      Iterator var4 = var2.iterator();
+      int var4 = var1.getItem().getMaxStackSize();
+      int var5 = var4 * 100;
+      if (var3 > var5) {
+         var0.sendFailure(new TranslatableComponent("commands.give.failed.toomanyitems", new Object[]{var5, var1.createItemStack(var3, false).getDisplayName()}));
+         return 0;
+      } else {
+         Iterator var6 = var2.iterator();
 
-      label40:
-      while(var4.hasNext()) {
-         ServerPlayer var5 = (ServerPlayer)var4.next();
-         int var6 = var3;
+         label44:
+         while(var6.hasNext()) {
+            ServerPlayer var7 = (ServerPlayer)var6.next();
+            int var8 = var3;
 
-         while(true) {
             while(true) {
-               if (var6 <= 0) {
-                  continue label40;
-               }
-
-               int var7 = Math.min(var1.getItem().getMaxStackSize(), var6);
-               var6 -= var7;
-               ItemStack var8 = var1.createItemStack(var7, false);
-               boolean var9 = var5.inventory.add(var8);
-               ItemEntity var10;
-               if (var9 && var8.isEmpty()) {
-                  var8.setCount(1);
-                  var10 = var5.drop(var8, false);
-                  if (var10 != null) {
-                     var10.makeFakeItem();
+               while(true) {
+                  if (var8 <= 0) {
+                     continue label44;
                   }
 
-                  var5.level.playSound((Player)null, var5.getX(), var5.getY(), var5.getZ(), SoundEvents.ITEM_PICKUP, SoundSource.PLAYERS, 0.2F, ((var5.getRandom().nextFloat() - var5.getRandom().nextFloat()) * 0.7F + 1.0F) * 2.0F);
-                  var5.inventoryMenu.broadcastChanges();
-               } else {
-                  var10 = var5.drop(var8, false);
-                  if (var10 != null) {
-                     var10.setNoPickUpDelay();
-                     var10.setOwner(var5.getUUID());
+                  int var9 = Math.min(var4, var8);
+                  var8 -= var9;
+                  ItemStack var10 = var1.createItemStack(var9, false);
+                  boolean var11 = var7.getInventory().add(var10);
+                  ItemEntity var12;
+                  if (var11 && var10.isEmpty()) {
+                     var10.setCount(1);
+                     var12 = var7.drop(var10, false);
+                     if (var12 != null) {
+                        var12.makeFakeItem();
+                     }
+
+                     var7.level.playSound((Player)null, var7.getX(), var7.getY(), var7.getZ(), SoundEvents.ITEM_PICKUP, SoundSource.PLAYERS, 0.2F, ((var7.getRandom().nextFloat() - var7.getRandom().nextFloat()) * 0.7F + 1.0F) * 2.0F);
+                     var7.containerMenu.broadcastChanges();
+                  } else {
+                     var12 = var7.drop(var10, false);
+                     if (var12 != null) {
+                        var12.setNoPickUpDelay();
+                        var12.setOwner(var7.getUUID());
+                     }
                   }
                }
             }
          }
-      }
 
-      if (var2.size() == 1) {
-         var0.sendSuccess(new TranslatableComponent("commands.give.success.single", new Object[]{var3, var1.createItemStack(var3, false).getDisplayName(), ((ServerPlayer)var2.iterator().next()).getDisplayName()}), true);
-      } else {
-         var0.sendSuccess(new TranslatableComponent("commands.give.success.single", new Object[]{var3, var1.createItemStack(var3, false).getDisplayName(), var2.size()}), true);
-      }
+         if (var2.size() == 1) {
+            var0.sendSuccess(new TranslatableComponent("commands.give.success.single", new Object[]{var3, var1.createItemStack(var3, false).getDisplayName(), ((ServerPlayer)var2.iterator().next()).getDisplayName()}), true);
+         } else {
+            var0.sendSuccess(new TranslatableComponent("commands.give.success.single", new Object[]{var3, var1.createItemStack(var3, false).getDisplayName(), var2.size()}), true);
+         }
 
-      return var2.size();
+         return var2.size();
+      }
    }
 }
