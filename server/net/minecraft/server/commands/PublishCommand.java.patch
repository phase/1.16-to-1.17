--- net/minecraft/server/commands/PublishCommand.java
+++ net/minecraft/server/commands/PublishCommand.java
@@ -8,17 +8,21 @@
 import com.mojang.brigadier.exceptions.SimpleCommandExceptionType;
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.commands.Commands;
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.util.HttpUtil;
+import net.minecraft.world.level.GameType;
 
 public class PublishCommand {
    private static final SimpleCommandExceptionType ERROR_FAILED = new SimpleCommandExceptionType(new TranslatableComponent("commands.publish.failed"));
    private static final DynamicCommandExceptionType ERROR_ALREADY_PUBLISHED = new DynamicCommandExceptionType((var0) -> {
       return new TranslatableComponent("commands.publish.alreadyPublished", new Object[]{var0});
    });
 
+   public PublishCommand() {
+   }
+
    public static void register(CommandDispatcher<CommandSourceStack> var0) {
       var0.register((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)Commands.literal("publish").requires((var0x) -> {
          return var0x.hasPermission(4);
       })).executes((var0x) -> {
          return publish((CommandSourceStack)var0x.getSource(), HttpUtil.getAvailablePort());
@@ -28,11 +32,11 @@
    }
 
    private static int publish(CommandSourceStack var0, int var1) throws CommandSyntaxException {
       if (var0.getServer().isPublished()) {
          throw ERROR_ALREADY_PUBLISHED.create(var0.getServer().getPort());
-      } else if (!var0.getServer().publishServer(var0.getServer().getDefaultGameType(), false, var1)) {
+      } else if (!var0.getServer().publishServer((GameType)null, false, var1)) {
          throw ERROR_FAILED.create();
       } else {
          var0.sendSuccess(new TranslatableComponent("commands.publish.success", new Object[]{var1}), true);
          return var1;
       }
