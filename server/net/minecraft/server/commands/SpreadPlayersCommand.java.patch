--- net/minecraft/server/commands/SpreadPlayersCommand.java
+++ net/minecraft/server/commands/SpreadPlayersCommand.java
@@ -32,22 +32,26 @@
 import net.minecraft.world.level.material.Material;
 import net.minecraft.world.phys.Vec2;
 import net.minecraft.world.scores.Team;
 
 public class SpreadPlayersCommand {
+   private static final int MAX_ITERATION_COUNT = 10000;
    private static final Dynamic4CommandExceptionType ERROR_FAILED_TO_SPREAD_TEAMS = new Dynamic4CommandExceptionType((var0, var1, var2, var3) -> {
       return new TranslatableComponent("commands.spreadplayers.failed.teams", new Object[]{var0, var1, var2, var3});
    });
    private static final Dynamic4CommandExceptionType ERROR_FAILED_TO_SPREAD_ENTITIES = new Dynamic4CommandExceptionType((var0, var1, var2, var3) -> {
       return new TranslatableComponent("commands.spreadplayers.failed.entities", new Object[]{var0, var1, var2, var3});
    });
 
+   public SpreadPlayersCommand() {
+   }
+
    public static void register(CommandDispatcher<CommandSourceStack> var0) {
       var0.register((LiteralArgumentBuilder)((LiteralArgumentBuilder)Commands.literal("spreadplayers").requires((var0x) -> {
          return var0x.hasPermission(2);
       })).then(Commands.argument("center", Vec2Argument.vec2()).then(Commands.argument("spreadDistance", FloatArgumentType.floatArg(0.0F)).then(((RequiredArgumentBuilder)Commands.argument("maxRange", FloatArgumentType.floatArg(1.0F)).then(Commands.argument("respectTeams", BoolArgumentType.bool()).then(Commands.argument("targets", EntityArgument.entities()).executes((var0x) -> {
-         return spreadPlayers((CommandSourceStack)var0x.getSource(), Vec2Argument.getVec2(var0x, "center"), FloatArgumentType.getFloat(var0x, "spreadDistance"), FloatArgumentType.getFloat(var0x, "maxRange"), 256, BoolArgumentType.getBool(var0x, "respectTeams"), EntityArgument.getEntities(var0x, "targets"));
+         return spreadPlayers((CommandSourceStack)var0x.getSource(), Vec2Argument.getVec2(var0x, "center"), FloatArgumentType.getFloat(var0x, "spreadDistance"), FloatArgumentType.getFloat(var0x, "maxRange"), ((CommandSourceStack)var0x.getSource()).getLevel().getMaxBuildHeight(), BoolArgumentType.getBool(var0x, "respectTeams"), EntityArgument.getEntities(var0x, "targets"));
       })))).then(Commands.literal("under").then(Commands.argument("maxHeight", IntegerArgumentType.integer(0)).then(Commands.argument("respectTeams", BoolArgumentType.bool()).then(Commands.argument("targets", EntityArgument.entities()).executes((var0x) -> {
          return spreadPlayers((CommandSourceStack)var0x.getSource(), Vec2Argument.getVec2(var0x, "center"), FloatArgumentType.getFloat(var0x, "spreadDistance"), FloatArgumentType.getFloat(var0x, "maxRange"), IntegerArgumentType.getInteger(var0x, "maxHeight"), BoolArgumentType.getBool(var0x, "respectTeams"), EntityArgument.getEntities(var0x, "targets"));
       })))))))));
    }
 
@@ -101,20 +105,20 @@
                   SpreadPlayersCommand.Position var25 = var14[var24];
                   double var26 = var21.dist(var25);
                   var18 = Math.min(var26, var18);
                   if (var26 < var1) {
                      ++var22;
-                     var23.x = var23.x + (var25.x - var21.x);
-                     var23.z = var23.z + (var25.z - var21.z);
+                     var23.x += var25.x - var21.x;
+                     var23.z += var25.z - var21.z;
                   }
                }
             }
 
             if (var22 > 0) {
-               var23.x = var23.x / (double)var22;
-               var23.z = var23.z / (double)var22;
-               double var30 = (double)var23.getLength();
+               var23.x /= (double)var22;
+               var23.z /= (double)var22;
+               double var30 = var23.getLength();
                if (var30 > 0.0D) {
                   var23.normalize();
                   var21.moveAway(var23);
                } else {
                   var21.randomize(var4, var5, var7, var9, var11);
@@ -207,13 +211,13 @@
       }
 
       return var10;
    }
 
-   static class Position {
-      private double x;
-      private double z;
+   private static class Position {
+      double x;
+      double z;
 
       Position() {
       }
 
       double dist(SpreadPlayersCommand.Position var1) {
@@ -221,17 +225,17 @@
          double var4 = this.z - var1.z;
          return Math.sqrt(var2 * var2 + var4 * var4);
       }
 
       void normalize() {
-         double var1 = (double)this.getLength();
+         double var1 = this.getLength();
          this.x /= var1;
          this.z /= var1;
       }
 
-      float getLength() {
-         return Mth.sqrt(this.x * this.x + this.z * this.z);
+      double getLength() {
+         return Math.sqrt(this.x * this.x + this.z * this.z);
       }
 
       public void moveAway(SpreadPlayersCommand.Position var1) {
          this.x -= var1.x;
          this.z -= var1.z;
@@ -262,11 +266,11 @@
          BlockPos.MutableBlockPos var3 = new BlockPos.MutableBlockPos(this.x, (double)(var2 + 1), this.z);
          boolean var4 = var1.getBlockState(var3).isAir();
          var3.move(Direction.DOWN);
 
          boolean var6;
-         for(boolean var5 = var1.getBlockState(var3).isAir(); var3.getY() > 0; var5 = var6) {
+         for(boolean var5 = var1.getBlockState(var3).isAir(); var3.getY() > var1.getMinBuildHeight(); var5 = var6) {
             var3.move(Direction.DOWN);
             var6 = var1.getBlockState(var3).isAir();
             if (!var6 && var5 && var4) {
                return var3.getY() + 1;
             }
