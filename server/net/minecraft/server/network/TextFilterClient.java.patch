--- net/minecraft/server/network/TextFilterClient.java
+++ net/minecraft/server/network/TextFilterClient.java
@@ -1,7 +1,8 @@
 package net.minecraft.server.network;
 
+import com.google.common.base.Strings;
 import com.google.common.collect.ImmutableList;
 import com.google.gson.JsonObject;
 import com.google.gson.internal.Streams;
 import com.google.gson.stream.JsonReader;
 import com.google.gson.stream.JsonWriter;
@@ -9,23 +10,27 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.io.OutputStreamWriter;
 import java.net.HttpURLConnection;
+import java.net.MalformedURLException;
+import java.net.URI;
 import java.net.URL;
 import java.nio.charset.StandardCharsets;
 import java.util.List;
-import java.util.Optional;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.Executor;
 import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
 import java.util.concurrent.ThreadFactory;
 import java.util.concurrent.atomic.AtomicInteger;
+import javax.annotation.Nullable;
 import net.minecraft.SharedConstants;
 import net.minecraft.Util;
 import net.minecraft.util.GsonHelper;
 import net.minecraft.util.thread.ProcessorMailbox;
+import org.apache.commons.codec.binary.Base64;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class TextFilterClient implements AutoCloseable {
    private static final Logger LOGGER = LogManager.getLogger();
@@ -42,10 +47,47 @@
    private final int ruleId;
    private final String serverId;
    private final TextFilterClient.IgnoreStrategy chatIgnoreStrategy;
    private final ExecutorService workerPool;
 
+   private TextFilterClient(URI var1, String var2, int var3, String var4, TextFilterClient.IgnoreStrategy var5, int var6) throws MalformedURLException {
+      this.authKey = var2;
+      this.ruleId = var3;
+      this.serverId = var4;
+      this.chatIgnoreStrategy = var5;
+      this.chatEndpoint = var1.resolve("/v1/chat").toURL();
+      this.joinEndpoint = var1.resolve("/v1/join").toURL();
+      this.leaveEndpoint = var1.resolve("/v1/leave").toURL();
+      this.workerPool = Executors.newFixedThreadPool(var6, THREAD_FACTORY);
+   }
+
+   @Nullable
+   public static TextFilterClient createFromConfig(String var0) {
+      if (Strings.isNullOrEmpty(var0)) {
+         return null;
+      } else {
+         try {
+            JsonObject var1 = GsonHelper.parse(var0);
+            URI var2 = new URI(GsonHelper.getAsString(var1, "apiServer"));
+            String var3 = GsonHelper.getAsString(var1, "apiKey");
+            if (var3.isEmpty()) {
+               throw new IllegalArgumentException("Missing API key");
+            } else {
+               int var4 = GsonHelper.getAsInt(var1, "ruleId", 1);
+               String var5 = GsonHelper.getAsString(var1, "serverId", "");
+               int var6 = GsonHelper.getAsInt(var1, "hashesToDrop", -1);
+               int var7 = GsonHelper.getAsInt(var1, "maxConcurrentRequests", 7);
+               TextFilterClient.IgnoreStrategy var8 = TextFilterClient.IgnoreStrategy.select(var6);
+               return new TextFilterClient(var2, (new Base64()).encodeToString(var3.getBytes(StandardCharsets.US_ASCII)), var4, var5, var8, var7);
+            }
+         } catch (Exception var9) {
+            LOGGER.warn((String)"Failed to parse chat filter config {}", (Object)var0, (Object)var9);
+            return null;
+         }
+      }
+   }
+
    private void processJoinOrLeave(GameProfile var1, URL var2, Executor var3) {
       JsonObject var4 = new JsonObject();
       var4.addProperty("server", this.serverId);
       var4.addProperty("room", "Chat");
       var4.addProperty("user_id", var1.getId().toString());
@@ -58,13 +100,13 @@
          }
 
       });
    }
 
-   private CompletableFuture<Optional<String>> requestMessageProcessing(GameProfile var1, String var2, TextFilterClient.IgnoreStrategy var3, Executor var4) {
+   private CompletableFuture<TextFilter.FilteredText> requestMessageProcessing(GameProfile var1, String var2, TextFilterClient.IgnoreStrategy var3, Executor var4) {
       if (var2.isEmpty()) {
-         return CompletableFuture.completedFuture(Optional.of(""));
+         return CompletableFuture.completedFuture(TextFilter.FilteredText.EMPTY);
       } else {
          JsonObject var5 = new JsonObject();
          var5.addProperty("rule", (Number)this.ruleId);
          var5.addProperty("server", this.serverId);
          var5.addProperty("room", "Chat");
@@ -74,23 +116,23 @@
          return CompletableFuture.supplyAsync(() -> {
             try {
                JsonObject var4 = this.processRequestResponse(var5, this.chatEndpoint);
                boolean var5x = GsonHelper.getAsBoolean(var4, "response", false);
                if (var5x) {
-                  return Optional.of(var2);
+                  return TextFilter.FilteredText.passThrough(var2);
                } else {
                   String var6 = GsonHelper.getAsString(var4, "hashed", (String)null);
                   if (var6 == null) {
-                     return Optional.empty();
+                     return TextFilter.FilteredText.fullyFiltered(var2);
                   } else {
                      int var7 = GsonHelper.getAsJsonArray(var4, "hashes").size();
-                     return var3.shouldIgnore(var6, var7) ? Optional.empty() : Optional.of(var6);
+                     return var3.shouldIgnore(var6, var7) ? TextFilter.FilteredText.fullyFiltered(var2) : new TextFilter.FilteredText(var2, var6);
                   }
                }
             } catch (Exception var8) {
                LOGGER.warn((String)"Failed to validate message '{}'", (Object)var2, (Object)var8);
-               return Optional.empty();
+               return TextFilter.FilteredText.fullyFiltered(var2);
             }
          }, var4);
       }
    }
 
@@ -111,20 +153,20 @@
       InputStream var4 = var3.getInputStream();
       Throwable var5 = null;
 
       JsonObject var6;
       try {
-         if (var3.getResponseCode() != 204) {
-            try {
-               var6 = Streams.parse(new JsonReader(new InputStreamReader(var4))).getAsJsonObject();
-               return var6;
-            } finally {
-               this.drainStream(var4);
-            }
+         if (var3.getResponseCode() == 204) {
+            var6 = new JsonObject();
+            return var6;
          }
 
-         var6 = new JsonObject();
+         try {
+            var6 = Streams.parse(new JsonReader(new InputStreamReader(var4))).getAsJsonObject();
+         } finally {
+            this.drainStream(var4);
+         }
       } catch (Throwable var23) {
          var5 = var23;
          throw var23;
       } finally {
          if (var4 != null) {
@@ -246,10 +288,27 @@
       };
       TextFilterClient.IgnoreStrategy IGNORE_FULLY_FILTERED = (var0, var1) -> {
          return var0.length() == var1;
       };
 
+      static TextFilterClient.IgnoreStrategy ignoreOverThreshold(int var0) {
+         return (var1, var2) -> {
+            return var2 >= var0;
+         };
+      }
+
+      static TextFilterClient.IgnoreStrategy select(int var0) {
+         switch(var0) {
+         case -1:
+            return NEVER_IGNORE;
+         case 0:
+            return IGNORE_FULLY_FILTERED;
+         default:
+            return ignoreOverThreshold(var0);
+         }
+      }
+
       boolean shouldIgnore(String var1, int var2);
    }
 
    class PlayerContext implements TextFilter {
       private final GameProfile profile;
@@ -267,24 +326,20 @@
 
       public void leave() {
          TextFilterClient.this.processJoinOrLeave(this.profile, TextFilterClient.this.leaveEndpoint, this.streamExecutor);
       }
 
-      public CompletableFuture<Optional<List<String>>> processMessageBundle(List<String> var1) {
+      public CompletableFuture<List<TextFilter.FilteredText>> processMessageBundle(List<String> var1) {
          List var2 = (List)var1.stream().map((var1x) -> {
             return TextFilterClient.this.requestMessageProcessing(this.profile, var1x, TextFilterClient.this.chatIgnoreStrategy, this.streamExecutor);
          }).collect(ImmutableList.toImmutableList());
-         return Util.sequence(var2).thenApply((var0) -> {
-            return Optional.of(var0.stream().map((var0x) -> {
-               return (String)var0x.orElse("");
-            }).collect(ImmutableList.toImmutableList()));
-         }).exceptionally((var0) -> {
-            return Optional.empty();
+         return Util.sequenceFailFast(var2).exceptionally((var0) -> {
+            return ImmutableList.of();
          });
       }
 
-      public CompletableFuture<Optional<String>> processStreamMessage(String var1) {
+      public CompletableFuture<TextFilter.FilteredText> processStreamMessage(String var1) {
          return TextFilterClient.this.requestMessageProcessing(this.profile, var1, TextFilterClient.this.chatIgnoreStrategy, this.streamExecutor);
       }
    }
 
    public static class RequestFailedException extends RuntimeException {
