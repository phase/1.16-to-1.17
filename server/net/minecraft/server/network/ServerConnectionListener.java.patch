--- net/minecraft/server/network/ServerConnectionListener.java
+++ net/minecraft/server/network/ServerConnectionListener.java
@@ -5,24 +5,33 @@
 import io.netty.bootstrap.ServerBootstrap;
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelException;
 import io.netty.channel.ChannelFuture;
 import io.netty.channel.ChannelHandler;
+import io.netty.channel.ChannelHandlerContext;
+import io.netty.channel.ChannelInboundHandlerAdapter;
 import io.netty.channel.ChannelInitializer;
 import io.netty.channel.ChannelOption;
 import io.netty.channel.EventLoopGroup;
 import io.netty.channel.epoll.Epoll;
 import io.netty.channel.epoll.EpollEventLoopGroup;
 import io.netty.channel.epoll.EpollServerSocketChannel;
+import io.netty.channel.local.LocalAddress;
+import io.netty.channel.local.LocalServerChannel;
 import io.netty.channel.nio.NioEventLoopGroup;
 import io.netty.channel.socket.nio.NioServerSocketChannel;
 import io.netty.handler.timeout.ReadTimeoutHandler;
+import io.netty.util.HashedWheelTimer;
+import io.netty.util.Timeout;
+import io.netty.util.Timer;
 import java.io.IOException;
 import java.net.InetAddress;
+import java.net.SocketAddress;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
+import java.util.concurrent.TimeUnit;
 import javax.annotation.Nullable;
 import net.minecraft.CrashReport;
 import net.minecraft.ReportedException;
 import net.minecraft.network.Connection;
 import net.minecraft.network.PacketDecoder;
@@ -44,14 +53,14 @@
       return new NioEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Server IO #%d").setDaemon(true).build());
    });
    public static final LazyLoadedValue<EpollEventLoopGroup> SERVER_EPOLL_EVENT_GROUP = new LazyLoadedValue(() -> {
       return new EpollEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Epoll Server IO #%d").setDaemon(true).build());
    });
-   private final MinecraftServer server;
+   final MinecraftServer server;
    public volatile boolean running;
    private final List<ChannelFuture> channels = Collections.synchronizedList(Lists.newArrayList());
-   private final List<Connection> connections = Collections.synchronizedList(Lists.newArrayList());
+   final List<Connection> connections = Collections.synchronizedList(Lists.newArrayList());
 
    public ServerConnectionListener(MinecraftServer var1) {
       this.server = var1;
       this.running = true;
    }
@@ -69,11 +78,11 @@
             var5 = SERVER_EVENT_GROUP;
             LOGGER.info("Using default channel type");
          }
 
          this.channels.add(((ServerBootstrap)((ServerBootstrap)(new ServerBootstrap()).channel(var4)).childHandler(new ChannelInitializer<Channel>() {
-            protected void initChannel(Channel var1) throws Exception {
+            protected void initChannel(Channel var1) {
                try {
                   var1.config().setOption(ChannelOption.TCP_NODELAY, true);
                } catch (ChannelException var4) {
                }
 
@@ -86,10 +95,27 @@
             }
          }).group((EventLoopGroup)var5.get()).localAddress(var1, var2)).bind().syncUninterruptibly());
       }
    }
 
+   public SocketAddress startMemoryChannel() {
+      ChannelFuture var1;
+      synchronized(this.channels) {
+         var1 = ((ServerBootstrap)((ServerBootstrap)(new ServerBootstrap()).channel(LocalServerChannel.class)).childHandler(new ChannelInitializer<Channel>() {
+            protected void initChannel(Channel var1) {
+               Connection var2 = new Connection(PacketFlow.SERVERBOUND);
+               var2.setListener(new MemoryServerHandshakePacketListenerImpl(ServerConnectionListener.this.server, var2));
+               ServerConnectionListener.this.connections.add(var2);
+               var1.pipeline().addLast((String)"packet_handler", (ChannelHandler)var2);
+            }
+         }).group((EventLoopGroup)SERVER_EVENT_GROUP.get()).localAddress(LocalAddress.ANY)).bind().syncUninterruptibly();
+         this.channels.add(var1);
+      }
+
+      return var1.channel().localAddress();
+   }
+
    public void stop() {
       this.running = false;
       Iterator var1 = this.channels.iterator();
 
       while(var1.hasNext()) {
@@ -144,6 +170,43 @@
    }
 
    public MinecraftServer getServer() {
       return this.server;
    }
+
+   private static class LatencySimulator extends ChannelInboundHandlerAdapter {
+      private static final Timer TIMER = new HashedWheelTimer();
+      private final int delay;
+      private final int jitter;
+      private final List<ServerConnectionListener.LatencySimulator.DelayedMessage> queuedMessages = Lists.newArrayList();
+
+      public LatencySimulator(int var1, int var2) {
+         this.delay = var1;
+         this.jitter = var2;
+      }
+
+      public void channelRead(ChannelHandlerContext var1, Object var2) {
+         this.delayDownstream(var1, var2);
+      }
+
+      private void delayDownstream(ChannelHandlerContext var1, Object var2) {
+         int var3 = this.delay + (int)(Math.random() * (double)this.jitter);
+         this.queuedMessages.add(new ServerConnectionListener.LatencySimulator.DelayedMessage(var1, var2));
+         TIMER.newTimeout(this::onTimeout, (long)var3, TimeUnit.MILLISECONDS);
+      }
+
+      private void onTimeout(Timeout var1) {
+         ServerConnectionListener.LatencySimulator.DelayedMessage var2 = (ServerConnectionListener.LatencySimulator.DelayedMessage)this.queuedMessages.remove(0);
+         var2.ctx.fireChannelRead(var2.msg);
+      }
+
+      private static class DelayedMessage {
+         public final ChannelHandlerContext ctx;
+         public final Object msg;
+
+         public DelayedMessage(ChannelHandlerContext var1, Object var2) {
+            this.ctx = var1;
+            this.msg = var2;
+         }
+      }
+   }
 }
