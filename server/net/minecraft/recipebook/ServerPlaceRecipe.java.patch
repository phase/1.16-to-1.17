--- net/minecraft/recipebook/ServerPlaceRecipe.java
+++ net/minecraft/recipebook/ServerPlaceRecipe.java
@@ -10,12 +10,10 @@
 import net.minecraft.network.protocol.game.ClientboundPlaceGhostRecipePacket;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.world.Container;
 import net.minecraft.world.entity.player.Inventory;
 import net.minecraft.world.entity.player.StackedContents;
-import net.minecraft.world.inventory.CraftingMenu;
-import net.minecraft.world.inventory.InventoryMenu;
 import net.minecraft.world.inventory.RecipeBookMenu;
 import net.minecraft.world.inventory.Slot;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.crafting.Recipe;
 import org.apache.logging.log4j.LogManager;
@@ -31,56 +29,39 @@
       this.menu = var1;
    }
 
    public void recipeClicked(ServerPlayer var1, @Nullable Recipe<C> var2, boolean var3) {
       if (var2 != null && var1.getRecipeBook().contains(var2)) {
-         this.inventory = var1.inventory;
+         this.inventory = var1.getInventory();
          if (this.testClearGrid() || var1.isCreative()) {
             this.stackedContents.clear();
-            var1.inventory.fillStackedContents(this.stackedContents);
+            var1.getInventory().fillStackedContents(this.stackedContents);
             this.menu.fillCraftSlotsStackedContents(this.stackedContents);
             if (this.stackedContents.canCraft(var2, (IntList)null)) {
                this.handleRecipeClicked(var2, var3);
             } else {
-               this.clearGrid();
+               this.clearGrid(true);
                var1.connection.send(new ClientboundPlaceGhostRecipePacket(var1.containerMenu.containerId, var2));
             }
 
-            var1.inventory.setChanged();
+            var1.getInventory().setChanged();
          }
       }
    }
 
-   protected void clearGrid() {
-      for(int var1 = 0; var1 < this.menu.getGridWidth() * this.menu.getGridHeight() + 1; ++var1) {
-         if (var1 != this.menu.getResultSlotIndex() || !(this.menu instanceof CraftingMenu) && !(this.menu instanceof InventoryMenu)) {
-            this.moveItemToInventory(var1);
+   protected void clearGrid(boolean var1) {
+      for(int var2 = 0; var2 < this.menu.getSize(); ++var2) {
+         if (this.menu.shouldMoveToInventory(var2)) {
+            ItemStack var3 = this.menu.getSlot(var2).getItem().copy();
+            this.inventory.placeItemBackInInventory(var3, false);
+            this.menu.getSlot(var2).set(var3);
          }
       }
 
       this.menu.clearCraftingContent();
    }
 
-   protected void moveItemToInventory(int var1) {
-      ItemStack var2 = this.menu.getSlot(var1).getItem();
-      if (!var2.isEmpty()) {
-         for(; var2.getCount() > 0; this.menu.getSlot(var1).remove(1)) {
-            int var3 = this.inventory.getSlotWithRemainingSpace(var2);
-            if (var3 == -1) {
-               var3 = this.inventory.getFreeSlot();
-            }
-
-            ItemStack var4 = var2.copy();
-            var4.setCount(1);
-            if (!this.inventory.add(var3, var4)) {
-               LOGGER.error("Can't find any space for item in the inventory");
-            }
-         }
-
-      }
-   }
-
    protected void handleRecipeClicked(Recipe<C> var1, boolean var2) {
       boolean var3 = this.menu.recipeMatches(var1);
       int var4 = this.stackedContents.getBiggestCraftableStack(var1, (IntList)null);
       int var5;
       if (var3) {
@@ -107,11 +88,11 @@
                var7 = var10;
             }
          }
 
          if (this.stackedContents.canCraft(var1, var11, var7)) {
-            this.clearGrid();
+            this.clearGrid(false);
             this.placeRecipe(this.menu.getGridWidth(), this.menu.getGridHeight(), this.menu.getResultSlotIndex(), var1, var11.iterator(), var7);
          }
       }
 
    }
