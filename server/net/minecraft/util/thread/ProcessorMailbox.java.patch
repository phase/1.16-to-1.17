--- net/minecraft/util/thread/ProcessorMailbox.java
+++ net/minecraft/util/thread/ProcessorMailbox.java
@@ -1,20 +1,28 @@
 package net.minecraft.util.thread;
 
+import com.google.common.collect.ImmutableList;
 import it.unimi.dsi.fastutil.ints.Int2BooleanFunction;
+import java.util.List;
 import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.concurrent.Executor;
 import java.util.concurrent.RejectedExecutionException;
 import java.util.concurrent.atomic.AtomicInteger;
-import net.minecraft.SharedConstants;
+import net.minecraft.Util;
+import net.minecraft.util.profiling.metrics.MetricCategory;
+import net.minecraft.util.profiling.metrics.MetricSampler;
+import net.minecraft.util.profiling.metrics.MetricsRegistry;
+import net.minecraft.util.profiling.metrics.ProfilerMeasured;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class ProcessorMailbox<T> implements ProcessorHandle<T>, AutoCloseable, Runnable {
+public class ProcessorMailbox<T> implements ProfilerMeasured, ProcessorHandle<T>, AutoCloseable, Runnable {
    private static final Logger LOGGER = LogManager.getLogger();
+   private static final int CLOSED_BIT = 1;
+   private static final int SCHEDULED_BIT = 2;
    private final AtomicInteger status = new AtomicInteger(0);
-   public final StrictQueue<? super T, ? extends Runnable> queue;
+   private final StrictQueue<? super T, ? extends Runnable> queue;
    private final Executor dispatcher;
    private final String name;
 
    public static ProcessorMailbox<Runnable> create(Executor var0, String var1) {
       return new ProcessorMailbox(new StrictQueue.QueueStrictQueue(new ConcurrentLinkedQueue()), var0, var1);
@@ -22,10 +30,11 @@
 
    public ProcessorMailbox(StrictQueue<? super T, ? extends Runnable> var1, Executor var2, String var3) {
       this.dispatcher = var2;
       this.queue = var1;
       this.name = var3;
+      MetricsRegistry.INSTANCE.add(this);
    }
 
    private boolean setAsScheduled() {
       int var1;
       do {
@@ -72,26 +81,11 @@
       } else {
          Runnable var1 = (Runnable)this.queue.pop();
          if (var1 == null) {
             return false;
          } else {
-            String var2;
-            Thread var3;
-            if (SharedConstants.IS_RUNNING_IN_IDE) {
-               var3 = Thread.currentThread();
-               var2 = var3.getName();
-               var3.setName(this.name);
-            } else {
-               var3 = null;
-               var2 = null;
-            }
-
-            var1.run();
-            if (var3 != null) {
-               var3.setName(var2);
-            }
-
+            Util.wrapThreadWithTaskName(this.name, var1).run();
             return true;
          }
       }
    }
 
@@ -133,13 +127,22 @@
       }
 
       return var2;
    }
 
+   public int size() {
+      return this.queue.size();
+   }
+
    public String toString() {
-      return this.name + " " + this.status.get() + " " + this.queue.isEmpty();
+      String var10000 = this.name;
+      return var10000 + " " + this.status.get() + " " + this.queue.isEmpty();
    }
 
    public String name() {
       return this.name;
    }
+
+   public List<MetricSampler> profiledMetrics() {
+      return ImmutableList.of(MetricSampler.create(this.name + "-queue-size", MetricCategory.MAIL_BOXES, this::size));
+   }
 }
