--- net/minecraft/util/ClampedNormalFloat.java
+++ net/minecraft/util/ClampedNormalFloat.java
@@ -1,0 +1,79 @@
+package net.minecraft.util;
+
+import com.mojang.datafixers.util.Function4;
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.DataResult;
+import com.mojang.serialization.codecs.RecordCodecBuilder;
+import java.util.Objects;
+import java.util.Random;
+import java.util.function.Function;
+
+public class ClampedNormalFloat extends FloatProvider {
+   public static final Codec<ClampedNormalFloat> CODEC = RecordCodecBuilder.create((var0) -> {
+      return var0.group(Codec.FLOAT.fieldOf("mean").forGetter((var0x) -> {
+         return var0x.mean;
+      }), Codec.FLOAT.fieldOf("deviation").forGetter((var0x) -> {
+         return var0x.deviation;
+      }), Codec.FLOAT.fieldOf("min").forGetter((var0x) -> {
+         return var0x.min;
+      }), Codec.FLOAT.fieldOf("max").forGetter((var0x) -> {
+         return var0x.max;
+      })).apply(var0, (Function4)(ClampedNormalFloat::new));
+   }).comapFlatMap((var0) -> {
+      return var0.max < var0.min ? DataResult.error("Max must be larger than min: [" + var0.min + ", " + var0.max + "]") : DataResult.success(var0);
+   }, Function.identity());
+   private float mean;
+   private float deviation;
+   private float min;
+   private float max;
+
+   public static ClampedNormalFloat of(float var0, float var1, float var2, float var3) {
+      return new ClampedNormalFloat(var0, var1, var2, var3);
+   }
+
+   private ClampedNormalFloat(float var1, float var2, float var3, float var4) {
+      this.mean = var1;
+      this.deviation = var2;
+      this.min = var3;
+      this.max = var4;
+   }
+
+   public float sample(Random var1) {
+      return sample(var1, this.mean, this.deviation, this.min, this.max);
+   }
+
+   public static float sample(Random var0, float var1, float var2, float var3, float var4) {
+      return Mth.clamp(Mth.normal(var0, var1, var2), var3, var4);
+   }
+
+   public float getMinValue() {
+      return this.min;
+   }
+
+   public float getMaxValue() {
+      return this.max;
+   }
+
+   public FloatProviderType<?> getType() {
+      return FloatProviderType.CLAMPED_NORMAL;
+   }
+
+   public boolean equals(Object var1) {
+      if (this == var1) {
+         return true;
+      } else if (var1 != null && this.getClass() == var1.getClass()) {
+         ClampedNormalFloat var2 = (ClampedNormalFloat)var1;
+         return this.mean == var2.mean && this.deviation == var2.deviation && this.min == var2.min && this.max == var2.max;
+      } else {
+         return false;
+      }
+   }
+
+   public int hashCode() {
+      return Objects.hash(new Object[]{this.mean, this.deviation, this.min, this.max});
+   }
+
+   public String toString() {
+      return "normal(" + this.mean + ", " + this.deviation + ") in [" + this.min + '-' + this.max + ']';
+   }
+}
