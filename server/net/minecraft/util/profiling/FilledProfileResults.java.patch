--- net/minecraft/util/profiling/FilledProfileResults.java
+++ net/minecraft/util/profiling/FilledProfileResults.java
@@ -3,15 +3,15 @@
 import com.google.common.base.Splitter;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import it.unimi.dsi.fastutil.objects.Object2LongMap;
 import it.unimi.dsi.fastutil.objects.Object2LongMaps;
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.OutputStreamWriter;
+import java.io.BufferedWriter;
 import java.io.Writer;
 import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
+import java.nio.file.Path;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.Iterator;
 import java.util.List;
@@ -31,10 +31,14 @@
    private static final ProfilerPathEntry EMPTY = new ProfilerPathEntry() {
       public long getDuration() {
          return 0L;
       }
 
+      public long getMaxDuration() {
+         return 0L;
+      }
+
       public long getCount() {
          return 0L;
       }
 
       public Object2LongMap<String> getCounters() {
@@ -72,11 +76,11 @@
       ProfilerPathEntry var6 = this.getEntry(var1);
       long var7 = var6.getDuration();
       long var9 = var6.getCount();
       ArrayList var11 = Lists.newArrayList();
       if (!var1.isEmpty()) {
-         var1 = var1 + '\u001e';
+         var1 = var1 + "\u001e";
       }
 
       long var12 = 0L;
       Iterator var14 = this.entries.keySet().iterator();
 
@@ -154,17 +158,17 @@
 
    public int getEndTimeTicks() {
       return this.endTimeTicks;
    }
 
-   public boolean saveResults(File var1) {
-      var1.getParentFile().mkdirs();
-      OutputStreamWriter var2 = null;
+   public boolean saveResults(Path var1) {
+      BufferedWriter var2 = null;
 
       boolean var4;
       try {
-         var2 = new OutputStreamWriter(new FileOutputStream(var1), StandardCharsets.UTF_8);
+         Files.createDirectories(var1.getParent());
+         var2 = Files.newBufferedWriter(var1, StandardCharsets.UTF_8);
          var2.write(this.getProfilerResults(this.getNanoDuration(), this.getTickDuration()));
          boolean var3 = true;
          return var3;
       } catch (Throwable var8) {
          LOGGER.error((String)"Could not save profiler results to {}", (Object)var1, (Object)var8);
@@ -197,10 +201,16 @@
       }
 
       return var4.toString();
    }
 
+   public String getProfilerResults() {
+      StringBuilder var1 = new StringBuilder();
+      this.appendProfilerResults(0, "root", var1);
+      return var1.toString();
+   }
+
    private static StringBuilder indentLine(StringBuilder var0, int var1) {
       var0.append(String.format("[%02d] ", var1));
 
       for(int var2 = 0; var2 < var1; ++var2) {
          var0.append("|   ");
@@ -219,11 +229,11 @@
          for(int var6 = 1; var6 < var4.size(); ++var6) {
             ResultField var7 = (ResultField)var4.get(var6);
             indentLine(var3, var1).append(var7.name).append('(').append(var7.count).append('/').append(String.format(Locale.ROOT, "%.0f", (float)var7.count / (float)this.tickDuration)).append(')').append(" - ").append(String.format(Locale.ROOT, "%.2f", var7.percentage)).append("%/").append(String.format(Locale.ROOT, "%.2f", var7.globalPercentage)).append("%\n");
             if (!"unspecified".equals(var7.name)) {
                try {
-                  this.appendProfilerResults(var1 + 1, var2 + '\u001e' + var7.name, var3);
+                  this.appendProfilerResults(var1 + 1, var2 + "\u001e" + var7.name, var3);
                } catch (Exception var9) {
                   var3.append("[[ EXCEPTION ").append(var9).append(" ]]");
                }
             }
          }
@@ -259,24 +269,23 @@
    public int getTickDuration() {
       return this.tickDuration;
    }
 
    static class CounterCollector {
-      private long selfValue;
-      private long totalValue;
-      private final Map<String, FilledProfileResults.CounterCollector> children;
+      long selfValue;
+      long totalValue;
+      final Map<String, FilledProfileResults.CounterCollector> children = Maps.newHashMap();
 
-      private CounterCollector() {
-         this.children = Maps.newHashMap();
+      CounterCollector() {
       }
 
       public void addValue(Iterator<String> var1, long var2) {
          this.totalValue += var2;
          if (!var1.hasNext()) {
             this.selfValue += var2;
          } else {
-            ((FilledProfileResults.CounterCollector)this.children.computeIfAbsent(var1.next(), (var0) -> {
+            ((FilledProfileResults.CounterCollector)this.children.computeIfAbsent((String)var1.next(), (var0) -> {
                return new FilledProfileResults.CounterCollector();
             })).addValue(var1, var2);
          }
 
       }
