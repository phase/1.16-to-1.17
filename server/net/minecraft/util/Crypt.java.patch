--- net/minecraft/util/Crypt.java
+++ net/minecraft/util/Crypt.java
@@ -1,19 +1,42 @@
 package net.minecraft.util;
 
 import java.security.Key;
+import java.security.KeyFactory;
 import java.security.KeyPair;
 import java.security.KeyPairGenerator;
 import java.security.MessageDigest;
 import java.security.PrivateKey;
 import java.security.PublicKey;
+import java.security.spec.X509EncodedKeySpec;
 import javax.crypto.Cipher;
+import javax.crypto.KeyGenerator;
 import javax.crypto.SecretKey;
 import javax.crypto.spec.IvParameterSpec;
 import javax.crypto.spec.SecretKeySpec;
 
 public class Crypt {
+   private static final String SYMMETRIC_ALGORITHM = "AES";
+   private static final int SYMMETRIC_BITS = 128;
+   private static final String ASYMMETRIC_ALGORITHM = "RSA";
+   private static final int ASYMMETRIC_BITS = 1024;
+   private static final String BYTE_ENCODING = "ISO_8859_1";
+   private static final String HASH_ALGORITHM = "SHA-1";
+
+   public Crypt() {
+   }
+
+   public static SecretKey generateSecretKey() throws CryptException {
+      try {
+         KeyGenerator var0 = KeyGenerator.getInstance("AES");
+         var0.init(128);
+         return var0.generateKey();
+      } catch (Exception var1) {
+         throw new CryptException(var1);
+      }
+   }
+
    public static KeyPair generateKeyPair() throws CryptException {
       try {
          KeyPairGenerator var0 = KeyPairGenerator.getInstance("RSA");
          var0.initialize(1024);
          return var0.generateKeyPair();
@@ -41,20 +64,34 @@
       }
 
       return var1.digest();
    }
 
+   public static PublicKey byteToPublicKey(byte[] var0) throws CryptException {
+      try {
+         X509EncodedKeySpec var1 = new X509EncodedKeySpec(var0);
+         KeyFactory var2 = KeyFactory.getInstance("RSA");
+         return var2.generatePublic(var1);
+      } catch (Exception var3) {
+         throw new CryptException(var3);
+      }
+   }
+
    public static SecretKey decryptByteToSecretKey(PrivateKey var0, byte[] var1) throws CryptException {
       byte[] var2 = decryptUsingKey(var0, var1);
 
       try {
          return new SecretKeySpec(var2, "AES");
       } catch (Exception var4) {
          throw new CryptException(var4);
       }
    }
 
+   public static byte[] encryptUsingKey(Key var0, byte[] var1) throws CryptException {
+      return cipherData(1, var0, var1);
+   }
+
    public static byte[] decryptUsingKey(Key var0, byte[] var1) throws CryptException {
       return cipherData(2, var0, var1);
    }
 
    private static byte[] cipherData(int var0, Key var1, byte[] var2) throws CryptException {
