--- net/minecraft/util/valueproviders/TrapezoidFloat.java
+++ net/minecraft/util/valueproviders/TrapezoidFloat.java
@@ -1,0 +1,78 @@
+package net.minecraft.util.valueproviders;
+
+import com.mojang.datafixers.util.Function3;
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.DataResult;
+import com.mojang.serialization.codecs.RecordCodecBuilder;
+import java.util.Objects;
+import java.util.Random;
+import java.util.function.Function;
+
+public class TrapezoidFloat extends FloatProvider {
+   public static final Codec<TrapezoidFloat> CODEC = RecordCodecBuilder.create((var0) -> {
+      return var0.group(Codec.FLOAT.fieldOf("min").forGetter((var0x) -> {
+         return var0x.min;
+      }), Codec.FLOAT.fieldOf("max").forGetter((var0x) -> {
+         return var0x.max;
+      }), Codec.FLOAT.fieldOf("plateau").forGetter((var0x) -> {
+         return var0x.plateau;
+      })).apply(var0, (Function3)(TrapezoidFloat::new));
+   }).comapFlatMap((var0) -> {
+      if (var0.max < var0.min) {
+         return DataResult.error("Max must be larger than min: [" + var0.min + ", " + var0.max + "]");
+      } else {
+         return var0.plateau > var0.max - var0.min ? DataResult.error("Plateau can at most be the full span: [" + var0.min + ", " + var0.max + "]") : DataResult.success(var0);
+      }
+   }, Function.identity());
+   private float min;
+   private float max;
+   private float plateau;
+
+   public static TrapezoidFloat of(float var0, float var1, float var2) {
+      return new TrapezoidFloat(var0, var1, var2);
+   }
+
+   private TrapezoidFloat(float var1, float var2, float var3) {
+      this.min = var1;
+      this.max = var2;
+      this.plateau = var3;
+   }
+
+   public float sample(Random var1) {
+      float var2 = this.max - this.min;
+      float var3 = (var2 - this.plateau) / 2.0F;
+      float var4 = var2 - var3;
+      return this.min + var1.nextFloat() * var4 + var1.nextFloat() * var3;
+   }
+
+   public float getMinValue() {
+      return this.min;
+   }
+
+   public float getMaxValue() {
+      return this.max;
+   }
+
+   public FloatProviderType<?> getType() {
+      return FloatProviderType.TRAPEZOID;
+   }
+
+   public boolean equals(Object var1) {
+      if (this == var1) {
+         return true;
+      } else if (var1 != null && this.getClass() == var1.getClass()) {
+         TrapezoidFloat var2 = (TrapezoidFloat)var1;
+         return this.min == var2.min && this.max == var2.max && this.plateau == var2.plateau;
+      } else {
+         return false;
+      }
+   }
+
+   public int hashCode() {
+      return Objects.hash(new Object[]{this.min, this.max, this.plateau});
+   }
+
+   public String toString() {
+      return "trapezoid(" + this.plateau + ") in [" + this.min + '-' + this.max + ']';
+   }
+}
