--- net/minecraft/util/valueproviders/UniformInt.java
+++ net/minecraft/util/valueproviders/UniformInt.java
@@ -1,0 +1,68 @@
+package net.minecraft.util.valueproviders;
+
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.DataResult;
+import com.mojang.serialization.codecs.RecordCodecBuilder;
+import java.util.Objects;
+import java.util.Random;
+import java.util.function.BiFunction;
+import java.util.function.Function;
+import net.minecraft.util.Mth;
+
+public class UniformInt extends IntProvider {
+   public static final Codec<UniformInt> CODEC = RecordCodecBuilder.create((var0) -> {
+      return var0.group(Codec.INT.fieldOf("min_inclusive").forGetter((var0x) -> {
+         return var0x.minInclusive;
+      }), Codec.INT.fieldOf("max_inclusive").forGetter((var0x) -> {
+         return var0x.maxInclusive;
+      })).apply(var0, (BiFunction)(UniformInt::new));
+   }).comapFlatMap((var0) -> {
+      return var0.maxInclusive < var0.minInclusive ? DataResult.error("Max must be at least min, min_inclusive: " + var0.minInclusive + ", max_inclusive: " + var0.maxInclusive) : DataResult.success(var0);
+   }, Function.identity());
+   private final int minInclusive;
+   private final int maxInclusive;
+
+   private UniformInt(int var1, int var2) {
+      this.minInclusive = var1;
+      this.maxInclusive = var2;
+   }
+
+   public static UniformInt of(int var0, int var1) {
+      return new UniformInt(var0, var1);
+   }
+
+   public int sample(Random var1) {
+      return Mth.randomBetweenInclusive(var1, this.minInclusive, this.maxInclusive);
+   }
+
+   public int getMinValue() {
+      return this.minInclusive;
+   }
+
+   public int getMaxValue() {
+      return this.maxInclusive;
+   }
+
+   public IntProviderType<?> getType() {
+      return IntProviderType.UNIFORM;
+   }
+
+   public boolean equals(Object var1) {
+      if (this == var1) {
+         return true;
+      } else if (var1 != null && this.getClass() == var1.getClass()) {
+         UniformInt var2 = (UniformInt)var1;
+         return this.minInclusive == var2.minInclusive && this.maxInclusive == var2.maxInclusive;
+      } else {
+         return false;
+      }
+   }
+
+   public int hashCode() {
+      return Objects.hash(new Object[]{this.minInclusive, this.maxInclusive});
+   }
+
+   public String toString() {
+      return "[" + this.minInclusive + '-' + this.maxInclusive + ']';
+   }
+}
