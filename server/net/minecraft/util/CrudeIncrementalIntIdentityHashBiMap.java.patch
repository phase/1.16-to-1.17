--- net/minecraft/util/CrudeIncrementalIntIdentityHashBiMap.java
+++ net/minecraft/util/CrudeIncrementalIntIdentityHashBiMap.java
@@ -7,22 +7,24 @@
 import java.util.Iterator;
 import javax.annotation.Nullable;
 import net.minecraft.core.IdMap;
 
 public class CrudeIncrementalIntIdentityHashBiMap<K> implements IdMap<K> {
+   public static final int NOT_FOUND = -1;
    private static final Object EMPTY_SLOT = null;
+   private static final float LOADFACTOR = 0.8F;
    private K[] keys;
    private int[] values;
    private K[] byId;
    private int nextId;
    private int size;
 
    public CrudeIncrementalIntIdentityHashBiMap(int var1) {
       var1 = (int)((float)var1 / 0.8F);
-      this.keys = (Object[])(new Object[var1]);
+      this.keys = new Object[var1];
       this.values = new int[var1];
-      this.byId = (Object[])(new Object[var1]);
+      this.byId = new Object[var1];
    }
 
    public int getId(@Nullable K var1) {
       return this.getValue(this.indexOf(var1, this.hash(var1)));
    }
@@ -34,10 +36,18 @@
 
    private int getValue(int var1) {
       return var1 == -1 ? -1 : this.values[var1];
    }
 
+   public boolean contains(K var1) {
+      return this.getId(var1) != -1;
+   }
+
+   public boolean contains(int var1) {
+      return this.byId(var1) != null;
+   }
+
    public int add(K var1) {
       int var2 = this.nextId();
       this.addMapping(var1, var2);
       return var2;
    }
@@ -51,13 +61,13 @@
    }
 
    private void grow(int var1) {
       Object[] var2 = this.keys;
       int[] var3 = this.values;
-      this.keys = (Object[])(new Object[var1]);
+      this.keys = new Object[var1];
       this.values = new int[var1];
-      this.byId = (Object[])(new Object[var1]);
+      this.byId = new Object[var1];
       this.nextId = 0;
       this.size = 0;
 
       for(int var4 = 0; var4 < var2.length; ++var4) {
          if (var2[var4] != null) {
