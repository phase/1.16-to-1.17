--- net/minecraft/util/DirectoryLock.java
+++ net/minecraft/util/DirectoryLock.java
@@ -3,16 +3,19 @@
 import com.google.common.base.Charsets;
 import java.io.IOException;
 import java.nio.ByteBuffer;
 import java.nio.channels.FileChannel;
 import java.nio.channels.FileLock;
+import java.nio.file.AccessDeniedException;
 import java.nio.file.Files;
 import java.nio.file.LinkOption;
+import java.nio.file.NoSuchFileException;
 import java.nio.file.Path;
 import java.nio.file.StandardOpenOption;
 
 public class DirectoryLock implements AutoCloseable {
+   public static final String LOCK_FILE = "session.lock";
    private final FileChannel lockFile;
    private final FileLock lock;
    private static final ByteBuffer DUMMY;
 
    public static DirectoryLock create(Path var0) throws IOException {
@@ -64,10 +67,68 @@
 
    public boolean isValid() {
       return this.lock.isValid();
    }
 
+   public static boolean isLocked(Path var0) throws IOException {
+      Path var1 = var0.resolve("session.lock");
+
+      try {
+         FileChannel var2 = FileChannel.open(var1, StandardOpenOption.WRITE);
+         Throwable var3 = null;
+
+         Throwable var6;
+         try {
+            FileLock var4 = var2.tryLock();
+            Throwable var5 = null;
+
+            try {
+               var6 = var4 == null;
+            } catch (Throwable var33) {
+               var6 = var33;
+               var5 = var33;
+               throw var33;
+            } finally {
+               if (var4 != null) {
+                  if (var5 != null) {
+                     try {
+                        var4.close();
+                     } catch (Throwable var32) {
+                        var5.addSuppressed(var32);
+                     }
+                  } else {
+                     var4.close();
+                  }
+               }
+
+            }
+         } catch (Throwable var35) {
+            var3 = var35;
+            throw var35;
+         } finally {
+            if (var2 != null) {
+               if (var3 != null) {
+                  try {
+                     var2.close();
+                  } catch (Throwable var31) {
+                     var3.addSuppressed(var31);
+                  }
+               } else {
+                  var2.close();
+               }
+            }
+
+         }
+
+         return (boolean)var6;
+      } catch (AccessDeniedException var37) {
+         return true;
+      } catch (NoSuchFileException var38) {
+         return false;
+      }
+   }
+
    static {
       byte[] var0 = "\u2603".getBytes(Charsets.UTF_8);
       DUMMY = ByteBuffer.allocateDirect(var0.length);
       DUMMY.put(var0);
       DUMMY.flip();
