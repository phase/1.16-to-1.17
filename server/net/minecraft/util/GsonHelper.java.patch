--- net/minecraft/util/GsonHelper.java
+++ net/minecraft/util/GsonHelper.java
@@ -7,35 +7,61 @@
 import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonParseException;
 import com.google.gson.JsonPrimitive;
 import com.google.gson.JsonSyntaxException;
+import com.google.gson.reflect.TypeToken;
 import com.google.gson.stream.JsonReader;
 import java.io.IOException;
 import java.io.Reader;
 import java.io.StringReader;
+import java.math.BigDecimal;
+import java.math.BigInteger;
 import javax.annotation.Nullable;
 import net.minecraft.core.Registry;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.item.Item;
 import org.apache.commons.lang3.StringUtils;
 
 public class GsonHelper {
    private static final Gson GSON = (new GsonBuilder()).create();
 
+   public GsonHelper() {
+   }
+
    public static boolean isStringValue(JsonObject var0, String var1) {
       return !isValidPrimitive(var0, var1) ? false : var0.getAsJsonPrimitive(var1).isString();
    }
 
+   public static boolean isStringValue(JsonElement var0) {
+      return !var0.isJsonPrimitive() ? false : var0.getAsJsonPrimitive().isString();
+   }
+
+   public static boolean isNumberValue(JsonObject var0, String var1) {
+      return !isValidPrimitive(var0, var1) ? false : var0.getAsJsonPrimitive(var1).isNumber();
+   }
+
    public static boolean isNumberValue(JsonElement var0) {
       return !var0.isJsonPrimitive() ? false : var0.getAsJsonPrimitive().isNumber();
    }
 
+   public static boolean isBooleanValue(JsonObject var0, String var1) {
+      return !isValidPrimitive(var0, var1) ? false : var0.getAsJsonPrimitive(var1).isBoolean();
+   }
+
+   public static boolean isBooleanValue(JsonElement var0) {
+      return !var0.isJsonPrimitive() ? false : var0.getAsJsonPrimitive().isBoolean();
+   }
+
    public static boolean isArrayNode(JsonObject var0, String var1) {
       return !isValidNode(var0, var1) ? false : var0.get(var1).isJsonArray();
    }
 
+   public static boolean isObjectNode(JsonObject var0, String var1) {
+      return !isValidNode(var0, var1) ? false : var0.get(var1).isJsonObject();
+   }
+
    public static boolean isValidPrimitive(JsonObject var0, String var1) {
       return !isValidNode(var0, var1) ? false : var0.get(var1).isJsonPrimitive();
    }
 
    public static boolean isValidNode(JsonObject var0, String var1) {
@@ -83,10 +109,14 @@
       } else {
          throw new JsonSyntaxException("Missing " + var1 + ", expected to find an item");
       }
    }
 
+   public static Item getAsItem(JsonObject var0, String var1, Item var2) {
+      return var0.has(var1) ? convertToItem(var0.get(var1), var1) : var2;
+   }
+
    public static boolean convertToBoolean(JsonElement var0, String var1) {
       if (var0.isJsonPrimitive()) {
          return var0.getAsBoolean();
       } else {
          throw new JsonSyntaxException("Expected " + var1 + " to be a Boolean, was " + getType(var0));
@@ -103,10 +133,30 @@
 
    public static boolean getAsBoolean(JsonObject var0, String var1, boolean var2) {
       return var0.has(var1) ? convertToBoolean(var0.get(var1), var1) : var2;
    }
 
+   public static double convertToDouble(JsonElement var0, String var1) {
+      if (var0.isJsonPrimitive() && var0.getAsJsonPrimitive().isNumber()) {
+         return var0.getAsDouble();
+      } else {
+         throw new JsonSyntaxException("Expected " + var1 + " to be a Double, was " + getType(var0));
+      }
+   }
+
+   public static double getAsDouble(JsonObject var0, String var1) {
+      if (var0.has(var1)) {
+         return convertToDouble(var0.get(var1), var1);
+      } else {
+         throw new JsonSyntaxException("Missing " + var1 + ", expected to find a Double");
+      }
+   }
+
+   public static double getAsDouble(JsonObject var0, String var1, double var2) {
+      return var0.has(var1) ? convertToDouble(var0.get(var1), var1) : var2;
+   }
+
    public static float convertToFloat(JsonElement var0, String var1) {
       if (var0.isJsonPrimitive() && var0.getAsJsonPrimitive().isNumber()) {
          return var0.getAsFloat();
       } else {
          throw new JsonSyntaxException("Expected " + var1 + " to be a Float, was " + getType(var0));
@@ -171,14 +221,102 @@
       } else {
          throw new JsonSyntaxException("Expected " + var1 + " to be a Byte, was " + getType(var0));
       }
    }
 
+   public static byte getAsByte(JsonObject var0, String var1) {
+      if (var0.has(var1)) {
+         return convertToByte(var0.get(var1), var1);
+      } else {
+         throw new JsonSyntaxException("Missing " + var1 + ", expected to find a Byte");
+      }
+   }
+
    public static byte getAsByte(JsonObject var0, String var1, byte var2) {
       return var0.has(var1) ? convertToByte(var0.get(var1), var1) : var2;
    }
 
+   public static char convertToCharacter(JsonElement var0, String var1) {
+      if (var0.isJsonPrimitive() && var0.getAsJsonPrimitive().isNumber()) {
+         return var0.getAsCharacter();
+      } else {
+         throw new JsonSyntaxException("Expected " + var1 + " to be a Character, was " + getType(var0));
+      }
+   }
+
+   public static char getAsCharacter(JsonObject var0, String var1) {
+      if (var0.has(var1)) {
+         return convertToCharacter(var0.get(var1), var1);
+      } else {
+         throw new JsonSyntaxException("Missing " + var1 + ", expected to find a Character");
+      }
+   }
+
+   public static char getAsCharacter(JsonObject var0, String var1, char var2) {
+      return var0.has(var1) ? convertToCharacter(var0.get(var1), var1) : var2;
+   }
+
+   public static BigDecimal convertToBigDecimal(JsonElement var0, String var1) {
+      if (var0.isJsonPrimitive() && var0.getAsJsonPrimitive().isNumber()) {
+         return var0.getAsBigDecimal();
+      } else {
+         throw new JsonSyntaxException("Expected " + var1 + " to be a BigDecimal, was " + getType(var0));
+      }
+   }
+
+   public static BigDecimal getAsBigDecimal(JsonObject var0, String var1) {
+      if (var0.has(var1)) {
+         return convertToBigDecimal(var0.get(var1), var1);
+      } else {
+         throw new JsonSyntaxException("Missing " + var1 + ", expected to find a BigDecimal");
+      }
+   }
+
+   public static BigDecimal getAsBigDecimal(JsonObject var0, String var1, BigDecimal var2) {
+      return var0.has(var1) ? convertToBigDecimal(var0.get(var1), var1) : var2;
+   }
+
+   public static BigInteger convertToBigInteger(JsonElement var0, String var1) {
+      if (var0.isJsonPrimitive() && var0.getAsJsonPrimitive().isNumber()) {
+         return var0.getAsBigInteger();
+      } else {
+         throw new JsonSyntaxException("Expected " + var1 + " to be a BigInteger, was " + getType(var0));
+      }
+   }
+
+   public static BigInteger getAsBigInteger(JsonObject var0, String var1) {
+      if (var0.has(var1)) {
+         return convertToBigInteger(var0.get(var1), var1);
+      } else {
+         throw new JsonSyntaxException("Missing " + var1 + ", expected to find a BigInteger");
+      }
+   }
+
+   public static BigInteger getAsBigInteger(JsonObject var0, String var1, BigInteger var2) {
+      return var0.has(var1) ? convertToBigInteger(var0.get(var1), var1) : var2;
+   }
+
+   public static short convertToShort(JsonElement var0, String var1) {
+      if (var0.isJsonPrimitive() && var0.getAsJsonPrimitive().isNumber()) {
+         return var0.getAsShort();
+      } else {
+         throw new JsonSyntaxException("Expected " + var1 + " to be a Short, was " + getType(var0));
+      }
+   }
+
+   public static short getAsShort(JsonObject var0, String var1) {
+      if (var0.has(var1)) {
+         return convertToShort(var0.get(var1), var1);
+      } else {
+         throw new JsonSyntaxException("Missing " + var1 + ", expected to find a Short");
+      }
+   }
+
+   public static short getAsShort(JsonObject var0, String var1, short var2) {
+      return var0.has(var1) ? convertToShort(var0.get(var1), var1) : var2;
+   }
+
    public static JsonObject convertToJsonObject(JsonElement var0, String var1) {
       if (var0.isJsonObject()) {
          return var0.getAsJsonObject();
       } else {
          throw new JsonSyntaxException("Expected " + var1 + " to be a JsonObject, was " + getType(var0));
@@ -274,15 +412,41 @@
          throw new JsonParseException(var5);
       }
    }
 
    @Nullable
+   public static <T> T fromJson(Gson var0, Reader var1, TypeToken<T> var2, boolean var3) {
+      try {
+         JsonReader var4 = new JsonReader(var1);
+         var4.setLenient(var3);
+         return var0.getAdapter(var2).read(var4);
+      } catch (IOException var5) {
+         throw new JsonParseException(var5);
+      }
+   }
+
+   @Nullable
+   public static <T> T fromJson(Gson var0, String var1, TypeToken<T> var2, boolean var3) {
+      return fromJson(var0, (Reader)(new StringReader(var1)), (TypeToken)var2, var3);
+   }
+
+   @Nullable
    public static <T> T fromJson(Gson var0, String var1, Class<T> var2, boolean var3) {
-      return fromJson(var0, (Reader)(new StringReader(var1)), var2, var3);
+      return fromJson(var0, (Reader)(new StringReader(var1)), (Class)var2, var3);
    }
 
    @Nullable
+   public static <T> T fromJson(Gson var0, Reader var1, TypeToken<T> var2) {
+      return fromJson(var0, var1, var2, false);
+   }
+
+   @Nullable
+   public static <T> T fromJson(Gson var0, String var1, TypeToken<T> var2) {
+      return fromJson(var0, var1, var2, false);
+   }
+
+   @Nullable
    public static <T> T fromJson(Gson var0, Reader var1, Class<T> var2) {
       return fromJson(var0, var1, var2, false);
    }
 
    @Nullable
