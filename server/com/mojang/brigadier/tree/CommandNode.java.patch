--- com/mojang/brigadier/tree/CommandNode.java
+++ com/mojang/brigadier/tree/CommandNode.java
@@ -14,19 +14,17 @@
 import java.util.Collections;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.LinkedHashMap;
 import java.util.Map;
-import java.util.Map.Entry;
 import java.util.concurrent.CompletableFuture;
 import java.util.function.Predicate;
-import java.util.stream.Collectors;
 
 public abstract class CommandNode<S> implements Comparable<CommandNode<S>> {
-   private Map<String, CommandNode<S>> children = new LinkedHashMap();
-   private Map<String, LiteralCommandNode<S>> literals = new LinkedHashMap();
-   private Map<String, ArgumentCommandNode<S, ?>> arguments = new LinkedHashMap();
+   private final Map<String, CommandNode<S>> children = new LinkedHashMap();
+   private final Map<String, LiteralCommandNode<S>> literals = new LinkedHashMap();
+   private final Map<String, ArgumentCommandNode<S, ?>> arguments = new LinkedHashMap();
    private final Predicate<S> requirement;
    private final CommandNode<S> redirect;
    private final RedirectModifier<S> modifier;
    private final boolean forks;
    private Command<S> command;
@@ -86,13 +84,10 @@
             } else if (var1 instanceof ArgumentCommandNode) {
                this.arguments.put(var1.getName(), (ArgumentCommandNode)var1);
             }
          }
 
-         this.children = (Map)this.children.entrySet().stream().sorted(Entry.comparingByValue()).collect(Collectors.toMap(Entry::getKey, Entry::getValue, (var0, var1x) -> {
-            return var0;
-         }, LinkedHashMap::new));
       }
    }
 
    public void findAmbiguities(AmbiguityConsumer<S> var1) {
       HashSet var2 = new HashSet();
