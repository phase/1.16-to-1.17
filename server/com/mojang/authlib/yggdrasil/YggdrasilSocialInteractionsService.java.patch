--- com/mojang/authlib/yggdrasil/YggdrasilSocialInteractionsService.java
+++ com/mojang/authlib/yggdrasil/YggdrasilSocialInteractionsService.java
@@ -1,14 +1,17 @@
 package com.mojang.authlib.yggdrasil;
 
 import com.mojang.authlib.Environment;
 import com.mojang.authlib.HttpAuthenticationService;
 import com.mojang.authlib.exceptions.AuthenticationException;
-import com.mojang.authlib.exceptions.AuthenticationUnavailableException;
+import com.mojang.authlib.exceptions.MinecraftClientException;
+import com.mojang.authlib.exceptions.MinecraftClientHttpException;
 import com.mojang.authlib.minecraft.SocialInteractionsService;
+import com.mojang.authlib.minecraft.client.MinecraftClient;
 import com.mojang.authlib.yggdrasil.response.BlockListResponse;
 import com.mojang.authlib.yggdrasil.response.PrivilegesResponse;
+import java.net.Proxy;
 import java.net.URL;
 import java.time.Instant;
 import java.util.Set;
 import java.util.UUID;
 import javax.annotation.Nullable;
@@ -16,23 +19,22 @@
 public class YggdrasilSocialInteractionsService implements SocialInteractionsService {
    private static final long BLOCKLIST_REQUEST_COOLDOWN_SECONDS = 120L;
    private static final UUID ZERO_UUID = new UUID(0L, 0L);
    private final URL routePrivileges;
    private final URL routeBlocklist;
-   private final YggdrasilAuthenticationService authenticationService;
-   private final String accessToken;
+   private final MinecraftClient minecraftClient;
    private boolean serversAllowed;
    private boolean realmsAllowed;
    private boolean chatAllowed;
+   private boolean telemetryAllowed;
    @Nullable
    private Instant nextAcceptableBlockRequest;
    @Nullable
    private Set<UUID> blockList;
 
-   public YggdrasilSocialInteractionsService(YggdrasilAuthenticationService var1, String var2, Environment var3) throws AuthenticationException {
-      this.authenticationService = var1;
-      this.accessToken = var2;
+   public YggdrasilSocialInteractionsService(String var1, Proxy var2, Environment var3) throws AuthenticationException {
+      this.minecraftClient = new MinecraftClient(var1, var2);
       this.routePrivileges = HttpAuthenticationService.constantURL(var3.getServicesHost() + "/privileges");
       this.routeBlocklist = HttpAuthenticationService.constantURL(var3.getServicesHost() + "/privacy/blocklist");
       this.checkPrivileges();
    }
 
@@ -46,10 +48,14 @@
 
    public boolean chatAllowed() {
       return this.chatAllowed;
    }
 
+   public boolean telemetryAllowed() {
+      return this.telemetryAllowed;
+   }
+
    public boolean isBlockedPlayer(UUID var1) {
       if (var1.equals(ZERO_UUID)) {
          return false;
       } else {
          if (this.blockList == null) {
@@ -69,24 +75,29 @@
          return null;
       } else {
          this.nextAcceptableBlockRequest = Instant.now().plusSeconds(120L);
 
          try {
-            BlockListResponse var1 = (BlockListResponse)this.authenticationService.makeRequest(this.routeBlocklist, (Object)null, BlockListResponse.class, "Bearer " + this.accessToken);
-            return var1 == null ? null : var1.getBlockedProfiles();
-         } catch (AuthenticationException var2) {
+            BlockListResponse var1 = (BlockListResponse)this.minecraftClient.get(this.routeBlocklist, BlockListResponse.class);
+            return var1.getBlockedProfiles();
+         } catch (MinecraftClientHttpException var2) {
             return null;
+         } catch (MinecraftClientException var3) {
+            return null;
          }
       }
    }
 
    private void checkPrivileges() throws AuthenticationException {
-      PrivilegesResponse var1 = (PrivilegesResponse)this.authenticationService.makeRequest(this.routePrivileges, (Object)null, PrivilegesResponse.class, "Bearer " + this.accessToken);
-      if (var1 == null) {
-         throw new AuthenticationUnavailableException();
-      } else {
-         this.chatAllowed = var1.getPrivileges().getOnlineChat().isEnabled();
-         this.serversAllowed = var1.getPrivileges().getMultiplayerServer().isEnabled();
-         this.realmsAllowed = var1.getPrivileges().getMultiplayerRealms().isEnabled();
+      try {
+         PrivilegesResponse var1 = (PrivilegesResponse)this.minecraftClient.get(this.routePrivileges, PrivilegesResponse.class);
+         this.chatAllowed = (Boolean)var1.getPrivileges().getOnlineChat().map(PrivilegesResponse.Privileges.Privilege::isEnabled).orElse(false);
+         this.serversAllowed = (Boolean)var1.getPrivileges().getMultiplayerServer().map(PrivilegesResponse.Privileges.Privilege::isEnabled).orElse(false);
+         this.realmsAllowed = (Boolean)var1.getPrivileges().getMultiplayerRealms().map(PrivilegesResponse.Privileges.Privilege::isEnabled).orElse(false);
+         this.telemetryAllowed = (Boolean)var1.getPrivileges().getTelemetry().map(PrivilegesResponse.Privileges.Privilege::isEnabled).orElse(false);
+      } catch (MinecraftClientHttpException var2) {
+         throw var2.toAuthenticationException();
+      } catch (MinecraftClientException var3) {
+         throw var3.toAuthenticationException();
       }
    }
 }
