--- net/minecraft/locale/Language.java
+++ net/minecraft/locale/Language.java
@@ -11,15 +11,15 @@
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.nio.charset.StandardCharsets;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.Map.Entry;
 import java.util.function.BiConsumer;
 import java.util.regex.Pattern;
-import java.util.stream.Stream;
 import net.minecraft.network.chat.FormattedText;
 import net.minecraft.network.chat.Style;
 import net.minecraft.util.FormattedCharSequence;
 import net.minecraft.util.GsonHelper;
 import net.minecraft.util.StringDecomposer;
@@ -28,54 +28,54 @@
 
 public abstract class Language {
    private static final Logger LOGGER = LogManager.getLogger();
    private static final Gson GSON = new Gson();
    private static final Pattern UNSUPPORTED_FORMAT_PATTERN = Pattern.compile("%(\\d+\\$)?[\\d.]*[df]");
+   public static final String DEFAULT = "en_us";
    private static volatile Language instance = loadDefault();
 
    public Language() {
    }
 
    private static Language loadDefault() {
       Builder var0 = ImmutableMap.builder();
+      Objects.requireNonNull(var0);
       BiConsumer var1 = var0::put;
+      String var2 = "/assets/minecraft/lang/en_us.json";
 
       try {
-         InputStream var2 = Language.class.getResourceAsStream("/assets/minecraft/lang/en_us.json");
-         Throwable var3 = null;
+         InputStream var3 = Language.class.getResourceAsStream("/assets/minecraft/lang/en_us.json");
 
          try {
-            loadFromJson(var2, var1);
-         } catch (Throwable var13) {
-            var3 = var13;
-            throw var13;
-         } finally {
-            if (var2 != null) {
-               if (var3 != null) {
-                  try {
-                     var2.close();
-                  } catch (Throwable var12) {
-                     var3.addSuppressed(var12);
-                  }
-               } else {
-                  var2.close();
+            loadFromJson(var3, var1);
+         } catch (Throwable var7) {
+            if (var3 != null) {
+               try {
+                  var3.close();
+               } catch (Throwable var6) {
+                  var7.addSuppressed(var6);
                }
             }
 
+            throw var7;
          }
-      } catch (JsonParseException | IOException var15) {
-         LOGGER.error("Couldn't read strings from /assets/minecraft/lang/en_us.json", var15);
+
+         if (var3 != null) {
+            var3.close();
+         }
+      } catch (JsonParseException | IOException var8) {
+         LOGGER.error("Couldn't read strings from {}", "/assets/minecraft/lang/en_us.json", var8);
       }
 
-      final ImmutableMap var16 = var0.build();
+      final ImmutableMap var9 = var0.build();
       return new Language() {
          public String getOrDefault(String var1) {
-            return (String)var16.getOrDefault(var1, var1);
+            return (String)var9.getOrDefault(var1, var1);
          }
 
          public boolean has(String var1) {
-            return var16.containsKey(var1);
+            return var9.containsKey(var1);
          }
 
          public boolean isDefaultRightToLeft() {
             return false;
          }
@@ -95,11 +95,11 @@
       Iterator var3 = var2.entrySet().iterator();
 
       while(var3.hasNext()) {
          Entry var4 = (Entry)var3.next();
          String var5 = UNSUPPORTED_FORMAT_PATTERN.matcher(GsonHelper.convertToString((JsonElement)var4.getValue(), (String)var4.getKey())).replaceAll("%$1s");
-         var1.accept(var4.getKey(), var5);
+         var1.accept((String)var4.getKey(), var5);
       }
 
    }
 
    public static Language getInstance() {
@@ -117,11 +117,8 @@
    public abstract boolean isDefaultRightToLeft();
 
    public abstract FormattedCharSequence getVisualOrder(FormattedText var1);
 
    public List<FormattedCharSequence> getVisualOrder(List<FormattedText> var1) {
-      Stream var10000 = var1.stream();
-      Language var10001 = getInstance();
-      var10001.getClass();
-      return (List)var10000.map(var10001::getVisualOrder).collect(ImmutableList.toImmutableList());
+      return (List)var1.stream().map(this::getVisualOrder).collect(ImmutableList.toImmutableList());
    }
 }
