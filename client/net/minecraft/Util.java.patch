--- net/minecraft/Util.java
+++ net/minecraft/Util.java
@@ -1,13 +1,15 @@
 package net.minecraft;
 
 import com.google.common.collect.Iterators;
 import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
 import com.google.common.util.concurrent.MoreExecutors;
 import com.mojang.datafixers.DataFixUtils;
 import com.mojang.datafixers.DSL.TypeReference;
 import com.mojang.datafixers.types.Type;
+import com.mojang.datafixers.util.Pair;
 import com.mojang.serialization.DataResult;
 import it.unimi.dsi.fastutil.Hash.Strategy;
 import java.io.File;
 import java.io.IOException;
 import java.lang.management.ManagementFactory;
@@ -39,12 +41,14 @@
 import java.util.concurrent.Executors;
 import java.util.concurrent.ForkJoinPool;
 import java.util.concurrent.ForkJoinWorkerThread;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
+import java.util.function.BiFunction;
 import java.util.function.BooleanSupplier;
 import java.util.function.Consumer;
+import java.util.function.Function;
 import java.util.function.LongSupplier;
 import java.util.function.Supplier;
 import java.util.stream.Collector;
 import java.util.stream.Collectors;
 import java.util.stream.IntStream;
@@ -66,10 +70,13 @@
    private static final ExecutorService IO_POOL = makeIoExecutor();
    public static LongSupplier timeSource = System::nanoTime;
    public static final UUID NIL_UUID = new UUID(0L, 0L);
    private static final Logger LOGGER = LogManager.getLogger();
 
+   public Util() {
+   }
+
    public static <K, V> Collector<Entry<? extends K, ? extends V>, ?, Map<K, V>> toMap() {
       return Collectors.toMap(Entry::getKey, Entry::getValue);
    }
 
    public static <T extends Comparable<T>> String getPropertyName(Property<T> var0, Object var1) {
@@ -91,11 +98,11 @@
    public static long getEpochMillis() {
       return Instant.now().toEpochMilli();
    }
 
    private static ExecutorService makeExecutor(String var0) {
-      int var1 = Mth.clamp(Runtime.getRuntime().availableProcessors() - 1, 1, 7);
+      int var1 = Mth.clamp((int)(Runtime.getRuntime().availableProcessors() - 1), (int)1, (int)7);
       Object var2;
       if (var1 <= 0) {
          var2 = MoreExecutors.newDirectExecutorService();
       } else {
          var2 = new ForkJoinPool(var1, (var1x) -> {
@@ -203,10 +210,25 @@
       }
 
       return var2;
    }
 
+   public static Runnable wrapThreadWithTaskName(String var0, Runnable var1) {
+      return SharedConstants.IS_RUNNING_IN_IDE ? () -> {
+         Thread var2 = Thread.currentThread();
+         String var3 = var2.getName();
+         var2.setName(var0);
+
+         try {
+            var1.run();
+         } finally {
+            var2.setName(var3);
+         }
+
+      } : var1;
+   }
+
    public static Util.OS getPlatform() {
       String var0 = System.getProperty("os.name").toLowerCase(Locale.ROOT);
       if (var0.contains("win")) {
          return Util.OS.WINDOWS;
       } else if (var0.contains("mac")) {
@@ -283,10 +305,28 @@
    public static <K> Strategy<K> identityStrategy() {
       return Util.IdentityStrategy.INSTANCE;
    }
 
    public static <V> CompletableFuture<List<V>> sequence(List<? extends CompletableFuture<? extends V>> var0) {
+      return (CompletableFuture)var0.stream().reduce(CompletableFuture.completedFuture(Lists.newArrayList()), (var0x, var1) -> {
+         return var1.thenCombine(var0x, (var0, var1x) -> {
+            ArrayList var2 = Lists.newArrayListWithCapacity(var1x.size() + 1);
+            var2.addAll(var1x);
+            var2.add(var0);
+            return var2;
+         });
+      }, (var0x, var1) -> {
+         return var0x.thenCombine(var1, (var0, var1x) -> {
+            ArrayList var2 = Lists.newArrayListWithCapacity(var0.size() + var1x.size());
+            var2.addAll(var0);
+            var2.addAll(var1x);
+            return var2;
+         });
+      });
+   }
+
+   public static <V> CompletableFuture<List<V>> sequenceFailFast(List<? extends CompletableFuture<? extends V>> var0) {
       ArrayList var1 = Lists.newArrayListWithCapacity(var0.size());
       CompletableFuture[] var2 = new CompletableFuture[var0.size()];
       CompletableFuture var3 = new CompletableFuture();
       var0.forEach((var3x) -> {
          int var4 = var1.size();
@@ -321,24 +361,35 @@
 
    public static Runnable name(Runnable var0, Supplier<String> var1) {
       return var0;
    }
 
+   public static final void logAndPauseIfInIde(String var0) {
+      LOGGER.error(var0);
+      if (SharedConstants.IS_RUNNING_IN_IDE) {
+         doPause();
+      }
+
+   }
+
    public static <T extends Throwable> T pauseInIde(T var0) {
       if (SharedConstants.IS_RUNNING_IN_IDE) {
          LOGGER.error("Trying to throw a fatal exception, pausing in IDE", var0);
+         doPause();
+      }
 
-         while(true) {
-            try {
-               Thread.sleep(1000L);
-               LOGGER.error("paused");
-            } catch (InterruptedException var2) {
-               return var0;
-            }
+      return var0;
+   }
+
+   private static void doPause() {
+      while(true) {
+         try {
+            Thread.sleep(1000L);
+            LOGGER.error("paused");
+         } catch (InterruptedException var1) {
+            return;
          }
-      } else {
-         return var0;
       }
    }
 
    public static String describeError(Throwable var0) {
       if (var0.getCause() != null) {
@@ -354,10 +405,14 @@
 
    public static int getRandom(int[] var0, Random var1) {
       return var0[var1.nextInt(var0.length)];
    }
 
+   public static <T> T getRandom(List<T> var0, Random var1) {
+      return var0.get(var1.nextInt(var0.size()));
+   }
+
    private static BooleanSupplier createRenamer(final Path var0, final Path var1) {
       return new BooleanSupplier() {
          public boolean getAsBoolean() {
             try {
                Files.move(var0, var1);
@@ -495,10 +550,19 @@
       } else {
          return DataResult.success(var2);
       }
    }
 
+   public static <T> DataResult<List<T>> fixedSize(List<T> var0, int var1) {
+      if (var0.size() != var1) {
+         String var2 = "Input is not a list of " + var1 + " elements";
+         return var0.size() >= var1 ? DataResult.error(var2, var0.subList(0, var1)) : DataResult.error(var2);
+      } else {
+         return DataResult.success(var0);
+      }
+   }
+
    public static void startTimerHackThread() {
       Thread var0 = new Thread("Timer hack thread") {
          public void run() {
             while(true) {
                try {
@@ -525,10 +589,40 @@
       return (String)var0.toLowerCase(Locale.ROOT).chars().mapToObj((var1x) -> {
          return var1.test((char)var1x) ? Character.toString((char)var1x) : "_";
       }).collect(Collectors.joining());
    }
 
+   public static <T, R> Function<T, R> memoize(final Function<T, R> var0) {
+      return new Function<T, R>() {
+         private final Map<T, R> cache = Maps.newHashMap();
+
+         public R apply(T var1) {
+            return this.cache.computeIfAbsent(var1, var0);
+         }
+
+         public String toString() {
+            return "memoize/1[function=" + var0 + ", size=" + this.cache.size() + "]";
+         }
+      };
+   }
+
+   public static <T, U, R> BiFunction<T, U, R> memoize(final BiFunction<T, U, R> var0) {
+      return new BiFunction<T, U, R>() {
+         private final Map<Pair<T, U>, R> cache = Maps.newHashMap();
+
+         public R apply(T var1, U var2) {
+            return this.cache.computeIfAbsent(Pair.of(var1, var2), (var1x) -> {
+               return var0.apply(var1x.getFirst(), var1x.getSecond());
+            });
+         }
+
+         public String toString() {
+            return "memoize/2[function=" + var0 + ", size=" + this.cache.size() + "]";
+         }
+      };
+   }
+
    static enum IdentityStrategy implements Strategy<Object> {
       INSTANCE;
 
       private IdentityStrategy() {
       }
