--- net/minecraft/Util.java
+++ net/minecraft/Util.java
@@ -45,10 +45,11 @@
 import java.util.function.Consumer;
 import java.util.function.LongSupplier;
 import java.util.function.Supplier;
 import java.util.stream.Collector;
 import java.util.stream.Collectors;
+import java.util.stream.DoubleStream;
 import java.util.stream.IntStream;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.Bootstrap;
@@ -203,10 +204,25 @@
       }
 
       return var2;
    }
 
+   public static Runnable wrapThreadWithTaskName(String var0, Runnable var1) {
+      return SharedConstants.IS_RUNNING_IN_IDE ? () -> {
+         Thread var2 = Thread.currentThread();
+         String var3 = var2.getName();
+         var2.setName(var0);
+
+         try {
+            var1.run();
+         } finally {
+            var2.setName(var3);
+         }
+
+      } : var1;
+   }
+
    public static Util.OS getPlatform() {
       String var0 = System.getProperty("os.name").toLowerCase(Locale.ROOT);
       if (var0.contains("win")) {
          return Util.OS.WINDOWS;
       } else if (var0.contains("mac")) {
@@ -283,10 +299,28 @@
    public static <K> Strategy<K> identityStrategy() {
       return Util.IdentityStrategy.INSTANCE;
    }
 
    public static <V> CompletableFuture<List<V>> sequence(List<? extends CompletableFuture<? extends V>> var0) {
+      return (CompletableFuture)var0.stream().reduce(CompletableFuture.completedFuture(Lists.newArrayList()), (var0x, var1) -> {
+         return var1.thenCombine(var0x, (var0, var1x) -> {
+            ArrayList var2 = Lists.newArrayListWithCapacity(var1x.size() + 1);
+            var2.addAll(var1x);
+            var2.add(var0);
+            return var2;
+         });
+      }, (var0x, var1) -> {
+         return var0x.thenCombine(var1, (var0, var1x) -> {
+            ArrayList var2 = Lists.newArrayListWithCapacity(var0.size() + var1x.size());
+            var2.addAll(var0);
+            var2.addAll(var1x);
+            return var2;
+         });
+      });
+   }
+
+   public static <V> CompletableFuture<List<V>> sequenceFailFast(List<? extends CompletableFuture<? extends V>> var0) {
       ArrayList var1 = Lists.newArrayListWithCapacity(var0.size());
       CompletableFuture[] var2 = new CompletableFuture[var0.size()];
       CompletableFuture var3 = new CompletableFuture();
       var0.forEach((var3x) -> {
          int var4 = var1.size();
@@ -321,24 +355,35 @@
 
    public static Runnable name(Runnable var0, Supplier<String> var1) {
       return var0;
    }
 
+   public static final void logAndPauseIfInIde(String var0) {
+      LOGGER.error(var0);
+      if (SharedConstants.IS_RUNNING_IN_IDE) {
+         doPause();
+      }
+
+   }
+
    public static <T extends Throwable> T pauseInIde(T var0) {
       if (SharedConstants.IS_RUNNING_IN_IDE) {
          LOGGER.error("Trying to throw a fatal exception, pausing in IDE", var0);
+         doPause();
+      }
 
-         while(true) {
-            try {
-               Thread.sleep(1000L);
-               LOGGER.error("paused");
-            } catch (InterruptedException var2) {
-               return var0;
-            }
+      return var0;
+   }
+
+   private static void doPause() {
+      while(true) {
+         try {
+            Thread.sleep(1000L);
+            LOGGER.error("paused");
+         } catch (InterruptedException var1) {
+            return;
          }
-      } else {
-         return var0;
       }
    }
 
    public static String describeError(Throwable var0) {
       if (var0.getCause() != null) {
@@ -354,10 +399,14 @@
 
    public static int getRandom(int[] var0, Random var1) {
       return var0[var1.nextInt(var0.length)];
    }
 
+   public static <T> T getRandom(List<T> var0, Random var1) {
+      return var0.get(var1.nextInt(var0.size()));
+   }
+
    private static BooleanSupplier createRenamer(final Path var0, final Path var1) {
       return new BooleanSupplier() {
          public boolean getAsBoolean() {
             try {
                Files.move(var0, var1);
@@ -495,10 +544,20 @@
       } else {
          return DataResult.success(var2);
       }
    }
 
+   public static DataResult<double[]> fixedSize(DoubleStream var0, int var1) {
+      double[] var2 = var0.limit((long)(var1 + 1)).toArray();
+      if (var2.length != var1) {
+         String var3 = "Input is not a list of " + var1 + " doubles";
+         return var2.length >= var1 ? DataResult.error(var3, Arrays.copyOf(var2, var1)) : DataResult.error(var3);
+      } else {
+         return DataResult.success(var2);
+      }
+   }
+
    public static void startTimerHackThread() {
       Thread var0 = new Thread("Timer hack thread") {
          public void run() {
             while(true) {
                try {
