--- net/minecraft/commands/arguments/blocks/BlockStateParser.java
+++ net/minecraft/commands/arguments/blocks/BlockStateParser.java
@@ -47,10 +47,16 @@
    });
    public static final Dynamic2CommandExceptionType ERROR_EXPECTED_VALUE = new Dynamic2CommandExceptionType((var0, var1) -> {
       return new TranslatableComponent("argument.block.property.novalue", new Object[]{var0, var1});
    });
    public static final SimpleCommandExceptionType ERROR_EXPECTED_END_OF_PROPERTIES = new SimpleCommandExceptionType(new TranslatableComponent("argument.block.property.unclosed"));
+   private static final char SYNTAX_START_PROPERTIES = '[';
+   private static final char SYNTAX_START_NBT = '{';
+   private static final char SYNTAX_END_PROPERTIES = ']';
+   private static final char SYNTAX_EQUALS = '=';
+   private static final char SYNTAX_PROPERTY_SEPARATOR = ',';
+   private static final char SYNTAX_TAG = '#';
    private static final BiFunction<SuggestionsBuilder, TagCollection<Block>, CompletableFuture<Suggestions>> SUGGEST_NOTHING = (var0, var1) -> {
       return var0.buildFuture();
    };
    private final StringReader reader;
    private final boolean forTesting;
@@ -137,11 +143,11 @@
       Iterator var4 = this.state.getProperties().iterator();
 
       while(var4.hasNext()) {
          Property var5 = (Property)var4.next();
          if (!this.properties.containsKey(var5) && var5.getName().startsWith(var3)) {
-            var1.suggest(var5.getName() + '=');
+            var1.suggest(var5.getName() + "=");
          }
       }
 
       return var1.buildFuture();
    }
@@ -158,11 +164,11 @@
                Iterator var7 = var6.getStateDefinition().getProperties().iterator();
 
                while(var7.hasNext()) {
                   Property var8 = (Property)var7.next();
                   if (!this.vagueProperties.containsKey(var8.getName()) && var8.getName().startsWith(var3)) {
-                     var1.suggest(var8.getName() + '=');
+                     var1.suggest(var8.getName() + "=");
                   }
                }
             }
          }
       }
@@ -178,20 +184,20 @@
       return var1.buildFuture();
    }
 
    private boolean hasBlockEntity(TagCollection<Block> var1) {
       if (this.state != null) {
-         return this.state.getBlock().isEntityBlock();
+         return this.state.hasBlockEntity();
       } else {
          if (this.tag != null) {
             Tag var2 = var1.getTag(this.tag);
             if (var2 != null) {
                Iterator var3 = var2.getValues().iterator();
 
                while(var3.hasNext()) {
                   Block var4 = (Block)var3.next();
-                  if (var4.isEntityBlock()) {
+                  if (var4.defaultBlockState().hasBlockEntity()) {
                      return true;
                   }
                }
             }
          }
@@ -289,11 +295,11 @@
             Iterator var6 = var3.getValues().iterator();
 
             while(var6.hasNext()) {
                Block var7 = (Block)var6.next();
                var4 |= !var7.getStateDefinition().getProperties().isEmpty();
-               var5 |= var7.isEntityBlock();
+               var5 |= var7.defaultBlockState().hasBlockEntity();
                if (var4 && var5) {
                   break;
                }
             }
 
@@ -314,11 +320,11 @@
       if (var1.getRemaining().isEmpty()) {
          if (!this.state.getBlock().getStateDefinition().getProperties().isEmpty()) {
             var1.suggest(String.valueOf('['));
          }
 
-         if (this.state.getBlock().isEntityBlock()) {
+         if (this.state.hasBlockEntity()) {
             var1.suggest(String.valueOf('{'));
          }
       }
 
       return var1.buildFuture();
@@ -483,11 +489,11 @@
 
    private <T extends Comparable<T>> void setValue(Property<T> var1, String var2, int var3) throws CommandSyntaxException {
       Optional var4 = var1.getValue(var2);
       if (var4.isPresent()) {
          this.state = (BlockState)this.state.setValue(var1, (Comparable)var4.get());
-         this.properties.put(var1, var4.get());
+         this.properties.put(var1, (Comparable)var4.get());
       } else {
          this.reader.setCursor(var3);
          throw ERROR_INVALID_VALUE.createWithContext(this.reader, this.id.toString(), var1.getName(), var2);
       }
    }
