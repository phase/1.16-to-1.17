--- net/minecraft/commands/arguments/blocks/BlockPredicateArgument.java
+++ net/minecraft/commands/arguments/blocks/BlockPredicateArgument.java
@@ -15,10 +15,11 @@
 import java.util.Map.Entry;
 import java.util.concurrent.CompletableFuture;
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
 import net.minecraft.commands.CommandSourceStack;
+import net.minecraft.core.Registry;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtUtils;
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.tags.BlockTags;
@@ -51,16 +52,14 @@
             return var4;
          };
       } else {
          ResourceLocation var3 = var2.getTag();
          return (var2x) -> {
-            Tag var3x = var2x.getBlocks().getTag(var3);
-            if (var3x == null) {
-               throw ERROR_UNKNOWN_TAG.create(var3.toString());
-            } else {
-               return new BlockPredicateArgument.TagPredicate(var3x, var2.getVagueProperties(), var2.getNbt());
-            }
+            Tag var3x = var2x.getTagOrThrow(Registry.BLOCK_REGISTRY, var3, (var0) -> {
+               return ERROR_UNKNOWN_TAG.create(var0.toString());
+            });
+            return new BlockPredicateArgument.TagPredicate(var3x, var2.getVagueProperties(), var2.getNbt());
          };
       }
    }
 
    public static Predicate<BlockInWorld> getBlockPredicate(CommandContext<CommandSourceStack> var0, String var1) throws CommandSyntaxException {
@@ -82,91 +81,91 @@
 
    public Collection<String> getExamples() {
       return EXAMPLES;
    }
 
-   static class TagPredicate implements Predicate<BlockInWorld> {
-      private final Tag<Block> tag;
+   static class BlockPredicate implements Predicate<BlockInWorld> {
+      private final BlockState state;
+      private final Set<Property<?>> properties;
       @Nullable
       private final CompoundTag nbt;
-      private final Map<String, String> vagueProperties;
 
-      private TagPredicate(Tag<Block> var1, Map<String, String> var2, @Nullable CompoundTag var3) {
-         this.tag = var1;
-         this.vagueProperties = var2;
+      public BlockPredicate(BlockState var1, Set<Property<?>> var2, @Nullable CompoundTag var3) {
+         this.state = var1;
+         this.properties = var2;
          this.nbt = var3;
       }
 
       public boolean test(BlockInWorld var1) {
          BlockState var2 = var1.getState();
-         if (!var2.is(this.tag)) {
+         if (!var2.is(this.state.getBlock())) {
             return false;
          } else {
-            Iterator var3 = this.vagueProperties.entrySet().iterator();
+            Iterator var3 = this.properties.iterator();
 
             while(var3.hasNext()) {
-               Entry var4 = (Entry)var3.next();
-               Property var5 = var2.getBlock().getStateDefinition().getProperty((String)var4.getKey());
-               if (var5 == null) {
+               Property var4 = (Property)var3.next();
+               if (var2.getValue(var4) != this.state.getValue(var4)) {
                   return false;
                }
-
-               Comparable var6 = (Comparable)var5.getValue((String)var4.getValue()).orElse((Object)null);
-               if (var6 == null) {
-                  return false;
-               }
-
-               if (var2.getValue(var5) != var6) {
-                  return false;
-               }
             }
 
             if (this.nbt == null) {
                return true;
             } else {
-               BlockEntity var7 = var1.getEntity();
-               return var7 != null && NbtUtils.compareNbt(this.nbt, var7.save(new CompoundTag()), true);
+               BlockEntity var5 = var1.getEntity();
+               return var5 != null && NbtUtils.compareNbt(this.nbt, var5.save(new CompoundTag()), true);
             }
          }
       }
    }
 
-   static class BlockPredicate implements Predicate<BlockInWorld> {
-      private final BlockState state;
-      private final Set<Property<?>> properties;
+   public interface Result {
+      Predicate<BlockInWorld> create(TagContainer var1) throws CommandSyntaxException;
+   }
+
+   static class TagPredicate implements Predicate<BlockInWorld> {
+      private final Tag<Block> tag;
       @Nullable
       private final CompoundTag nbt;
+      private final Map<String, String> vagueProperties;
 
-      public BlockPredicate(BlockState var1, Set<Property<?>> var2, @Nullable CompoundTag var3) {
-         this.state = var1;
-         this.properties = var2;
+      TagPredicate(Tag<Block> var1, Map<String, String> var2, @Nullable CompoundTag var3) {
+         this.tag = var1;
+         this.vagueProperties = var2;
          this.nbt = var3;
       }
 
       public boolean test(BlockInWorld var1) {
          BlockState var2 = var1.getState();
-         if (!var2.is(this.state.getBlock())) {
+         if (!var2.is(this.tag)) {
             return false;
          } else {
-            Iterator var3 = this.properties.iterator();
+            Iterator var3 = this.vagueProperties.entrySet().iterator();
 
             while(var3.hasNext()) {
-               Property var4 = (Property)var3.next();
-               if (var2.getValue(var4) != this.state.getValue(var4)) {
+               Entry var4 = (Entry)var3.next();
+               Property var5 = var2.getBlock().getStateDefinition().getProperty((String)var4.getKey());
+               if (var5 == null) {
                   return false;
                }
+
+               Comparable var6 = (Comparable)var5.getValue((String)var4.getValue()).orElse((Object)null);
+               if (var6 == null) {
+                  return false;
+               }
+
+               if (var2.getValue(var5) != var6) {
+                  return false;
+               }
             }
 
             if (this.nbt == null) {
                return true;
             } else {
-               BlockEntity var5 = var1.getEntity();
-               return var5 != null && NbtUtils.compareNbt(this.nbt, var5.save(new CompoundTag()), true);
+               BlockEntity var7 = var1.getEntity();
+               return var7 != null && NbtUtils.compareNbt(this.nbt, var7.save(new CompoundTag()), true);
             }
          }
       }
    }
-
-   public interface Result {
-      Predicate<BlockInWorld> create(TagContainer var1) throws CommandSyntaxException;
-   }
 }
