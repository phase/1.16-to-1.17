--- net/minecraft/commands/arguments/selector/options/EntitySelectorOptions.java
+++ net/minecraft/commands/arguments/selector/options/EntitySelectorOptions.java
@@ -66,10 +66,13 @@
    });
    public static final DynamicCommandExceptionType ERROR_ENTITY_TYPE_INVALID = new DynamicCommandExceptionType((var0) -> {
       return new TranslatableComponent("argument.entity.options.type.invalid", new Object[]{var0});
    });
 
+   public EntitySelectorOptions() {
+   }
+
    private static void register(String var0, EntitySelectorOptions.Modifier var1, Predicate<EntitySelectorParser> var2, Component var3) {
       OPTIONS.put(var0, new EntitySelectorOptions.Option(var1, var2, var3));
    }
 
    public static void bootStrap() {
@@ -95,12 +98,12 @@
          }, (var0) -> {
             return !var0.hasNameEquals();
          }, new TranslatableComponent("argument.entity.options.name.description"));
          register("distance", (var0) -> {
             int var1 = var0.getReader().getCursor();
-            MinMaxBounds.Floats var2 = MinMaxBounds.Floats.fromReader(var0.getReader());
-            if ((var2.getMin() == null || (Float)var2.getMin() >= 0.0F) && (var2.getMax() == null || (Float)var2.getMax() >= 0.0F)) {
+            MinMaxBounds.Doubles var2 = MinMaxBounds.Doubles.fromReader(var0.getReader());
+            if ((var2.getMin() == null || (Double)var2.getMin() >= 0.0D) && (var2.getMax() == null || (Double)var2.getMax() >= 0.0D)) {
                var0.setDistance(var2);
                var0.setWorldLimited();
             } else {
                var0.getReader().setCursor(var1);
                throw ERROR_RANGE_NEGATIVE.createWithContext(var0.getReader());
@@ -250,13 +253,13 @@
                GameType[] var6 = GameType.values();
                int var7 = var6.length;
 
                for(int var8 = 0; var8 < var7; ++var8) {
                   GameType var9 = var6[var8];
-                  if (var9 != GameType.NOT_SET && var9.getName().toLowerCase(Locale.ROOT).startsWith(var3)) {
+                  if (var9.getName().toLowerCase(Locale.ROOT).startsWith(var3)) {
                      if (var5) {
-                        var1x.suggest('!' + var9.getName());
+                        var1x.suggest("!" + var9.getName());
                      }
 
                      if (var4) {
                         var1x.suggest(var9.getName());
                      }
@@ -270,12 +273,12 @@
             if (var0.hasGamemodeNotEquals() && !var2) {
                var0.getReader().setCursor(var1);
                throw ERROR_INAPPLICABLE_OPTION.createWithContext(var0.getReader(), "gamemode");
             } else {
                String var3 = var0.getReader().readUnquotedString();
-               GameType var4 = GameType.byName(var3, GameType.NOT_SET);
-               if (var4 == GameType.NOT_SET) {
+               GameType var4 = GameType.byName(var3, (GameType)null);
+               if (var4 == null) {
                   var0.getReader().setCursor(var1);
                   throw ERROR_GAME_MODE_INVALID.createWithContext(var0.getReader(), var3);
                } else {
                   var0.setIncludesEntities(false);
                   var0.addPredicate((var2x) -> {
@@ -341,11 +344,11 @@
 
                ResourceLocation var3;
                if (var0.isTag()) {
                   var3 = ResourceLocation.read(var0.getReader());
                   var0.addPredicate((var2x) -> {
-                     return var2x.getServer().getTags().getEntityTypes().getTagOrEmpty(var3).contains(var2x.getType()) != var2;
+                     return var2x.getType().is(var2x.getServer().getTags().getOrEmpty(Registry.ENTITY_TYPE_REGISTRY).getTagOrEmpty(var3)) != var2;
                   });
                } else {
                   var3 = ResourceLocation.read(var0.getReader());
                   EntityType var4 = (EntityType)Registry.ENTITY_TYPE.getOptional(var3).orElseThrow(() -> {
                      var0.getReader().setCursor(var1);
@@ -384,11 +387,11 @@
             boolean var1 = var0.shouldInvertValue();
             CompoundTag var2 = (new TagParser(var0.getReader())).readStruct();
             var0.addPredicate((var2x) -> {
                CompoundTag var3 = var2x.saveWithoutId(new CompoundTag());
                if (var2x instanceof ServerPlayer) {
-                  ItemStack var4 = ((ServerPlayer)var2x).inventory.getSelected();
+                  ItemStack var4 = ((ServerPlayer)var2x).getInventory().getSelected();
                   if (!var4.isEmpty()) {
                      var3.put("SelectedItem", var4.save(new CompoundTag()));
                   }
                }
 
@@ -593,22 +596,22 @@
       Iterator var3 = OPTIONS.entrySet().iterator();
 
       while(var3.hasNext()) {
          Entry var4 = (Entry)var3.next();
          if (((EntitySelectorOptions.Option)var4.getValue()).predicate.test(var0) && ((String)var4.getKey()).toLowerCase(Locale.ROOT).startsWith(var2)) {
-            var1.suggest((String)var4.getKey() + '=', ((EntitySelectorOptions.Option)var4.getValue()).description);
+            var1.suggest((String)var4.getKey() + "=", ((EntitySelectorOptions.Option)var4.getValue()).description);
          }
       }
 
    }
 
    static class Option {
       public final EntitySelectorOptions.Modifier modifier;
       public final Predicate<EntitySelectorParser> predicate;
       public final Component description;
 
-      private Option(EntitySelectorOptions.Modifier var1, Predicate<EntitySelectorParser> var2, Component var3) {
+      Option(EntitySelectorOptions.Modifier var1, Predicate<EntitySelectorParser> var2, Component var3) {
          this.modifier = var1;
          this.predicate = var2;
          this.description = var3;
       }
    }
