--- net/minecraft/commands/arguments/selector/EntitySelector.java
+++ net/minecraft/commands/arguments/selector/EntitySelector.java
@@ -12,39 +12,49 @@
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
 import net.minecraft.advancements.critereon.MinMaxBounds;
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.commands.arguments.EntityArgument;
+import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.ComponentUtils;
-import net.minecraft.network.chat.MutableComponent;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.level.entity.EntityTypeTest;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
 
 public class EntitySelector {
+   public static final int INFINITE = Integer.MAX_VALUE;
+   private static final EntityTypeTest<Entity, ?> ANY_TYPE = new EntityTypeTest<Entity, Entity>() {
+      public Entity tryCast(Entity var1) {
+         return var1;
+      }
+
+      public Class<? extends Entity> getBaseClass() {
+         return Entity.class;
+      }
+   };
    private final int maxResults;
    private final boolean includesEntities;
    private final boolean worldLimited;
    private final Predicate<Entity> predicate;
-   private final MinMaxBounds.Floats range;
+   private final MinMaxBounds.Doubles range;
    private final Function<Vec3, Vec3> position;
    @Nullable
    private final AABB aabb;
    private final BiConsumer<Vec3, List<? extends Entity>> order;
    private final boolean currentEntity;
    @Nullable
    private final String playerName;
    @Nullable
    private final UUID entityUUID;
-   @Nullable
-   private final EntityType<?> type;
+   private EntityTypeTest<Entity, ?> type;
    private final boolean usesSelector;
 
-   public EntitySelector(int var1, boolean var2, boolean var3, Predicate<Entity> var4, MinMaxBounds.Floats var5, Function<Vec3, Vec3> var6, @Nullable AABB var7, BiConsumer<Vec3, List<? extends Entity>> var8, boolean var9, @Nullable String var10, @Nullable UUID var11, @Nullable EntityType<?> var12, boolean var13) {
+   public EntitySelector(int var1, boolean var2, boolean var3, Predicate<Entity> var4, MinMaxBounds.Doubles var5, Function<Vec3, Vec3> var6, @Nullable AABB var7, BiConsumer<Vec3, List<? extends Entity>> var8, boolean var9, @Nullable String var10, @Nullable UUID var11, @Nullable EntityType<?> var12, boolean var13) {
       this.maxResults = var1;
       this.includesEntities = var2;
       this.worldLimited = var3;
       this.predicate = var4;
       this.range = var5;
@@ -52,11 +62,11 @@
       this.aabb = var7;
       this.order = var8;
       this.currentEntity = var9;
       this.playerName = var10;
       this.entityUUID = var11;
-      this.type = var12;
+      this.type = (EntityTypeTest)(var12 == null ? ANY_TYPE : var12);
       this.usesSelector = var13;
    }
 
    public int getMaxResults() {
       return this.maxResults;
@@ -72,10 +82,14 @@
 
    public boolean isWorldLimited() {
       return this.worldLimited;
    }
 
+   public boolean usesSelector() {
+      return this.usesSelector;
+   }
+
    private void checkPermissions(CommandSourceStack var1) throws CommandSyntaxException {
       if (this.usesSelector && !var1.hasPermission(2)) {
          throw EntityArgument.ERROR_SELECTORS_NOT_ALLOWED.create();
       }
    }
@@ -177,13 +191,11 @@
 
             return Collections.emptyList();
          } else {
             Object var4;
             if (this.isWorldLimited()) {
-               ServerLevel var10000 = var1.getLevel();
-               var3.getClass();
-               var4 = var10000.getPlayers(var3::test);
+               var4 = var1.getLevel().getPlayers(var3);
             } else {
                var4 = Lists.newArrayList();
                Iterator var5 = var1.getServer().getPlayerList().getPlayers().iterator();
 
                while(var5.hasNext()) {
@@ -223,9 +235,9 @@
       }
 
       return var2.subList(0, Math.min(this.maxResults, var2.size()));
    }
 
-   public static MutableComponent joinNames(List<? extends Entity> var0) {
-      return ComponentUtils.formatList(var0, Entity::getDisplayName);
+   public static Component joinNames(List<? extends Entity> var0) {
+      return ComponentUtils.formatList(var0, (Function)(Entity::getDisplayName));
    }
 }
