--- net/minecraft/commands/arguments/NbtPathArgument.java
+++ net/minecraft/commands/arguments/NbtPathArgument.java
@@ -34,10 +34,15 @@
    private static final Collection<String> EXAMPLES = Arrays.asList("foo", "foo.bar", "foo[0]", "[0]", "[]", "{foo=bar}");
    public static final SimpleCommandExceptionType ERROR_INVALID_NODE = new SimpleCommandExceptionType(new TranslatableComponent("arguments.nbtpath.node.invalid"));
    public static final DynamicCommandExceptionType ERROR_NOTHING_FOUND = new DynamicCommandExceptionType((var0) -> {
       return new TranslatableComponent("arguments.nbtpath.nothing_found", new Object[]{var0});
    });
+   private static final char INDEX_MATCH_START = '[';
+   private static final char INDEX_MATCH_END = ']';
+   private static final char KEY_MATCH_START = '{';
+   private static final char KEY_MATCH_END = '}';
+   private static final char QUOTED_KEY_START = '"';
 
    public NbtPathArgument() {
    }
 
    public static NbtPathArgument nbtPath() {
@@ -627,10 +632,15 @@
          return (Integer)var0.stream().map(var1).reduce(0, (var0x, var1x) -> {
             return var0x + var1x;
          });
       }
 
+      public int set(Tag var1, Tag var2) throws CommandSyntaxException {
+         var2.getClass();
+         return this.set(var1, var2::copy);
+      }
+
       public int set(Tag var1, Supplier<Tag> var2) throws CommandSyntaxException {
          List var3 = this.getOrCreateParents(var1);
          NbtPathArgument.Node var4 = this.nodes[this.nodes.length - 1];
          return apply(var3, (var2x) -> {
             return var4.setTag(var2x, var2);
