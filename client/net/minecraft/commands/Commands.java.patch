--- net/minecraft/commands/Commands.java
+++ net/minecraft/commands/Commands.java
@@ -55,10 +55,11 @@
 import net.minecraft.server.commands.FunctionCommand;
 import net.minecraft.server.commands.GameModeCommand;
 import net.minecraft.server.commands.GameRuleCommand;
 import net.minecraft.server.commands.GiveCommand;
 import net.minecraft.server.commands.HelpCommand;
+import net.minecraft.server.commands.ItemCommands;
 import net.minecraft.server.commands.KickCommand;
 import net.minecraft.server.commands.KillCommand;
 import net.minecraft.server.commands.ListPlayersCommand;
 import net.minecraft.server.commands.LocateBiomeCommand;
 import net.minecraft.server.commands.LocateCommand;
@@ -70,11 +71,10 @@
 import net.minecraft.server.commands.ParticleCommand;
 import net.minecraft.server.commands.PlaySoundCommand;
 import net.minecraft.server.commands.PublishCommand;
 import net.minecraft.server.commands.RecipeCommand;
 import net.minecraft.server.commands.ReloadCommand;
-import net.minecraft.server.commands.ReplaceItemCommand;
 import net.minecraft.server.commands.SaveAllCommand;
 import net.minecraft.server.commands.SaveOffCommand;
 import net.minecraft.server.commands.SaveOnCommand;
 import net.minecraft.server.commands.SayCommand;
 import net.minecraft.server.commands.ScheduleCommand;
@@ -105,10 +105,15 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class Commands {
    private static final Logger LOGGER = LogManager.getLogger();
+   public static final int LEVEL_ALL = 0;
+   public static final int LEVEL_MODERATORS = 1;
+   public static final int LEVEL_GAMEMASTERS = 2;
+   public static final int LEVEL_ADMINS = 3;
+   public static final int LEVEL_OWNERS = 4;
    private final CommandDispatcher<CommandSourceStack> dispatcher = new CommandDispatcher();
 
    public Commands(Commands.CommandSelection var1) {
       AdvancementCommands.register(this.dispatcher);
       AttributeCommand.register(this.dispatcher);
@@ -130,10 +135,11 @@
       FunctionCommand.register(this.dispatcher);
       GameModeCommand.register(this.dispatcher);
       GameRuleCommand.register(this.dispatcher);
       GiveCommand.register(this.dispatcher);
       HelpCommand.register(this.dispatcher);
+      ItemCommands.register(this.dispatcher);
       KickCommand.register(this.dispatcher);
       KillCommand.register(this.dispatcher);
       ListPlayersCommand.register(this.dispatcher);
       LocateCommand.register(this.dispatcher);
       LocateBiomeCommand.register(this.dispatcher);
@@ -141,11 +147,10 @@
       MsgCommand.register(this.dispatcher);
       ParticleCommand.register(this.dispatcher);
       PlaySoundCommand.register(this.dispatcher);
       ReloadCommand.register(this.dispatcher);
       RecipeCommand.register(this.dispatcher);
-      ReplaceItemCommand.register(this.dispatcher);
       SayCommand.register(this.dispatcher);
       ScheduleCommand.register(this.dispatcher);
       ScoreboardCommand.register(this.dispatcher);
       SeedCommand.register(this.dispatcher, var1 != Commands.CommandSelection.INTEGRATED);
       SetBlockCommand.register(this.dispatcher);
@@ -203,12 +208,12 @@
          var3.skip();
       }
 
       var1.getServer().getProfiler().push(var2);
 
-      byte var18;
       try {
+         byte var18;
          try {
             int var4 = this.dispatcher.execute(var3, var1);
             return var4;
          } catch (CommandRuntimeException var13) {
             var1.sendFailure(var13.getComponent());
@@ -250,23 +255,22 @@
             var1.sendFailure((new TranslatableComponent("command.failed")).withStyle((var1x) -> {
                return var1x.withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, var5));
             }));
             if (SharedConstants.IS_RUNNING_IN_IDE) {
                var1.sendFailure(new TextComponent(Util.describeError(var15)));
-               LOGGER.error("'" + var2 + "' threw an exception", var15);
+               LOGGER.error("'{}' threw an exception", var2, var15);
             }
 
             byte var19 = 0;
             return var19;
          }
 
          var18 = 0;
+         return var18;
       } finally {
          var1.getServer().getProfiler().pop();
       }
-
-      return var18;
    }
 
    public void sendCommands(ServerPlayer var1) {
       HashMap var2 = Maps.newHashMap();
       RootCommandNode var3 = new RootCommandNode();
