--- net/minecraft/world/phys/Vec3.java
+++ net/minecraft/world/phys/Vec3.java
@@ -49,11 +49,11 @@
    public Vec3 vectorTo(Vec3 var1) {
       return new Vec3(var1.x - this.x, var1.y - this.y, var1.z - this.z);
    }
 
    public Vec3 normalize() {
-      double var1 = (double)Mth.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
+      double var1 = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
       return var1 < 1.0E-4D ? ZERO : new Vec3(this.x / var1, this.y / var1, this.z / var1);
    }
 
    public double dot(Vec3 var1) {
       return this.x * var1.x + this.y * var1.y + this.z * var1.z;
@@ -85,11 +85,11 @@
 
    public double distanceTo(Vec3 var1) {
       double var2 = var1.x - this.x;
       double var4 = var1.y - this.y;
       double var6 = var1.z - this.z;
-      return (double)Mth.sqrt(var2 * var2 + var4 * var4 + var6 * var6);
+      return Math.sqrt(var2 * var2 + var4 * var4 + var6 * var6);
    }
 
    public double distanceToSqr(Vec3 var1) {
       double var2 = var1.x - this.x;
       double var4 = var1.y - this.y;
@@ -119,17 +119,25 @@
    public Vec3 multiply(double var1, double var3, double var5) {
       return new Vec3(this.x * var1, this.y * var3, this.z * var5);
    }
 
    public double length() {
-      return (double)Mth.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
+      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
    }
 
    public double lengthSqr() {
       return this.x * this.x + this.y * this.y + this.z * this.z;
    }
 
+   public double horizontalDistance() {
+      return Math.sqrt(this.x * this.x + this.z * this.z);
+   }
+
+   public double horizontalDistanceSqr() {
+      return this.x * this.x + this.z * this.z;
+   }
+
    public boolean equals(Object var1) {
       if (this == var1) {
          return true;
       } else if (!(var1 instanceof Vec3)) {
          return false;
@@ -157,10 +165,14 @@
 
    public String toString() {
       return "(" + this.x + ", " + this.y + ", " + this.z + ")";
    }
 
+   public Vec3 lerp(Vec3 var1, double var2) {
+      return new Vec3(Mth.lerp(var2, this.x, var1.x), Mth.lerp(var2, this.y, var1.y), Mth.lerp(var2, this.z, var1.z));
+   }
+
    public Vec3 xRot(float var1) {
       float var2 = Mth.cos(var1);
       float var3 = Mth.sin(var1);
       double var4 = this.x;
       double var6 = this.y * (double)var2 + this.z * (double)var3;
