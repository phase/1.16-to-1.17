--- net/minecraft/world/phys/shapes/NonOverlappingMerger.java
+++ net/minecraft/world/phys/shapes/NonOverlappingMerger.java
@@ -6,11 +6,11 @@
 public class NonOverlappingMerger extends AbstractDoubleList implements IndexMerger {
    private final DoubleList lower;
    private final DoubleList upper;
    private final boolean swap;
 
-   public NonOverlappingMerger(DoubleList var1, DoubleList var2, boolean var3) {
+   protected NonOverlappingMerger(DoubleList var1, DoubleList var2, boolean var3) {
       this.lower = var1;
       this.upper = var2;
       this.swap = var3;
    }
 
@@ -23,30 +23,28 @@
          return var1.merge(var2, var1x, var3);
       }) : this.forNonSwappedIndexes(var1);
    }
 
    private boolean forNonSwappedIndexes(IndexMerger.IndexConsumer var1) {
-      int var2 = this.lower.size() - 1;
+      int var2 = this.lower.size();
 
       int var3;
       for(var3 = 0; var3 < var2; ++var3) {
          if (!var1.merge(var3, -1, var3)) {
             return false;
          }
       }
 
-      if (!var1.merge(var2, -1, var2)) {
-         return false;
-      } else {
-         for(var3 = 0; var3 < this.upper.size(); ++var3) {
-            if (!var1.merge(var2, var3, var2 + 1 + var3)) {
-               return false;
-            }
-         }
+      var3 = this.upper.size() - 1;
 
-         return true;
+      for(int var4 = 0; var4 < var3; ++var4) {
+         if (!var1.merge(var2 - 1, var4, var2 + var4)) {
+            return false;
+         }
       }
+
+      return true;
    }
 
    public double getDouble(int var1) {
       return var1 < this.lower.size() ? this.lower.getDouble(var1) : this.upper.getDouble(var1 - this.lower.size());
    }
