--- net/minecraft/world/phys/shapes/DiscreteVoxelShape.java
+++ net/minecraft/world/phys/shapes/DiscreteVoxelShape.java
@@ -8,13 +8,17 @@
    protected final int xSize;
    protected final int ySize;
    protected final int zSize;
 
    protected DiscreteVoxelShape(int var1, int var2, int var3) {
-      this.xSize = var1;
-      this.ySize = var2;
-      this.zSize = var3;
+      if (var1 >= 0 && var2 >= 0 && var3 >= 0) {
+         this.xSize = var1;
+         this.ySize = var2;
+         this.zSize = var3;
+      } else {
+         throw new IllegalArgumentException("Need all positive sizes: x: " + var1 + ", y: " + var2 + ", z: " + var3);
+      }
    }
 
    public boolean isFullWide(AxisCycle var1, int var2, int var3, int var4) {
       return this.isFullWide(var1.cycle(var2, var3, var4, Direction.Axis.X), var1.cycle(var2, var3, var4, Direction.Axis.Y), var1.cycle(var2, var3, var4, Direction.Axis.Z));
    }
@@ -31,11 +35,11 @@
       return this.isFull(var1.cycle(var2, var3, var4, Direction.Axis.X), var1.cycle(var2, var3, var4, Direction.Axis.Y), var1.cycle(var2, var3, var4, Direction.Axis.Z));
    }
 
    public abstract boolean isFull(int var1, int var2, int var3);
 
-   public abstract void setFull(int var1, int var2, int var3, boolean var4, boolean var5);
+   public abstract void fill(int var1, int var2, int var3);
 
    public boolean isEmpty() {
       Direction.Axis[] var1 = AXIS_VALUES;
       int var2 = var1.length;
 
@@ -137,94 +141,12 @@
          }
       }
 
    }
 
-   protected boolean isZStripFull(int var1, int var2, int var3, int var4) {
-      for(int var5 = var1; var5 < var2; ++var5) {
-         if (!this.isFullWide(var3, var4, var5)) {
-            return false;
-         }
-      }
-
-      return true;
-   }
-
-   protected void setZStrip(int var1, int var2, int var3, int var4, boolean var5) {
-      for(int var6 = var1; var6 < var2; ++var6) {
-         this.setFull(var3, var4, var6, false, var5);
-      }
-
-   }
-
-   protected boolean isXZRectangleFull(int var1, int var2, int var3, int var4, int var5) {
-      for(int var6 = var1; var6 < var2; ++var6) {
-         if (!this.isZStripFull(var3, var4, var6, var5)) {
-            return false;
-         }
-      }
-
-      return true;
-   }
-
    public void forAllBoxes(DiscreteVoxelShape.IntLineConsumer var1, boolean var2) {
-      BitSetDiscreteVoxelShape var3 = new BitSetDiscreteVoxelShape(this);
-
-      for(int var4 = 0; var4 <= this.xSize; ++var4) {
-         for(int var5 = 0; var5 <= this.ySize; ++var5) {
-            int var6 = -1;
-
-            for(int var7 = 0; var7 <= this.zSize; ++var7) {
-               if (var3.isFullWide(var4, var5, var7)) {
-                  if (var2) {
-                     if (var6 == -1) {
-                        var6 = var7;
-                     }
-                  } else {
-                     var1.consume(var4, var5, var7, var4 + 1, var5 + 1, var7 + 1);
-                  }
-               } else if (var6 != -1) {
-                  int var8 = var4;
-                  int var9 = var4;
-                  int var10 = var5;
-                  int var11 = var5;
-                  var3.setZStrip(var6, var7, var4, var5, false);
-
-                  while(var3.isZStripFull(var6, var7, var8 - 1, var10)) {
-                     var3.setZStrip(var6, var7, var8 - 1, var10, false);
-                     --var8;
-                  }
-
-                  while(var3.isZStripFull(var6, var7, var9 + 1, var10)) {
-                     var3.setZStrip(var6, var7, var9 + 1, var10, false);
-                     ++var9;
-                  }
-
-                  int var12;
-                  while(var3.isXZRectangleFull(var8, var9 + 1, var6, var7, var10 - 1)) {
-                     for(var12 = var8; var12 <= var9; ++var12) {
-                        var3.setZStrip(var6, var7, var12, var10 - 1, false);
-                     }
-
-                     --var10;
-                  }
-
-                  while(var3.isXZRectangleFull(var8, var9 + 1, var6, var7, var11 + 1)) {
-                     for(var12 = var8; var12 <= var9; ++var12) {
-                        var3.setZStrip(var6, var7, var12, var11 + 1, false);
-                     }
-
-                     ++var11;
-                  }
-
-                  var1.consume(var8, var10, var6, var9 + 1, var11 + 1, var7);
-                  var6 = -1;
-               }
-            }
-         }
-      }
-
+      BitSetDiscreteVoxelShape.forAllBoxes(this, var1, var2);
    }
 
    public void forAllFaces(DiscreteVoxelShape.IntFaceConsumer var1) {
       this.forAllAxisFaces(var1, AxisCycle.NONE);
       this.forAllAxisFaces(var1, AxisCycle.FORWARD);
