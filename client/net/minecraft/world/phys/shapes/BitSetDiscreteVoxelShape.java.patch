--- net/minecraft/world/phys/shapes/BitSetDiscreteVoxelShape.java
+++ net/minecraft/world/phys/shapes/BitSetDiscreteVoxelShape.java
@@ -11,24 +11,37 @@
    private int xMax;
    private int yMax;
    private int zMax;
 
    public BitSetDiscreteVoxelShape(int var1, int var2, int var3) {
-      this(var1, var2, var3, var1, var2, var3, 0, 0, 0);
-   }
-
-   public BitSetDiscreteVoxelShape(int var1, int var2, int var3, int var4, int var5, int var6, int var7, int var8, int var9) {
       super(var1, var2, var3);
       this.storage = new BitSet(var1 * var2 * var3);
-      this.xMin = var4;
-      this.yMin = var5;
-      this.zMin = var6;
-      this.xMax = var7;
-      this.yMax = var8;
-      this.zMax = var9;
+      this.xMin = var1;
+      this.yMin = var2;
+      this.zMin = var3;
    }
 
+   public static BitSetDiscreteVoxelShape withFilledBounds(int var0, int var1, int var2, int var3, int var4, int var5, int var6, int var7, int var8) {
+      BitSetDiscreteVoxelShape var9 = new BitSetDiscreteVoxelShape(var0, var1, var2);
+      var9.xMin = var3;
+      var9.yMin = var4;
+      var9.zMin = var5;
+      var9.xMax = var6;
+      var9.yMax = var7;
+      var9.zMax = var8;
+
+      for(int var10 = var3; var10 < var6; ++var10) {
+         for(int var11 = var4; var11 < var7; ++var11) {
+            for(int var12 = var5; var12 < var8; ++var12) {
+               var9.fillUpdateBounds(var10, var11, var12, false);
+            }
+         }
+      }
+
+      return var9;
+   }
+
    public BitSetDiscreteVoxelShape(DiscreteVoxelShape var1) {
       super(var1.xSize, var1.ySize, var1.zSize);
       if (var1 instanceof BitSetDiscreteVoxelShape) {
          this.storage = (BitSet)((BitSetDiscreteVoxelShape)var1).storage.clone();
       } else {
@@ -59,23 +72,27 @@
 
    public boolean isFull(int var1, int var2, int var3) {
       return this.storage.get(this.getIndex(var1, var2, var3));
    }
 
-   public void setFull(int var1, int var2, int var3, boolean var4, boolean var5) {
-      this.storage.set(this.getIndex(var1, var2, var3), var5);
-      if (var4 && var5) {
+   private void fillUpdateBounds(int var1, int var2, int var3, boolean var4) {
+      this.storage.set(this.getIndex(var1, var2, var3));
+      if (var4) {
          this.xMin = Math.min(this.xMin, var1);
          this.yMin = Math.min(this.yMin, var2);
          this.zMin = Math.min(this.zMin, var3);
          this.xMax = Math.max(this.xMax, var1 + 1);
          this.yMax = Math.max(this.yMax, var2 + 1);
          this.zMax = Math.max(this.zMax, var3 + 1);
       }
 
    }
 
+   public void fill(int var1, int var2, int var3) {
+      this.fillUpdateBounds(var1, var2, var3, true);
+   }
+
    public boolean isEmpty() {
       return this.storage.isEmpty();
    }
 
    public int firstFull(Direction.Axis var1) {
@@ -84,39 +101,22 @@
 
    public int lastFull(Direction.Axis var1) {
       return var1.choose(this.xMax, this.yMax, this.zMax);
    }
 
-   protected boolean isZStripFull(int var1, int var2, int var3, int var4) {
-      if (var3 >= 0 && var4 >= 0 && var1 >= 0) {
-         if (var3 < this.xSize && var4 < this.ySize && var2 <= this.zSize) {
-            return this.storage.nextClearBit(this.getIndex(var3, var4, var1)) >= this.getIndex(var3, var4, var2);
-         } else {
-            return false;
-         }
-      } else {
-         return false;
-      }
-   }
-
-   protected void setZStrip(int var1, int var2, int var3, int var4, boolean var5) {
-      this.storage.set(this.getIndex(var3, var4, var1), this.getIndex(var3, var4, var2), var5);
-   }
-
    static BitSetDiscreteVoxelShape join(DiscreteVoxelShape var0, DiscreteVoxelShape var1, IndexMerger var2, IndexMerger var3, IndexMerger var4, BooleanOp var5) {
-      BitSetDiscreteVoxelShape var6 = new BitSetDiscreteVoxelShape(var2.getList().size() - 1, var3.getList().size() - 1, var4.getList().size() - 1);
+      BitSetDiscreteVoxelShape var6 = new BitSetDiscreteVoxelShape(var2.size() - 1, var3.size() - 1, var4.size() - 1);
       int[] var7 = new int[]{Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MIN_VALUE, Integer.MIN_VALUE, Integer.MIN_VALUE};
       var2.forMergedIndexes((var7x, var8, var9) -> {
          boolean[] var10 = new boolean[]{false};
-         boolean var11 = var3.forMergedIndexes((var10x, var11x, var12) -> {
+         var3.forMergedIndexes((var10x, var11, var12) -> {
             boolean[] var13 = new boolean[]{false};
-            boolean var14 = var4.forMergedIndexes((var12x, var13x, var14x) -> {
-               boolean var15 = var5.apply(var0.isFullWide(var7x, var10x, var12x), var1.isFullWide(var8, var11x, var13x));
-               if (var15) {
-                  var6.storage.set(var6.getIndex(var9, var12, var14x));
-                  var7[2] = Math.min(var7[2], var14x);
-                  var7[5] = Math.max(var7[5], var14x);
+            var4.forMergedIndexes((var12x, var13x, var14) -> {
+               if (var5.apply(var0.isFullWide(var7x, var10x, var12x), var1.isFullWide(var8, var11, var13x))) {
+                  var6.storage.set(var6.getIndex(var9, var12, var14));
+                  var7[2] = Math.min(var7[2], var14);
+                  var7[5] = Math.max(var7[5], var14);
                   var13[0] = true;
                }
 
                return true;
             });
@@ -124,23 +124,88 @@
                var7[1] = Math.min(var7[1], var12);
                var7[4] = Math.max(var7[4], var12);
                var10[0] = true;
             }
 
-            return var14;
+            return true;
          });
          if (var10[0]) {
             var7[0] = Math.min(var7[0], var9);
             var7[3] = Math.max(var7[3], var9);
          }
 
-         return var11;
+         return true;
       });
       var6.xMin = var7[0];
       var6.yMin = var7[1];
       var6.zMin = var7[2];
       var6.xMax = var7[3] + 1;
       var6.yMax = var7[4] + 1;
       var6.zMax = var7[5] + 1;
       return var6;
    }
+
+   protected static void forAllBoxes(DiscreteVoxelShape var0, DiscreteVoxelShape.IntLineConsumer var1, boolean var2) {
+      BitSetDiscreteVoxelShape var3 = new BitSetDiscreteVoxelShape(var0);
+
+      for(int var4 = 0; var4 < var3.xSize; ++var4) {
+         for(int var5 = 0; var5 < var3.ySize; ++var5) {
+            int var6 = -1;
+
+            for(int var7 = 0; var7 <= var3.zSize; ++var7) {
+               if (var3.isFullWide(var4, var5, var7)) {
+                  if (var2) {
+                     if (var6 == -1) {
+                        var6 = var7;
+                     }
+                  } else {
+                     var1.consume(var4, var5, var7, var4 + 1, var5 + 1, var7 + 1);
+                  }
+               } else if (var6 != -1) {
+                  int var8 = var4;
+                  int var9 = var5;
+                  var3.clearZStrip(var6, var7, var4, var5);
+
+                  while(var3.isZStripFull(var6, var7, var8 + 1, var5)) {
+                     var3.clearZStrip(var6, var7, var8 + 1, var5);
+                     ++var8;
+                  }
+
+                  while(var3.isXZRectangleFull(var4, var8 + 1, var6, var7, var9 + 1)) {
+                     for(int var10 = var4; var10 <= var8; ++var10) {
+                        var3.clearZStrip(var6, var7, var10, var9 + 1);
+                     }
+
+                     ++var9;
+                  }
+
+                  var1.consume(var4, var5, var6, var8 + 1, var9 + 1, var7);
+                  var6 = -1;
+               }
+            }
+         }
+      }
+
+   }
+
+   private boolean isZStripFull(int var1, int var2, int var3, int var4) {
+      if (var3 < this.xSize && var4 < this.ySize) {
+         return this.storage.nextClearBit(this.getIndex(var3, var4, var1)) >= this.getIndex(var3, var4, var2);
+      } else {
+         return false;
+      }
+   }
+
+   private boolean isXZRectangleFull(int var1, int var2, int var3, int var4, int var5) {
+      for(int var6 = var1; var6 < var2; ++var6) {
+         if (!this.isZStripFull(var3, var4, var6, var5)) {
+            return false;
+         }
+      }
+
+      return true;
+   }
+
+   private void clearZStrip(int var1, int var2, int var3, int var4) {
+      this.storage.clear(this.getIndex(var3, var4, var1), this.getIndex(var3, var4, var2));
+   }
 }
