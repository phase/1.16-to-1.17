--- net/minecraft/world/entity/player/Inventory.java
+++ net/minecraft/world/entity/player/Inventory.java
@@ -21,29 +21,33 @@
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.EquipmentSlot;
 import net.minecraft.world.item.ArmorItem;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
-import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.state.BlockState;
 
 public class Inventory implements Container, Nameable {
+   public static final int POP_TIME_DURATION = 5;
+   public static final int INVENTORY_SIZE = 36;
+   private static final int SELECTION_SIZE = 9;
+   public static final int SLOT_OFFHAND = 40;
+   public static final int NOT_FOUND_INDEX = -1;
+   public static final int[] ALL_ARMOR_SLOTS = new int[]{0, 1, 2, 3};
+   public static final int[] HELMET_SLOT_ONLY = new int[]{3};
    public final NonNullList<ItemStack> items;
    public final NonNullList<ItemStack> armor;
    public final NonNullList<ItemStack> offhand;
    private final List<NonNullList<ItemStack>> compartments;
    public int selected;
    public final Player player;
-   private ItemStack carried;
    private int timesChanged;
 
    public Inventory(Player var1) {
       this.items = NonNullList.withSize(36, ItemStack.EMPTY);
       this.armor = NonNullList.withSize(4, ItemStack.EMPTY);
       this.offhand = NonNullList.withSize(1, ItemStack.EMPTY);
       this.compartments = ImmutableList.of(this.items, this.armor, this.offhand);
-      this.carried = ItemStack.EMPTY;
       this.player = var1;
    }
 
    public ItemStack getSelected() {
       return isHotbarSlot(this.selected) ? (ItemStack)this.items.get(this.selected) : ItemStack.EMPTY;
@@ -52,17 +56,13 @@
    public static int getSelectionSize() {
       return 9;
    }
 
    private boolean hasRemainingSpaceForItem(ItemStack var1, ItemStack var2) {
-      return !var1.isEmpty() && this.isSameItem(var1, var2) && var1.isStackable() && var1.getCount() < var1.getMaxStackSize() && var1.getCount() < this.getMaxStackSize();
+      return !var1.isEmpty() && ItemStack.isSameItemSameTags(var1, var2) && var1.isStackable() && var1.getCount() < var1.getMaxStackSize() && var1.getCount() < this.getMaxStackSize();
    }
 
-   private boolean isSameItem(ItemStack var1, ItemStack var2) {
-      return var1.getItem() == var2.getItem() && ItemStack.tagMatches(var1, var2);
-   }
-
    public int getFreeSlot() {
       for(int var1 = 0; var1 < this.items.size(); ++var1) {
          if (((ItemStack)this.items.get(var1)).isEmpty()) {
             return var1;
          }
@@ -79,11 +79,11 @@
          if (var2 == -1) {
             this.selected = this.getSuitableHotbarSlot();
             if (!((ItemStack)this.items.get(this.selected)).isEmpty()) {
                int var3 = this.getFreeSlot();
                if (var3 != -1) {
-                  this.items.set(var3, this.items.get(this.selected));
+                  this.items.set(var3, (ItemStack)this.items.get(this.selected));
                }
             }
 
             this.items.set(this.selected, var1);
          } else {
@@ -94,32 +94,32 @@
    }
 
    public void pickSlot(int var1) {
       this.selected = this.getSuitableHotbarSlot();
       ItemStack var2 = (ItemStack)this.items.get(this.selected);
-      this.items.set(this.selected, this.items.get(var1));
+      this.items.set(this.selected, (ItemStack)this.items.get(var1));
       this.items.set(var1, var2);
    }
 
    public static boolean isHotbarSlot(int var0) {
       return var0 >= 0 && var0 < 9;
    }
 
    public int findSlotMatchingItem(ItemStack var1) {
       for(int var2 = 0; var2 < this.items.size(); ++var2) {
-         if (!((ItemStack)this.items.get(var2)).isEmpty() && this.isSameItem(var1, (ItemStack)this.items.get(var2))) {
+         if (!((ItemStack)this.items.get(var2)).isEmpty() && ItemStack.isSameItemSameTags(var1, (ItemStack)this.items.get(var2))) {
             return var2;
          }
       }
 
       return -1;
    }
 
    public int findSlotMatchingUnusedItem(ItemStack var1) {
       for(int var2 = 0; var2 < this.items.size(); ++var2) {
          ItemStack var3 = (ItemStack)this.items.get(var2);
-         if (!((ItemStack)this.items.get(var2)).isEmpty() && this.isSameItem(var1, (ItemStack)this.items.get(var2)) && !((ItemStack)this.items.get(var2)).isDamaged() && !var3.isEnchanted() && !var3.hasCustomHoverName()) {
+         if (!((ItemStack)this.items.get(var2)).isEmpty() && ItemStack.isSameItemSameTags(var1, (ItemStack)this.items.get(var2)) && !((ItemStack)this.items.get(var2)).isDamaged() && !var3.isEnchanted() && !var3.hasCustomHoverName()) {
             return var2;
          }
       }
 
       return -1;
@@ -164,18 +164,19 @@
    }
 
    public int clearOrCountMatchingItems(Predicate<ItemStack> var1, int var2, Container var3) {
       byte var4 = 0;
       boolean var5 = var2 == 0;
-      int var6 = var4 + ContainerHelper.clearOrCountMatchingItems((Container)this, var1, var2 - var4, var5);
-      var6 += ContainerHelper.clearOrCountMatchingItems(var3, var1, var2 - var6, var5);
-      var6 += ContainerHelper.clearOrCountMatchingItems(this.carried, var1, var2 - var6, var5);
-      if (this.carried.isEmpty()) {
-         this.carried = ItemStack.EMPTY;
+      int var7 = var4 + ContainerHelper.clearOrCountMatchingItems((Container)this, var1, var2 - var4, var5);
+      var7 += ContainerHelper.clearOrCountMatchingItems(var3, var1, var2 - var7, var5);
+      ItemStack var6 = this.player.containerMenu.getCarried();
+      var7 += ContainerHelper.clearOrCountMatchingItems(var6, var1, var2 - var7, var5);
+      if (var6.isEmpty()) {
+         this.player.containerMenu.setCarried(ItemStack.EMPTY);
       }
 
-      return var6;
+      return var7;
    }
 
    private int addResource(ItemStack var1) {
       int var2 = this.getSlotWithRemainingSpace(var1);
       if (var2 == -1) {
@@ -265,11 +266,11 @@
                if (var1 >= 0) {
                   this.items.set(var1, var2.copy());
                   ((ItemStack)this.items.get(var1)).setPopTime(5);
                   var2.setCount(0);
                   return true;
-               } else if (this.player.abilities.instabuild) {
+               } else if (this.player.getAbilities().instabuild) {
                   var2.setCount(0);
                   return true;
                } else {
                   return false;
                }
@@ -282,11 +283,11 @@
                   } else {
                      var2.setCount(this.addResource(var1, var2));
                   }
                } while(!var2.isEmpty() && var2.getCount() < var3);
 
-               if (var2.getCount() == var3 && this.player.abilities.instabuild) {
+               if (var2.getCount() == var3 && this.player.getAbilities().instabuild) {
                   var2.setCount(0);
                   return true;
                } else {
                   return var2.getCount() < var3;
                }
@@ -302,29 +303,34 @@
             throw new ReportedException(var4);
          }
       }
    }
 
-   public void placeItemBackInInventory(Level var1, ItemStack var2) {
-      if (!var1.isClientSide) {
-         while(!var2.isEmpty()) {
-            int var3 = this.getSlotWithRemainingSpace(var2);
+   public void placeItemBackInInventory(ItemStack var1) {
+      this.placeItemBackInInventory(var1, true);
+   }
+
+   public void placeItemBackInInventory(ItemStack var1, boolean var2) {
+      while(true) {
+         if (!var1.isEmpty()) {
+            int var3 = this.getSlotWithRemainingSpace(var1);
             if (var3 == -1) {
                var3 = this.getFreeSlot();
             }
 
-            if (var3 == -1) {
-               this.player.drop(var2, false);
-               break;
+            if (var3 != -1) {
+               int var4 = var1.getMaxStackSize() - this.getItem(var3).getCount();
+               if (this.add(var3, var1.split(var4)) && var2 && this.player instanceof ServerPlayer) {
+                  ((ServerPlayer)this.player).connection.send(new ClientboundContainerSetSlotPacket(-2, var3, this.getItem(var3)));
+               }
+               continue;
             }
 
-            int var4 = var2.getMaxStackSize() - this.getItem(var3).getCount();
-            if (this.add(var3, var2.split(var4))) {
-               ((ServerPlayer)this.player).connection.send(new ClientboundContainerSetSlotPacket(-2, var3, this.getItem(var3)));
-            }
+            this.player.drop(var1, false);
          }
 
+         return;
       }
    }
 
    public ItemStack removeItem(int var1, int var2) {
       NonNullList var3 = null;
@@ -518,22 +524,26 @@
 
    public ItemStack getArmor(int var1) {
       return (ItemStack)this.armor.get(var1);
    }
 
-   public void hurtArmor(DamageSource var1, float var2) {
+   public void hurtArmor(DamageSource var1, float var2, int[] var3) {
       if (var2 > 0.0F) {
          var2 /= 4.0F;
          if (var2 < 1.0F) {
             var2 = 1.0F;
          }
 
-         for(int var3 = 0; var3 < this.armor.size(); ++var3) {
-            ItemStack var4 = (ItemStack)this.armor.get(var3);
-            if ((!var1.isFire() || !var4.getItem().isFireResistant()) && var4.getItem() instanceof ArmorItem) {
-               var4.hurtAndBreak((int)var2, this.player, (var1x) -> {
-                  var1x.broadcastBreakEvent(EquipmentSlot.byTypeAndIndex(EquipmentSlot.Type.ARMOR, var3));
+         int[] var4 = var3;
+         int var5 = var3.length;
+
+         for(int var6 = 0; var6 < var5; ++var6) {
+            int var7 = var4[var6];
+            ItemStack var8 = (ItemStack)this.armor.get(var7);
+            if ((!var1.isFire() || !var8.getItem().isFireResistant()) && var8.getItem() instanceof ArmorItem) {
+               var8.hurtAndBreak((int)var2, this.player, (var1x) -> {
+                  var1x.broadcastBreakEvent(EquipmentSlot.byTypeAndIndex(EquipmentSlot.Type.ARMOR, var7));
                });
             }
          }
 
       }
@@ -562,20 +572,12 @@
 
    public int getTimesChanged() {
       return this.timesChanged;
    }
 
-   public void setCarried(ItemStack var1) {
-      this.carried = var1;
-   }
-
-   public ItemStack getCarried() {
-      return this.carried;
-   }
-
    public boolean stillValid(Player var1) {
-      if (this.player.removed) {
+      if (this.player.isRemoved()) {
          return false;
       } else {
          return var1.distanceToSqr(this.player) <= 64.0D;
       }
    }
@@ -605,11 +607,11 @@
          List var3 = (List)var2.next();
          Iterator var4 = var3.iterator();
 
          while(var4.hasNext()) {
             ItemStack var5 = (ItemStack)var4.next();
-            if (!var5.isEmpty() && var1.contains(var5.getItem())) {
+            if (!var5.isEmpty() && var5.is(var1)) {
                return true;
             }
          }
       }
 
