--- net/minecraft/world/entity/player/Player.java
+++ net/minecraft/world/entity/player/Player.java
@@ -4,20 +4,22 @@
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfile;
 import com.mojang.datafixers.util.Either;
 import java.nio.charset.StandardCharsets;
+import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Optional;
 import java.util.OptionalInt;
 import java.util.UUID;
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
 import net.minecraft.SharedConstants;
+import net.minecraft.Util;
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.particles.ParticleOptions;
 import net.minecraft.core.particles.ParticleTypes;
@@ -60,10 +62,11 @@
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.MobType;
 import net.minecraft.world.entity.MoverType;
 import net.minecraft.world.entity.Pose;
+import net.minecraft.world.entity.SlotAccess;
 import net.minecraft.world.entity.TamableAnimal;
 import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
 import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.animal.Parrot;
 import net.minecraft.world.entity.animal.Pig;
@@ -77,11 +80,10 @@
 import net.minecraft.world.entity.vehicle.Boat;
 import net.minecraft.world.food.FoodData;
 import net.minecraft.world.inventory.AbstractContainerMenu;
 import net.minecraft.world.inventory.InventoryMenu;
 import net.minecraft.world.inventory.PlayerEnderChestContainer;
-import net.minecraft.world.item.ArmorItem;
 import net.minecraft.world.item.AxeItem;
 import net.minecraft.world.item.ElytraItem;
 import net.minecraft.world.item.ItemCooldowns;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
@@ -117,11 +119,11 @@
    protected static final EntityDataAccessor<Byte> DATA_PLAYER_MODE_CUSTOMISATION;
    protected static final EntityDataAccessor<Byte> DATA_PLAYER_MAIN_HAND;
    protected static final EntityDataAccessor<CompoundTag> DATA_SHOULDER_LEFT;
    protected static final EntityDataAccessor<CompoundTag> DATA_SHOULDER_RIGHT;
    private long timeEntitySatOnShoulder;
-   public final Inventory inventory = new Inventory(this);
+   private final Inventory inventory = new Inventory(this);
    protected PlayerEnderChestContainer enderChestInventory = new PlayerEnderChestContainer();
    public final InventoryMenu inventoryMenu;
    public AbstractContainerMenu containerMenu;
    protected FoodData foodData = new FoodData();
    protected int jumpTriggerTime;
@@ -134,11 +136,11 @@
    public double xCloak;
    public double yCloak;
    public double zCloak;
    private int sleepCounter;
    protected boolean wasUnderwater;
-   public final Abilities abilities = new Abilities();
+   private final Abilities abilities = new Abilities();
    public int experienceLevel;
    public int totalExperience;
    public float experienceProgress;
    protected int enchantmentSeed;
    protected final float defaultFlySpeed = 0.02F;
@@ -278,11 +280,11 @@
       return this.wasUnderwater;
    }
 
    private void turtleHelmetTick() {
       ItemStack var1 = this.getItemBySlot(EquipmentSlot.HEAD);
-      if (var1.getItem() == Items.TURTLE_HELMET && !this.isEyeInFluid(FluidTags.WATER)) {
+      if (var1.is(Items.TURTLE_HELMET) && !this.isEyeInFluid(FluidTags.WATER)) {
          this.addEffect(new MobEffectInstance(MobEffects.WATER_BREATHING, 200, 0, false, false, true));
       }
 
    }
 
@@ -428,11 +430,11 @@
    protected void closeContainer() {
       this.containerMenu = this.inventoryMenu;
    }
 
    public void rideTick() {
-      if (this.wantsToStopRiding() && this.isPassenger()) {
+      if (!this.level.isClientSide && this.wantsToStopRiding() && this.isPassenger()) {
          this.stopRiding();
          this.setShiftKeyDown(false);
       } else {
          double var1 = this.getX();
          double var3 = this.getY();
@@ -489,24 +491,31 @@
       }
 
       this.bob += (var1 - this.bob) * 0.4F;
       if (this.getHealth() > 0.0F && !this.isSpectator()) {
          AABB var2;
-         if (this.isPassenger() && !this.getVehicle().removed) {
+         if (this.isPassenger() && !this.getVehicle().isRemoved()) {
             var2 = this.getBoundingBox().minmax(this.getVehicle().getBoundingBox()).inflate(1.0D, 0.0D, 1.0D);
          } else {
             var2 = this.getBoundingBox().inflate(1.0D, 0.5D, 1.0D);
          }
 
          List var3 = this.level.getEntities(this, var2);
+         ArrayList var4 = Lists.newArrayList();
 
-         for(int var4 = 0; var4 < var3.size(); ++var4) {
-            Entity var5 = (Entity)var3.get(var4);
-            if (!var5.removed) {
-               this.touch(var5);
+         for(int var5 = 0; var5 < var3.size(); ++var5) {
+            Entity var6 = (Entity)var3.get(var5);
+            if (var6.getType() == EntityType.EXPERIENCE_ORB) {
+               var4.add(var6);
+            } else if (!var6.isRemoved()) {
+               this.touch(var6);
             }
          }
+
+         if (!var4.isEmpty()) {
+            this.touch((Entity)Util.getRandom((List)var4, this.random));
+         }
       }
 
       this.playShoulderEntityAmbientSound(this.getShoulderEntityLeft());
       this.playShoulderEntityAmbientSound(this.getShoulderEntityRight());
       if (!this.level.isClientSide && (this.fallDistance > 0.5F || this.isInWater()) || this.abilities.flying || this.isSleeping()) {
@@ -589,12 +598,14 @@
    protected SoundEvent getHurtSound(DamageSource var1) {
       if (var1 == DamageSource.ON_FIRE) {
          return SoundEvents.PLAYER_HURT_ON_FIRE;
       } else if (var1 == DamageSource.DROWN) {
          return SoundEvents.PLAYER_HURT_DROWN;
+      } else if (var1 == DamageSource.SWEET_BERRY_BUSH) {
+         return SoundEvents.PLAYER_HURT_SWEET_BERRY_BUSH;
       } else {
-         return var1 == DamageSource.SWEET_BERRY_BUSH ? SoundEvents.PLAYER_HURT_SWEET_BERRY_BUSH : SoundEvents.PLAYER_HURT;
+         return var1 == DamageSource.FREEZE ? SoundEvents.PLAYER_HURT_FREEZE : SoundEvents.PLAYER_HURT;
       }
    }
 
    protected SoundEvent getDeathSound() {
       return SoundEvents.PLAYER_DEATH;
@@ -755,14 +766,16 @@
    public boolean isInvulnerableTo(DamageSource var1) {
       if (super.isInvulnerableTo(var1)) {
          return true;
       } else if (var1 == DamageSource.DROWN) {
          return !this.level.getGameRules().getBoolean(GameRules.RULE_DROWNING_DAMAGE);
-      } else if (var1 == DamageSource.FALL) {
+      } else if (var1.isFall()) {
          return !this.level.getGameRules().getBoolean(GameRules.RULE_FALL_DAMAGE);
       } else if (var1.isFire()) {
          return !this.level.getGameRules().getBoolean(GameRules.RULE_FIRE_DAMAGE);
+      } else if (var1 == DamageSource.FREEZE) {
+         return !this.level.getGameRules().getBoolean(GameRules.RULE_FREEZE_DAMAGE);
       } else {
          return false;
       }
    }
 
@@ -802,10 +815,14 @@
          this.disableShield(true);
       }
 
    }
 
+   public boolean canBeTargeted() {
+      return !this.getAbilities().invulnerable && super.canBeTargeted();
+   }
+
    public boolean canHarmPlayer(Player var1) {
       Team var2 = this.getTeam();
       Team var3 = var1.getTeam();
       if (var2 == null) {
          return true;
@@ -817,11 +834,11 @@
    protected void hurtArmor(DamageSource var1, float var2) {
       this.inventory.hurtArmor(var1, var2);
    }
 
    protected void hurtCurrentlyUsedShield(float var1) {
-      if (this.useItem.getItem() == Items.SHIELD) {
+      if (this.useItem.is(Items.SHIELD)) {
          if (!this.level.isClientSide) {
             this.awardStat(Stats.ITEM_USED.get(this.useItem.getItem()));
          }
 
          if (var1 >= 3.0F) {
@@ -1218,12 +1235,12 @@
    }
 
    public void respawn() {
    }
 
-   public void remove() {
-      super.remove();
+   public void remove(Entity.RemovalReason var1) {
+      super.remove(var1);
       this.inventoryMenu.removed(this);
       if (this.containerMenu != null) {
          this.containerMenu.removed(this);
       }
 
@@ -1235,10 +1252,18 @@
 
    public GameProfile getGameProfile() {
       return this.gameProfile;
    }
 
+   public Inventory getInventory() {
+      return this.inventory;
+   }
+
+   public Abilities getAbilities() {
+      return this.abilities;
+   }
+
    public Either<Player.BedSleepingProblem, Unit> startSleepInBed(BlockPos var1) {
       this.startSleeping(var1);
       this.sleepCounter = 0;
       return Either.right(Unit.INSTANCE);
    }
@@ -1447,26 +1472,26 @@
          }
       }
 
    }
 
-   public boolean causeFallDamage(float var1, float var2) {
+   public boolean causeFallDamage(float var1, float var2, DamageSource var3) {
       if (this.abilities.mayfly) {
          return false;
       } else {
          if (var1 >= 2.0F) {
             this.awardStat(Stats.FALL_ONE_CM, (int)Math.round((double)var1 * 100.0D));
          }
 
-         return super.causeFallDamage(var1, var2);
+         return super.causeFallDamage(var1, var2, var3);
       }
    }
 
    public boolean tryToStartFallFlying() {
       if (!this.onGround && !this.isFallFlying() && !this.isInWater() && !this.hasEffect(MobEffects.LEVITATION)) {
          ItemStack var1 = this.getItemBySlot(EquipmentSlot.CHEST);
-         if (var1.getItem() == Items.ELYTRA && ElytraItem.isFlyEnabled(var1)) {
+         if (var1.is(Items.ELYTRA) && ElytraItem.isFlyEnabled(var1)) {
             this.startFallFlying();
             return true;
          }
       }
 
@@ -1624,13 +1649,10 @@
    }
 
    public void onUpdateAbilities() {
    }
 
-   public void setGameMode(GameType var1) {
-   }
-
    public Component getName() {
       return new TextComponent(this.gameProfile.getName());
    }
 
    public PlayerEnderChestContainer getEnderChestInventory() {
@@ -1788,56 +1810,16 @@
 
    public boolean isModelPartShown(PlayerModelPart var1) {
       return ((Byte)this.getEntityData().get(DATA_PLAYER_MODE_CUSTOMISATION) & var1.getMask()) == var1.getMask();
    }
 
-   public boolean setSlot(int var1, ItemStack var2) {
+   public SlotAccess getSlot(int var1) {
       if (var1 >= 0 && var1 < this.inventory.items.size()) {
-         this.inventory.setItem(var1, var2);
-         return true;
+         return SlotAccess.forContainer(this.inventory, var1);
       } else {
-         EquipmentSlot var3;
-         if (var1 == 100 + EquipmentSlot.HEAD.getIndex()) {
-            var3 = EquipmentSlot.HEAD;
-         } else if (var1 == 100 + EquipmentSlot.CHEST.getIndex()) {
-            var3 = EquipmentSlot.CHEST;
-         } else if (var1 == 100 + EquipmentSlot.LEGS.getIndex()) {
-            var3 = EquipmentSlot.LEGS;
-         } else if (var1 == 100 + EquipmentSlot.FEET.getIndex()) {
-            var3 = EquipmentSlot.FEET;
-         } else {
-            var3 = null;
-         }
-
-         if (var1 == 98) {
-            this.setItemSlot(EquipmentSlot.MAINHAND, var2);
-            return true;
-         } else if (var1 == 99) {
-            this.setItemSlot(EquipmentSlot.OFFHAND, var2);
-            return true;
-         } else if (var3 == null) {
-            int var4 = var1 - 200;
-            if (var4 >= 0 && var4 < this.enderChestInventory.getContainerSize()) {
-               this.enderChestInventory.setItem(var4, var2);
-               return true;
-            } else {
-               return false;
-            }
-         } else {
-            if (!var2.isEmpty()) {
-               if (!(var2.getItem() instanceof ArmorItem) && !(var2.getItem() instanceof ElytraItem)) {
-                  if (var3 != EquipmentSlot.HEAD) {
-                     return false;
-                  }
-               } else if (Mob.getEquipmentSlotForItem(var2) != var3) {
-                  return false;
-               }
-            }
-
-            this.inventory.setItem(var3.getIndex() + this.inventory.items.size(), var2);
-            return true;
-         }
+         int var2 = var1 - 200;
+         return var2 >= 0 && var2 < this.enderChestInventory.getContainerSize() ? SlotAccess.forContainer(this.enderChestInventory, var2) : super.getSlot(var1);
       }
    }
 
    public boolean isReducedDebugInfo() {
       return this.reducedDebugInfo;
@@ -1983,10 +1965,18 @@
 
          return this.getPosition(var1).add((new Vec3(var2, -0.11D, 0.85D)).zRot(-var12).xRot(-var4).yRot(-var5));
       }
    }
 
+   public boolean isAlwaysTicking() {
+      return true;
+   }
+
+   public boolean isScoping() {
+      return this.isUsingItem() && this.getUseItem().is(Items.SPYGLASS);
+   }
+
    static {
       POSES = ImmutableMap.builder().put(Pose.STANDING, STANDING_DIMENSIONS).put(Pose.SLEEPING, SLEEPING_DIMENSIONS).put(Pose.FALL_FLYING, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.SWIMMING, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.SPIN_ATTACK, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.CROUCHING, EntityDimensions.scalable(0.6F, 1.5F)).put(Pose.DYING, EntityDimensions.fixed(0.2F, 0.2F)).build();
       DATA_PLAYER_ABSORPTION_ID = SynchedEntityData.defineId(Player.class, EntityDataSerializers.FLOAT);
       DATA_SCORE_ID = SynchedEntityData.defineId(Player.class, EntityDataSerializers.INT);
       DATA_PLAYER_MODE_CUSTOMISATION = SynchedEntityData.defineId(Player.class, EntityDataSerializers.BYTE);
