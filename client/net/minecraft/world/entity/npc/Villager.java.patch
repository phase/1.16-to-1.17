--- net/minecraft/world/entity/npc/Villager.java
+++ net/minecraft/world/entity/npc/Villager.java
@@ -1,7 +1,8 @@
 package net.minecraft.world.entity.npc;
 
+import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.serialization.DataResult;
@@ -41,11 +42,11 @@
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.SimpleContainer;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.effect.MobEffectInstance;
 import net.minecraft.world.effect.MobEffects;
-import net.minecraft.world.entity.AgableMob;
+import net.minecraft.world.entity.AgeableMob;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.ExperienceOrb;
 import net.minecraft.world.entity.LightningBolt;
 import net.minecraft.world.entity.LivingEntity;
@@ -86,16 +87,28 @@
 import net.minecraft.world.phys.AABB;
 import org.apache.logging.log4j.Logger;
 
 public class Villager extends AbstractVillager implements ReputationEventHandler, VillagerDataHolder {
    private static final EntityDataAccessor<VillagerData> DATA_VILLAGER_DATA;
+   public static final int BREEDING_FOOD_THRESHOLD = 12;
    public static final Map<Item, Integer> FOOD_POINTS;
+   private static final int TRADES_PER_LEVEL = 2;
    private static final Set<Item> WANTED_ITEMS;
+   private static final int MAX_GOSSIP_TOPICS = 10;
+   private static final int GOSSIP_COOLDOWN = 1200;
+   private static final int GOSSIP_DECAY_INTERVAL = 24000;
+   private static final int REPUTATION_CHANGE_PER_EVENT = 25;
+   private static final int HOW_FAR_AWAY_TO_TALK_TO_OTHER_VILLAGERS_ABOUT_GOLEMS = 10;
+   private static final int HOW_MANY_VILLAGERS_NEED_TO_AGREE_TO_SPAWN_A_GOLEM = 5;
+   private static final long TIME_SINCE_SLEEPING_FOR_GOLEM_SPAWNING = 24000L;
+   @VisibleForTesting
+   public static final float SPEED_MODIFIER = 0.5F;
    private int updateMerchantTimer;
    private boolean increaseProfessionLevelOnUpdate;
    @Nullable
    private Player lastTradedPlayer;
+   private boolean chasing;
    private byte foodLevel;
    private final GossipContainer gossips;
    private long lastGossipTime;
    private long lastGossipDecayTime;
    private int villagerXp;
@@ -230,11 +243,11 @@
       this.maybeDecayGossip();
    }
 
    public InteractionResult mobInteract(Player var1, InteractionHand var2) {
       ItemStack var3 = var1.getItemInHand(var2);
-      if (var3.getItem() != Items.VILLAGER_SPAWN_EGG && this.isAlive() && !this.isTrading() && !this.isSleeping()) {
+      if (!var3.is(Items.VILLAGER_SPAWN_EGG) && this.isAlive() && !this.isTrading() && !this.isSleeping()) {
          if (this.isBaby()) {
             this.setUnhappy();
             return InteractionResult.sidedSuccess(this.level.isClientSide);
          } else {
             boolean var4 = this.getOffers().isEmpty();
@@ -526,10 +539,18 @@
          this.level.addFreshEntity(new ExperienceOrb(this.level, this.getX(), this.getY() + 0.5D, this.getZ(), var2));
       }
 
    }
 
+   public void setChasing(boolean var1) {
+      this.chasing = var1;
+   }
+
+   public boolean isChasing() {
+      return this.chasing;
+   }
+
    public void setLastHurtByMob(@Nullable LivingEntity var1) {
       if (var1 != null && this.level instanceof ServerLevel) {
          ((ServerLevel)this.level).onReputationEvent(ReputationEventType.VILLAGER_HURT, var1, this);
          if (this.isAlive() && var1 instanceof Player) {
             this.level.broadcastEntityEvent(this, (byte)13);
@@ -684,11 +705,11 @@
       }
 
       return super.finalizeSpawn(var1, var2, var3, var4, var5);
    }
 
-   public Villager getBreedOffspring(ServerLevel var1, AgableMob var2) {
+   public Villager getBreedOffspring(ServerLevel var1, AgeableMob var2) {
       double var4 = this.random.nextDouble();
       VillagerType var3;
       if (var4 < 0.5D) {
          var3 = VillagerType.byBiome(var1.getBiomeName(this.blockPosition()));
       } else if (var4 < 0.75D) {
@@ -715,11 +736,11 @@
          }
 
          var3.setPersistenceRequired();
          var1.addFreshEntityWithPassengers(var3);
          this.releaseAllPois();
-         this.remove();
+         this.discard();
       } else {
          super.thunderHit(var1, var2);
       }
 
    }
@@ -735,11 +756,11 @@
 
          this.onItemPickup(var1);
          this.take(var1, var2.getCount());
          ItemStack var5 = var3.addItem(var2);
          if (var5.isEmpty()) {
-            var1.remove();
+            var1.discard();
          } else {
             var2.setCount(var5.getCount());
          }
       }
 
@@ -838,11 +859,11 @@
                if (var9.checkSpawnRules(var1, MobSpawnType.MOB_SUMMONED) && var9.checkSpawnObstruction(var1)) {
                   var1.addFreshEntityWithPassengers(var9);
                   return var9;
                }
 
-               var9.remove();
+               var9.discard();
             }
          }
       }
 
       return null;
