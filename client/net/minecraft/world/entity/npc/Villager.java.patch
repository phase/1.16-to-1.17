--- net/minecraft/world/entity/npc/Villager.java
+++ net/minecraft/world/entity/npc/Villager.java
@@ -1,17 +1,19 @@
 package net.minecraft.world.entity.npc;
 
+import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.serialization.DataResult;
 import com.mojang.serialization.Dynamic;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.Set;
 import java.util.function.BiPredicate;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
@@ -41,11 +43,11 @@
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.SimpleContainer;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.effect.MobEffectInstance;
 import net.minecraft.world.effect.MobEffects;
-import net.minecraft.world.entity.AgableMob;
+import net.minecraft.world.entity.AgeableMob;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.ExperienceOrb;
 import net.minecraft.world.entity.LightningBolt;
 import net.minecraft.world.entity.LivingEntity;
@@ -86,16 +88,28 @@
 import net.minecraft.world.phys.AABB;
 import org.apache.logging.log4j.Logger;
 
 public class Villager extends AbstractVillager implements ReputationEventHandler, VillagerDataHolder {
    private static final EntityDataAccessor<VillagerData> DATA_VILLAGER_DATA;
+   public static final int BREEDING_FOOD_THRESHOLD = 12;
    public static final Map<Item, Integer> FOOD_POINTS;
+   private static final int TRADES_PER_LEVEL = 2;
    private static final Set<Item> WANTED_ITEMS;
+   private static final int MAX_GOSSIP_TOPICS = 10;
+   private static final int GOSSIP_COOLDOWN = 1200;
+   private static final int GOSSIP_DECAY_INTERVAL = 24000;
+   private static final int REPUTATION_CHANGE_PER_EVENT = 25;
+   private static final int HOW_FAR_AWAY_TO_TALK_TO_OTHER_VILLAGERS_ABOUT_GOLEMS = 10;
+   private static final int HOW_MANY_VILLAGERS_NEED_TO_AGREE_TO_SPAWN_A_GOLEM = 5;
+   private static final long TIME_SINCE_SLEEPING_FOR_GOLEM_SPAWNING = 24000L;
+   @VisibleForTesting
+   public static final float SPEED_MODIFIER = 0.5F;
    private int updateMerchantTimer;
    private boolean increaseProfessionLevelOnUpdate;
    @Nullable
    private Player lastTradedPlayer;
+   private boolean chasing;
    private byte foodLevel;
    private final GossipContainer gossips;
    private long lastGossipTime;
    private long lastGossipDecayTime;
    private int villagerXp;
@@ -230,11 +244,11 @@
       this.maybeDecayGossip();
    }
 
    public InteractionResult mobInteract(Player var1, InteractionHand var2) {
       ItemStack var3 = var1.getItemInHand(var2);
-      if (var3.getItem() != Items.VILLAGER_SPAWN_EGG && this.isAlive() && !this.isTrading() && !this.isSleeping()) {
+      if (!var3.is(Items.VILLAGER_SPAWN_EGG) && this.isAlive() && !this.isTrading() && !this.isSleeping()) {
          if (this.isBaby()) {
             this.setUnhappy();
             return InteractionResult.sidedSuccess(this.level.isClientSide);
          } else {
             boolean var4 = this.getOffers().isEmpty();
@@ -415,11 +429,11 @@
 
    public void addAdditionalSaveData(CompoundTag var1) {
       super.addAdditionalSaveData(var1);
       DataResult var10000 = VillagerData.CODEC.encodeStart(NbtOps.INSTANCE, this.getVillagerData());
       Logger var10001 = LOGGER;
-      var10001.getClass();
+      Objects.requireNonNull(var10001);
       var10000.resultOrPartial(var10001::error).ifPresent((var1x) -> {
          var1.put("VillagerData", var1x);
       });
       var1.putByte("FoodLevel", this.foodLevel);
       var1.put("Gossips", (Tag)this.gossips.store(NbtOps.INSTANCE).getValue());
@@ -436,11 +450,11 @@
    public void readAdditionalSaveData(CompoundTag var1) {
       super.readAdditionalSaveData(var1);
       if (var1.contains("VillagerData", 10)) {
          DataResult var2 = VillagerData.CODEC.parse(new Dynamic(NbtOps.INSTANCE, var1.get("VillagerData")));
          Logger var10001 = LOGGER;
-         var10001.getClass();
+         Objects.requireNonNull(var10001);
          var2.resultOrPartial(var10001::error).ifPresent(this::setVillagerData);
       }
 
       if (var1.contains("Offers", 10)) {
          this.offers = new MerchantOffers(var1.getCompound("Offers"));
@@ -526,10 +540,18 @@
          this.level.addFreshEntity(new ExperienceOrb(this.level, this.getX(), this.getY() + 0.5D, this.getZ(), var2));
       }
 
    }
 
+   public void setChasing(boolean var1) {
+      this.chasing = var1;
+   }
+
+   public boolean isChasing() {
+      return this.chasing;
+   }
+
    public void setLastHurtByMob(@Nullable LivingEntity var1) {
       if (var1 != null && this.level instanceof ServerLevel) {
          ((ServerLevel)this.level).onReputationEvent(ReputationEventType.VILLAGER_HURT, var1, this);
          if (this.isAlive() && var1 instanceof Player) {
             this.level.broadcastEntityEvent(this, (byte)13);
@@ -557,11 +579,11 @@
       this.releasePoi(MemoryModuleType.MEETING_POINT);
    }
 
    private void tellWitnessesThatIWasMurdered(Entity var1) {
       if (this.level instanceof ServerLevel) {
-         Optional var2 = this.brain.getMemory(MemoryModuleType.VISIBLE_LIVING_ENTITIES);
+         Optional var2 = this.brain.getMemory(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES);
          if (var2.isPresent()) {
             ServerLevel var3 = (ServerLevel)this.level;
             ((List)var2.get()).stream().filter((var0) -> {
                return var0 instanceof ReputationEventHandler;
             }).forEach((var2x) -> {
@@ -578,11 +600,11 @@
             ServerLevel var4 = var2.getLevel(var3.dimension());
             if (var4 != null) {
                PoiManager var5 = var4.getPoiManager();
                Optional var6 = var5.getType(var3.pos());
                BiPredicate var7 = (BiPredicate)POI_MEMORIES.get(var1);
-               if (var6.isPresent() && var7.test(this, var6.get())) {
+               if (var6.isPresent() && var7.test(this, (PoiType)var6.get())) {
                   var5.release(var3.pos());
                   DebugPackets.sendPoiTicketCountPacket(var4, var3.pos());
                }
 
             }
@@ -649,11 +671,12 @@
       this.setVillagerData(this.getVillagerData().setLevel(this.getVillagerData().getLevel() + 1));
       this.updateTrades();
    }
 
    protected Component getTypeName() {
-      return new TranslatableComponent(this.getType().getDescriptionId() + '.' + Registry.VILLAGER_PROFESSION.getKey(this.getVillagerData().getProfession()).getPath());
+      String var10002 = this.getType().getDescriptionId();
+      return new TranslatableComponent(var10002 + "." + Registry.VILLAGER_PROFESSION.getKey(this.getVillagerData().getProfession()).getPath());
    }
 
    public void handleEntityEvent(byte var1) {
       if (var1 == 12) {
          this.addParticlesAroundSelf(ParticleTypes.HEART);
@@ -684,11 +707,11 @@
       }
 
       return super.finalizeSpawn(var1, var2, var3, var4, var5);
    }
 
-   public Villager getBreedOffspring(ServerLevel var1, AgableMob var2) {
+   public Villager getBreedOffspring(ServerLevel var1, AgeableMob var2) {
       double var4 = this.random.nextDouble();
       VillagerType var3;
       if (var4 < 0.5D) {
          var3 = VillagerType.byBiome(var1.getBiomeName(this.blockPosition()));
       } else if (var4 < 0.75D) {
@@ -704,22 +727,22 @@
 
    public void thunderHit(ServerLevel var1, LightningBolt var2) {
       if (var1.getDifficulty() != Difficulty.PEACEFUL) {
          LOGGER.info("Villager {} was struck by lightning {}.", this, var2);
          Witch var3 = (Witch)EntityType.WITCH.create(var1);
-         var3.moveTo(this.getX(), this.getY(), this.getZ(), this.yRot, this.xRot);
+         var3.moveTo(this.getX(), this.getY(), this.getZ(), this.getYRot(), this.getXRot());
          var3.finalizeSpawn(var1, var1.getCurrentDifficultyAt(var3.blockPosition()), MobSpawnType.CONVERSION, (SpawnGroupData)null, (CompoundTag)null);
          var3.setNoAi(this.isNoAi());
          if (this.hasCustomName()) {
             var3.setCustomName(this.getCustomName());
             var3.setCustomNameVisible(this.isCustomNameVisible());
          }
 
          var3.setPersistenceRequired();
          var1.addFreshEntityWithPassengers(var3);
          this.releaseAllPois();
-         this.remove();
+         this.discard();
       } else {
          super.thunderHit(var1, var2);
       }
 
    }
@@ -735,11 +758,11 @@
 
          this.onItemPickup(var1);
          this.take(var1, var2.getCount());
          ItemStack var5 = var3.addItem(var2);
          if (var5.isEmpty()) {
-            var1.remove();
+            var1.discard();
          } else {
             var2.setCount(var5.getCount());
          }
       }
 
@@ -838,11 +861,11 @@
                if (var9.checkSpawnRules(var1, MobSpawnType.MOB_SUMMONED) && var9.checkSpawnObstruction(var1)) {
                   var1.addFreshEntityWithPassengers(var9);
                   return var9;
                }
 
-               var9.remove();
+               var9.discard();
             }
          }
       }
 
       return null;
@@ -930,11 +953,11 @@
 
    static {
       DATA_VILLAGER_DATA = SynchedEntityData.defineId(Villager.class, EntityDataSerializers.VILLAGER_DATA);
       FOOD_POINTS = ImmutableMap.of(Items.BREAD, 4, Items.POTATO, 1, Items.CARROT, 1, Items.BEETROOT, 1);
       WANTED_ITEMS = ImmutableSet.of(Items.BREAD, Items.POTATO, Items.CARROT, Items.WHEAT, Items.WHEAT_SEEDS, Items.BEETROOT, new Item[]{Items.BEETROOT_SEEDS});
-      MEMORY_TYPES = ImmutableList.of(MemoryModuleType.HOME, MemoryModuleType.JOB_SITE, MemoryModuleType.POTENTIAL_JOB_SITE, MemoryModuleType.MEETING_POINT, MemoryModuleType.LIVING_ENTITIES, MemoryModuleType.VISIBLE_LIVING_ENTITIES, MemoryModuleType.VISIBLE_VILLAGER_BABIES, MemoryModuleType.NEAREST_PLAYERS, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_TARGETABLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_WANTED_ITEM, MemoryModuleType.WALK_TARGET, new MemoryModuleType[]{MemoryModuleType.LOOK_TARGET, MemoryModuleType.INTERACTION_TARGET, MemoryModuleType.BREED_TARGET, MemoryModuleType.PATH, MemoryModuleType.DOORS_TO_CLOSE, MemoryModuleType.NEAREST_BED, MemoryModuleType.HURT_BY, MemoryModuleType.HURT_BY_ENTITY, MemoryModuleType.NEAREST_HOSTILE, MemoryModuleType.SECONDARY_JOB_SITE, MemoryModuleType.HIDING_PLACE, MemoryModuleType.HEARD_BELL_TIME, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.LAST_SLEPT, MemoryModuleType.LAST_WOKEN, MemoryModuleType.LAST_WORKED_AT_POI, MemoryModuleType.GOLEM_DETECTED_RECENTLY});
+      MEMORY_TYPES = ImmutableList.of(MemoryModuleType.HOME, MemoryModuleType.JOB_SITE, MemoryModuleType.POTENTIAL_JOB_SITE, MemoryModuleType.MEETING_POINT, MemoryModuleType.NEAREST_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.VISIBLE_VILLAGER_BABIES, MemoryModuleType.NEAREST_PLAYERS, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_WANTED_ITEM, MemoryModuleType.WALK_TARGET, new MemoryModuleType[]{MemoryModuleType.LOOK_TARGET, MemoryModuleType.INTERACTION_TARGET, MemoryModuleType.BREED_TARGET, MemoryModuleType.PATH, MemoryModuleType.DOORS_TO_CLOSE, MemoryModuleType.NEAREST_BED, MemoryModuleType.HURT_BY, MemoryModuleType.HURT_BY_ENTITY, MemoryModuleType.NEAREST_HOSTILE, MemoryModuleType.SECONDARY_JOB_SITE, MemoryModuleType.HIDING_PLACE, MemoryModuleType.HEARD_BELL_TIME, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.LAST_SLEPT, MemoryModuleType.LAST_WOKEN, MemoryModuleType.LAST_WORKED_AT_POI, MemoryModuleType.GOLEM_DETECTED_RECENTLY});
       SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.NEAREST_ITEMS, SensorType.NEAREST_BED, SensorType.HURT_BY, SensorType.VILLAGER_HOSTILES, SensorType.VILLAGER_BABIES, SensorType.SECONDARY_POIS, SensorType.GOLEM_DETECTED);
       POI_MEMORIES = ImmutableMap.of(MemoryModuleType.HOME, (var0, var1) -> {
          return var1 == PoiType.HOME;
       }, MemoryModuleType.JOB_SITE, (var0, var1) -> {
          return var0.getVillagerData().getProfession().getJobPoiType() == var1;
