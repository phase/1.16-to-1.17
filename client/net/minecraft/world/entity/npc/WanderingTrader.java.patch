--- net/minecraft/world/entity/npc/WanderingTrader.java
+++ net/minecraft/world/entity/npc/WanderingTrader.java
@@ -10,11 +10,11 @@
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.stats.Stats;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.damagesource.DamageSource;
-import net.minecraft.world.entity.AgableMob;
+import net.minecraft.world.entity.AgeableMob;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.ExperienceOrb;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.ai.goal.AvoidEntityGoal;
 import net.minecraft.world.entity.ai.goal.FloatGoal;
@@ -33,11 +33,10 @@
 import net.minecraft.world.entity.monster.Vex;
 import net.minecraft.world.entity.monster.Vindicator;
 import net.minecraft.world.entity.monster.Zoglin;
 import net.minecraft.world.entity.monster.Zombie;
 import net.minecraft.world.entity.player.Player;
-import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.alchemy.PotionUtils;
 import net.minecraft.world.item.alchemy.Potions;
 import net.minecraft.world.item.trading.MerchantOffer;
@@ -50,11 +49,10 @@
    private BlockPos wanderTarget;
    private int despawnDelay;
 
    public WanderingTrader(EntityType<? extends WanderingTrader> var1, Level var2) {
       super(var1, var2);
-      this.forcedLoading = true;
    }
 
    protected void registerGoals() {
       this.goalSelector.addGoal(0, new FloatGoal(this));
       this.goalSelector.addGoal(0, new UseItemGoal(this, PotionUtils.setPotion(new ItemStack(Items.POTION), Potions.INVISIBILITY), SoundEvents.WANDERING_TRADER_DISAPPEARED, (var1) -> {
@@ -79,21 +77,21 @@
       this.goalSelector.addGoal(9, new InteractGoal(this, Player.class, 3.0F, 1.0F));
       this.goalSelector.addGoal(10, new LookAtPlayerGoal(this, Mob.class, 8.0F));
    }
 
    @Nullable
-   public AgableMob getBreedOffspring(ServerLevel var1, AgableMob var2) {
+   public AgeableMob getBreedOffspring(ServerLevel var1, AgeableMob var2) {
       return null;
    }
 
    public boolean showProgressBar() {
       return false;
    }
 
    public InteractionResult mobInteract(Player var1, InteractionHand var2) {
       ItemStack var3 = var1.getItemInHand(var2);
-      if (var3.getItem() != Items.VILLAGER_SPAWN_EGG && this.isAlive() && !this.isTrading() && !this.isBaby()) {
+      if (!var3.is(Items.VILLAGER_SPAWN_EGG) && this.isAlive() && !this.isTrading() && !this.isBaby()) {
          if (var2 == InteractionHand.MAIN_HAND) {
             var1.awardStat(Stats.TALKED_TO_VILLAGER);
          }
 
          if (this.getOffers().isEmpty()) {
@@ -172,12 +170,11 @@
    protected SoundEvent getDeathSound() {
       return SoundEvents.WANDERING_TRADER_DEATH;
    }
 
    protected SoundEvent getDrinkingSound(ItemStack var1) {
-      Item var2 = var1.getItem();
-      return var2 == Items.MILK_BUCKET ? SoundEvents.WANDERING_TRADER_DRINK_MILK : SoundEvents.WANDERING_TRADER_DRINK_POTION;
+      return var1.is(Items.MILK_BUCKET) ? SoundEvents.WANDERING_TRADER_DRINK_MILK : SoundEvents.WANDERING_TRADER_DRINK_POTION;
    }
 
    protected SoundEvent getTradeUpdatedSound(boolean var1) {
       return var1 ? SoundEvents.WANDERING_TRADER_YES : SoundEvents.WANDERING_TRADER_NO;
    }
@@ -202,11 +199,11 @@
 
    }
 
    private void maybeDespawn() {
       if (this.despawnDelay > 0 && !this.isTrading() && --this.despawnDelay == 0) {
-         this.remove();
+         this.discard();
       }
 
    }
 
    public void setWanderTarget(@Nullable BlockPos var1) {
