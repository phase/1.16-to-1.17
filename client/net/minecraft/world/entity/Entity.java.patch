--- net/minecraft/world/entity/Entity.java
+++ net/minecraft/world/entity/Entity.java
@@ -1,24 +1,26 @@
 package net.minecraft.world.entity;
 
+import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
+import com.google.common.collect.UnmodifiableIterator;
 import it.unimi.dsi.fastutil.objects.Object2DoubleArrayMap;
 import it.unimi.dsi.fastutil.objects.Object2DoubleMap;
+import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.Collection;
 import java.util.Collections;
-import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Locale;
 import java.util.Optional;
 import java.util.Random;
 import java.util.Set;
 import java.util.UUID;
 import java.util.concurrent.atomic.AtomicInteger;
+import java.util.function.Predicate;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
 import net.minecraft.BlockUtil;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
@@ -39,10 +41,11 @@
 import net.minecraft.network.chat.ClickEvent;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.HoverEvent;
 import net.minecraft.network.chat.MutableComponent;
 import net.minecraft.network.protocol.Packet;
+import net.minecraft.network.protocol.game.ClientboundAddEntityPacket;
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.EntityDataSerializers;
 import net.minecraft.network.syncher.SynchedEntityData;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
@@ -86,10 +89,14 @@
 import net.minecraft.world.level.block.SoundType;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.border.WorldBorder;
 import net.minecraft.world.level.dimension.DimensionType;
+import net.minecraft.world.level.entity.EntityAccess;
+import net.minecraft.world.level.entity.EntityInLevelCallback;
+import net.minecraft.world.level.gameevent.GameEvent;
+import net.minecraft.world.level.gameevent.GameEventListenerRegistrar;
 import net.minecraft.world.level.levelgen.Heightmap;
 import net.minecraft.world.level.material.Fluid;
 import net.minecraft.world.level.material.FluidState;
 import net.minecraft.world.level.material.PushReaction;
 import net.minecraft.world.level.portal.PortalInfo;
@@ -105,24 +112,23 @@
 import net.minecraft.world.scores.PlayerTeam;
 import net.minecraft.world.scores.Team;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public abstract class Entity implements Nameable, CommandSource {
+public abstract class Entity implements Nameable, EntityAccess, CommandSource {
    protected static final Logger LOGGER = LogManager.getLogger();
    private static final AtomicInteger ENTITY_COUNTER = new AtomicInteger();
    private static final List<ItemStack> EMPTY_LIST = Collections.emptyList();
    private static final AABB INITIAL_AABB = new AABB(0.0D, 0.0D, 0.0D, 0.0D, 0.0D, 0.0D);
    private static double viewScale = 1.0D;
    private final EntityType<?> type;
    private int id;
    public boolean blocksBuilding;
-   private final List<Entity> passengers;
+   private ImmutableList<Entity> passengers;
    protected int boardingCooldown;
    @Nullable
    private Entity vehicle;
-   public boolean forcedLoading;
    public Level level;
    public double xo;
    public double yo;
    public double zo;
    private Vec3 position;
@@ -136,17 +142,18 @@
    protected boolean onGround;
    public boolean horizontalCollision;
    public boolean verticalCollision;
    public boolean hurtMarked;
    protected Vec3 stuckSpeedMultiplier;
-   public boolean removed;
+   @Nullable
+   private Entity.RemovalReason removalReason;
    public float walkDistO;
    public float walkDist;
    public float moveDist;
+   public float flyDist;
    public float fallDistance;
    private float nextStep;
-   private float nextFlap;
    public double xOld;
    public double yOld;
    public double zOld;
    public float maxUpStep;
    public boolean noPhysics;
@@ -167,15 +174,12 @@
    private static final EntityDataAccessor<Optional<Component>> DATA_CUSTOM_NAME;
    private static final EntityDataAccessor<Boolean> DATA_CUSTOM_NAME_VISIBLE;
    private static final EntityDataAccessor<Boolean> DATA_SILENT;
    private static final EntityDataAccessor<Boolean> DATA_NO_GRAVITY;
    protected static final EntityDataAccessor<Pose> DATA_POSE;
-   public boolean inChunk;
-   public int xChunk;
-   public int yChunk;
-   public int zChunk;
-   private boolean movedSinceLastChunkCheck;
+   private static final EntityDataAccessor<Integer> DATA_TICKS_FROZEN;
+   private EntityInLevelCallback levelCallback;
    private Vec3 packetCoordinates;
    public boolean noCulling;
    public boolean hasImpulse;
    private int portalCooldown;
    protected boolean isInsidePortal;
@@ -184,48 +188,53 @@
    private boolean invulnerable;
    protected UUID uuid;
    protected String stringUUID;
    protected boolean glowing;
    private final Set<String> tags;
-   private boolean forceChunkAddition;
    private final double[] pistonDeltas;
    private long pistonDeltasGameTime;
    private EntityDimensions dimensions;
    private float eyeHeight;
+   public boolean isInPowderSnow;
+   public boolean wasInPowderSnow;
+   public boolean wasOnFire;
+   private float crystalSoundIntensity;
+   private int lastCrystalSoundPlayTick;
 
    public Entity(EntityType<?> var1, Level var2) {
       this.id = ENTITY_COUNTER.incrementAndGet();
-      this.passengers = Lists.newArrayList();
+      this.passengers = ImmutableList.of();
       this.deltaMovement = Vec3.ZERO;
       this.bb = INITIAL_AABB;
       this.stuckSpeedMultiplier = Vec3.ZERO;
       this.nextStep = 1.0F;
-      this.nextFlap = 1.0F;
       this.random = new Random();
       this.remainingFireTicks = -this.getFireImmuneTicks();
       this.fluidHeight = new Object2DoubleArrayMap(2);
       this.firstTick = true;
+      this.levelCallback = EntityInLevelCallback.NULL;
       this.uuid = Mth.createInsecureUUID(this.random);
       this.stringUUID = this.uuid.toString();
       this.tags = Sets.newHashSet();
       this.pistonDeltas = new double[]{0.0D, 0.0D, 0.0D};
       this.type = var1;
       this.level = var2;
       this.dimensions = var1.getDimensions();
       this.position = Vec3.ZERO;
       this.blockPosition = BlockPos.ZERO;
       this.packetCoordinates = Vec3.ZERO;
-      this.setPos(0.0D, 0.0D, 0.0D);
       this.entityData = new SynchedEntityData(this);
       this.entityData.define(DATA_SHARED_FLAGS_ID, (byte)0);
       this.entityData.define(DATA_AIR_SUPPLY_ID, this.getMaxAirSupply());
       this.entityData.define(DATA_CUSTOM_NAME_VISIBLE, false);
       this.entityData.define(DATA_CUSTOM_NAME, Optional.empty());
       this.entityData.define(DATA_SILENT, false);
       this.entityData.define(DATA_NO_GRAVITY, false);
       this.entityData.define(DATA_POSE, Pose.STANDING);
+      this.entityData.define(DATA_TICKS_FROZEN, 0);
       this.defineSynchedData();
+      this.setPos(0.0D, 0.0D, 0.0D);
       this.eyeHeight = this.getEyeHeight(Pose.STANDING, this.dimensions);
    }
 
    public boolean isColliding(BlockPos var1, BlockState var2) {
       VoxelShape var3 = var2.getCollisionShape(this.level, var1, CollisionContext.of(this));
@@ -288,13 +297,17 @@
    public boolean removeTag(String var1) {
       return this.tags.remove(var1);
    }
 
    public void kill() {
-      this.remove();
+      this.remove(Entity.RemovalReason.KILLED);
    }
 
+   public final void discard() {
+      this.remove(Entity.RemovalReason.DISCARDED);
+   }
+
    protected abstract void defineSynchedData();
 
    public SynchedEntityData getEntityData() {
       return this.entityData;
    }
@@ -309,26 +322,16 @@
 
    public int hashCode() {
       return this.id;
    }
 
-   protected void resetPos() {
-      if (this.level != null) {
-         for(double var1 = this.getY(); var1 > 0.0D && var1 < 256.0D; ++var1) {
-            this.setPos(this.getX(), var1, this.getZ());
-            if (this.level.noCollision(this)) {
-               break;
-            }
-         }
-
-         this.setDeltaMovement(Vec3.ZERO);
-         this.xRot = 0.0F;
+   public void remove(Entity.RemovalReason var1) {
+      this.setRemoved(var1);
+      if (var1 == Entity.RemovalReason.KILLED) {
+         this.gameEvent(GameEvent.ENTITY_KILLED);
       }
-   }
 
-   public void remove() {
-      this.removed = true;
    }
 
    public void setPose(Pose var1) {
       this.entityData.set(DATA_POSE, var1);
    }
@@ -347,15 +350,23 @@
    protected void setRot(float var1, float var2) {
       this.yRot = var1 % 360.0F;
       this.xRot = var2 % 360.0F;
    }
 
+   public final void setPos(Vec3 var1) {
+      this.setPos(var1.x(), var1.y(), var1.z());
+   }
+
    public void setPos(double var1, double var3, double var5) {
       this.setPosRaw(var1, var3, var5);
-      this.setBoundingBox(this.dimensions.makeBoundingBox(var1, var3, var5));
+      this.setBoundingBox(this.makeBoundingBox());
    }
 
+   protected AABB makeBoundingBox() {
+      return this.dimensions.makeBoundingBox(this.position);
+   }
+
    protected void reapplyPosition() {
       this.setPos(this.position.x, this.position.y, this.position.z);
    }
 
    public void turn(double var1, double var3) {
@@ -381,11 +392,11 @@
       this.baseTick();
    }
 
    public void baseTick() {
       this.level.getProfiler().push("entityBaseTick");
-      if (this.isPassenger() && this.getVehicle().removed) {
+      if (this.isPassenger() && this.getVehicle().isRemoved()) {
          this.stopRiding();
       }
 
       if (this.boardingCooldown > 0) {
          --this.boardingCooldown;
@@ -397,10 +408,12 @@
       this.handleNetherPortal();
       if (this.canSpawnSprintParticle()) {
          this.spawnSprintParticle();
       }
 
+      this.wasInPowderSnow = this.isInPowderSnow;
+      this.isInPowderSnow = false;
       this.updateInWaterStateAndDoFluidPushing();
       this.updateFluidOnEyes();
       this.updateSwimming();
       if (this.level.isClientSide) {
          this.clearFire();
@@ -415,29 +428,39 @@
                this.hurt(DamageSource.ON_FIRE, 1.0F);
             }
 
             this.setRemainingFireTicks(this.remainingFireTicks - 1);
          }
+
+         this.setTicksFrozen(0);
       }
 
       if (this.isInLava()) {
          this.lavaHurt();
          this.fallDistance *= 0.5F;
       }
 
-      if (this.getY() < -64.0D) {
-         this.outOfWorld();
-      }
-
+      this.checkOutOfWorld();
       if (!this.level.isClientSide) {
-         this.setSharedFlag(0, this.remainingFireTicks > 0);
+         this.setSharedFlagOnFire(this.remainingFireTicks > 0);
       }
 
       this.firstTick = false;
       this.level.getProfiler().pop();
    }
 
+   public void setSharedFlagOnFire(boolean var1) {
+      this.setSharedFlag(0, var1);
+   }
+
+   public void checkOutOfWorld() {
+      if (this.getY() < (double)(this.level.getMinBuildHeight() - 64)) {
+         this.outOfWorld();
+      }
+
+   }
+
    public void setPortalCooldown() {
       this.portalCooldown = this.getDimensionChangingDelay();
    }
 
    public boolean isOnPortalCooldown() {
@@ -453,13 +476,16 @@
 
    public int getPortalWaitTime() {
       return 0;
    }
 
-   protected void lavaHurt() {
+   public void lavaHurt() {
       if (!this.fireImmune()) {
-         this.setSecondsOnFire(15);
+         if (!this.isInWaterRainOrBubble() && !this.isInPowderSnow) {
+            this.setSecondsOnFire(15);
+         }
+
          this.hurt(DamageSource.LAVA, 4.0F);
       }
    }
 
    public void setSecondsOnFire(int var1) {
@@ -485,11 +511,11 @@
    public void clearFire() {
       this.setRemainingFireTicks(0);
    }
 
    protected void outOfWorld() {
-      this.remove();
+      this.discard();
    }
 
    public boolean isFree(double var1, double var3, double var5) {
       return this.isFree(this.getBoundingBox().move(var1, var3, var5));
    }
@@ -506,13 +532,13 @@
       return this.onGround;
    }
 
    public void move(MoverType var1, Vec3 var2) {
       if (this.noPhysics) {
-         this.setBoundingBox(this.getBoundingBox().move(var2));
-         this.setLocationFromBoundingbox();
+         this.setPos(this.getX() + var2.x, this.getY() + var2.y, this.getZ() + var2.z);
       } else {
+         this.wasOnFire = this.isOnFire();
          if (var1 == MoverType.PISTON) {
             var2 = this.limitPistonMovement(var2);
             if (var2.equals(Vec3.ZERO)) {
                return;
             }
@@ -526,12 +552,11 @@
          }
 
          var2 = this.maybeBackOffFromEdge(var2, var1);
          Vec3 var3 = this.collide(var2);
          if (var3.lengthSqr() > 1.0E-7D) {
-            this.setBoundingBox(this.getBoundingBox().move(var3));
-            this.setLocationFromBoundingbox();
+            this.setPos(this.getX() + var3.x, this.getY() + var3.y, this.getZ() + var3.z);
          }
 
          this.level.getProfiler().pop();
          this.level.getProfiler().push("rest");
          this.horizontalCollision = !Mth.equal(var2.x, var3.x) || !Mth.equal(var2.z, var3.z);
@@ -556,76 +581,102 @@
 
          if (this.onGround && !this.isSteppingCarefully()) {
             var7.stepOn(this.level, var4, this);
          }
 
-         if (this.isMovementNoisy() && !this.isPassenger()) {
-            double var8 = var3.x;
-            double var10 = var3.y;
-            double var12 = var3.z;
-            if (!var7.is((Tag)BlockTags.CLIMBABLE)) {
-               var10 = 0.0D;
+         Entity.MovementEmission var8 = this.getMovementEmission();
+         if (var8.emitsAnything() && !this.isPassenger()) {
+            double var9 = var3.x;
+            double var11 = var3.y;
+            double var13 = var3.z;
+            this.flyDist = (float)((double)this.flyDist + var3.length() * 0.6D);
+            if (!var5.is(BlockTags.CLIMBABLE) && !var5.is(Blocks.POWDER_SNOW)) {
+               var11 = 0.0D;
             }
 
             this.walkDist = (float)((double)this.walkDist + (double)Mth.sqrt(getHorizontalDistanceSqr(var3)) * 0.6D);
-            this.moveDist = (float)((double)this.moveDist + (double)Mth.sqrt(var8 * var8 + var10 * var10 + var12 * var12) * 0.6D);
+            this.moveDist = (float)((double)this.moveDist + (double)Mth.sqrt(var9 * var9 + var11 * var11 + var13 * var13) * 0.6D);
             if (this.moveDist > this.nextStep && !var5.isAir()) {
                this.nextStep = this.nextStep();
                if (this.isInWater()) {
-                  Entity var14 = this.isVehicle() && this.getControllingPassenger() != null ? this.getControllingPassenger() : this;
-                  float var15 = var14 == this ? 0.35F : 0.4F;
-                  Vec3 var16 = var14.getDeltaMovement();
-                  float var17 = Mth.sqrt(var16.x * var16.x * 0.20000000298023224D + var16.y * var16.y + var16.z * var16.z * 0.20000000298023224D) * var15;
-                  if (var17 > 1.0F) {
-                     var17 = 1.0F;
+                  if (var8.emitsSounds()) {
+                     Entity var15 = this.isVehicle() && this.getControllingPassenger() != null ? this.getControllingPassenger() : this;
+                     float var16 = var15 == this ? 0.35F : 0.4F;
+                     Vec3 var17 = var15.getDeltaMovement();
+                     float var18 = Mth.sqrt(var17.x * var17.x * 0.20000000298023224D + var17.y * var17.y + var17.z * var17.z * 0.20000000298023224D) * var16;
+                     if (var18 > 1.0F) {
+                        var18 = 1.0F;
+                     }
+
+                     this.playSwimSound(var18);
                   }
 
-                  this.playSwimSound(var17);
+                  if (var8.emitsEvents()) {
+                     this.gameEvent(GameEvent.SWIM);
+                  }
                } else {
-                  this.playStepSound(var4, var5);
+                  if (var8.emitsSounds()) {
+                     this.playStepSound(var4, var5);
+                  }
+
+                  if (var8.emitsEvents() && !var5.is(BlockTags.OCCLUDES_VIBRATION_SIGNALS)) {
+                     this.gameEvent(GameEvent.STEP);
+                  }
                }
-            } else if (this.moveDist > this.nextFlap && this.makeFlySound() && var5.isAir()) {
-               this.nextFlap = this.playFlySound(this.moveDist);
+            } else if (var5.isAir()) {
+               this.processFlappingMovement();
             }
          }
 
          try {
             this.checkInsideBlocks();
-         } catch (Throwable var18) {
-            CrashReport var9 = CrashReport.forThrowable(var18, "Checking entity block collision");
-            CrashReportCategory var20 = var9.addCategory("Entity being checked for collision");
-            this.fillCrashReportCategory(var20);
-            throw new ReportedException(var9);
+         } catch (Throwable var19) {
+            CrashReport var10 = CrashReport.forThrowable(var19, "Checking entity block collision");
+            CrashReportCategory var21 = var10.addCategory("Entity being checked for collision");
+            this.fillCrashReportCategory(var21);
+            throw new ReportedException(var10);
          }
 
-         float var19 = this.getBlockSpeedFactor();
-         this.setDeltaMovement(this.getDeltaMovement().multiply((double)var19, 1.0D, (double)var19));
-         if (this.level.getBlockStatesIfLoaded(this.getBoundingBox().deflate(0.001D)).noneMatch((var0) -> {
+         float var20 = this.getBlockSpeedFactor();
+         this.setDeltaMovement(this.getDeltaMovement().multiply((double)var20, 1.0D, (double)var20));
+         if (this.level.getBlockStatesIfLoaded(this.getBoundingBox().deflate(1.0E-6D)).noneMatch((var0) -> {
             return var0.is(BlockTags.FIRE) || var0.is(Blocks.LAVA);
          }) && this.remainingFireTicks <= 0) {
             this.setRemainingFireTicks(-this.getFireImmuneTicks());
          }
 
-         if (this.isInWaterRainOrBubble() && this.isOnFire()) {
-            this.playSound(SoundEvents.GENERIC_EXTINGUISH_FIRE, 0.7F, 1.6F + (this.random.nextFloat() - this.random.nextFloat()) * 0.4F);
+         if ((this.isInWaterRainOrBubble() || this.isInPowderSnow) && this.isOnFire()) {
+            if (this.wasOnFire) {
+               this.playSound(SoundEvents.GENERIC_EXTINGUISH_FIRE, 0.7F, 1.6F + (this.random.nextFloat() - this.random.nextFloat()) * 0.4F);
+            }
+
             this.setRemainingFireTicks(-this.getFireImmuneTicks());
          }
 
          this.level.getProfiler().pop();
       }
    }
 
+   protected void processFlappingMovement() {
+      if (this.isFlapping()) {
+         this.onFlap();
+         if (this.getMovementEmission().emitsEvents()) {
+            this.gameEvent(GameEvent.FLAP);
+         }
+      }
+
+   }
+
    protected BlockPos getOnPos() {
       int var1 = Mth.floor(this.position.x);
       int var2 = Mth.floor(this.position.y - 0.20000000298023224D);
       int var3 = Mth.floor(this.position.z);
       BlockPos var4 = new BlockPos(var1, var2, var3);
       if (this.level.getBlockState(var4).isAir()) {
          BlockPos var5 = var4.below();
          BlockState var6 = this.level.getBlockState(var5);
-         Block var7 = var6.getBlock();
-         if (var7.is((Tag)BlockTags.FENCES) || var7.is((Tag)BlockTags.WALLS) || var7 instanceof FenceGateBlock) {
+         if (var6.is(BlockTags.FENCES) || var6.is(BlockTags.WALLS) || var6.getBlock() instanceof FenceGateBlock) {
             return var5;
          }
       }
 
       return var4;
@@ -636,13 +687,13 @@
       float var2 = this.level.getBlockState(this.getBlockPosBelowThatAffectsMyMovement()).getBlock().getJumpFactor();
       return (double)var1 == 1.0D ? var2 : var1;
    }
 
    protected float getBlockSpeedFactor() {
-      Block var1 = this.level.getBlockState(this.blockPosition()).getBlock();
-      float var2 = var1.getSpeedFactor();
-      if (var1 != Blocks.WATER && var1 != Blocks.BUBBLE_COLUMN) {
+      BlockState var1 = this.level.getBlockState(this.blockPosition());
+      float var2 = var1.getBlock().getSpeedFactor();
+      if (!var1.is(Blocks.WATER) && !var1.is(Blocks.BUBBLE_COLUMN)) {
          return (double)var2 == 1.0D ? this.level.getBlockState(this.getBlockPosBelowThatAffectsMyMovement()).getBlock().getSpeedFactor() : var2;
       } else {
          return var2;
       }
    }
@@ -805,15 +856,10 @@
 
    protected float nextStep() {
       return (float)((int)this.moveDist + 1);
    }
 
-   public void setLocationFromBoundingbox() {
-      AABB var1 = this.getBoundingBox();
-      this.setPosRaw((var1.minX + var1.maxX) / 2.0D, var1.minY, (var1.minZ + var1.maxZ) / 2.0D);
-   }
-
    protected SoundEvent getSwimSound() {
       return SoundEvents.GENERIC_SWIM;
    }
 
    protected SoundEvent getSwimSplashSound() {
@@ -826,12 +872,13 @@
 
    protected void checkInsideBlocks() {
       AABB var1 = this.getBoundingBox();
       BlockPos var2 = new BlockPos(var1.minX + 0.001D, var1.minY + 0.001D, var1.minZ + 0.001D);
       BlockPos var3 = new BlockPos(var1.maxX - 0.001D, var1.maxY - 0.001D, var1.maxZ - 0.001D);
-      BlockPos.MutableBlockPos var4 = new BlockPos.MutableBlockPos();
       if (this.level.hasChunksAt(var2, var3)) {
+         BlockPos.MutableBlockPos var4 = new BlockPos.MutableBlockPos();
+
          for(int var5 = var2.getX(); var5 <= var3.getX(); ++var5) {
             for(int var6 = var2.getY(); var6 <= var3.getY(); ++var6) {
                for(int var7 = var2.getZ(); var7 <= var3.getZ(); ++var7) {
                   var4.set(var5, var6, var7);
                   BlockState var8 = this.level.getBlockState(var4);
@@ -840,11 +887,11 @@
                      var8.entityInside(this.level, var4, this);
                      this.onInsideBlock(var8);
                   } catch (Throwable var12) {
                      CrashReport var10 = CrashReport.forThrowable(var12, "Colliding entity with block");
                      CrashReportCategory var11 = var10.addCategory("Block being collided with");
-                     CrashReportCategory.populateBlockDetails(var11, var4, var8);
+                     CrashReportCategory.populateBlockDetails(var11, this.level, var4, var8);
                      throw new ReportedException(var10);
                   }
                }
             }
          }
@@ -853,27 +900,51 @@
    }
 
    protected void onInsideBlock(BlockState var1) {
    }
 
+   public void gameEvent(GameEvent var1, @Nullable Entity var2, BlockPos var3) {
+      this.level.gameEvent(var2, var1, var3);
+   }
+
+   public void gameEvent(GameEvent var1, @Nullable Entity var2) {
+      this.gameEvent(var1, var2, this.blockPosition);
+   }
+
+   public void gameEvent(GameEvent var1, BlockPos var2) {
+      this.gameEvent(var1, this, var2);
+   }
+
+   public void gameEvent(GameEvent var1) {
+      this.gameEvent(var1, this.blockPosition);
+   }
+
    protected void playStepSound(BlockPos var1, BlockState var2) {
       if (!var2.getMaterial().isLiquid()) {
-         BlockState var3 = this.level.getBlockState(var1.above());
-         SoundType var4 = var3.is(Blocks.SNOW) ? var3.getSoundType() : var2.getSoundType();
-         this.playSound(var4.getStepSound(), var4.getVolume() * 0.15F, var4.getPitch());
+         if (var2.is(BlockTags.CRYSTAL_SOUND_BLOCKS) && this.tickCount >= this.lastCrystalSoundPlayTick + 20) {
+            this.crystalSoundIntensity = (float)((double)this.crystalSoundIntensity * Math.pow(0.996999979019165D, (double)(this.tickCount - this.lastCrystalSoundPlayTick)));
+            this.crystalSoundIntensity = Math.min(1.0F, this.crystalSoundIntensity + 0.07F);
+            float var3 = 0.5F + this.crystalSoundIntensity * this.random.nextFloat() * 1.2F;
+            float var4 = 0.1F + this.crystalSoundIntensity * 1.2F;
+            this.playSound(SoundEvents.AMETHYST_BLOCK_CHIME, var4, var3);
+            this.lastCrystalSoundPlayTick = this.tickCount;
+         }
+
+         BlockState var5 = this.level.getBlockState(var1.above());
+         SoundType var6 = var5.is(BlockTags.INSIDE_STEP_SOUND_BLOCKS) ? var5.getSoundType() : var2.getSoundType();
+         this.playSound(var6.getStepSound(), var6.getVolume() * 0.15F, var6.getPitch());
       }
    }
 
    protected void playSwimSound(float var1) {
       this.playSound(this.getSwimSound(), var1, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.4F);
    }
 
-   protected float playFlySound(float var1) {
-      return 0.0F;
+   protected void onFlap() {
    }
 
-   protected boolean makeFlySound() {
+   protected boolean isFlapping() {
       return false;
    }
 
    public void playSound(SoundEvent var1, float var2, float var3) {
       if (!this.isSilent()) {
@@ -896,18 +967,25 @@
 
    public void setNoGravity(boolean var1) {
       this.entityData.set(DATA_NO_GRAVITY, var1);
    }
 
-   protected boolean isMovementNoisy() {
-      return true;
+   protected Entity.MovementEmission getMovementEmission() {
+      return Entity.MovementEmission.ALL;
    }
 
+   public boolean occludesVibrations() {
+      return false;
+   }
+
    protected void checkFallDamage(double var1, boolean var3, BlockState var4, BlockPos var5) {
       if (var3) {
          if (this.fallDistance > 0.0F) {
             var4.getBlock().fallOn(this.level, var5, this, this.fallDistance);
+            if (!var4.is(BlockTags.OCCLUDES_VIBRATION_SIGNALS)) {
+               this.gameEvent(GameEvent.HIT_GROUND);
+            }
          }
 
          this.fallDistance = 0.0F;
       } else if (var1 < 0.0D) {
          this.fallDistance = (float)((double)this.fallDistance - var1);
@@ -917,17 +995,17 @@
 
    public boolean fireImmune() {
       return this.getType().fireImmune();
    }
 
-   public boolean causeFallDamage(float var1, float var2) {
+   public boolean causeFallDamage(float var1, float var2, DamageSource var3) {
       if (this.isVehicle()) {
-         Iterator var3 = this.getPassengers().iterator();
+         Iterator var4 = this.getPassengers().iterator();
 
-         while(var3.hasNext()) {
-            Entity var4 = (Entity)var3.next();
-            var4.causeFallDamage(var1, var2);
+         while(var4.hasNext()) {
+            Entity var5 = (Entity)var4.next();
+            var5.causeFallDamage(var1, var2, var3);
          }
       }
 
       return false;
    }
@@ -1007,11 +1085,11 @@
          }
       }
 
       BlockPos var10 = new BlockPos(this.getX(), var1, this.getZ());
       FluidState var5 = this.level.getFluidState(var10);
-      Iterator var6 = FluidTags.getWrappers().iterator();
+      Iterator var6 = FluidTags.getStaticTags().iterator();
 
       Tag var7;
       do {
          if (!var6.hasNext()) {
             return;
@@ -1057,10 +1135,11 @@
          var7 = (this.random.nextDouble() * 2.0D - 1.0D) * (double)this.dimensions.width;
          var9 = (this.random.nextDouble() * 2.0D - 1.0D) * (double)this.dimensions.width;
          this.level.addParticle(ParticleTypes.SPLASH, this.getX() + var7, (double)(var5 + 1.0F), this.getZ() + var9, var3.x, var3.y, var3.z);
       }
 
+      this.gameEvent(GameEvent.SPLASH);
    }
 
    protected BlockState getBlockStateOn() {
       return this.level.getBlockState(this.getOnPos());
    }
@@ -1106,23 +1185,13 @@
          return new Vec3(var5.x * (double)var7 - var5.z * (double)var6, var5.y, var5.z * (double)var7 + var5.x * (double)var6);
       }
    }
 
    public float getBrightness() {
-      BlockPos.MutableBlockPos var1 = new BlockPos.MutableBlockPos(this.getX(), 0.0D, this.getZ());
-      if (this.level.hasChunkAt(var1)) {
-         var1.setY(Mth.floor(this.getEyeY()));
-         return this.level.getBrightness(var1);
-      } else {
-         return 0.0F;
-      }
+      return this.level.hasChunkAt(this.getBlockX(), this.getBlockZ()) ? this.level.getBrightness(new BlockPos(this.getX(), this.getEyeY(), this.getZ())) : 0.0F;
    }
 
-   public void setLevel(Level var1) {
-      this.level = var1;
-   }
-
    public void absMoveTo(double var1, double var3, double var5, float var7, float var8) {
       this.absMoveTo(var1, var3, var5);
       this.yRot = var7 % 360.0F;
       this.xRot = Mth.clamp(var8, -90.0F, 90.0F) % 360.0F;
       this.yRotO = this.yRot;
@@ -1149,24 +1218,29 @@
    public void moveTo(BlockPos var1, float var2, float var3) {
       this.moveTo((double)var1.getX() + 0.5D, (double)var1.getY(), (double)var1.getZ() + 0.5D, var2, var3);
    }
 
    public void moveTo(double var1, double var3, double var5, float var7, float var8) {
-      this.setPosAndOldPos(var1, var3, var5);
+      this.setPosRaw(var1, var3, var5);
       this.yRot = var7;
       this.xRot = var8;
+      this.setOldPosAndRot();
       this.reapplyPosition();
    }
 
-   public void setPosAndOldPos(double var1, double var3, double var5) {
-      this.setPosRaw(var1, var3, var5);
+   public final void setOldPosAndRot() {
+      double var1 = this.getX();
+      double var3 = this.getY();
+      double var5 = this.getZ();
       this.xo = var1;
       this.yo = var3;
       this.zo = var5;
       this.xOld = var1;
       this.yOld = var3;
       this.zOld = var5;
+      this.yRotO = this.yRot;
+      this.xRotO = this.xRot;
    }
 
    public float distanceTo(Entity var1) {
       float var2 = (float)(this.getX() - var1.getX());
       float var3 = (float)(this.getY() - var1.getY());
@@ -1275,19 +1349,19 @@
 
    protected final Vec3 calculateUpVector(float var1, float var2) {
       return this.calculateViewVector(var1 - 90.0F, var2);
    }
 
+   public final Vec3 getEyePosition() {
+      return new Vec3(this.getX(), this.getEyeY(), this.getZ());
+   }
+
    public final Vec3 getEyePosition(float var1) {
-      if (var1 == 1.0F) {
-         return new Vec3(this.getX(), this.getEyeY(), this.getZ());
-      } else {
-         double var2 = Mth.lerp((double)var1, this.xo, this.getX());
-         double var4 = Mth.lerp((double)var1, this.yo, this.getY()) + (double)this.getEyeHeight();
-         double var6 = Mth.lerp((double)var1, this.zo, this.getZ());
-         return new Vec3(var2, var4, var6);
-      }
+      double var2 = Mth.lerp((double)var1, this.xo, this.getX());
+      double var4 = Mth.lerp((double)var1, this.yo, this.getY()) + (double)this.getEyeHeight();
+      double var6 = Mth.lerp((double)var1, this.zo, this.getZ());
+      return new Vec3(var2, var4, var6);
    }
 
    public Vec3 getLightProbePosition(float var1) {
       return this.getEyePosition(var1);
    }
@@ -1338,17 +1412,21 @@
       var3 *= 64.0D * viewScale;
       return var1 < var3 * var3;
    }
 
    public boolean saveAsPassenger(CompoundTag var1) {
-      String var2 = this.getEncodeId();
-      if (!this.removed && var2 != null) {
-         var1.putString("id", var2);
-         this.saveWithoutId(var1);
-         return true;
-      } else {
+      if (this.removalReason != null && !this.removalReason.shouldSave()) {
          return false;
+      } else {
+         String var2 = this.getEncodeId();
+         if (var2 == null) {
+            return false;
+         } else {
+            var1.putString("id", var2);
+            this.saveWithoutId(var1);
+            return true;
+         }
       }
    }
 
    public boolean save(CompoundTag var1) {
       return this.isPassenger() ? false : this.saveAsPassenger(var1);
@@ -1370,13 +1448,13 @@
          var1.putShort("Air", (short)this.getAirSupply());
          var1.putBoolean("OnGround", this.onGround);
          var1.putBoolean("Invulnerable", this.invulnerable);
          var1.putInt("PortalCooldown", this.portalCooldown);
          var1.putUUID("UUID", this.getUUID());
-         Component var9 = this.getCustomName();
-         if (var9 != null) {
-            var1.putString("CustomName", Component.Serializer.toJson(var9));
+         Component var10 = this.getCustomName();
+         if (var10 != null) {
+            var1.putString("CustomName", Component.Serializer.toJson(var10));
          }
 
          if (this.isCustomNameVisible()) {
             var1.putBoolean("CustomNameVisible", this.isCustomNameVisible());
          }
@@ -1391,45 +1469,50 @@
 
          if (this.glowing) {
             var1.putBoolean("Glowing", this.glowing);
          }
 
-         Iterator var5;
-         ListTag var10;
+         int var11 = this.getTicksFrozen();
+         if (var11 > 0) {
+            var1.putInt("TicksFrozen", this.getTicksFrozen());
+         }
+
+         ListTag var5;
+         Iterator var6;
          if (!this.tags.isEmpty()) {
-            var10 = new ListTag();
-            var5 = this.tags.iterator();
+            var5 = new ListTag();
+            var6 = this.tags.iterator();
 
-            while(var5.hasNext()) {
-               String var6 = (String)var5.next();
-               var10.add(StringTag.valueOf(var6));
+            while(var6.hasNext()) {
+               String var7 = (String)var6.next();
+               var5.add(StringTag.valueOf(var7));
             }
 
-            var1.put("Tags", var10);
+            var1.put("Tags", var5);
          }
 
          this.addAdditionalSaveData(var1);
          if (this.isVehicle()) {
-            var10 = new ListTag();
-            var5 = this.getPassengers().iterator();
+            var5 = new ListTag();
+            var6 = this.getPassengers().iterator();
 
-            while(var5.hasNext()) {
-               Entity var11 = (Entity)var5.next();
-               CompoundTag var7 = new CompoundTag();
-               if (var11.saveAsPassenger(var7)) {
-                  var10.add(var7);
+            while(var6.hasNext()) {
+               Entity var12 = (Entity)var6.next();
+               CompoundTag var8 = new CompoundTag();
+               if (var12.saveAsPassenger(var8)) {
+                  var5.add(var8);
                }
             }
 
-            if (!var10.isEmpty()) {
-               var1.put("Passengers", var10);
+            if (!var5.isEmpty()) {
+               var1.put("Passengers", var5);
             }
          }
 
          return var1;
-      } catch (Throwable var8) {
-         CrashReport var3 = CrashReport.forThrowable(var8, "Saving entity NBT");
+      } catch (Throwable var9) {
+         CrashReport var3 = CrashReport.forThrowable(var9, "Saving entity NBT");
          CrashReportCategory var4 = var3.addCategory("Entity being saved");
          this.fillCrashReportCategory(var4);
          throw new ReportedException(var3);
       }
    }
@@ -1441,20 +1524,22 @@
          ListTag var17 = var1.getList("Rotation", 5);
          double var5 = var16.getDouble(0);
          double var7 = var16.getDouble(1);
          double var9 = var16.getDouble(2);
          this.setDeltaMovement(Math.abs(var5) > 10.0D ? 0.0D : var5, Math.abs(var7) > 10.0D ? 0.0D : var7, Math.abs(var9) > 10.0D ? 0.0D : var9);
-         this.setPosAndOldPos(var2.getDouble(0), var2.getDouble(1), var2.getDouble(2));
+         this.setPosRaw(var2.getDouble(0), var2.getDouble(1), var2.getDouble(2));
          this.yRot = var17.getFloat(0);
          this.xRot = var17.getFloat(1);
-         this.yRotO = this.yRot;
-         this.xRotO = this.xRot;
+         this.setOldPosAndRot();
          this.setYHeadRot(this.yRot);
          this.setYBodyRot(this.yRot);
          this.fallDistance = var1.getFloat("FallDistance");
          this.remainingFireTicks = var1.getShort("Fire");
-         this.setAirSupply(var1.getShort("Air"));
+         if (var1.contains("Air")) {
+            this.setAirSupply(var1.getShort("Air"));
+         }
+
          this.onGround = var1.getBoolean("OnGround");
          this.invulnerable = var1.getBoolean("Invulnerable");
          this.portalCooldown = var1.getInt("PortalCooldown");
          if (var1.hasUUID("UUID")) {
             this.uuid = var1.getUUID("UUID");
@@ -1477,10 +1562,11 @@
 
                this.setCustomNameVisible(var1.getBoolean("CustomNameVisible"));
                this.setSilent(var1.getBoolean("Silent"));
                this.setNoGravity(var1.getBoolean("NoGravity"));
                this.setGlowing(var1.getBoolean("Glowing"));
+               this.setTicksFrozen(var1.getInt("TicksFrozen"));
                if (var1.contains("Tags", 9)) {
                   this.tags.clear();
                   ListTag var18 = var1.getList("Tags", 8);
                   int var12 = Math.min(var18.size(), 1024);
 
@@ -1577,21 +1663,20 @@
          return var3;
       }
    }
 
    public boolean isAlive() {
-      return !this.removed;
+      return !this.isRemoved();
    }
 
    public boolean isInWall() {
       if (this.noPhysics) {
          return false;
       } else {
-         float var1 = 0.1F;
-         float var2 = this.dimensions.width * 0.8F;
-         AABB var3 = AABB.ofSize((double)var2, 0.10000000149011612D, (double)var2).move(this.getX(), this.getEyeY(), this.getZ());
-         return this.level.getBlockCollisions(this, var3, (var1x, var2x) -> {
+         float var1 = this.dimensions.width * 0.8F;
+         AABB var2 = AABB.ofSize(this.getEyePosition(), (double)var1, 1.0E-6D, (double)var1);
+         return this.level.getBlockCollisions(this, var2, (var1x, var2x) -> {
             return var1x.isSuffocating(this.level, var2x);
          }).findAny().isPresent();
       }
    }
 
@@ -1696,30 +1781,44 @@
 
    protected void addPassenger(Entity var1) {
       if (var1.getVehicle() != this) {
          throw new IllegalStateException("Use x.startRiding(y), not y.addPassenger(x)");
       } else {
-         if (!this.level.isClientSide && var1 instanceof Player && !(this.getControllingPassenger() instanceof Player)) {
-            this.passengers.add(0, var1);
+         if (this.passengers.isEmpty()) {
+            this.passengers = ImmutableList.of(var1);
          } else {
-            this.passengers.add(var1);
+            ArrayList var2 = Lists.newArrayList(this.passengers);
+            if (!this.level.isClientSide && var1 instanceof Player && !(this.getControllingPassenger() instanceof Player)) {
+               var2.add(0, var1);
+            } else {
+               var2.add(var1);
+            }
+
+            this.passengers = ImmutableList.copyOf(var2);
          }
 
       }
    }
 
    protected void removePassenger(Entity var1) {
       if (var1.getVehicle() == this) {
          throw new IllegalStateException("Use x.stopRiding(y), not y.removePassenger(x)");
       } else {
-         this.passengers.remove(var1);
+         if (this.passengers.size() == 1 && this.passengers.get(0) == var1) {
+            this.passengers = ImmutableList.of();
+         } else {
+            this.passengers = (ImmutableList)this.passengers.stream().filter((var1x) -> {
+               return var1x != var1;
+            }).collect(ImmutableList.toImmutableList());
+         }
+
          var1.boardingCooldown = 60;
       }
    }
 
    protected boolean canAddPassenger(Entity var1) {
-      return this.getPassengers().size() < 1;
+      return this.passengers.isEmpty();
    }
 
    public void lerpTo(double var1, double var3, double var5, float var7, float var8, int var9, boolean var10) {
       this.setPos(var1, var3, var5);
       this.setRot(var7, var8);
@@ -1830,11 +1929,11 @@
    public boolean isPassenger() {
       return this.getVehicle() != null;
    }
 
    public boolean isVehicle() {
-      return !this.getPassengers().isEmpty();
+      return !this.passengers.isEmpty();
    }
 
    public boolean rideableUnderWater() {
       return true;
    }
@@ -1915,10 +2014,15 @@
          return var2 != null && var1 != null && var1.getTeam() == var2 && var2.canSeeFriendlyInvisibles() ? false : this.isInvisible();
       }
    }
 
    @Nullable
+   public GameEventListenerRegistrar getGameEventListenerRegistrar() {
+      return null;
+   }
+
+   @Nullable
    public Team getTeam() {
       return this.level.getScoreboard().getPlayersTeam(this.getScoreboardName());
    }
 
    public boolean isAlliedTo(Entity var1) {
@@ -1957,10 +2061,31 @@
 
    public void setAirSupply(int var1) {
       this.entityData.set(DATA_AIR_SUPPLY_ID, var1);
    }
 
+   public int getTicksFrozen() {
+      return (Integer)this.entityData.get(DATA_TICKS_FROZEN);
+   }
+
+   public void setTicksFrozen(int var1) {
+      this.entityData.set(DATA_TICKS_FROZEN, var1);
+   }
+
+   public float getPercentFrozen() {
+      int var1 = this.getTicksRequiredToFreeze();
+      return (float)Math.min(this.getTicksFrozen(), var1) / (float)var1;
+   }
+
+   public boolean isFullyFrozen() {
+      return this.getTicksFrozen() >= this.getTicksRequiredToFreeze();
+   }
+
+   public int getTicksRequiredToFreeze() {
+      return 300;
+   }
+
    public void thunderHit(ServerLevel var1, LightningBolt var2) {
       this.setRemainingFireTicks(this.remainingFireTicks + 1);
       if (this.remainingFireTicks == 0) {
          this.setSecondsOnFire(8);
       }
@@ -2082,11 +2207,11 @@
    public String toString() {
       return String.format(Locale.ROOT, "%s['%s'/%d, l='%s', x=%.2f, y=%.2f, z=%.2f]", this.getClass().getSimpleName(), this.getName().getString(), this.id, this.level == null ? "~NULL~" : this.level.toString(), this.getX(), this.getY(), this.getZ());
    }
 
    public boolean isInvulnerableTo(DamageSource var1) {
-      return this.invulnerable && var1 != DamageSource.OUT_OF_WORLD && !var1.isCreativePlayer();
+      return this.isRemoved() || this.invulnerable && var1 != DamageSource.OUT_OF_WORLD && !var1.isCreativePlayer();
    }
 
    public boolean isInvulnerable() {
       return this.invulnerable;
    }
@@ -2107,11 +2232,11 @@
       this.portalEntrancePos = var1.portalEntrancePos;
    }
 
    @Nullable
    public Entity changeDimension(ServerLevel var1) {
-      if (this.level instanceof ServerLevel && !this.removed) {
+      if (this.level instanceof ServerLevel && !this.isRemoved()) {
          this.level.getProfiler().push("changeDimension");
          this.unRide();
          this.level.getProfiler().push("reposition");
          PortalInfo var2 = this.findDimensionEntryPoint(var1);
          if (var2 == null) {
@@ -2121,11 +2246,11 @@
             Entity var3 = this.getType().create(var1);
             if (var3 != null) {
                var3.restoreFrom(this);
                var3.moveTo(var2.pos.x, var2.pos.y, var2.pos.z, var2.yRot, var3.xRot);
                var3.setDeltaMovement(var2.speed);
-               var1.addFromAnotherDimension(var3);
+               var1.addDuringTeleport(var3);
                if (var1.dimension() == Level.END) {
                   ServerLevel.makeObsidianPlatform(var1);
                }
             }
 
@@ -2140,11 +2265,11 @@
          return null;
       }
    }
 
    protected void removeAfterChangingDimensions() {
-      this.removed = true;
+      this.setRemoved(Entity.RemovalReason.CHANGED_DIMENSION);
    }
 
    @Nullable
    protected PortalInfo findDimensionEntryPoint(ServerLevel var1) {
       boolean var2 = this.level.dimension() == Level.END && var1.dimension() == Level.OVERWORLD;
@@ -2226,11 +2351,11 @@
       var1.setDetail("Entity ID", (Object)this.id);
       var1.setDetail("Entity Name", () -> {
          return this.getName().getString();
       });
       var1.setDetail("Entity's Exact location", (Object)String.format(Locale.ROOT, "%.2f, %.2f, %.2f", this.getX(), this.getY(), this.getZ()));
-      var1.setDetail("Entity's Block location", (Object)CrashReportCategory.formatLocation(Mth.floor(this.getX()), Mth.floor(this.getY()), Mth.floor(this.getZ())));
+      var1.setDetail("Entity's Block location", (Object)CrashReportCategory.formatLocation(this.level, Mth.floor(this.getX()), Mth.floor(this.getY()), Mth.floor(this.getZ())));
       Vec3 var2 = this.getDeltaMovement();
       var1.setDetail("Entity's Momentum", (Object)String.format(Locale.ROOT, "%.2f, %.2f, %.2f", var2.x, var2.y, var2.z));
       var1.setDetail("Entity's Passengers", () -> {
          return this.getPassengers().toString();
       });
@@ -2306,22 +2431,23 @@
          this.level.getChunk(var7.x, var7.z);
          this.teleportTo(var1, var3, var5);
       }
    }
 
+   public void dismountTo(double var1, double var3, double var5) {
+      this.teleportTo(var1, var3, var5);
+   }
+
    public void teleportTo(double var1, double var3, double var5) {
       if (this.level instanceof ServerLevel) {
-         ServerLevel var7 = (ServerLevel)this.level;
          this.moveTo(var1, var3, var5, this.yRot, this.xRot);
-         this.getSelfAndPassengers().forEach((var1x) -> {
-            var7.updateChunkPos(var1x);
-            var1x.forceChunkAddition = true;
-            Iterator var2 = var1x.passengers.iterator();
+         this.getSelfAndPassengers().forEach((var0) -> {
+            UnmodifiableIterator var1 = var0.passengers.iterator();
 
-            while(var2.hasNext()) {
-               Entity var3 = (Entity)var2.next();
-               var1x.positionRider(var3, Entity::moveTo);
+            while(var1.hasNext()) {
+               Entity var2 = (Entity)var1.next();
+               var0.positionRider(var2, Entity::moveTo);
             }
 
          });
       }
    }
@@ -2341,22 +2467,21 @@
       EntityDimensions var1 = this.dimensions;
       Pose var2 = this.getPose();
       EntityDimensions var3 = this.getDimensions(var2);
       this.dimensions = var3;
       this.eyeHeight = this.getEyeHeight(var2, var3);
-      if (var3.width < var1.width) {
-         double var6 = (double)var3.width / 2.0D;
-         this.setBoundingBox(new AABB(this.getX() - var6, this.getY(), this.getZ() - var6, this.getX() + var6, this.getY() + (double)var3.height, this.getZ() + var6));
-      } else {
-         AABB var4 = this.getBoundingBox();
-         this.setBoundingBox(new AABB(var4.minX, var4.minY, var4.minZ, var4.minX + (double)var3.width, var4.minY + (double)var3.height, var4.minZ + (double)var3.width));
-         if (var3.width > var1.width && !this.firstTick && !this.level.isClientSide) {
-            float var5 = var1.width - var3.width;
-            this.move(MoverType.SELF, new Vec3((double)var5, 0.0D, (double)var5));
-         }
-
+      this.reapplyPosition();
+      if (!this.level.isClientSide && !this.firstTick && (var3.width > var1.width || var3.height > var1.height) && !(this instanceof Player)) {
+         Vec3 var4 = this.position().add(0.0D, (double)var1.height / 2.0D, 0.0D);
+         double var5 = (double)Math.max(0.0F, var3.width - var1.width) + 1.0E-6D;
+         double var7 = (double)Math.max(0.0F, var3.height - var1.height) + 1.0E-6D;
+         VoxelShape var9 = Shapes.create(AABB.ofSize(var4, var5, var7, var5));
+         this.level.findFreePosition(this, var9, var4, (double)var3.width, (double)var3.height, (double)var3.width).ifPresent((var2x) -> {
+            this.setPos(var2x.add(0.0D, (double)(-var3.height) / 2.0D, 0.0D));
+         });
       }
+
    }
 
    public Direction getDirection() {
       return Direction.fromYRot((double)this.yRot);
    }
@@ -2371,11 +2496,11 @@
 
    public boolean broadcastToPlayer(ServerPlayer var1) {
       return true;
    }
 
-   public AABB getBoundingBox() {
+   public final AABB getBoundingBox() {
       return this.bb;
    }
 
    public AABB getBoundingBoxForCulling() {
       return this.getBoundingBox();
@@ -2387,11 +2512,11 @@
       Vec3 var4 = new Vec3(this.getX() - (double)var3, this.getY(), this.getZ() - (double)var3);
       Vec3 var5 = new Vec3(this.getX() + (double)var3, this.getY() + (double)var2.height, this.getZ() + (double)var3);
       return new AABB(var4, var5);
    }
 
-   public void setBoundingBox(AABB var1) {
+   public final void setBoundingBox(AABB var1) {
       this.bb = var1;
    }
 
    protected float getEyeHeight(Pose var1, EntityDimensions var2) {
       return var2.height * 0.85F;
@@ -2407,12 +2532,12 @@
 
    public Vec3 getLeashOffset() {
       return new Vec3(0.0D, (double)this.getEyeHeight(), (double)(this.getBbWidth() * 0.4F));
    }
 
-   public boolean setSlot(int var1, ItemStack var2) {
-      return false;
+   public SlotAccess getSlot(int var1) {
+      return SlotAccess.NULL;
    }
 
    public void sendMessage(Component var1, UUID var2) {
    }
 
@@ -2475,93 +2600,65 @@
 
    public boolean onlyOpCanSetNbt() {
       return false;
    }
 
-   public boolean checkAndResetForcedChunkAdditionFlag() {
-      boolean var1 = this.forceChunkAddition;
-      this.forceChunkAddition = false;
-      return var1;
-   }
-
-   public boolean checkAndResetUpdateChunkPos() {
-      boolean var1 = this.movedSinceLastChunkCheck;
-      this.movedSinceLastChunkCheck = false;
-      return var1;
-   }
-
    @Nullable
    public Entity getControllingPassenger() {
       return null;
    }
 
-   public List<Entity> getPassengers() {
-      return (List)(this.passengers.isEmpty() ? Collections.emptyList() : Lists.newArrayList(this.passengers));
+   public final List<Entity> getPassengers() {
+      return this.passengers;
    }
 
-   public boolean hasPassenger(Entity var1) {
-      Iterator var2 = this.getPassengers().iterator();
+   @Nullable
+   public Entity getFirstPassenger() {
+      return this.passengers.isEmpty() ? null : (Entity)this.passengers.get(0);
+   }
 
-      Entity var3;
-      do {
-         if (!var2.hasNext()) {
-            return false;
-         }
-
-         var3 = (Entity)var2.next();
-      } while(!var3.equals(var1));
-
-      return true;
+   public boolean hasPassenger(Entity var1) {
+      return this.passengers.contains(var1);
    }
 
-   public boolean hasPassenger(Class<? extends Entity> var1) {
-      Iterator var2 = this.getPassengers().iterator();
+   public boolean hasPassenger(Predicate<Entity> var1) {
+      UnmodifiableIterator var2 = this.passengers.iterator();
 
       Entity var3;
       do {
          if (!var2.hasNext()) {
             return false;
          }
 
          var3 = (Entity)var2.next();
-      } while(!var1.isAssignableFrom(var3.getClass()));
+      } while(!var1.test(var3));
 
       return true;
    }
 
-   public Collection<Entity> getIndirectPassengers() {
-      HashSet var1 = Sets.newHashSet();
-      Iterator var2 = this.getPassengers().iterator();
-
-      while(var2.hasNext()) {
-         Entity var3 = (Entity)var2.next();
-         var1.add(var3);
-         var3.fillIndirectPassengers(false, var1);
-      }
-
-      return var1;
+   private Stream<Entity> getIndirectPassengersStream() {
+      return this.passengers.stream().flatMap(Entity::getSelfAndPassengers);
    }
 
    public Stream<Entity> getSelfAndPassengers() {
-      return Stream.concat(Stream.of(this), this.passengers.stream().flatMap(Entity::getSelfAndPassengers));
+      return Stream.concat(Stream.of(this), this.getIndirectPassengersStream());
    }
 
-   public boolean hasOnePlayerPassenger() {
-      HashSet var1 = Sets.newHashSet();
-      this.fillIndirectPassengers(true, var1);
-      return var1.size() == 1;
+   public Stream<Entity> getPassengersAndSelf() {
+      return Stream.concat(this.passengers.stream().flatMap(Entity::getPassengersAndSelf), Stream.of(this));
    }
 
-   private void fillIndirectPassengers(boolean var1, Set<Entity> var2) {
-      Entity var4;
-      for(Iterator var3 = this.getPassengers().iterator(); var3.hasNext(); var4.fillIndirectPassengers(var1, var2)) {
-         var4 = (Entity)var3.next();
-         if (!var1 || ServerPlayer.class.isAssignableFrom(var4.getClass())) {
-            var2.add(var4);
-         }
-      }
+   public Iterable<Entity> getIndirectPassengers() {
+      return () -> {
+         return this.getIndirectPassengersStream().iterator();
+      };
+   }
 
+   public boolean hasExactlyOnePlayerPassenger() {
+      return this.getIndirectPassengersStream().filter((var0) -> {
+         return var0 instanceof Player;
+      }).count() == 1L;
    }
 
    public Entity getRootVehicle() {
       Entity var1;
       for(var1 = this; var1.isPassenger(); var1 = var1.getVehicle()) {
@@ -2573,25 +2670,13 @@
    public boolean isPassengerOfSameVehicle(Entity var1) {
       return this.getRootVehicle() == var1.getRootVehicle();
    }
 
    public boolean hasIndirectPassenger(Entity var1) {
-      Iterator var2 = this.getPassengers().iterator();
-
-      Entity var3;
-      do {
-         if (!var2.hasNext()) {
-            return false;
-         }
-
-         var3 = (Entity)var2.next();
-         if (var3.equals(var1)) {
-            return true;
-         }
-      } while(!var3.hasIndirectPassenger(var1));
-
-      return true;
+      return this.getIndirectPassengersStream().anyMatch((var1x) -> {
+         return var1x == var1;
+      });
    }
 
    public boolean isControlledByLocalInstance() {
       Entity var1 = this.getControllingPassenger();
       if (var1 instanceof Player) {
@@ -2762,10 +2847,18 @@
 
    public BlockPos blockPosition() {
       return this.blockPosition;
    }
 
+   public BlockPos eyeBlockPosition() {
+      return new BlockPos(this.getEyePosition(1.0F));
+   }
+
+   public ChunkPos chunkPosition() {
+      return new ChunkPos(this.blockPosition);
+   }
+
    public Vec3 getDeltaMovement() {
       return this.deltaMovement;
    }
 
    public void setDeltaMovement(Vec3 var1) {
@@ -2774,10 +2867,14 @@
 
    public void setDeltaMovement(double var1, double var3, double var5) {
       this.setDeltaMovement(new Vec3(var1, var3, var5));
    }
 
+   public final int getBlockX() {
+      return this.blockPosition.getX();
+   }
+
    public final double getX() {
       return this.position.x;
    }
 
    public double getX(double var1) {
@@ -2786,10 +2883,14 @@
 
    public double getRandomX(double var1) {
       return this.getX((2.0D * this.random.nextDouble() - 1.0D) * var1);
    }
 
+   public final int getBlockY() {
+      return this.blockPosition.getY();
+   }
+
    public final double getY() {
       return this.position.y;
    }
 
    public double getY(double var1) {
@@ -2802,10 +2903,14 @@
 
    public double getEyeY() {
       return this.position.y + (double)this.eyeHeight;
    }
 
+   public final int getBlockZ() {
+      return this.blockPosition.getZ();
+   }
+
    public final double getZ() {
       return this.position.z;
    }
 
    public double getZ(double var1) {
@@ -2814,21 +2919,25 @@
 
    public double getRandomZ(double var1) {
       return this.getZ((2.0D * this.random.nextDouble() - 1.0D) * var1);
    }
 
-   public void setPosRaw(double var1, double var3, double var5) {
+   public final void setPosRaw(double var1, double var3, double var5) {
       if (this.position.x != var1 || this.position.y != var3 || this.position.z != var5) {
          this.position = new Vec3(var1, var3, var5);
          int var7 = Mth.floor(var1);
          int var8 = Mth.floor(var3);
          int var9 = Mth.floor(var5);
          if (var7 != this.blockPosition.getX() || var8 != this.blockPosition.getY() || var9 != this.blockPosition.getZ()) {
             this.blockPosition = new BlockPos(var7, var8, var9);
          }
 
-         this.movedSinceLastChunkCheck = true;
+         this.levelCallback.onMove();
+         GameEventListenerRegistrar var10 = this.getGameEventListenerRegistrar();
+         if (var10 != null) {
+            var10.onListenerMove(this.level);
+         }
       }
 
    }
 
    public void checkDespawn() {
@@ -2836,20 +2945,133 @@
 
    public Vec3 getRopeHoldPosition(float var1) {
       return this.getPosition(var1).add(0.0D, (double)this.eyeHeight * 0.7D, 0.0D);
    }
 
+   public void recreateFromPacket(ClientboundAddEntityPacket var1) {
+      int var2 = var1.getId();
+      double var3 = var1.getX();
+      double var5 = var1.getY();
+      double var7 = var1.getZ();
+      this.setPacketCoordinates(var3, var5, var7);
+      this.moveTo(var3, var5, var7);
+      this.xRot = (float)(var1.getxRot() * 360) / 256.0F;
+      this.yRot = (float)(var1.getyRot() * 360) / 256.0F;
+      this.setId(var2);
+      this.setUUID(var1.getUUID());
+   }
+
+   @Nullable
+   public ItemStack getPickResult() {
+      return null;
+   }
+
+   public void setIsInPowderSnow(boolean var1) {
+      this.isInPowderSnow = var1;
+   }
+
+   public boolean canFreeze() {
+      return false;
+   }
+
+   public final boolean isRemoved() {
+      return this.removalReason != null;
+   }
+
+   public void setRemoved(Entity.RemovalReason var1) {
+      if (this.removalReason == null) {
+         this.removalReason = var1;
+      }
+
+      this.getPassengers().forEach(Entity::stopRiding);
+      this.levelCallback.onRemove(var1);
+   }
+
+   protected void unsetRemoved() {
+      this.removalReason = null;
+   }
+
+   public void setLevelCallback(EntityInLevelCallback var1) {
+      this.levelCallback = var1;
+   }
+
+   public boolean shouldBeSaved() {
+      if (this.removalReason != null && !this.removalReason.shouldSave()) {
+         return false;
+      } else if (this.isPassenger()) {
+         return false;
+      } else {
+         return !this.isVehicle() || !this.hasExactlyOnePlayerPassenger();
+      }
+   }
+
+   public boolean isAlwaysTicking() {
+      return false;
+   }
+
    static {
       DATA_SHARED_FLAGS_ID = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.BYTE);
       DATA_AIR_SUPPLY_ID = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.INT);
       DATA_CUSTOM_NAME = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.OPTIONAL_COMPONENT);
       DATA_CUSTOM_NAME_VISIBLE = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.BOOLEAN);
       DATA_SILENT = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.BOOLEAN);
       DATA_NO_GRAVITY = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.BOOLEAN);
       DATA_POSE = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.POSE);
+      DATA_TICKS_FROZEN = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.INT);
    }
 
+   public static enum RemovalReason {
+      KILLED(true, false),
+      DISCARDED(true, false),
+      UNLOADED_TO_CHUNK(false, true),
+      UNLOADED_WITH_PLAYER(false, false),
+      CHANGED_DIMENSION(false, false);
+
+      private final boolean destroy;
+      private final boolean save;
+
+      private RemovalReason(boolean var3, boolean var4) {
+         this.destroy = var3;
+         this.save = var4;
+      }
+
+      public boolean shouldDestroy() {
+         return this.destroy;
+      }
+
+      public boolean shouldSave() {
+         return this.save;
+      }
+   }
+
+   public static enum MovementEmission {
+      NONE(false, false),
+      SOUNDS(true, false),
+      EVENTS(false, true),
+      ALL(true, true);
+
+      final boolean sounds;
+      final boolean events;
+
+      private MovementEmission(boolean var3, boolean var4) {
+         this.sounds = var3;
+         this.events = var4;
+      }
+
+      public boolean emitsAnything() {
+         return this.events || this.sounds;
+      }
+
+      public boolean emitsEvents() {
+         return this.events;
+      }
+
+      public boolean emitsSounds() {
+         return this.sounds;
+      }
+   }
+
    @FunctionalInterface
    public interface MoveFunction {
       void accept(Entity var1, double var2, double var4, double var6);
    }
 }
