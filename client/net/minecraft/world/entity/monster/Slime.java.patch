--- net/minecraft/world/entity/monster/Slime.java
+++ net/minecraft/world/entity/monster/Slime.java
@@ -45,10 +45,12 @@
 import net.minecraft.world.level.storage.loot.BuiltInLootTables;
 import net.minecraft.world.phys.Vec3;
 
 public class Slime extends Mob implements Enemy {
    private static final EntityDataAccessor<Integer> ID_SIZE;
+   public static final int MIN_SIZE = 1;
+   public static final int MAX_SIZE = 127;
    public float targetSquish;
    public float squish;
    public float oSquish;
    private boolean wasOnGround;
 
@@ -72,21 +74,22 @@
       super.defineSynchedData();
       this.entityData.define(ID_SIZE, 1);
    }
 
    protected void setSize(int var1, boolean var2) {
-      this.entityData.set(ID_SIZE, var1);
+      int var3 = Mth.clamp((int)var1, (int)1, (int)127);
+      this.entityData.set(ID_SIZE, var3);
       this.reapplyPosition();
       this.refreshDimensions();
-      this.getAttribute(Attributes.MAX_HEALTH).setBaseValue((double)(var1 * var1));
-      this.getAttribute(Attributes.MOVEMENT_SPEED).setBaseValue((double)(0.2F + 0.1F * (float)var1));
-      this.getAttribute(Attributes.ATTACK_DAMAGE).setBaseValue((double)var1);
+      this.getAttribute(Attributes.MAX_HEALTH).setBaseValue((double)(var3 * var3));
+      this.getAttribute(Attributes.MOVEMENT_SPEED).setBaseValue((double)(0.2F + 0.1F * (float)var3));
+      this.getAttribute(Attributes.ATTACK_DAMAGE).setBaseValue((double)var3);
       if (var2) {
          this.setHealth(this.getMaxHealth());
       }
 
-      this.xpReward = var1;
+      this.xpReward = var3;
    }
 
    public int getSize() {
       return (Integer)this.entityData.get(ID_SIZE);
    }
@@ -96,16 +99,11 @@
       var1.putInt("Size", this.getSize() - 1);
       var1.putBoolean("wasOnGround", this.wasOnGround);
    }
 
    public void readAdditionalSaveData(CompoundTag var1) {
-      int var2 = var1.getInt("Size");
-      if (var2 < 0) {
-         var2 = 0;
-      }
-
-      this.setSize(var2 + 1, false);
+      this.setSize(var1.getInt("Size") + 1, false);
       super.readAdditionalSaveData(var1);
       this.wasOnGround = var1.getBoolean("wasOnGround");
    }
 
    public boolean isTiny() {
@@ -162,11 +160,11 @@
    }
 
    public void onSyncedDataUpdated(EntityDataAccessor<?> var1) {
       if (ID_SIZE.equals(var1)) {
          this.refreshDimensions();
-         this.yRot = this.yHeadRot;
+         this.setYRot(this.yHeadRot);
          this.yBodyRot = this.yHeadRot;
          if (this.isInWater() && this.random.nextInt(20) == 0) {
             this.doWaterSplashEffect();
          }
       }
@@ -176,37 +174,37 @@
 
    public EntityType<? extends Slime> getType() {
       return super.getType();
    }
 
-   public void remove() {
-      int var1 = this.getSize();
-      if (!this.level.isClientSide && var1 > 1 && this.isDeadOrDying()) {
-         Component var2 = this.getCustomName();
-         boolean var3 = this.isNoAi();
-         float var4 = (float)var1 / 4.0F;
-         int var5 = var1 / 2;
-         int var6 = 2 + this.random.nextInt(3);
+   public void remove(Entity.RemovalReason var1) {
+      int var2 = this.getSize();
+      if (!this.level.isClientSide && var2 > 1 && this.isDeadOrDying()) {
+         Component var3 = this.getCustomName();
+         boolean var4 = this.isNoAi();
+         float var5 = (float)var2 / 4.0F;
+         int var6 = var2 / 2;
+         int var7 = 2 + this.random.nextInt(3);
 
-         for(int var7 = 0; var7 < var6; ++var7) {
-            float var8 = ((float)(var7 % 2) - 0.5F) * var4;
-            float var9 = ((float)(var7 / 2) - 0.5F) * var4;
-            Slime var10 = (Slime)this.getType().create(this.level);
+         for(int var8 = 0; var8 < var7; ++var8) {
+            float var9 = ((float)(var8 % 2) - 0.5F) * var5;
+            float var10 = ((float)(var8 / 2) - 0.5F) * var5;
+            Slime var11 = (Slime)this.getType().create(this.level);
             if (this.isPersistenceRequired()) {
-               var10.setPersistenceRequired();
+               var11.setPersistenceRequired();
             }
 
-            var10.setCustomName(var2);
-            var10.setNoAi(var3);
-            var10.setInvulnerable(this.isInvulnerable());
-            var10.setSize(var5, true);
-            var10.moveTo(this.getX() + (double)var8, this.getY() + 0.5D, this.getZ() + (double)var9, this.random.nextFloat() * 360.0F, 0.0F);
-            this.level.addFreshEntity(var10);
+            var11.setCustomName(var3);
+            var11.setNoAi(var4);
+            var11.setInvulnerable(this.isInvulnerable());
+            var11.setSize(var6, true);
+            var11.moveTo(this.getX() + (double)var9, this.getY() + 0.5D, this.getZ() + (double)var10, this.random.nextFloat() * 360.0F, 0.0F);
+            this.level.addFreshEntity(var11);
          }
       }
 
-      super.remove();
+      super.remove(var1);
    }
 
    public void push(Entity var1) {
       super.push(var1);
       if (var1 instanceof IronGolem && this.isDealsDamage()) {
@@ -223,11 +221,11 @@
    }
 
    protected void dealDamage(LivingEntity var1) {
       if (this.isAlive()) {
          int var2 = this.getSize();
-         if (this.distanceToSqr(var1) < 0.6D * (double)var2 * 0.6D * (double)var2 && this.canSee(var1) && var1.hurt(DamageSource.mobAttack(this), this.getAttackDamage())) {
+         if (this.distanceToSqr(var1) < 0.6D * (double)var2 * 0.6D * (double)var2 && this.hasLineOfSight(var1) && var1.hurt(DamageSource.mobAttack(this), this.getAttackDamage())) {
             this.playSound(SoundEvents.SLIME_ATTACK, 1.0F, (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
             this.doEnchantDamageEffects(this, var1);
          }
       }
 
@@ -309,11 +307,11 @@
       int var7 = 1 << var6;
       this.setSize(var7, true);
       return super.finalizeSpawn(var1, var2, var3, var4, var5);
    }
 
-   private float getSoundPitch() {
+   float getSoundPitch() {
       float var1 = this.isTiny() ? 1.4F : 0.8F;
       return ((this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F) * var1;
    }
 
    protected SoundEvent getJumpSound() {
@@ -326,28 +324,66 @@
 
    static {
       ID_SIZE = SynchedEntityData.defineId(Slime.class, EntityDataSerializers.INT);
    }
 
-   static class SlimeKeepOnJumpingGoal extends Goal {
+   private static class SlimeMoveControl extends MoveControl {
+      private float yRot;
+      private int jumpDelay;
       private final Slime slime;
+      private boolean isAggressive;
 
-      public SlimeKeepOnJumpingGoal(Slime var1) {
+      public SlimeMoveControl(Slime var1) {
+         super(var1);
          this.slime = var1;
-         this.setFlags(EnumSet.of(Goal.Flag.JUMP, Goal.Flag.MOVE));
+         this.yRot = 180.0F * var1.getYRot() / 3.1415927F;
       }
 
-      public boolean canUse() {
-         return !this.slime.isPassenger();
+      public void setDirection(float var1, boolean var2) {
+         this.yRot = var1;
+         this.isAggressive = var2;
       }
 
+      public void setWantedMovement(double var1) {
+         this.speedModifier = var1;
+         this.operation = MoveControl.Operation.MOVE_TO;
+      }
+
       public void tick() {
-         ((Slime.SlimeMoveControl)this.slime.getMoveControl()).setWantedMovement(1.0D);
+         this.mob.setYRot(this.rotlerp(this.mob.getYRot(), this.yRot, 90.0F));
+         this.mob.yHeadRot = this.mob.getYRot();
+         this.mob.yBodyRot = this.mob.getYRot();
+         if (this.operation != MoveControl.Operation.MOVE_TO) {
+            this.mob.setZza(0.0F);
+         } else {
+            this.operation = MoveControl.Operation.WAIT;
+            if (this.mob.isOnGround()) {
+               this.mob.setSpeed((float)(this.speedModifier * this.mob.getAttributeValue(Attributes.MOVEMENT_SPEED)));
+               if (this.jumpDelay-- <= 0) {
+                  this.jumpDelay = this.slime.getJumpDelay();
+                  if (this.isAggressive) {
+                     this.jumpDelay /= 3;
+                  }
+
+                  this.slime.getJumpControl().jump();
+                  if (this.slime.doPlayJumpSound()) {
+                     this.slime.playSound(this.slime.getJumpSound(), this.slime.getSoundVolume(), this.slime.getSoundPitch());
+                  }
+               } else {
+                  this.slime.xxa = 0.0F;
+                  this.slime.zza = 0.0F;
+                  this.mob.setSpeed(0.0F);
+               }
+            } else {
+               this.mob.setSpeed((float)(this.speedModifier * this.mob.getAttributeValue(Attributes.MOVEMENT_SPEED)));
+            }
+
+         }
       }
    }
 
-   static class SlimeFloatGoal extends Goal {
+   private static class SlimeFloatGoal extends Goal {
       private final Slime slime;
 
       public SlimeFloatGoal(Slime var1) {
          this.slime = var1;
          this.setFlags(EnumSet.of(Goal.Flag.JUMP, Goal.Flag.MOVE));
@@ -365,36 +401,12 @@
 
          ((Slime.SlimeMoveControl)this.slime.getMoveControl()).setWantedMovement(1.2D);
       }
    }
 
-   static class SlimeRandomDirectionGoal extends Goal {
+   private static class SlimeAttackGoal extends Goal {
       private final Slime slime;
-      private float chosenDegrees;
-      private int nextRandomizeTime;
-
-      public SlimeRandomDirectionGoal(Slime var1) {
-         this.slime = var1;
-         this.setFlags(EnumSet.of(Goal.Flag.LOOK));
-      }
-
-      public boolean canUse() {
-         return this.slime.getTarget() == null && (this.slime.onGround || this.slime.isInWater() || this.slime.isInLava() || this.slime.hasEffect(MobEffects.LEVITATION)) && this.slime.getMoveControl() instanceof Slime.SlimeMoveControl;
-      }
-
-      public void tick() {
-         if (--this.nextRandomizeTime <= 0) {
-            this.nextRandomizeTime = 40 + this.slime.getRandom().nextInt(60);
-            this.chosenDegrees = (float)this.slime.getRandom().nextInt(360);
-         }
-
-         ((Slime.SlimeMoveControl)this.slime.getMoveControl()).setDirection(this.chosenDegrees, false);
-      }
-   }
-
-   static class SlimeAttackGoal extends Goal {
-      private final Slime slime;
       private int growTiredTimer;
 
       public SlimeAttackGoal(Slime var1) {
          this.slime = var1;
          this.setFlags(EnumSet.of(Goal.Flag.LOOK));
@@ -402,14 +414,12 @@
 
       public boolean canUse() {
          LivingEntity var1 = this.slime.getTarget();
          if (var1 == null) {
             return false;
-         } else if (!var1.isAlive()) {
-            return false;
          } else {
-            return var1 instanceof Player && ((Player)var1).abilities.invulnerable ? false : this.slime.getMoveControl() instanceof Slime.SlimeMoveControl;
+            return this.slime.canAttack(var1) ? false : this.slime.getMoveControl() instanceof Slime.SlimeMoveControl;
          }
       }
 
       public void start() {
          this.growTiredTimer = 300;
@@ -418,75 +428,59 @@
 
       public boolean canContinueToUse() {
          LivingEntity var1 = this.slime.getTarget();
          if (var1 == null) {
             return false;
-         } else if (!var1.isAlive()) {
+         } else if (this.slime.canAttack(var1)) {
             return false;
-         } else if (var1 instanceof Player && ((Player)var1).abilities.invulnerable) {
-            return false;
          } else {
             return --this.growTiredTimer > 0;
          }
       }
 
       public void tick() {
          this.slime.lookAt(this.slime.getTarget(), 10.0F, 10.0F);
-         ((Slime.SlimeMoveControl)this.slime.getMoveControl()).setDirection(this.slime.yRot, this.slime.isDealsDamage());
+         ((Slime.SlimeMoveControl)this.slime.getMoveControl()).setDirection(this.slime.getYRot(), this.slime.isDealsDamage());
       }
    }
 
-   static class SlimeMoveControl extends MoveControl {
-      private float yRot;
-      private int jumpDelay;
+   private static class SlimeRandomDirectionGoal extends Goal {
       private final Slime slime;
-      private boolean isAggressive;
+      private float chosenDegrees;
+      private int nextRandomizeTime;
 
-      public SlimeMoveControl(Slime var1) {
-         super(var1);
+      public SlimeRandomDirectionGoal(Slime var1) {
          this.slime = var1;
-         this.yRot = 180.0F * var1.yRot / 3.1415927F;
+         this.setFlags(EnumSet.of(Goal.Flag.LOOK));
       }
 
-      public void setDirection(float var1, boolean var2) {
-         this.yRot = var1;
-         this.isAggressive = var2;
+      public boolean canUse() {
+         return this.slime.getTarget() == null && (this.slime.onGround || this.slime.isInWater() || this.slime.isInLava() || this.slime.hasEffect(MobEffects.LEVITATION)) && this.slime.getMoveControl() instanceof Slime.SlimeMoveControl;
       }
 
-      public void setWantedMovement(double var1) {
-         this.speedModifier = var1;
-         this.operation = MoveControl.Operation.MOVE_TO;
+      public void tick() {
+         if (--this.nextRandomizeTime <= 0) {
+            this.nextRandomizeTime = 40 + this.slime.getRandom().nextInt(60);
+            this.chosenDegrees = (float)this.slime.getRandom().nextInt(360);
+         }
+
+         ((Slime.SlimeMoveControl)this.slime.getMoveControl()).setDirection(this.chosenDegrees, false);
       }
+   }
 
-      public void tick() {
-         this.mob.yRot = this.rotlerp(this.mob.yRot, this.yRot, 90.0F);
-         this.mob.yHeadRot = this.mob.yRot;
-         this.mob.yBodyRot = this.mob.yRot;
-         if (this.operation != MoveControl.Operation.MOVE_TO) {
-            this.mob.setZza(0.0F);
-         } else {
-            this.operation = MoveControl.Operation.WAIT;
-            if (this.mob.isOnGround()) {
-               this.mob.setSpeed((float)(this.speedModifier * this.mob.getAttributeValue(Attributes.MOVEMENT_SPEED)));
-               if (this.jumpDelay-- <= 0) {
-                  this.jumpDelay = this.slime.getJumpDelay();
-                  if (this.isAggressive) {
-                     this.jumpDelay /= 3;
-                  }
+   private static class SlimeKeepOnJumpingGoal extends Goal {
+      private final Slime slime;
 
-                  this.slime.getJumpControl().jump();
-                  if (this.slime.doPlayJumpSound()) {
-                     this.slime.playSound(this.slime.getJumpSound(), this.slime.getSoundVolume(), this.slime.getSoundPitch());
-                  }
-               } else {
-                  this.slime.xxa = 0.0F;
-                  this.slime.zza = 0.0F;
-                  this.mob.setSpeed(0.0F);
-               }
-            } else {
-               this.mob.setSpeed((float)(this.speedModifier * this.mob.getAttributeValue(Attributes.MOVEMENT_SPEED)));
-            }
+      public SlimeKeepOnJumpingGoal(Slime var1) {
+         this.slime = var1;
+         this.setFlags(EnumSet.of(Goal.Flag.JUMP, Goal.Flag.MOVE));
+      }
 
-         }
+      public boolean canUse() {
+         return !this.slime.isPassenger();
       }
+
+      public void tick() {
+         ((Slime.SlimeMoveControl)this.slime.getMoveControl()).setWantedMovement(1.0D);
+      }
    }
 }
