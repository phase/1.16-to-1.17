--- net/minecraft/world/entity/monster/Silverfish.java
+++ net/minecraft/world/entity/monster/Silverfish.java
@@ -6,10 +6,11 @@
 import net.minecraft.core.Direction;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.damagesource.EntityDamageSource;
+import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.MobType;
 import net.minecraft.world.entity.Pose;
@@ -57,12 +58,12 @@
 
    public static AttributeSupplier.Builder createAttributes() {
       return Monster.createMonsterAttributes().add(Attributes.MAX_HEALTH, 8.0D).add(Attributes.MOVEMENT_SPEED, 0.25D).add(Attributes.ATTACK_DAMAGE, 1.0D);
    }
 
-   protected boolean isMovementNoisy() {
-      return false;
+   protected Entity.MovementEmission getMovementEmission() {
+      return Entity.MovementEmission.EVENTS;
    }
 
    protected SoundEvent getAmbientSound() {
       return SoundEvents.SILVERFISH_AMBIENT;
    }
@@ -90,16 +91,16 @@
          return super.hurt(var1, var2);
       }
    }
 
    public void tick() {
-      this.yBodyRot = this.yRot;
+      this.yBodyRot = this.getYRot();
       super.tick();
    }
 
    public void setYBodyRot(float var1) {
-      this.yRot = var1;
+      this.setYRot(var1);
       super.setYBodyRot(var1);
    }
 
    public float getWalkTargetValue(BlockPos var1, LevelReader var2) {
       return InfestedBlock.isCompatibleHostBlock(var2.getBlockState(var1.below())) ? 10.0F : super.getWalkTargetValue(var1, var2);
@@ -116,10 +117,61 @@
 
    public MobType getMobType() {
       return MobType.ARTHROPOD;
    }
 
+   private static class SilverfishWakeUpFriendsGoal extends Goal {
+      private final Silverfish silverfish;
+      private int lookForFriends;
+
+      public SilverfishWakeUpFriendsGoal(Silverfish var1) {
+         this.silverfish = var1;
+      }
+
+      public void notifyHurt() {
+         if (this.lookForFriends == 0) {
+            this.lookForFriends = 20;
+         }
+
+      }
+
+      public boolean canUse() {
+         return this.lookForFriends > 0;
+      }
+
+      public void tick() {
+         --this.lookForFriends;
+         if (this.lookForFriends <= 0) {
+            Level var1 = this.silverfish.level;
+            Random var2 = this.silverfish.getRandom();
+            BlockPos var3 = this.silverfish.blockPosition();
+
+            for(int var4 = 0; var4 <= 5 && var4 >= -5; var4 = (var4 <= 0 ? 1 : 0) - var4) {
+               for(int var5 = 0; var5 <= 10 && var5 >= -10; var5 = (var5 <= 0 ? 1 : 0) - var5) {
+                  for(int var6 = 0; var6 <= 10 && var6 >= -10; var6 = (var6 <= 0 ? 1 : 0) - var6) {
+                     BlockPos var7 = var3.offset(var5, var4, var6);
+                     BlockState var8 = var1.getBlockState(var7);
+                     Block var9 = var8.getBlock();
+                     if (var9 instanceof InfestedBlock) {
+                        if (var1.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING)) {
+                           var1.destroyBlock(var7, true, this.silverfish);
+                        } else {
+                           var1.setBlock(var7, ((InfestedBlock)var9).hostStateByInfested(var1.getBlockState(var7)), 3);
+                        }
+
+                        if (var2.nextBoolean()) {
+                           return;
+                        }
+                     }
+                  }
+               }
+            }
+         }
+
+      }
+   }
+
    static class SilverfishMergeWithStoneGoal extends RandomStrollGoal {
       private Direction selectedDirection;
       private boolean doMerge;
 
       public SilverfishMergeWithStoneGoal(Silverfish var1) {
@@ -159,65 +211,14 @@
          } else {
             Level var1 = this.mob.level;
             BlockPos var2 = (new BlockPos(this.mob.getX(), this.mob.getY() + 0.5D, this.mob.getZ())).relative(this.selectedDirection);
             BlockState var3 = var1.getBlockState(var2);
             if (InfestedBlock.isCompatibleHostBlock(var3)) {
-               var1.setBlock(var2, InfestedBlock.stateByHostBlock(var3.getBlock()), 3);
+               var1.setBlock(var2, InfestedBlock.infestedStateByHost(var3), 3);
                this.mob.spawnAnim();
-               this.mob.remove();
+               this.mob.discard();
             }
 
          }
       }
    }
-
-   static class SilverfishWakeUpFriendsGoal extends Goal {
-      private final Silverfish silverfish;
-      private int lookForFriends;
-
-      public SilverfishWakeUpFriendsGoal(Silverfish var1) {
-         this.silverfish = var1;
-      }
-
-      public void notifyHurt() {
-         if (this.lookForFriends == 0) {
-            this.lookForFriends = 20;
-         }
-
-      }
-
-      public boolean canUse() {
-         return this.lookForFriends > 0;
-      }
-
-      public void tick() {
-         --this.lookForFriends;
-         if (this.lookForFriends <= 0) {
-            Level var1 = this.silverfish.level;
-            Random var2 = this.silverfish.getRandom();
-            BlockPos var3 = this.silverfish.blockPosition();
-
-            for(int var4 = 0; var4 <= 5 && var4 >= -5; var4 = (var4 <= 0 ? 1 : 0) - var4) {
-               for(int var5 = 0; var5 <= 10 && var5 >= -10; var5 = (var5 <= 0 ? 1 : 0) - var5) {
-                  for(int var6 = 0; var6 <= 10 && var6 >= -10; var6 = (var6 <= 0 ? 1 : 0) - var6) {
-                     BlockPos var7 = var3.offset(var5, var4, var6);
-                     BlockState var8 = var1.getBlockState(var7);
-                     Block var9 = var8.getBlock();
-                     if (var9 instanceof InfestedBlock) {
-                        if (var1.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING)) {
-                           var1.destroyBlock(var7, true, this.silverfish);
-                        } else {
-                           var1.setBlock(var7, ((InfestedBlock)var9).getHostBlock().defaultBlockState(), 3);
-                        }
-
-                        if (var2.nextBoolean()) {
-                           return;
-                        }
-                     }
-                  }
-               }
-            }
-         }
-
-      }
-   }
 }
