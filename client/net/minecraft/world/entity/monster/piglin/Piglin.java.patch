--- net/minecraft/world/entity/monster/piglin/Piglin.java
+++ net/minecraft/world/entity/monster/piglin/Piglin.java
@@ -12,10 +12,12 @@
 import net.minecraft.network.syncher.EntityDataSerializers;
 import net.minecraft.network.syncher.SynchedEntityData;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
+import net.minecraft.util.VisibleForDebug;
+import net.minecraft.world.Container;
 import net.minecraft.world.DifficultyInstance;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.SimpleContainer;
 import net.minecraft.world.damagesource.DamageSource;
@@ -37,10 +39,11 @@
 import net.minecraft.world.entity.ai.sensing.Sensor;
 import net.minecraft.world.entity.ai.sensing.SensorType;
 import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.monster.CrossbowAttackMob;
 import net.minecraft.world.entity.monster.Monster;
+import net.minecraft.world.entity.npc.InventoryCarrier;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.entity.projectile.Projectile;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.ProjectileWeaponItem;
@@ -50,18 +53,27 @@
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.ServerLevelAccessor;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
 
-public class Piglin extends AbstractPiglin implements CrossbowAttackMob {
+public class Piglin extends AbstractPiglin implements CrossbowAttackMob, InventoryCarrier {
    private static final EntityDataAccessor<Boolean> DATA_BABY_ID;
    private static final EntityDataAccessor<Boolean> DATA_IS_CHARGING_CROSSBOW;
    private static final EntityDataAccessor<Boolean> DATA_IS_DANCING;
    private static final UUID SPEED_MODIFIER_BABY_UUID;
    private static final AttributeModifier SPEED_MODIFIER_BABY;
+   private static final int MAX_HEALTH = 16;
+   private static final float MOVEMENT_SPEED_WHEN_FIGHTING = 0.35F;
+   private static final int ATTACK_DAMAGE = 5;
+   private static final float CROSSBOW_POWER = 1.6F;
+   private static final float CHANCE_OF_WEARING_EACH_ARMOUR_ITEM = 0.1F;
+   private static final int MAX_PASSENGERS_ON_ONE_HOGLIN = 3;
+   private static final float PROBABILITY_OF_SPAWNING_AS_BABY = 0.2F;
+   private static final float BABY_EYE_HEIGHT_ADJUSTMENT = 0.81F;
+   private static final double PROBABILITY_OF_SPAWNING_WITH_CROSSBOW_INSTEAD_OF_SWORD = 0.5D;
    private final SimpleContainer inventory = new SimpleContainer(8);
-   private boolean cannotHunt = false;
+   private boolean cannotHunt;
    protected static final ImmutableList<SensorType<? extends Sensor<? super Piglin>>> SENSOR_TYPES;
    protected static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES;
 
    public Piglin(EntityType<? extends AbstractPiglin> var1, Level var2) {
       super(var1, var2);
@@ -86,10 +98,15 @@
       this.setBaby(var1.getBoolean("IsBaby"));
       this.setCannotHunt(var1.getBoolean("CannotHunt"));
       this.inventory.fromTag(var1.getList("Inventory", 10));
    }
 
+   @VisibleForDebug
+   public Container getInventory() {
+      return this.inventory;
+   }
+
    protected void dropCustomDeathLoot(DamageSource var1, int var2, boolean var3) {
       super.dropCustomDeathLoot(var1, var2, var3);
       this.inventory.removeAllItems().forEach(this::spawnAtLocation);
    }
 
@@ -256,11 +273,11 @@
    }
 
    public PiglinArmPose getArmPose() {
       if (this.isDancing()) {
          return PiglinArmPose.DANCING;
-      } else if (PiglinAi.isLovedItem(this.getOffhandItem().getItem())) {
+      } else if (PiglinAi.isLovedItem(this.getOffhandItem())) {
          return PiglinArmPose.ADMIRING_ITEM;
       } else if (this.isAggressive() && this.isHoldingMeleeWeapon()) {
          return PiglinArmPose.ATTACKING_WITH_MELEE_WEAPON;
       } else if (this.isChargingCrossbow()) {
          return PiglinArmPose.CROSSBOW_CHARGE;
@@ -305,11 +322,11 @@
    protected void holdInMainHand(ItemStack var1) {
       this.setItemSlotAndDropWhenKilled(EquipmentSlot.MAINHAND, var1);
    }
 
    protected void holdInOffHand(ItemStack var1) {
-      if (var1.getItem() == PiglinAi.BARTERING_ITEM) {
+      if (var1.is(PiglinAi.BARTERING_ITEM)) {
          this.setItemSlot(EquipmentSlot.OFFHAND, var1);
          this.setGuaranteedDrop(EquipmentSlot.OFFHAND);
       } else {
          this.setItemSlotAndDropWhenKilled(EquipmentSlot.OFFHAND, var1);
       }
@@ -328,18 +345,18 @@
 
    protected boolean canReplaceCurrentItem(ItemStack var1, ItemStack var2) {
       if (EnchantmentHelper.hasBindingCurse(var2)) {
          return false;
       } else {
-         boolean var3 = PiglinAi.isLovedItem(var1.getItem()) || var1.getItem() == Items.CROSSBOW;
-         boolean var4 = PiglinAi.isLovedItem(var2.getItem()) || var2.getItem() == Items.CROSSBOW;
+         boolean var3 = PiglinAi.isLovedItem(var1) || var1.is(Items.CROSSBOW);
+         boolean var4 = PiglinAi.isLovedItem(var2) || var2.is(Items.CROSSBOW);
          if (var3 && !var4) {
             return true;
          } else if (!var3 && var4) {
             return false;
          } else {
-            return this.isAdult() && var1.getItem() != Items.CROSSBOW && var2.getItem() == Items.CROSSBOW ? false : super.canReplaceCurrentItem(var1, var2);
+            return this.isAdult() && !var1.is(Items.CROSSBOW) && var2.is(Items.CROSSBOW) ? false : super.canReplaceCurrentItem(var1, var2);
          }
       }
    }
 
    protected void pickUpItem(ItemEntity var1) {
@@ -389,8 +406,8 @@
       DATA_IS_CHARGING_CROSSBOW = SynchedEntityData.defineId(Piglin.class, EntityDataSerializers.BOOLEAN);
       DATA_IS_DANCING = SynchedEntityData.defineId(Piglin.class, EntityDataSerializers.BOOLEAN);
       SPEED_MODIFIER_BABY_UUID = UUID.fromString("766bfa64-11f3-11ea-8d71-362b9e155667");
       SPEED_MODIFIER_BABY = new AttributeModifier(SPEED_MODIFIER_BABY_UUID, "Baby speed boost", 0.20000000298023224D, AttributeModifier.Operation.MULTIPLY_BASE);
       SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.NEAREST_ITEMS, SensorType.HURT_BY, SensorType.PIGLIN_SPECIFIC_SENSOR);
-      MEMORY_TYPES = ImmutableList.of(MemoryModuleType.LOOK_TARGET, MemoryModuleType.DOORS_TO_CLOSE, MemoryModuleType.LIVING_ENTITIES, MemoryModuleType.VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_TARGETABLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLINS, MemoryModuleType.NEARBY_ADULT_PIGLINS, MemoryModuleType.NEAREST_VISIBLE_WANTED_ITEM, MemoryModuleType.HURT_BY, MemoryModuleType.HURT_BY_ENTITY, MemoryModuleType.WALK_TARGET, new MemoryModuleType[]{MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.INTERACTION_TARGET, MemoryModuleType.PATH, MemoryModuleType.ANGRY_AT, MemoryModuleType.UNIVERSAL_ANGER, MemoryModuleType.AVOID_TARGET, MemoryModuleType.ADMIRING_ITEM, MemoryModuleType.TIME_TRYING_TO_REACH_ADMIRE_ITEM, MemoryModuleType.ADMIRING_DISABLED, MemoryModuleType.DISABLE_WALK_TO_ADMIRE_ITEM, MemoryModuleType.CELEBRATE_LOCATION, MemoryModuleType.DANCING, MemoryModuleType.HUNTED_RECENTLY, MemoryModuleType.NEAREST_VISIBLE_BABY_HOGLIN, MemoryModuleType.NEAREST_VISIBLE_NEMESIS, MemoryModuleType.NEAREST_VISIBLE_ZOMBIFIED, MemoryModuleType.RIDE_TARGET, MemoryModuleType.VISIBLE_ADULT_PIGLIN_COUNT, MemoryModuleType.VISIBLE_ADULT_HOGLIN_COUNT, MemoryModuleType.NEAREST_VISIBLE_HUNTABLE_HOGLIN, MemoryModuleType.NEAREST_TARGETABLE_PLAYER_NOT_WEARING_GOLD, MemoryModuleType.NEAREST_PLAYER_HOLDING_WANTED_ITEM, MemoryModuleType.ATE_RECENTLY, MemoryModuleType.NEAREST_REPELLENT});
+      MEMORY_TYPES = ImmutableList.of(MemoryModuleType.LOOK_TARGET, MemoryModuleType.DOORS_TO_CLOSE, MemoryModuleType.NEAREST_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLINS, MemoryModuleType.NEARBY_ADULT_PIGLINS, MemoryModuleType.NEAREST_VISIBLE_WANTED_ITEM, MemoryModuleType.HURT_BY, MemoryModuleType.HURT_BY_ENTITY, MemoryModuleType.WALK_TARGET, new MemoryModuleType[]{MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.INTERACTION_TARGET, MemoryModuleType.PATH, MemoryModuleType.ANGRY_AT, MemoryModuleType.UNIVERSAL_ANGER, MemoryModuleType.AVOID_TARGET, MemoryModuleType.ADMIRING_ITEM, MemoryModuleType.TIME_TRYING_TO_REACH_ADMIRE_ITEM, MemoryModuleType.ADMIRING_DISABLED, MemoryModuleType.DISABLE_WALK_TO_ADMIRE_ITEM, MemoryModuleType.CELEBRATE_LOCATION, MemoryModuleType.DANCING, MemoryModuleType.HUNTED_RECENTLY, MemoryModuleType.NEAREST_VISIBLE_BABY_HOGLIN, MemoryModuleType.NEAREST_VISIBLE_NEMESIS, MemoryModuleType.NEAREST_VISIBLE_ZOMBIFIED, MemoryModuleType.RIDE_TARGET, MemoryModuleType.VISIBLE_ADULT_PIGLIN_COUNT, MemoryModuleType.VISIBLE_ADULT_HOGLIN_COUNT, MemoryModuleType.NEAREST_VISIBLE_HUNTABLE_HOGLIN, MemoryModuleType.NEAREST_TARGETABLE_PLAYER_NOT_WEARING_GOLD, MemoryModuleType.NEAREST_PLAYER_HOLDING_WANTED_ITEM, MemoryModuleType.ATE_RECENTLY, MemoryModuleType.NEAREST_REPELLENT});
    }
 }
