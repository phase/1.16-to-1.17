--- net/minecraft/world/entity/monster/EnderMan.java
+++ net/minecraft/world/entity/monster/EnderMan.java
@@ -17,14 +17,13 @@
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.tags.BlockTags;
 import net.minecraft.tags.FluidTags;
-import net.minecraft.tags.Tag;
-import net.minecraft.util.IntRange;
 import net.minecraft.util.Mth;
 import net.minecraft.util.TimeUtil;
+import net.minecraft.util.valueproviders.UniformInt;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.damagesource.IndirectEntityDamageSource;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
 import net.minecraft.world.entity.EntityType;
@@ -51,25 +50,27 @@
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.pathfinder.BlockPathTypes;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.Vec3;
 
 public class EnderMan extends Monster implements NeutralMob {
    private static final UUID SPEED_MODIFIER_ATTACKING_UUID = UUID.fromString("020E0DFB-87AE-4653-9556-831010E291A0");
    private static final AttributeModifier SPEED_MODIFIER_ATTACKING;
+   private static final int DELAY_BETWEEN_CREEPY_STARE_SOUND = 400;
+   private static final int MIN_DEAGGRESSION_TIME = 600;
    private static final EntityDataAccessor<Optional<BlockState>> DATA_CARRY_STATE;
    private static final EntityDataAccessor<Boolean> DATA_CREEPY;
    private static final EntityDataAccessor<Boolean> DATA_STARED_AT;
-   private static final Predicate<LivingEntity> ENDERMITE_SELECTOR;
    private int lastStareSound = Integer.MIN_VALUE;
    private int targetChangeTime;
-   private static final IntRange PERSISTENT_ANGER_TIME;
+   private static final UniformInt PERSISTENT_ANGER_TIME;
    private int remainingPersistentAngerTime;
    private UUID persistentAngerTarget;
 
    public EnderMan(EntityType<? extends EnderMan> var1, Level var2) {
       super(var1, var2);
@@ -86,11 +87,11 @@
       this.goalSelector.addGoal(8, new RandomLookAroundGoal(this));
       this.goalSelector.addGoal(10, new EnderMan.EndermanLeaveBlockGoal(this));
       this.goalSelector.addGoal(11, new EnderMan.EndermanTakeBlockGoal(this));
       this.targetSelector.addGoal(1, new EnderMan.EndermanLookForPlayerGoal(this, this::isAngryAt));
       this.targetSelector.addGoal(2, new HurtByTargetGoal(this, new Class[0]));
-      this.targetSelector.addGoal(3, new NearestAttackableTargetGoal(this, Endermite.class, 10, true, false, ENDERMITE_SELECTOR));
+      this.targetSelector.addGoal(3, new NearestAttackableTargetGoal(this, Endermite.class, true, false));
       this.targetSelector.addGoal(4, new ResetUniversalAngerTargetGoal(this, false));
    }
 
    public static AttributeSupplier.Builder createAttributes() {
       return Monster.createMonsterAttributes().add(Attributes.MAX_HEALTH, 40.0D).add(Attributes.MOVEMENT_SPEED, 0.30000001192092896D).add(Attributes.ATTACK_DAMAGE, 7.0D).add(Attributes.FOLLOW_RANGE, 64.0D);
@@ -120,11 +121,11 @@
       this.entityData.define(DATA_CREEPY, false);
       this.entityData.define(DATA_STARED_AT, false);
    }
 
    public void startPersistentAngerTimer() {
-      this.setRemainingPersistentAngerTime(PERSISTENT_ANGER_TIME.randomValue(this.random));
+      this.setRemainingPersistentAngerTime(PERSISTENT_ANGER_TIME.sample(this.random));
    }
 
    public void setRemainingPersistentAngerTime(int var1) {
       this.remainingPersistentAngerTime = var1;
    }
@@ -178,16 +179,16 @@
             var2 = null;
          }
       }
 
       this.setCarriedBlock(var2);
-      this.readPersistentAngerSaveData((ServerLevel)this.level, var1);
+      this.readPersistentAngerSaveData(this.level, var1);
    }
 
    private boolean isLookingAtMe(Player var1) {
-      ItemStack var2 = (ItemStack)var1.inventory.armor.get(3);
-      if (var2.getItem() == Blocks.CARVED_PUMPKIN.asItem()) {
+      ItemStack var2 = (ItemStack)var1.getInventory().armor.get(3);
+      if (var2.is(Blocks.CARVED_PUMPKIN.asItem())) {
          return false;
       } else {
          Vec3 var3 = var1.getViewVector(1.0F).normalize();
          Vec3 var4 = new Vec3(this.getX() - var1.getX(), this.getEyeY() - var1.getEyeY(), this.getZ() - var1.getZ());
          double var5 = var4.length();
@@ -254,11 +255,11 @@
    }
 
    private boolean teleport(double var1, double var3, double var5) {
       BlockPos.MutableBlockPos var7 = new BlockPos.MutableBlockPos(var1, var3, var5);
 
-      while(var7.getY() > 0 && !this.level.getBlockState(var7).getMaterial().blocksMotion()) {
+      while(var7.getY() > this.level.getMinBuildHeight() && !this.level.getBlockState(var7).getMaterial().blocksMotion()) {
          var7.move(Direction.DOWN);
       }
 
       BlockState var8 = this.level.getBlockState(var7);
       boolean var9 = var8.getMaterial().blocksMotion();
@@ -346,13 +347,10 @@
    static {
       SPEED_MODIFIER_ATTACKING = new AttributeModifier(SPEED_MODIFIER_ATTACKING_UUID, "Attacking speed boost", 0.15000000596046448D, AttributeModifier.Operation.ADDITION);
       DATA_CARRY_STATE = SynchedEntityData.defineId(EnderMan.class, EntityDataSerializers.BLOCK_STATE);
       DATA_CREEPY = SynchedEntityData.defineId(EnderMan.class, EntityDataSerializers.BOOLEAN);
       DATA_STARED_AT = SynchedEntityData.defineId(EnderMan.class, EntityDataSerializers.BOOLEAN);
-      ENDERMITE_SELECTOR = (var0) -> {
-         return var0 instanceof Endermite && ((Endermite)var0).isPlayerSpawned();
-      };
       PERSISTENT_ANGER_TIME = TimeUtil.rangeOfSeconds(20, 39);
    }
 
    static class EndermanTakeBlockGoal extends Goal {
       private final EnderMan enderman;
@@ -377,17 +375,17 @@
          int var3 = Mth.floor(this.enderman.getX() - 2.0D + var1.nextDouble() * 4.0D);
          int var4 = Mth.floor(this.enderman.getY() + var1.nextDouble() * 3.0D);
          int var5 = Mth.floor(this.enderman.getZ() - 2.0D + var1.nextDouble() * 4.0D);
          BlockPos var6 = new BlockPos(var3, var4, var5);
          BlockState var7 = var2.getBlockState(var6);
-         Block var8 = var7.getBlock();
-         Vec3 var9 = new Vec3((double)Mth.floor(this.enderman.getX()) + 0.5D, (double)var4 + 0.5D, (double)Mth.floor(this.enderman.getZ()) + 0.5D);
-         Vec3 var10 = new Vec3((double)var3 + 0.5D, (double)var4 + 0.5D, (double)var5 + 0.5D);
-         BlockHitResult var11 = var2.clip(new ClipContext(var9, var10, ClipContext.Block.OUTLINE, ClipContext.Fluid.NONE, this.enderman));
-         boolean var12 = var11.getBlockPos().equals(var6);
-         if (var8.is((Tag)BlockTags.ENDERMAN_HOLDABLE) && var12) {
+         Vec3 var8 = new Vec3((double)this.enderman.getBlockX() + 0.5D, (double)var4 + 0.5D, (double)this.enderman.getBlockZ() + 0.5D);
+         Vec3 var9 = new Vec3((double)var3 + 0.5D, (double)var4 + 0.5D, (double)var5 + 0.5D);
+         BlockHitResult var10 = var2.clip(new ClipContext(var8, var9, ClipContext.Block.OUTLINE, ClipContext.Fluid.NONE, this.enderman));
+         boolean var11 = var10.getBlockPos().equals(var6);
+         if (var7.is(BlockTags.ENDERMAN_HOLDABLE) && var11) {
             var2.removeBlock(var6, false);
+            var2.gameEvent(this.enderman, GameEvent.BLOCK_DESTROY, var6);
             this.enderman.setCarriedBlock(var7.getBlock().defaultBlockState());
          }
 
       }
    }
@@ -422,10 +420,11 @@
          BlockState var10 = this.enderman.getCarriedBlock();
          if (var10 != null) {
             var10 = Block.updateFromNeighbourShapes(var10, this.enderman.level, var6);
             if (this.canPlaceBlock(var2, var6, var10, var7, var9, var8)) {
                var2.setBlock(var6, var10, 3);
+               var2.gameEvent(this.enderman, GameEvent.BLOCK_PLACE, var6);
                this.enderman.setCarriedBlock((BlockState)null);
             }
 
          }
       }
