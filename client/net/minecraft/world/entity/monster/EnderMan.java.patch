--- net/minecraft/world/entity/monster/EnderMan.java
+++ net/minecraft/world/entity/monster/EnderMan.java
@@ -17,14 +17,13 @@
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.tags.BlockTags;
 import net.minecraft.tags.FluidTags;
-import net.minecraft.tags.Tag;
-import net.minecraft.util.IntRange;
 import net.minecraft.util.Mth;
 import net.minecraft.util.TimeUtil;
+import net.minecraft.util.valueproviders.UniformInt;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.damagesource.IndirectEntityDamageSource;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
 import net.minecraft.world.entity.EntityType;
@@ -51,25 +50,27 @@
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.pathfinder.BlockPathTypes;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.Vec3;
 
 public class EnderMan extends Monster implements NeutralMob {
    private static final UUID SPEED_MODIFIER_ATTACKING_UUID = UUID.fromString("020E0DFB-87AE-4653-9556-831010E291A0");
    private static final AttributeModifier SPEED_MODIFIER_ATTACKING;
+   private static final int DELAY_BETWEEN_CREEPY_STARE_SOUND = 400;
+   private static final int MIN_DEAGGRESSION_TIME = 600;
    private static final EntityDataAccessor<Optional<BlockState>> DATA_CARRY_STATE;
    private static final EntityDataAccessor<Boolean> DATA_CREEPY;
    private static final EntityDataAccessor<Boolean> DATA_STARED_AT;
-   private static final Predicate<LivingEntity> ENDERMITE_SELECTOR;
    private int lastStareSound = Integer.MIN_VALUE;
    private int targetChangeTime;
-   private static final IntRange PERSISTENT_ANGER_TIME;
+   private static final UniformInt PERSISTENT_ANGER_TIME;
    private int remainingPersistentAngerTime;
    private UUID persistentAngerTarget;
 
    public EnderMan(EntityType<? extends EnderMan> var1, Level var2) {
       super(var1, var2);
@@ -86,11 +87,11 @@
       this.goalSelector.addGoal(8, new RandomLookAroundGoal(this));
       this.goalSelector.addGoal(10, new EnderMan.EndermanLeaveBlockGoal(this));
       this.goalSelector.addGoal(11, new EnderMan.EndermanTakeBlockGoal(this));
       this.targetSelector.addGoal(1, new EnderMan.EndermanLookForPlayerGoal(this, this::isAngryAt));
       this.targetSelector.addGoal(2, new HurtByTargetGoal(this, new Class[0]));
-      this.targetSelector.addGoal(3, new NearestAttackableTargetGoal(this, Endermite.class, 10, true, false, ENDERMITE_SELECTOR));
+      this.targetSelector.addGoal(3, new NearestAttackableTargetGoal(this, Endermite.class, true, false));
       this.targetSelector.addGoal(4, new ResetUniversalAngerTargetGoal(this, false));
    }
 
    public static AttributeSupplier.Builder createAttributes() {
       return Monster.createMonsterAttributes().add(Attributes.MAX_HEALTH, 40.0D).add(Attributes.MOVEMENT_SPEED, 0.30000001192092896D).add(Attributes.ATTACK_DAMAGE, 7.0D).add(Attributes.FOLLOW_RANGE, 64.0D);
@@ -120,11 +121,11 @@
       this.entityData.define(DATA_CREEPY, false);
       this.entityData.define(DATA_STARED_AT, false);
    }
 
    public void startPersistentAngerTimer() {
-      this.setRemainingPersistentAngerTime(PERSISTENT_ANGER_TIME.randomValue(this.random));
+      this.setRemainingPersistentAngerTime(PERSISTENT_ANGER_TIME.sample(this.random));
    }
 
    public void setRemainingPersistentAngerTime(int var1) {
       this.remainingPersistentAngerTime = var1;
    }
@@ -178,24 +179,24 @@
             var2 = null;
          }
       }
 
       this.setCarriedBlock(var2);
-      this.readPersistentAngerSaveData((ServerLevel)this.level, var1);
+      this.readPersistentAngerSaveData(this.level, var1);
    }
 
-   private boolean isLookingAtMe(Player var1) {
-      ItemStack var2 = (ItemStack)var1.inventory.armor.get(3);
-      if (var2.getItem() == Blocks.CARVED_PUMPKIN.asItem()) {
+   boolean isLookingAtMe(Player var1) {
+      ItemStack var2 = (ItemStack)var1.getInventory().armor.get(3);
+      if (var2.is(Blocks.CARVED_PUMPKIN.asItem())) {
          return false;
       } else {
          Vec3 var3 = var1.getViewVector(1.0F).normalize();
          Vec3 var4 = new Vec3(this.getX() - var1.getX(), this.getEyeY() - var1.getEyeY(), this.getZ() - var1.getZ());
          double var5 = var4.length();
          var4 = var4.normalize();
          double var7 = var3.dot(var4);
-         return var7 > 1.0D - 0.025D / var5 ? var1.canSee(this) : false;
+         return var7 > 1.0D - 0.025D / var5 ? var1.hasLineOfSight(this) : false;
       }
    }
 
    protected float getStandingEyeHeight(Pose var1, EntityDimensions var2) {
       return 2.55F;
@@ -241,11 +242,11 @@
       } else {
          return false;
       }
    }
 
-   private boolean teleportTowards(Entity var1) {
+   boolean teleportTowards(Entity var1) {
       Vec3 var2 = new Vec3(this.getX() - var1.getX(), this.getY(0.5D) - var1.getEyeY(), this.getZ() - var1.getZ());
       var2 = var2.normalize();
       double var3 = 16.0D;
       double var5 = this.getX() + (this.random.nextDouble() - 0.5D) * 8.0D - var2.x * 16.0D;
       double var7 = this.getY() + (double)(this.random.nextInt(16) - 8) - var2.y * 16.0D;
@@ -254,11 +255,11 @@
    }
 
    private boolean teleport(double var1, double var3, double var5) {
       BlockPos.MutableBlockPos var7 = new BlockPos.MutableBlockPos(var1, var3, var5);
 
-      while(var7.getY() > 0 && !this.level.getBlockState(var7).getMaterial().blocksMotion()) {
+      while(var7.getY() > this.level.getMinBuildHeight() && !this.level.getBlockState(var7).getMaterial().blocksMotion()) {
          var7.move(Direction.DOWN);
       }
 
       BlockState var8 = this.level.getBlockState(var7);
       boolean var9 = var8.getMaterial().blocksMotion();
@@ -346,55 +347,42 @@
    static {
       SPEED_MODIFIER_ATTACKING = new AttributeModifier(SPEED_MODIFIER_ATTACKING_UUID, "Attacking speed boost", 0.15000000596046448D, AttributeModifier.Operation.ADDITION);
       DATA_CARRY_STATE = SynchedEntityData.defineId(EnderMan.class, EntityDataSerializers.BLOCK_STATE);
       DATA_CREEPY = SynchedEntityData.defineId(EnderMan.class, EntityDataSerializers.BOOLEAN);
       DATA_STARED_AT = SynchedEntityData.defineId(EnderMan.class, EntityDataSerializers.BOOLEAN);
-      ENDERMITE_SELECTOR = (var0) -> {
-         return var0 instanceof Endermite && ((Endermite)var0).isPlayerSpawned();
-      };
       PERSISTENT_ANGER_TIME = TimeUtil.rangeOfSeconds(20, 39);
    }
 
-   static class EndermanTakeBlockGoal extends Goal {
+   private static class EndermanFreezeWhenLookedAt extends Goal {
       private final EnderMan enderman;
+      private LivingEntity target;
 
-      public EndermanTakeBlockGoal(EnderMan var1) {
+      public EndermanFreezeWhenLookedAt(EnderMan var1) {
          this.enderman = var1;
+         this.setFlags(EnumSet.of(Goal.Flag.JUMP, Goal.Flag.MOVE));
       }
 
       public boolean canUse() {
-         if (this.enderman.getCarriedBlock() != null) {
+         this.target = this.enderman.getTarget();
+         if (!(this.target instanceof Player)) {
             return false;
-         } else if (!this.enderman.level.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING)) {
-            return false;
          } else {
-            return this.enderman.getRandom().nextInt(20) == 0;
+            double var1 = this.target.distanceToSqr(this.enderman);
+            return var1 > 256.0D ? false : this.enderman.isLookingAtMe((Player)this.target);
          }
       }
 
-      public void tick() {
-         Random var1 = this.enderman.getRandom();
-         Level var2 = this.enderman.level;
-         int var3 = Mth.floor(this.enderman.getX() - 2.0D + var1.nextDouble() * 4.0D);
-         int var4 = Mth.floor(this.enderman.getY() + var1.nextDouble() * 3.0D);
-         int var5 = Mth.floor(this.enderman.getZ() - 2.0D + var1.nextDouble() * 4.0D);
-         BlockPos var6 = new BlockPos(var3, var4, var5);
-         BlockState var7 = var2.getBlockState(var6);
-         Block var8 = var7.getBlock();
-         Vec3 var9 = new Vec3((double)Mth.floor(this.enderman.getX()) + 0.5D, (double)var4 + 0.5D, (double)Mth.floor(this.enderman.getZ()) + 0.5D);
-         Vec3 var10 = new Vec3((double)var3 + 0.5D, (double)var4 + 0.5D, (double)var5 + 0.5D);
-         BlockHitResult var11 = var2.clip(new ClipContext(var9, var10, ClipContext.Block.OUTLINE, ClipContext.Fluid.NONE, this.enderman));
-         boolean var12 = var11.getBlockPos().equals(var6);
-         if (var8.is((Tag)BlockTags.ENDERMAN_HOLDABLE) && var12) {
-            var2.removeBlock(var6, false);
-            this.enderman.setCarriedBlock(var7.getBlock().defaultBlockState());
-         }
+      public void start() {
+         this.enderman.getNavigation().stop();
+      }
 
+      public void tick() {
+         this.enderman.getLookControl().setLookAt(this.target.getX(), this.target.getEyeY(), this.target.getZ());
       }
    }
 
-   static class EndermanLeaveBlockGoal extends Goal {
+   private static class EndermanLeaveBlockGoal extends Goal {
       private final EnderMan enderman;
 
       public EndermanLeaveBlockGoal(EnderMan var1) {
          this.enderman = var1;
       }
@@ -422,10 +410,11 @@
          BlockState var10 = this.enderman.getCarriedBlock();
          if (var10 != null) {
             var10 = Block.updateFromNeighbourShapes(var10, this.enderman.level, var6);
             if (this.canPlaceBlock(var2, var6, var10, var7, var9, var8)) {
                var2.setBlock(var6, var10, 3);
+               var2.gameEvent(this.enderman, GameEvent.BLOCK_PLACE, var6);
                this.enderman.setCarriedBlock((BlockState)null);
             }
 
          }
       }
@@ -433,50 +422,60 @@
       private boolean canPlaceBlock(Level var1, BlockPos var2, BlockState var3, BlockState var4, BlockState var5, BlockPos var6) {
          return var4.isAir() && !var5.isAir() && !var5.is(Blocks.BEDROCK) && var5.isCollisionShapeFullBlock(var1, var6) && var3.canSurvive(var1, var2) && var1.getEntities(this.enderman, AABB.unitCubeFromLowerCorner(Vec3.atLowerCornerOf(var2))).isEmpty();
       }
    }
 
-   static class EndermanFreezeWhenLookedAt extends Goal {
+   static class EndermanTakeBlockGoal extends Goal {
       private final EnderMan enderman;
-      private LivingEntity target;
 
-      public EndermanFreezeWhenLookedAt(EnderMan var1) {
+      public EndermanTakeBlockGoal(EnderMan var1) {
          this.enderman = var1;
-         this.setFlags(EnumSet.of(Goal.Flag.JUMP, Goal.Flag.MOVE));
       }
 
       public boolean canUse() {
-         this.target = this.enderman.getTarget();
-         if (!(this.target instanceof Player)) {
+         if (this.enderman.getCarriedBlock() != null) {
             return false;
+         } else if (!this.enderman.level.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING)) {
+            return false;
          } else {
-            double var1 = this.target.distanceToSqr(this.enderman);
-            return var1 > 256.0D ? false : this.enderman.isLookingAtMe((Player)this.target);
+            return this.enderman.getRandom().nextInt(20) == 0;
          }
       }
 
-      public void start() {
-         this.enderman.getNavigation().stop();
-      }
-
       public void tick() {
-         this.enderman.getLookControl().setLookAt(this.target.getX(), this.target.getEyeY(), this.target.getZ());
+         Random var1 = this.enderman.getRandom();
+         Level var2 = this.enderman.level;
+         int var3 = Mth.floor(this.enderman.getX() - 2.0D + var1.nextDouble() * 4.0D);
+         int var4 = Mth.floor(this.enderman.getY() + var1.nextDouble() * 3.0D);
+         int var5 = Mth.floor(this.enderman.getZ() - 2.0D + var1.nextDouble() * 4.0D);
+         BlockPos var6 = new BlockPos(var3, var4, var5);
+         BlockState var7 = var2.getBlockState(var6);
+         Vec3 var8 = new Vec3((double)this.enderman.getBlockX() + 0.5D, (double)var4 + 0.5D, (double)this.enderman.getBlockZ() + 0.5D);
+         Vec3 var9 = new Vec3((double)var3 + 0.5D, (double)var4 + 0.5D, (double)var5 + 0.5D);
+         BlockHitResult var10 = var2.clip(new ClipContext(var8, var9, ClipContext.Block.OUTLINE, ClipContext.Fluid.NONE, this.enderman));
+         boolean var11 = var10.getBlockPos().equals(var6);
+         if (var7.is(BlockTags.ENDERMAN_HOLDABLE) && var11) {
+            var2.removeBlock(var6, false);
+            var2.gameEvent(this.enderman, GameEvent.BLOCK_DESTROY, var6);
+            this.enderman.setCarriedBlock(var7.getBlock().defaultBlockState());
+         }
+
       }
    }
 
-   static class EndermanLookForPlayerGoal extends NearestAttackableTargetGoal<Player> {
+   private static class EndermanLookForPlayerGoal extends NearestAttackableTargetGoal<Player> {
       private final EnderMan enderman;
       private Player pendingTarget;
       private int aggroTime;
       private int teleportTime;
       private final TargetingConditions startAggroTargetConditions;
-      private final TargetingConditions continueAggroTargetConditions = (new TargetingConditions()).allowUnseeable();
+      private final TargetingConditions continueAggroTargetConditions = TargetingConditions.forCombat().ignoreLineOfSight();
 
       public EndermanLookForPlayerGoal(EnderMan var1, @Nullable Predicate<LivingEntity> var2) {
          super(var1, Player.class, 10, false, false, var2);
          this.enderman = var1;
-         this.startAggroTargetConditions = (new TargetingConditions()).range(this.getFollowDistance()).selector((var1x) -> {
+         this.startAggroTargetConditions = TargetingConditions.forCombat().range(this.getFollowDistance()).selector((var1x) -> {
             return var1.isLookingAtMe((Player)var1x);
          });
       }
 
       public boolean canUse() {
