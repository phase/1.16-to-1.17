--- net/minecraft/world/entity/monster/ZombifiedPiglin.java
+++ net/minecraft/world/entity/monster/ZombifiedPiglin.java
@@ -6,15 +6,16 @@
 import net.minecraft.core.BlockPos;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
-import net.minecraft.util.IntRange;
 import net.minecraft.util.TimeUtil;
+import net.minecraft.util.valueproviders.UniformInt;
 import net.minecraft.world.Difficulty;
 import net.minecraft.world.DifficultyInstance;
 import net.minecraft.world.damagesource.DamageSource;
+import net.minecraft.world.entity.EntitySelector;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.EquipmentSlot;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.NeutralMob;
@@ -38,16 +39,17 @@
 import net.minecraft.world.phys.AABB;
 
 public class ZombifiedPiglin extends Zombie implements NeutralMob {
    private static final UUID SPEED_MODIFIER_ATTACKING_UUID = UUID.fromString("49455A49-7EC5-45BA-B886-3B90B23A1718");
    private static final AttributeModifier SPEED_MODIFIER_ATTACKING;
-   private static final IntRange FIRST_ANGER_SOUND_DELAY;
+   private static final UniformInt FIRST_ANGER_SOUND_DELAY;
    private int playFirstAngerSoundIn;
-   private static final IntRange PERSISTENT_ANGER_TIME;
+   private static final UniformInt PERSISTENT_ANGER_TIME;
    private int remainingPersistentAngerTime;
    private UUID persistentAngerTarget;
-   private static final IntRange ALERT_INTERVAL;
+   private static final int ALERT_RANGE_Y = 10;
+   private static final UniformInt ALERT_INTERVAL;
    private int ticksUntilNextAlert;
 
    public ZombifiedPiglin(EntityType<? extends ZombifiedPiglin> var1, Level var2) {
       super(var1, var2);
       this.setPathfindingMalus(BlockPathTypes.LAVA, 8.0F);
@@ -113,22 +115,22 @@
 
    private void maybeAlertOthers() {
       if (this.ticksUntilNextAlert > 0) {
          --this.ticksUntilNextAlert;
       } else {
-         if (this.getSensing().canSee(this.getTarget())) {
+         if (this.getSensing().hasLineOfSight(this.getTarget())) {
             this.alertOthers();
          }
 
-         this.ticksUntilNextAlert = ALERT_INTERVAL.randomValue(this.random);
+         this.ticksUntilNextAlert = ALERT_INTERVAL.sample(this.random);
       }
    }
 
    private void alertOthers() {
       double var1 = this.getAttributeValue(Attributes.FOLLOW_RANGE);
       AABB var3 = AABB.unitCubeFromLowerCorner(this.position()).inflate(var1, 10.0D, var1);
-      this.level.getLoadedEntitiesOfClass(ZombifiedPiglin.class, var3).stream().filter((var1x) -> {
+      this.level.getEntitiesOfClass(ZombifiedPiglin.class, var3, EntitySelector.NO_SPECTATORS).stream().filter((var1x) -> {
          return var1x != this;
       }).filter((var0) -> {
          return var0.getTarget() == null;
       }).filter((var1x) -> {
          return !var1x.isAlliedTo(this.getTarget());
@@ -141,27 +143,27 @@
       this.playSound(SoundEvents.ZOMBIFIED_PIGLIN_ANGRY, this.getSoundVolume() * 2.0F, this.getVoicePitch() * 1.8F);
    }
 
    public void setTarget(@Nullable LivingEntity var1) {
       if (this.getTarget() == null && var1 != null) {
-         this.playFirstAngerSoundIn = FIRST_ANGER_SOUND_DELAY.randomValue(this.random);
-         this.ticksUntilNextAlert = ALERT_INTERVAL.randomValue(this.random);
+         this.playFirstAngerSoundIn = FIRST_ANGER_SOUND_DELAY.sample(this.random);
+         this.ticksUntilNextAlert = ALERT_INTERVAL.sample(this.random);
       }
 
       if (var1 instanceof Player) {
          this.setLastHurtByPlayer((Player)var1);
       }
 
       super.setTarget(var1);
    }
 
    public void startPersistentAngerTimer() {
-      this.setRemainingPersistentAngerTime(PERSISTENT_ANGER_TIME.randomValue(this.random));
+      this.setRemainingPersistentAngerTime(PERSISTENT_ANGER_TIME.sample(this.random));
    }
 
    public static boolean checkZombifiedPiglinSpawnRules(EntityType<ZombifiedPiglin> var0, LevelAccessor var1, MobSpawnType var2, BlockPos var3, Random var4) {
-      return var1.getDifficulty() != Difficulty.PEACEFUL && var1.getBlockState(var3.below()).getBlock() != Blocks.NETHER_WART_BLOCK;
+      return var1.getDifficulty() != Difficulty.PEACEFUL && !var1.getBlockState(var3.below()).is(Blocks.NETHER_WART_BLOCK);
    }
 
    public boolean checkSpawnObstruction(LevelReader var1) {
       return var1.isUnobstructed(this) && !var1.containsAnyLiquid(this.getBoundingBox());
    }
@@ -171,25 +173,21 @@
       this.addPersistentAngerSaveData(var1);
    }
 
    public void readAdditionalSaveData(CompoundTag var1) {
       super.readAdditionalSaveData(var1);
-      this.readPersistentAngerSaveData((ServerLevel)this.level, var1);
+      this.readPersistentAngerSaveData(this.level, var1);
    }
 
    public void setRemainingPersistentAngerTime(int var1) {
       this.remainingPersistentAngerTime = var1;
    }
 
    public int getRemainingPersistentAngerTime() {
       return this.remainingPersistentAngerTime;
    }
 
-   public boolean hurt(DamageSource var1, float var2) {
-      return this.isInvulnerableTo(var1) ? false : super.hurt(var1, var2);
-   }
-
    protected SoundEvent getAmbientSound() {
       return this.isAngry() ? SoundEvents.ZOMBIFIED_PIGLIN_ANGRY : SoundEvents.ZOMBIFIED_PIGLIN_AMBIENT;
    }
 
    protected SoundEvent getHurtSound(DamageSource var1) {
