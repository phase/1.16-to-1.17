--- net/minecraft/world/entity/monster/Guardian.java
+++ net/minecraft/world/entity/monster/Guardian.java
@@ -34,18 +34,20 @@
 import net.minecraft.world.entity.ai.goal.RandomStrollGoal;
 import net.minecraft.world.entity.ai.goal.target.NearestAttackableTargetGoal;
 import net.minecraft.world.entity.ai.navigation.PathNavigation;
 import net.minecraft.world.entity.ai.navigation.WaterBoundPathNavigation;
 import net.minecraft.world.entity.animal.Squid;
+import net.minecraft.world.entity.animal.axolotl.Axolotl;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.pathfinder.BlockPathTypes;
 import net.minecraft.world.phys.Vec3;
 
 public class Guardian extends Monster {
+   protected static final int ATTACK_TIME = 80;
    private static final EntityDataAccessor<Boolean> DATA_ID_MOVING;
    private static final EntityDataAccessor<Integer> DATA_ID_ATTACK_TARGET;
    private float clientSideTailAnimation;
    private float clientSideTailAnimationO;
    private float clientSideTailAnimationSpeed;
@@ -103,19 +105,19 @@
 
    public boolean isMoving() {
       return (Boolean)this.entityData.get(DATA_ID_MOVING);
    }
 
-   private void setMoving(boolean var1) {
+   void setMoving(boolean var1) {
       this.entityData.set(DATA_ID_MOVING, var1);
    }
 
    public int getAttackDuration() {
       return 80;
    }
 
-   private void setActiveAttackTarget(int var1) {
+   void setActiveAttackTarget(int var1) {
       this.entityData.set(DATA_ID_ATTACK_TARGET, var1);
    }
 
    public boolean hasActiveAttackTarget() {
       return (Integer)this.entityData.get(DATA_ID_ATTACK_TARGET) != 0;
@@ -165,12 +167,12 @@
 
    protected SoundEvent getDeathSound() {
       return this.isInWaterOrBubble() ? SoundEvents.GUARDIAN_DEATH : SoundEvents.GUARDIAN_DEATH_LAND;
    }
 
-   protected boolean isMovementNoisy() {
-      return false;
+   protected Entity.MovementEmission getMovementEmission() {
+      return Entity.MovementEmission.EVENTS;
    }
 
    protected float getStandingEyeHeight(Pose var1, EntityDimensions var2) {
       return var2.height * 0.5F;
    }
@@ -249,17 +251,17 @@
 
          if (this.isInWaterOrBubble()) {
             this.setAirSupply(300);
          } else if (this.onGround) {
             this.setDeltaMovement(this.getDeltaMovement().add((double)((this.random.nextFloat() * 2.0F - 1.0F) * 0.4F), 0.5D, (double)((this.random.nextFloat() * 2.0F - 1.0F) * 0.4F)));
-            this.yRot = this.random.nextFloat() * 360.0F;
+            this.setYRot(this.random.nextFloat() * 360.0F);
             this.onGround = false;
             this.hasImpulse = true;
          }
 
          if (this.hasActiveAttackTarget()) {
-            this.yRot = this.yHeadRot;
+            this.setYRot(this.yHeadRot);
          }
       }
 
       super.aiStep();
    }
@@ -340,18 +342,18 @@
             double var2 = var1.length();
             double var4 = var1.x / var2;
             double var6 = var1.y / var2;
             double var8 = var1.z / var2;
             float var10 = (float)(Mth.atan2(var1.z, var1.x) * 57.2957763671875D) - 90.0F;
-            this.guardian.yRot = this.rotlerp(this.guardian.yRot, var10, 90.0F);
-            this.guardian.yBodyRot = this.guardian.yRot;
+            this.guardian.setYRot(this.rotlerp(this.guardian.getYRot(), var10, 90.0F));
+            this.guardian.yBodyRot = this.guardian.getYRot();
             float var11 = (float)(this.speedModifier * this.guardian.getAttributeValue(Attributes.MOVEMENT_SPEED));
             float var12 = Mth.lerp(0.125F, this.guardian.getSpeed(), var11);
             this.guardian.setSpeed(var12);
             double var13 = Math.sin((double)(this.guardian.tickCount + this.guardian.getId()) * 0.5D) * 0.05D;
-            double var15 = Math.cos((double)(this.guardian.yRot * 0.017453292F));
-            double var17 = Math.sin((double)(this.guardian.yRot * 0.017453292F));
+            double var15 = Math.cos((double)(this.guardian.getYRot() * 0.017453292F));
+            double var17 = Math.sin((double)(this.guardian.getYRot() * 0.017453292F));
             double var19 = Math.sin((double)(this.guardian.tickCount + this.guardian.getId()) * 0.75D) * 0.05D;
             this.guardian.setDeltaMovement(this.guardian.getDeltaMovement().add(var13 * var15, var19 * (var17 + var15) * 0.25D + (double)var12 * var6 * 0.1D, var13 * var17));
             LookControl var21 = this.guardian.getLookControl();
             double var22 = this.guardian.getX() + var4 * 2.0D;
             double var24 = this.guardian.getEyeY() + var6 / var2;
@@ -372,11 +374,11 @@
             this.guardian.setMoving(false);
          }
       }
    }
 
-   static class GuardianAttackGoal extends Goal {
+   private static class GuardianAttackGoal extends Goal {
       private final Guardian guardian;
       private int attackTime;
       private final boolean elder;
 
       public GuardianAttackGoal(Guardian var1) {
@@ -409,11 +411,11 @@
 
       public void tick() {
          LivingEntity var1 = this.guardian.getTarget();
          this.guardian.getNavigation().stop();
          this.guardian.getLookControl().setLookAt(var1, 90.0F, 90.0F);
-         if (!this.guardian.canSee(var1)) {
+         if (!this.guardian.hasLineOfSight(var1)) {
             this.guardian.setTarget((LivingEntity)null);
          } else {
             ++this.attackTime;
             if (this.attackTime == 0) {
                this.guardian.setActiveAttackTarget(this.guardian.getTarget().getId());
@@ -438,17 +440,17 @@
             super.tick();
          }
       }
    }
 
-   static class GuardianAttackSelector implements Predicate<LivingEntity> {
+   private static class GuardianAttackSelector implements Predicate<LivingEntity> {
       private final Guardian guardian;
 
       public GuardianAttackSelector(Guardian var1) {
          this.guardian = var1;
       }
 
       public boolean test(@Nullable LivingEntity var1) {
-         return (var1 instanceof Player || var1 instanceof Squid) && var1.distanceToSqr(this.guardian) > 9.0D;
+         return (var1 instanceof Player || var1 instanceof Squid || var1 instanceof Axolotl) && var1.distanceToSqr(this.guardian) > 9.0D;
       }
    }
 }
