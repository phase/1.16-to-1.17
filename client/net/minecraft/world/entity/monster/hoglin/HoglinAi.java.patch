--- net/minecraft/world/entity/monster/hoglin/HoglinAi.java
+++ net/minecraft/world/entity/monster/hoglin/HoglinAi.java
@@ -2,18 +2,18 @@
 
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSet;
 import com.mojang.datafixers.util.Pair;
 import java.util.List;
+import java.util.Objects;
 import java.util.Optional;
 import net.minecraft.core.BlockPos;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
-import net.minecraft.util.IntRange;
 import net.minecraft.util.TimeUtil;
-import net.minecraft.world.entity.AgableMob;
-import net.minecraft.world.entity.EntitySelector;
+import net.minecraft.util.valueproviders.UniformInt;
+import net.minecraft.world.entity.AgeableMob;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.ai.Brain;
 import net.minecraft.world.entity.ai.behavior.AnimalMakeLove;
 import net.minecraft.world.entity.ai.behavior.BabyFollowAdult;
@@ -33,16 +33,33 @@
 import net.minecraft.world.entity.ai.behavior.SetWalkTargetFromAttackTargetIfTargetOutOfReach;
 import net.minecraft.world.entity.ai.behavior.SetWalkTargetFromLookTarget;
 import net.minecraft.world.entity.ai.behavior.StartAttacking;
 import net.minecraft.world.entity.ai.behavior.StopAttackingIfTargetInvalid;
 import net.minecraft.world.entity.ai.memory.MemoryModuleType;
+import net.minecraft.world.entity.ai.sensing.Sensor;
 import net.minecraft.world.entity.schedule.Activity;
 
 public class HoglinAi {
-   private static final IntRange RETREAT_DURATION = TimeUtil.rangeOfSeconds(5, 20);
-   private static final IntRange ADULT_FOLLOW_RANGE = IntRange.of(5, 16);
+   public static final int REPELLENT_DETECTION_RANGE_HORIZONTAL = 8;
+   public static final int REPELLENT_DETECTION_RANGE_VERTICAL = 4;
+   private static final UniformInt RETREAT_DURATION = TimeUtil.rangeOfSeconds(5, 20);
+   private static final int ATTACK_DURATION = 200;
+   private static final int DESIRED_DISTANCE_FROM_PIGLIN_WHEN_IDLING = 8;
+   private static final int DESIRED_DISTANCE_FROM_PIGLIN_WHEN_RETREATING = 15;
+   private static final int ATTACK_INTERVAL = 40;
+   private static final int BABY_ATTACK_INTERVAL = 15;
+   private static final int REPELLENT_PACIFY_TIME = 200;
+   private static final UniformInt ADULT_FOLLOW_RANGE = UniformInt.of(5, 16);
+   private static final float SPEED_MULTIPLIER_WHEN_AVOIDING_REPELLENT = 1.0F;
+   private static final float SPEED_MULTIPLIER_WHEN_RETREATING = 1.3F;
+   private static final float SPEED_MULTIPLIER_WHEN_MAKING_LOVE = 0.6F;
+   private static final float SPEED_MULTIPLIER_WHEN_IDLING = 0.4F;
+   private static final float SPEED_MULTIPLIER_WHEN_FOLLOWING_ADULT = 0.6F;
 
+   public HoglinAi() {
+   }
+
    protected static Brain<?> makeBrain(Brain<Hoglin> var0) {
       initCoreActivity(var0);
       initIdleActivity(var0);
       initFightActivity(var0);
       initRetreatActivity(var0);
@@ -55,19 +72,19 @@
    private static void initCoreActivity(Brain<Hoglin> var0) {
       var0.addActivity(Activity.CORE, 0, ImmutableList.of(new LookAtTargetSink(45, 90), new MoveToTargetSink()));
    }
 
    private static void initIdleActivity(Brain<Hoglin> var0) {
-      var0.addActivity(Activity.IDLE, 10, ImmutableList.of(new BecomePassiveIfMemoryPresent(MemoryModuleType.NEAREST_REPELLENT, 200), new AnimalMakeLove(EntityType.HOGLIN, 0.6F), SetWalkTargetAwayFrom.pos(MemoryModuleType.NEAREST_REPELLENT, 1.0F, 8, true), new StartAttacking(HoglinAi::findNearestValidAttackTarget), new RunIf(Hoglin::isAdult, SetWalkTargetAwayFrom.entity(MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLIN, 0.4F, 8, false)), new RunSometimes(new SetEntityLookTarget(8.0F), IntRange.of(30, 60)), new BabyFollowAdult(ADULT_FOLLOW_RANGE, 0.6F), createIdleMovementBehaviors()));
+      var0.addActivity(Activity.IDLE, 10, ImmutableList.of(new BecomePassiveIfMemoryPresent(MemoryModuleType.NEAREST_REPELLENT, 200), new AnimalMakeLove(EntityType.HOGLIN, 0.6F), SetWalkTargetAwayFrom.pos(MemoryModuleType.NEAREST_REPELLENT, 1.0F, 8, true), new StartAttacking(HoglinAi::findNearestValidAttackTarget), new RunIf(Hoglin::isAdult, SetWalkTargetAwayFrom.entity(MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLIN, 0.4F, 8, false)), new RunSometimes(new SetEntityLookTarget(8.0F), UniformInt.of(30, 60)), new BabyFollowAdult(ADULT_FOLLOW_RANGE, 0.6F), createIdleMovementBehaviors()));
    }
 
    private static void initFightActivity(Brain<Hoglin> var0) {
-      var0.addActivityAndRemoveMemoryWhenStopped(Activity.FIGHT, 10, ImmutableList.of(new BecomePassiveIfMemoryPresent(MemoryModuleType.NEAREST_REPELLENT, 200), new AnimalMakeLove(EntityType.HOGLIN, 0.6F), new SetWalkTargetFromAttackTargetIfTargetOutOfReach(1.0F), new RunIf(Hoglin::isAdult, new MeleeAttack(40)), new RunIf(AgableMob::isBaby, new MeleeAttack(15)), new StopAttackingIfTargetInvalid(), new EraseMemoryIf(HoglinAi::isBreeding, MemoryModuleType.ATTACK_TARGET)), MemoryModuleType.ATTACK_TARGET);
+      var0.addActivityAndRemoveMemoryWhenStopped(Activity.FIGHT, 10, ImmutableList.of(new BecomePassiveIfMemoryPresent(MemoryModuleType.NEAREST_REPELLENT, 200), new AnimalMakeLove(EntityType.HOGLIN, 0.6F), new SetWalkTargetFromAttackTargetIfTargetOutOfReach(1.0F), new RunIf(Hoglin::isAdult, new MeleeAttack(40)), new RunIf(AgeableMob::isBaby, new MeleeAttack(15)), new StopAttackingIfTargetInvalid(), new EraseMemoryIf(HoglinAi::isBreeding, MemoryModuleType.ATTACK_TARGET)), MemoryModuleType.ATTACK_TARGET);
    }
 
    private static void initRetreatActivity(Brain<Hoglin> var0) {
-      var0.addActivityAndRemoveMemoryWhenStopped(Activity.AVOID, 10, ImmutableList.of(SetWalkTargetAwayFrom.entity(MemoryModuleType.AVOID_TARGET, 1.3F, 15, false), createIdleMovementBehaviors(), new RunSometimes(new SetEntityLookTarget(8.0F), IntRange.of(30, 60)), new EraseMemoryIf(HoglinAi::wantsToStopFleeing, MemoryModuleType.AVOID_TARGET)), MemoryModuleType.AVOID_TARGET);
+      var0.addActivityAndRemoveMemoryWhenStopped(Activity.AVOID, 10, ImmutableList.of(SetWalkTargetAwayFrom.entity(MemoryModuleType.AVOID_TARGET, 1.3F, 15, false), createIdleMovementBehaviors(), new RunSometimes(new SetEntityLookTarget(8.0F), UniformInt.of(30, 60)), new EraseMemoryIf(HoglinAi::wantsToStopFleeing, MemoryModuleType.AVOID_TARGET)), MemoryModuleType.AVOID_TARGET);
    }
 
    private static RunOne<Hoglin> createIdleMovementBehaviors() {
       return new RunOne(ImmutableList.of(Pair.of(new RandomStroll(0.4F), 2), Pair.of(new SetWalkTargetFromLookTarget(0.4F, 3), 2), Pair.of(new DoNothing(30, 60), 1)));
    }
@@ -76,11 +93,13 @@
       Brain var1 = var0.getBrain();
       Activity var2 = (Activity)var1.getActiveNonCoreActivity().orElse((Object)null);
       var1.setActiveActivityToFirstValid(ImmutableList.of(Activity.FIGHT, Activity.AVOID, Activity.IDLE));
       Activity var3 = (Activity)var1.getActiveNonCoreActivity().orElse((Object)null);
       if (var2 != var3) {
-         getSoundForCurrentActivity(var0).ifPresent(var0::playSound);
+         Optional var10000 = getSoundForCurrentActivity(var0);
+         Objects.requireNonNull(var0);
+         var10000.ifPresent(var0::playSound);
       }
 
       var0.setAggressive(var1.hasMemoryValue(MemoryModuleType.ATTACK_TARGET));
    }
 
@@ -109,15 +128,15 @@
    }
 
    private static void setAvoidTarget(Hoglin var0, LivingEntity var1) {
       var0.getBrain().eraseMemory(MemoryModuleType.ATTACK_TARGET);
       var0.getBrain().eraseMemory(MemoryModuleType.WALK_TARGET);
-      var0.getBrain().setMemoryWithExpiry(MemoryModuleType.AVOID_TARGET, var1, (long)RETREAT_DURATION.randomValue(var0.level.random));
+      var0.getBrain().setMemoryWithExpiry(MemoryModuleType.AVOID_TARGET, var1, (long)RETREAT_DURATION.sample(var0.level.random));
    }
 
    private static Optional<? extends LivingEntity> findNearestValidAttackTarget(Hoglin var0) {
-      return !isPacified(var0) && !isBreeding(var0) ? var0.getBrain().getMemory(MemoryModuleType.NEAREST_VISIBLE_TARGETABLE_PLAYER) : Optional.empty();
+      return !isPacified(var0) && !isBreeding(var0) ? var0.getBrain().getMemory(MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER) : Optional.empty();
    }
 
    static boolean isPosNearNearestRepellent(Hoglin var0, BlockPos var1) {
       Optional var2 = var0.getBrain().getMemory(MemoryModuleType.NEAREST_REPELLENT);
       return var2.isPresent() && ((BlockPos)var2.get()).closerThan(var1, 8.0D);
@@ -148,11 +167,11 @@
       }
    }
 
    private static void maybeRetaliate(Hoglin var0, LivingEntity var1) {
       if (!var0.getBrain().isActive(Activity.AVOID) || var1.getType() != EntityType.PIGLIN) {
-         if (EntitySelector.ATTACK_ALLOWED.test(var1)) {
+         if (Sensor.isEntityAttackable(var0, var1)) {
             if (var1.getType() != EntityType.HOGLIN) {
                if (!BehaviorUtils.isOtherTargetMuchFurtherAwayThanCurrentAttackTarget(var0, var1, 4.0D)) {
                   setAttackTarget(var0, var1);
                   broadcastAttackTarget(var0, var1);
                }
