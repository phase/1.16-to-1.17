--- net/minecraft/world/entity/monster/Illusioner.java
+++ net/minecraft/world/entity/monster/Illusioner.java
@@ -3,11 +3,10 @@
 import javax.annotation.Nullable;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
-import net.minecraft.util.Mth;
 import net.minecraft.world.Difficulty;
 import net.minecraft.world.DifficultyInstance;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.effect.MobEffectInstance;
 import net.minecraft.world.effect.MobEffects;
@@ -39,10 +38,13 @@
 import net.minecraft.world.level.ServerLevelAccessor;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
 
 public class Illusioner extends SpellcasterIllager implements RangedAttackMob {
+   private static final int NUM_ILLUSIONS = 4;
+   private static final int ILLUSION_TRANSITION_TICKS = 3;
+   private static final int ILLUSION_SPREAD = 3;
    private int clientSideIllusionTicks;
    private final Vec3[][] clientSideIllusionOffsets;
 
    public Illusioner(EntityType<? extends Illusioner> var1, Level var2) {
       super(var1, var2);
@@ -180,11 +182,11 @@
       ItemStack var3 = this.getProjectile(this.getItemInHand(ProjectileUtil.getWeaponHoldingHand(this, Items.BOW)));
       AbstractArrow var4 = ProjectileUtil.getMobArrow(this, var3, var2);
       double var5 = var1.getX() - this.getX();
       double var7 = var1.getY(0.3333333333333333D) - var4.getY();
       double var9 = var1.getZ() - this.getZ();
-      double var11 = (double)Mth.sqrt(var5 * var5 + var9 * var9);
+      double var11 = Math.sqrt(var5 * var5 + var9 * var9);
       var4.shoot(var5, var7 + var11 * 0.20000000298023224D, var9, 1.6F, (float)(14 - this.level.getDifficulty().getId() * 4));
       this.playSound(SoundEvents.SKELETON_SHOOT, 1.0F, 1.0F / (this.getRandom().nextFloat() * 0.4F + 0.8F));
       this.level.addFreshEntity(var4);
    }
 
@@ -194,85 +196,85 @@
       } else {
          return this.isAggressive() ? AbstractIllager.IllagerArmPose.BOW_AND_ARROW : AbstractIllager.IllagerArmPose.CROSSED;
       }
    }
 
-   class IllusionerBlindnessSpellGoal extends SpellcasterIllager.SpellcasterUseSpellGoal {
-      private int lastTargetId;
-
-      private IllusionerBlindnessSpellGoal() {
+   private class IllusionerMirrorSpellGoal extends SpellcasterIllager.SpellcasterUseSpellGoal {
+      IllusionerMirrorSpellGoal() {
          super();
       }
 
       public boolean canUse() {
          if (!super.canUse()) {
             return false;
-         } else if (Illusioner.this.getTarget() == null) {
-            return false;
-         } else if (Illusioner.this.getTarget().getId() == this.lastTargetId) {
-            return false;
          } else {
-            return Illusioner.this.level.getCurrentDifficultyAt(Illusioner.this.blockPosition()).isHarderThan((float)Difficulty.NORMAL.ordinal());
+            return !Illusioner.this.hasEffect(MobEffects.INVISIBILITY);
          }
       }
 
-      public void start() {
-         super.start();
-         this.lastTargetId = Illusioner.this.getTarget().getId();
-      }
-
       protected int getCastingTime() {
          return 20;
       }
 
       protected int getCastingInterval() {
-         return 180;
+         return 340;
       }
 
       protected void performSpellCasting() {
-         Illusioner.this.getTarget().addEffect(new MobEffectInstance(MobEffects.BLINDNESS, 400));
+         Illusioner.this.addEffect(new MobEffectInstance(MobEffects.INVISIBILITY, 1200));
       }
 
+      @Nullable
       protected SoundEvent getSpellPrepareSound() {
-         return SoundEvents.ILLUSIONER_PREPARE_BLINDNESS;
+         return SoundEvents.ILLUSIONER_PREPARE_MIRROR;
       }
 
       protected SpellcasterIllager.IllagerSpell getSpell() {
-         return SpellcasterIllager.IllagerSpell.BLINDNESS;
+         return SpellcasterIllager.IllagerSpell.DISAPPEAR;
       }
    }
 
-   class IllusionerMirrorSpellGoal extends SpellcasterIllager.SpellcasterUseSpellGoal {
-      private IllusionerMirrorSpellGoal() {
+   private class IllusionerBlindnessSpellGoal extends SpellcasterIllager.SpellcasterUseSpellGoal {
+      private int lastTargetId;
+
+      IllusionerBlindnessSpellGoal() {
          super();
       }
 
       public boolean canUse() {
          if (!super.canUse()) {
             return false;
+         } else if (Illusioner.this.getTarget() == null) {
+            return false;
+         } else if (Illusioner.this.getTarget().getId() == this.lastTargetId) {
+            return false;
          } else {
-            return !Illusioner.this.hasEffect(MobEffects.INVISIBILITY);
+            return Illusioner.this.level.getCurrentDifficultyAt(Illusioner.this.blockPosition()).isHarderThan((float)Difficulty.NORMAL.ordinal());
          }
       }
 
+      public void start() {
+         super.start();
+         this.lastTargetId = Illusioner.this.getTarget().getId();
+      }
+
       protected int getCastingTime() {
          return 20;
       }
 
       protected int getCastingInterval() {
-         return 340;
+         return 180;
       }
 
       protected void performSpellCasting() {
-         Illusioner.this.addEffect(new MobEffectInstance(MobEffects.INVISIBILITY, 1200));
+         Illusioner.this.getTarget().addEffect(new MobEffectInstance(MobEffects.BLINDNESS, 400), Illusioner.this);
       }
 
-      @Nullable
       protected SoundEvent getSpellPrepareSound() {
-         return SoundEvents.ILLUSIONER_PREPARE_MIRROR;
+         return SoundEvents.ILLUSIONER_PREPARE_BLINDNESS;
       }
 
       protected SpellcasterIllager.IllagerSpell getSpell() {
-         return SpellcasterIllager.IllagerSpell.DISAPPEAR;
+         return SpellcasterIllager.IllagerSpell.BLINDNESS;
       }
    }
 }
