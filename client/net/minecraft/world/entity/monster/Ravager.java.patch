--- net/minecraft/world/entity/monster/Ravager.java
+++ net/minecraft/world/entity/monster/Ravager.java
@@ -37,20 +37,29 @@
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.LeavesBlock;
 import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.pathfinder.BlockPathTypes;
 import net.minecraft.world.level.pathfinder.PathFinder;
 import net.minecraft.world.level.pathfinder.WalkNodeEvaluator;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
 
 public class Ravager extends Raider {
    private static final Predicate<Entity> NO_RAVAGER_AND_ALIVE = (var0) -> {
       return var0.isAlive() && !(var0 instanceof Ravager);
    };
+   private static final double BASE_MOVEMENT_SPEED = 0.3D;
+   private static final double ATTACK_MOVEMENT_SPEED = 0.35D;
+   private static final int STUNNED_COLOR = 8356754;
+   private static final double STUNNED_COLOR_BLUE = 0.5725490196078431D;
+   private static final double STUNNED_COLOR_GREEN = 0.5137254901960784D;
+   private static final double STUNNED_COLOR_RED = 0.4980392156862745D;
+   private static final int ATTACK_DURATION = 10;
+   public static final int STUN_DURATION = 40;
    private int attackTick;
    private int stunnedTick;
    private int roarTick;
 
    public Ravager(EntityType<? extends Ravager> var1, Level var2) {
@@ -119,11 +128,11 @@
       return !this.isNoAi() && this.getControllingPassenger() instanceof LivingEntity;
    }
 
    @Nullable
    public Entity getControllingPassenger() {
-      return this.getPassengers().isEmpty() ? null : (Entity)this.getPassengers().get(0);
+      return this.getFirstPassenger();
    }
 
    public void aiStep() {
       super.aiStep();
       if (this.isAlive()) {
@@ -196,12 +205,12 @@
 
    protected boolean isImmobile() {
       return super.isImmobile() || this.attackTick > 0 || this.stunnedTick > 0 || this.roarTick > 0;
    }
 
-   public boolean canSee(Entity var1) {
-      return this.stunnedTick <= 0 && this.roarTick <= 0 ? super.canSee(var1) : false;
+   public boolean hasLineOfSight(Entity var1) {
+      return this.stunnedTick <= 0 && this.roarTick <= 0 ? super.hasLineOfSight(var1) : false;
    }
 
    protected void blockedByShield(LivingEntity var1) {
       if (this.roarTick == 0) {
          if (this.random.nextDouble() < 0.5D) {
@@ -220,13 +229,13 @@
 
    private void roar() {
       if (this.isAlive()) {
          List var1 = this.level.getEntitiesOfClass(LivingEntity.class, this.getBoundingBox().inflate(4.0D), NO_RAVAGER_AND_ALIVE);
 
-         Entity var3;
+         LivingEntity var3;
          for(Iterator var2 = var1.iterator(); var2.hasNext(); this.strongKnockback(var3)) {
-            var3 = (Entity)var2.next();
+            var3 = (LivingEntity)var2.next();
             if (!(var3 instanceof AbstractIllager)) {
                var3.hurt(DamageSource.mobAttack(this), 6.0F);
             }
          }
 
@@ -236,10 +245,12 @@
             double var4 = this.random.nextGaussian() * 0.2D;
             double var6 = this.random.nextGaussian() * 0.2D;
             double var8 = this.random.nextGaussian() * 0.2D;
             this.level.addParticle(ParticleTypes.POOF, var10.x, var10.y, var10.z, var4, var6, var8);
          }
+
+         this.level.gameEvent(this, GameEvent.RAVAGER_ROAR, this.eyeBlockPosition());
       }
 
    }
 
    private void strongKnockback(Entity var1) {
@@ -305,36 +316,36 @@
 
    public boolean canBeLeader() {
       return false;
    }
 
-   static class RavagerNodeEvaluator extends WalkNodeEvaluator {
-      private RavagerNodeEvaluator() {
+   private class RavagerMeleeAttackGoal extends MeleeAttackGoal {
+      public RavagerMeleeAttackGoal() {
+         super(Ravager.this, 1.0D, true);
       }
 
-      protected BlockPathTypes evaluateBlockPathType(BlockGetter var1, boolean var2, boolean var3, BlockPos var4, BlockPathTypes var5) {
-         return var5 == BlockPathTypes.LEAVES ? BlockPathTypes.OPEN : super.evaluateBlockPathType(var1, var2, var3, var4, var5);
+      protected double getAttackReachSqr(LivingEntity var1) {
+         float var2 = Ravager.this.getBbWidth() - 0.1F;
+         return (double)(var2 * 2.0F * var2 * 2.0F + var1.getBbWidth());
       }
    }
 
-   static class RavagerNavigation extends GroundPathNavigation {
+   private static class RavagerNavigation extends GroundPathNavigation {
       public RavagerNavigation(Mob var1, Level var2) {
          super(var1, var2);
       }
 
       protected PathFinder createPathFinder(int var1) {
          this.nodeEvaluator = new Ravager.RavagerNodeEvaluator();
          return new PathFinder(this.nodeEvaluator, var1);
       }
    }
 
-   class RavagerMeleeAttackGoal extends MeleeAttackGoal {
-      public RavagerMeleeAttackGoal() {
-         super(Ravager.this, 1.0D, true);
+   private static class RavagerNodeEvaluator extends WalkNodeEvaluator {
+      RavagerNodeEvaluator() {
       }
 
-      protected double getAttackReachSqr(LivingEntity var1) {
-         float var2 = Ravager.this.getBbWidth() - 0.1F;
-         return (double)(var2 * 2.0F * var2 * 2.0F + var1.getBbWidth());
+      protected BlockPathTypes evaluateBlockPathType(BlockGetter var1, boolean var2, boolean var3, BlockPos var4, BlockPathTypes var5) {
+         return var5 == BlockPathTypes.LEAVES ? BlockPathTypes.OPEN : super.evaluateBlockPathType(var1, var2, var3, var4, var5);
       }
    }
 }
