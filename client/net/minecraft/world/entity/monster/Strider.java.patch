--- net/minecraft/world/entity/monster/Strider.java
+++ net/minecraft/world/entity/monster/Strider.java
@@ -21,11 +21,11 @@
 import net.minecraft.util.Mth;
 import net.minecraft.world.DifficultyInstance;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.damagesource.DamageSource;
-import net.minecraft.world.entity.AgableMob;
+import net.minecraft.world.entity.AgeableMob;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.EquipmentSlot;
 import net.minecraft.world.entity.ItemBasedSteering;
 import net.minecraft.world.entity.ItemSteerable;
@@ -68,10 +68,13 @@
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.phys.shapes.CollisionContext;
 
 public class Strider extends Animal implements ItemSteerable, Saddleable {
+   private static final float SUFFOCATE_STEERING_MODIFIER = 0.23F;
+   private static final float SUFFOCATE_SPEED_MODIFIER = 0.66F;
+   private static final float STEERING_MODIFIER = 0.55F;
    private static final Ingredient FOOD_ITEMS;
    private static final Ingredient TEMPT_ITEMS;
    private static final EntityDataAccessor<Integer> DATA_BOOST_TIME;
    private static final EntityDataAccessor<Boolean> DATA_SUFFOCATING;
    private static final EntityDataAccessor<Boolean> DATA_SADDLE_ID;
@@ -142,11 +145,11 @@
 
    protected void registerGoals() {
       this.panicGoal = new PanicGoal(this, 1.65D);
       this.goalSelector.addGoal(1, this.panicGoal);
       this.goalSelector.addGoal(2, new BreedGoal(this, 1.0D));
-      this.temptGoal = new TemptGoal(this, 1.4D, false, TEMPT_ITEMS);
+      this.temptGoal = new TemptGoal(this, 1.4D, TEMPT_ITEMS, false);
       this.goalSelector.addGoal(3, this.temptGoal);
       this.goalSelector.addGoal(4, new Strider.StriderGoToLavaGoal(this, 1.5D));
       this.goalSelector.addGoal(5, new FollowParentGoal(this, 1.1D));
       this.goalSelector.addGoal(7, new RandomStrollGoal(this, 1.0D, 60));
       this.goalSelector.addGoal(8, new LookAtPlayerGoal(this, Player.class, 8.0F));
@@ -176,21 +179,21 @@
       Entity var1 = this.getControllingPassenger();
       if (!(var1 instanceof Player)) {
          return false;
       } else {
          Player var2 = (Player)var1;
-         return var2.getMainHandItem().getItem() == Items.WARPED_FUNGUS_ON_A_STICK || var2.getOffhandItem().getItem() == Items.WARPED_FUNGUS_ON_A_STICK;
+         return var2.getMainHandItem().is(Items.WARPED_FUNGUS_ON_A_STICK) || var2.getOffhandItem().is(Items.WARPED_FUNGUS_ON_A_STICK);
       }
    }
 
    public boolean checkSpawnObstruction(LevelReader var1) {
       return var1.isUnobstructed(this);
    }
 
    @Nullable
    public Entity getControllingPassenger() {
-      return this.getPassengers().isEmpty() ? null : (Entity)this.getPassengers().get(0);
+      return this.getFirstPassenger();
    }
 
    public Vec3 getDismountLocationForPassenger(LivingEntity var1) {
       Vec3[] var2 = new Vec3[]{getCollisionHorizontalEscapeVector((double)this.getBbWidth(), (double)var1.getBbWidth(), var1.yRot), getCollisionHorizontalEscapeVector((double)this.getBbWidth(), (double)var1.getBbWidth(), var1.yRot - 22.5F), getCollisionHorizontalEscapeVector((double)this.getBbWidth(), (double)var1.getBbWidth(), var1.yRot + 22.5F), getCollisionHorizontalEscapeVector((double)this.getBbWidth(), (double)var1.getBbWidth(), var1.yRot - 45.0F), getCollisionHorizontalEscapeVector((double)this.getBbWidth(), (double)var1.getBbWidth(), var1.yRot + 45.0F)};
       LinkedHashSet var3 = Sets.newLinkedHashSet();
@@ -334,11 +337,11 @@
    protected SoundEvent getDeathSound() {
       return SoundEvents.STRIDER_DEATH;
    }
 
    protected boolean canAddPassenger(Entity var1) {
-      return this.getPassengers().isEmpty() && !this.isEyeInFluid(FluidTags.LAVA);
+      return !this.isVehicle() && !this.isEyeInFluid(FluidTags.LAVA);
    }
 
    public boolean isSensitiveToWater() {
       return true;
    }
@@ -357,11 +360,11 @@
       } else {
          return this.isInLava() ? Float.NEGATIVE_INFINITY : 0.0F;
       }
    }
 
-   public Strider getBreedOffspring(ServerLevel var1, AgableMob var2) {
+   public Strider getBreedOffspring(ServerLevel var1, AgeableMob var2) {
       return (Strider)EntityType.STRIDER.create(var1);
    }
 
    public boolean isFood(ItemStack var1) {
       return FOOD_ITEMS.test(var1);
@@ -385,11 +388,11 @@
          return InteractionResult.sidedSuccess(this.level.isClientSide);
       } else {
          InteractionResult var4 = super.mobInteract(var1, var2);
          if (!var4.consumesAction()) {
             ItemStack var5 = var1.getItemInHand(var2);
-            return var5.getItem() == Items.SADDLE ? var5.interactLivingEntity(var1, this, var2) : InteractionResult.PASS;
+            return var5.is(Items.SADDLE) ? var5.interactLivingEntity(var1, this, var2) : InteractionResult.PASS;
          } else {
             if (var3 && !this.isSilent()) {
                this.level.playSound((Player)null, this.getX(), this.getY(), this.getZ(), SoundEvents.STRIDER_EAT, this.getSoundSource(), 1.0F, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
             }
 
@@ -412,26 +415,26 @@
             Mob var6 = (Mob)EntityType.ZOMBIFIED_PIGLIN.create(var1.getLevel());
             var7 = this.spawnJockey(var1, var2, var6, new Zombie.ZombieGroupData(Zombie.getSpawnAsBabyOdds(this.random), false));
             var6.setItemSlot(EquipmentSlot.MAINHAND, new ItemStack(Items.WARPED_FUNGUS_ON_A_STICK));
             this.equipSaddle((SoundSource)null);
          } else if (this.random.nextInt(10) == 0) {
-            AgableMob var8 = (AgableMob)EntityType.STRIDER.create(var1.getLevel());
+            AgeableMob var8 = (AgeableMob)EntityType.STRIDER.create(var1.getLevel());
             var8.setAge(-24000);
             var7 = this.spawnJockey(var1, var2, var8, (SpawnGroupData)null);
          } else {
-            var7 = new AgableMob.AgableMobGroupData(0.5F);
+            var7 = new AgeableMob.AgeableMobGroupData(0.5F);
          }
 
          return super.finalizeSpawn(var1, var2, var3, (SpawnGroupData)var7, var5);
       }
    }
 
    private SpawnGroupData spawnJockey(ServerLevelAccessor var1, DifficultyInstance var2, Mob var3, @Nullable SpawnGroupData var4) {
       var3.moveTo(this.getX(), this.getY(), this.getZ(), this.yRot, 0.0F);
       var3.finalizeSpawn(var1, var2, MobSpawnType.JOCKEY, var4, (CompoundTag)null);
       var3.startRiding(this, true);
-      return new AgableMob.AgableMobGroupData(0.0F);
+      return new AgeableMob.AgeableMobGroupData(0.0F);
    }
 
    static {
       FOOD_ITEMS = Ingredient.of(Items.WARPED_FUNGUS);
       TEMPT_ITEMS = Ingredient.of(Items.WARPED_FUNGUS, Items.WARPED_FUNGUS_ON_A_STICK);
