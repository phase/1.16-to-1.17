--- net/minecraft/world/entity/monster/Shulker.java
+++ net/minecraft/world/entity/monster/Shulker.java
@@ -15,19 +15,22 @@
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.util.Mth;
 import net.minecraft.world.Difficulty;
-import net.minecraft.world.ShulkerSharedHelper;
+import net.minecraft.world.DifficultyInstance;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
+import net.minecraft.world.entity.EntitySelector;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
+import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.MoverType;
 import net.minecraft.world.entity.Pose;
+import net.minecraft.world.entity.SpawnGroupData;
 import net.minecraft.world.entity.ai.attributes.AttributeModifier;
 import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
 import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.ai.control.BodyRotationControl;
 import net.minecraft.world.entity.ai.goal.Goal;
@@ -39,27 +42,27 @@
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.entity.projectile.AbstractArrow;
 import net.minecraft.world.entity.projectile.ShulkerBullet;
 import net.minecraft.world.item.DyeColor;
 import net.minecraft.world.level.Level;
+import net.minecraft.world.level.ServerLevelAccessor;
 import net.minecraft.world.level.block.Blocks;
-import net.minecraft.world.level.block.piston.PistonBaseBlock;
-import net.minecraft.world.level.block.piston.PistonHeadBlock;
 import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.entity.EntityTypeTest;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
 
 public class Shulker extends AbstractGolem implements Enemy {
    private static final UUID COVERED_ARMOR_MODIFIER_UUID = UUID.fromString("7E0292F2-9434-48D5-A29F-9583AF7DF27F");
    private static final AttributeModifier COVERED_ARMOR_MODIFIER;
    protected static final EntityDataAccessor<Direction> DATA_ATTACH_FACE_ID;
-   protected static final EntityDataAccessor<Optional<BlockPos>> DATA_ATTACH_POS_ID;
    protected static final EntityDataAccessor<Byte> DATA_PEEK_ID;
    protected static final EntityDataAccessor<Byte> DATA_COLOR_ID;
    private float currentPeekAmountO;
    private float currentPeekAmount;
-   private BlockPos oldAttachPosition = null;
+   @Nullable
+   private BlockPos clientOldAttachPosition;
    private int clientSideTeleportInterpolation;
 
    public Shulker(EntityType<? extends Shulker> var1, Level var2) {
       super(var1, var2);
       this.xpReward = 5;
@@ -68,11 +71,11 @@
    protected void registerGoals() {
       this.goalSelector.addGoal(1, new LookAtPlayerGoal(this, Player.class, 8.0F));
       this.goalSelector.addGoal(4, new Shulker.ShulkerAttackGoal());
       this.goalSelector.addGoal(7, new Shulker.ShulkerPeekGoal());
       this.goalSelector.addGoal(8, new RandomLookAroundGoal(this));
-      this.targetSelector.addGoal(1, (new HurtByTargetGoal(this, new Class[0])).setAlertOthers());
+      this.targetSelector.addGoal(1, (new HurtByTargetGoal(this, new Class[]{this.getClass()})).setAlertOthers());
       this.targetSelector.addGoal(2, new Shulker.ShulkerNearestAttackGoal(this));
       this.targetSelector.addGoal(3, new Shulker.ShulkerDefenseAttackGoal(this));
    }
 
    protected boolean isMovementNoisy() {
@@ -103,11 +106,10 @@
    }
 
    protected void defineSynchedData() {
       super.defineSynchedData();
       this.entityData.define(DATA_ATTACH_FACE_ID, Direction.DOWN);
-      this.entityData.define(DATA_ATTACH_POS_ID, Optional.empty());
       this.entityData.define(DATA_PEEK_ID, (byte)0);
       this.entityData.define(DATA_COLOR_ID, (byte)16);
    }
 
    public static AttributeSupplier.Builder createAttributes() {
@@ -120,271 +122,317 @@
 
    public void readAdditionalSaveData(CompoundTag var1) {
       super.readAdditionalSaveData(var1);
       this.entityData.set(DATA_ATTACH_FACE_ID, Direction.from3DDataValue(var1.getByte("AttachFace")));
       this.entityData.set(DATA_PEEK_ID, var1.getByte("Peek"));
-      this.entityData.set(DATA_COLOR_ID, var1.getByte("Color"));
-      if (var1.contains("APX")) {
-         int var2 = var1.getInt("APX");
-         int var3 = var1.getInt("APY");
-         int var4 = var1.getInt("APZ");
-         this.entityData.set(DATA_ATTACH_POS_ID, Optional.of(new BlockPos(var2, var3, var4)));
-      } else {
-         this.entityData.set(DATA_ATTACH_POS_ID, Optional.empty());
+      if (var1.contains("Color", 99)) {
+         this.entityData.set(DATA_COLOR_ID, var1.getByte("Color"));
       }
 
    }
 
    public void addAdditionalSaveData(CompoundTag var1) {
       super.addAdditionalSaveData(var1);
       var1.putByte("AttachFace", (byte)((Direction)this.entityData.get(DATA_ATTACH_FACE_ID)).get3DDataValue());
       var1.putByte("Peek", (Byte)this.entityData.get(DATA_PEEK_ID));
       var1.putByte("Color", (Byte)this.entityData.get(DATA_COLOR_ID));
-      BlockPos var2 = this.getAttachPosition();
-      if (var2 != null) {
-         var1.putInt("APX", var2.getX());
-         var1.putInt("APY", var2.getY());
-         var1.putInt("APZ", var2.getZ());
-      }
-
    }
 
    public void tick() {
       super.tick();
-      BlockPos var1 = (BlockPos)((Optional)this.entityData.get(DATA_ATTACH_POS_ID)).orElse((Object)null);
-      if (var1 == null && !this.level.isClientSide) {
-         var1 = this.blockPosition();
-         this.entityData.set(DATA_ATTACH_POS_ID, Optional.of(var1));
+      if (!this.level.isClientSide && !this.isPassenger() && !this.canStayAt(this.blockPosition(), this.getAttachFace())) {
+         this.findNewAttachment();
       }
 
-      float var2;
-      if (this.isPassenger()) {
-         var1 = null;
-         var2 = this.getVehicle().yRot;
-         this.yRot = var2;
-         this.yBodyRot = var2;
-         this.yBodyRotO = var2;
-         this.clientSideTeleportInterpolation = 0;
-      } else if (!this.level.isClientSide) {
-         BlockState var13 = this.level.getBlockState(var1);
-         Direction var3;
-         if (!var13.isAir()) {
-            if (var13.is(Blocks.MOVING_PISTON)) {
-               var3 = (Direction)var13.getValue(PistonBaseBlock.FACING);
-               if (this.level.isEmptyBlock(var1.relative(var3))) {
-                  var1 = var1.relative(var3);
-                  this.entityData.set(DATA_ATTACH_POS_ID, Optional.of(var1));
-               } else {
-                  this.teleportSomewhere();
-               }
-            } else if (var13.is(Blocks.PISTON_HEAD)) {
-               var3 = (Direction)var13.getValue(PistonHeadBlock.FACING);
-               if (this.level.isEmptyBlock(var1.relative(var3))) {
-                  var1 = var1.relative(var3);
-                  this.entityData.set(DATA_ATTACH_POS_ID, Optional.of(var1));
-               } else {
-                  this.teleportSomewhere();
-               }
-            } else {
-               this.teleportSomewhere();
-            }
-         }
+      if (this.updatePeekAmount()) {
+         this.onPeekAmountChange();
+      }
 
-         var3 = this.getAttachFace();
-         if (!this.canAttachOnBlockFace(var1, var3)) {
-            Direction var4 = this.findAttachableFace(var1);
-            if (var4 != null) {
-               this.entityData.set(DATA_ATTACH_FACE_ID, var4);
-            } else {
-               this.teleportSomewhere();
-            }
+      if (this.level.isClientSide) {
+         if (this.clientSideTeleportInterpolation > 0) {
+            --this.clientSideTeleportInterpolation;
+         } else {
+            this.clientOldAttachPosition = null;
          }
       }
 
-      var2 = (float)this.getRawPeekAmount() * 0.01F;
-      this.currentPeekAmountO = this.currentPeekAmount;
-      if (this.currentPeekAmount > var2) {
-         this.currentPeekAmount = Mth.clamp(this.currentPeekAmount - 0.05F, var2, 1.0F);
-      } else if (this.currentPeekAmount < var2) {
-         this.currentPeekAmount = Mth.clamp(this.currentPeekAmount + 0.05F, 0.0F, var2);
-      }
+   }
 
+   private void findNewAttachment() {
+      Direction var1 = this.findAttachableSurface(this.blockPosition());
       if (var1 != null) {
-         if (this.level.isClientSide) {
-            if (this.clientSideTeleportInterpolation > 0 && this.oldAttachPosition != null) {
-               --this.clientSideTeleportInterpolation;
-            } else {
-               this.oldAttachPosition = var1;
-            }
+         this.entityData.set(DATA_ATTACH_FACE_ID, var1);
+      } else {
+         this.teleportSomewhere();
+      }
+
+   }
+
+   protected AABB makeBoundingBox() {
+      float var1 = getPhysicalPeek(this.currentPeekAmount);
+      Direction var2 = this.getAttachFace().getOpposite();
+      float var3 = this.getType().getWidth() / 2.0F;
+      return getProgressAabb(var2, var1).move(this.getX() - (double)var3, this.getY(), this.getZ() - (double)var3);
+   }
+
+   private static float getPhysicalPeek(float var0) {
+      return 0.5F - Mth.sin((0.5F + var0) * 3.1415927F) * 0.5F;
+   }
+
+   private boolean updatePeekAmount() {
+      this.currentPeekAmountO = this.currentPeekAmount;
+      float var1 = (float)this.getRawPeekAmount() * 0.01F;
+      if (this.currentPeekAmount == var1) {
+         return false;
+      } else {
+         if (this.currentPeekAmount > var1) {
+            this.currentPeekAmount = Mth.clamp(this.currentPeekAmount - 0.05F, var1, 1.0F);
+         } else {
+            this.currentPeekAmount = Mth.clamp(this.currentPeekAmount + 0.05F, 0.0F, var1);
          }
 
-         this.setPosAndOldPos((double)var1.getX() + 0.5D, (double)var1.getY(), (double)var1.getZ() + 0.5D);
-         double var14 = 0.5D - (double)Mth.sin((0.5F + this.currentPeekAmount) * 3.1415927F) * 0.5D;
-         double var5 = 0.5D - (double)Mth.sin((0.5F + this.currentPeekAmountO) * 3.1415927F) * 0.5D;
-         Direction var7 = this.getAttachFace().getOpposite();
-         this.setBoundingBox((new AABB(this.getX() - 0.5D, this.getY(), this.getZ() - 0.5D, this.getX() + 0.5D, this.getY() + 1.0D, this.getZ() + 0.5D)).expandTowards((double)var7.getStepX() * var14, (double)var7.getStepY() * var14, (double)var7.getStepZ() * var14));
-         double var8 = var14 - var5;
-         if (var8 > 0.0D) {
-            List var10 = this.level.getEntities(this, this.getBoundingBox());
-            if (!var10.isEmpty()) {
-               Iterator var11 = var10.iterator();
+         return true;
+      }
+   }
 
-               while(var11.hasNext()) {
-                  Entity var12 = (Entity)var11.next();
-                  if (!(var12 instanceof Shulker) && !var12.noPhysics) {
-                     var12.move(MoverType.SHULKER, new Vec3(var8 * (double)var7.getStepX(), var8 * (double)var7.getStepY(), var8 * (double)var7.getStepZ()));
-                  }
-               }
+   private void onPeekAmountChange() {
+      this.reapplyPosition();
+      float var1 = getPhysicalPeek(this.currentPeekAmount);
+      float var2 = getPhysicalPeek(this.currentPeekAmountO);
+      Direction var3 = this.getAttachFace().getOpposite();
+      float var4 = var1 - var2;
+      if (var4 > 0.0F) {
+         List var5 = this.level.getEntities((Entity)this, getProgressDeltaAabb(var3, var2, var1).move(this.getX(), this.getY(), this.getZ()), EntitySelector.NO_SPECTATORS.and((var1x) -> {
+            return !var1x.isPassengerOfSameVehicle(this);
+         }));
+         Iterator var6 = var5.iterator();
+
+         while(var6.hasNext()) {
+            Entity var7 = (Entity)var6.next();
+            if (!(var7 instanceof Shulker) && !var7.noPhysics) {
+               var7.move(MoverType.SHULKER, new Vec3((double)(var4 * (float)var3.getStepX()), (double)(var4 * (float)var3.getStepY()), (double)(var4 * (float)var3.getStepZ())));
             }
          }
+
       }
+   }
 
+   public static AABB getProgressAabb(Direction var0, float var1) {
+      return getProgressDeltaAabb(var0, -1.0F, var1);
    }
 
+   public static AABB getProgressDeltaAabb(Direction var0, float var1, float var2) {
+      double var3 = (double)Math.max(var1, var2);
+      double var5 = (double)Math.min(var1, var2);
+      return (new AABB(BlockPos.ZERO)).expandTowards((double)var0.getStepX() * var3, (double)var0.getStepY() * var3, (double)var0.getStepZ() * var3).contract((double)(-var0.getStepX()) * (1.0D + var5), (double)(-var0.getStepY()) * (1.0D + var5), (double)(-var0.getStepZ()) * (1.0D + var5));
+   }
+
+   public double getMyRidingOffset() {
+      return 0.1875D - this.getVehicle().getPassengersRidingOffset();
+   }
+
+   public boolean startRiding(Entity var1, boolean var2) {
+      if (this.level.isClientSide()) {
+         this.clientOldAttachPosition = null;
+         this.clientSideTeleportInterpolation = 0;
+      }
+
+      this.entityData.set(DATA_ATTACH_FACE_ID, Direction.DOWN);
+      return super.startRiding(var1, var2);
+   }
+
+   public void stopRiding() {
+      super.stopRiding();
+      if (this.level.isClientSide) {
+         this.clientOldAttachPosition = this.blockPosition();
+      }
+
+      this.yBodyRotO = 0.0F;
+      this.yBodyRot = 0.0F;
+   }
+
+   @Nullable
+   public SpawnGroupData finalizeSpawn(ServerLevelAccessor var1, DifficultyInstance var2, MobSpawnType var3, @Nullable SpawnGroupData var4, @Nullable CompoundTag var5) {
+      this.yRot = 0.0F;
+      this.yHeadRot = this.yRot;
+      this.setOldPosAndRot();
+      return super.finalizeSpawn(var1, var2, var3, var4, var5);
+   }
+
    public void move(MoverType var1, Vec3 var2) {
       if (var1 == MoverType.SHULKER_BOX) {
          this.teleportSomewhere();
       } else {
          super.move(var1, var2);
       }
 
    }
 
+   public Vec3 getDeltaMovement() {
+      return Vec3.ZERO;
+   }
+
+   public void setDeltaMovement(Vec3 var1) {
+   }
+
    public void setPos(double var1, double var3, double var5) {
-      super.setPos(var1, var3, var5);
-      if (this.entityData != null && this.tickCount != 0) {
-         Optional var7 = (Optional)this.entityData.get(DATA_ATTACH_POS_ID);
-         Optional var8 = Optional.of(new BlockPos(var1, var3, var5));
+      BlockPos var7 = this.blockPosition();
+      if (this.isPassenger()) {
+         super.setPos(var1, var3, var5);
+      } else {
+         super.setPos((double)Mth.floor(var1) + 0.5D, (double)Mth.floor(var3 + 0.5D), (double)Mth.floor(var5) + 0.5D);
+      }
+
+      if (this.tickCount != 0) {
+         BlockPos var8 = this.blockPosition();
          if (!var8.equals(var7)) {
-            this.entityData.set(DATA_ATTACH_POS_ID, var8);
             this.entityData.set(DATA_PEEK_ID, (byte)0);
             this.hasImpulse = true;
+            if (this.level.isClientSide && !this.isPassenger() && !var8.equals(this.clientOldAttachPosition)) {
+               this.clientOldAttachPosition = var7;
+               this.clientSideTeleportInterpolation = 6;
+               this.xOld = this.getX();
+               this.yOld = this.getY();
+               this.zOld = this.getZ();
+            }
          }
 
       }
    }
 
    @Nullable
-   protected Direction findAttachableFace(BlockPos var1) {
+   protected Direction findAttachableSurface(BlockPos var1) {
       Direction[] var2 = Direction.values();
       int var3 = var2.length;
 
       for(int var4 = 0; var4 < var3; ++var4) {
          Direction var5 = var2[var4];
-         if (this.canAttachOnBlockFace(var1, var5)) {
+         if (this.canStayAt(var1, var5)) {
             return var5;
          }
       }
 
       return null;
    }
 
-   private boolean canAttachOnBlockFace(BlockPos var1, Direction var2) {
-      return this.level.loadedAndEntityCanStandOnFace(var1.relative(var2), this, var2.getOpposite()) && this.level.noCollision(this, ShulkerSharedHelper.openBoundingBox(var1, var2.getOpposite()));
+   private boolean canStayAt(BlockPos var1, Direction var2) {
+      if (this.isPositionBlocked(var1)) {
+         return false;
+      } else {
+         Direction var3 = var2.getOpposite();
+         if (!this.level.loadedAndEntityCanStandOnFace(var1.relative(var2), this, var3)) {
+            return false;
+         } else {
+            AABB var4 = getProgressAabb(var3, 1.0F).move(var1).deflate(1.0E-6D);
+            return this.level.noCollision(this, var4);
+         }
+      }
    }
 
+   private boolean isPositionBlocked(BlockPos var1) {
+      BlockState var2 = this.level.getBlockState(var1);
+      if (var2.isAir()) {
+         return false;
+      } else {
+         boolean var3 = var2.is(Blocks.MOVING_PISTON) && var1.equals(this.blockPosition());
+         return !var3;
+      }
+   }
+
    protected boolean teleportSomewhere() {
       if (!this.isNoAi() && this.isAlive()) {
          BlockPos var1 = this.blockPosition();
 
          for(int var2 = 0; var2 < 5; ++var2) {
-            BlockPos var3 = var1.offset(8 - this.random.nextInt(17), 8 - this.random.nextInt(17), 8 - this.random.nextInt(17));
-            if (var3.getY() > 0 && this.level.isEmptyBlock(var3) && this.level.getWorldBorder().isWithinBounds(var3) && this.level.noCollision(this, new AABB(var3))) {
-               Direction var4 = this.findAttachableFace(var3);
+            BlockPos var3 = var1.offset(Mth.randomBetweenInclusive(this.random, -8, 8), Mth.randomBetweenInclusive(this.random, -8, 8), Mth.randomBetweenInclusive(this.random, -8, 8));
+            if (var3.getY() > this.level.getMinBuildHeight() && this.level.isEmptyBlock(var3) && this.level.getWorldBorder().isWithinBounds(var3) && this.level.noCollision(this, (new AABB(var3)).deflate(1.0E-6D))) {
+               Direction var4 = this.findAttachableSurface(var3);
                if (var4 != null) {
+                  this.unRide();
                   this.entityData.set(DATA_ATTACH_FACE_ID, var4);
                   this.playSound(SoundEvents.SHULKER_TELEPORT, 1.0F, 1.0F);
-                  this.entityData.set(DATA_ATTACH_POS_ID, Optional.of(var3));
+                  this.setPos((double)var3.getX() + 0.5D, (double)var3.getY(), (double)var3.getZ() + 0.5D);
                   this.entityData.set(DATA_PEEK_ID, (byte)0);
                   this.setTarget((LivingEntity)null);
                   return true;
                }
             }
          }
 
          return false;
       } else {
-         return true;
+         return false;
       }
    }
 
-   public void aiStep() {
-      super.aiStep();
-      this.setDeltaMovement(Vec3.ZERO);
-      if (!this.isNoAi()) {
-         this.yBodyRotO = 0.0F;
-         this.yBodyRot = 0.0F;
-      }
-
-   }
-
-   public void onSyncedDataUpdated(EntityDataAccessor<?> var1) {
-      if (DATA_ATTACH_POS_ID.equals(var1) && this.level.isClientSide && !this.isPassenger()) {
-         BlockPos var2 = this.getAttachPosition();
-         if (var2 != null) {
-            if (this.oldAttachPosition == null) {
-               this.oldAttachPosition = var2;
-            } else {
-               this.clientSideTeleportInterpolation = 6;
-            }
-
-            this.setPosAndOldPos((double)var2.getX() + 0.5D, (double)var2.getY(), (double)var2.getZ() + 0.5D);
-         }
-      }
-
-      super.onSyncedDataUpdated(var1);
-   }
-
    public void lerpTo(double var1, double var3, double var5, float var7, float var8, int var9, boolean var10) {
       this.lerpSteps = 0;
+      this.setPos(var1, var3, var5);
+      this.setRot(var7, var8);
    }
 
    public boolean hurt(DamageSource var1, float var2) {
+      Entity var3;
       if (this.isClosed()) {
-         Entity var3 = var1.getDirectEntity();
+         var3 = var1.getDirectEntity();
          if (var3 instanceof AbstractArrow) {
             return false;
          }
       }
 
-      if (super.hurt(var1, var2)) {
+      if (!super.hurt(var1, var2)) {
+         return false;
+      } else {
          if ((double)this.getHealth() < (double)this.getMaxHealth() * 0.5D && this.random.nextInt(4) == 0) {
             this.teleportSomewhere();
+         } else if (var1.isProjectile()) {
+            var3 = var1.getDirectEntity();
+            if (var3 != null && var3.getType() == EntityType.SHULKER_BULLET) {
+               this.hitByShulkerBullet();
+            }
          }
 
          return true;
-      } else {
-         return false;
       }
    }
 
    private boolean isClosed() {
       return this.getRawPeekAmount() == 0;
    }
 
+   private void hitByShulkerBullet() {
+      Vec3 var1 = this.position();
+      AABB var2 = this.getBoundingBox();
+      if (!this.isClosed() && this.teleportSomewhere()) {
+         int var3 = this.level.getEntities((EntityTypeTest)EntityType.SHULKER, var2.inflate(8.0D), Entity::isAlive).size();
+         float var4 = (float)(var3 - 1) / 5.0F;
+         if (this.level.random.nextFloat() >= var4) {
+            Shulker var5 = (Shulker)EntityType.SHULKER.create(this.level);
+            DyeColor var6 = this.getColor();
+            if (var6 != null) {
+               var5.setColor(var6);
+            }
+
+            var5.moveTo(var1);
+            this.level.addFreshEntity(var5);
+         }
+      }
+   }
+
    public boolean canBeCollidedWith() {
       return this.isAlive();
    }
 
    public Direction getAttachFace() {
       return (Direction)this.entityData.get(DATA_ATTACH_FACE_ID);
    }
 
-   @Nullable
-   public BlockPos getAttachPosition() {
-      return (BlockPos)((Optional)this.entityData.get(DATA_ATTACH_POS_ID)).orElse((Object)null);
-   }
-
-   public void setAttachPosition(@Nullable BlockPos var1) {
-      this.entityData.set(DATA_ATTACH_POS_ID, Optional.ofNullable(var1));
-   }
-
-   public int getRawPeekAmount() {
+   private int getRawPeekAmount() {
       return (Byte)this.entityData.get(DATA_PEEK_ID);
    }
 
-   public void setRawPeekAmount(int var1) {
+   private void setRawPeekAmount(int var1) {
       if (!this.level.isClientSide) {
          this.getAttribute(Attributes.ARMOR).removeModifier(COVERED_ARMOR_MODIFIER);
          if (var1 == 0) {
             this.getAttribute(Attributes.ARMOR).addPermanentModifier(COVERED_ARMOR_MODIFIER);
             this.playSound(SoundEvents.SHULKER_CLOSE, 1.0F, 1.0F);
@@ -398,18 +446,10 @@
 
    public float getClientPeekAmount(float var1) {
       return Mth.lerp(var1, this.currentPeekAmountO, this.currentPeekAmount);
    }
 
-   public int getClientSideTeleportInterpolation() {
-      return this.clientSideTeleportInterpolation;
-   }
-
-   public BlockPos getOldAttachPosition() {
-      return this.oldAttachPosition;
-   }
-
    protected float getStandingEyeHeight(Pose var1, EntityDimensions var2) {
       return 0.5F;
    }
 
    public int getMaxHeadXRot() {
@@ -425,24 +465,37 @@
 
    public float getPickRadius() {
       return 0.0F;
    }
 
-   public boolean hasValidInterpolationPositions() {
-      return this.oldAttachPosition != null && this.getAttachPosition() != null;
+   public Optional<Vec3> getRenderPosition(float var1) {
+      if (this.clientOldAttachPosition != null && this.clientSideTeleportInterpolation > 0) {
+         double var2 = (double)((float)this.clientSideTeleportInterpolation - var1) / 6.0D;
+         var2 *= var2;
+         BlockPos var4 = this.blockPosition();
+         double var5 = (double)(var4.getX() - this.clientOldAttachPosition.getX()) * var2;
+         double var7 = (double)(var4.getY() - this.clientOldAttachPosition.getY()) * var2;
+         double var9 = (double)(var4.getZ() - this.clientOldAttachPosition.getZ()) * var2;
+         return Optional.of(new Vec3(-var5, -var7, -var9));
+      } else {
+         return Optional.empty();
+      }
    }
 
+   private void setColor(DyeColor var1) {
+      this.entityData.set(DATA_COLOR_ID, (byte)var1.getId());
+   }
+
    @Nullable
    public DyeColor getColor() {
-      Byte var1 = (Byte)this.entityData.get(DATA_COLOR_ID);
+      byte var1 = (Byte)this.entityData.get(DATA_COLOR_ID);
       return var1 != 16 && var1 <= 15 ? DyeColor.byId(var1) : null;
    }
 
    static {
       COVERED_ARMOR_MODIFIER = new AttributeModifier(COVERED_ARMOR_MODIFIER_UUID, "Covered armor bonus", 20.0D, AttributeModifier.Operation.ADDITION);
       DATA_ATTACH_FACE_ID = SynchedEntityData.defineId(Shulker.class, EntityDataSerializers.DIRECTION);
-      DATA_ATTACH_POS_ID = SynchedEntityData.defineId(Shulker.class, EntityDataSerializers.OPTIONAL_BLOCK_POS);
       DATA_PEEK_ID = SynchedEntityData.defineId(Shulker.class, EntityDataSerializers.BYTE);
       DATA_COLOR_ID = SynchedEntityData.defineId(Shulker.class, EntityDataSerializers.BYTE);
    }
 
    static class ShulkerDefenseAttackGoal extends NearestAttackableTargetGoal<LivingEntity> {
@@ -536,11 +589,11 @@
 
       private ShulkerPeekGoal() {
       }
 
       public boolean canUse() {
-         return Shulker.this.getTarget() == null && Shulker.this.random.nextInt(40) == 0;
+         return Shulker.this.getTarget() == null && Shulker.this.random.nextInt(40) == 0 && Shulker.this.canStayAt(Shulker.this.blockPosition(), Shulker.this.getAttachFace());
       }
 
       public boolean canContinueToUse() {
          return Shulker.this.getTarget() == null && this.peekTime > 0;
       }
@@ -560,13 +613,13 @@
       public void tick() {
          --this.peekTime;
       }
    }
 
-   class ShulkerBodyRotationControl extends BodyRotationControl {
-      public ShulkerBodyRotationControl(Mob var2) {
-         super(var2);
+   static class ShulkerBodyRotationControl extends BodyRotationControl {
+      public ShulkerBodyRotationControl(Mob var1) {
+         super(var1);
       }
 
       public void clientTick() {
       }
    }
