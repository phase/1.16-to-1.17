--- net/minecraft/world/entity/monster/Drowned.java
+++ net/minecraft/world/entity/monster/Drowned.java
@@ -31,13 +31,14 @@
 import net.minecraft.world.entity.ai.goal.ZombieAttackGoal;
 import net.minecraft.world.entity.ai.goal.target.HurtByTargetGoal;
 import net.minecraft.world.entity.ai.goal.target.NearestAttackableTargetGoal;
 import net.minecraft.world.entity.ai.navigation.GroundPathNavigation;
 import net.minecraft.world.entity.ai.navigation.WaterBoundPathNavigation;
-import net.minecraft.world.entity.ai.util.RandomPos;
+import net.minecraft.world.entity.ai.util.DefaultRandomPos;
 import net.minecraft.world.entity.animal.IronGolem;
 import net.minecraft.world.entity.animal.Turtle;
+import net.minecraft.world.entity.animal.axolotl.Axolotl;
 import net.minecraft.world.entity.npc.AbstractVillager;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.entity.projectile.ThrownTrident;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
@@ -74,10 +75,11 @@
       this.goalSelector.addGoal(7, new RandomStrollGoal(this, 1.0D));
       this.targetSelector.addGoal(1, (new HurtByTargetGoal(this, new Class[]{Drowned.class})).setAlertOthers(ZombifiedPiglin.class));
       this.targetSelector.addGoal(2, new NearestAttackableTargetGoal(this, Player.class, 10, true, false, this::okTarget));
       this.targetSelector.addGoal(3, new NearestAttackableTargetGoal(this, AbstractVillager.class, false));
       this.targetSelector.addGoal(3, new NearestAttackableTargetGoal(this, IronGolem.class, true));
+      this.targetSelector.addGoal(3, new NearestAttackableTargetGoal(this, Axolotl.class, 10, true, false, Axolotl.NOT_PLAYING_DEAD_SELECTOR));
       this.targetSelector.addGoal(5, new NearestAttackableTargetGoal(this, Turtle.class, 10, true, false, Turtle.BABY_ON_LAND_SELECTOR));
    }
 
    public SpawnGroupData finalizeSpawn(ServerLevelAccessor var1, DifficultyInstance var2, MobSpawnType var3, @Nullable SpawnGroupData var4, @Nullable CompoundTag var5) {
       var4 = super.finalizeSpawn(var1, var2, var3, var4, var5);
@@ -142,20 +144,20 @@
       }
 
    }
 
    protected boolean canReplaceCurrentItem(ItemStack var1, ItemStack var2) {
-      if (var2.getItem() == Items.NAUTILUS_SHELL) {
+      if (var2.is(Items.NAUTILUS_SHELL)) {
          return false;
-      } else if (var2.getItem() == Items.TRIDENT) {
-         if (var1.getItem() == Items.TRIDENT) {
+      } else if (var2.is(Items.TRIDENT)) {
+         if (var1.is(Items.TRIDENT)) {
             return var1.getDamageValue() < var2.getDamageValue();
          } else {
             return false;
          }
       } else {
-         return var1.getItem() == Items.TRIDENT ? true : super.canReplaceCurrentItem(var1, var2);
+         return var1.is(Items.TRIDENT) ? true : super.canReplaceCurrentItem(var1, var2);
       }
    }
 
    protected boolean convertsInWater() {
       return false;
@@ -409,11 +411,11 @@
          return this.canUse() && !this.stuck;
       }
 
       public void tick() {
          if (this.drowned.getY() < (double)(this.seaLevel - 1) && (this.drowned.getNavigation().isDone() || this.drowned.closeToNextPos())) {
-            Vec3 var1 = RandomPos.getPosTowards(this.drowned, 4, 8, new Vec3(this.drowned.getX(), (double)(this.seaLevel - 1), this.drowned.getZ()));
+            Vec3 var1 = DefaultRandomPos.getPosTowards(this.drowned, 4, 8, new Vec3(this.drowned.getX(), (double)(this.seaLevel - 1), this.drowned.getZ()), 1.5707963705062866D);
             if (var1 == null) {
                this.stuck = true;
                return;
             }
 
@@ -439,11 +441,11 @@
          super(var1, var2, var4, var5);
          this.drowned = (Drowned)var1;
       }
 
       public boolean canUse() {
-         return super.canUse() && this.drowned.getMainHandItem().getItem() == Items.TRIDENT;
+         return super.canUse() && this.drowned.getMainHandItem().is(Items.TRIDENT);
       }
 
       public void start() {
          super.start();
          this.drowned.setAggressive(true);
