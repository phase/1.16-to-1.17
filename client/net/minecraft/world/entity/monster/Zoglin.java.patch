--- net/minecraft/world/entity/monster/Zoglin.java
+++ net/minecraft/world/entity/monster/Zoglin.java
@@ -13,14 +13,13 @@
 import net.minecraft.network.syncher.EntityDataSerializers;
 import net.minecraft.network.syncher.SynchedEntityData;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
-import net.minecraft.util.IntRange;
+import net.minecraft.util.valueproviders.UniformInt;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.EntitySelector;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.MobType;
 import net.minecraft.world.entity.ai.Brain;
 import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
@@ -48,10 +47,20 @@
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.state.BlockState;
 
 public class Zoglin extends Monster implements Enemy, HoglinBase {
    private static final EntityDataAccessor<Boolean> DATA_BABY_ID;
+   private static final int MAX_HEALTH = 40;
+   private static final int ATTACK_KNOCKBACK = 1;
+   private static final float KNOCKBACK_RESISTANCE = 0.6F;
+   private static final int ATTACK_DAMAGE = 6;
+   private static final float BABY_ATTACK_DAMAGE = 0.5F;
+   private static final int ATTACK_INTERVAL = 40;
+   private static final int BABY_ATTACK_INTERVAL = 15;
+   private static final int ATTACK_DURATION = 200;
+   private static final float MOVEMENT_SPEED_WHEN_FIGHTING = 0.3F;
+   private static final float SPEED_MULTIPLIER_WHEN_IDLING = 0.4F;
    private int attackAnimationRemainingTicks;
    protected static final ImmutableList<? extends SensorType<? extends Sensor<? super Zoglin>>> SENSOR_TYPES;
    protected static final ImmutableList<? extends MemoryModuleType<?>> MEMORY_TYPES;
 
    public Zoglin(EntityType<? extends Zoglin> var1, Level var2) {
@@ -77,24 +86,24 @@
    private static void initCoreActivity(Brain<Zoglin> var0) {
       var0.addActivity(Activity.CORE, 0, ImmutableList.of(new LookAtTargetSink(45, 90), new MoveToTargetSink()));
    }
 
    private static void initIdleActivity(Brain<Zoglin> var0) {
-      var0.addActivity(Activity.IDLE, 10, ImmutableList.of(new StartAttacking(Zoglin::findNearestValidAttackTarget), new RunSometimes(new SetEntityLookTarget(8.0F), IntRange.of(30, 60)), new RunOne(ImmutableList.of(Pair.of(new RandomStroll(0.4F), 2), Pair.of(new SetWalkTargetFromLookTarget(0.4F, 3), 2), Pair.of(new DoNothing(30, 60), 1)))));
+      var0.addActivity(Activity.IDLE, 10, ImmutableList.of(new StartAttacking(Zoglin::findNearestValidAttackTarget), new RunSometimes(new SetEntityLookTarget(8.0F), UniformInt.of(30, 60)), new RunOne(ImmutableList.of(Pair.of(new RandomStroll(0.4F), 2), Pair.of(new SetWalkTargetFromLookTarget(0.4F, 3), 2), Pair.of(new DoNothing(30, 60), 1)))));
    }
 
    private static void initFightActivity(Brain<Zoglin> var0) {
       var0.addActivityAndRemoveMemoryWhenStopped(Activity.FIGHT, 10, ImmutableList.of(new SetWalkTargetFromAttackTargetIfTargetOutOfReach(1.0F), new RunIf(Zoglin::isAdult, new MeleeAttack(40)), new RunIf(Zoglin::isBaby, new MeleeAttack(15)), new StopAttackingIfTargetInvalid()), MemoryModuleType.ATTACK_TARGET);
    }
 
    private Optional<? extends LivingEntity> findNearestValidAttackTarget() {
-      return ((List)this.getBrain().getMemory(MemoryModuleType.VISIBLE_LIVING_ENTITIES).orElse(ImmutableList.of())).stream().filter(Zoglin::isTargetable).findFirst();
+      return ((List)this.getBrain().getMemory(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES).orElse(ImmutableList.of())).stream().filter(this::isTargetable).findFirst();
    }
 
-   private static boolean isTargetable(LivingEntity var0) {
-      EntityType var1 = var0.getType();
-      return var1 != EntityType.ZOGLIN && var1 != EntityType.CREEPER && EntitySelector.ATTACK_ALLOWED.test(var0);
+   private boolean isTargetable(LivingEntity var1) {
+      EntityType var2 = var1.getType();
+      return var2 != EntityType.ZOGLIN && var2 != EntityType.CREEPER && Sensor.isEntityAttackable(this, var1);
    }
 
    protected void defineSynchedData() {
       super.defineSynchedData();
       this.entityData.define(DATA_BABY_ID, false);
@@ -146,11 +155,11 @@
       boolean var3 = super.hurt(var1, var2);
       if (this.level.isClientSide) {
          return false;
       } else if (var3 && var1.getEntity() instanceof LivingEntity) {
          LivingEntity var4 = (LivingEntity)var1.getEntity();
-         if (EntitySelector.ATTACK_ALLOWED.test(var4) && !BehaviorUtils.isOtherTargetMuchFurtherAwayThanCurrentAttackTarget(this, var4, 4.0D)) {
+         if (var4.canBeSeenAsEnemy() && !BehaviorUtils.isOtherTargetMuchFurtherAwayThanCurrentAttackTarget(this, var4, 4.0D)) {
             this.setAttackTarget(var4);
          }
 
          return var3;
       } else {
@@ -269,8 +278,8 @@
    }
 
    static {
       DATA_BABY_ID = SynchedEntityData.defineId(Zoglin.class, EntityDataSerializers.BOOLEAN);
       SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS);
-      MEMORY_TYPES = ImmutableList.of(MemoryModuleType.LIVING_ENTITIES, MemoryModuleType.VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_TARGETABLE_PLAYER, MemoryModuleType.LOOK_TARGET, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN);
+      MEMORY_TYPES = ImmutableList.of(MemoryModuleType.NEAREST_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER, MemoryModuleType.LOOK_TARGET, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN);
    }
 }
