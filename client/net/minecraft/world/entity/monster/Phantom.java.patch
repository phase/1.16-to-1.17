--- net/minecraft/world/entity/monster/Phantom.java
+++ net/minecraft/world/entity/monster/Phantom.java
@@ -40,14 +40,16 @@
 import net.minecraft.world.level.ServerLevelAccessor;
 import net.minecraft.world.level.levelgen.Heightmap;
 import net.minecraft.world.phys.Vec3;
 
 public class Phantom extends FlyingMob implements Enemy {
+   public static final float FLAP_DEGREES_PER_TICK = 7.448451F;
+   public static final int TICKS_PER_FLAP = Mth.ceil(24.166098F);
    private static final EntityDataAccessor<Integer> ID_SIZE;
-   private Vec3 moveTargetPoint;
-   private BlockPos anchorPoint;
-   private Phantom.AttackPhase attackPhase;
+   Vec3 moveTargetPoint;
+   BlockPos anchorPoint;
+   Phantom.AttackPhase attackPhase;
 
    public Phantom(EntityType<? extends Phantom> var1, Level var2) {
       super(var1, var2);
       this.moveTargetPoint = Vec3.ZERO;
       this.anchorPoint = BlockPos.ZERO;
@@ -55,10 +57,14 @@
       this.xpReward = 5;
       this.moveControl = new Phantom.PhantomMoveControl(this);
       this.lookControl = new Phantom.PhantomLookControl(this);
    }
 
+   public boolean isFlapping() {
+      return (this.getUniqueFlapTickOffset() + this.tickCount) % TICKS_PER_FLAP == 0;
+   }
+
    protected BodyRotationControl createBodyControl() {
       return new Phantom.PhantomBodyRotationControl(this);
    }
 
    protected void registerGoals() {
@@ -72,11 +78,11 @@
       super.defineSynchedData();
       this.entityData.define(ID_SIZE, 0);
    }
 
    public void setPhantomSize(int var1) {
-      this.entityData.set(ID_SIZE, Mth.clamp(var1, 0, 64));
+      this.entityData.set(ID_SIZE, Mth.clamp((int)var1, (int)0, (int)64));
    }
 
    private void updatePhantomSizeInfo() {
       this.refreshDimensions();
       this.getAttribute(Attributes.ATTACK_DAMAGE).setBaseValue((double)(6 + this.getPhantomSize()));
@@ -96,26 +102,30 @@
       }
 
       super.onSyncedDataUpdated(var1);
    }
 
+   public int getUniqueFlapTickOffset() {
+      return this.getId() * 3;
+   }
+
    protected boolean shouldDespawnInPeaceful() {
       return true;
    }
 
    public void tick() {
       super.tick();
       if (this.level.isClientSide) {
-         float var1 = Mth.cos((float)(this.getId() * 3 + this.tickCount) * 0.13F + 3.1415927F);
-         float var2 = Mth.cos((float)(this.getId() * 3 + this.tickCount + 1) * 0.13F + 3.1415927F);
+         float var1 = Mth.cos((float)(this.getUniqueFlapTickOffset() + this.tickCount) * 7.448451F * 0.017453292F + 3.1415927F);
+         float var2 = Mth.cos((float)(this.getUniqueFlapTickOffset() + this.tickCount + 1) * 7.448451F * 0.017453292F + 3.1415927F);
          if (var1 > 0.0F && var2 <= 0.0F) {
             this.level.playLocalSound(this.getX(), this.getY(), this.getZ(), SoundEvents.PHANTOM_FLAP, this.getSoundSource(), 0.95F + this.random.nextFloat() * 0.05F, 0.95F + this.random.nextFloat() * 0.05F, false);
          }
 
          int var3 = this.getPhantomSize();
-         float var4 = Mth.cos(this.yRot * 0.017453292F) * (1.3F + 0.21F * (float)var3);
-         float var5 = Mth.sin(this.yRot * 0.017453292F) * (1.3F + 0.21F * (float)var3);
+         float var4 = Mth.cos(this.getYRot() * 0.017453292F) * (1.3F + 0.21F * (float)var3);
+         float var5 = Mth.sin(this.getYRot() * 0.017453292F) * (1.3F + 0.21F * (float)var3);
          float var6 = (0.3F + var1 * 0.45F) * ((float)var3 * 0.2F + 1.0F);
          this.level.addParticle(ParticleTypes.MYCELIUM, this.getX() + (double)var4, this.getY() + (double)var6, this.getZ() + (double)var5, 0.0D, 0.0D, 0.0D);
          this.level.addParticle(ParticleTypes.MYCELIUM, this.getX() - (double)var4, this.getY() + (double)var6, this.getZ() - (double)var5, 0.0D, 0.0D, 0.0D);
       }
 
@@ -197,53 +207,90 @@
 
    static {
       ID_SIZE = SynchedEntityData.defineId(Phantom.class, EntityDataSerializers.INT);
    }
 
-   class PhantomAttackPlayerTargetGoal extends Goal {
-      private final TargetingConditions attackTargeting;
-      private int nextScanTick;
+   private static enum AttackPhase {
+      CIRCLE,
+      SWOOP;
 
-      private PhantomAttackPlayerTargetGoal() {
-         this.attackTargeting = (new TargetingConditions()).range(64.0D);
-         this.nextScanTick = 20;
+      private AttackPhase() {
       }
+   }
 
-      public boolean canUse() {
-         if (this.nextScanTick > 0) {
-            --this.nextScanTick;
-            return false;
-         } else {
-            this.nextScanTick = 60;
-            List var1 = Phantom.this.level.getNearbyPlayers(this.attackTargeting, Phantom.this, Phantom.this.getBoundingBox().inflate(16.0D, 64.0D, 16.0D));
-            if (!var1.isEmpty()) {
-               var1.sort(Comparator.comparing(Entity::getY).reversed());
-               Iterator var2 = var1.iterator();
+   class PhantomMoveControl extends MoveControl {
+      private float speed = 0.1F;
 
-               while(var2.hasNext()) {
-                  Player var3 = (Player)var2.next();
-                  if (Phantom.this.canAttack(var3, TargetingConditions.DEFAULT)) {
-                     Phantom.this.setTarget(var3);
-                     return true;
-                  }
-               }
+      public PhantomMoveControl(Mob var2) {
+         super(var2);
+      }
+
+      public void tick() {
+         if (Phantom.this.horizontalCollision) {
+            Phantom.this.setYRot(Phantom.this.getYRot() + 180.0F);
+            this.speed = 0.1F;
+         }
+
+         float var1 = (float)(Phantom.this.moveTargetPoint.x - Phantom.this.getX());
+         float var2 = (float)(Phantom.this.moveTargetPoint.y - Phantom.this.getY());
+         float var3 = (float)(Phantom.this.moveTargetPoint.z - Phantom.this.getZ());
+         double var4 = (double)Mth.sqrt(var1 * var1 + var3 * var3);
+         if (Math.abs(var4) > 9.999999747378752E-6D) {
+            double var6 = 1.0D - (double)Mth.abs(var2 * 0.7F) / var4;
+            var1 = (float)((double)var1 * var6);
+            var3 = (float)((double)var3 * var6);
+            var4 = (double)Mth.sqrt(var1 * var1 + var3 * var3);
+            double var8 = (double)Mth.sqrt(var1 * var1 + var3 * var3 + var2 * var2);
+            float var10 = Phantom.this.getYRot();
+            float var11 = (float)Mth.atan2((double)var3, (double)var1);
+            float var12 = Mth.wrapDegrees(Phantom.this.getYRot() + 90.0F);
+            float var13 = Mth.wrapDegrees(var11 * 57.295776F);
+            Phantom.this.setYRot(Mth.approachDegrees(var12, var13, 4.0F) - 90.0F);
+            Phantom.this.yBodyRot = Phantom.this.getYRot();
+            if (Mth.degreesDifferenceAbs(var10, Phantom.this.getYRot()) < 3.0F) {
+               this.speed = Mth.approach(this.speed, 1.8F, 0.005F * (1.8F / this.speed));
+            } else {
+               this.speed = Mth.approach(this.speed, 0.2F, 0.025F);
             }
 
-            return false;
+            float var14 = (float)(-(Mth.atan2((double)(-var2), var4) * 57.2957763671875D));
+            Phantom.this.setXRot(var14);
+            float var15 = Phantom.this.getYRot() + 90.0F;
+            double var16 = (double)(this.speed * Mth.cos(var15 * 0.017453292F)) * Math.abs((double)var1 / var8);
+            double var18 = (double)(this.speed * Mth.sin(var15 * 0.017453292F)) * Math.abs((double)var3 / var8);
+            double var20 = (double)(this.speed * Mth.sin(var14 * 0.017453292F)) * Math.abs((double)var2 / var8);
+            Vec3 var22 = Phantom.this.getDeltaMovement();
+            Phantom.this.setDeltaMovement(var22.add((new Vec3(var16, var20, var18)).subtract(var22).scale(0.2D)));
          }
+
       }
+   }
 
-      public boolean canContinueToUse() {
-         LivingEntity var1 = Phantom.this.getTarget();
-         return var1 != null ? Phantom.this.canAttack(var1, TargetingConditions.DEFAULT) : false;
+   class PhantomLookControl extends LookControl {
+      public PhantomLookControl(Mob var2) {
+         super(var2);
       }
+
+      public void tick() {
+      }
    }
 
+   class PhantomBodyRotationControl extends BodyRotationControl {
+      public PhantomBodyRotationControl(Mob var2) {
+         super(var2);
+      }
+
+      public void clientTick() {
+         Phantom.this.yHeadRot = Phantom.this.yBodyRot;
+         Phantom.this.yBodyRot = Phantom.this.getYRot();
+      }
+   }
+
    class PhantomAttackStrategyGoal extends Goal {
       private int nextSweepTick;
 
-      private PhantomAttackStrategyGoal() {
+      PhantomAttackStrategyGoal() {
       }
 
       public boolean canUse() {
          LivingEntity var1 = Phantom.this.getTarget();
          return var1 != null ? Phantom.this.canAttack(Phantom.this.getTarget(), TargetingConditions.DEFAULT) : false;
@@ -280,11 +327,11 @@
 
       }
    }
 
    class PhantomSweepAttackGoal extends Phantom.PhantomMoveTargetGoal {
-      private PhantomSweepAttackGoal() {
+      PhantomSweepAttackGoal() {
          super();
       }
 
       public boolean canUse() {
          return Phantom.this.getTarget() != null && Phantom.this.attackPhase == Phantom.AttackPhase.SWOOP;
@@ -347,11 +394,11 @@
       private float angle;
       private float distance;
       private float height;
       private float clockwise;
 
-      private PhantomCircleAroundAnchorGoal() {
+      PhantomCircleAroundAnchorGoal() {
          super();
       }
 
       public boolean canUse() {
          return Phantom.this.getTarget() == null || Phantom.this.attackPhase == Phantom.AttackPhase.CIRCLE;
@@ -406,89 +453,52 @@
          this.angle += this.clockwise * 15.0F * 0.017453292F;
          Phantom.this.moveTargetPoint = Vec3.atLowerCornerOf(Phantom.this.anchorPoint).add((double)(this.distance * Mth.cos(this.angle)), (double)(-4.0F + this.height), (double)(this.distance * Mth.sin(this.angle)));
       }
    }
 
-   abstract class PhantomMoveTargetGoal extends Goal {
-      public PhantomMoveTargetGoal() {
-         this.setFlags(EnumSet.of(Goal.Flag.MOVE));
-      }
+   class PhantomAttackPlayerTargetGoal extends Goal {
+      private final TargetingConditions attackTargeting = TargetingConditions.forCombat().range(64.0D);
+      private int nextScanTick = 20;
 
-      protected boolean touchingTarget() {
-         return Phantom.this.moveTargetPoint.distanceToSqr(Phantom.this.getX(), Phantom.this.getY(), Phantom.this.getZ()) < 4.0D;
+      PhantomAttackPlayerTargetGoal() {
       }
-   }
 
-   class PhantomLookControl extends LookControl {
-      public PhantomLookControl(Mob var2) {
-         super(var2);
-      }
+      public boolean canUse() {
+         if (this.nextScanTick > 0) {
+            --this.nextScanTick;
+            return false;
+         } else {
+            this.nextScanTick = 60;
+            List var1 = Phantom.this.level.getNearbyPlayers(this.attackTargeting, Phantom.this, Phantom.this.getBoundingBox().inflate(16.0D, 64.0D, 16.0D));
+            if (!var1.isEmpty()) {
+               var1.sort(Comparator.comparing(Entity::getY).reversed());
+               Iterator var2 = var1.iterator();
 
-      public void tick() {
-      }
-   }
+               while(var2.hasNext()) {
+                  Player var3 = (Player)var2.next();
+                  if (Phantom.this.canAttack(var3, TargetingConditions.DEFAULT)) {
+                     Phantom.this.setTarget(var3);
+                     return true;
+                  }
+               }
+            }
 
-   class PhantomBodyRotationControl extends BodyRotationControl {
-      public PhantomBodyRotationControl(Mob var2) {
-         super(var2);
+            return false;
+         }
       }
 
-      public void clientTick() {
-         Phantom.this.yHeadRot = Phantom.this.yBodyRot;
-         Phantom.this.yBodyRot = Phantom.this.yRot;
+      public boolean canContinueToUse() {
+         LivingEntity var1 = Phantom.this.getTarget();
+         return var1 != null ? Phantom.this.canAttack(var1, TargetingConditions.DEFAULT) : false;
       }
    }
 
-   class PhantomMoveControl extends MoveControl {
-      private float speed = 0.1F;
-
-      public PhantomMoveControl(Mob var2) {
-         super(var2);
+   abstract class PhantomMoveTargetGoal extends Goal {
+      public PhantomMoveTargetGoal() {
+         this.setFlags(EnumSet.of(Goal.Flag.MOVE));
       }
 
-      public void tick() {
-         if (Phantom.this.horizontalCollision) {
-            Phantom var10000 = Phantom.this;
-            var10000.yRot += 180.0F;
-            this.speed = 0.1F;
-         }
-
-         float var1 = (float)(Phantom.this.moveTargetPoint.x - Phantom.this.getX());
-         float var2 = (float)(Phantom.this.moveTargetPoint.y - Phantom.this.getY());
-         float var3 = (float)(Phantom.this.moveTargetPoint.z - Phantom.this.getZ());
-         double var4 = (double)Mth.sqrt(var1 * var1 + var3 * var3);
-         double var6 = 1.0D - (double)Mth.abs(var2 * 0.7F) / var4;
-         var1 = (float)((double)var1 * var6);
-         var3 = (float)((double)var3 * var6);
-         var4 = (double)Mth.sqrt(var1 * var1 + var3 * var3);
-         double var8 = (double)Mth.sqrt(var1 * var1 + var3 * var3 + var2 * var2);
-         float var10 = Phantom.this.yRot;
-         float var11 = (float)Mth.atan2((double)var3, (double)var1);
-         float var12 = Mth.wrapDegrees(Phantom.this.yRot + 90.0F);
-         float var13 = Mth.wrapDegrees(var11 * 57.295776F);
-         Phantom.this.yRot = Mth.approachDegrees(var12, var13, 4.0F) - 90.0F;
-         Phantom.this.yBodyRot = Phantom.this.yRot;
-         if (Mth.degreesDifferenceAbs(var10, Phantom.this.yRot) < 3.0F) {
-            this.speed = Mth.approach(this.speed, 1.8F, 0.005F * (1.8F / this.speed));
-         } else {
-            this.speed = Mth.approach(this.speed, 0.2F, 0.025F);
-         }
-
-         float var14 = (float)(-(Mth.atan2((double)(-var2), var4) * 57.2957763671875D));
-         Phantom.this.xRot = var14;
-         float var15 = Phantom.this.yRot + 90.0F;
-         double var16 = (double)(this.speed * Mth.cos(var15 * 0.017453292F)) * Math.abs((double)var1 / var8);
-         double var18 = (double)(this.speed * Mth.sin(var15 * 0.017453292F)) * Math.abs((double)var3 / var8);
-         double var20 = (double)(this.speed * Mth.sin(var14 * 0.017453292F)) * Math.abs((double)var2 / var8);
-         Vec3 var22 = Phantom.this.getDeltaMovement();
-         Phantom.this.setDeltaMovement(var22.add((new Vec3(var16, var20, var18)).subtract(var22).scale(0.2D)));
+      protected boolean touchingTarget() {
+         return Phantom.this.moveTargetPoint.distanceToSqr(Phantom.this.getX(), Phantom.this.getY(), Phantom.this.getZ()) < 4.0D;
       }
    }
-
-   static enum AttackPhase {
-      CIRCLE,
-      SWOOP;
-
-      private AttackPhase() {
-      }
-   }
 }
