--- net/minecraft/world/entity/ai/village/poi/PoiManager.java
+++ net/minecraft/world/entity/ai/village/poi/PoiManager.java
@@ -8,10 +8,11 @@
 import it.unimi.dsi.fastutil.longs.LongSet;
 import java.io.File;
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.List;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.Random;
 import java.util.Set;
 import java.util.function.BiConsumer;
 import java.util.function.BooleanSupplier;
@@ -21,41 +22,47 @@
 import java.util.stream.Stream;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.SectionPos;
 import net.minecraft.server.level.SectionTracker;
+import net.minecraft.util.VisibleForDebug;
 import net.minecraft.util.datafix.DataFixTypes;
 import net.minecraft.world.level.ChunkPos;
+import net.minecraft.world.level.LevelHeightAccessor;
 import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.chunk.ChunkStatus;
 import net.minecraft.world.level.chunk.LevelChunkSection;
 import net.minecraft.world.level.chunk.storage.SectionStorage;
 
 public class PoiManager extends SectionStorage<PoiSection> {
+   public static final int MAX_VILLAGE_DISTANCE = 6;
+   public static final int VILLAGE_SECTION_SIZE = 1;
    private final PoiManager.DistanceTracker distanceTracker = new PoiManager.DistanceTracker();
    private final LongSet loadedChunks = new LongOpenHashSet();
 
-   public PoiManager(File var1, DataFixer var2, boolean var3) {
-      super(var1, PoiSection::codec, PoiSection::new, var2, DataFixTypes.POI_CHUNK, var3);
+   public PoiManager(File var1, DataFixer var2, boolean var3, LevelHeightAccessor var4) {
+      super(var1, PoiSection::codec, PoiSection::new, var2, DataFixTypes.POI_CHUNK, var3, var4);
    }
 
    public void add(BlockPos var1, PoiType var2) {
-      ((PoiSection)this.getOrCreate(SectionPos.of(var1).asLong())).add(var1, var2);
+      ((PoiSection)this.getOrCreate(SectionPos.asLong(var1))).add(var1, var2);
    }
 
    public void remove(BlockPos var1) {
-      ((PoiSection)this.getOrCreate(SectionPos.of(var1).asLong())).remove(var1);
+      this.getOrLoad(SectionPos.asLong(var1)).ifPresent((var1x) -> {
+         var1x.remove(var1);
+      });
    }
 
    public long getCountInRange(Predicate<PoiType> var1, BlockPos var2, int var3, PoiManager.Occupancy var4) {
       return this.getInRange(var1, var2, var3, var4).count();
    }
 
    public boolean existsAtPosition(PoiType var1, BlockPos var2) {
-      Optional var3 = ((PoiSection)this.getOrCreate(SectionPos.of(var2).asLong())).getType(var2);
-      return var3.isPresent() && ((PoiType)var3.get()).equals(var1);
+      Objects.requireNonNull(var1);
+      return this.exists(var2, var1::equals);
    }
 
    public Stream<PoiRecord> getInSquare(Predicate<PoiType> var1, BlockPos var2, int var3, PoiManager.Occupancy var4) {
       int var5 = Math.floorDiv(var3, 16) + 1;
       return ChunkPos.rangeClosed(new ChunkPos(var2), var5).flatMap((var3x) -> {
@@ -71,12 +78,13 @@
       return this.getInSquare(var1, var2, var3, var4).filter((var2x) -> {
          return var2x.getPos().distSqr(var2) <= (double)var5;
       });
    }
 
+   @VisibleForDebug
    public Stream<PoiRecord> getInChunk(Predicate<PoiType> var1, ChunkPos var2, PoiManager.Occupancy var3) {
-      return IntStream.range(0, 16).boxed().map((var2x) -> {
+      return IntStream.range(this.levelHeightAccessor.getMinSection(), this.levelHeightAccessor.getMaxSection()).boxed().map((var2x) -> {
          return this.getOrLoad(SectionPos.of(var2, var2x).asLong());
       }).filter(Optional::isPresent).flatMap((var2x) -> {
          return ((PoiSection)var2x.get()).getRecords(var1, var3);
       });
    }
@@ -99,10 +107,16 @@
       return this.getInRange(var1, var2, var3, var4).map(PoiRecord::getPos).min(Comparator.comparingDouble((var1x) -> {
          return var1x.distSqr(var2);
       }));
    }
 
+   public Optional<BlockPos> findClosest(Predicate<PoiType> var1, Predicate<BlockPos> var2, BlockPos var3, int var4, PoiManager.Occupancy var5) {
+      return this.getInRange(var1, var3, var4, var5).map(PoiRecord::getPos).filter(var2).min(Comparator.comparingDouble((var1x) -> {
+         return var1x.distSqr(var3);
+      }));
+   }
+
    public Optional<BlockPos> take(Predicate<PoiType> var1, Predicate<BlockPos> var2, BlockPos var3, int var4) {
       return this.getInRange(var1, var3, var4, PoiManager.Occupancy.HAS_SPACE).filter((var1x) -> {
          return var2.test(var1x.getPos());
       }).findFirst().map((var0) -> {
          var0.acquireTicket();
@@ -117,30 +131,43 @@
          return var2.test(var1x.getPos());
       }).findFirst().map(PoiRecord::getPos);
    }
 
    public boolean release(BlockPos var1) {
-      return ((PoiSection)this.getOrCreate(SectionPos.of(var1).asLong())).release(var1);
+      return (Boolean)this.getOrLoad(SectionPos.asLong(var1)).map((var1x) -> {
+         return var1x.release(var1);
+      }).orElseThrow(() -> {
+         return (IllegalStateException)Util.pauseInIde(new IllegalStateException("POI never registered at " + var1));
+      });
    }
 
    public boolean exists(BlockPos var1, Predicate<PoiType> var2) {
-      return (Boolean)this.getOrLoad(SectionPos.of(var1).asLong()).map((var2x) -> {
+      return (Boolean)this.getOrLoad(SectionPos.asLong(var1)).map((var2x) -> {
          return var2x.exists(var1, var2);
       }).orElse(false);
    }
 
    public Optional<PoiType> getType(BlockPos var1) {
-      PoiSection var2 = (PoiSection)this.getOrCreate(SectionPos.of(var1).asLong());
-      return var2.getType(var1);
+      return this.getOrLoad(SectionPos.asLong(var1)).flatMap((var1x) -> {
+         return var1x.getType(var1);
+      });
    }
 
+   @Deprecated
+   @VisibleForDebug
+   public int getFreeTickets(BlockPos var1) {
+      return (Integer)this.getOrLoad(SectionPos.asLong(var1)).map((var1x) -> {
+         return var1x.getFreeTickets(var1);
+      }).orElse(0);
+   }
+
    public int sectionsToVillage(SectionPos var1) {
       this.distanceTracker.runAllUpdates();
       return this.distanceTracker.getLevel(var1.asLong());
    }
 
-   private boolean isVillageCenter(long var1) {
+   boolean isVillageCenter(long var1) {
       Optional var3 = this.get(var1);
       return var3 == null ? false : (Boolean)var3.map((var0) -> {
          return var0.getRecords(PoiType.ALL, PoiManager.Occupancy.IS_OCCUPIED).count() > 0L;
       }).orElse(false);
    }
@@ -158,30 +185,31 @@
    protected void onSectionLoad(long var1) {
       this.distanceTracker.update(var1, this.distanceTracker.getLevelFromSource(var1), false);
    }
 
    public void checkConsistencyWithBlocks(ChunkPos var1, LevelChunkSection var2) {
-      SectionPos var3 = SectionPos.of(var1, var2.bottomBlockY() >> 4);
+      SectionPos var3 = SectionPos.of(var1, SectionPos.blockToSectionCoord(var2.bottomBlockY()));
       Util.ifElse(this.getOrLoad(var3.asLong()), (var3x) -> {
          var3x.refresh((var3xx) -> {
             if (mayHavePoi(var2)) {
                this.updateFromSection(var2, var3, var3xx);
             }
 
          });
       }, () -> {
          if (mayHavePoi(var2)) {
             PoiSection var3x = (PoiSection)this.getOrCreate(var3.asLong());
+            Objects.requireNonNull(var3x);
             this.updateFromSection(var2, var3, var3x::add);
          }
 
       });
    }
 
    private static boolean mayHavePoi(LevelChunkSection var0) {
       Set var10001 = PoiType.ALL_STATES;
-      var10001.getClass();
+      Objects.requireNonNull(var10001);
       return var0.maybeHas(var10001::contains);
    }
 
    private void updateFromSection(LevelChunkSection var1, SectionPos var2, BiConsumer<BlockPos, PoiType> var3) {
       var2.blocksInside().forEach((var2x) -> {
@@ -191,11 +219,11 @@
          });
       });
    }
 
    public void ensureLoadedAndValid(LevelReader var1, BlockPos var2, int var3) {
-      SectionPos.aroundChunk(new ChunkPos(var2), Math.floorDiv(var3, 16)).map((var1x) -> {
+      SectionPos.aroundChunk(new ChunkPos(var2), Math.floorDiv(var3, 16), this.levelHeightAccessor.getMinSection(), this.levelHeightAccessor.getMaxSection()).map((var1x) -> {
          return Pair.of(var1x, this.getOrLoad(var1x.asLong()));
       }).filter((var0) -> {
          return !(Boolean)((Optional)var0.getSecond()).map(PoiSection::isValid).orElse(false);
       }).map((var0) -> {
          return ((SectionPos)var0.getFirst()).chunk();
