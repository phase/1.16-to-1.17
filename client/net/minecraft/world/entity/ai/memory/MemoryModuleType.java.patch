--- net/minecraft/world/entity/ai/memory/MemoryModuleType.java
+++ net/minecraft/world/entity/ai/memory/MemoryModuleType.java
@@ -9,11 +9,11 @@
 import net.minecraft.core.GlobalPos;
 import net.minecraft.core.Registry;
 import net.minecraft.core.SerializableUUID;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.damagesource.DamageSource;
-import net.minecraft.world.entity.AgableMob;
+import net.minecraft.world.entity.AgeableMob;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.ai.behavior.PositionTracker;
 import net.minecraft.world.entity.item.ItemEntity;
@@ -38,30 +38,38 @@
    public static final MemoryModuleType<WalkTarget> WALK_TARGET;
    public static final MemoryModuleType<PositionTracker> LOOK_TARGET;
    public static final MemoryModuleType<LivingEntity> ATTACK_TARGET;
    public static final MemoryModuleType<Boolean> ATTACK_COOLING_DOWN;
    public static final MemoryModuleType<LivingEntity> INTERACTION_TARGET;
-   public static final MemoryModuleType<AgableMob> BREED_TARGET;
+   public static final MemoryModuleType<AgeableMob> BREED_TARGET;
    public static final MemoryModuleType<Entity> RIDE_TARGET;
    public static final MemoryModuleType<Path> PATH;
    public static final MemoryModuleType<List<GlobalPos>> INTERACTABLE_DOORS;
    public static final MemoryModuleType<Set<GlobalPos>> DOORS_TO_CLOSE;
    public static final MemoryModuleType<BlockPos> NEAREST_BED;
    public static final MemoryModuleType<DamageSource> HURT_BY;
    public static final MemoryModuleType<LivingEntity> HURT_BY_ENTITY;
    public static final MemoryModuleType<LivingEntity> AVOID_TARGET;
    public static final MemoryModuleType<LivingEntity> NEAREST_HOSTILE;
+   public static final MemoryModuleType<LivingEntity> NEAREST_ATTACKABLE;
    public static final MemoryModuleType<GlobalPos> HIDING_PLACE;
    public static final MemoryModuleType<Long> HEARD_BELL_TIME;
    public static final MemoryModuleType<Long> CANT_REACH_WALK_TARGET_SINCE;
    public static final MemoryModuleType<Boolean> GOLEM_DETECTED_RECENTLY;
    public static final MemoryModuleType<Long> LAST_SLEPT;
    public static final MemoryModuleType<Long> LAST_WOKEN;
    public static final MemoryModuleType<Long> LAST_WORKED_AT_POI;
-   public static final MemoryModuleType<AgableMob> NEAREST_VISIBLE_ADULT;
+   public static final MemoryModuleType<AgeableMob> NEAREST_VISIBLE_ADULT;
    public static final MemoryModuleType<ItemEntity> NEAREST_VISIBLE_WANTED_ITEM;
    public static final MemoryModuleType<Mob> NEAREST_VISIBLE_NEMESIS;
+   public static final MemoryModuleType<Integer> PLAY_DEAD_TICKS;
+   public static final MemoryModuleType<Player> TEMPTING_PLAYER;
+   public static final MemoryModuleType<Integer> TEMPTATION_COOLDOWN_TICKS;
+   public static final MemoryModuleType<Boolean> IS_TEMPTED;
+   public static final MemoryModuleType<Integer> LONG_JUMP_COOLDOWN_TICKS;
+   public static final MemoryModuleType<Boolean> LONG_JUMP_MID_JUMP;
+   public static final MemoryModuleType<Boolean> HAS_HUNTING_COOLDOWN;
    public static final MemoryModuleType<UUID> ANGRY_AT;
    public static final MemoryModuleType<Boolean> UNIVERSAL_ANGER;
    public static final MemoryModuleType<Boolean> ADMIRING_ITEM;
    public static final MemoryModuleType<Integer> TIME_TRYING_TO_REACH_ADMIRE_ITEM;
    public static final MemoryModuleType<Boolean> DISABLE_WALK_TO_ADMIRE_ITEM;
@@ -130,20 +138,28 @@
       NEAREST_BED = register("nearest_bed");
       HURT_BY = register("hurt_by");
       HURT_BY_ENTITY = register("hurt_by_entity");
       AVOID_TARGET = register("avoid_target");
       NEAREST_HOSTILE = register("nearest_hostile");
+      NEAREST_ATTACKABLE = register("nearest_attackable");
       HIDING_PLACE = register("hiding_place");
       HEARD_BELL_TIME = register("heard_bell_time");
       CANT_REACH_WALK_TARGET_SINCE = register("cant_reach_walk_target_since");
       GOLEM_DETECTED_RECENTLY = register("golem_detected_recently", Codec.BOOL);
       LAST_SLEPT = register("last_slept", Codec.LONG);
       LAST_WOKEN = register("last_woken", Codec.LONG);
       LAST_WORKED_AT_POI = register("last_worked_at_poi", Codec.LONG);
       NEAREST_VISIBLE_ADULT = register("nearest_visible_adult");
       NEAREST_VISIBLE_WANTED_ITEM = register("nearest_visible_wanted_item");
       NEAREST_VISIBLE_NEMESIS = register("nearest_visible_nemesis");
+      PLAY_DEAD_TICKS = register("play_dead_ticks", Codec.INT);
+      TEMPTING_PLAYER = register("tempting_player");
+      TEMPTATION_COOLDOWN_TICKS = register("temptation_cooldown_ticks", Codec.INT);
+      IS_TEMPTED = register("is_tempted", Codec.BOOL);
+      LONG_JUMP_COOLDOWN_TICKS = register("long_jump_cooling_down", Codec.INT);
+      LONG_JUMP_MID_JUMP = register("long_jump_mid_jump");
+      HAS_HUNTING_COOLDOWN = register("has_hunting_cooldown", Codec.BOOL);
       ANGRY_AT = register("angry_at", SerializableUUID.CODEC);
       UNIVERSAL_ANGER = register("universal_anger", Codec.BOOL);
       ADMIRING_ITEM = register("admiring_item", Codec.BOOL);
       TIME_TRYING_TO_REACH_ADMIRE_ITEM = register("time_trying_to_reach_admire_item");
       DISABLE_WALK_TO_ADMIRE_ITEM = register("disable_walk_to_admire_item");
