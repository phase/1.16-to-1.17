--- net/minecraft/world/entity/ai/navigation/FlyingPathNavigation.java
+++ net/minecraft/world/entity/ai/navigation/FlyingPathNavigation.java
@@ -44,11 +44,11 @@
          Vec3 var1;
          if (this.canUpdatePath()) {
             this.followThePath();
          } else if (this.path != null && !this.path.isDone()) {
             var1 = this.path.getNextEntityPos(this.mob);
-            if (Mth.floor(this.mob.getX()) == Mth.floor(var1.x) && Mth.floor(this.mob.getY()) == Mth.floor(var1.y) && Mth.floor(this.mob.getZ()) == Mth.floor(var1.z)) {
+            if (this.mob.getBlockX() == Mth.floor(var1.x) && this.mob.getBlockY() == Mth.floor(var1.y) && this.mob.getBlockZ() == Mth.floor(var1.z)) {
                this.path.advance();
             }
          }
 
          DebugPackets.sendPathFindingPacket(this.level, this.mob, this.path, this.maxDistanceToWaypoint);
@@ -129,13 +129,21 @@
 
    public void setCanOpenDoors(boolean var1) {
       this.nodeEvaluator.setCanOpenDoors(var1);
    }
 
+   public boolean canPassDoors() {
+      return this.nodeEvaluator.canPassDoors();
+   }
+
    public void setCanPassDoors(boolean var1) {
       this.nodeEvaluator.setCanPassDoors(var1);
    }
 
+   public boolean canOpenDoors() {
+      return this.nodeEvaluator.canPassDoors();
+   }
+
    public boolean isStableDestination(BlockPos var1) {
       return this.level.getBlockState(var1).entityCanStandOn(this.level, var1, this.mob);
    }
 }
