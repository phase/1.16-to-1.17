--- net/minecraft/world/entity/ai/behavior/VillagerMakeLove.java
+++ net/minecraft/world/entity/ai/behavior/VillagerMakeLove.java
@@ -4,24 +4,26 @@
 import java.util.Optional;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.GlobalPos;
 import net.minecraft.network.protocol.game.DebugPackets;
 import net.minecraft.server.level.ServerLevel;
-import net.minecraft.world.entity.AgableMob;
+import net.minecraft.world.entity.AgeableMob;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.ai.Brain;
 import net.minecraft.world.entity.ai.memory.MemoryModuleType;
 import net.minecraft.world.entity.ai.memory.MemoryStatus;
 import net.minecraft.world.entity.ai.village.poi.PoiType;
 import net.minecraft.world.entity.npc.Villager;
 import net.minecraft.world.level.pathfinder.Path;
 
 public class VillagerMakeLove extends Behavior<Villager> {
+   private static final int INTERACT_DIST_SQR = 5;
+   private static final float SPEED_MODIFIER = 0.5F;
    private long birthTimestamp;
 
    public VillagerMakeLove() {
-      super(ImmutableMap.of(MemoryModuleType.BREED_TARGET, MemoryStatus.VALUE_PRESENT, MemoryModuleType.VISIBLE_LIVING_ENTITIES, MemoryStatus.VALUE_PRESENT), 350, 350);
+      super(ImmutableMap.of(MemoryModuleType.BREED_TARGET, MemoryStatus.VALUE_PRESENT, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryStatus.VALUE_PRESENT), 350, 350);
    }
 
    protected boolean checkExtraStartConditions(ServerLevel var1, Villager var2) {
       return this.isBreedingPossible(var2);
    }
@@ -29,11 +31,11 @@
    protected boolean canStillUse(ServerLevel var1, Villager var2, long var3) {
       return var3 <= this.birthTimestamp && this.isBreedingPossible(var2);
    }
 
    protected void start(ServerLevel var1, Villager var2, long var3) {
-      AgableMob var5 = (AgableMob)var2.getBrain().getMemory(MemoryModuleType.BREED_TARGET).get();
+      AgeableMob var5 = (AgeableMob)var2.getBrain().getMemory(MemoryModuleType.BREED_TARGET).get();
       BehaviorUtils.lockGazeAndWalkToEachOther(var2, var5, 0.5F);
       var1.broadcastEntityEvent(var5, (byte)18);
       var1.broadcastEntityEvent(var2, (byte)18);
       int var6 = 275 + var2.getRandom().nextInt(50);
       this.birthTimestamp = var3 + (long)var6;
@@ -82,11 +84,11 @@
          return var0.getType() == EntityType.VILLAGER;
       });
       if (!var3.isPresent()) {
          return false;
       } else {
-         return BehaviorUtils.targetIsValid(var2, MemoryModuleType.BREED_TARGET, EntityType.VILLAGER) && var1.canBreed() && ((AgableMob)var3.get()).canBreed();
+         return BehaviorUtils.targetIsValid(var2, MemoryModuleType.BREED_TARGET, EntityType.VILLAGER) && var1.canBreed() && ((AgeableMob)var3.get()).canBreed();
       }
    }
 
    private Optional<BlockPos> takeVacantBed(ServerLevel var1, Villager var2) {
       return var1.getPoiManager().take(PoiType.HOME.getPredicate(), (var2x) -> {
