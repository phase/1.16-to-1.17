--- net/minecraft/world/entity/ai/behavior/SleepInBed.java
+++ net/minecraft/world/entity/ai/behavior/SleepInBed.java
@@ -4,21 +4,21 @@
 import java.util.Optional;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.GlobalPos;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.tags.BlockTags;
-import net.minecraft.tags.Tag;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.ai.Brain;
 import net.minecraft.world.entity.ai.memory.MemoryModuleType;
 import net.minecraft.world.entity.ai.memory.MemoryStatus;
 import net.minecraft.world.entity.schedule.Activity;
 import net.minecraft.world.level.block.BedBlock;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.pathfinder.Node;
 
 public class SleepInBed extends Behavior<LivingEntity> {
+   public static final int COOLDOWN_AFTER_BEING_WOKEN = 100;
    private long nextOkStartTime;
 
    public SleepInBed() {
       super(ImmutableMap.of(MemoryModuleType.HOME, MemoryStatus.VALUE_PRESENT, MemoryModuleType.LAST_WOKEN, MemoryStatus.REGISTERED));
    }
@@ -39,11 +39,11 @@
                   return false;
                }
             }
 
             BlockState var8 = var1.getBlockState(var4.pos());
-            return var4.pos().closerThan(var2.position(), 2.0D) && var8.getBlock().is((Tag)BlockTags.BEDS) && !(Boolean)var8.getValue(BedBlock.OCCUPIED);
+            return var4.pos().closerThan(var2.position(), 2.0D) && var8.is(BlockTags.BEDS) && !(Boolean)var8.getValue(BedBlock.OCCUPIED);
          }
       }
    }
 
    protected boolean canStillUse(ServerLevel var1, LivingEntity var2, long var3) {
