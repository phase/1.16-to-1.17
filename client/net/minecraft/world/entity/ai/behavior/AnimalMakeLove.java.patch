--- net/minecraft/world/entity/ai/behavior/AnimalMakeLove.java
+++ net/minecraft/world/entity/ai/behavior/AnimalMakeLove.java
@@ -1,26 +1,30 @@
 package net.minecraft.world.entity.ai.behavior;
 
 import com.google.common.collect.ImmutableMap;
 import java.util.List;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.stream.Stream;
 import net.minecraft.server.level.ServerLevel;
-import net.minecraft.world.entity.AgableMob;
+import net.minecraft.world.entity.AgeableMob;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.ai.Brain;
 import net.minecraft.world.entity.ai.memory.MemoryModuleType;
 import net.minecraft.world.entity.ai.memory.MemoryStatus;
 import net.minecraft.world.entity.animal.Animal;
 
 public class AnimalMakeLove extends Behavior<Animal> {
+   private static final int BREED_RANGE = 3;
+   private static final int MIN_DURATION = 60;
+   private static final int MAX_DURATION = 110;
    private final EntityType<? extends Animal> partnerType;
    private final float speedModifier;
    private long spawnChildAtTime;
 
    public AnimalMakeLove(EntityType<? extends Animal> var1, float var2) {
-      super(ImmutableMap.of(MemoryModuleType.VISIBLE_LIVING_ENTITIES, MemoryStatus.VALUE_PRESENT, MemoryModuleType.BREED_TARGET, MemoryStatus.VALUE_ABSENT, MemoryModuleType.WALK_TARGET, MemoryStatus.REGISTERED, MemoryModuleType.LOOK_TARGET, MemoryStatus.REGISTERED), 325);
+      super(ImmutableMap.of(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryStatus.VALUE_PRESENT, MemoryModuleType.BREED_TARGET, MemoryStatus.VALUE_ABSENT, MemoryModuleType.WALK_TARGET, MemoryStatus.REGISTERED, MemoryModuleType.LOOK_TARGET, MemoryStatus.REGISTERED), 110);
       this.partnerType = var1;
       this.speedModifier = var2;
    }
 
    protected boolean checkExtraStartConditions(ServerLevel var1, Animal var2) {
@@ -30,11 +34,11 @@
    protected void start(ServerLevel var1, Animal var2, long var3) {
       Animal var5 = (Animal)this.findValidBreedPartner(var2).get();
       var2.getBrain().setMemory(MemoryModuleType.BREED_TARGET, (Object)var5);
       var5.getBrain().setMemory(MemoryModuleType.BREED_TARGET, (Object)var2);
       BehaviorUtils.lockGazeAndWalkToEachOther(var2, var5, this.speedModifier);
-      int var6 = 275 + var2.getRandom().nextInt(50);
+      int var6 = 60 + var2.getRandom().nextInt(50);
       this.spawnChildAtTime = var3 + (long)var6;
    }
 
    protected boolean canStillUse(ServerLevel var1, Animal var2, long var3) {
       if (!this.hasBreedTargetOfRightType(var2)) {
@@ -69,18 +73,18 @@
       return (Animal)var1.getBrain().getMemory(MemoryModuleType.BREED_TARGET).get();
    }
 
    private boolean hasBreedTargetOfRightType(Animal var1) {
       Brain var2 = var1.getBrain();
-      return var2.hasMemoryValue(MemoryModuleType.BREED_TARGET) && ((AgableMob)var2.getMemory(MemoryModuleType.BREED_TARGET).get()).getType() == this.partnerType;
+      return var2.hasMemoryValue(MemoryModuleType.BREED_TARGET) && ((AgeableMob)var2.getMemory(MemoryModuleType.BREED_TARGET).get()).getType() == this.partnerType;
    }
 
    private Optional<? extends Animal> findValidBreedPartner(Animal var1) {
-      Stream var10000 = ((List)var1.getBrain().getMemory(MemoryModuleType.VISIBLE_LIVING_ENTITIES).get()).stream().filter((var1x) -> {
+      Stream var10000 = ((List)var1.getBrain().getMemory(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES).get()).stream().filter((var1x) -> {
          return var1x.getType() == this.partnerType;
       }).map((var0) -> {
          return (Animal)var0;
       });
-      var1.getClass();
+      Objects.requireNonNull(var1);
       return var10000.filter(var1::canMate).findFirst();
    }
 }
