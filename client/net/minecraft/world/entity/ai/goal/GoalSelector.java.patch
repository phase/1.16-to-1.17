--- net/minecraft/world/entity/ai/goal/GoalSelector.java
+++ net/minecraft/world/entity/ai/goal/GoalSelector.java
@@ -1,7 +1,8 @@
 package net.minecraft.world.entity.ai.goal;
 
+import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.Sets;
 import java.util.EnumMap;
 import java.util.EnumSet;
 import java.util.Map;
 import java.util.Set;
@@ -24,20 +25,26 @@
    };
    private final Map<Goal.Flag, WrappedGoal> lockedFlags = new EnumMap(Goal.Flag.class);
    private final Set<WrappedGoal> availableGoals = Sets.newLinkedHashSet();
    private final Supplier<ProfilerFiller> profiler;
    private final EnumSet<Goal.Flag> disabledFlags = EnumSet.noneOf(Goal.Flag.class);
+   private int tickCount;
    private int newGoalRate = 3;
 
    public GoalSelector(Supplier<ProfilerFiller> var1) {
       this.profiler = var1;
    }
 
    public void addGoal(int var1, Goal var2) {
       this.availableGoals.add(new WrappedGoal(var1, var2));
    }
 
+   @VisibleForTesting
+   public void removeAllGoals() {
+      this.availableGoals.clear();
+   }
+
    public void removeGoal(Goal var1) {
       this.availableGoals.stream().filter((var1x) -> {
          return var1x.getGoal() == var1;
       }).filter(WrappedGoal::isRunning).forEach(WrappedGoal::stop);
       this.availableGoals.removeIf((var1x) -> {
@@ -94,14 +101,22 @@
       var1.push("goalTick");
       this.getRunningGoals().forEach(WrappedGoal::tick);
       var1.pop();
    }
 
+   public Set<WrappedGoal> getAvailableGoals() {
+      return this.availableGoals;
+   }
+
    public Stream<WrappedGoal> getRunningGoals() {
       return this.availableGoals.stream().filter(WrappedGoal::isRunning);
    }
 
+   public void setNewGoalRate(int var1) {
+      this.newGoalRate = var1;
+   }
+
    public void disableControlFlag(Goal.Flag var1) {
       this.disabledFlags.add(var1);
    }
 
    public void enableControlFlag(Goal.Flag var1) {
