--- net/minecraft/world/entity/ai/goal/RangedCrossbowAttackGoal.java
+++ net/minecraft/world/entity/ai/goal/RangedCrossbowAttackGoal.java
@@ -1,9 +1,10 @@
 package net.minecraft.world.entity.ai.goal;
 
 import java.util.EnumSet;
-import net.minecraft.util.IntRange;
+import net.minecraft.util.TimeUtil;
+import net.minecraft.util.valueproviders.UniformInt;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.monster.CrossbowAttackMob;
 import net.minecraft.world.entity.monster.Monster;
 import net.minecraft.world.entity.monster.RangedAttackMob;
@@ -11,11 +12,11 @@
 import net.minecraft.world.item.CrossbowItem;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 
 public class RangedCrossbowAttackGoal<T extends Monster & RangedAttackMob & CrossbowAttackMob> extends Goal {
-   public static final IntRange PATHFINDING_DELAY_RANGE = new IntRange(20, 40);
+   public static final UniformInt PATHFINDING_DELAY_RANGE = TimeUtil.rangeOfSeconds(1, 2);
    private final T mob;
    private RangedCrossbowAttackGoal.CrossbowState crossbowState;
    private final double speedModifier;
    private final float attackRadiusSqr;
    private int seeTime;
@@ -60,11 +61,11 @@
    }
 
    public void tick() {
       LivingEntity var1 = this.mob.getTarget();
       if (var1 != null) {
-         boolean var2 = this.mob.getSensing().canSee(var1);
+         boolean var2 = this.mob.getSensing().hasLineOfSight(var1);
          boolean var3 = this.seeTime > 0;
          if (var2 != var3) {
             this.seeTime = 0;
          }
 
@@ -78,11 +79,11 @@
          boolean var6 = (var4 > (double)this.attackRadiusSqr || this.seeTime < 5) && this.attackDelay == 0;
          if (var6) {
             --this.updatePathDelay;
             if (this.updatePathDelay <= 0) {
                this.mob.getNavigation().moveTo((Entity)var1, this.canRun() ? this.speedModifier : this.speedModifier * 0.5D);
-               this.updatePathDelay = PATHFINDING_DELAY_RANGE.randomValue(this.mob.getRandom());
+               this.updatePathDelay = PATHFINDING_DELAY_RANGE.sample(this.mob.getRandom());
             }
          } else {
             this.updatePathDelay = 0;
             this.mob.getNavigation().stop();
          }
@@ -124,11 +125,11 @@
 
    private boolean canRun() {
       return this.crossbowState == RangedCrossbowAttackGoal.CrossbowState.UNCHARGED;
    }
 
-   static enum CrossbowState {
+   private static enum CrossbowState {
       UNCHARGED,
       CHARGING,
       CHARGED,
       READY_TO_ATTACK;
 
