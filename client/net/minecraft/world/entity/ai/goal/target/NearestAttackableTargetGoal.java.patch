--- net/minecraft/world/entity/ai/goal/target/NearestAttackableTargetGoal.java
+++ net/minecraft/world/entity/ai/goal/target/NearestAttackableTargetGoal.java
@@ -28,11 +28,11 @@
    public NearestAttackableTargetGoal(Mob var1, Class<T> var2, int var3, boolean var4, boolean var5, @Nullable Predicate<LivingEntity> var6) {
       super(var1, var4, var5);
       this.targetType = var2;
       this.randomInterval = var3;
       this.setFlags(EnumSet.of(Goal.Flag.TARGET));
-      this.targetConditions = (new TargetingConditions()).range(this.getFollowDistance()).selector(var6);
+      this.targetConditions = TargetingConditions.forCombat().range(this.getFollowDistance()).selector(var6);
    }
 
    public boolean canUse() {
       if (this.randomInterval > 0 && this.mob.getRandom().nextInt(this.randomInterval) != 0) {
          return false;
@@ -46,11 +46,13 @@
       return this.mob.getBoundingBox().inflate(var1, 4.0D, var1);
    }
 
    protected void findTarget() {
       if (this.targetType != Player.class && this.targetType != ServerPlayer.class) {
-         this.target = this.mob.level.getNearestLoadedEntity(this.targetType, this.targetConditions, this.mob, this.mob.getX(), this.mob.getEyeY(), this.mob.getZ(), this.getTargetSearchArea(this.getFollowDistance()));
+         this.target = this.mob.level.getNearestEntity(this.mob.level.getEntitiesOfClass(this.targetType, this.getTargetSearchArea(this.getFollowDistance()), (var0) -> {
+            return true;
+         }), this.targetConditions, this.mob, this.mob.getX(), this.mob.getEyeY(), this.mob.getZ());
       } else {
          this.target = this.mob.level.getNearestPlayer(this.targetConditions, this.mob, this.mob.getX(), this.mob.getEyeY(), this.mob.getZ());
       }
 
    }
