--- net/minecraft/world/entity/ai/sensing/PiglinSpecificSensor.java
+++ net/minecraft/world/entity/ai/sensing/PiglinSpecificSensor.java
@@ -9,11 +9,10 @@
 import java.util.Optional;
 import java.util.Set;
 import net.minecraft.core.BlockPos;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.tags.BlockTags;
-import net.minecraft.world.entity.EntitySelector;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.ai.Brain;
 import net.minecraft.world.entity.ai.memory.MemoryModuleType;
 import net.minecraft.world.entity.boss.wither.WitherBoss;
@@ -31,11 +30,11 @@
 public class PiglinSpecificSensor extends Sensor<LivingEntity> {
    public PiglinSpecificSensor() {
    }
 
    public Set<MemoryModuleType<?>> requires() {
-      return ImmutableSet.of(MemoryModuleType.VISIBLE_LIVING_ENTITIES, MemoryModuleType.LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_NEMESIS, MemoryModuleType.NEAREST_TARGETABLE_PLAYER_NOT_WEARING_GOLD, MemoryModuleType.NEAREST_PLAYER_HOLDING_WANTED_ITEM, MemoryModuleType.NEAREST_VISIBLE_HUNTABLE_HOGLIN, new MemoryModuleType[]{MemoryModuleType.NEAREST_VISIBLE_BABY_HOGLIN, MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLINS, MemoryModuleType.NEARBY_ADULT_PIGLINS, MemoryModuleType.VISIBLE_ADULT_PIGLIN_COUNT, MemoryModuleType.VISIBLE_ADULT_HOGLIN_COUNT, MemoryModuleType.NEAREST_REPELLENT});
+      return ImmutableSet.of(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_NEMESIS, MemoryModuleType.NEAREST_TARGETABLE_PLAYER_NOT_WEARING_GOLD, MemoryModuleType.NEAREST_PLAYER_HOLDING_WANTED_ITEM, MemoryModuleType.NEAREST_VISIBLE_HUNTABLE_HOGLIN, new MemoryModuleType[]{MemoryModuleType.NEAREST_VISIBLE_BABY_HOGLIN, MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLINS, MemoryModuleType.NEARBY_ADULT_PIGLINS, MemoryModuleType.VISIBLE_ADULT_PIGLIN_COUNT, MemoryModuleType.VISIBLE_ADULT_HOGLIN_COUNT, MemoryModuleType.NEAREST_REPELLENT});
    }
 
    protected void doTick(ServerLevel var1, LivingEntity var2) {
       Brain var3 = var2.getBrain();
       var3.setMemory(MemoryModuleType.NEAREST_REPELLENT, findNearestRepellent(var1, var2));
@@ -47,11 +46,11 @@
       Optional var9 = Optional.empty();
       Optional var10 = Optional.empty();
       int var11 = 0;
       ArrayList var12 = Lists.newArrayList();
       ArrayList var13 = Lists.newArrayList();
-      List var14 = (List)var3.getMemory(MemoryModuleType.VISIBLE_LIVING_ENTITIES).orElse(ImmutableList.of());
+      List var14 = (List)var3.getMemory(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES).orElse(ImmutableList.of());
       Iterator var15 = var14.iterator();
 
       while(true) {
          while(true) {
             while(var15.hasNext()) {
@@ -75,11 +74,11 @@
                   } else if (var20.isAdult()) {
                      var12.add(var20);
                   }
                } else if (var16 instanceof Player) {
                   Player var17 = (Player)var16;
-                  if (!var9.isPresent() && EntitySelector.ATTACK_ALLOWED.test(var16) && !PiglinAi.isWearingGold(var17)) {
+                  if (!var9.isPresent() && var16.canBeSeenAsEnemy() && !PiglinAi.isWearingGold(var17)) {
                      var9 = Optional.of(var17);
                   }
 
                   if (!var10.isPresent() && !var17.isSpectator() && PiglinAi.isPlayerHoldingLovedItem(var17)) {
                      var10 = Optional.of(var17);
@@ -91,11 +90,11 @@
                } else {
                   var4 = Optional.of((Mob)var16);
                }
             }
 
-            List var18 = (List)var3.getMemory(MemoryModuleType.LIVING_ENTITIES).orElse(ImmutableList.of());
+            List var18 = (List)var3.getMemory(MemoryModuleType.NEAREST_LIVING_ENTITIES).orElse(ImmutableList.of());
             Iterator var19 = var18.iterator();
 
             while(var19.hasNext()) {
                LivingEntity var22 = (LivingEntity)var19.next();
                if (var22 instanceof AbstractPiglin && ((AbstractPiglin)var22).isAdult()) {
