--- net/minecraft/world/entity/Mob.java
+++ net/minecraft/world/entity/Mob.java
@@ -64,18 +64,25 @@
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.ServerLevelAccessor;
-import net.minecraft.world.level.block.AbstractSkullBlock;
-import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.material.Fluid;
 import net.minecraft.world.level.pathfinder.BlockPathTypes;
 import net.minecraft.world.level.storage.loot.LootContext;
 
 public abstract class Mob extends LivingEntity {
    private static final EntityDataAccessor<Byte> DATA_MOB_FLAGS_ID;
+   private static final int MOB_FLAG_NO_AI = 1;
+   private static final int MOB_FLAG_LEFTHANDED = 2;
+   private static final int MOB_FLAG_AGGRESSIVE = 4;
+   public static final float MAX_WEARING_ARMOR_CHANCE = 0.15F;
+   public static final float MAX_PICKUP_LOOT_CHANCE = 0.55F;
+   public static final float MAX_ENCHANTED_ARMOR_CHANCE = 0.5F;
+   public static final float MAX_ENCHANTED_WEAPON_CHANCE = 0.25F;
+   public static final String LEASH_TAG = "Leash";
+   private static final int PICKUP_REACH = 1;
    public int ambientSoundTime;
    protected int xpReward;
    protected LookControl lookControl;
    protected MoveControl moveControl;
    protected JumpControl jumpControl;
@@ -504,11 +511,11 @@
          List var1 = this.level.getEntitiesOfClass(ItemEntity.class, this.getBoundingBox().inflate(1.0D, 0.0D, 1.0D));
          Iterator var2 = var1.iterator();
 
          while(var2.hasNext()) {
             ItemEntity var3 = (ItemEntity)var2.next();
-            if (!var3.removed && !var3.getItem().isEmpty() && !var3.hasPickUpDelay() && this.wantsToPickUp(var3.getItem())) {
+            if (!var3.isRemoved() && !var3.getItem().isEmpty() && !var3.hasPickUpDelay() && this.wantsToPickUp(var3.getItem())) {
                this.pickUpItem(var3);
             }
          }
       }
 
@@ -518,11 +525,11 @@
    protected void pickUpItem(ItemEntity var1) {
       ItemStack var2 = var1.getItem();
       if (this.equipItemIfPossible(var2)) {
          this.onItemPickup(var1);
          this.take(var1, var2.getCount());
-         var1.remove();
+         var1.discard();
       }
 
    }
 
    public boolean equipItemIfPossible(ItemStack var1) {
@@ -534,11 +541,11 @@
          if (!var3.isEmpty() && (double)Math.max(this.random.nextFloat() - 0.1F, 0.0F) < var5) {
             this.spawnAtLocation(var3);
          }
 
          this.setItemSlotAndDropWhenKilled(var2, var1);
-         this.playEquipSound(var1);
+         this.equipEventAndSound(var1);
          return true;
       } else {
          return false;
       }
    }
@@ -652,25 +659,25 @@
       return false;
    }
 
    public void checkDespawn() {
       if (this.level.getDifficulty() == Difficulty.PEACEFUL && this.shouldDespawnInPeaceful()) {
-         this.remove();
+         this.discard();
       } else if (!this.isPersistenceRequired() && !this.requiresCustomPersistence()) {
          Player var1 = this.level.getNearestPlayer(this, -1.0D);
          if (var1 != null) {
             double var2 = var1.distanceToSqr((Entity)this);
             int var4 = this.getType().getCategory().getDespawnDistance();
             int var5 = var4 * var4;
             if (var2 > (double)var5 && this.removeWhenFarAway(var2)) {
-               this.remove();
+               this.discard();
             }
 
             int var6 = this.getType().getCategory().getNoDespawnDistance();
             int var7 = var6 * var6;
             if (this.noActionTime > 600 && this.random.nextInt(800) == 0 && var2 > (double)var7 && this.removeWhenFarAway(var2)) {
-               this.remove();
+               this.discard();
             } else if (var2 < (double)var7) {
                this.noActionTime = 0;
             }
          }
 
@@ -736,15 +743,15 @@
          var6 = var10.getEyeY() - this.getEyeY();
       } else {
          var6 = (var1.getBoundingBox().minY + var1.getBoundingBox().maxY) / 2.0D - this.getEyeY();
       }
 
-      double var14 = (double)Mth.sqrt(var4 * var4 + var8 * var8);
+      double var14 = Math.sqrt(var4 * var4 + var8 * var8);
       float var12 = (float)(Mth.atan2(var8, var4) * 57.2957763671875D) - 90.0F;
       float var13 = (float)(-(Mth.atan2(var6, var14) * 57.2957763671875D));
-      this.xRot = this.rotlerp(this.xRot, var13, var3);
-      this.yRot = this.rotlerp(this.yRot, var12, var2);
+      this.setXRot(this.rotlerp(this.getXRot(), var13, var3));
+      this.setYRot(this.rotlerp(this.getYRot(), var12, var2));
    }
 
    private float rotlerp(float var1, float var2, float var3) {
       float var4 = Mth.wrapDegrees(var2 - var1);
       if (var4 > var3) {
@@ -900,25 +907,10 @@
          }
       }
 
    }
 
-   public static EquipmentSlot getEquipmentSlotForItem(ItemStack var0) {
-      Item var1 = var0.getItem();
-      if (var1 != Blocks.CARVED_PUMPKIN.asItem() && (!(var1 instanceof BlockItem) || !(((BlockItem)var1).getBlock() instanceof AbstractSkullBlock))) {
-         if (var1 instanceof ArmorItem) {
-            return ((ArmorItem)var1).getSlot();
-         } else if (var1 == Items.ELYTRA) {
-            return EquipmentSlot.CHEST;
-         } else {
-            return var1 == Items.SHIELD ? EquipmentSlot.OFFHAND : EquipmentSlot.MAINHAND;
-         }
-      } else {
-         return EquipmentSlot.HEAD;
-      }
-   }
-
    @Nullable
    public static Item getEquipmentForSlot(EquipmentSlot var0, int var1) {
       switch(var0) {
       case HEAD:
          if (var1 == 0) {
@@ -1053,11 +1045,11 @@
 
    public final InteractionResult interact(Player var1, InteractionHand var2) {
       if (!this.isAlive()) {
          return InteractionResult.PASS;
       } else if (this.getLeashHolder() == var1) {
-         this.dropLeash(true, !var1.abilities.instabuild);
+         this.dropLeash(true, !var1.getAbilities().instabuild);
          return InteractionResult.sidedSuccess(this.level.isClientSide);
       } else {
          InteractionResult var3 = this.checkAndHandleImportantInteractions(var1, var2);
          if (var3.consumesAction()) {
             return var3;
@@ -1068,16 +1060,16 @@
       }
    }
 
    private InteractionResult checkAndHandleImportantInteractions(Player var1, InteractionHand var2) {
       ItemStack var3 = var1.getItemInHand(var2);
-      if (var3.getItem() == Items.LEAD && this.canBeLeashed(var1)) {
+      if (var3.is(Items.LEAD) && this.canBeLeashed(var1)) {
          this.setLeashedTo(var1, true);
          var3.shrink(1);
          return InteractionResult.sidedSuccess(this.level.isClientSide);
       } else {
-         if (var3.getItem() == Items.NAME_TAG) {
+         if (var3.is(Items.NAME_TAG)) {
             InteractionResult var4 = var3.interactLivingEntity(var1, this, var2);
             if (var4.consumesAction()) {
                return var4;
             }
          }
@@ -1129,17 +1121,21 @@
 
    public float getRestrictRadius() {
       return this.restrictRadius;
    }
 
+   public void clearRestriction() {
+      this.restrictRadius = -1.0F;
+   }
+
    public boolean hasRestriction() {
       return this.restrictRadius != -1.0F;
    }
 
    @Nullable
    public <T extends Mob> T convertTo(EntityType<T> var1, boolean var2) {
-      if (this.removed) {
+      if (this.isRemoved()) {
          return null;
       } else {
          Mob var3 = (Mob)var1.create(this.level);
          var3.copyPosition(this);
          var3.setBaby(this.isBaby());
@@ -1175,11 +1171,11 @@
             Entity var9 = this.getVehicle();
             this.stopRiding();
             var3.startRiding(var9, true);
          }
 
-         this.remove();
+         this.discard();
          return var3;
       }
    }
 
    protected void tickLeash() {
@@ -1195,15 +1191,10 @@
       }
    }
 
    public void dropLeash(boolean var1, boolean var2) {
       if (this.leashHolder != null) {
-         this.forcedLoading = false;
-         if (!(this.leashHolder instanceof Player)) {
-            this.leashHolder.forcedLoading = false;
-         }
-
          this.leashHolder = null;
          this.leashInfoTag = null;
          if (!this.level.isClientSide && var2) {
             this.spawnAtLocation(Items.LEAD);
          }
@@ -1233,15 +1224,10 @@
    }
 
    public void setLeashedTo(Entity var1, boolean var2) {
       this.leashHolder = var1;
       this.leashInfoTag = null;
-      this.forcedLoading = true;
-      if (!(this.leashHolder instanceof Player)) {
-         this.leashHolder.forcedLoading = true;
-      }
-
       if (!this.level.isClientSide && var2 && this.level instanceof ServerLevel) {
          ((ServerLevel)this.level).getChunkSource().broadcast(this, new ClientboundSetEntityLinkPacket(this, this.leashHolder));
       }
 
       if (this.isPassenger()) {
@@ -1285,47 +1271,14 @@
          }
       }
 
    }
 
-   public boolean setSlot(int var1, ItemStack var2) {
-      EquipmentSlot var3;
-      if (var1 == 98) {
-         var3 = EquipmentSlot.MAINHAND;
-      } else if (var1 == 99) {
-         var3 = EquipmentSlot.OFFHAND;
-      } else if (var1 == 100 + EquipmentSlot.HEAD.getIndex()) {
-         var3 = EquipmentSlot.HEAD;
-      } else if (var1 == 100 + EquipmentSlot.CHEST.getIndex()) {
-         var3 = EquipmentSlot.CHEST;
-      } else if (var1 == 100 + EquipmentSlot.LEGS.getIndex()) {
-         var3 = EquipmentSlot.LEGS;
-      } else {
-         if (var1 != 100 + EquipmentSlot.FEET.getIndex()) {
-            return false;
-         }
-
-         var3 = EquipmentSlot.FEET;
-      }
-
-      if (!var2.isEmpty() && !isValidSlotForItem(var3, var2) && var3 != EquipmentSlot.HEAD) {
-         return false;
-      } else {
-         this.setItemSlot(var3, var2);
-         return true;
-      }
-   }
-
    public boolean isControlledByLocalInstance() {
       return this.canBeControlledByRider() && super.isControlledByLocalInstance();
    }
 
-   public static boolean isValidSlotForItem(EquipmentSlot var0, ItemStack var1) {
-      EquipmentSlot var2 = getEquipmentSlotForItem(var1);
-      return var2 == var0 || var2 == EquipmentSlot.MAINHAND && var0 == EquipmentSlot.OFFHAND || var2 == EquipmentSlot.OFFHAND && var0 == EquipmentSlot.MAINHAND;
-   }
-
    public boolean isEffectiveAi() {
       return super.isEffectiveAi() && !this.isNoAi();
    }
 
    public void setNoAi(boolean var1) {
@@ -1360,12 +1313,12 @@
 
    public HumanoidArm getMainArm() {
       return this.isLeftHanded() ? HumanoidArm.LEFT : HumanoidArm.RIGHT;
    }
 
-   public boolean canAttack(LivingEntity var1) {
-      return var1.getType() == EntityType.PLAYER && ((Player)var1).abilities.invulnerable ? false : super.canAttack(var1);
+   public double getMeleeAttackRangeSqr(LivingEntity var1) {
+      return (double)(this.getBbWidth() * 2.0F * this.getBbWidth() * 2.0F + var1.getBbWidth());
    }
 
    public boolean doHurtTarget(Entity var1) {
       float var2 = (float)this.getAttributeValue(Attributes.ATTACK_DAMAGE);
       float var3 = (float)this.getAttributeValue(Attributes.ATTACK_KNOCKBACK);
@@ -1380,11 +1333,11 @@
       }
 
       boolean var5 = var1.hurt(DamageSource.mobAttack(this), var2);
       if (var5) {
          if (var3 > 0.0F && var1 instanceof LivingEntity) {
-            ((LivingEntity)var1).knockback(var3 * 0.5F, (double)Mth.sin(this.yRot * 0.017453292F), (double)(-Mth.cos(this.yRot * 0.017453292F)));
+            ((LivingEntity)var1).knockback((double)(var3 * 0.5F), (double)Mth.sin(this.getYRot() * 0.017453292F), (double)(-Mth.cos(this.getYRot() * 0.017453292F)));
             this.setDeltaMovement(this.getDeltaMovement().multiply(0.6D, 1.0D, 0.6D));
          }
 
          if (var1 instanceof Player) {
             Player var6 = (Player)var1;
@@ -1397,11 +1350,11 @@
 
       return var5;
    }
 
    private void maybeDisableShield(Player var1, ItemStack var2, ItemStack var3) {
-      if (!var2.isEmpty() && !var3.isEmpty() && var2.getItem() instanceof AxeItem && var3.getItem() == Items.SHIELD) {
+      if (!var2.isEmpty() && !var3.isEmpty() && var2.getItem() instanceof AxeItem && var3.is(Items.SHIELD)) {
          float var4 = 0.25F + (float)EnchantmentHelper.getBlockEfficiency(this) * 0.05F;
          if (this.random.nextFloat() < var4) {
             var1.getCooldowns().addCooldown(Items.SHIELD, 100);
             this.level.broadcastEntityEvent(var1, (byte)30);
          }
@@ -1410,12 +1363,13 @@
    }
 
    protected boolean isSunBurnTick() {
       if (this.level.isDay() && !this.level.isClientSide) {
          float var1 = this.getBrightness();
-         BlockPos var2 = this.getVehicle() instanceof Boat ? (new BlockPos(this.getX(), (double)Math.round(this.getY()), this.getZ())).above() : new BlockPos(this.getX(), (double)Math.round(this.getY()), this.getZ());
-         if (var1 > 0.5F && this.random.nextFloat() * 30.0F < (var1 - 0.4F) * 2.0F && this.level.canSeeSky(var2)) {
+         BlockPos var2 = new BlockPos(this.getX(), this.getEyeY(), this.getZ());
+         boolean var3 = this.isInWaterRainOrBubble() || this.isInPowderSnow || this.wasInPowderSnow;
+         if (var1 > 0.5F && this.random.nextFloat() * 30.0F < (var1 - 0.4F) * 2.0F && !var3 && this.level.canSeeSky(var2)) {
             return true;
          }
       }
 
       return false;
@@ -1428,14 +1382,25 @@
          this.setDeltaMovement(this.getDeltaMovement().add(0.0D, 0.3D, 0.0D));
       }
 
    }
 
+   public void removeFreeWill() {
+      this.goalSelector.removeAllGoals();
+      this.getBrain().removeAllBehaviors();
+   }
+
    protected void removeAfterChangingDimensions() {
       super.removeAfterChangingDimensions();
       this.dropLeash(true, false);
    }
 
+   @Nullable
+   public ItemStack getPickResult() {
+      SpawnEggItem var1 = SpawnEggItem.byId(this.getType());
+      return var1 == null ? null : new ItemStack(var1);
+   }
+
    static {
       DATA_MOB_FLAGS_ID = SynchedEntityData.defineId(Mob.class, EntityDataSerializers.BYTE);
    }
 }
