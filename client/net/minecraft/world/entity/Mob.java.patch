--- net/minecraft/world/entity/Mob.java
+++ net/minecraft/world/entity/Mob.java
@@ -504,11 +504,11 @@
          List var1 = this.level.getEntitiesOfClass(ItemEntity.class, this.getBoundingBox().inflate(1.0D, 0.0D, 1.0D));
          Iterator var2 = var1.iterator();
 
          while(var2.hasNext()) {
             ItemEntity var3 = (ItemEntity)var2.next();
-            if (!var3.removed && !var3.getItem().isEmpty() && !var3.hasPickUpDelay() && this.wantsToPickUp(var3.getItem())) {
+            if (!var3.isRemoved() && !var3.getItem().isEmpty() && !var3.hasPickUpDelay() && this.wantsToPickUp(var3.getItem())) {
                this.pickUpItem(var3);
             }
          }
       }
 
@@ -518,11 +518,11 @@
    protected void pickUpItem(ItemEntity var1) {
       ItemStack var2 = var1.getItem();
       if (this.equipItemIfPossible(var2)) {
          this.onItemPickup(var1);
          this.take(var1, var2.getCount());
-         var1.remove();
+         var1.discard();
       }
 
    }
 
    public boolean equipItemIfPossible(ItemStack var1) {
@@ -652,25 +652,25 @@
       return false;
    }
 
    public void checkDespawn() {
       if (this.level.getDifficulty() == Difficulty.PEACEFUL && this.shouldDespawnInPeaceful()) {
-         this.remove();
+         this.discard();
       } else if (!this.isPersistenceRequired() && !this.requiresCustomPersistence()) {
          Player var1 = this.level.getNearestPlayer(this, -1.0D);
          if (var1 != null) {
             double var2 = var1.distanceToSqr((Entity)this);
             int var4 = this.getType().getCategory().getDespawnDistance();
             int var5 = var4 * var4;
             if (var2 > (double)var5 && this.removeWhenFarAway(var2)) {
-               this.remove();
+               this.discard();
             }
 
             int var6 = this.getType().getCategory().getNoDespawnDistance();
             int var7 = var6 * var6;
             if (this.noActionTime > 600 && this.random.nextInt(800) == 0 && var2 > (double)var7 && this.removeWhenFarAway(var2)) {
-               this.remove();
+               this.discard();
             } else if (var2 < (double)var7) {
                this.noActionTime = 0;
             }
          }
 
@@ -902,17 +902,17 @@
 
    }
 
    public static EquipmentSlot getEquipmentSlotForItem(ItemStack var0) {
       Item var1 = var0.getItem();
-      if (var1 != Blocks.CARVED_PUMPKIN.asItem() && (!(var1 instanceof BlockItem) || !(((BlockItem)var1).getBlock() instanceof AbstractSkullBlock))) {
+      if (!var0.is(Blocks.CARVED_PUMPKIN.asItem()) && (!(var1 instanceof BlockItem) || !(((BlockItem)var1).getBlock() instanceof AbstractSkullBlock))) {
          if (var1 instanceof ArmorItem) {
             return ((ArmorItem)var1).getSlot();
-         } else if (var1 == Items.ELYTRA) {
+         } else if (var0.is(Items.ELYTRA)) {
             return EquipmentSlot.CHEST;
          } else {
-            return var1 == Items.SHIELD ? EquipmentSlot.OFFHAND : EquipmentSlot.MAINHAND;
+            return var0.is(Items.SHIELD) ? EquipmentSlot.OFFHAND : EquipmentSlot.MAINHAND;
          }
       } else {
          return EquipmentSlot.HEAD;
       }
    }
@@ -1053,11 +1053,11 @@
 
    public final InteractionResult interact(Player var1, InteractionHand var2) {
       if (!this.isAlive()) {
          return InteractionResult.PASS;
       } else if (this.getLeashHolder() == var1) {
-         this.dropLeash(true, !var1.abilities.instabuild);
+         this.dropLeash(true, !var1.getAbilities().instabuild);
          return InteractionResult.sidedSuccess(this.level.isClientSide);
       } else {
          InteractionResult var3 = this.checkAndHandleImportantInteractions(var1, var2);
          if (var3.consumesAction()) {
             return var3;
@@ -1068,16 +1068,16 @@
       }
    }
 
    private InteractionResult checkAndHandleImportantInteractions(Player var1, InteractionHand var2) {
       ItemStack var3 = var1.getItemInHand(var2);
-      if (var3.getItem() == Items.LEAD && this.canBeLeashed(var1)) {
+      if (var3.is(Items.LEAD) && this.canBeLeashed(var1)) {
          this.setLeashedTo(var1, true);
          var3.shrink(1);
          return InteractionResult.sidedSuccess(this.level.isClientSide);
       } else {
-         if (var3.getItem() == Items.NAME_TAG) {
+         if (var3.is(Items.NAME_TAG)) {
             InteractionResult var4 = var3.interactLivingEntity(var1, this, var2);
             if (var4.consumesAction()) {
                return var4;
             }
          }
@@ -1135,11 +1135,11 @@
       return this.restrictRadius != -1.0F;
    }
 
    @Nullable
    public <T extends Mob> T convertTo(EntityType<T> var1, boolean var2) {
-      if (this.removed) {
+      if (this.isRemoved()) {
          return null;
       } else {
          Mob var3 = (Mob)var1.create(this.level);
          var3.copyPosition(this);
          var3.setBaby(this.isBaby());
@@ -1175,11 +1175,11 @@
             Entity var9 = this.getVehicle();
             this.stopRiding();
             var3.startRiding(var9, true);
          }
 
-         this.remove();
+         this.discard();
          return var3;
       }
    }
 
    protected void tickLeash() {
@@ -1361,11 +1361,11 @@
    public HumanoidArm getMainArm() {
       return this.isLeftHanded() ? HumanoidArm.LEFT : HumanoidArm.RIGHT;
    }
 
    public boolean canAttack(LivingEntity var1) {
-      return var1.getType() == EntityType.PLAYER && ((Player)var1).abilities.invulnerable ? false : super.canAttack(var1);
+      return var1.getType() == EntityType.PLAYER && ((Player)var1).getAbilities().invulnerable ? false : super.canAttack(var1);
    }
 
    public boolean doHurtTarget(Entity var1) {
       float var2 = (float)this.getAttributeValue(Attributes.ATTACK_DAMAGE);
       float var3 = (float)this.getAttributeValue(Attributes.ATTACK_KNOCKBACK);
@@ -1397,11 +1397,11 @@
 
       return var5;
    }
 
    private void maybeDisableShield(Player var1, ItemStack var2, ItemStack var3) {
-      if (!var2.isEmpty() && !var3.isEmpty() && var2.getItem() instanceof AxeItem && var3.getItem() == Items.SHIELD) {
+      if (!var2.isEmpty() && !var3.isEmpty() && var2.getItem() instanceof AxeItem && var3.is(Items.SHIELD)) {
          float var4 = 0.25F + (float)EnchantmentHelper.getBlockEfficiency(this) * 0.05F;
          if (this.random.nextFloat() < var4) {
             var1.getCooldowns().addCooldown(Items.SHIELD, 100);
             this.level.broadcastEntityEvent(var1, (byte)30);
          }
@@ -1410,12 +1410,12 @@
    }
 
    protected boolean isSunBurnTick() {
       if (this.level.isDay() && !this.level.isClientSide) {
          float var1 = this.getBrightness();
-         BlockPos var2 = this.getVehicle() instanceof Boat ? (new BlockPos(this.getX(), (double)Math.round(this.getY()), this.getZ())).above() : new BlockPos(this.getX(), (double)Math.round(this.getY()), this.getZ());
-         if (var1 > 0.5F && this.random.nextFloat() * 30.0F < (var1 - 0.4F) * 2.0F && this.level.canSeeSky(var2)) {
+         BlockPos var2 = new BlockPos(this.getX(), this.getEyeY(), this.getZ());
+         if (var1 > 0.5F && this.random.nextFloat() * 30.0F < (var1 - 0.4F) * 2.0F && !this.isInWaterRainOrBubble() && this.level.canSeeSky(var2)) {
             return true;
          }
       }
 
       return false;
@@ -1433,9 +1433,15 @@
    protected void removeAfterChangingDimensions() {
       super.removeAfterChangingDimensions();
       this.dropLeash(true, false);
    }
 
+   @Nullable
+   public ItemStack getPickResult() {
+      SpawnEggItem var1 = SpawnEggItem.byId(this.getType());
+      return var1 == null ? null : new ItemStack(var1);
+   }
+
    static {
       DATA_MOB_FLAGS_ID = SynchedEntityData.defineId(Mob.class, EntityDataSerializers.BYTE);
    }
 }
