--- net/minecraft/world/entity/animal/Parrot.java
+++ net/minecraft/world/entity/animal/Parrot.java
@@ -27,11 +27,11 @@
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.effect.MobEffectInstance;
 import net.minecraft.world.effect.MobEffects;
-import net.minecraft.world.entity.AgableMob;
+import net.minecraft.world.entity.AgeableMob;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.MobSpawnType;
@@ -65,16 +65,18 @@
 public class Parrot extends ShoulderRidingEntity implements FlyingAnimal {
    private static final EntityDataAccessor<Integer> DATA_VARIANT_ID;
    private static final Predicate<Mob> NOT_PARROT_PREDICATE;
    private static final Item POISONOUS_FOOD;
    private static final Set<Item> TAME_FOOD;
-   private static final Map<EntityType<?>, SoundEvent> MOB_SOUND_MAP;
+   private static final int VARIANTS = 5;
+   static final Map<EntityType<?>, SoundEvent> MOB_SOUND_MAP;
    public float flap;
    public float flapSpeed;
    public float oFlapSpeed;
    public float oFlap;
    private float flapping = 1.0F;
+   private float nextFlap = 1.0F;
    private boolean partyParrot;
    private BlockPos jukebox;
 
    public Parrot(EntityType<? extends Parrot> var1, Level var2) {
       super(var1, var2);
@@ -86,11 +88,11 @@
 
    @Nullable
    public SpawnGroupData finalizeSpawn(ServerLevelAccessor var1, DifficultyInstance var2, MobSpawnType var3, @Nullable SpawnGroupData var4, @Nullable CompoundTag var5) {
       this.setVariant(this.random.nextInt(5));
       if (var4 == null) {
-         var4 = new AgableMob.AgableMobGroupData(false);
+         var4 = new AgeableMob.AgeableMobGroupData(false);
       }
 
       return super.finalizeSpawn(var1, var2, var3, (SpawnGroupData)var4, var5);
    }
 
@@ -185,11 +187,11 @@
    }
 
    public InteractionResult mobInteract(Player var1, InteractionHand var2) {
       ItemStack var3 = var1.getItemInHand(var2);
       if (!this.isTame() && TAME_FOOD.contains(var3.getItem())) {
-         if (!var1.abilities.instabuild) {
+         if (!var1.getAbilities().instabuild) {
             var3.shrink(1);
          }
 
          if (!this.isSilent()) {
             this.level.playSound((Player)null, this.getX(), this.getY(), this.getZ(), SoundEvents.PARROT_EAT, this.getSoundSource(), 1.0F, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
@@ -203,12 +205,12 @@
                this.level.broadcastEntityEvent(this, (byte)6);
             }
          }
 
          return InteractionResult.sidedSuccess(this.level.isClientSide);
-      } else if (var3.getItem() == POISONOUS_FOOD) {
-         if (!var1.abilities.instabuild) {
+      } else if (var3.is(POISONOUS_FOOD)) {
+         if (!var1.getAbilities().instabuild) {
             var3.shrink(1);
          }
 
          this.addEffect(new MobEffectInstance(MobEffects.POISON, 900));
          if (var1.isCreative() || !this.isInvulnerable()) {
@@ -234,11 +236,11 @@
    public static boolean checkParrotSpawnRules(EntityType<Parrot> var0, LevelAccessor var1, MobSpawnType var2, BlockPos var3, Random var4) {
       BlockState var5 = var1.getBlockState(var3.below());
       return (var5.is(BlockTags.LEAVES) || var5.is(Blocks.GRASS_BLOCK) || var5.is(BlockTags.LOGS) || var5.is(Blocks.AIR)) && var1.getRawBrightness(var3, 0) > 8;
    }
 
-   public boolean causeFallDamage(float var1, float var2) {
+   public boolean causeFallDamage(float var1, float var2, DamageSource var3) {
       return false;
    }
 
    protected void checkFallDamage(double var1, boolean var3, BlockState var4, BlockPos var5) {
    }
@@ -246,11 +248,11 @@
    public boolean canMate(Animal var1) {
       return false;
    }
 
    @Nullable
-   public AgableMob getBreedOffspring(ServerLevel var1, AgableMob var2) {
+   public AgeableMob getBreedOffspring(ServerLevel var1, AgeableMob var2) {
       return null;
    }
 
    public boolean doHurtTarget(Entity var1) {
       return var1.hurt(DamageSource.mobAttack(this), 3.0F);
@@ -284,20 +286,20 @@
 
    protected void playStepSound(BlockPos var1, BlockState var2) {
       this.playSound(SoundEvents.PARROT_STEP, 0.15F, 1.0F);
    }
 
-   protected float playFlySound(float var1) {
-      this.playSound(SoundEvents.PARROT_FLY, 0.15F, 1.0F);
-      return var1 + this.flapSpeed / 2.0F;
+   protected boolean isFlapping() {
+      return this.flyDist > this.nextFlap;
    }
 
-   protected boolean makeFlySound() {
-      return true;
+   protected void onFlap() {
+      this.playSound(SoundEvents.PARROT_FLY, 0.15F, 1.0F);
+      this.nextFlap = this.flyDist + this.flapSpeed / 2.0F;
    }
 
-   protected float getVoicePitch() {
+   public float getVoicePitch() {
       return getPitch(this.random);
    }
 
    public static float getPitch(Random var0) {
       return (var0.nextFloat() - var0.nextFloat()) * 0.2F + 1.0F;
@@ -325,11 +327,11 @@
          return super.hurt(var1, var2);
       }
    }
 
    public int getVariant() {
-      return Mth.clamp((Integer)this.entityData.get(DATA_VARIANT_ID), 0, 4);
+      return Mth.clamp((int)(Integer)this.entityData.get(DATA_VARIANT_ID), (int)0, (int)4);
    }
 
    public void setVariant(int var1) {
       this.entityData.set(DATA_VARIANT_ID, var1);
    }
