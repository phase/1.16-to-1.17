--- net/minecraft/world/entity/animal/horse/SkeletonHorse.java
+++ net/minecraft/world/entity/animal/horse/SkeletonHorse.java
@@ -7,11 +7,11 @@
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.tags.FluidTags;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.damagesource.DamageSource;
-import net.minecraft.world.entity.AgableMob;
+import net.minecraft.world.entity.AgeableMob;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.MobType;
 import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
 import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.player.Player;
@@ -19,10 +19,11 @@
 import net.minecraft.world.item.Items;
 import net.minecraft.world.level.Level;
 
 public class SkeletonHorse extends AbstractHorse {
    private final SkeletonTrapGoal skeletonTrapGoal = new SkeletonTrapGoal(this);
+   private static final int TRAP_MAX_LIFE = 18000;
    private boolean isTrap;
    private int trapTime;
 
    public SkeletonHorse(EntityType<? extends SkeletonHorse> var1, Level var2) {
       super(var1, var2);
@@ -100,11 +101,11 @@
    }
 
    public void aiStep() {
       super.aiStep();
       if (this.isTrap() && this.trapTime++ >= 18000) {
-         this.remove();
+         this.discard();
       }
 
    }
 
    public void addAdditionalSaveData(CompoundTag var1) {
@@ -142,12 +143,12 @@
 
       }
    }
 
    @Nullable
-   public AgableMob getBreedOffspring(ServerLevel var1, AgableMob var2) {
-      return (AgableMob)EntityType.SKELETON_HORSE.create(var1);
+   public AgeableMob getBreedOffspring(ServerLevel var1, AgeableMob var2) {
+      return (AgeableMob)EntityType.SKELETON_HORSE.create(var1);
    }
 
    public InteractionResult mobInteract(Player var1, InteractionHand var2) {
       ItemStack var3 = var1.getItemInHand(var2);
       if (!this.isTamed()) {
@@ -159,11 +160,11 @@
          return InteractionResult.sidedSuccess(this.level.isClientSide);
       } else if (this.isVehicle()) {
          return super.mobInteract(var1, var2);
       } else {
          if (!var3.isEmpty()) {
-            if (var3.getItem() == Items.SADDLE && !this.isSaddled()) {
+            if (var3.is(Items.SADDLE) && !this.isSaddled()) {
                this.openInventory(var1);
                return InteractionResult.sidedSuccess(this.level.isClientSide);
             }
 
             InteractionResult var4 = var3.interactLivingEntity(var1, this, var2);
