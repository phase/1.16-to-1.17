--- net/minecraft/world/entity/animal/horse/AbstractHorse.java
+++ net/minecraft/world/entity/animal/horse/AbstractHorse.java
@@ -27,11 +27,11 @@
 import net.minecraft.world.DifficultyInstance;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.SimpleContainer;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.effect.MobEffects;
-import net.minecraft.world.entity.AgableMob;
+import net.minecraft.world.entity.AgeableMob;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.EquipmentSlot;
 import net.minecraft.world.entity.HumanoidArm;
@@ -39,10 +39,11 @@
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.PlayerRideableJumping;
 import net.minecraft.world.entity.Pose;
 import net.minecraft.world.entity.Saddleable;
+import net.minecraft.world.entity.SlotAccess;
 import net.minecraft.world.entity.SpawnGroupData;
 import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
 import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.ai.goal.BreedGoal;
 import net.minecraft.world.entity.ai.goal.FloatGoal;
@@ -54,20 +55,20 @@
 import net.minecraft.world.entity.ai.goal.WaterAvoidingRandomStrollGoal;
 import net.minecraft.world.entity.ai.targeting.TargetingConditions;
 import net.minecraft.world.entity.animal.Animal;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.entity.vehicle.DismountHelper;
-import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.crafting.Ingredient;
 import net.minecraft.world.item.enchantment.EnchantmentHelper;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.ServerLevelAccessor;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.SoundType;
 import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
 
 public abstract class AbstractHorse extends Animal implements ContainerListener, PlayerRideableJumping, Saddleable {
    private static final Predicate<LivingEntity> PARENT_HORSE_SELECTOR = (var0) -> {
@@ -228,26 +229,26 @@
          }
       }
 
    }
 
-   public boolean causeFallDamage(float var1, float var2) {
+   public boolean causeFallDamage(float var1, float var2, DamageSource var3) {
       if (var1 > 1.0F) {
          this.playSound(SoundEvents.HORSE_LAND, 0.4F, 1.0F);
       }
 
-      int var3 = this.calculateFallDamage(var1, var2);
-      if (var3 <= 0) {
+      int var4 = this.calculateFallDamage(var1, var2);
+      if (var4 <= 0) {
          return false;
       } else {
-         this.hurt(DamageSource.FALL, (float)var3);
+         this.hurt(var3, (float)var4);
          if (this.isVehicle()) {
-            Iterator var4 = this.getIndirectPassengers().iterator();
+            Iterator var5 = this.getIndirectPassengers().iterator();
 
-            while(var4.hasNext()) {
-               Entity var5 = (Entity)var4.next();
-               var5.hurt(DamageSource.FALL, (float)var3);
+            while(var5.hasNext()) {
+               Entity var6 = (Entity)var5.next();
+               var6.hurt(var3, (float)var4);
             }
          }
 
          this.playBlockFallSound();
          return true;
@@ -389,11 +390,11 @@
 
    }
 
    public InteractionResult fedFood(Player var1, ItemStack var2) {
       boolean var3 = this.handleEating(var1, var2);
-      if (!var1.abilities.instabuild) {
+      if (!var1.getAbilities().instabuild) {
          var2.shrink(1);
       }
 
       if (this.level.isClientSide) {
          return InteractionResult.CONSUME;
@@ -405,35 +406,34 @@
    protected boolean handleEating(Player var1, ItemStack var2) {
       boolean var3 = false;
       float var4 = 0.0F;
       short var5 = 0;
       byte var6 = 0;
-      Item var7 = var2.getItem();
-      if (var7 == Items.WHEAT) {
+      if (var2.is(Items.WHEAT)) {
          var4 = 2.0F;
          var5 = 20;
          var6 = 3;
-      } else if (var7 == Items.SUGAR) {
+      } else if (var2.is(Items.SUGAR)) {
          var4 = 1.0F;
          var5 = 30;
          var6 = 3;
-      } else if (var7 == Blocks.HAY_BLOCK.asItem()) {
+      } else if (var2.is(Blocks.HAY_BLOCK.asItem())) {
          var4 = 20.0F;
          var5 = 180;
-      } else if (var7 == Items.APPLE) {
+      } else if (var2.is(Items.APPLE)) {
          var4 = 3.0F;
          var5 = 60;
          var6 = 3;
-      } else if (var7 == Items.GOLDEN_CARROT) {
+      } else if (var2.is(Items.GOLDEN_CARROT)) {
          var4 = 4.0F;
          var5 = 60;
          var6 = 5;
          if (!this.level.isClientSide && this.isTamed() && this.getAge() == 0 && !this.isInLove()) {
             var3 = true;
             this.setInLove(var1);
          }
-      } else if (var7 == Items.GOLDEN_APPLE || var7 == Items.ENCHANTED_GOLDEN_APPLE) {
+      } else if (var2.is(Items.GOLDEN_APPLE) || var2.is(Items.ENCHANTED_GOLDEN_APPLE)) {
          var4 = 10.0F;
          var5 = 240;
          var6 = 10;
          if (!this.level.isClientSide && this.isTamed() && this.getAge() == 0 && !this.isInLove()) {
             var3 = true;
@@ -462,10 +462,11 @@
          }
       }
 
       if (var3) {
          this.eating();
+         this.gameEvent(GameEvent.EAT, this.eyeBlockPosition());
       }
 
       return var3;
    }
 
@@ -765,11 +766,11 @@
          this.setOwnerUUID(var2);
       }
 
       if (var1.contains("SaddleItem", 10)) {
          ItemStack var4 = ItemStack.of(var1.getCompound("SaddleItem"));
-         if (var4.getItem() == Items.SADDLE) {
+         if (var4.is(Items.SADDLE)) {
             this.inventory.setItem(0, var4);
          }
       }
 
       this.updateContainerEquipment();
@@ -782,15 +783,15 @@
    protected boolean canParent() {
       return !this.isVehicle() && !this.isPassenger() && this.isTamed() && !this.isBaby() && this.getHealth() >= this.getMaxHealth() && this.isInLove();
    }
 
    @Nullable
-   public AgableMob getBreedOffspring(ServerLevel var1, AgableMob var2) {
+   public AgeableMob getBreedOffspring(ServerLevel var1, AgeableMob var2) {
       return null;
    }
 
-   protected void setOffspringAttributes(AgableMob var1, AbstractHorse var2) {
+   protected void setOffspringAttributes(AgeableMob var1, AbstractHorse var2) {
       double var3 = this.getAttributeBaseValue(Attributes.MAX_HEALTH) + var1.getAttributeBaseValue(Attributes.MAX_HEALTH) + (double)this.generateRandomMaxHealth();
       var2.getAttribute(Attributes.MAX_HEALTH).setBaseValue(var3 / 3.0D);
       double var5 = this.getAttributeBaseValue(Attributes.JUMP_STRENGTH) + var1.getAttributeBaseValue(Attributes.JUMP_STRENGTH) + this.generateRandomJumpStrength();
       var2.getAttribute(Attributes.JUMP_STRENGTH).setBaseValue(var5 / 3.0D);
       double var7 = this.getAttributeBaseValue(Attributes.MOVEMENT_SPEED) + var1.getAttributeBaseValue(Attributes.MOVEMENT_SPEED) + this.generateRandomSpeed();
@@ -917,36 +918,55 @@
 
    public boolean isArmor(ItemStack var1) {
       return false;
    }
 
-   public boolean setSlot(int var1, ItemStack var2) {
-      int var3 = var1 - 400;
-      if (var3 >= 0 && var3 < 2 && var3 < this.inventory.getContainerSize()) {
-         if (var3 == 0 && var2.getItem() != Items.SADDLE) {
-            return false;
-         } else if (var3 != 1 || this.canWearArmor() && this.isArmor(var2)) {
-            this.inventory.setItem(var3, var2);
-            this.updateContainerEquipment();
-            return true;
-         } else {
-            return false;
+   private SlotAccess createEquipmentSlotAccess(final int var1, final Predicate<ItemStack> var2) {
+      return new SlotAccess() {
+         public ItemStack get() {
+            return AbstractHorse.this.inventory.getItem(var1);
          }
-      } else {
-         int var4 = var1 - 500 + 2;
-         if (var4 >= 2 && var4 < this.inventory.getContainerSize()) {
-            this.inventory.setItem(var4, var2);
-            return true;
-         } else {
-            return false;
+
+         public boolean set(ItemStack var1x) {
+            if (!var2.test(var1x)) {
+               return false;
+            } else {
+               AbstractHorse.this.inventory.setItem(var1, var1x);
+               AbstractHorse.this.updateContainerEquipment();
+               return true;
+            }
          }
+      };
+   }
+
+   public SlotAccess getSlot(int var1) {
+      int var2 = var1 - 400;
+      if (var2 >= 0 && var2 < 2 && var2 < this.inventory.getContainerSize()) {
+         if (var2 == 0) {
+            return this.createEquipmentSlotAccess(var2, (var0) -> {
+               return var0.isEmpty() || var0.is(Items.SADDLE);
+            });
+         }
+
+         if (var2 == 1) {
+            if (!this.canWearArmor()) {
+               return SlotAccess.NULL;
+            }
+
+            return this.createEquipmentSlotAccess(var2, (var1x) -> {
+               return var1x.isEmpty() || this.isArmor(var1x);
+            });
+         }
       }
+
+      int var3 = var1 - 500 + 2;
+      return var3 >= 2 && var3 < this.inventory.getContainerSize() ? SlotAccess.forContainer(this.inventory, var3) : super.getSlot(var1);
    }
 
    @Nullable
    public Entity getControllingPassenger() {
-      return this.getPassengers().isEmpty() ? null : (Entity)this.getPassengers().get(0);
+      return this.getFirstPassenger();
    }
 
    @Nullable
    private Vec3 getDismountLocationInDirection(Vec3 var1, LivingEntity var2) {
       double var3 = this.getX() + var1.x;
@@ -1001,17 +1021,21 @@
    }
 
    @Nullable
    public SpawnGroupData finalizeSpawn(ServerLevelAccessor var1, DifficultyInstance var2, MobSpawnType var3, @Nullable SpawnGroupData var4, @Nullable CompoundTag var5) {
       if (var4 == null) {
-         var4 = new AgableMob.AgableMobGroupData(0.2F);
+         var4 = new AgeableMob.AgeableMobGroupData(0.2F);
       }
 
       this.randomizeAttributes();
       return super.finalizeSpawn(var1, var2, var3, (SpawnGroupData)var4, var5);
    }
 
+   public boolean hasInventoryChanged(Container var1) {
+      return this.inventory != var1;
+   }
+
    static {
       MOMMY_TARGETING = (new TargetingConditions()).range(16.0D).allowInvulnerable().allowSameTeam().allowUnseeable().selector(PARENT_HORSE_SELECTOR);
       FOOD_ITEMS = Ingredient.of(Items.WHEAT, Items.SUGAR, Blocks.HAY_BLOCK.asItem(), Items.APPLE, Items.GOLDEN_CARROT, Items.GOLDEN_APPLE, Items.ENCHANTED_GOLDEN_APPLE);
       DATA_ID_FLAGS = SynchedEntityData.defineId(AbstractHorse.class, EntityDataSerializers.BYTE);
       DATA_ID_OWNER_UUID = SynchedEntityData.defineId(AbstractHorse.class, EntityDataSerializers.OPTIONAL_UUID);
