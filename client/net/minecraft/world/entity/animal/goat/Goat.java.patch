--- net/minecraft/world/entity/animal/goat/Goat.java
+++ net/minecraft/world/entity/animal/goat/Goat.java
@@ -1,0 +1,157 @@
+package net.minecraft.world.entity.animal.goat;
+
+import com.google.common.collect.ImmutableList;
+import com.mojang.serialization.Dynamic;
+import javax.annotation.Nullable;
+import net.minecraft.core.BlockPos;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.network.protocol.game.DebugPackets;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.sounds.SoundEvent;
+import net.minecraft.sounds.SoundEvents;
+import net.minecraft.world.DifficultyInstance;
+import net.minecraft.world.InteractionHand;
+import net.minecraft.world.InteractionResult;
+import net.minecraft.world.damagesource.DamageSource;
+import net.minecraft.world.entity.AgeableMob;
+import net.minecraft.world.entity.EntityDimensions;
+import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.Mob;
+import net.minecraft.world.entity.MobSpawnType;
+import net.minecraft.world.entity.Pose;
+import net.minecraft.world.entity.SpawnGroupData;
+import net.minecraft.world.entity.ai.Brain;
+import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
+import net.minecraft.world.entity.ai.attributes.Attributes;
+import net.minecraft.world.entity.ai.memory.MemoryModuleType;
+import net.minecraft.world.entity.ai.sensing.Sensor;
+import net.minecraft.world.entity.ai.sensing.SensorType;
+import net.minecraft.world.entity.animal.Animal;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.ItemUtils;
+import net.minecraft.world.item.Items;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.ServerLevelAccessor;
+import net.minecraft.world.level.block.state.BlockState;
+
+public class Goat extends Animal {
+   public static final EntityDimensions LONG_JUMPING_DIMENSIONS = EntityDimensions.scalable(0.9F, 1.3F).scale(0.7F);
+   protected static final ImmutableList<SensorType<? extends Sensor<? super Goat>>> SENSOR_TYPES;
+   protected static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES;
+   public static final int GOAT_FALL_DAMAGE_REDUCTION = 10;
+   public static final double GOAT_SCREAMING_CHANCE = 0.02D;
+   private boolean isScreamingGoat;
+
+   public Goat(EntityType<? extends Goat> var1, Level var2) {
+      super(var1, var2);
+   }
+
+   protected Brain.Provider<Goat> brainProvider() {
+      return Brain.provider(MEMORY_TYPES, SENSOR_TYPES);
+   }
+
+   protected Brain<?> makeBrain(Dynamic<?> var1) {
+      return GoatAi.makeBrain(this.brainProvider().makeBrain(var1));
+   }
+
+   public static AttributeSupplier.Builder createAttributes() {
+      return Mob.createMobAttributes().add(Attributes.MAX_HEALTH, 10.0D).add(Attributes.MOVEMENT_SPEED, 0.20000000298023224D);
+   }
+
+   protected int calculateFallDamage(float var1, float var2) {
+      return super.calculateFallDamage(var1, var2) - 10;
+   }
+
+   protected SoundEvent getAmbientSound() {
+      return this.getIsScreaming() ? SoundEvents.GOAT_SCREAMING_AMBIENT : SoundEvents.GOAT_AMBIENT;
+   }
+
+   protected SoundEvent getHurtSound(DamageSource var1) {
+      return this.getIsScreaming() ? SoundEvents.GOAT_SCREAMING_HURT : SoundEvents.GOAT_HURT;
+   }
+
+   protected SoundEvent getDeathSound() {
+      return this.getIsScreaming() ? SoundEvents.GOAT_SCREAMING_DEATH : SoundEvents.GOAT_DEATH;
+   }
+
+   protected void playStepSound(BlockPos var1, BlockState var2) {
+      this.playSound(SoundEvents.GOAT_STEP, 0.15F, 1.0F);
+   }
+
+   protected SoundEvent getMilkingSound() {
+      return this.getIsScreaming() ? SoundEvents.GOAT_SCREAMING_MILK : SoundEvents.GOAT_MILK;
+   }
+
+   public Goat getBreedOffspring(ServerLevel var1, AgeableMob var2) {
+      return (Goat)EntityType.GOAT.create(var1);
+   }
+
+   protected float getStandingEyeHeight(Pose var1, EntityDimensions var2) {
+      return this.isBaby() ? var2.height * 0.95F : 1.3F;
+   }
+
+   public Brain<Goat> getBrain() {
+      return super.getBrain();
+   }
+
+   protected void customServerAiStep() {
+      this.level.getProfiler().push("goatBrain");
+      this.getBrain().tick((ServerLevel)this.level, this);
+      this.level.getProfiler().pop();
+      this.level.getProfiler().push("goatActivityUpdate");
+      GoatAi.updateActivity(this);
+      this.level.getProfiler().pop();
+      super.customServerAiStep();
+   }
+
+   public int getMaxHeadYRot() {
+      return 15;
+   }
+
+   public InteractionResult mobInteract(Player var1, InteractionHand var2) {
+      ItemStack var3 = var1.getItemInHand(var2);
+      if (var3.is(Items.BUCKET) && !this.isBaby()) {
+         var1.playSound(this.getMilkingSound(), 1.0F, 1.0F);
+         ItemStack var4 = ItemUtils.createFilledResult(var3, var1, Items.MILK_BUCKET.getDefaultInstance());
+         var1.setItemInHand(var2, var4);
+         return InteractionResult.sidedSuccess(this.level.isClientSide);
+      } else {
+         return super.mobInteract(var1, var2);
+      }
+   }
+
+   public SpawnGroupData finalizeSpawn(ServerLevelAccessor var1, DifficultyInstance var2, MobSpawnType var3, @Nullable SpawnGroupData var4, @Nullable CompoundTag var5) {
+      GoatAi.initMemories(this);
+      this.isScreamingGoat = var1.getRandom().nextDouble() < 0.02D;
+      return super.finalizeSpawn(var1, var2, var3, var4, var5);
+   }
+
+   protected void sendDebugPackets() {
+      super.sendDebugPackets();
+      DebugPackets.sendEntityBrain(this);
+   }
+
+   public EntityDimensions getDimensions(Pose var1) {
+      return var1 == Pose.LONG_JUMPING ? LONG_JUMPING_DIMENSIONS.scale(this.getScale()) : super.getDimensions(var1);
+   }
+
+   public void addAdditionalSaveData(CompoundTag var1) {
+      super.addAdditionalSaveData(var1);
+      var1.putBoolean("IsScreamingGoat", this.isScreamingGoat);
+   }
+
+   public void readAdditionalSaveData(CompoundTag var1) {
+      super.readAdditionalSaveData(var1);
+      this.isScreamingGoat = var1.getBoolean("IsScreamingGoat");
+   }
+
+   public boolean getIsScreaming() {
+      return this.isScreamingGoat;
+   }
+
+   static {
+      SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.NEAREST_ITEMS, SensorType.HURT_BY, SensorType.GOAT_TEMPTATIONS);
+      MEMORY_TYPES = ImmutableList.of(MemoryModuleType.LOOK_TARGET, MemoryModuleType.VISIBLE_LIVING_ENTITIES, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATE_RECENTLY, MemoryModuleType.BREED_TARGET, MemoryModuleType.LONG_JUMP_COOLDOWN_TICKS, MemoryModuleType.LONG_JUMP_MID_JUMP, MemoryModuleType.TEMPTING_PLAYER, MemoryModuleType.TEMPTATION_COOLDOWN_TICKS, MemoryModuleType.IS_TEMPTED, new MemoryModuleType[0]);
+   }
+}
