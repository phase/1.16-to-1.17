--- net/minecraft/world/entity/animal/Turtle.java
+++ net/minecraft/world/entity/animal/Turtle.java
@@ -20,11 +20,11 @@
 import net.minecraft.stats.Stats;
 import net.minecraft.tags.FluidTags;
 import net.minecraft.util.Mth;
 import net.minecraft.world.DifficultyInstance;
 import net.minecraft.world.damagesource.DamageSource;
-import net.minecraft.world.entity.AgableMob;
+import net.minecraft.world.entity.AgeableMob;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.ExperienceOrb;
 import net.minecraft.world.entity.LightningBolt;
 import net.minecraft.world.entity.LivingEntity;
@@ -43,11 +43,11 @@
 import net.minecraft.world.entity.ai.goal.PanicGoal;
 import net.minecraft.world.entity.ai.goal.RandomStrollGoal;
 import net.minecraft.world.entity.ai.navigation.PathNavigation;
 import net.minecraft.world.entity.ai.navigation.WaterBoundPathNavigation;
 import net.minecraft.world.entity.ai.targeting.TargetingConditions;
-import net.minecraft.world.entity.ai.util.RandomPos;
+import net.minecraft.world.entity.ai.util.DefaultRandomPos;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.level.GameRules;
@@ -250,16 +250,16 @@
    protected PathNavigation createNavigation(Level var1) {
       return new Turtle.TurtlePathNavigation(this, var1);
    }
 
    @Nullable
-   public AgableMob getBreedOffspring(ServerLevel var1, AgableMob var2) {
-      return (AgableMob)EntityType.TURTLE.create(var1);
+   public AgeableMob getBreedOffspring(ServerLevel var1, AgeableMob var2) {
+      return (AgeableMob)EntityType.TURTLE.create(var1);
    }
 
    public boolean isFood(ItemStack var1) {
-      return var1.getItem() == Blocks.SEAGRASS.asItem();
+      return var1.is(Blocks.SEAGRASS.asItem());
    }
 
    public float getWalkTargetValue(BlockPos var1, LevelReader var2) {
       if (!this.isGoingHome() && var2.getFluidState(var1).is(FluidTags.WATER)) {
          return 10.0F;
@@ -495,11 +495,11 @@
             var1 = this.partner.getLoveCause();
          }
 
          if (var1 != null) {
             var1.awardStat(Stats.ANIMALS_BRED);
-            CriteriaTriggers.BRED_ANIMALS.trigger(var1, this.animal, this.partner, (AgableMob)null);
+            CriteriaTriggers.BRED_ANIMALS.trigger(var1, this.animal, this.partner, (AgeableMob)null);
          }
 
          this.turtle.setHasEgg(true);
          this.animal.resetLove();
          this.partner.resetLove();
@@ -609,17 +609,17 @@
             ++this.closeToHomeTryTicks;
          }
 
          if (this.turtle.getNavigation().isDone()) {
             Vec3 var3 = Vec3.atBottomCenterOf(var1);
-            Vec3 var4 = RandomPos.getPosTowards(this.turtle, 16, 3, var3, 0.3141592741012573D);
+            Vec3 var4 = DefaultRandomPos.getPosTowards(this.turtle, 16, 3, var3, 0.3141592741012573D);
             if (var4 == null) {
-               var4 = RandomPos.getPosTowards(this.turtle, 8, 7, var3);
+               var4 = DefaultRandomPos.getPosTowards(this.turtle, 8, 7, var3, 1.5707963705062866D);
             }
 
             if (var4 != null && !var2 && !this.turtle.level.getBlockState(new BlockPos(var4)).is(Blocks.WATER)) {
-               var4 = RandomPos.getPosTowards(this.turtle, 16, 5, var3);
+               var4 = DefaultRandomPos.getPosTowards(this.turtle, 16, 5, var3, 1.5707963705062866D);
             }
 
             if (var4 == null) {
                this.stuck = true;
                return;
@@ -663,13 +663,13 @@
       }
 
       public void tick() {
          if (this.turtle.getNavigation().isDone()) {
             Vec3 var1 = Vec3.atBottomCenterOf(this.turtle.getTravelPos());
-            Vec3 var2 = RandomPos.getPosTowards(this.turtle, 16, 3, var1, 0.3141592741012573D);
+            Vec3 var2 = DefaultRandomPos.getPosTowards(this.turtle, 16, 3, var1, 0.3141592741012573D);
             if (var2 == null) {
-               var2 = RandomPos.getPosTowards(this.turtle, 8, 7, var1);
+               var2 = DefaultRandomPos.getPosTowards(this.turtle, 8, 7, var1, 1.5707963705062866D);
             }
 
             if (var2 != null) {
                int var3 = Mth.floor(var2.x);
                int var4 = Mth.floor(var2.z);
