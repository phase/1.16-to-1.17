--- net/minecraft/world/entity/animal/Cat.java
+++ net/minecraft/world/entity/animal/Cat.java
@@ -2,10 +2,11 @@
 
 import com.google.common.collect.Maps;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Random;
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
@@ -16,17 +17,16 @@
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.tags.BlockTags;
-import net.minecraft.tags.Tag;
 import net.minecraft.util.Mth;
 import net.minecraft.world.DifficultyInstance;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.damagesource.DamageSource;
-import net.minecraft.world.entity.AgableMob;
+import net.minecraft.world.entity.AgeableMob;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
 import net.minecraft.world.entity.EntitySelector;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
@@ -70,15 +70,31 @@
 import net.minecraft.world.level.storage.loot.parameters.LootContextParamSets;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParams;
 import net.minecraft.world.phys.AABB;
 
 public class Cat extends TamableAnimal {
+   public static final double TEMPT_SPEED_MOD = 0.6D;
+   public static final double WALK_SPEED_MOD = 0.8D;
+   public static final double SPRINT_SPEED_MOD = 1.33D;
    private static final Ingredient TEMPT_INGREDIENT;
    private static final EntityDataAccessor<Integer> DATA_TYPE_ID;
    private static final EntityDataAccessor<Boolean> IS_LYING;
    private static final EntityDataAccessor<Boolean> RELAX_STATE_ONE;
    private static final EntityDataAccessor<Integer> DATA_COLLAR_COLOR;
+   public static final int TYPE_TABBY = 0;
+   public static final int TYPE_BLACK = 1;
+   public static final int TYPE_RED = 2;
+   public static final int TYPE_SIAMESE = 3;
+   public static final int TYPE_BRITISH = 4;
+   public static final int TYPE_CALICO = 5;
+   public static final int TYPE_PERSIAN = 6;
+   public static final int TYPE_RAGDOLL = 7;
+   public static final int TYPE_WHITE = 8;
+   public static final int TYPE_JELLIE = 9;
+   public static final int TYPE_ALL_BLACK = 10;
+   private static final int NUMBER_OF_CAT_TYPES = 11;
+   private static final int NUMBER_OF_CAT_TYPES_EXCEPT_ALL_BLACK = 10;
    public static final Map<Integer, ResourceLocation> TEXTURE_BY_TYPE;
    private Cat.CatAvoidEntityGoal<Player> avoidPlayersGoal;
    private TemptGoal temptGoal;
    private float lieDownAmount;
    private float lieDownAmountO;
@@ -90,11 +106,11 @@
    public Cat(EntityType<? extends Cat> var1, Level var2) {
       super(var1, var2);
    }
 
    public ResourceLocation getResourceLocation() {
-      return (ResourceLocation)TEXTURE_BY_TYPE.getOrDefault(this.getCatType(), TEXTURE_BY_TYPE.get(0));
+      return (ResourceLocation)TEXTURE_BY_TYPE.getOrDefault(this.getCatType(), (ResourceLocation)TEXTURE_BY_TYPE.get(0));
    }
 
    protected void registerGoals() {
       this.temptGoal = new Cat.CatTemptGoal(this, 0.6D, TEMPT_INGREDIENT, true);
       this.goalSelector.addGoal(1, new FloatGoal(this));
@@ -223,20 +239,20 @@
 
    public static AttributeSupplier.Builder createAttributes() {
       return Mob.createMobAttributes().add(Attributes.MAX_HEALTH, 10.0D).add(Attributes.MOVEMENT_SPEED, 0.30000001192092896D).add(Attributes.ATTACK_DAMAGE, 3.0D);
    }
 
-   public boolean causeFallDamage(float var1, float var2) {
+   public boolean causeFallDamage(float var1, float var2, DamageSource var3) {
       return false;
    }
 
-   protected void usePlayerItem(Player var1, ItemStack var2) {
-      if (this.isFood(var2)) {
+   protected void usePlayerItem(Player var1, InteractionHand var2, ItemStack var3) {
+      if (this.isFood(var3)) {
          this.playSound(SoundEvents.CAT_EAT, 1.0F, 1.0F);
       }
 
-      super.usePlayerItem(var1, var2);
+      super.usePlayerItem(var1, var2, var3);
    }
 
    private float getAttackDamage() {
       return (float)this.getAttributeValue(Attributes.ATTACK_DAMAGE);
    }
@@ -296,11 +312,11 @@
 
    public float getRelaxStateOneAmount(float var1) {
       return Mth.lerp(var1, this.relaxStateOneAmountO, this.relaxStateOneAmount);
    }
 
-   public Cat getBreedOffspring(ServerLevel var1, AgableMob var2) {
+   public Cat getBreedOffspring(ServerLevel var1, AgeableMob var2) {
       Cat var3 = (Cat)EntityType.CAT.create(var1);
       if (var2 instanceof Cat) {
          if (this.random.nextBoolean()) {
             var3.setCatType(this.getCatType());
          } else {
@@ -363,11 +379,11 @@
          InteractionResult var6;
          if (this.isTame()) {
             if (this.isOwnedBy(var1)) {
                if (!(var4 instanceof DyeItem)) {
                   if (var4.isEdible() && this.isFood(var3) && this.getHealth() < this.getMaxHealth()) {
-                     this.usePlayerItem(var1, var3);
+                     this.usePlayerItem(var1, var2, var3);
                      this.heal((float)var4.getFoodProperties().getNutrition());
                      return InteractionResult.CONSUME;
                   }
 
                   var6 = super.mobInteract(var1, var2);
@@ -379,20 +395,20 @@
                }
 
                DyeColor var5 = ((DyeItem)var4).getDyeColor();
                if (var5 != this.getCollarColor()) {
                   this.setCollarColor(var5);
-                  if (!var1.abilities.instabuild) {
+                  if (!var1.getAbilities().instabuild) {
                      var3.shrink(1);
                   }
 
                   this.setPersistenceRequired();
                   return InteractionResult.CONSUME;
                }
             }
          } else if (this.isFood(var3)) {
-            this.usePlayerItem(var1, var3);
+            this.usePlayerItem(var1, var2, var3);
             if (this.random.nextInt(3) == 0) {
                this.tame(var1);
                this.setOrderedToSit(true);
                this.level.broadcastEntityEvent(this, (byte)7);
             } else {
@@ -434,10 +450,14 @@
          this.goalSelector.addGoal(4, this.avoidPlayersGoal);
       }
 
    }
 
+   public boolean isSteppingCarefully() {
+      return this.getPose() == Pose.CROUCHING || super.isSteppingCarefully();
+   }
+
    static {
       TEMPT_INGREDIENT = Ingredient.of(Items.COD, Items.SALMON);
       DATA_TYPE_ID = SynchedEntityData.defineId(Cat.class, EntityDataSerializers.INT);
       IS_LYING = SynchedEntityData.defineId(Cat.class, EntityDataSerializers.BOOLEAN);
       RELAX_STATE_ONE = SynchedEntityData.defineId(Cat.class, EntityDataSerializers.BOOLEAN);
@@ -455,10 +475,39 @@
          var0.put(9, new ResourceLocation("textures/entity/cat/jellie.png"));
          var0.put(10, new ResourceLocation("textures/entity/cat/all_black.png"));
       });
    }
 
+   private static class CatTemptGoal extends TemptGoal {
+      @Nullable
+      private Player selectedPlayer;
+      private final Cat cat;
+
+      public CatTemptGoal(Cat var1, double var2, Ingredient var4, boolean var5) {
+         super(var1, var2, var4, var5);
+         this.cat = var1;
+      }
+
+      public void tick() {
+         super.tick();
+         if (this.selectedPlayer == null && this.mob.getRandom().nextInt(600) == 0) {
+            this.selectedPlayer = this.player;
+         } else if (this.mob.getRandom().nextInt(500) == 0) {
+            this.selectedPlayer = null;
+         }
+
+      }
+
+      protected boolean canScare() {
+         return this.selectedPlayer != null && this.selectedPlayer.equals(this.player) ? false : super.canScare();
+      }
+
+      public boolean canUse() {
+         return super.canUse() && !this.cat.isTame();
+      }
+   }
+
    static class CatRelaxOnOwnerGoal extends Goal {
       private final Cat cat;
       private Player ownerPlayer;
       private BlockPos goalPos;
       private int onBedTicks;
@@ -484,11 +533,11 @@
                   return false;
                }
 
                BlockPos var2 = this.ownerPlayer.blockPosition();
                BlockState var3 = this.cat.level.getBlockState(var2);
-               if (var3.getBlock().is((Tag)BlockTags.BEDS)) {
+               if (var3.is(BlockTags.BEDS)) {
                   this.goalPos = (BlockPos)var3.getOptionalValue(BedBlock.FACING).map((var1x) -> {
                      return var2.relative(var1x.getOpposite());
                   }).orElseGet(() -> {
                      return new BlockPos(var2);
                   });
@@ -579,44 +628,16 @@
          }
 
       }
    }
 
-   static class CatTemptGoal extends TemptGoal {
-      @Nullable
-      private Player selectedPlayer;
+   private static class CatAvoidEntityGoal<T extends LivingEntity> extends AvoidEntityGoal<T> {
       private final Cat cat;
 
-      public CatTemptGoal(Cat var1, double var2, Ingredient var4, boolean var5) {
-         super(var1, var2, var4, var5);
-         this.cat = var1;
-      }
-
-      public void tick() {
-         super.tick();
-         if (this.selectedPlayer == null && this.mob.getRandom().nextInt(600) == 0) {
-            this.selectedPlayer = this.player;
-         } else if (this.mob.getRandom().nextInt(500) == 0) {
-            this.selectedPlayer = null;
-         }
-
-      }
-
-      protected boolean canScare() {
-         return this.selectedPlayer != null && this.selectedPlayer.equals(this.player) ? false : super.canScare();
-      }
-
-      public boolean canUse() {
-         return super.canUse() && !this.cat.isTame();
-      }
-   }
-
-   static class CatAvoidEntityGoal<T extends LivingEntity> extends AvoidEntityGoal<T> {
-      private final Cat cat;
-
       public CatAvoidEntityGoal(Cat var1, Class<T> var2, float var3, double var4, double var6) {
          Predicate var10006 = EntitySelector.NO_CREATIVE_OR_SPECTATOR;
+         Objects.requireNonNull(var10006);
          super(var1, var2, var3, var4, var6, var10006::test);
          this.cat = var1;
       }
 
       public boolean canUse() {
