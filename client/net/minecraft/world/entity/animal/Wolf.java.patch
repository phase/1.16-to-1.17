--- net/minecraft/world/entity/animal/Wolf.java
+++ net/minecraft/world/entity/animal/Wolf.java
@@ -10,17 +10,17 @@
 import net.minecraft.network.syncher.EntityDataSerializers;
 import net.minecraft.network.syncher.SynchedEntityData;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
-import net.minecraft.util.IntRange;
 import net.minecraft.util.Mth;
 import net.minecraft.util.TimeUtil;
+import net.minecraft.util.valueproviders.UniformInt;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.damagesource.DamageSource;
-import net.minecraft.world.entity.AgableMob;
+import net.minecraft.world.entity.AgeableMob;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
@@ -58,24 +58,27 @@
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.phys.Vec3;
 
 public class Wolf extends TamableAnimal implements NeutralMob {
    private static final EntityDataAccessor<Boolean> DATA_INTERESTED_ID;
    private static final EntityDataAccessor<Integer> DATA_COLLAR_COLOR;
    private static final EntityDataAccessor<Integer> DATA_REMAINING_ANGER_TIME;
    public static final Predicate<LivingEntity> PREY_SELECTOR;
+   private static final float START_HEALTH = 8.0F;
+   private static final float TAME_HEALTH = 20.0F;
    private float interestedAngle;
    private float interestedAngleO;
    private boolean isWet;
    private boolean isShaking;
    private float shakeAnim;
    private float shakeAnimO;
-   private static final IntRange PERSISTENT_ANGER_TIME;
+   private static final UniformInt PERSISTENT_ANGER_TIME;
    private UUID persistentAngerTarget;
 
    public Wolf(EntityType<? extends Wolf> var1, Level var2) {
       super(var1, var2);
       this.setTame(false);
@@ -128,11 +131,11 @@
       super.readAdditionalSaveData(var1);
       if (var1.contains("CollarColor", 99)) {
          this.setCollarColor(DyeColor.byId(var1.getInt("CollarColor")));
       }
 
-      this.readPersistentAngerSaveData((ServerLevel)this.level, var1);
+      this.readPersistentAngerSaveData(this.level, var1);
    }
 
    protected SoundEvent getAmbientSound() {
       if (this.isAngry()) {
          return SoundEvents.WOLF_GROWL;
@@ -187,10 +190,11 @@
                this.cancelShake();
             }
          } else if ((this.isWet || this.isShaking) && this.isShaking) {
             if (this.shakeAnim == 0.0F) {
                this.playSound(SoundEvents.WOLF_SHAKE, this.getSoundVolume(), (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
+               this.gameEvent(GameEvent.WOLF_SHAKING);
             }
 
             this.shakeAnimO = this.shakeAnim;
             this.shakeAnim += 0.05F;
             if (this.shakeAnimO >= 2.0F) {
@@ -298,20 +302,21 @@
 
    public InteractionResult mobInteract(Player var1, InteractionHand var2) {
       ItemStack var3 = var1.getItemInHand(var2);
       Item var4 = var3.getItem();
       if (this.level.isClientSide) {
-         boolean var7 = this.isOwnedBy(var1) || this.isTame() || var4 == Items.BONE && !this.isTame() && !this.isAngry();
+         boolean var7 = this.isOwnedBy(var1) || this.isTame() || var3.is(Items.BONE) && !this.isTame() && !this.isAngry();
          return var7 ? InteractionResult.CONSUME : InteractionResult.PASS;
       } else {
          if (this.isTame()) {
             if (this.isFood(var3) && this.getHealth() < this.getMaxHealth()) {
-               if (!var1.abilities.instabuild) {
+               if (!var1.getAbilities().instabuild) {
                   var3.shrink(1);
                }
 
                this.heal((float)var4.getFoodProperties().getNutrition());
+               this.gameEvent(GameEvent.MOB_INTERACT, this.eyeBlockPosition());
                return InteractionResult.SUCCESS;
             }
 
             if (!(var4 instanceof DyeItem)) {
                InteractionResult var6 = super.mobInteract(var1, var2);
@@ -327,18 +332,18 @@
             }
 
             DyeColor var5 = ((DyeItem)var4).getDyeColor();
             if (var5 != this.getCollarColor()) {
                this.setCollarColor(var5);
-               if (!var1.abilities.instabuild) {
+               if (!var1.getAbilities().instabuild) {
                   var3.shrink(1);
                }
 
                return InteractionResult.SUCCESS;
             }
-         } else if (var4 == Items.BONE && !this.isAngry()) {
-            if (!var1.abilities.instabuild) {
+         } else if (var3.is(Items.BONE) && !this.isAngry()) {
+            if (!var1.getAbilities().instabuild) {
                var3.shrink(1);
             }
 
             if (this.random.nextInt(3) == 0) {
                this.tame(var1);
@@ -394,11 +399,11 @@
    public void setRemainingPersistentAngerTime(int var1) {
       this.entityData.set(DATA_REMAINING_ANGER_TIME, var1);
    }
 
    public void startPersistentAngerTimer() {
-      this.setRemainingPersistentAngerTime(PERSISTENT_ANGER_TIME.randomValue(this.random));
+      this.setRemainingPersistentAngerTime(PERSISTENT_ANGER_TIME.sample(this.random));
    }
 
    @Nullable
    public UUID getPersistentAngerTarget() {
       return this.persistentAngerTarget;
@@ -414,11 +419,11 @@
 
    public void setCollarColor(DyeColor var1) {
       this.entityData.set(DATA_COLLAR_COLOR, var1.getId());
    }
 
-   public Wolf getBreedOffspring(ServerLevel var1, AgableMob var2) {
+   public Wolf getBreedOffspring(ServerLevel var1, AgeableMob var2) {
       Wolf var3 = (Wolf)EntityType.WOLF.create(var1);
       UUID var4 = this.getOwnerUUID();
       if (var4 != null) {
          var3.setOwnerUUID(var4);
          var3.setTame(true);
