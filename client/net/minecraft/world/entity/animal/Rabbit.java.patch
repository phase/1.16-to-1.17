--- net/minecraft/world/entity/animal/Rabbit.java
+++ net/minecraft/world/entity/animal/Rabbit.java
@@ -15,11 +15,11 @@
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.util.Mth;
 import net.minecraft.world.DifficultyInstance;
 import net.minecraft.world.damagesource.DamageSource;
-import net.minecraft.world.entity.AgableMob;
+import net.minecraft.world.entity.AgeableMob;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.MobSpawnType;
@@ -39,11 +39,10 @@
 import net.minecraft.world.entity.ai.goal.WaterAvoidingRandomStrollGoal;
 import net.minecraft.world.entity.ai.goal.target.HurtByTargetGoal;
 import net.minecraft.world.entity.ai.goal.target.NearestAttackableTargetGoal;
 import net.minecraft.world.entity.monster.Monster;
 import net.minecraft.world.entity.player.Player;
-import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.crafting.Ingredient;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.Level;
@@ -57,17 +56,32 @@
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.pathfinder.Path;
 import net.minecraft.world.phys.Vec3;
 
 public class Rabbit extends Animal {
+   public static final double STROLL_SPEED_MOD = 0.6D;
+   public static final double BREED_SPEED_MOD = 0.8D;
+   public static final double FOLLOW_SPEED_MOD = 1.0D;
+   public static final double FLEE_SPEED_MOD = 2.2D;
+   public static final double ATTACK_SPEED_MOD = 1.4D;
    private static final EntityDataAccessor<Integer> DATA_TYPE_ID;
+   public static final int TYPE_BROWN = 0;
+   public static final int TYPE_WHITE = 1;
+   public static final int TYPE_BLACK = 2;
+   public static final int TYPE_WHITE_SPLOTCHED = 3;
+   public static final int TYPE_GOLD = 4;
+   public static final int TYPE_SALT = 5;
+   public static final int TYPE_EVIL = 99;
    private static final ResourceLocation KILLER_BUNNY;
+   public static final int EVIL_ATTACK_POWER = 8;
+   public static final int EVIL_ARMOR_VALUE = 8;
+   private static final int MORE_CARROTS_DELAY = 40;
    private int jumpTicks;
    private int jumpDuration;
    private boolean wasOnGround;
    private int jumpDelayTicks;
-   private int moreCarrotTicks;
+   int moreCarrotTicks;
 
    public Rabbit(EntityType<? extends Rabbit> var1, Level var2) {
       super(var1, var2);
       this.jumpControl = new Rabbit.RabbitJumpControl(this);
       this.moveControl = new Rabbit.RabbitMoveControl(this);
@@ -105,11 +119,11 @@
 
    protected void jumpFromGround() {
       super.jumpFromGround();
       double var1 = this.moveControl.getSpeedModifier();
       if (var1 > 0.0D) {
-         double var3 = getHorizontalDistanceSqr(this.getDeltaMovement());
+         double var3 = this.getDeltaMovement().horizontalDistanceSqr();
          if (var3 < 0.01D) {
             this.moveRelative(0.1F, new Vec3(0.0D, 0.0D, 1.0D));
          }
       }
 
@@ -198,11 +212,11 @@
    public boolean canSpawnSprintParticle() {
       return false;
    }
 
    private void facePoint(double var1, double var3) {
-      this.yRot = (float)(Mth.atan2(var3 - this.getZ(), var1 - this.getX()) * 57.2957763671875D) - 90.0F;
+      this.setYRot((float)(Mth.atan2(var3 - this.getZ(), var1 - this.getX()) * 57.2957763671875D) - 90.0F);
    }
 
    private void enableJumpControl() {
       ((Rabbit.RabbitJumpControl)this.jumpControl).setCanJump(true);
    }
@@ -280,19 +294,15 @@
 
    public SoundSource getSoundSource() {
       return this.getRabbitType() == 99 ? SoundSource.HOSTILE : SoundSource.NEUTRAL;
    }
 
-   public boolean hurt(DamageSource var1, float var2) {
-      return this.isInvulnerableTo(var1) ? false : super.hurt(var1, var2);
+   private static boolean isTemptingItem(ItemStack var0) {
+      return var0.is(Items.CARROT) || var0.is(Items.GOLDEN_CARROT) || var0.is(Blocks.DANDELION.asItem());
    }
 
-   private boolean isTemptingItem(Item var1) {
-      return var1 == Items.CARROT || var1 == Items.GOLDEN_CARROT || var1 == Blocks.DANDELION.asItem();
-   }
-
-   public Rabbit getBreedOffspring(ServerLevel var1, AgableMob var2) {
+   public Rabbit getBreedOffspring(ServerLevel var1, AgeableMob var2) {
       Rabbit var3 = (Rabbit)EntityType.RABBIT.create(var1);
       int var4 = this.getRandomRabbitType(var1);
       if (this.random.nextInt(20) != 0) {
          if (var2 instanceof Rabbit && this.random.nextBoolean()) {
             var4 = ((Rabbit)var2).getRabbitType();
@@ -304,11 +314,11 @@
       var3.setRabbitType(var4);
       return var3;
    }
 
    public boolean isFood(ItemStack var1) {
-      return this.isTemptingItem(var1.getItem());
+      return isTemptingItem(var1);
    }
 
    public int getRabbitType() {
       return (Integer)this.entityData.get(DATA_TYPE_ID);
    }
@@ -356,11 +366,11 @@
    public static boolean checkRabbitSpawnRules(EntityType<Rabbit> var0, LevelAccessor var1, MobSpawnType var2, BlockPos var3, Random var4) {
       BlockState var5 = var1.getBlockState(var3.below());
       return (var5.is(Blocks.GRASS_BLOCK) || var5.is(Blocks.SNOW) || var5.is(Blocks.SAND)) && var1.getRawBrightness(var3, 0) > 8;
    }
 
-   private boolean wantsMoreFood() {
+   boolean wantsMoreFood() {
       return this.moreCarrotTicks == 0;
    }
 
    public void handleEntityEvent(byte var1) {
       if (var1 == 1) {
@@ -380,20 +390,72 @@
    static {
       DATA_TYPE_ID = SynchedEntityData.defineId(Rabbit.class, EntityDataSerializers.INT);
       KILLER_BUNNY = new ResourceLocation("killer_bunny");
    }
 
-   static class EvilRabbitAttackGoal extends MeleeAttackGoal {
-      public EvilRabbitAttackGoal(Rabbit var1) {
-         super(var1, 1.4D, true);
+   public class RabbitJumpControl extends JumpControl {
+      private final Rabbit rabbit;
+      private boolean canJump;
+
+      public RabbitJumpControl(Rabbit var2) {
+         super(var2);
+         this.rabbit = var2;
       }
 
-      protected double getAttackReachSqr(LivingEntity var1) {
-         return (double)(4.0F + var1.getBbWidth());
+      public boolean wantJump() {
+         return this.jump;
       }
+
+      public boolean canJump() {
+         return this.canJump;
+      }
+
+      public void setCanJump(boolean var1) {
+         this.canJump = var1;
+      }
+
+      public void tick() {
+         if (this.jump) {
+            this.rabbit.startJumping();
+            this.jump = false;
+         }
+
+      }
    }
 
+   private static class RabbitMoveControl extends MoveControl {
+      private final Rabbit rabbit;
+      private double nextJumpSpeed;
+
+      public RabbitMoveControl(Rabbit var1) {
+         super(var1);
+         this.rabbit = var1;
+      }
+
+      public void tick() {
+         if (this.rabbit.onGround && !this.rabbit.jumping && !((Rabbit.RabbitJumpControl)this.rabbit.jumpControl).wantJump()) {
+            this.rabbit.setSpeedModifier(0.0D);
+         } else if (this.hasWanted()) {
+            this.rabbit.setSpeedModifier(this.nextJumpSpeed);
+         }
+
+         super.tick();
+      }
+
+      public void setWantedPosition(double var1, double var3, double var5, double var7) {
+         if (this.rabbit.isInWater()) {
+            var7 = 1.5D;
+         }
+
+         super.setWantedPosition(var1, var3, var5, var7);
+         if (var7 > 0.0D) {
+            this.nextJumpSpeed = var7;
+         }
+
+      }
+   }
+
    static class RabbitPanicGoal extends PanicGoal {
       private final Rabbit rabbit;
 
       public RabbitPanicGoal(Rabbit var1, double var2) {
          super(var1, var2);
@@ -404,12 +466,25 @@
          super.tick();
          this.rabbit.setSpeedModifier(this.speedModifier);
       }
    }
 
-   static class RaidGardenGoal extends MoveToBlockGoal {
+   private static class RabbitAvoidEntityGoal<T extends LivingEntity> extends AvoidEntityGoal<T> {
       private final Rabbit rabbit;
+
+      public RabbitAvoidEntityGoal(Rabbit var1, Class<T> var2, float var3, double var4, double var6) {
+         super(var1, var2, var3, var4, var6);
+         this.rabbit = var1;
+      }
+
+      public boolean canUse() {
+         return this.rabbit.getRabbitType() != 99 && super.canUse();
+      }
+   }
+
+   private static class RaidGardenGoal extends MoveToBlockGoal {
+      private final Rabbit rabbit;
       private boolean wantsToRaid;
       private boolean canRaid;
 
       public RaidGardenGoal(Rabbit var1) {
          super(var1, 0.699999988079071D, 16);
@@ -441,11 +516,11 @@
             Level var1 = this.rabbit.level;
             BlockPos var2 = this.blockPos.above();
             BlockState var3 = var1.getBlockState(var2);
             Block var4 = var3.getBlock();
             if (this.canRaid && var4 instanceof CarrotBlock) {
-               Integer var5 = (Integer)var3.getValue(CarrotBlock.AGE);
+               int var5 = (Integer)var3.getValue(CarrotBlock.AGE);
                if (var5 == 0) {
                   var1.setBlock(var2, Blocks.AIR.defaultBlockState(), 2);
                   var1.destroyBlock(var2, true, this.rabbit);
                } else {
                   var1.setBlock(var2, (BlockState)var3.setValue(CarrotBlock.AGE, var5 - 1), 2);
@@ -460,101 +535,34 @@
          }
 
       }
 
       protected boolean isValidTarget(LevelReader var1, BlockPos var2) {
-         Block var3 = var1.getBlockState(var2).getBlock();
-         if (var3 == Blocks.FARMLAND && this.wantsToRaid && !this.canRaid) {
-            var2 = var2.above();
-            BlockState var4 = var1.getBlockState(var2);
-            var3 = var4.getBlock();
-            if (var3 instanceof CarrotBlock && ((CarrotBlock)var3).isMaxAge(var4)) {
+         BlockState var3 = var1.getBlockState(var2);
+         if (var3.is(Blocks.FARMLAND) && this.wantsToRaid && !this.canRaid) {
+            var3 = var1.getBlockState(var2.above());
+            if (var3.getBlock() instanceof CarrotBlock && ((CarrotBlock)var3.getBlock()).isMaxAge(var3)) {
                this.canRaid = true;
                return true;
             }
          }
 
          return false;
       }
    }
 
-   static class RabbitAvoidEntityGoal<T extends LivingEntity> extends AvoidEntityGoal<T> {
-      private final Rabbit rabbit;
-
-      public RabbitAvoidEntityGoal(Rabbit var1, Class<T> var2, float var3, double var4, double var6) {
-         super(var1, var2, var3, var4, var6);
-         this.rabbit = var1;
+   private static class EvilRabbitAttackGoal extends MeleeAttackGoal {
+      public EvilRabbitAttackGoal(Rabbit var1) {
+         super(var1, 1.4D, true);
       }
 
-      public boolean canUse() {
-         return this.rabbit.getRabbitType() != 99 && super.canUse();
+      protected double getAttackReachSqr(LivingEntity var1) {
+         return (double)(4.0F + var1.getBbWidth());
       }
    }
 
-   static class RabbitMoveControl extends MoveControl {
-      private final Rabbit rabbit;
-      private double nextJumpSpeed;
-
-      public RabbitMoveControl(Rabbit var1) {
-         super(var1);
-         this.rabbit = var1;
-      }
-
-      public void tick() {
-         if (this.rabbit.onGround && !this.rabbit.jumping && !((Rabbit.RabbitJumpControl)this.rabbit.jumpControl).wantJump()) {
-            this.rabbit.setSpeedModifier(0.0D);
-         } else if (this.hasWanted()) {
-            this.rabbit.setSpeedModifier(this.nextJumpSpeed);
-         }
-
-         super.tick();
-      }
-
-      public void setWantedPosition(double var1, double var3, double var5, double var7) {
-         if (this.rabbit.isInWater()) {
-            var7 = 1.5D;
-         }
-
-         super.setWantedPosition(var1, var3, var5, var7);
-         if (var7 > 0.0D) {
-            this.nextJumpSpeed = var7;
-         }
-
-      }
-   }
-
-   public class RabbitJumpControl extends JumpControl {
-      private final Rabbit rabbit;
-      private boolean canJump;
-
-      public RabbitJumpControl(Rabbit var2) {
-         super(var2);
-         this.rabbit = var2;
-      }
-
-      public boolean wantJump() {
-         return this.jump;
-      }
-
-      public boolean canJump() {
-         return this.canJump;
-      }
-
-      public void setCanJump(boolean var1) {
-         this.canJump = var1;
-      }
-
-      public void tick() {
-         if (this.jump) {
-            this.rabbit.startJumping();
-            this.jump = false;
-         }
-
-      }
-   }
-
-   public static class RabbitGroupData extends AgableMob.AgableMobGroupData {
+   public static class RabbitGroupData extends AgeableMob.AgeableMobGroupData {
       public final int rabbitType;
 
       public RabbitGroupData(int var1) {
          super(1.0F);
          this.rabbitType = var1;
