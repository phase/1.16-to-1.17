--- net/minecraft/world/entity/decoration/ItemFrame.java
+++ net/minecraft/world/entity/decoration/ItemFrame.java
@@ -7,19 +7,21 @@
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.game.ClientboundAddEntityPacket;
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.EntityDataSerializers;
 import net.minecraft.network.syncher.SynchedEntityData;
+import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.MoverType;
 import net.minecraft.world.entity.Pose;
+import net.minecraft.world.entity.SlotAccess;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.MapItem;
 import net.minecraft.world.level.GameRules;
@@ -36,22 +38,28 @@
 
 public class ItemFrame extends HangingEntity {
    private static final Logger LOGGER = LogManager.getLogger();
    private static final EntityDataAccessor<ItemStack> DATA_ITEM;
    private static final EntityDataAccessor<Integer> DATA_ROTATION;
-   private float dropChance = 1.0F;
+   private float dropChance;
    private boolean fixed;
 
    public ItemFrame(EntityType<? extends ItemFrame> var1, Level var2) {
       super(var1, var2);
+      this.dropChance = 1.0F;
    }
 
    public ItemFrame(Level var1, BlockPos var2, Direction var3) {
-      super(EntityType.ITEM_FRAME, var1, var2);
-      this.setDirection(var3);
+      this(EntityType.ITEM_FRAME, var1, var2, var3);
    }
 
+   public ItemFrame(EntityType<? extends ItemFrame> var1, Level var2, BlockPos var3, Direction var4) {
+      super(var1, var2, var3);
+      this.dropChance = 1.0F;
+      this.setDirection(var4);
+   }
+
    protected float getEyeHeight(Pose var1, EntityDimensions var2) {
       return 0.0F;
    }
 
    protected void defineSynchedData() {
@@ -144,19 +152,23 @@
       } else if (this.isInvulnerableTo(var1)) {
          return false;
       } else if (!var1.isExplosion() && !this.getItem().isEmpty()) {
          if (!this.level.isClientSide) {
             this.dropItem(var1.getEntity(), false);
-            this.playSound(SoundEvents.ITEM_FRAME_REMOVE_ITEM, 1.0F, 1.0F);
+            this.playSound(this.getRemoveItemSound(), 1.0F, 1.0F);
          }
 
          return true;
       } else {
          return super.hurt(var1, var2);
       }
    }
 
+   public SoundEvent getRemoveItemSound() {
+      return SoundEvents.ITEM_FRAME_REMOVE_ITEM;
+   }
+
    public int getWidth() {
       return 12;
    }
 
    public int getHeight() {
@@ -168,18 +180,26 @@
       var3 *= 64.0D * getViewScale();
       return var1 < var3 * var3;
    }
 
    public void dropItem(@Nullable Entity var1) {
-      this.playSound(SoundEvents.ITEM_FRAME_BREAK, 1.0F, 1.0F);
+      this.playSound(this.getBreakSound(), 1.0F, 1.0F);
       this.dropItem(var1, true);
    }
 
+   public SoundEvent getBreakSound() {
+      return SoundEvents.ITEM_FRAME_BREAK;
+   }
+
    public void playPlacementSound() {
-      this.playSound(SoundEvents.ITEM_FRAME_PLACE, 1.0F, 1.0F);
+      this.playSound(this.getPlaceSound(), 1.0F, 1.0F);
    }
 
+   public SoundEvent getPlaceSound() {
+      return SoundEvents.ITEM_FRAME_PLACE;
+   }
+
    private void dropItem(@Nullable Entity var1, boolean var2) {
       if (!this.fixed) {
          ItemStack var3 = this.getItem();
          this.setItem(ItemStack.EMPTY);
          if (!this.level.getGameRules().getBoolean(GameRules.RULE_DOENTITYDROPS)) {
@@ -188,18 +208,18 @@
             }
 
          } else {
             if (var1 instanceof Player) {
                Player var4 = (Player)var1;
-               if (var4.abilities.instabuild) {
+               if (var4.getAbilities().instabuild) {
                   this.removeFramedMap(var3);
                   return;
                }
             }
 
             if (var2) {
-               this.spawnAtLocation(Items.ITEM_FRAME);
+               this.spawnAtLocation(this.getFrameItemStack());
             }
 
             if (!var3.isEmpty()) {
                var3 = var3.copy();
                this.removeFramedMap(var3);
@@ -211,14 +231,16 @@
          }
       }
    }
 
    private void removeFramedMap(ItemStack var1) {
-      if (var1.getItem() == Items.FILLED_MAP) {
-         MapItemSavedData var2 = MapItem.getOrCreateSavedData(var1, this.level);
-         var2.removedFromFrame(this.pos, this.getId());
-         var2.setDirty(true);
+      if (var1.is(Items.FILLED_MAP)) {
+         MapItemSavedData var2 = MapItem.getSavedData(var1, this.level);
+         if (var2 != null) {
+            var2.removedFromFrame(this.pos, this.getId());
+            var2.setDirty(true);
+         }
       }
 
       var1.setEntityRepresentation((Entity)null);
    }
 
@@ -237,28 +259,36 @@
          var1.setEntityRepresentation(this);
       }
 
       this.getEntityData().set(DATA_ITEM, var1);
       if (!var1.isEmpty()) {
-         this.playSound(SoundEvents.ITEM_FRAME_ADD_ITEM, 1.0F, 1.0F);
+         this.playSound(this.getAddItemSound(), 1.0F, 1.0F);
       }
 
       if (var2 && this.pos != null) {
          this.level.updateNeighbourForOutputSignal(this.pos, Blocks.AIR);
       }
 
    }
 
-   public boolean setSlot(int var1, ItemStack var2) {
-      if (var1 == 0) {
-         this.setItem(var2);
-         return true;
-      } else {
-         return false;
-      }
+   public SoundEvent getAddItemSound() {
+      return SoundEvents.ITEM_FRAME_ADD_ITEM;
    }
 
+   public SlotAccess getSlot(int var1) {
+      return var1 == 0 ? new SlotAccess() {
+         public ItemStack get() {
+            return ItemFrame.this.getItem();
+         }
+
+         public boolean set(ItemStack var1) {
+            ItemFrame.this.setItem(var1);
+            return true;
+         }
+      } : super.getSlot(var1);
+   }
+
    public void onSyncedDataUpdated(EntityDataAccessor<?> var1) {
       if (var1.equals(DATA_ITEM)) {
          ItemStack var2 = this.getItem();
          if (!var2.isEmpty() && var2.getFrame() != this) {
             var2.setEntityRepresentation(this);
@@ -328,35 +358,53 @@
       boolean var5 = !var3.isEmpty();
       if (this.fixed) {
          return InteractionResult.PASS;
       } else if (!this.level.isClientSide) {
          if (!var4) {
-            if (var5 && !this.removed) {
+            if (var5 && !this.isRemoved()) {
                this.setItem(var3);
-               if (!var1.abilities.instabuild) {
+               if (!var1.getAbilities().instabuild) {
                   var3.shrink(1);
                }
             }
          } else {
-            this.playSound(SoundEvents.ITEM_FRAME_ROTATE_ITEM, 1.0F, 1.0F);
+            this.playSound(this.getRotateItemSound(), 1.0F, 1.0F);
             this.setRotation(this.getRotation() + 1);
          }
 
          return InteractionResult.CONSUME;
       } else {
          return !var4 && !var5 ? InteractionResult.PASS : InteractionResult.SUCCESS;
       }
    }
 
+   public SoundEvent getRotateItemSound() {
+      return SoundEvents.ITEM_FRAME_ROTATE_ITEM;
+   }
+
    public int getAnalogOutput() {
       return this.getItem().isEmpty() ? 0 : this.getRotation() % 8 + 1;
    }
 
    public Packet<?> getAddEntityPacket() {
       return new ClientboundAddEntityPacket(this, this.getType(), this.direction.get3DDataValue(), this.getPos());
    }
 
+   public void recreateFromPacket(ClientboundAddEntityPacket var1) {
+      super.recreateFromPacket(var1);
+      this.setDirection(Direction.from3DDataValue(var1.getData()));
+   }
+
+   public ItemStack getPickResult() {
+      ItemStack var1 = this.getItem();
+      return var1.isEmpty() ? this.getFrameItemStack() : var1.copy();
+   }
+
+   protected ItemStack getFrameItemStack() {
+      return new ItemStack(Items.ITEM_FRAME);
+   }
+
    static {
       DATA_ITEM = SynchedEntityData.defineId(ItemFrame.class, EntityDataSerializers.ITEM_STACK);
       DATA_ROTATION = SynchedEntityData.defineId(ItemFrame.class, EntityDataSerializers.INT);
    }
 }
