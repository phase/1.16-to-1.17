--- net/minecraft/world/entity/decoration/ArmorStand.java
+++ net/minecraft/world/entity/decoration/ArmorStand.java
@@ -313,11 +313,11 @@
 
    }
 
    public InteractionResult interactAt(Player var1, Vec3 var2, InteractionHand var3) {
       ItemStack var4 = var1.getItemInHand(var3);
-      if (!this.isMarker() && var4.getItem() != Items.NAME_TAG) {
+      if (!this.isMarker() && !var4.is(Items.NAME_TAG)) {
          if (var1.isSpectator()) {
             return InteractionResult.SUCCESS;
          } else if (var1.level.isClientSide) {
             return InteractionResult.CONSUME;
          } else {
@@ -379,11 +379,11 @@
          return false;
       } else if (var5.isEmpty() && (this.disabledSlots & 1 << var2.getFilterFlag() + 16) != 0) {
          return false;
       } else {
          ItemStack var6;
-         if (var1.abilities.instabuild && var5.isEmpty() && !var3.isEmpty()) {
+         if (var1.getAbilities().instabuild && var5.isEmpty() && !var3.isEmpty()) {
             var6 = var3.copy();
             var6.setCount(1);
             this.setItemSlot(var2, var6);
             return true;
          } else if (!var3.isEmpty() && var3.getCount() > 1) {
@@ -403,18 +403,18 @@
          }
       }
    }
 
    public boolean hurt(DamageSource var1, float var2) {
-      if (!this.level.isClientSide && !this.removed) {
+      if (!this.level.isClientSide && !this.isRemoved()) {
          if (DamageSource.OUT_OF_WORLD.equals(var1)) {
-            this.remove();
+            this.kill();
             return false;
          } else if (!this.isInvulnerableTo(var1) && !this.invisible && !this.isMarker()) {
             if (var1.isExplosion()) {
                this.brokenByAnything(var1);
-               this.remove();
+               this.kill();
                return false;
             } else if (DamageSource.IN_FIRE.equals(var1)) {
                if (this.isOnFire()) {
                   this.causeDamage(var1, 0.15F);
                } else {
@@ -429,26 +429,26 @@
                boolean var3 = var1.getDirectEntity() instanceof AbstractArrow;
                boolean var4 = var3 && ((AbstractArrow)var1.getDirectEntity()).getPierceLevel() > 0;
                boolean var5 = "player".equals(var1.getMsgId());
                if (!var5 && !var3) {
                   return false;
-               } else if (var1.getEntity() instanceof Player && !((Player)var1.getEntity()).abilities.mayBuild) {
+               } else if (var1.getEntity() instanceof Player && !((Player)var1.getEntity()).getAbilities().mayBuild) {
                   return false;
                } else if (var1.isCreativePlayer()) {
                   this.playBrokenSound();
                   this.showBreakingParticles();
-                  this.remove();
+                  this.kill();
                   return var4;
                } else {
                   long var6 = this.level.getGameTime();
                   if (var6 - this.lastHit > 5L && !var3) {
                      this.level.broadcastEntityEvent(this, (byte)32);
                      this.lastHit = var6;
                   } else {
                      this.brokenByPlayer(var1);
                      this.showBreakingParticles();
-                     this.remove();
+                     this.kill();
                   }
 
                   return true;
                }
             }
@@ -492,11 +492,11 @@
    private void causeDamage(DamageSource var1, float var2) {
       float var3 = this.getHealth();
       var3 -= var2;
       if (var3 <= 0.5F) {
          this.brokenByAnything(var1);
-         this.remove();
+         this.kill();
       } else {
          this.setHealth(var3);
       }
 
    }
@@ -610,11 +610,11 @@
    public boolean isBaby() {
       return this.isSmall();
    }
 
    public void kill() {
-      this.remove();
+      this.remove(Entity.RemovalReason.KILLED);
    }
 
    public boolean ignoreExplosion() {
       return this.isInvisible();
    }
@@ -801,10 +801,14 @@
       } else {
          return super.getLightProbePosition(var1);
       }
    }
 
+   public ItemStack getPickResult() {
+      return new ItemStack(Items.ARMOR_STAND);
+   }
+
    static {
       BABY_DIMENSIONS = EntityType.ARMOR_STAND.getDimensions().scale(0.5F);
       DATA_CLIENT_FLAGS = SynchedEntityData.defineId(ArmorStand.class, EntityDataSerializers.BYTE);
       DATA_HEAD_POSE = SynchedEntityData.defineId(ArmorStand.class, EntityDataSerializers.ROTATIONS);
       DATA_BODY_POSE = SynchedEntityData.defineId(ArmorStand.class, EntityDataSerializers.ROTATIONS);
