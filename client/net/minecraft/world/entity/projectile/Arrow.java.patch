--- net/minecraft/world/entity/projectile/Arrow.java
+++ net/minecraft/world/entity/projectile/Arrow.java
@@ -11,21 +11,25 @@
 import net.minecraft.nbt.ListTag;
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.EntityDataSerializers;
 import net.minecraft.network.syncher.SynchedEntityData;
 import net.minecraft.world.effect.MobEffectInstance;
+import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.alchemy.Potion;
 import net.minecraft.world.item.alchemy.PotionUtils;
 import net.minecraft.world.item.alchemy.Potions;
 import net.minecraft.world.level.Level;
 
 public class Arrow extends AbstractArrow {
+   private static final int EXPOSED_POTION_DECAY_TIME = 600;
+   private static final int NO_EFFECT_COLOR = -1;
    private static final EntityDataAccessor<Integer> ID_EFFECT_COLOR;
+   private static final byte EVENT_POTION_PUFF = 0;
    private Potion potion;
    private final Set<MobEffectInstance> effects;
    private boolean fixedColor;
 
    public Arrow(EntityType<? extends Arrow> var1, Level var2) {
@@ -45,11 +49,11 @@
       this.potion = Potions.EMPTY;
       this.effects = Sets.newHashSet();
    }
 
    public void setEffectsFromItem(ItemStack var1) {
-      if (var1.getItem() == Items.TIPPED_ARROW) {
+      if (var1.is(Items.TIPPED_ARROW)) {
          this.potion = PotionUtils.getPotion(var1);
          List var2 = PotionUtils.getCustomEffects(var1);
          if (!var2.isEmpty()) {
             Iterator var3 = var2.iterator();
 
@@ -63,11 +67,11 @@
          if (var5 == -1) {
             this.updateColor();
          } else {
             this.setFixedColor(var5);
          }
-      } else if (var1.getItem() == Items.ARROW) {
+      } else if (var1.is(Items.ARROW)) {
          this.potion = Potions.EMPTY;
          this.effects.clear();
          this.entityData.set(ID_EFFECT_COLOR, -1);
       }
 
@@ -140,11 +144,11 @@
       this.entityData.set(ID_EFFECT_COLOR, var1);
    }
 
    public void addAdditionalSaveData(CompoundTag var1) {
       super.addAdditionalSaveData(var1);
-      if (this.potion != Potions.EMPTY && this.potion != null) {
+      if (this.potion != Potions.EMPTY) {
          var1.putString("Potion", Registry.POTION.getKey(this.potion).toString());
       }
 
       if (this.fixedColor) {
          var1.putInt("Color", this.getColor());
@@ -185,24 +189,25 @@
 
    }
 
    protected void doPostHurtEffects(LivingEntity var1) {
       super.doPostHurtEffects(var1);
-      Iterator var2 = this.potion.getEffects().iterator();
+      Entity var2 = this.getEffectSource();
+      Iterator var3 = this.potion.getEffects().iterator();
 
-      MobEffectInstance var3;
-      while(var2.hasNext()) {
-         var3 = (MobEffectInstance)var2.next();
-         var1.addEffect(new MobEffectInstance(var3.getEffect(), Math.max(var3.getDuration() / 8, 1), var3.getAmplifier(), var3.isAmbient(), var3.isVisible()));
+      MobEffectInstance var4;
+      while(var3.hasNext()) {
+         var4 = (MobEffectInstance)var3.next();
+         var1.addEffect(new MobEffectInstance(var4.getEffect(), Math.max(var4.getDuration() / 8, 1), var4.getAmplifier(), var4.isAmbient(), var4.isVisible()), var2);
       }
 
       if (!this.effects.isEmpty()) {
-         var2 = this.effects.iterator();
+         var3 = this.effects.iterator();
 
-         while(var2.hasNext()) {
-            var3 = (MobEffectInstance)var2.next();
-            var1.addEffect(var3);
+         while(var3.hasNext()) {
+            var4 = (MobEffectInstance)var3.next();
+            var1.addEffect(var4, var2);
          }
       }
 
    }
 
