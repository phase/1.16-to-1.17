--- net/minecraft/world/entity/projectile/ProjectileUtil.java
+++ net/minecraft/world/entity/projectile/ProjectileUtil.java
@@ -18,10 +18,13 @@
 import net.minecraft.world.phys.EntityHitResult;
 import net.minecraft.world.phys.HitResult;
 import net.minecraft.world.phys.Vec3;
 
 public final class ProjectileUtil {
+   public ProjectileUtil() {
+   }
+
    public static HitResult getHitResult(Entity var0, Predicate<Entity> var1) {
       Vec3 var2 = var0.getDeltaMovement();
       Level var3 = var0.level;
       Vec3 var4 = var0.position();
       Vec3 var5 = var4.add(var2);
@@ -83,69 +86,76 @@
       }
    }
 
    @Nullable
    public static EntityHitResult getEntityHitResult(Level var0, Entity var1, Vec3 var2, Vec3 var3, AABB var4, Predicate<Entity> var5) {
-      double var6 = Double.MAX_VALUE;
-      Entity var8 = null;
-      Iterator var9 = var0.getEntities(var1, var4, var5).iterator();
+      return getEntityHitResult(var0, var1, var2, var3, var4, var5, 0.3F);
+   }
 
-      while(var9.hasNext()) {
-         Entity var10 = (Entity)var9.next();
-         AABB var11 = var10.getBoundingBox().inflate(0.30000001192092896D);
-         Optional var12 = var11.clip(var2, var3);
-         if (var12.isPresent()) {
-            double var13 = var2.distanceToSqr((Vec3)var12.get());
-            if (var13 < var6) {
-               var8 = var10;
-               var6 = var13;
+   @Nullable
+   public static EntityHitResult getEntityHitResult(Level var0, Entity var1, Vec3 var2, Vec3 var3, AABB var4, Predicate<Entity> var5, float var6) {
+      double var7 = Double.MAX_VALUE;
+      Entity var9 = null;
+      Iterator var10 = var0.getEntities(var1, var4, var5).iterator();
+
+      while(var10.hasNext()) {
+         Entity var11 = (Entity)var10.next();
+         AABB var12 = var11.getBoundingBox().inflate((double)var6);
+         Optional var13 = var12.clip(var2, var3);
+         if (var13.isPresent()) {
+            double var14 = var2.distanceToSqr((Vec3)var13.get());
+            if (var14 < var7) {
+               var9 = var11;
+               var7 = var14;
             }
          }
       }
 
-      if (var8 == null) {
+      if (var9 == null) {
          return null;
       } else {
-         return new EntityHitResult(var8);
+         return new EntityHitResult(var9);
       }
    }
 
-   public static final void rotateTowardsMovement(Entity var0, float var1) {
+   public static void rotateTowardsMovement(Entity var0, float var1) {
       Vec3 var2 = var0.getDeltaMovement();
       if (var2.lengthSqr() != 0.0D) {
-         float var3 = Mth.sqrt(Entity.getHorizontalDistanceSqr(var2));
-         var0.yRot = (float)(Mth.atan2(var2.z, var2.x) * 57.2957763671875D) + 90.0F;
+         double var3 = var2.horizontalDistance();
+         var0.setYRot((float)(Mth.atan2(var2.z, var2.x) * 57.2957763671875D) + 90.0F);
+         var0.setXRot((float)(Mth.atan2(var3, var2.y) * 57.2957763671875D) - 90.0F);
 
-         for(var0.xRot = (float)(Mth.atan2((double)var3, var2.y) * 57.2957763671875D) - 90.0F; var0.xRot - var0.xRotO < -180.0F; var0.xRotO -= 360.0F) {
+         while(var0.getXRot() - var0.xRotO < -180.0F) {
+            var0.xRotO -= 360.0F;
          }
 
-         while(var0.xRot - var0.xRotO >= 180.0F) {
+         while(var0.getXRot() - var0.xRotO >= 180.0F) {
             var0.xRotO += 360.0F;
          }
 
-         while(var0.yRot - var0.yRotO < -180.0F) {
+         while(var0.getYRot() - var0.yRotO < -180.0F) {
             var0.yRotO -= 360.0F;
          }
 
-         while(var0.yRot - var0.yRotO >= 180.0F) {
+         while(var0.getYRot() - var0.yRotO >= 180.0F) {
             var0.yRotO += 360.0F;
          }
 
-         var0.xRot = Mth.lerp(var1, var0.xRotO, var0.xRot);
-         var0.yRot = Mth.lerp(var1, var0.yRotO, var0.yRot);
+         var0.setXRot(Mth.lerp(var1, var0.xRotO, var0.getXRot()));
+         var0.setYRot(Mth.lerp(var1, var0.yRotO, var0.getYRot()));
       }
    }
 
    public static InteractionHand getWeaponHoldingHand(LivingEntity var0, Item var1) {
-      return var0.getMainHandItem().getItem() == var1 ? InteractionHand.MAIN_HAND : InteractionHand.OFF_HAND;
+      return var0.getMainHandItem().is(var1) ? InteractionHand.MAIN_HAND : InteractionHand.OFF_HAND;
    }
 
    public static AbstractArrow getMobArrow(LivingEntity var0, ItemStack var1, float var2) {
-      ArrowItem var3 = (ArrowItem)((ArrowItem)(var1.getItem() instanceof ArrowItem ? var1.getItem() : Items.ARROW));
+      ArrowItem var3 = (ArrowItem)(var1.getItem() instanceof ArrowItem ? var1.getItem() : Items.ARROW);
       AbstractArrow var4 = var3.createArrow(var0.level, var1, var0);
       var4.setEnchantmentEffectsFromEntity(var0, var2);
-      if (var1.getItem() == Items.TIPPED_ARROW && var4 instanceof Arrow) {
+      if (var1.is(Items.TIPPED_ARROW) && var4 instanceof Arrow) {
          ((Arrow)var4).setEffectsFromItem(var1);
       }
 
       return var4;
    }
