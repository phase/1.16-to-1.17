--- net/minecraft/world/entity/projectile/Projectile.java
+++ net/minecraft/world/entity/projectile/Projectile.java
@@ -2,45 +2,43 @@
 
 import java.util.Iterator;
 import java.util.UUID;
 import javax.annotation.Nullable;
 import net.minecraft.nbt.CompoundTag;
+import net.minecraft.network.protocol.Packet;
+import net.minecraft.network.protocol.game.ClientboundAddEntityPacket;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.util.Mth;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.EntityHitResult;
 import net.minecraft.world.phys.HitResult;
 import net.minecraft.world.phys.Vec3;
 
 public abstract class Projectile extends Entity {
    private UUID ownerUUID;
-   private int ownerNetworkId;
    private boolean leftOwner;
+   private boolean hasBeenShot;
 
    Projectile(EntityType<? extends Projectile> var1, Level var2) {
       super(var1, var2);
    }
 
    public void setOwner(@Nullable Entity var1) {
       if (var1 != null) {
          this.ownerUUID = var1.getUUID();
-         this.ownerNetworkId = var1.getId();
       }
 
    }
 
    @Nullable
    public Entity getOwner() {
-      if (this.ownerUUID != null && this.level instanceof ServerLevel) {
-         return ((ServerLevel)this.level).getEntity(this.ownerUUID);
-      } else {
-         return this.ownerNetworkId != 0 ? this.level.getEntity(this.ownerNetworkId) : null;
-      }
+      return this.ownerUUID != null && this.level instanceof ServerLevel ? ((ServerLevel)this.level).getEntity(this.ownerUUID) : null;
    }
 
    protected void addAdditionalSaveData(CompoundTag var1) {
       if (this.ownerUUID != null) {
          var1.putUUID("Owner", this.ownerUUID);
@@ -48,21 +46,32 @@
 
       if (this.leftOwner) {
          var1.putBoolean("LeftOwner", true);
       }
 
+      var1.putBoolean("HasBeenShot", this.hasBeenShot);
    }
 
+   protected boolean ownedBy(Entity var1) {
+      return var1.getUUID().equals(this.ownerUUID);
+   }
+
    protected void readAdditionalSaveData(CompoundTag var1) {
       if (var1.hasUUID("Owner")) {
          this.ownerUUID = var1.getUUID("Owner");
       }
 
       this.leftOwner = var1.getBoolean("LeftOwner");
+      this.hasBeenShot = var1.getBoolean("HasBeenShot");
    }
 
    public void tick() {
+      if (!this.hasBeenShot) {
+         this.gameEvent(GameEvent.PROJECTILE_SHOOT, this.getOwner(), this.blockPosition());
+         this.hasBeenShot = true;
+      }
+
       if (!this.leftOwner) {
          this.leftOwner = this.checkLeftOwner();
       }
 
       super.tick();
@@ -111,10 +120,14 @@
          this.onHitEntity((EntityHitResult)var1);
       } else if (var2 == HitResult.Type.BLOCK) {
          this.onHitBlock((BlockHitResult)var1);
       }
 
+      if (var2 != HitResult.Type.MISS) {
+         this.gameEvent(GameEvent.PROJECTILE_LAND, this.getOwner());
+      }
+
    }
 
    protected void onHitEntity(EntityHitResult var1) {
    }
 
@@ -161,6 +174,20 @@
          var0 += 360.0F;
       }
 
       return Mth.lerp(0.2F, var0, var1);
    }
+
+   public Packet<?> getAddEntityPacket() {
+      Entity var1 = this.getOwner();
+      return new ClientboundAddEntityPacket(this, var1 == null ? 0 : var1.getId());
+   }
+
+   public void recreateFromPacket(ClientboundAddEntityPacket var1) {
+      super.recreateFromPacket(var1);
+      Entity var2 = this.level.getEntity(var1.getData());
+      if (var2 != null) {
+         this.setOwner(var2);
+      }
+
+   }
 }
