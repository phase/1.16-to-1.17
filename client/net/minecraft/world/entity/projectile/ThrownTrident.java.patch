--- net/minecraft/world/entity/projectile/ThrownTrident.java
+++ net/minecraft/world/entity/projectile/ThrownTrident.java
@@ -41,15 +41,10 @@
       this.tridentItem = var3.copy();
       this.entityData.set(ID_LOYALTY, (byte)EnchantmentHelper.getLoyalty(var3));
       this.entityData.set(ID_FOIL, var3.hasFoil());
    }
 
-   public ThrownTrident(Level var1, double var2, double var4, double var6) {
-      super(EntityType.TRIDENT, var2, var4, var6, var1);
-      this.tridentItem = new ItemStack(Items.TRIDENT);
-   }
-
    protected void defineSynchedData() {
       super.defineSynchedData();
       this.entityData.define(ID_LOYALTY, (byte)0);
       this.entityData.define(ID_FOIL, false);
    }
@@ -65,11 +60,11 @@
          if (var2 > 0 && !this.isAcceptibleReturnOwner()) {
             if (!this.level.isClientSide && this.pickup == AbstractArrow.Pickup.ALLOWED) {
                this.spawnAtLocation(this.getPickupItem(), 0.1F);
             }
 
-            this.remove();
+            this.discard();
          } else if (var2 > 0) {
             this.setNoPhysics(true);
             Vec3 var3 = new Vec3(var1.getX() - this.getX(), var1.getEyeY() - this.getY(), var1.getZ() - this.getZ());
             this.setPosRaw(this.getX(), this.getY() + var3.y * 0.015D * (double)var2, this.getZ());
             if (this.level.isClientSide) {
@@ -139,11 +134,11 @@
          }
       }
 
       this.setDeltaMovement(this.getDeltaMovement().multiply(-0.01D, -0.1D, -0.01D));
       float var11 = 1.0F;
-      if (this.level instanceof ServerLevel && this.level.isThundering() && EnchantmentHelper.hasChanneling(this.tridentItem)) {
+      if (this.level instanceof ServerLevel && this.level.isThundering() && this.isChanneling()) {
          BlockPos var8 = var2.blockPosition();
          if (this.level.canSeeSky(var8)) {
             LightningBolt var9 = (LightningBolt)EntityType.LIGHTNING_BOLT.create(this.level);
             var9.moveTo(Vec3.atBottomCenterOf(var8));
             var9.setCause(var10 instanceof ServerPlayer ? (ServerPlayer)var10 : null);
@@ -154,10 +149,14 @@
       }
 
       this.playSound(var6, var11, 1.0F);
    }
 
+   public boolean isChanneling() {
+      return EnchantmentHelper.hasChanneling(this.tridentItem);
+   }
+
    protected SoundEvent getDefaultHitGroundSoundEvent() {
       return SoundEvents.TRIDENT_HIT_GROUND;
    }
 
    public void playerTouch(Player var1) {
