--- net/minecraft/world/entity/LivingEntity.java
+++ net/minecraft/world/entity/LivingEntity.java
@@ -49,10 +49,11 @@
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.stats.Stats;
 import net.minecraft.tags.BlockTags;
 import net.minecraft.tags.FluidTags;
+import net.minecraft.tags.ItemTags;
 import net.minecraft.tags.Tag;
 import net.minecraft.util.Mth;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.damagesource.CombatRules;
 import net.minecraft.world.damagesource.CombatTracker;
@@ -77,10 +78,11 @@
 import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.entity.projectile.AbstractArrow;
 import net.minecraft.world.food.FoodProperties;
 import net.minecraft.world.item.ArmorItem;
+import net.minecraft.world.item.BlockItem;
 import net.minecraft.world.item.ElytraItem;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.UseAnim;
@@ -89,18 +91,20 @@
 import net.minecraft.world.item.enchantment.Enchantments;
 import net.minecraft.world.item.enchantment.FrostWalkerEnchantment;
 import net.minecraft.world.level.ClipContext;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.Level;
+import net.minecraft.world.level.block.AbstractSkullBlock;
 import net.minecraft.world.level.block.BedBlock;
-import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.HoneyBlock;
 import net.minecraft.world.level.block.LadderBlock;
+import net.minecraft.world.level.block.PowderSnowBlock;
 import net.minecraft.world.level.block.SoundType;
 import net.minecraft.world.level.block.TrapDoorBlock;
 import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.material.Fluid;
 import net.minecraft.world.level.material.FluidState;
 import net.minecraft.world.level.storage.loot.LootContext;
 import net.minecraft.world.level.storage.loot.LootTable;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParamSets;
@@ -112,10 +116,11 @@
 import org.apache.logging.log4j.Logger;
 
 public abstract class LivingEntity extends Entity {
    private static final UUID SPEED_MODIFIER_SPRINTING_UUID = UUID.fromString("662A6B8D-DA3E-4C1C-8813-96EA6097278D");
    private static final UUID SPEED_MODIFIER_SOUL_SPEED_UUID = UUID.fromString("87f46a96-686f-4796-b035-22e16ee9e038");
+   private static final UUID SPEED_MODIFIER_POWDER_SNOW_UUID = UUID.fromString("1eaf83ff-7207-4596-b37a-d7a07b3ec4ce");
    private static final AttributeModifier SPEED_MODIFIER_SPRINTING;
    protected static final EntityDataAccessor<Byte> DATA_LIVING_ENTITY_FLAGS;
    private static final EntityDataAccessor<Float> DATA_HEALTH_ID;
    private static final EntityDataAccessor<Integer> DATA_EFFECT_COLOR_ID;
    private static final EntityDataAccessor<Boolean> DATA_EFFECT_AMBIENCE_ID;
@@ -187,10 +192,11 @@
    protected ItemStack useItem;
    protected int useItemRemaining;
    protected int fallFlyTicks;
    private BlockPos lastPos;
    private Optional<BlockPos> lastClimbablePos;
+   @Nullable
    private DamageSource lastDamageSource;
    private long lastDamageStamp;
    protected int autoSpinAttackTicks;
    private float swimAmount;
    private float swimAmountO;
@@ -311,11 +317,11 @@
 
       if (this.fireImmune() || this.level.isClientSide) {
          this.clearFire();
       }
 
-      boolean var11 = var1 && ((Player)this).abilities.invulnerable;
+      boolean var11 = var1 && ((Player)this).getAbilities().invulnerable;
       if (this.isAlive()) {
          if (this.isEyeInFluid(FluidTags.WATER) && !this.level.getBlockState(new BlockPos(this.getX(), this.getEyeY(), this.getZ())).is(Blocks.BUBBLE_COLUMN)) {
             if (!this.canBreatheUnderwater() && !MobEffectUtil.hasWaterBreathing(this) && !var11) {
                this.setAirSupply(this.decreaseAirSupply(this.getAirSupply()));
                if (this.getAirSupply() == -20) {
@@ -347,11 +353,11 @@
                this.onChangedBlock(var12);
             }
          }
       }
 
-      if (this.isAlive() && this.isInWaterRainOrBubble()) {
+      if (this.isAlive() && (this.isInWaterRainOrBubble() || this.bodyIsInPowderSnow)) {
          this.clearFire();
       }
 
       if (this.hurtTime > 0) {
          --this.hurtTime;
@@ -444,10 +450,36 @@
          }
       }
 
    }
 
+   protected void removeFrost() {
+      AttributeInstance var1 = this.getAttribute(Attributes.MOVEMENT_SPEED);
+      if (var1 != null) {
+         if (var1.getModifier(SPEED_MODIFIER_POWDER_SNOW_UUID) != null) {
+            var1.removeModifier(SPEED_MODIFIER_POWDER_SNOW_UUID);
+         }
+
+      }
+   }
+
+   protected void tryAddFrost() {
+      if (!this.getBlockStateOn().isAir()) {
+         int var1 = this.getTicksFrozen();
+         if (var1 > 0) {
+            AttributeInstance var2 = this.getAttribute(Attributes.MOVEMENT_SPEED);
+            if (var2 == null) {
+               return;
+            }
+
+            float var3 = -0.05F * this.getPercentFrozen();
+            var2.addTransientModifier(new AttributeModifier(SPEED_MODIFIER_POWDER_SNOW_UUID, "Powder snow slow", (double)var3, AttributeModifier.Operation.ADDITION));
+         }
+      }
+
+   }
+
    protected void onChangedBlock(BlockPos var1) {
       int var2 = EnchantmentHelper.getEnchantmentLevel(Enchantments.FROST_WALKER, this);
       if (var2 > 0) {
          FrostWalkerEnchantment.onEntityMoved(this, this.level, var1, var2);
       }
@@ -476,11 +508,11 @@
    }
 
    protected void tickDeath() {
       ++this.deathTime;
       if (this.deathTime == 20) {
-         this.remove();
+         this.remove(Entity.RemovalReason.KILLED);
 
          for(int var1 = 0; var1 < 20; ++var1) {
             double var2 = this.random.nextGaussian() * 0.02D;
             double var4 = this.random.nextGaussian() * 0.02D;
             double var6 = this.random.nextGaussian() * 0.02D;
@@ -564,19 +596,12 @@
    public void setNoActionTime(int var1) {
       this.noActionTime = var1;
    }
 
    protected void playEquipSound(ItemStack var1) {
-      if (!var1.isEmpty()) {
-         SoundEvent var2 = SoundEvents.ARMOR_EQUIP_GENERIC;
-         Item var3 = var1.getItem();
-         if (var3 instanceof ArmorItem) {
-            var2 = ((ArmorItem)var3).getMaterial().getEquipSound();
-         } else if (var3 == Items.ELYTRA) {
-            var2 = SoundEvents.ARMOR_EQUIP_ELYTRA;
-         }
-
+      SoundEvent var2 = var1.getEquipSound();
+      if (!var1.isEmpty() && var2 != null && !this.isSpectator()) {
          this.playSound(var2, 1.0F, 1.0F);
       }
    }
 
    public void addAdditionalSaveData(CompoundTag var1) {
@@ -745,14 +770,13 @@
 
          var2 *= 0.7D * (double)var4;
       }
 
       if (var1 != null) {
-         ItemStack var7 = this.getItemBySlot(EquipmentSlot.HEAD);
-         Item var5 = var7.getItem();
-         EntityType var6 = var1.getType();
-         if (var6 == EntityType.SKELETON && var5 == Items.SKELETON_SKULL || var6 == EntityType.ZOMBIE && var5 == Items.ZOMBIE_HEAD || var6 == EntityType.CREEPER && var5 == Items.CREEPER_HEAD) {
+         ItemStack var6 = this.getItemBySlot(EquipmentSlot.HEAD);
+         EntityType var5 = var1.getType();
+         if (var5 == EntityType.SKELETON && var6.is(Items.SKELETON_SKULL) || var5 == EntityType.ZOMBIE && var6.is(Items.ZOMBIE_HEAD) || var5 == EntityType.CREEPER && var6.is(Items.CREEPER_HEAD)) {
             var2 *= 0.5D;
          }
       }
 
       return var2;
@@ -764,10 +788,14 @@
 
    public boolean canAttack(LivingEntity var1, TargetingConditions var2) {
       return var2.test(this, var1);
    }
 
+   public boolean canBeTargeted() {
+      return true;
+   }
+
    public static boolean areAllEffectsAmbient(Collection<MobEffectInstance> var0) {
       Iterator var1 = var0.iterator();
 
       MobEffectInstance var2;
       do {
@@ -939,11 +967,11 @@
             this.stopSleeping();
          }
 
          this.noActionTime = 0;
          float var3 = var2;
-         if ((var1 == DamageSource.ANVIL || var1 == DamageSource.FALLING_BLOCK) && !this.getItemBySlot(EquipmentSlot.HEAD).isEmpty()) {
+         if (var1.isDamageHelmet() && !this.getItemBySlot(EquipmentSlot.HEAD).isEmpty()) {
             this.getItemBySlot(EquipmentSlot.HEAD).hurtAndBreak((int)(var2 * 4.0F + this.random.nextFloat() * var2 * 2.0F), this, (var0) -> {
                var0.broadcastBreakEvent(EquipmentSlot.HEAD);
             });
             var2 *= 0.75F;
          }
@@ -1017,10 +1045,12 @@
                   var13 = 36;
                } else if (var1.isFire()) {
                   var13 = 37;
                } else if (var1 == DamageSource.SWEET_BERRY_BUSH) {
                   var13 = 44;
+               } else if (var1 == DamageSource.FREEZE) {
+                  var13 = 57;
                } else {
                   var13 = 2;
                }
 
                this.level.broadcastEntityEvent(this, var13);
@@ -1073,10 +1103,11 @@
 
          if (var7 instanceof ServerPlayer) {
             CriteriaTriggers.PLAYER_HURT_ENTITY.trigger((ServerPlayer)var7, this, var1, var3, var2, var4);
          }
 
+         this.gameEvent(var1.getEntity(), GameEvent.ENTITY_HIT);
          return var16;
       }
    }
 
    protected void blockUsingShield(LivingEntity var1) {
@@ -1096,11 +1127,11 @@
          int var5 = var4.length;
 
          for(int var6 = 0; var6 < var5; ++var6) {
             InteractionHand var7 = var4[var6];
             ItemStack var3 = this.getItemInHand(var7);
-            if (var3.getItem() == Items.TOTEM_OF_UNDYING) {
+            if (var3.is(Items.TOTEM_OF_UNDYING)) {
                var2 = var3.copy();
                var3.shrink(1);
                break;
             }
          }
@@ -1176,11 +1207,11 @@
       }
 
    }
 
    public void die(DamageSource var1) {
-      if (!this.removed && !this.dead) {
+      if (!this.isRemoved() && !this.dead) {
          Entity var2 = var1.getEntity();
          LivingEntity var3 = this.getKillCredit();
          if (this.deathScore >= 0 && var3 != null) {
             var3.awardKillScore(this, this.deathScore, var1);
          }
@@ -1248,18 +1279,12 @@
 
    protected void dropEquipment() {
    }
 
    protected void dropExperience() {
-      if (!this.level.isClientSide && (this.isAlwaysExperienceDropper() || this.lastHurtByPlayerTime > 0 && this.shouldDropExperience() && this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBLOOT))) {
-         int var1 = this.getExperienceReward(this.lastHurtByPlayer);
-
-         while(var1 > 0) {
-            int var2 = ExperienceOrb.getExperienceValue(var1);
-            var1 -= var2;
-            this.level.addFreshEntity(new ExperienceOrb(this.level, this.getX(), this.getY(), this.getZ(), var2));
-         }
+      if (this.level instanceof ServerLevel && (this.isAlwaysExperienceDropper() || this.lastHurtByPlayerTime > 0 && this.shouldDropExperience() && this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBLOOT))) {
+         ExperienceOrb.award((ServerLevel)this.level, this.position(), this.getExperienceReward(this.lastHurtByPlayer));
       }
 
    }
 
    protected void dropCustomDeathLoot(DamageSource var1, int var2, boolean var3) {
@@ -1333,15 +1358,14 @@
       if (this.isSpectator()) {
          return false;
       } else {
          BlockPos var1 = this.blockPosition();
          BlockState var2 = this.getFeetBlockState();
-         Block var3 = var2.getBlock();
-         if (var3.is((Tag)BlockTags.CLIMBABLE)) {
+         if (var2.is(BlockTags.CLIMBABLE)) {
             this.lastClimbablePos = Optional.of(var1);
             return true;
-         } else if (var3 instanceof TrapDoorBlock && this.trapdoorUsableAsLadder(var1, var2)) {
+         } else if (var2.getBlock() instanceof TrapDoorBlock && this.trapdoorUsableAsLadder(var1, var2)) {
             this.lastClimbablePos = Optional.of(var1);
             return true;
          } else {
             return false;
          }
@@ -1362,23 +1386,23 @@
 
       return false;
    }
 
    public boolean isAlive() {
-      return !this.removed && this.getHealth() > 0.0F;
+      return !this.isRemoved() && this.getHealth() > 0.0F;
    }
 
-   public boolean causeFallDamage(float var1, float var2) {
-      boolean var3 = super.causeFallDamage(var1, var2);
-      int var4 = this.calculateFallDamage(var1, var2);
-      if (var4 > 0) {
-         this.playSound(this.getFallDamageSound(var4), 1.0F, 1.0F);
+   public boolean causeFallDamage(float var1, float var2, DamageSource var3) {
+      boolean var4 = super.causeFallDamage(var1, var2, var3);
+      int var5 = this.calculateFallDamage(var1, var2);
+      if (var5 > 0) {
+         this.playSound(this.getFallDamageSound(var5), 1.0F, 1.0F);
          this.playBlockFallSound();
-         this.hurt(DamageSource.FALL, (float)var4);
+         this.hurt(var3, (float)var5);
          return true;
       } else {
-         return var3;
+         return var4;
       }
    }
 
    protected int calculateFallDamage(float var1, float var2) {
       MobEffectInstance var3 = this.getEffect(MobEffects.JUMP);
@@ -1544,47 +1568,47 @@
       }
 
    }
 
    public void handleEntityEvent(byte var1) {
-      boolean var2;
       switch(var1) {
       case 2:
       case 33:
       case 36:
       case 37:
       case 44:
-         var2 = var1 == 33;
-         boolean var16 = var1 == 36;
-         boolean var17 = var1 == 37;
-         boolean var5 = var1 == 44;
+      case 57:
          this.animationSpeed = 1.5F;
          this.invulnerableTime = 20;
          this.hurtDuration = 10;
          this.hurtTime = this.hurtDuration;
          this.hurtDir = 0.0F;
-         if (var2) {
+         if (var1 == 33) {
             this.playSound(SoundEvents.THORNS_HIT, this.getSoundVolume(), (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
          }
 
-         DamageSource var18;
-         if (var17) {
-            var18 = DamageSource.ON_FIRE;
-         } else if (var16) {
-            var18 = DamageSource.DROWN;
-         } else if (var5) {
-            var18 = DamageSource.SWEET_BERRY_BUSH;
+         DamageSource var16;
+         if (var1 == 37) {
+            var16 = DamageSource.ON_FIRE;
+         } else if (var1 == 36) {
+            var16 = DamageSource.DROWN;
+         } else if (var1 == 44) {
+            var16 = DamageSource.SWEET_BERRY_BUSH;
+         } else if (var1 == 57) {
+            var16 = DamageSource.FREEZE;
          } else {
-            var18 = DamageSource.GENERIC;
+            var16 = DamageSource.GENERIC;
          }
 
-         SoundEvent var19 = this.getHurtSound(var18);
-         if (var19 != null) {
-            this.playSound(var19, this.getSoundVolume(), (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
+         SoundEvent var17 = this.getHurtSound(var16);
+         if (var17 != null) {
+            this.playSound(var17, this.getSoundVolume(), (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
          }
 
          this.hurt(DamageSource.GENERIC, 0.0F);
+         this.lastDamageSource = var16;
+         this.lastDamageStamp = this.level.getGameTime();
          break;
       case 3:
          SoundEvent var15 = this.getDeathSound();
          if (var15 != null) {
             this.playSound(var15, this.getSoundVolume(), (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
@@ -1630,21 +1654,22 @@
       case 41:
       case 42:
       case 43:
       case 45:
       case 53:
+      case 56:
       default:
          super.handleEntityEvent(var1);
          break;
       case 29:
          this.playSound(SoundEvents.SHIELD_BLOCK, 1.0F, 0.8F + this.level.random.nextFloat() * 0.4F);
          break;
       case 30:
          this.playSound(SoundEvents.SHIELD_BREAK, 0.8F, 0.8F + this.level.random.nextFloat() * 0.4F);
          break;
       case 46:
-         var2 = true;
+         boolean var2 = true;
 
          for(int var3 = 0; var3 < 128; ++var3) {
             double var4 = (double)var3 / 127.0D;
             float var6 = (this.random.nextFloat() - 0.5F) * 0.2F;
             float var7 = (this.random.nextFloat() - 0.5F) * 0.2F;
@@ -1737,16 +1762,16 @@
       return this.getItemBySlot(EquipmentSlot.OFFHAND);
    }
 
    public boolean isHolding(Item var1) {
       return this.isHolding((var1x) -> {
-         return var1x == var1;
+         return var1x.is(var1);
       });
    }
 
-   public boolean isHolding(Predicate<Item> var1) {
-      return var1.test(this.getMainHandItem().getItem()) || var1.test(this.getOffhandItem().getItem());
+   public boolean isHolding(Predicate<ItemStack> var1) {
+      return var1.test(this.getMainHandItem()) || var1.test(this.getOffhandItem());
    }
 
    public ItemStack getItemInHand(InteractionHand var1) {
       if (var1 == InteractionHand.MAIN_HAND) {
          return this.getItemBySlot(EquipmentSlot.MAINHAND);
@@ -1827,11 +1852,11 @@
 
    }
 
    private void dismountVehicle(Entity var1) {
       Vec3 var2;
-      if (!var1.removed && !this.level.getBlockState(var1.blockPosition()).getBlock().is((Tag)BlockTags.PORTALS)) {
+      if (!var1.isRemoved() && !this.level.getBlockState(var1.blockPosition()).is(BlockTags.PORTALS)) {
          var2 = var1.getDismountLocationForPassenger(this);
       } else {
          var2 = new Vec3(var1.getX(), var1.getY() + (double)var1.getBbHeight(), var1.getZ());
       }
 
@@ -1998,11 +2023,11 @@
             double var10 = var25.y;
             if (this.hasEffect(MobEffects.LEVITATION)) {
                var10 += (0.05D * (double)(this.getEffect(MobEffects.LEVITATION).getAmplifier() + 1) - var25.y) * 0.2D;
                this.fallDistance = 0.0F;
             } else if (this.level.isClientSide && !this.level.hasChunkAt(var23)) {
-               if (this.getY() > 0.0D) {
+               if (this.getY() > (double)this.level.getMinBuildHeight()) {
                   var10 = -0.1D;
                } else {
                   var10 = 0.0D;
                }
             } else if (!this.isNoGravity()) {
@@ -2033,11 +2058,11 @@
    public Vec3 handleRelativeFrictionAndCalculateMovement(Vec3 var1, float var2) {
       this.moveRelative(this.getFrictionInfluencedSpeed(var2), var1);
       this.setDeltaMovement(this.handleOnClimbable(this.getDeltaMovement()));
       this.move(MoverType.SELF, this.getDeltaMovement());
       Vec3 var3 = this.getDeltaMovement();
-      if ((this.horizontalCollision || this.jumping) && this.onClimbable()) {
+      if ((this.horizontalCollision || this.jumping) && (this.onClimbable() || this.getFeetBlockState().is(Blocks.POWDER_SNOW) && PowderSnowBlock.canEntityWalkOnPowderSnow(this))) {
          var3 = new Vec3(var3.x, 0.2D, var3.z);
       }
 
       return var3;
    }
@@ -2430,10 +2455,25 @@
       this.zza *= 0.98F;
       this.updateFallFlying();
       AABB var14 = this.getBoundingBox();
       this.travel(new Vec3((double)this.xxa, (double)this.yya, (double)this.zza));
       this.level.getProfiler().pop();
+      this.level.getProfiler().push("freezing");
+      int var9 = this.getTicksFrozen();
+      if (this.bodyIsInPowderSnow && this.canFreeze()) {
+         this.setTicksFrozen(Math.min(this.getTicksRequiredToFreeze(), var9 + 1));
+      } else {
+         this.setTicksFrozen(Math.max(0, var9 - 2));
+      }
+
+      this.removeFrost();
+      this.tryAddFrost();
+      if (this.tickCount % 60 == 0 && this.isFullyFrozen() && this.canFreeze()) {
+         this.hurt(DamageSource.FREEZE, 1.0F);
+      }
+
+      this.level.getProfiler().pop();
       this.level.getProfiler().push("push");
       if (this.autoSpinAttackTicks > 0) {
          --this.autoSpinAttackTicks;
          this.checkAutoSpinAttack(var14, this.getBoundingBox());
       }
@@ -2452,16 +2492,22 @@
 
    private void updateFallFlying() {
       boolean var1 = this.getSharedFlag(7);
       if (var1 && !this.onGround && !this.isPassenger() && !this.hasEffect(MobEffects.LEVITATION)) {
          ItemStack var2 = this.getItemBySlot(EquipmentSlot.CHEST);
-         if (var2.getItem() == Items.ELYTRA && ElytraItem.isFlyEnabled(var2)) {
+         if (var2.is(Items.ELYTRA) && ElytraItem.isFlyEnabled(var2)) {
             var1 = true;
-            if (!this.level.isClientSide && (this.fallFlyTicks + 1) % 20 == 0) {
-               var2.hurtAndBreak(1, this, (var0) -> {
-                  var0.broadcastBreakEvent(EquipmentSlot.CHEST);
-               });
+            int var3 = this.fallFlyTicks + 1;
+            if (!this.level.isClientSide && var3 % 10 == 0) {
+               int var4 = var3 / 10;
+               if (var4 % 2 == 0) {
+                  var2.hurtAndBreak(1, this, (var0) -> {
+                     var0.broadcastBreakEvent(EquipmentSlot.CHEST);
+                  });
+               }
+
+               this.gameEvent(GameEvent.ELYTRA_FREE_FALL);
             }
          } else {
             var1 = false;
          }
       } else {
@@ -2587,11 +2633,11 @@
       }
 
    }
 
    public void take(Entity var1, int var2) {
-      if (!var1.removed && !this.level.isClientSide && (var1 instanceof ItemEntity || var1 instanceof AbstractArrow || var1 instanceof ExperienceOrb)) {
+      if (!var1.isRemoved() && !this.level.isClientSide && (var1 instanceof ItemEntity || var1 instanceof AbstractArrow || var1 instanceof ExperienceOrb)) {
          ((ServerLevel)this.level).getChunkSource().broadcast(var1, new ClientboundTakeItemEntityPacket(var1.getId(), this.getId(), var2));
       }
 
    }
 
@@ -2617,11 +2663,11 @@
    public boolean isEffectiveAi() {
       return !this.level.isClientSide;
    }
 
    public boolean isPickable() {
-      return !this.removed;
+      return !this.isRemoved();
    }
 
    public boolean isPushable() {
       return this.isAlive() && !this.isSpectator() && !this.onClimbable();
    }
@@ -2888,11 +2934,11 @@
       BlockPos var17 = new BlockPos(var1, var3, var5);
       Level var18 = this.level;
       if (var18.hasChunkAt(var17)) {
          boolean var19 = false;
 
-         while(!var19 && var17.getY() > 0) {
+         while(!var19 && var17.getY() > var18.getMinBuildHeight()) {
             BlockPos var20 = var17.below();
             BlockState var21 = var18.getBlockState(var20);
             if (var21.getMaterial().blocksMotion()) {
                var19 = true;
             } else {
@@ -3050,13 +3096,15 @@
 
    public ItemStack eat(Level var1, ItemStack var2) {
       if (var2.isEdible()) {
          var1.playSound((Player)null, this.getX(), this.getY(), this.getZ(), this.getEatingSound(var2), SoundSource.NEUTRAL, 1.0F, 1.0F + (var1.random.nextFloat() - var1.random.nextFloat()) * 0.4F);
          this.addEatEffect(var2, var1, this);
-         if (!(this instanceof Player) || !((Player)this).abilities.instabuild) {
+         if (!(this instanceof Player) || !((Player)this).getAbilities().instabuild) {
             var2.shrink(1);
          }
+
+         this.gameEvent(GameEvent.EATING_FINISH);
       }
 
       return var2;
    }
 
@@ -3102,18 +3150,69 @@
    public void broadcastBreakEvent(InteractionHand var1) {
       this.broadcastBreakEvent(var1 == InteractionHand.MAIN_HAND ? EquipmentSlot.MAINHAND : EquipmentSlot.OFFHAND);
    }
 
    public AABB getBoundingBoxForCulling() {
-      if (this.getItemBySlot(EquipmentSlot.HEAD).getItem() == Items.DRAGON_HEAD) {
+      if (this.getItemBySlot(EquipmentSlot.HEAD).is(Items.DRAGON_HEAD)) {
          float var1 = 0.5F;
          return this.getBoundingBox().inflate(0.5D, 0.5D, 0.5D);
       } else {
          return super.getBoundingBoxForCulling();
       }
    }
 
+   public static EquipmentSlot getEquipmentSlotForItem(ItemStack var0) {
+      Item var1 = var0.getItem();
+      if (!var0.is(Items.CARVED_PUMPKIN) && (!(var1 instanceof BlockItem) || !(((BlockItem)var1).getBlock() instanceof AbstractSkullBlock))) {
+         if (var1 instanceof ArmorItem) {
+            return ((ArmorItem)var1).getSlot();
+         } else if (var0.is(Items.ELYTRA)) {
+            return EquipmentSlot.CHEST;
+         } else {
+            return var0.is(Items.SHIELD) ? EquipmentSlot.OFFHAND : EquipmentSlot.MAINHAND;
+         }
+      } else {
+         return EquipmentSlot.HEAD;
+      }
+   }
+
+   private static SlotAccess createEquipmentSlotAccess(LivingEntity var0, EquipmentSlot var1) {
+      return var1 != EquipmentSlot.HEAD && var1 != EquipmentSlot.MAINHAND && var1 != EquipmentSlot.OFFHAND ? SlotAccess.forEquipmentSlot(var0, var1, (var1x) -> {
+         return var1x.isEmpty() || Mob.getEquipmentSlotForItem(var1x) == var1;
+      }) : SlotAccess.forEquipmentSlot(var0, var1);
+   }
+
+   @Nullable
+   private static EquipmentSlot getEquipmentSlot(int var0) {
+      if (var0 == 100 + EquipmentSlot.HEAD.getIndex()) {
+         return EquipmentSlot.HEAD;
+      } else if (var0 == 100 + EquipmentSlot.CHEST.getIndex()) {
+         return EquipmentSlot.CHEST;
+      } else if (var0 == 100 + EquipmentSlot.LEGS.getIndex()) {
+         return EquipmentSlot.LEGS;
+      } else if (var0 == 100 + EquipmentSlot.FEET.getIndex()) {
+         return EquipmentSlot.FEET;
+      } else if (var0 == 98) {
+         return EquipmentSlot.MAINHAND;
+      } else {
+         return var0 == 99 ? EquipmentSlot.OFFHAND : null;
+      }
+   }
+
+   public SlotAccess getSlot(int var1) {
+      EquipmentSlot var2 = getEquipmentSlot(var1);
+      return var2 != null ? createEquipmentSlotAccess(this, var2) : super.getSlot(var1);
+   }
+
+   public boolean canFreeze() {
+      if (this.isSpectator()) {
+         return false;
+      } else {
+         return !this.getItemBySlot(EquipmentSlot.HEAD).is((Tag)ItemTags.FREEZE_IMMUNE_WEARABLES) && !this.getItemBySlot(EquipmentSlot.CHEST).is((Tag)ItemTags.FREEZE_IMMUNE_WEARABLES) && !this.getItemBySlot(EquipmentSlot.LEGS).is((Tag)ItemTags.FREEZE_IMMUNE_WEARABLES) && !this.getItemBySlot(EquipmentSlot.FEET).is((Tag)ItemTags.FREEZE_IMMUNE_WEARABLES);
+      }
+   }
+
    static {
       SPEED_MODIFIER_SPRINTING = new AttributeModifier(SPEED_MODIFIER_SPRINTING_UUID, "Sprinting speed boost", 0.30000001192092896D, AttributeModifier.Operation.MULTIPLY_TOTAL);
       DATA_LIVING_ENTITY_FLAGS = SynchedEntityData.defineId(LivingEntity.class, EntityDataSerializers.BYTE);
       DATA_HEALTH_ID = SynchedEntityData.defineId(LivingEntity.class, EntityDataSerializers.FLOAT);
       DATA_EFFECT_COLOR_ID = SynchedEntityData.defineId(LivingEntity.class, EntityDataSerializers.INT);
