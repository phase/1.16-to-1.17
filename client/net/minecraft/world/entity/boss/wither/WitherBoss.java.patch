--- net/minecraft/world/entity/boss/wither/WitherBoss.java
+++ net/minecraft/world/entity/boss/wither/WitherBoss.java
@@ -246,11 +246,11 @@
 
                var13 = this.getAlternativeTarget(var1);
                if (var13 > 0) {
                   Entity var16 = this.level.getEntity(var13);
                   if (var16 != null && var16.isAlive() && this.distanceToSqr(var16) <= 900.0D && this.canSee(var16)) {
-                     if (var16 instanceof Player && ((Player)var16).abilities.invulnerable) {
+                     if (var16 instanceof Player && ((Player)var16).getAbilities().invulnerable) {
                         this.setAlternativeTarget(var1, 0);
                      } else {
                         this.performRangedAttack(var1 + 1, (LivingEntity)var16);
                         this.nextHeadUpdate[var1 - 1] = this.tickCount + 40 + this.random.nextInt(20);
                         this.idleHeadUpdates[var1 - 1] = 0;
@@ -263,11 +263,11 @@
 
                   for(int var18 = 0; var18 < 10 && !var15.isEmpty(); ++var18) {
                      LivingEntity var5 = (LivingEntity)var15.get(this.random.nextInt(var15.size()));
                      if (var5 != this && var5.isAlive() && this.canSee(var5)) {
                         if (var5 instanceof Player) {
-                           if (!((Player)var5).abilities.invulnerable) {
+                           if (!((Player)var5).getAbilities().invulnerable) {
                               this.setAlternativeTarget(var1, var5.getId());
                            }
                         } else {
                            this.setAlternativeTarget(var1, var5.getId());
                         }
@@ -322,11 +322,11 @@
          this.bossEvent.setPercent(this.getHealth() / this.getMaxHealth());
       }
    }
 
    public static boolean canDestroy(BlockState var0) {
-      return !var0.isAir() && !BlockTags.WITHER_IMMUNE.contains(var0.getBlock());
+      return !var0.isAir() && !var0.is(BlockTags.WITHER_IMMUNE);
    }
 
    public void makeInvulnerable() {
       this.setInvulnerableTicks(220);
       this.setHealth(this.getMaxHealth() / 3.0F);
@@ -456,11 +456,11 @@
 
    }
 
    public void checkDespawn() {
       if (this.level.getDifficulty() == Difficulty.PEACEFUL && this.shouldDespawnInPeaceful()) {
-         this.remove();
+         this.discard();
       } else {
          this.noActionTime = 0;
       }
    }
 
