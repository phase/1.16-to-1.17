--- net/minecraft/world/level/pathfinder/Node.java
+++ net/minecraft/world/level/pathfinder/Node.java
@@ -1,10 +1,11 @@
 package net.minecraft.world.level.pathfinder;
 
 import net.minecraft.core.BlockPos;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.util.Mth;
+import net.minecraft.world.phys.Vec3;
 
 public class Node {
    public final int x;
    public final int y;
    public final int z;
@@ -50,17 +51,31 @@
       float var3 = (float)(var1.y - this.y);
       float var4 = (float)(var1.z - this.z);
       return Mth.sqrt(var2 * var2 + var3 * var3 + var4 * var4);
    }
 
+   public float distanceTo(BlockPos var1) {
+      float var2 = (float)(var1.getX() - this.x);
+      float var3 = (float)(var1.getY() - this.y);
+      float var4 = (float)(var1.getZ() - this.z);
+      return Mth.sqrt(var2 * var2 + var3 * var3 + var4 * var4);
+   }
+
    public float distanceToSqr(Node var1) {
       float var2 = (float)(var1.x - this.x);
       float var3 = (float)(var1.y - this.y);
       float var4 = (float)(var1.z - this.z);
       return var2 * var2 + var3 * var3 + var4 * var4;
    }
 
+   public float distanceToSqr(BlockPos var1) {
+      float var2 = (float)(var1.getX() - this.x);
+      float var3 = (float)(var1.getY() - this.y);
+      float var4 = (float)(var1.getZ() - this.z);
+      return var2 * var2 + var3 * var3 + var4 * var4;
+   }
+
    public float distanceManhattan(Node var1) {
       float var2 = (float)Math.abs(var1.x - this.x);
       float var3 = (float)Math.abs(var1.y - this.y);
       float var4 = (float)Math.abs(var1.z - this.z);
       return var2 + var3 + var4;
@@ -75,10 +90,14 @@
 
    public BlockPos asBlockPos() {
       return new BlockPos(this.x, this.y, this.z);
    }
 
+   public Vec3 asVec3() {
+      return new Vec3((double)this.x, (double)this.y, (double)this.z);
+   }
+
    public boolean equals(Object var1) {
       if (!(var1 instanceof Node)) {
          return false;
       } else {
          Node var2 = (Node)var1;
@@ -96,10 +115,21 @@
 
    public String toString() {
       return "Node{x=" + this.x + ", y=" + this.y + ", z=" + this.z + '}';
    }
 
+   public void writeToStream(FriendlyByteBuf var1) {
+      var1.writeInt(this.x);
+      var1.writeInt(this.y);
+      var1.writeInt(this.z);
+      var1.writeFloat(this.walkedDistance);
+      var1.writeFloat(this.costMalus);
+      var1.writeBoolean(this.closed);
+      var1.writeInt(this.type.ordinal());
+      var1.writeFloat(this.f);
+   }
+
    public static Node createFromStream(FriendlyByteBuf var0) {
       Node var1 = new Node(var0.readInt(), var0.readInt(), var0.readInt());
       var1.walkedDistance = var0.readFloat();
       var1.costMalus = var0.readFloat();
       var1.closed = var0.readBoolean();
