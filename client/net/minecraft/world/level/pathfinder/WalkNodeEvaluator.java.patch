--- net/minecraft/world/level/pathfinder/WalkNodeEvaluator.java
+++ net/minecraft/world/level/pathfinder/WalkNodeEvaluator.java
@@ -9,11 +9,10 @@
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.tags.BlockTags;
 import net.minecraft.tags.FluidTags;
-import net.minecraft.tags.Tag;
 import net.minecraft.util.Mth;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.PathNavigationRegion;
 import net.minecraft.world.level.block.BaseRailBlock;
@@ -30,10 +29,11 @@
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.phys.shapes.VoxelShape;
 
 public class WalkNodeEvaluator extends NodeEvaluator {
+   public static final double SPACE_BETWEEN_WALL_POSTS = 0.5D;
    protected float oldWaterCost;
    private final Long2ObjectMap<BlockPathTypes> pathTypesByPosCache = new Long2ObjectOpenHashMap();
    private final Object2BooleanMap<AABB> collisionCache = new Object2BooleanOpenHashMap();
 
    public WalkNodeEvaluator() {
@@ -51,28 +51,28 @@
       super.done();
    }
 
    public Node getStart() {
       BlockPos.MutableBlockPos var2 = new BlockPos.MutableBlockPos();
-      int var1 = Mth.floor(this.mob.getY());
+      int var1 = this.mob.getBlockY();
       BlockState var3 = this.level.getBlockState(var2.set(this.mob.getX(), (double)var1, this.mob.getZ()));
       BlockPos var4;
       if (!this.mob.canStandOnFluid(var3.getFluidState().getType())) {
          if (this.canFloat() && this.mob.isInWater()) {
             while(true) {
-               if (var3.getBlock() != Blocks.WATER && var3.getFluidState() != Fluids.WATER.getSource(false)) {
+               if (!var3.is(Blocks.WATER) && var3.getFluidState() != Fluids.WATER.getSource(false)) {
                   --var1;
                   break;
                }
 
                ++var1;
                var3 = this.level.getBlockState(var2.set(this.mob.getX(), (double)var1, this.mob.getZ()));
             }
          } else if (this.mob.isOnGround()) {
             var1 = Mth.floor(this.mob.getY() + 0.5D);
          } else {
-            for(var4 = this.mob.blockPosition(); (this.level.getBlockState(var4).isAir() || this.level.getBlockState(var4).isPathfindable(this.level, var4, PathComputationType.LAND)) && var4.getY() > 0; var4 = var4.below()) {
+            for(var4 = this.mob.blockPosition(); (this.level.getBlockState(var4).isAir() || this.level.getBlockState(var4).isPathfindable(this.level, var4, PathComputationType.LAND)) && var4.getY() > this.mob.level.getMinBuildHeight(); var4 = var4.below()) {
             }
 
             var1 = var4.above().getY();
          }
       } else {
@@ -251,11 +251,11 @@
             if (var13 == BlockPathTypes.WATER && !this.canFloat()) {
                if (this.getCachedBlockType(this.mob, var1, var2 - 1, var3) != BlockPathTypes.WATER) {
                   return var9;
                }
 
-               while(var2 > 0) {
+               while(var2 > this.mob.level.getMinBuildHeight()) {
                   --var2;
                   var13 = this.getCachedBlockType(this.mob, var1, var2, var3);
                   if (var13 != BlockPathTypes.WATER) {
                      return var9;
                   }
@@ -271,11 +271,11 @@
                int var18 = var2;
 
                while(var13 == BlockPathTypes.OPEN) {
                   --var2;
                   Node var23;
-                  if (var2 < 0) {
+                  if (var2 < this.mob.level.getMinBuildHeight()) {
                      var23 = this.getNode(var1, var18, var3);
                      var23.type = BlockPathTypes.BLOCKED;
                      var23.costMalus = -1.0F;
                      return var23;
                   }
@@ -413,11 +413,11 @@
    public static BlockPathTypes getBlockPathTypeStatic(BlockGetter var0, BlockPos.MutableBlockPos var1) {
       int var2 = var1.getX();
       int var3 = var1.getY();
       int var4 = var1.getZ();
       BlockPathTypes var5 = getBlockPathTypeRaw(var0, var1);
-      if (var5 == BlockPathTypes.OPEN && var3 >= 1) {
+      if (var5 == BlockPathTypes.OPEN && var3 >= var0.getMinBuildHeight() + 1) {
          BlockPathTypes var6 = getBlockPathTypeRaw(var0, var1.set(var2, var3 - 1, var4));
          var5 = var6 != BlockPathTypes.WALKABLE && var6 != BlockPathTypes.OPEN && var6 != BlockPathTypes.WATER && var6 != BlockPathTypes.LAVA ? BlockPathTypes.WALKABLE : BlockPathTypes.OPEN;
          if (var6 == BlockPathTypes.DAMAGE_FIRE) {
             var5 = BlockPathTypes.DAMAGE_FIRE;
          }
@@ -480,11 +480,11 @@
       BlockState var2 = var0.getBlockState(var1);
       Block var3 = var2.getBlock();
       Material var4 = var2.getMaterial();
       if (var2.isAir()) {
          return BlockPathTypes.OPEN;
-      } else if (!var2.is(BlockTags.TRAPDOORS) && !var2.is(Blocks.LILY_PAD)) {
+      } else if (!var2.is(BlockTags.TRAPDOORS) && !var2.is(Blocks.LILY_PAD) && !var2.is(Blocks.POWDER_SNOW)) {
          if (var2.is(Blocks.CACTUS)) {
             return BlockPathTypes.DAMAGE_CACTUS;
          } else if (var2.is(Blocks.SWEET_BERRY_BUSH)) {
             return BlockPathTypes.DAMAGE_OTHER;
          } else if (var2.is(Blocks.HONEY_BLOCK)) {
@@ -507,11 +507,11 @@
                return BlockPathTypes.DOOR_OPEN;
             } else if (var3 instanceof BaseRailBlock) {
                return BlockPathTypes.RAIL;
             } else if (var3 instanceof LeavesBlock) {
                return BlockPathTypes.LEAVES;
-            } else if (!var3.is((Tag)BlockTags.FENCES) && !var3.is((Tag)BlockTags.WALLS) && (!(var3 instanceof FenceGateBlock) || (Boolean)var2.getValue(FenceGateBlock.OPEN))) {
+            } else if (!var2.is(BlockTags.FENCES) && !var2.is(BlockTags.WALLS) && (!(var3 instanceof FenceGateBlock) || (Boolean)var2.getValue(FenceGateBlock.OPEN))) {
                return !var2.isPathfindable(var0, var1, PathComputationType.LAND) ? BlockPathTypes.BLOCKED : BlockPathTypes.OPEN;
             } else {
                return BlockPathTypes.FENCE;
             }
          }
