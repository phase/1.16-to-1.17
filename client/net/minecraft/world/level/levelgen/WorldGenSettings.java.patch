--- net/minecraft/world/level/levelgen/WorldGenSettings.java
+++ net/minecraft/world/level/levelgen/WorldGenSettings.java
@@ -20,11 +20,10 @@
 import java.util.function.Function;
 import java.util.function.Supplier;
 import net.minecraft.core.MappedRegistry;
 import net.minecraft.core.Registry;
 import net.minecraft.core.RegistryAccess;
-import net.minecraft.core.WritableRegistry;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.util.GsonHelper;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.biome.Biome;
 import net.minecraft.world.level.biome.OverworldBiomeSource;
@@ -76,14 +75,14 @@
       this.dimensions = var5;
       this.legacyCustomOptions = var6;
    }
 
    public static WorldGenSettings demoSettings(RegistryAccess var0) {
-      WritableRegistry var1 = var0.registryOrThrow(Registry.BIOME_REGISTRY);
+      Registry var1 = var0.registryOrThrow(Registry.BIOME_REGISTRY);
       int var2 = "North Carolina".hashCode();
-      WritableRegistry var3 = var0.registryOrThrow(Registry.DIMENSION_TYPE_REGISTRY);
-      WritableRegistry var4 = var0.registryOrThrow(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY);
+      Registry var3 = var0.registryOrThrow(Registry.DIMENSION_TYPE_REGISTRY);
+      Registry var4 = var0.registryOrThrow(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY);
       return new WorldGenSettings((long)var2, true, true, withOverworld((Registry)var3, (MappedRegistry)DimensionType.defaultDimensions(var3, var1, var4, (long)var2), makeDefaultOverworld(var1, var4, (long)var2)));
    }
 
    public static WorldGenSettings makeDefault(Registry<DimensionType> var0, Registry<Biome> var1, Registry<NoiseGeneratorSettings> var2) {
       long var3 = (new Random()).nextLong();
@@ -123,11 +122,11 @@
 
       while(var4.hasNext()) {
          Entry var5 = (Entry)var4.next();
          ResourceKey var6 = (ResourceKey)var5.getKey();
          if (var6 != LevelStem.OVERWORLD) {
-            var3.register(var6, var5.getValue(), var0.lifecycle(var5.getValue()));
+            var3.register(var6, (LevelStem)var5.getValue(), var0.lifecycle((LevelStem)var5.getValue()));
          }
       }
 
       return var3;
    }
@@ -198,13 +197,13 @@
          } catch (NumberFormatException var18) {
             var8 = (long)var3.hashCode();
          }
       }
 
-      WritableRegistry var19 = var0.registryOrThrow(Registry.DIMENSION_TYPE_REGISTRY);
-      WritableRegistry var11 = var0.registryOrThrow(Registry.BIOME_REGISTRY);
-      WritableRegistry var12 = var0.registryOrThrow(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY);
+      Registry var19 = var0.registryOrThrow(Registry.DIMENSION_TYPE_REGISTRY);
+      Registry var11 = var0.registryOrThrow(Registry.BIOME_REGISTRY);
+      Registry var12 = var0.registryOrThrow(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY);
       MappedRegistry var13 = DimensionType.defaultDimensions(var19, var11, var12, var8);
       byte var15 = -1;
       switch(var7.hashCode()) {
       case -1100099890:
          if (var7.equals("largebiomes")) {
@@ -231,11 +230,11 @@
       case 0:
          JsonObject var16 = !var2.isEmpty() ? GsonHelper.parse(var2) : new JsonObject();
          Dynamic var17 = new Dynamic(JsonOps.INSTANCE, var16);
          DataResult var10009 = FlatLevelGeneratorSettings.CODEC.parse(var17);
          Logger var10010 = LOGGER;
-         var10010.getClass();
+         Objects.requireNonNull(var10010);
          return new WorldGenSettings(var8, var5, false, withOverworld((Registry)var19, (MappedRegistry)var13, new FlatLevelSource((FlatLevelGeneratorSettings)var10009.resultOrPartial(var10010::error).orElseGet(() -> {
             return FlatLevelGeneratorSettings.getDefault(var11);
          }))));
       case 1:
          return new WorldGenSettings(var8, var5, false, withOverworld((Registry)var19, (MappedRegistry)var13, new DebugLevelSource(var11)));
@@ -261,11 +260,11 @@
          Iterator var9 = this.dimensions.entrySet().iterator();
 
          while(var9.hasNext()) {
             Entry var10 = (Entry)var9.next();
             ResourceKey var11 = (ResourceKey)var10.getKey();
-            var6.register(var11, new LevelStem(((LevelStem)var10.getValue()).typeSupplier(), ((LevelStem)var10.getValue()).generator().withSeed(var7)), this.dimensions.lifecycle(var10.getValue()));
+            var6.register(var11, new LevelStem(((LevelStem)var10.getValue()).typeSupplier(), ((LevelStem)var10.getValue()).generator().withSeed(var7)), this.dimensions.lifecycle((LevelStem)var10.getValue()));
          }
       } else {
          var6 = this.dimensions;
       }
 
