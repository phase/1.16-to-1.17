--- net/minecraft/world/level/levelgen/heightproviders/BiasedToBottomHeight.java
+++ net/minecraft/world/level/levelgen/heightproviders/BiasedToBottomHeight.java
@@ -1,0 +1,73 @@
+package net.minecraft.world.level.levelgen.heightproviders;
+
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.DataResult;
+import com.mojang.serialization.codecs.RecordCodecBuilder;
+import java.util.Objects;
+import java.util.Random;
+import java.util.function.Function;
+import net.minecraft.world.level.levelgen.VerticalAnchor;
+import net.minecraft.world.level.levelgen.WorldGenerationContext;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+public class BiasedToBottomHeight extends HeightProvider {
+   public static final Codec<BiasedToBottomHeight> CODEC = RecordCodecBuilder.create((var0) -> {
+      return var0.group(VerticalAnchor.CODEC.fieldOf("min_inclusive").forGetter((var0x) -> {
+         return var0x.minInclusive;
+      }), VerticalAnchor.CODEC.fieldOf("max_inclusive").forGetter((var0x) -> {
+         return var0x.maxInclusive;
+      }), Codec.intRange(1, Integer.MAX_VALUE).optionalFieldOf("inner", 1).forGetter((var0x) -> {
+         return var0x.inner;
+      })).apply(var0, BiasedToBottomHeight::new);
+   }).comapFlatMap(DataResult::success, Function.identity());
+   private static final Logger LOGGER = LogManager.getLogger();
+   private final VerticalAnchor minInclusive;
+   private final VerticalAnchor maxInclusive;
+   private final int inner;
+
+   private BiasedToBottomHeight(VerticalAnchor var1, VerticalAnchor var2, int var3) {
+      this.minInclusive = var1;
+      this.maxInclusive = var2;
+      this.inner = var3;
+   }
+
+   public static BiasedToBottomHeight of(VerticalAnchor var0, VerticalAnchor var1, int var2) {
+      return new BiasedToBottomHeight(var0, var1, var2);
+   }
+
+   public int sample(Random var1, WorldGenerationContext var2) {
+      int var3 = this.minInclusive.resolveY(var2);
+      int var4 = this.maxInclusive.resolveY(var2);
+      if (var4 - var3 - this.inner + 1 <= 0) {
+         LOGGER.warn("Empty height range: {}", this);
+         return var3;
+      } else {
+         int var5 = var1.nextInt(var4 - var3 - this.inner + 1);
+         return var1.nextInt(var5 + this.inner) + var3;
+      }
+   }
+
+   public HeightProviderType<?> getType() {
+      return HeightProviderType.BIASED_TO_BOTTOM;
+   }
+
+   public boolean equals(Object var1) {
+      if (this == var1) {
+         return true;
+      } else if (var1 != null && this.getClass() == var1.getClass()) {
+         BiasedToBottomHeight var2 = (BiasedToBottomHeight)var1;
+         return this.minInclusive.equals(var2.minInclusive) && this.maxInclusive.equals(this.maxInclusive) && this.inner == var2.inner;
+      } else {
+         return false;
+      }
+   }
+
+   public int hashCode() {
+      return Objects.hash(new Object[]{this.minInclusive, this.maxInclusive});
+   }
+
+   public String toString() {
+      return "biased[" + this.minInclusive + '-' + this.maxInclusive + " inner: " + this.inner + "]";
+   }
+}
