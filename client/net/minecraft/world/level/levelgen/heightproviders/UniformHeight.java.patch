--- net/minecraft/world/level/levelgen/heightproviders/UniformHeight.java
+++ net/minecraft/world/level/levelgen/heightproviders/UniformHeight.java
@@ -1,0 +1,69 @@
+package net.minecraft.world.level.levelgen.heightproviders;
+
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.DataResult;
+import com.mojang.serialization.codecs.RecordCodecBuilder;
+import java.util.Objects;
+import java.util.Random;
+import java.util.function.Function;
+import net.minecraft.util.Mth;
+import net.minecraft.world.level.levelgen.VerticalAnchor;
+import net.minecraft.world.level.levelgen.WorldGenerationContext;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+public class UniformHeight extends HeightProvider {
+   public static final Codec<UniformHeight> CODEC = RecordCodecBuilder.create((var0) -> {
+      return var0.group(VerticalAnchor.CODEC.fieldOf("min_inclusive").forGetter((var0x) -> {
+         return var0x.minInclusive;
+      }), VerticalAnchor.CODEC.fieldOf("max_inclusive").forGetter((var0x) -> {
+         return var0x.maxInclusive;
+      })).apply(var0, UniformHeight::new);
+   }).comapFlatMap(DataResult::success, Function.identity());
+   private static final Logger LOGGER = LogManager.getLogger();
+   private final VerticalAnchor minInclusive;
+   private final VerticalAnchor maxInclusive;
+
+   private UniformHeight(VerticalAnchor var1, VerticalAnchor var2) {
+      this.minInclusive = var1;
+      this.maxInclusive = var2;
+   }
+
+   public static UniformHeight of(VerticalAnchor var0, VerticalAnchor var1) {
+      return new UniformHeight(var0, var1);
+   }
+
+   public int sample(Random var1, WorldGenerationContext var2) {
+      int var3 = this.minInclusive.resolveY(var2);
+      int var4 = this.maxInclusive.resolveY(var2);
+      if (var3 > var4) {
+         LOGGER.warn("Empty height range: {}", this);
+         return var3;
+      } else {
+         return Mth.randomBetweenInclusive(var1, var3, var4);
+      }
+   }
+
+   public HeightProviderType<?> getType() {
+      return HeightProviderType.UNIFORM;
+   }
+
+   public boolean equals(Object var1) {
+      if (this == var1) {
+         return true;
+      } else if (var1 != null && this.getClass() == var1.getClass()) {
+         UniformHeight var2 = (UniformHeight)var1;
+         return this.minInclusive.equals(var2.minInclusive) && this.maxInclusive.equals(var2.maxInclusive);
+      } else {
+         return false;
+      }
+   }
+
+   public int hashCode() {
+      return Objects.hash(new Object[]{this.minInclusive, this.maxInclusive});
+   }
+
+   public String toString() {
+      return "[" + this.minInclusive + '-' + this.maxInclusive + ']';
+   }
+}
