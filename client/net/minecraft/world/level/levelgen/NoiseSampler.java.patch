--- net/minecraft/world/level/levelgen/NoiseSampler.java
+++ net/minecraft/world/level/levelgen/NoiseSampler.java
@@ -1,0 +1,170 @@
+package net.minecraft.world.level.levelgen;
+
+import javax.annotation.Nullable;
+import net.minecraft.Util;
+import net.minecraft.util.Mth;
+import net.minecraft.world.level.biome.Biome;
+import net.minecraft.world.level.biome.BiomeSource;
+import net.minecraft.world.level.biome.TheEndBiomeSource;
+import net.minecraft.world.level.levelgen.synth.BlendedNoise;
+import net.minecraft.world.level.levelgen.synth.PerlinNoise;
+import net.minecraft.world.level.levelgen.synth.SimplexNoise;
+
+public class NoiseSampler {
+   private static final float[] BIOME_WEIGHTS = (float[])Util.make(new float[25], (var0) -> {
+      for(int var1 = -2; var1 <= 2; ++var1) {
+         for(int var2 = -2; var2 <= 2; ++var2) {
+            float var3 = 10.0F / Mth.sqrt((float)(var1 * var1 + var2 * var2) + 0.2F);
+            var0[var1 + 2 + (var2 + 2) * 5] = var3;
+         }
+      }
+
+   });
+   private final BiomeSource biomeSource;
+   private final int cellWidth;
+   private final int cellHeight;
+   private final int cellCountY;
+   private final NoiseSettings noiseSettings;
+   private final BlendedNoise blendedNoise;
+   @Nullable
+   private final SimplexNoise islandNoise;
+   private final PerlinNoise depthNoise;
+   private final double topSlideTarget;
+   private final double topSlideSize;
+   private final double topSlideOffset;
+   private final double bottomSlideTarget;
+   private final double bottomSlideSize;
+   private final double bottomSlideOffset;
+   private final double dimensionDensityFactor;
+   private final double dimensionDensityOffset;
+   @Nullable
+   private final Cavifier cavifier;
+
+   public NoiseSampler(BiomeSource var1, int var2, int var3, int var4, NoiseSettings var5, BlendedNoise var6, @Nullable SimplexNoise var7, PerlinNoise var8, @Nullable Cavifier var9) {
+      this.cellWidth = var2;
+      this.cellHeight = var3;
+      this.biomeSource = var1;
+      this.cellCountY = var4;
+      this.noiseSettings = var5;
+      this.blendedNoise = var6;
+      this.islandNoise = var7;
+      this.depthNoise = var8;
+      this.topSlideTarget = (double)var5.topSlideSettings().target();
+      this.topSlideSize = (double)var5.topSlideSettings().size();
+      this.topSlideOffset = (double)var5.topSlideSettings().offset();
+      this.bottomSlideTarget = (double)var5.bottomSlideSettings().target();
+      this.bottomSlideSize = (double)var5.bottomSlideSettings().size();
+      this.bottomSlideOffset = (double)var5.bottomSlideSettings().offset();
+      this.dimensionDensityFactor = var5.densityFactor();
+      this.dimensionDensityOffset = var5.densityOffset();
+      this.cavifier = var9;
+   }
+
+   public void fillNoiseColumn(double[] var1, int var2, int var3, NoiseSettings var4, int var5, int var6, int var7) {
+      double var8;
+      double var10;
+      double var34;
+      if (this.islandNoise != null) {
+         var8 = (double)(TheEndBiomeSource.getHeightValue(this.islandNoise, var2, var3) - 8.0F);
+         if (var8 > 0.0D) {
+            var10 = 0.25D;
+         } else {
+            var10 = 1.0D;
+         }
+      } else {
+         float var12 = 0.0F;
+         float var13 = 0.0F;
+         float var14 = 0.0F;
+         boolean var15 = true;
+         int var16 = var5;
+         float var17 = this.biomeSource.getNoiseBiome(var2, var5, var3).getDepth();
+
+         for(int var18 = -2; var18 <= 2; ++var18) {
+            for(int var19 = -2; var19 <= 2; ++var19) {
+               Biome var20 = this.biomeSource.getNoiseBiome(var2 + var18, var16, var3 + var19);
+               float var21 = var20.getDepth();
+               float var22 = var20.getScale();
+               float var23;
+               float var24;
+               if (var4.isAmplified() && var21 > 0.0F) {
+                  var23 = 1.0F + var21 * 2.0F;
+                  var24 = 1.0F + var22 * 4.0F;
+               } else {
+                  var23 = var21;
+                  var24 = var22;
+               }
+
+               float var25 = var21 > var17 ? 0.5F : 1.0F;
+               float var26 = var25 * BIOME_WEIGHTS[var18 + 2 + (var19 + 2) * 5] / (var23 + 2.0F);
+               var12 += var24 * var26;
+               var13 += var23 * var26;
+               var14 += var26;
+            }
+         }
+
+         float var31 = var13 / var14;
+         float var33 = var12 / var14;
+         var34 = (double)(var31 * 0.5F - 0.125F);
+         double var35 = (double)(var33 * 0.9F + 0.1F);
+         var8 = var34 * 0.265625D;
+         var10 = 96.0D / var35;
+      }
+
+      double var28 = 684.412D * var4.noiseSamplingSettings().xzScale();
+      double var29 = 684.412D * var4.noiseSamplingSettings().yScale();
+      double var30 = var28 / var4.noiseSamplingSettings().xzFactor();
+      double var32 = var29 / var4.noiseSamplingSettings().yFactor();
+      var34 = var4.randomDensityOffset() ? this.getRandomDensity(var2, var3) : 0.0D;
+
+      for(int var36 = 0; var36 <= var7; ++var36) {
+         int var37 = var36 + var6;
+         double var38 = this.blendedNoise.sampleAndClampNoise(var2, var37, var3, var28, var29, var30, var32);
+         double var39 = this.computeInitialDensity(var37, var8, var10, var34) + var38;
+         var39 = this.cavify(var2 * this.cellWidth, var37 * this.cellHeight, var3 * this.cellWidth, var38, var39);
+         var39 = this.applySlide(var39, var37);
+         var1[var36] = var39;
+      }
+
+   }
+
+   private double cavify(int var1, int var2, int var3, double var4, double var6) {
+      return this.cavifier != null ? this.cavifier.cavify(var1, var2, var3, var4, var6) : var6;
+   }
+
+   private double computeInitialDensity(int var1, double var2, double var4, double var6) {
+      double var8 = 1.0D - (double)var1 * 2.0D / 32.0D + var6;
+      double var10 = var8 * this.dimensionDensityFactor + this.dimensionDensityOffset;
+      double var12 = (var10 + var2) * var4;
+      return var12 * (double)(var12 > 0.0D ? 4 : 1);
+   }
+
+   private double applySlide(double var1, int var3) {
+      int var4 = Mth.intFloorDiv(this.noiseSettings.minY(), this.cellHeight);
+      int var5 = var3 - var4;
+      double var6;
+      if (this.topSlideSize > 0.0D) {
+         var6 = ((double)(this.cellCountY - var5) - this.topSlideOffset) / this.topSlideSize;
+         var1 = Mth.clampedLerp(this.topSlideTarget, var1, var6);
+      }
+
+      if (this.bottomSlideSize > 0.0D) {
+         var6 = ((double)var5 - this.bottomSlideOffset) / this.bottomSlideSize;
+         var1 = Mth.clampedLerp(this.bottomSlideTarget, var1, var6);
+      }
+
+      return var1;
+   }
+
+   private double getRandomDensity(int var1, int var2) {
+      double var3 = this.depthNoise.getValue((double)(var1 * 200), 10.0D, (double)(var2 * 200), 1.0D, 0.0D, true);
+      double var5;
+      if (var3 < 0.0D) {
+         var5 = -var3 * 0.3D;
+      } else {
+         var5 = var3;
+      }
+
+      double var7 = var5 * 24.575625D - 2.0D;
+      return var7 < 0.0D ? var7 * 0.009486607142857142D : Math.min(var7, 1.0D) * 0.006640625D;
+   }
+}
