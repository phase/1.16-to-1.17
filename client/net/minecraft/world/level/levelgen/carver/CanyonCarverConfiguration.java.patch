--- net/minecraft/world/level/levelgen/carver/CanyonCarverConfiguration.java
+++ net/minecraft/world/level/levelgen/carver/CanyonCarverConfiguration.java
@@ -1,0 +1,79 @@
+package net.minecraft.world.level.levelgen.carver;
+
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.codecs.RecordCodecBuilder;
+import net.minecraft.util.FloatProvider;
+import net.minecraft.util.UniformInt;
+import net.minecraft.world.level.levelgen.VerticalAnchor;
+
+public class CanyonCarverConfiguration extends CarverConfiguration {
+   public static final Codec<CanyonCarverConfiguration> CODEC = RecordCodecBuilder.create((var0) -> {
+      return var0.group(Codec.floatRange(0.0F, 1.0F).fieldOf("probability").forGetter((var0x) -> {
+         return var0x.probability;
+      }), CarverDebugSettings.CODEC.optionalFieldOf("debug_settings", CarverDebugSettings.DEFAULT).forGetter(CarverConfiguration::getDebugSettings), VerticalAnchor.CODEC.fieldOf("bottom_inclusive").forGetter(CanyonCarverConfiguration::getBottomInclusive), VerticalAnchor.CODEC.fieldOf("top_inclusive").forGetter(CanyonCarverConfiguration::getTopInclusive), UniformInt.CODEC.fieldOf("y_scale").forGetter(CanyonCarverConfiguration::getYScale), FloatProvider.codec(0.0F, 1.0F).fieldOf("distanceFactor").forGetter(CanyonCarverConfiguration::getDistanceFactor), FloatProvider.CODEC.fieldOf("vertical_rotation").forGetter(CanyonCarverConfiguration::getVerticalRotation), FloatProvider.CODEC.fieldOf("thickness").forGetter(CanyonCarverConfiguration::getThickness), Codec.intRange(0, Integer.MAX_VALUE).fieldOf("width_smoothness").forGetter(CanyonCarverConfiguration::getWidthSmoothness), FloatProvider.CODEC.fieldOf("horizontal_radius_factor").forGetter(CanyonCarverConfiguration::getHorizontalRadiusFactor), Codec.FLOAT.fieldOf("vertical_radius_default_factor").forGetter(CanyonCarverConfiguration::getVerticalRadiusDefaultFactor), Codec.FLOAT.fieldOf("vertical_radius_center_factor").forGetter(CanyonCarverConfiguration::getVerticalRadiusCenterFactor)).apply(var0, CanyonCarverConfiguration::new);
+   });
+   private final VerticalAnchor bottomInclusive;
+   private final VerticalAnchor topInclusive;
+   private final UniformInt yScale;
+   private final FloatProvider distanceFactor;
+   private final FloatProvider verticalRotation;
+   private final FloatProvider thickness;
+   private final int widthSmoothness;
+   private final FloatProvider horizontalRadiusFactor;
+   private final float verticalRadiusDefaultFactor;
+   private final float verticalRadiusCenterFactor;
+
+   public CanyonCarverConfiguration(float var1, CarverDebugSettings var2, VerticalAnchor var3, VerticalAnchor var4, UniformInt var5, FloatProvider var6, FloatProvider var7, FloatProvider var8, int var9, FloatProvider var10, float var11, float var12) {
+      super(var1, var2);
+      this.bottomInclusive = var3;
+      this.topInclusive = var4;
+      this.yScale = var5;
+      this.distanceFactor = var6;
+      this.verticalRotation = var7;
+      this.thickness = var8;
+      this.widthSmoothness = var9;
+      this.horizontalRadiusFactor = var10;
+      this.verticalRadiusDefaultFactor = var11;
+      this.verticalRadiusCenterFactor = var12;
+   }
+
+   public VerticalAnchor getBottomInclusive() {
+      return this.bottomInclusive;
+   }
+
+   public VerticalAnchor getTopInclusive() {
+      return this.topInclusive;
+   }
+
+   public UniformInt getYScale() {
+      return this.yScale;
+   }
+
+   public FloatProvider getDistanceFactor() {
+      return this.distanceFactor;
+   }
+
+   public FloatProvider getVerticalRotation() {
+      return this.verticalRotation;
+   }
+
+   public FloatProvider getThickness() {
+      return this.thickness;
+   }
+
+   public int getWidthSmoothness() {
+      return this.widthSmoothness;
+   }
+
+   public FloatProvider getHorizontalRadiusFactor() {
+      return this.horizontalRadiusFactor;
+   }
+
+   public float getVerticalRadiusDefaultFactor() {
+      return this.verticalRadiusDefaultFactor;
+   }
+
+   public float getVerticalRadiusCenterFactor() {
+      return this.verticalRadiusCenterFactor;
+   }
+}
