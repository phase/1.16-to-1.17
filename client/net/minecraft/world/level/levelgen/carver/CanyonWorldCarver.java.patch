--- net/minecraft/world/level/levelgen/carver/CanyonWorldCarver.java
+++ net/minecraft/world/level/levelgen/carver/CanyonWorldCarver.java
@@ -4,82 +4,111 @@
 import java.util.BitSet;
 import java.util.Random;
 import java.util.function.Function;
 import net.minecraft.core.BlockPos;
 import net.minecraft.util.Mth;
+import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.biome.Biome;
 import net.minecraft.world.level.chunk.ChunkAccess;
-import net.minecraft.world.level.levelgen.feature.configurations.ProbabilityFeatureConfiguration;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
 
-public class CanyonWorldCarver extends WorldCarver<ProbabilityFeatureConfiguration> {
-   private final float[] rs = new float[1024];
+public class CanyonWorldCarver extends WorldCarver<CanyonCarverConfiguration> {
+   private static final Logger LOGGER = LogManager.getLogger();
 
-   public CanyonWorldCarver(Codec<ProbabilityFeatureConfiguration> var1) {
-      super(var1, 256);
+   public CanyonWorldCarver(Codec<CanyonCarverConfiguration> var1) {
+      super(var1);
    }
 
-   public boolean isStartChunk(Random var1, int var2, int var3, ProbabilityFeatureConfiguration var4) {
-      return var1.nextFloat() <= var4.probability;
+   public boolean isStartChunk(CanyonCarverConfiguration var1, Random var2) {
+      return var2.nextFloat() <= var1.probability;
    }
 
-   public boolean carve(ChunkAccess var1, Function<BlockPos, Biome> var2, Random var3, int var4, int var5, int var6, int var7, int var8, BitSet var9, ProbabilityFeatureConfiguration var10) {
-      int var11 = (this.getRange() * 2 - 1) * 16;
-      double var12 = (double)(var5 * 16 + var3.nextInt(16));
-      double var14 = (double)(var3.nextInt(var3.nextInt(40) + 8) + 20);
-      double var16 = (double)(var6 * 16 + var3.nextInt(16));
-      float var18 = var3.nextFloat() * 6.2831855F;
-      float var19 = (var3.nextFloat() - 0.5F) * 2.0F / 8.0F;
-      double var20 = 3.0D;
-      float var22 = (var3.nextFloat() * 2.0F + var3.nextFloat()) * 2.0F;
-      int var23 = var11 - var3.nextInt(var11 / 4);
-      boolean var24 = false;
-      this.genCanyon(var1, var2, var3.nextLong(), var4, var7, var8, var12, var14, var16, var22, var18, var19, 0, var23, 3.0D, var9);
+   public boolean carve(CarvingContext var1, CanyonCarverConfiguration var2, ChunkAccess var3, Function<BlockPos, Biome> var4, Random var5, int var6, ChunkPos var7, BitSet var8) {
+      int var9 = (this.getRange() * 2 - 1) * 16;
+      double var10 = (double)var7.getBlockX(var5.nextInt(16));
+      int var12 = this.getY(var1, var2, var5);
+      double var13 = (double)var7.getBlockZ(var5.nextInt(16));
+      float var15 = var5.nextFloat() * 6.2831855F;
+      float var16 = var2.getVerticalRotation().sample(var5);
+      double var17 = (double)var2.getYScale().sample(var5);
+      float var19 = var2.getThickness().sample(var5);
+      int var20 = (int)((float)var9 * var2.getDistanceFactor().sample(var5));
+      boolean var21 = false;
+      this.doCarve(var1, var2, var3, var4, var5.nextLong(), var6, var10, (double)var12, var13, var19, var15, var16, 0, var20, var17, var8);
       return true;
    }
 
-   private void genCanyon(ChunkAccess var1, Function<BlockPos, Biome> var2, long var3, int var5, int var6, int var7, double var8, double var10, double var12, float var14, float var15, float var16, int var17, int var18, double var19, BitSet var21) {
-      Random var22 = new Random(var3);
-      float var23 = 1.0F;
-
-      for(int var24 = 0; var24 < 256; ++var24) {
-         if (var24 == 0 || var22.nextInt(3) == 0) {
-            var23 = 1.0F + var22.nextFloat() * var22.nextFloat();
-         }
-
-         this.rs[var24] = var23 * var23;
-      }
-
-      float var33 = 0.0F;
+   private void doCarve(CarvingContext var1, CanyonCarverConfiguration var2, ChunkAccess var3, Function<BlockPos, Biome> var4, long var5, int var7, double var8, double var10, double var12, float var14, float var15, float var16, int var17, int var18, double var19, BitSet var21) {
+      Random var22 = new Random(var5);
+      float[] var23 = this.initWidthFactors(var1, var2, var22);
+      float var24 = 0.0F;
       float var25 = 0.0F;
 
       for(int var26 = var17; var26 < var18; ++var26) {
          double var27 = 1.5D + (double)(Mth.sin((float)var26 * 3.1415927F / (float)var18) * var14);
          double var29 = var27 * var19;
-         var27 *= (double)var22.nextFloat() * 0.25D + 0.75D;
-         var29 *= (double)var22.nextFloat() * 0.25D + 0.75D;
+         var27 *= (double)var2.getHorizontalRadiusFactor().sample(var22);
+         var29 = this.updateVerticalRadius(var2, var22, var29, (float)var18, (float)var26);
          float var31 = Mth.cos(var16);
          float var32 = Mth.sin(var16);
          var8 += (double)(Mth.cos(var15) * var31);
          var10 += (double)var32;
          var12 += (double)(Mth.sin(var15) * var31);
          var16 *= 0.7F;
          var16 += var25 * 0.05F;
-         var15 += var33 * 0.05F;
+         var15 += var24 * 0.05F;
          var25 *= 0.8F;
-         var33 *= 0.5F;
+         var24 *= 0.5F;
          var25 += (var22.nextFloat() - var22.nextFloat()) * var22.nextFloat() * 2.0F;
-         var33 += (var22.nextFloat() - var22.nextFloat()) * var22.nextFloat() * 4.0F;
+         var24 += (var22.nextFloat() - var22.nextFloat()) * var22.nextFloat() * 4.0F;
          if (var22.nextInt(4) != 0) {
-            if (!this.canReach(var6, var7, var8, var12, var26, var18, var14)) {
+            if (!canReach(var3.getPos(), var8, var12, var26, var18, var14)) {
                return;
             }
 
-            this.carveSphere(var1, var2, var3, var5, var6, var7, var8, var10, var12, var27, var29, var21);
+            this.carveEllipsoid(var1, var2, var3, var4, var5, var7, var8, var10, var12, var27, var29, var21, (var2x, var3x, var5x, var7x, var9) -> {
+               return this.shouldSkip(var2x, var23, var3x, var5x, var7x, var9);
+            });
          }
       }
 
    }
 
-   protected boolean skip(double var1, double var3, double var5, int var7) {
-      return (var1 * var1 + var5 * var5) * (double)this.rs[var7 - 1] + var3 * var3 / 6.0D >= 1.0D;
+   private int getY(CarvingContext var1, CanyonCarverConfiguration var2, Random var3) {
+      int var4 = var2.getBottomInclusive().resolveY(var1);
+      int var5 = var2.getTopInclusive().resolveY(var1);
+      if (var4 >= var5) {
+         LOGGER.warn("Empty carver: {} [{}-{}]", this, var4, var5);
+         return var4;
+      } else {
+         return Mth.randomBetweenInclusive(var3, var4, var5);
+      }
    }
+
+   private float[] initWidthFactors(CarvingContext var1, CanyonCarverConfiguration var2, Random var3) {
+      int var4 = var1.getGenDepth();
+      float[] var5 = new float[var4];
+      float var6 = 1.0F;
+
+      for(int var7 = 0; var7 < var4; ++var7) {
+         if (var7 == 0 || var3.nextInt(var2.getWidthSmoothness()) == 0) {
+            var6 = 1.0F + var3.nextFloat() * var3.nextFloat();
+         }
+
+         var5[var7] = var6 * var6;
+      }
+
+      return var5;
+   }
+
+   private double updateVerticalRadius(CanyonCarverConfiguration var1, Random var2, double var3, float var5, float var6) {
+      float var7 = 1.0F - Mth.abs(0.5F - var6 / var5) * 2.0F;
+      float var8 = var1.getVerticalRadiusDefaultFactor() + var1.getVerticalRadiusCenterFactor() * var7;
+      return (double)var8 * var3 * (double)Mth.randomBetween(var2, 0.75F, 1.0F);
+   }
+
+   private boolean shouldSkip(CarvingContext var1, float[] var2, double var3, double var5, double var7, int var9) {
+      int var10 = var9 - var1.getMinGenY();
+      return (var3 * var3 + var7 * var7) * (double)var2[var10 - 1] + var5 * var5 / 6.0D >= 1.0D;
+   }
 }
