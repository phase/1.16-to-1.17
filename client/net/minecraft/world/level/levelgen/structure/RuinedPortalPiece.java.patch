--- net/minecraft/world/level/levelgen/structure/RuinedPortalPiece.java
+++ net/minecraft/world/level/levelgen/structure/RuinedPortalPiece.java
@@ -6,18 +6,20 @@
 import com.mojang.serialization.Dynamic;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Random;
 import java.util.stream.Collectors;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
-import net.minecraft.core.Vec3i;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtOps;
 import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.tags.BlockTags;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.ServerLevelAccessor;
 import net.minecraft.world.level.StructureFeatureManager;
 import net.minecraft.world.level.WorldGenLevel;
@@ -37,95 +39,100 @@
 import net.minecraft.world.level.levelgen.structure.templatesystem.BlockAgeProcessor;
 import net.minecraft.world.level.levelgen.structure.templatesystem.BlockIgnoreProcessor;
 import net.minecraft.world.level.levelgen.structure.templatesystem.BlockMatchTest;
 import net.minecraft.world.level.levelgen.structure.templatesystem.LavaSubmergedBlockProcessor;
 import net.minecraft.world.level.levelgen.structure.templatesystem.ProcessorRule;
+import net.minecraft.world.level.levelgen.structure.templatesystem.ProtectedBlockProcessor;
 import net.minecraft.world.level.levelgen.structure.templatesystem.RandomBlockMatchTest;
 import net.minecraft.world.level.levelgen.structure.templatesystem.RuleProcessor;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructurePlaceSettings;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class RuinedPortalPiece extends TemplateStructurePiece {
    private static final Logger LOGGER = LogManager.getLogger();
-   private final ResourceLocation templateLocation;
-   private final Rotation rotation;
-   private final Mirror mirror;
+   private static final float PROBABILITY_OF_GOLD_GONE = 0.3F;
+   private static final float PROBABILITY_OF_MAGMA_INSTEAD_OF_NETHERRACK = 0.07F;
+   private static final float PROBABILITY_OF_MAGMA_INSTEAD_OF_LAVA = 0.2F;
+   private static final float DEFAULT_MOSSINESS = 0.2F;
    private final RuinedPortalPiece.VerticalPlacement verticalPlacement;
    private final RuinedPortalPiece.Properties properties;
 
-   public RuinedPortalPiece(BlockPos var1, RuinedPortalPiece.VerticalPlacement var2, RuinedPortalPiece.Properties var3, ResourceLocation var4, StructureTemplate var5, Rotation var6, Mirror var7, BlockPos var8) {
-      super(StructurePieceType.RUINED_PORTAL, 0);
-      this.templatePosition = var1;
-      this.templateLocation = var4;
-      this.rotation = var6;
-      this.mirror = var7;
-      this.verticalPlacement = var2;
-      this.properties = var3;
-      this.loadTemplate(var5, var8);
+   public RuinedPortalPiece(StructureManager var1, BlockPos var2, RuinedPortalPiece.VerticalPlacement var3, RuinedPortalPiece.Properties var4, ResourceLocation var5, StructureTemplate var6, Rotation var7, Mirror var8, BlockPos var9) {
+      super(StructurePieceType.RUINED_PORTAL, 0, var1, var5, var5.toString(), makeSettings(var8, var7, var3, var9, var4), var2);
+      this.verticalPlacement = var3;
+      this.properties = var4;
    }
 
-   public RuinedPortalPiece(StructureManager var1, CompoundTag var2) {
-      super(StructurePieceType.RUINED_PORTAL, var2);
-      this.templateLocation = new ResourceLocation(var2.getString("Template"));
-      this.rotation = Rotation.valueOf(var2.getString("Rotation"));
-      this.mirror = Mirror.valueOf(var2.getString("Mirror"));
+   public RuinedPortalPiece(ServerLevel var1, CompoundTag var2) {
+      super(StructurePieceType.RUINED_PORTAL, var2, var1, (var2x) -> {
+         return makeSettings(var1, var2, var2x);
+      });
       this.verticalPlacement = RuinedPortalPiece.VerticalPlacement.byName(var2.getString("VerticalPlacement"));
       DataResult var10001 = RuinedPortalPiece.Properties.CODEC.parse(new Dynamic(NbtOps.INSTANCE, var2.get("Properties")));
       Logger var10003 = LOGGER;
-      var10003.getClass();
+      Objects.requireNonNull(var10003);
       this.properties = (RuinedPortalPiece.Properties)var10001.getOrThrow(true, var10003::error);
-      StructureTemplate var3 = var1.getOrCreate(this.templateLocation);
-      this.loadTemplate(var3, new BlockPos(var3.getSize().getX() / 2, 0, var3.getSize().getZ() / 2));
    }
 
-   protected void addAdditionalSaveData(CompoundTag var1) {
-      super.addAdditionalSaveData(var1);
-      var1.putString("Template", this.templateLocation.toString());
-      var1.putString("Rotation", this.rotation.name());
-      var1.putString("Mirror", this.mirror.name());
-      var1.putString("VerticalPlacement", this.verticalPlacement.getName());
+   protected void addAdditionalSaveData(ServerLevel var1, CompoundTag var2) {
+      super.addAdditionalSaveData(var1, var2);
+      var2.putString("Rotation", this.placeSettings.getRotation().name());
+      var2.putString("Mirror", this.placeSettings.getMirror().name());
+      var2.putString("VerticalPlacement", this.verticalPlacement.getName());
       DataResult var10000 = RuinedPortalPiece.Properties.CODEC.encodeStart(NbtOps.INSTANCE, this.properties);
       Logger var10001 = LOGGER;
-      var10001.getClass();
+      Objects.requireNonNull(var10001);
       var10000.resultOrPartial(var10001::error).ifPresent((var1x) -> {
-         var1.put("Properties", var1x);
+         var2.put("Properties", var1x);
       });
    }
 
-   private void loadTemplate(StructureTemplate var1, BlockPos var2) {
-      BlockIgnoreProcessor var3 = this.properties.airPocket ? BlockIgnoreProcessor.STRUCTURE_BLOCK : BlockIgnoreProcessor.STRUCTURE_AND_AIR;
-      ArrayList var4 = Lists.newArrayList();
-      var4.add(getBlockReplaceRule(Blocks.GOLD_BLOCK, 0.3F, Blocks.AIR));
-      var4.add(this.getLavaProcessorRule());
-      if (!this.properties.cold) {
-         var4.add(getBlockReplaceRule(Blocks.NETHERRACK, 0.07F, Blocks.MAGMA_BLOCK));
+   private static StructurePlaceSettings makeSettings(ServerLevel var0, CompoundTag var1, ResourceLocation var2) {
+      StructureTemplate var3 = var0.getStructureManager().getOrCreate(var2);
+      BlockPos var4 = new BlockPos(var3.getSize().getX() / 2, 0, var3.getSize().getZ() / 2);
+      Mirror var10000 = Mirror.valueOf(var1.getString("Mirror"));
+      Rotation var10001 = Rotation.valueOf(var1.getString("Rotation"));
+      RuinedPortalPiece.VerticalPlacement var10002 = RuinedPortalPiece.VerticalPlacement.byName(var1.getString("VerticalPlacement"));
+      DataResult var10004 = RuinedPortalPiece.Properties.CODEC.parse(new Dynamic(NbtOps.INSTANCE, var1.get("Properties")));
+      Logger var10006 = LOGGER;
+      Objects.requireNonNull(var10006);
+      return makeSettings(var10000, var10001, var10002, var4, (RuinedPortalPiece.Properties)var10004.getOrThrow(true, var10006::error));
+   }
+
+   private static StructurePlaceSettings makeSettings(Mirror var0, Rotation var1, RuinedPortalPiece.VerticalPlacement var2, BlockPos var3, RuinedPortalPiece.Properties var4) {
+      BlockIgnoreProcessor var5 = var4.airPocket ? BlockIgnoreProcessor.STRUCTURE_BLOCK : BlockIgnoreProcessor.STRUCTURE_AND_AIR;
+      ArrayList var6 = Lists.newArrayList();
+      var6.add(getBlockReplaceRule(Blocks.GOLD_BLOCK, 0.3F, Blocks.AIR));
+      var6.add(getLavaProcessorRule(var2, var4));
+      if (!var4.cold) {
+         var6.add(getBlockReplaceRule(Blocks.NETHERRACK, 0.07F, Blocks.MAGMA_BLOCK));
       }
 
-      StructurePlaceSettings var5 = (new StructurePlaceSettings()).setRotation(this.rotation).setMirror(this.mirror).setRotationPivot(var2).addProcessor(var3).addProcessor(new RuleProcessor(var4)).addProcessor(new BlockAgeProcessor(this.properties.mossiness)).addProcessor(new LavaSubmergedBlockProcessor());
-      if (this.properties.replaceWithBlackstone) {
-         var5.addProcessor(BlackstoneReplaceProcessor.INSTANCE);
+      StructurePlaceSettings var7 = (new StructurePlaceSettings()).setRotation(var1).setMirror(var0).setRotationPivot(var3).addProcessor(var5).addProcessor(new RuleProcessor(var6)).addProcessor(new BlockAgeProcessor(var4.mossiness)).addProcessor(new ProtectedBlockProcessor(BlockTags.FEATURES_CANNOT_REPLACE.getName())).addProcessor(new LavaSubmergedBlockProcessor());
+      if (var4.replaceWithBlackstone) {
+         var7.addProcessor(BlackstoneReplaceProcessor.INSTANCE);
       }
 
-      this.setup(var1, this.templatePosition, var5);
+      return var7;
    }
 
-   private ProcessorRule getLavaProcessorRule() {
-      if (this.verticalPlacement == RuinedPortalPiece.VerticalPlacement.ON_OCEAN_FLOOR) {
+   private static ProcessorRule getLavaProcessorRule(RuinedPortalPiece.VerticalPlacement var0, RuinedPortalPiece.Properties var1) {
+      if (var0 == RuinedPortalPiece.VerticalPlacement.ON_OCEAN_FLOOR) {
          return getBlockReplaceRule(Blocks.LAVA, Blocks.MAGMA_BLOCK);
       } else {
-         return this.properties.cold ? getBlockReplaceRule(Blocks.LAVA, Blocks.NETHERRACK) : getBlockReplaceRule(Blocks.LAVA, 0.2F, Blocks.MAGMA_BLOCK);
+         return var1.cold ? getBlockReplaceRule(Blocks.LAVA, Blocks.NETHERRACK) : getBlockReplaceRule(Blocks.LAVA, 0.2F, Blocks.MAGMA_BLOCK);
       }
    }
 
    public boolean postProcess(WorldGenLevel var1, StructureFeatureManager var2, ChunkGenerator var3, Random var4, BoundingBox var5, ChunkPos var6, BlockPos var7) {
       if (!var5.isInside(this.templatePosition)) {
          return true;
       } else {
-         var5.expand(this.template.getBoundingBox(this.placeSettings, this.templatePosition));
+         var5.encapsulate(this.template.getBoundingBox(this.placeSettings, this.templatePosition));
          boolean var8 = super.postProcess(var1, var2, var3, var4, var5, var6, var7);
          this.spreadNetherrack(var4, var1);
          this.addNetherrackDripColumnsBelowPortal(var4, var1);
          if (this.properties.vines || this.properties.overgrown) {
             BlockPos.betweenClosedStream(this.getBoundingBox()).forEach((var3x) -> {
@@ -148,11 +155,11 @@
    }
 
    private void maybeAddVines(Random var1, LevelAccessor var2, BlockPos var3) {
       BlockState var4 = var2.getBlockState(var3);
       if (!var4.isAir() && !var4.is(Blocks.VINE)) {
-         Direction var5 = Direction.Plane.HORIZONTAL.getRandomDirection(var1);
+         Direction var5 = getRandomHorizontalDirection(var1);
          BlockPos var6 = var3.relative(var5);
          BlockState var7 = var2.getBlockState(var6);
          if (var7.isAir()) {
             if (Block.isFaceFull(var4.getCollisionShape(var2, var3), var5)) {
                BooleanProperty var8 = VineBlock.getPropertyForFace(var5.getOpposite());
@@ -168,13 +175,13 @@
       }
 
    }
 
    private void addNetherrackDripColumnsBelowPortal(Random var1, LevelAccessor var2) {
-      for(int var3 = this.boundingBox.x0 + 1; var3 < this.boundingBox.x1; ++var3) {
-         for(int var4 = this.boundingBox.z0 + 1; var4 < this.boundingBox.z1; ++var4) {
-            BlockPos var5 = new BlockPos(var3, this.boundingBox.y0, var4);
+      for(int var3 = this.boundingBox.minX() + 1; var3 < this.boundingBox.maxX(); ++var3) {
+         for(int var4 = this.boundingBox.minZ() + 1; var4 < this.boundingBox.maxZ(); ++var4) {
+            BlockPos var5 = new BlockPos(var3, this.boundingBox.minY(), var4);
             if (var2.getBlockState(var5).is(Blocks.NETHERRACK)) {
                this.addNetherrackDripColumn(var1, var2, var5.below());
             }
          }
       }
@@ -194,11 +201,11 @@
 
    }
 
    private void spreadNetherrack(Random var1, LevelAccessor var2) {
       boolean var3 = this.verticalPlacement == RuinedPortalPiece.VerticalPlacement.ON_LAND_SURFACE || this.verticalPlacement == RuinedPortalPiece.VerticalPlacement.ON_OCEAN_FLOOR;
-      Vec3i var4 = this.boundingBox.getCenter();
+      BlockPos var4 = this.boundingBox.getCenter();
       int var5 = var4.getX();
       int var6 = var4.getZ();
       float[] var7 = new float[]{1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 0.9F, 0.9F, 0.8F, 0.7F, 0.6F, 0.4F, 0.2F};
       int var8 = var7.length;
       int var9 = (this.boundingBox.getXSpan() + this.boundingBox.getZSpan()) / 2;
@@ -212,13 +219,13 @@
             int var16 = Math.max(0, var15 + var10);
             if (var16 < var8) {
                float var17 = var7[var16];
                if (var1.nextDouble() < (double)var17) {
                   int var18 = getSurfaceY(var2, var13, var14, this.verticalPlacement);
-                  int var19 = var3 ? var18 : Math.min(this.boundingBox.y0, var18);
+                  int var19 = var3 ? var18 : Math.min(this.boundingBox.minY(), var18);
                   var12.set(var13, var19, var14);
-                  if (Math.abs(var19 - this.boundingBox.y0) <= 3 && this.canBlockBeReplacedByNetherrackOrMagma(var2, var12)) {
+                  if (Math.abs(var19 - this.boundingBox.minY()) <= 3 && this.canBlockBeReplacedByNetherrackOrMagma(var2, var12)) {
                      this.placeNetherrackOrMagma(var1, var2, var12);
                      if (this.properties.overgrown) {
                         this.maybeAddLeavesAbove(var1, var2, var12);
                      }
 
@@ -231,11 +238,11 @@
 
    }
 
    private boolean canBlockBeReplacedByNetherrackOrMagma(LevelAccessor var1, BlockPos var2) {
       BlockState var3 = var1.getBlockState(var2);
-      return !var3.is(Blocks.AIR) && !var3.is(Blocks.OBSIDIAN) && !var3.is(Blocks.CHEST) && (this.verticalPlacement == RuinedPortalPiece.VerticalPlacement.IN_NETHER || !var3.is(Blocks.LAVA));
+      return !var3.is(Blocks.AIR) && !var3.is(Blocks.OBSIDIAN) && !var3.is(BlockTags.FEATURES_CANNOT_REPLACE) && (this.verticalPlacement == RuinedPortalPiece.VerticalPlacement.IN_NETHER || !var3.is(Blocks.LAVA));
    }
 
    private void placeNetherrackOrMagma(Random var1, LevelAccessor var2, BlockPos var3) {
       if (!this.properties.cold && var1.nextFloat() < 0.07F) {
          var2.setBlock(var3, Blocks.MAGMA_BLOCK.defaultBlockState(), 3);
