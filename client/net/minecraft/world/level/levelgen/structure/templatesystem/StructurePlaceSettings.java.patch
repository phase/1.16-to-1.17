--- net/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings.java
+++ net/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings.java
@@ -5,23 +5,20 @@
 import java.util.Random;
 import javax.annotation.Nullable;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
 import net.minecraft.util.Mth;
-import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.block.Mirror;
 import net.minecraft.world.level.block.Rotation;
 import net.minecraft.world.level.levelgen.structure.BoundingBox;
 
 public class StructurePlaceSettings {
    private Mirror mirror;
    private Rotation rotation;
    private BlockPos rotationPivot;
    private boolean ignoreEntities;
    @Nullable
-   private ChunkPos chunkPos;
-   @Nullable
    private BoundingBox boundingBox;
    private boolean keepLiquids;
    @Nullable
    private Random random;
    @Nullable
@@ -42,11 +39,10 @@
       StructurePlaceSettings var1 = new StructurePlaceSettings();
       var1.mirror = this.mirror;
       var1.rotation = this.rotation;
       var1.rotationPivot = this.rotationPivot;
       var1.ignoreEntities = this.ignoreEntities;
-      var1.chunkPos = this.chunkPos;
       var1.boundingBox = this.boundingBox;
       var1.keepLiquids = this.keepLiquids;
       var1.random = this.random;
       var1.palette = this.palette;
       var1.processors.addAll(this.processors);
@@ -73,15 +69,10 @@
    public StructurePlaceSettings setIgnoreEntities(boolean var1) {
       this.ignoreEntities = var1;
       return this;
    }
 
-   public StructurePlaceSettings setChunkPos(ChunkPos var1) {
-      this.chunkPos = var1;
-      return this;
-   }
-
    public StructurePlaceSettings setBoundingBox(BoundingBox var1) {
       this.boundingBox = var1;
       return this;
    }
 
@@ -134,14 +125,10 @@
       return this.ignoreEntities;
    }
 
    @Nullable
    public BoundingBox getBoundingBox() {
-      if (this.boundingBox == null && this.chunkPos != null) {
-         this.updateBoundingBoxFromChunkPos();
-      }
-
       return this.boundingBox;
    }
 
    public boolean getKnownShape() {
       return this.knownShape;
@@ -149,17 +136,10 @@
 
    public List<StructureProcessor> getProcessors() {
       return this.processors;
    }
 
-   void updateBoundingBoxFromChunkPos() {
-      if (this.chunkPos != null) {
-         this.boundingBox = this.calculateBoundingBox(this.chunkPos);
-      }
-
-   }
-
    public boolean shouldKeepLiquids() {
       return this.keepLiquids;
    }
 
    public StructureTemplate.Palette getRandomPalette(List<StructureTemplate.Palette> var1, @Nullable BlockPos var2) {
@@ -169,21 +149,10 @@
       } else {
          return (StructureTemplate.Palette)var1.get(this.getRandom(var2).nextInt(var3));
       }
    }
 
-   @Nullable
-   private BoundingBox calculateBoundingBox(@Nullable ChunkPos var1) {
-      if (var1 == null) {
-         return this.boundingBox;
-      } else {
-         int var2 = var1.x * 16;
-         int var3 = var1.z * 16;
-         return new BoundingBox(var2, 0, var3, var2 + 16 - 1, 255, var3 + 16 - 1);
-      }
-   }
-
    public StructurePlaceSettings setFinalizeEntities(boolean var1) {
       this.finalizeEntities = var1;
       return this;
    }
 
