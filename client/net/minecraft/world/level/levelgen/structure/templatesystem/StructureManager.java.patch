--- net/minecraft/world/level/levelgen/structure/templatesystem/StructureManager.java
+++ net/minecraft/world/level/levelgen/structure/templatesystem/StructureManager.java
@@ -11,11 +11,11 @@
 import java.nio.file.Files;
 import java.nio.file.InvalidPathException;
 import java.nio.file.LinkOption;
 import java.nio.file.Path;
 import java.util.Map;
-import javax.annotation.Nullable;
+import java.util.Optional;
 import net.minecraft.FileUtil;
 import net.minecraft.ResourceLocationException;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtIo;
 import net.minecraft.nbt.NbtUtils;
@@ -28,11 +28,14 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class StructureManager {
    private static final Logger LOGGER = LogManager.getLogger();
-   private final Map<ResourceLocation, StructureTemplate> structureRepository = Maps.newHashMap();
+   private static final String STRUCTURE_DIRECTORY_NAME = "structures";
+   private static final String STRUCTURE_FILE_EXTENSION = ".nbt";
+   private static final String STRUCTURE_TEXT_FILE_EXTENSION = ".snbt";
+   private final Map<ResourceLocation, Optional<StructureTemplate>> structureRepository = Maps.newConcurrentMap();
    private final DataFixer fixerUpper;
    private ResourceManager resourceManager;
    private final Path generatedDir;
 
    public StructureManager(ResourceManager var1, LevelStorageSource.LevelStorageAccess var2, DataFixer var3) {
@@ -40,108 +43,95 @@
       this.fixerUpper = var3;
       this.generatedDir = var2.getLevelPath(LevelResource.GENERATED_DIR).normalize();
    }
 
    public StructureTemplate getOrCreate(ResourceLocation var1) {
-      StructureTemplate var2 = this.get(var1);
-      if (var2 == null) {
-         var2 = new StructureTemplate();
-         this.structureRepository.put(var1, var2);
+      Optional var2 = this.get(var1);
+      if (var2.isPresent()) {
+         return (StructureTemplate)var2.get();
+      } else {
+         StructureTemplate var3 = new StructureTemplate();
+         this.structureRepository.put(var1, Optional.of(var3));
+         return var3;
       }
-
-      return var2;
    }
 
-   @Nullable
-   public StructureTemplate get(ResourceLocation var1) {
-      return (StructureTemplate)this.structureRepository.computeIfAbsent(var1, (var1x) -> {
-         StructureTemplate var2 = this.loadFromGenerated(var1x);
-         return var2 != null ? var2 : this.loadFromResource(var1x);
+   public Optional<StructureTemplate> get(ResourceLocation var1) {
+      return (Optional)this.structureRepository.computeIfAbsent(var1, (var1x) -> {
+         Optional var2 = this.loadFromGenerated(var1x);
+         return var2.isPresent() ? var2 : this.loadFromResource(var1x);
       });
    }
 
    public void onResourceManagerReload(ResourceManager var1) {
       this.resourceManager = var1;
       this.structureRepository.clear();
    }
 
-   @Nullable
-   private StructureTemplate loadFromResource(ResourceLocation var1) {
+   private Optional<StructureTemplate> loadFromResource(ResourceLocation var1) {
       ResourceLocation var2 = new ResourceLocation(var1.getNamespace(), "structures/" + var1.getPath() + ".nbt");
 
       try {
          Resource var3 = this.resourceManager.getResource(var2);
-         Throwable var4 = null;
 
-         StructureTemplate var5;
+         Optional var4;
          try {
-            var5 = this.readStructure(var3.getInputStream());
-         } catch (Throwable var16) {
-            var4 = var16;
-            throw var16;
-         } finally {
+            var4 = Optional.of(this.readStructure(var3.getInputStream()));
+         } catch (Throwable var7) {
             if (var3 != null) {
-               if (var4 != null) {
-                  try {
-                     var3.close();
-                  } catch (Throwable var15) {
-                     var4.addSuppressed(var15);
-                  }
-               } else {
+               try {
                   var3.close();
+               } catch (Throwable var6) {
+                  var7.addSuppressed(var6);
                }
             }
 
+            throw var7;
          }
 
-         return var5;
-      } catch (FileNotFoundException var18) {
-         return null;
-      } catch (Throwable var19) {
-         LOGGER.error("Couldn't load structure {}: {}", var1, var19.toString());
-         return null;
+         if (var3 != null) {
+            var3.close();
+         }
+
+         return var4;
+      } catch (FileNotFoundException var8) {
+         return Optional.empty();
+      } catch (Throwable var9) {
+         LOGGER.error("Couldn't load structure {}: {}", var1, var9.toString());
+         return Optional.empty();
       }
    }
 
-   @Nullable
-   private StructureTemplate loadFromGenerated(ResourceLocation var1) {
+   private Optional<StructureTemplate> loadFromGenerated(ResourceLocation var1) {
       if (!this.generatedDir.toFile().isDirectory()) {
-         return null;
+         return Optional.empty();
       } else {
          Path var2 = this.createAndValidatePathToStructure(var1, ".nbt");
 
          try {
             FileInputStream var3 = new FileInputStream(var2.toFile());
-            Throwable var4 = null;
 
-            StructureTemplate var5;
+            Optional var4;
             try {
-               var5 = this.readStructure((InputStream)var3);
-            } catch (Throwable var16) {
-               var4 = var16;
-               throw var16;
-            } finally {
-               if (var3 != null) {
-                  if (var4 != null) {
-                     try {
-                        var3.close();
-                     } catch (Throwable var15) {
-                        var4.addSuppressed(var15);
-                     }
-                  } else {
-                     var3.close();
-                  }
+               var4 = Optional.of(this.readStructure((InputStream)var3));
+            } catch (Throwable var7) {
+               try {
+                  var3.close();
+               } catch (Throwable var6) {
+                  var7.addSuppressed(var6);
                }
 
+               throw var7;
             }
 
-            return var5;
-         } catch (FileNotFoundException var18) {
-            return null;
-         } catch (IOException var19) {
-            LOGGER.error("Couldn't load structure from {}", var2, var19);
-            return null;
+            var3.close();
+            return var4;
+         } catch (FileNotFoundException var8) {
+            return Optional.empty();
+         } catch (IOException var9) {
+            LOGGER.error("Couldn't load structure from {}", var2, var9);
+            return Optional.empty();
          }
       }
    }
 
    private StructureTemplate readStructure(InputStream var1) throws IOException {
@@ -158,54 +148,47 @@
       var2.load(NbtUtils.update(this.fixerUpper, DataFixTypes.STRUCTURE, var1, var1.getInt("DataVersion")));
       return var2;
    }
 
    public boolean save(ResourceLocation var1) {
-      StructureTemplate var2 = (StructureTemplate)this.structureRepository.get(var1);
-      if (var2 == null) {
+      Optional var2 = (Optional)this.structureRepository.get(var1);
+      if (!var2.isPresent()) {
          return false;
       } else {
-         Path var3 = this.createAndValidatePathToStructure(var1, ".nbt");
-         Path var4 = var3.getParent();
-         if (var4 == null) {
+         StructureTemplate var3 = (StructureTemplate)var2.get();
+         Path var4 = this.createAndValidatePathToStructure(var1, ".nbt");
+         Path var5 = var4.getParent();
+         if (var5 == null) {
             return false;
          } else {
             try {
-               Files.createDirectories(Files.exists(var4, new LinkOption[0]) ? var4.toRealPath() : var4);
-            } catch (IOException var19) {
-               LOGGER.error("Failed to create parent directory: {}", var4);
+               Files.createDirectories(Files.exists(var5, new LinkOption[0]) ? var5.toRealPath() : var5);
+            } catch (IOException var13) {
+               LOGGER.error("Failed to create parent directory: {}", var5);
                return false;
             }
 
-            CompoundTag var5 = var2.save(new CompoundTag());
+            CompoundTag var6 = var3.save(new CompoundTag());
 
             try {
-               FileOutputStream var6 = new FileOutputStream(var3.toFile());
-               Throwable var7 = null;
+               FileOutputStream var7 = new FileOutputStream(var4.toFile());
 
                try {
-                  NbtIo.writeCompressed(var5, (OutputStream)var6);
-               } catch (Throwable var18) {
-                  var7 = var18;
-                  throw var18;
-               } finally {
-                  if (var6 != null) {
-                     if (var7 != null) {
-                        try {
-                           var6.close();
-                        } catch (Throwable var17) {
-                           var7.addSuppressed(var17);
-                        }
-                     } else {
-                        var6.close();
-                     }
+                  NbtIo.writeCompressed(var6, (OutputStream)var7);
+               } catch (Throwable var11) {
+                  try {
+                     var7.close();
+                  } catch (Throwable var10) {
+                     var11.addSuppressed(var10);
                   }
 
+                  throw var11;
                }
 
+               var7.close();
                return true;
-            } catch (Throwable var21) {
+            } catch (Throwable var12) {
                return false;
             }
          }
       }
    }
