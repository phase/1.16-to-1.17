--- net/minecraft/world/level/levelgen/structure/SwamplandHutPiece.java
+++ net/minecraft/world/level/levelgen/structure/SwamplandHutPiece.java
@@ -2,10 +2,11 @@
 
 import java.util.Random;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.nbt.CompoundTag;
+import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.SpawnGroupData;
 import net.minecraft.world.entity.animal.Cat;
 import net.minecraft.world.entity.monster.Witch;
@@ -17,30 +18,29 @@
 import net.minecraft.world.level.block.StairBlock;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.properties.StairsShape;
 import net.minecraft.world.level.chunk.ChunkGenerator;
 import net.minecraft.world.level.levelgen.feature.StructurePieceType;
-import net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager;
 
 public class SwamplandHutPiece extends ScatteredFeaturePiece {
    private boolean spawnedWitch;
    private boolean spawnedCat;
 
    public SwamplandHutPiece(Random var1, int var2, int var3) {
-      super(StructurePieceType.SWAMPLAND_HUT, var1, var2, 64, var3, 7, 7, 9);
+      super(StructurePieceType.SWAMPLAND_HUT, var2, 64, var3, 7, 7, 9, getRandomHorizontalDirection(var1));
    }
 
-   public SwamplandHutPiece(StructureManager var1, CompoundTag var2) {
+   public SwamplandHutPiece(ServerLevel var1, CompoundTag var2) {
       super(StructurePieceType.SWAMPLAND_HUT, var2);
       this.spawnedWitch = var2.getBoolean("Witch");
       this.spawnedCat = var2.getBoolean("Cat");
    }
 
-   protected void addAdditionalSaveData(CompoundTag var1) {
-      super.addAdditionalSaveData(var1);
-      var1.putBoolean("Witch", this.spawnedWitch);
-      var1.putBoolean("Cat", this.spawnedCat);
+   protected void addAdditionalSaveData(ServerLevel var1, CompoundTag var2) {
+      super.addAdditionalSaveData(var1, var2);
+      var2.putBoolean("Witch", this.spawnedWitch);
+      var2.putBoolean("Cat", this.spawnedCat);
    }
 
    public boolean postProcess(WorldGenLevel var1, StructureFeatureManager var2, ChunkGenerator var3, Random var4, BoundingBox var5, ChunkPos var6, BlockPos var7) {
       if (!this.updateAverageGroundHeight(var1, var5, 0)) {
          return false;
@@ -77,28 +77,24 @@
          this.placeBlock(var1, (BlockState)var8.setValue(StairBlock.SHAPE, StairsShape.OUTER_RIGHT), 0, 4, 1, var5);
          this.placeBlock(var1, (BlockState)var8.setValue(StairBlock.SHAPE, StairsShape.OUTER_LEFT), 6, 4, 1, var5);
          this.placeBlock(var1, (BlockState)var11.setValue(StairBlock.SHAPE, StairsShape.OUTER_LEFT), 0, 4, 8, var5);
          this.placeBlock(var1, (BlockState)var11.setValue(StairBlock.SHAPE, StairsShape.OUTER_RIGHT), 6, 4, 8, var5);
 
-         int var12;
-         int var13;
-         for(var12 = 2; var12 <= 7; var12 += 5) {
-            for(var13 = 1; var13 <= 5; var13 += 4) {
+         for(int var12 = 2; var12 <= 7; var12 += 5) {
+            for(int var13 = 1; var13 <= 5; var13 += 4) {
                this.fillColumnDown(var1, Blocks.OAK_LOG.defaultBlockState(), var13, -1, var12, var5);
             }
          }
 
          if (!this.spawnedWitch) {
-            var12 = this.getWorldX(2, 5);
-            var13 = this.getWorldY(2);
-            int var14 = this.getWorldZ(2, 5);
-            if (var5.isInside(new BlockPos(var12, var13, var14))) {
+            BlockPos.MutableBlockPos var14 = this.getWorldPos(2, 2, 5);
+            if (var5.isInside(var14)) {
                this.spawnedWitch = true;
                Witch var15 = (Witch)EntityType.WITCH.create(var1.getLevel());
                var15.setPersistenceRequired();
-               var15.moveTo((double)var12 + 0.5D, (double)var13, (double)var14 + 0.5D, 0.0F, 0.0F);
-               var15.finalizeSpawn(var1, var1.getCurrentDifficultyAt(new BlockPos(var12, var13, var14)), MobSpawnType.STRUCTURE, (SpawnGroupData)null, (CompoundTag)null);
+               var15.moveTo((double)var14.getX() + 0.5D, (double)var14.getY(), (double)var14.getZ() + 0.5D, 0.0F, 0.0F);
+               var15.finalizeSpawn(var1, var1.getCurrentDifficultyAt(var14), MobSpawnType.STRUCTURE, (SpawnGroupData)null, (CompoundTag)null);
                var1.addFreshEntityWithPassengers(var15);
             }
          }
 
          this.spawnCat(var1, var5);
@@ -106,20 +102,18 @@
       }
    }
 
    private void spawnCat(ServerLevelAccessor var1, BoundingBox var2) {
       if (!this.spawnedCat) {
-         int var3 = this.getWorldX(2, 5);
-         int var4 = this.getWorldY(2);
-         int var5 = this.getWorldZ(2, 5);
-         if (var2.isInside(new BlockPos(var3, var4, var5))) {
+         BlockPos.MutableBlockPos var3 = this.getWorldPos(2, 2, 5);
+         if (var2.isInside(var3)) {
             this.spawnedCat = true;
-            Cat var6 = (Cat)EntityType.CAT.create(var1.getLevel());
-            var6.setPersistenceRequired();
-            var6.moveTo((double)var3 + 0.5D, (double)var4, (double)var5 + 0.5D, 0.0F, 0.0F);
-            var6.finalizeSpawn(var1, var1.getCurrentDifficultyAt(new BlockPos(var3, var4, var5)), MobSpawnType.STRUCTURE, (SpawnGroupData)null, (CompoundTag)null);
-            var1.addFreshEntityWithPassengers(var6);
+            Cat var4 = (Cat)EntityType.CAT.create(var1.getLevel());
+            var4.setPersistenceRequired();
+            var4.moveTo((double)var3.getX() + 0.5D, (double)var3.getY(), (double)var3.getZ() + 0.5D, 0.0F, 0.0F);
+            var4.finalizeSpawn(var1, var1.getCurrentDifficultyAt(var3), MobSpawnType.STRUCTURE, (SpawnGroupData)null, (CompoundTag)null);
+            var1.addFreshEntityWithPassengers(var4);
          }
       }
 
    }
 }
