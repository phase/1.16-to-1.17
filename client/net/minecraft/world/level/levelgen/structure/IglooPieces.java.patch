--- net/minecraft/world/level/levelgen/structure/IglooPieces.java
+++ net/minecraft/world/level/levelgen/structure/IglooPieces.java
@@ -1,14 +1,15 @@
 package net.minecraft.world.level.levelgen.structure;
 
 import com.google.common.collect.ImmutableMap;
-import java.util.List;
 import java.util.Map;
 import java.util.Random;
 import net.minecraft.core.BlockPos;
+import net.minecraft.core.Vec3i;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.ServerLevelAccessor;
 import net.minecraft.world.level.StructureFeatureManager;
 import net.minecraft.world.level.WorldGenLevel;
 import net.minecraft.world.level.block.Blocks;
@@ -25,66 +26,62 @@
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructurePlaceSettings;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate;
 import net.minecraft.world.level.storage.loot.BuiltInLootTables;
 
 public class IglooPieces {
-   private static final ResourceLocation STRUCTURE_LOCATION_IGLOO = new ResourceLocation("igloo/top");
+   public static final int GENERATION_HEIGHT = 90;
+   static final ResourceLocation STRUCTURE_LOCATION_IGLOO = new ResourceLocation("igloo/top");
    private static final ResourceLocation STRUCTURE_LOCATION_LADDER = new ResourceLocation("igloo/middle");
    private static final ResourceLocation STRUCTURE_LOCATION_LABORATORY = new ResourceLocation("igloo/bottom");
-   private static final Map<ResourceLocation, BlockPos> PIVOTS;
-   private static final Map<ResourceLocation, BlockPos> OFFSETS;
+   static final Map<ResourceLocation, BlockPos> PIVOTS;
+   static final Map<ResourceLocation, BlockPos> OFFSETS;
 
-   public static void addPieces(StructureManager var0, BlockPos var1, Rotation var2, List<StructurePiece> var3, Random var4) {
+   public IglooPieces() {
+   }
+
+   public static void addPieces(StructureManager var0, BlockPos var1, Rotation var2, StructurePieceAccessor var3, Random var4) {
       if (var4.nextDouble() < 0.5D) {
          int var5 = var4.nextInt(8) + 4;
-         var3.add(new IglooPieces.IglooPiece(var0, STRUCTURE_LOCATION_LABORATORY, var1, var2, var5 * 3));
+         var3.addPiece(new IglooPieces.IglooPiece(var0, STRUCTURE_LOCATION_LABORATORY, var1, var2, var5 * 3));
 
          for(int var6 = 0; var6 < var5 - 1; ++var6) {
-            var3.add(new IglooPieces.IglooPiece(var0, STRUCTURE_LOCATION_LADDER, var1, var2, var6 * 3));
+            var3.addPiece(new IglooPieces.IglooPiece(var0, STRUCTURE_LOCATION_LADDER, var1, var2, var6 * 3));
          }
       }
 
-      var3.add(new IglooPieces.IglooPiece(var0, STRUCTURE_LOCATION_IGLOO, var1, var2, 0));
+      var3.addPiece(new IglooPieces.IglooPiece(var0, STRUCTURE_LOCATION_IGLOO, var1, var2, 0));
    }
 
    static {
       PIVOTS = ImmutableMap.of(STRUCTURE_LOCATION_IGLOO, new BlockPos(3, 5, 5), STRUCTURE_LOCATION_LADDER, new BlockPos(1, 3, 1), STRUCTURE_LOCATION_LABORATORY, new BlockPos(3, 6, 7));
       OFFSETS = ImmutableMap.of(STRUCTURE_LOCATION_IGLOO, BlockPos.ZERO, STRUCTURE_LOCATION_LADDER, new BlockPos(2, -3, 4), STRUCTURE_LOCATION_LABORATORY, new BlockPos(0, -3, -2));
    }
 
    public static class IglooPiece extends TemplateStructurePiece {
-      private final ResourceLocation templateLocation;
-      private final Rotation rotation;
-
       public IglooPiece(StructureManager var1, ResourceLocation var2, BlockPos var3, Rotation var4, int var5) {
-         super(StructurePieceType.IGLOO, 0);
-         this.templateLocation = var2;
-         BlockPos var6 = (BlockPos)IglooPieces.OFFSETS.get(var2);
-         this.templatePosition = var3.offset(var6.getX(), var6.getY() - var5, var6.getZ());
-         this.rotation = var4;
-         this.loadTemplate(var1);
+         super(StructurePieceType.IGLOO, 0, var1, var2, var2.toString(), makeSettings(var4, var2), makePosition(var2, var3, var5));
       }
 
-      public IglooPiece(StructureManager var1, CompoundTag var2) {
-         super(StructurePieceType.IGLOO, var2);
-         this.templateLocation = new ResourceLocation(var2.getString("Template"));
-         this.rotation = Rotation.valueOf(var2.getString("Rot"));
-         this.loadTemplate(var1);
+      public IglooPiece(ServerLevel var1, CompoundTag var2) {
+         super(StructurePieceType.IGLOO, var2, var1, (var1x) -> {
+            return makeSettings(Rotation.valueOf(var2.getString("Rot")), var1x);
+         });
       }
 
-      private void loadTemplate(StructureManager var1) {
-         StructureTemplate var2 = var1.getOrCreate(this.templateLocation);
-         StructurePlaceSettings var3 = (new StructurePlaceSettings()).setRotation(this.rotation).setMirror(Mirror.NONE).setRotationPivot((BlockPos)IglooPieces.PIVOTS.get(this.templateLocation)).addProcessor(BlockIgnoreProcessor.STRUCTURE_BLOCK);
-         this.setup(var2, this.templatePosition, var3);
+      private static StructurePlaceSettings makeSettings(Rotation var0, ResourceLocation var1) {
+         return (new StructurePlaceSettings()).setRotation(var0).setMirror(Mirror.NONE).setRotationPivot((BlockPos)IglooPieces.PIVOTS.get(var1)).addProcessor(BlockIgnoreProcessor.STRUCTURE_BLOCK);
       }
 
-      protected void addAdditionalSaveData(CompoundTag var1) {
-         super.addAdditionalSaveData(var1);
-         var1.putString("Template", this.templateLocation.toString());
-         var1.putString("Rot", this.rotation.name());
+      private static BlockPos makePosition(ResourceLocation var0, BlockPos var1, int var2) {
+         return var1.offset((Vec3i)IglooPieces.OFFSETS.get(var0)).below(var2);
       }
 
+      protected void addAdditionalSaveData(ServerLevel var1, CompoundTag var2) {
+         super.addAdditionalSaveData(var1, var2);
+         var2.putString("Rot", this.placeSettings.getRotation().name());
+      }
+
       protected void handleDataMarker(String var1, BlockPos var2, ServerLevelAccessor var3, Random var4, BoundingBox var5) {
          if ("chest".equals(var1)) {
             var3.setBlock(var2, Blocks.AIR.defaultBlockState(), 3);
             BlockEntity var6 = var3.getBlockEntity(var2.below());
             if (var6 instanceof ChestBlockEntity) {
@@ -93,25 +90,26 @@
 
          }
       }
 
       public boolean postProcess(WorldGenLevel var1, StructureFeatureManager var2, ChunkGenerator var3, Random var4, BoundingBox var5, ChunkPos var6, BlockPos var7) {
-         StructurePlaceSettings var8 = (new StructurePlaceSettings()).setRotation(this.rotation).setMirror(Mirror.NONE).setRotationPivot((BlockPos)IglooPieces.PIVOTS.get(this.templateLocation)).addProcessor(BlockIgnoreProcessor.STRUCTURE_BLOCK);
-         BlockPos var9 = (BlockPos)IglooPieces.OFFSETS.get(this.templateLocation);
-         BlockPos var10 = this.templatePosition.offset(StructureTemplate.calculateRelativePosition(var8, new BlockPos(3 - var9.getX(), 0, 0 - var9.getZ())));
-         int var11 = var1.getHeight(Heightmap.Types.WORLD_SURFACE_WG, var10.getX(), var10.getZ());
-         BlockPos var12 = this.templatePosition;
-         this.templatePosition = this.templatePosition.offset(0, var11 - 90 - 1, 0);
-         boolean var13 = super.postProcess(var1, var2, var3, var4, var5, var6, var7);
-         if (this.templateLocation.equals(IglooPieces.STRUCTURE_LOCATION_IGLOO)) {
-            BlockPos var14 = this.templatePosition.offset(StructureTemplate.calculateRelativePosition(var8, new BlockPos(3, 0, 5)));
-            BlockState var15 = var1.getBlockState(var14.below());
-            if (!var15.isAir() && !var15.is(Blocks.LADDER)) {
-               var1.setBlock(var14, Blocks.SNOW_BLOCK.defaultBlockState(), 3);
+         ResourceLocation var8 = new ResourceLocation(this.templateName);
+         StructurePlaceSettings var9 = makeSettings(this.placeSettings.getRotation(), var8);
+         BlockPos var10 = (BlockPos)IglooPieces.OFFSETS.get(var8);
+         BlockPos var11 = this.templatePosition.offset(StructureTemplate.calculateRelativePosition(var9, new BlockPos(3 - var10.getX(), 0, -var10.getZ())));
+         int var12 = var1.getHeight(Heightmap.Types.WORLD_SURFACE_WG, var11.getX(), var11.getZ());
+         BlockPos var13 = this.templatePosition;
+         this.templatePosition = this.templatePosition.offset(0, var12 - 90 - 1, 0);
+         boolean var14 = super.postProcess(var1, var2, var3, var4, var5, var6, var7);
+         if (var8.equals(IglooPieces.STRUCTURE_LOCATION_IGLOO)) {
+            BlockPos var15 = this.templatePosition.offset(StructureTemplate.calculateRelativePosition(var9, new BlockPos(3, 0, 5)));
+            BlockState var16 = var1.getBlockState(var15.below());
+            if (!var16.isAir() && !var16.is(Blocks.LADDER)) {
+               var1.setBlock(var15, Blocks.SNOW_BLOCK.defaultBlockState(), 3);
             }
          }
 
-         this.templatePosition = var12;
-         return var13;
+         this.templatePosition = var13;
+         return var14;
       }
    }
 }
