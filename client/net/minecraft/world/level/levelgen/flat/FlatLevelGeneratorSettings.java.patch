--- net/minecraft/world/level/levelgen/flat/FlatLevelGeneratorSettings.java
+++ net/minecraft/world/level/levelgen/flat/FlatLevelGeneratorSettings.java
@@ -2,17 +2,18 @@
 
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.mojang.serialization.Codec;
+import com.mojang.serialization.DataResult;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
-import java.util.Arrays;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Optional;
 import java.util.Map.Entry;
+import java.util.function.Function;
 import java.util.function.Supplier;
 import net.minecraft.Util;
 import net.minecraft.core.Registry;
 import net.minecraft.data.worldgen.Features;
 import net.minecraft.data.worldgen.StructureFeatures;
@@ -20,17 +21,19 @@
 import net.minecraft.world.level.biome.Biome;
 import net.minecraft.world.level.biome.BiomeGenerationSettings;
 import net.minecraft.world.level.biome.Biomes;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.dimension.DimensionType;
 import net.minecraft.world.level.levelgen.GenerationStep;
 import net.minecraft.world.level.levelgen.Heightmap;
 import net.minecraft.world.level.levelgen.StructureSettings;
 import net.minecraft.world.level.levelgen.feature.ConfiguredStructureFeature;
 import net.minecraft.world.level.levelgen.feature.Feature;
 import net.minecraft.world.level.levelgen.feature.StructureFeature;
 import net.minecraft.world.level.levelgen.feature.configurations.LayerConfiguration;
+import net.minecraft.world.level.levelgen.feature.configurations.StructureFeatureConfiguration;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class FlatLevelGeneratorSettings {
    private static final Logger LOGGER = LogManager.getLogger();
@@ -42,11 +45,11 @@
       }), Codec.BOOL.fieldOf("features").orElse(false).forGetter((var0x) -> {
          return var0x.decoration;
       }), Biome.CODEC.optionalFieldOf("biome").orElseGet(Optional::empty).forGetter((var0x) -> {
          return Optional.of(var0x.biome);
       })).apply(var0, FlatLevelGeneratorSettings::new);
-   }).stable();
+   }).comapFlatMap(FlatLevelGeneratorSettings::validateHeight, Function.identity()).stable();
    private static final Map<StructureFeature<?>, ConfiguredStructureFeature<?, ?>> STRUCTURE_FEATURES = (Map)Util.make(Maps.newHashMap(), (var0) -> {
       var0.put(StructureFeature.MINESHAFT, StructureFeatures.MINESHAFT);
       var0.put(StructureFeature.VILLAGE, StructureFeatures.VILLAGE_PLAINS);
       var0.put(StructureFeature.STRONGHOLD, StructureFeatures.STRONGHOLD);
       var0.put(StructureFeature.SWAMP_HUT, StructureFeatures.SWAMP_HUT);
@@ -65,16 +68,21 @@
    });
    private final Registry<Biome> biomes;
    private final StructureSettings structureSettings;
    private final List<FlatLayerInfo> layersInfo;
    private Supplier<Biome> biome;
-   private final BlockState[] layers;
+   private final List<BlockState> layers;
    private boolean voidGen;
    private boolean decoration;
    private boolean addLakes;
 
-   public FlatLevelGeneratorSettings(Registry<Biome> var1, StructureSettings var2, List<FlatLayerInfo> var3, boolean var4, boolean var5, Optional<Supplier<Biome>> var6) {
+   private static DataResult<FlatLevelGeneratorSettings> validateHeight(FlatLevelGeneratorSettings var0) {
+      int var1 = var0.layersInfo.stream().mapToInt(FlatLayerInfo::getHeight).sum();
+      return var1 > DimensionType.Y_SIZE ? DataResult.error("Sum of layer heights is > " + DimensionType.Y_SIZE, var0) : DataResult.success(var0);
+   }
+
+   private FlatLevelGeneratorSettings(Registry<Biome> var1, StructureSettings var2, List<FlatLayerInfo> var3, boolean var4, boolean var5, Optional<Supplier<Biome>> var6) {
       this(var2, var1);
       if (var4) {
          this.setAddLakes();
       }
 
@@ -95,18 +103,16 @@
 
    }
 
    public FlatLevelGeneratorSettings(StructureSettings var1, Registry<Biome> var2) {
       this.layersInfo = Lists.newArrayList();
-      this.layers = new BlockState[256];
-      this.decoration = false;
-      this.addLakes = false;
       this.biomes = var2;
       this.structureSettings = var1;
       this.biome = () -> {
          return (Biome)var2.getOrThrow(Biomes.PLAINS);
       };
+      this.layers = Lists.newArrayList();
    }
 
    public FlatLevelGeneratorSettings withStructureSettings(StructureSettings var1) {
       return this.withLayers(this.layersInfo, var1);
    }
@@ -157,12 +163,13 @@
          var3.addStructureStart(var2.withBiomeConfig((ConfiguredStructureFeature)STRUCTURE_FEATURES.get(var5.getKey())));
       }
 
       boolean var10 = (!this.voidGen || this.biomes.getResourceKey(var1).equals(Optional.of(Biomes.THE_VOID))) && this.decoration;
       int var6;
+      List var11;
       if (var10) {
-         List var11 = var2.features();
+         var11 = var2.features();
 
          for(var6 = 0; var6 < var11.size(); ++var6) {
             if (var6 != GenerationStep.Decoration.UNDERGROUND_STRUCTURES.ordinal() && var6 != GenerationStep.Decoration.SURFACE_STRUCTURES.ordinal()) {
                List var7 = (List)var11.get(var6);
                Iterator var8 = var7.iterator();
@@ -173,17 +180,17 @@
                }
             }
          }
       }
 
-      BlockState[] var12 = this.getLayers();
+      var11 = this.getLayers();
 
-      for(var6 = 0; var6 < var12.length; ++var6) {
-         BlockState var13 = var12[var6];
-         if (var13 != null && !Heightmap.Types.MOTION_BLOCKING.isOpaque().test(var13)) {
-            this.layers[var6] = null;
-            var3.addFeature(GenerationStep.Decoration.TOP_LAYER_MODIFICATION, Feature.FILL_LAYER.configured(new LayerConfiguration(var6, var13)));
+      for(var6 = 0; var6 < var11.size(); ++var6) {
+         BlockState var12 = (BlockState)var11.get(var6);
+         if (!Heightmap.Types.MOTION_BLOCKING.isOpaque().test(var12)) {
+            var11.set(var6, (Object)null);
+            var3.addFeature(GenerationStep.Decoration.TOP_LAYER_MODIFICATION, Feature.FILL_LAYER.configured(new LayerConfiguration(var6, var12)));
          }
       }
 
       return (new Biome.BiomeBuilder()).precipitation(var1.getPrecipitation()).biomeCategory(var1.getBiomeCategory()).depth(var1.getDepth()).scale(var1.getScale()).temperature(var1.getBaseTemperature()).downfall(var1.getDownfall()).specialEffects(var1.getSpecialEffects()).generationSettings(var3.build()).mobSpawnSettings(var1.getMobSettings()).build();
    }
@@ -202,43 +209,33 @@
 
    public List<FlatLayerInfo> getLayersInfo() {
       return this.layersInfo;
    }
 
-   public BlockState[] getLayers() {
+   public List<BlockState> getLayers() {
       return this.layers;
    }
 
    public void updateLayers() {
-      Arrays.fill(this.layers, 0, this.layers.length, (Object)null);
-      int var1 = 0;
+      this.layers.clear();
+      Iterator var1 = this.layersInfo.iterator();
 
-      FlatLayerInfo var3;
-      for(Iterator var2 = this.layersInfo.iterator(); var2.hasNext(); var1 += var3.getHeight()) {
-         var3 = (FlatLayerInfo)var2.next();
-         var3.setStart(var1);
-      }
+      while(var1.hasNext()) {
+         FlatLayerInfo var2 = (FlatLayerInfo)var1.next();
 
-      this.voidGen = true;
-      Iterator var5 = this.layersInfo.iterator();
-
-      while(var5.hasNext()) {
-         FlatLayerInfo var6 = (FlatLayerInfo)var5.next();
-
-         for(int var7 = var6.getStart(); var7 < var6.getStart() + var6.getHeight(); ++var7) {
-            BlockState var4 = var6.getBlockState();
-            if (!var4.is(Blocks.AIR)) {
-               this.voidGen = false;
-               this.layers[var7] = var4;
-            }
+         for(int var3 = 0; var3 < var2.getHeight(); ++var3) {
+            this.layers.add(var2.getBlockState());
          }
       }
 
+      this.voidGen = this.layers.stream().allMatch((var0) -> {
+         return var0.is(Blocks.AIR);
+      });
    }
 
    public static FlatLevelGeneratorSettings getDefault(Registry<Biome> var0) {
-      StructureSettings var1 = new StructureSettings(Optional.of(StructureSettings.DEFAULT_STRONGHOLD), Maps.newHashMap(ImmutableMap.of(StructureFeature.VILLAGE, StructureSettings.DEFAULTS.get(StructureFeature.VILLAGE))));
+      StructureSettings var1 = new StructureSettings(Optional.of(StructureSettings.DEFAULT_STRONGHOLD), Maps.newHashMap(ImmutableMap.of(StructureFeature.VILLAGE, (StructureFeatureConfiguration)StructureSettings.DEFAULTS.get(StructureFeature.VILLAGE))));
       FlatLevelGeneratorSettings var2 = new FlatLevelGeneratorSettings(var1, var0);
       var2.biome = () -> {
          return (Biome)var0.getOrThrow(Biomes.PLAINS);
       };
       var2.getLayersInfo().add(new FlatLayerInfo(1, Blocks.BEDROCK));
