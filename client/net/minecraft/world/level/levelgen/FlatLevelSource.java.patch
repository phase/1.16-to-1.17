--- net/minecraft/world/level/levelgen/FlatLevelSource.java
+++ net/minecraft/world/level/levelgen/FlatLevelSource.java
@@ -2,12 +2,12 @@
 
 import com.mojang.serialization.Codec;
 import java.util.Arrays;
 import net.minecraft.core.BlockPos;
 import net.minecraft.server.level.WorldGenRegion;
-import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.LevelHeightAccessor;
 import net.minecraft.world.level.NoiseColumn;
 import net.minecraft.world.level.StructureFeatureManager;
 import net.minecraft.world.level.biome.FixedBiomeSource;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
@@ -43,15 +43,15 @@
       BlockState[] var1 = this.settings.getLayers();
 
       for(int var2 = 0; var2 < var1.length; ++var2) {
          BlockState var3 = var1[var2] == null ? Blocks.AIR.defaultBlockState() : var1[var2];
          if (!Heightmap.Types.MOTION_BLOCKING.isOpaque().test(var3)) {
-            return var2 - 1;
+            return this.settings.getMinBuildHeight() + var2 - 1;
          }
       }
 
-      return var1.length;
+      return this.settings.getMinBuildHeight() + var1.length;
    }
 
    public void fillFromNoise(LevelAccessor var1, StructureFeatureManager var2, ChunkAccess var3) {
       BlockState[] var4 = this.settings.getLayers();
       BlockPos.MutableBlockPos var5 = new BlockPos.MutableBlockPos();
@@ -59,37 +59,39 @@
       Heightmap var7 = var3.getOrCreateHeightmapUnprimed(Heightmap.Types.WORLD_SURFACE_WG);
 
       for(int var8 = 0; var8 < var4.length; ++var8) {
          BlockState var9 = var4[var8];
          if (var9 != null) {
-            for(int var10 = 0; var10 < 16; ++var10) {
-               for(int var11 = 0; var11 < 16; ++var11) {
-                  var3.setBlockState(var5.set(var10, var8, var11), var9, false);
-                  var6.update(var10, var8, var11, var9);
-                  var7.update(var10, var8, var11, var9);
+            int var10 = var1.getMinBuildHeight() + var8;
+
+            for(int var11 = 0; var11 < 16; ++var11) {
+               for(int var12 = 0; var12 < 16; ++var12) {
+                  var3.setBlockState(var5.set(var11, var10, var12), var9, false);
+                  var6.update(var11, var10, var12, var9);
+                  var7.update(var11, var10, var12, var9);
                }
             }
          }
       }
 
    }
 
-   public int getBaseHeight(int var1, int var2, Heightmap.Types var3) {
-      BlockState[] var4 = this.settings.getLayers();
+   public int getBaseHeight(int var1, int var2, Heightmap.Types var3, LevelHeightAccessor var4) {
+      BlockState[] var5 = this.settings.getLayers();
 
-      for(int var5 = var4.length - 1; var5 >= 0; --var5) {
-         BlockState var6 = var4[var5];
-         if (var6 != null && var3.isOpaque().test(var6)) {
-            return var5 + 1;
+      for(int var6 = var5.length - 1; var6 >= 0; --var6) {
+         BlockState var7 = var5[var6];
+         if (var7 != null && var3.isOpaque().test(var7)) {
+            return var4.getMinBuildHeight() + var6 + 1;
          }
       }
 
-      return 0;
+      return var4.getMinBuildHeight();
    }
 
-   public BlockGetter getBaseColumn(int var1, int var2) {
-      return new NoiseColumn((BlockState[])Arrays.stream(this.settings.getLayers()).map((var0) -> {
+   public NoiseColumn getBaseColumn(int var1, int var2, LevelHeightAccessor var3) {
+      return new NoiseColumn(0, (BlockState[])Arrays.stream(this.settings.getLayers()).map((var0) -> {
          return var0 == null ? Blocks.AIR.defaultBlockState() : var0;
       }).toArray((var0) -> {
          return new BlockState[var0];
       }));
    }
