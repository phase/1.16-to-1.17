--- net/minecraft/world/level/levelgen/feature/trunkplacers/TrunkPlacer.java
+++ net/minecraft/world/level/levelgen/feature/trunkplacers/TrunkPlacer.java
@@ -4,27 +4,27 @@
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.codecs.RecordCodecBuilder.Instance;
 import com.mojang.serialization.codecs.RecordCodecBuilder.Mu;
 import java.util.List;
 import java.util.Random;
-import java.util.Set;
+import java.util.function.BiConsumer;
+import java.util.function.Function;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Registry;
-import net.minecraft.world.level.LevelSimulatedRW;
 import net.minecraft.world.level.LevelSimulatedReader;
-import net.minecraft.world.level.LevelWriter;
-import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.levelgen.feature.Feature;
 import net.minecraft.world.level.levelgen.feature.TreeFeature;
 import net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration;
 import net.minecraft.world.level.levelgen.feature.foliageplacers.FoliagePlacer;
-import net.minecraft.world.level.levelgen.structure.BoundingBox;
 
 public abstract class TrunkPlacer {
    public static final Codec<TrunkPlacer> CODEC;
+   private static final int MAX_BASE_HEIGHT = 32;
+   private static final int MAX_RAND = 24;
+   public static final int MAX_HEIGHT = 80;
    protected final int baseHeight;
    protected final int heightRandA;
    protected final int heightRandB;
 
    protected static <P extends TrunkPlacer> P3<Mu<P>, Integer, Integer, Integer> trunkPlacerParts(Instance<P> var0) {
@@ -43,48 +43,45 @@
       this.heightRandB = var3;
    }
 
    protected abstract TrunkPlacerType<?> type();
 
-   public abstract List<FoliagePlacer.FoliageAttachment> placeTrunk(LevelSimulatedRW var1, Random var2, int var3, BlockPos var4, Set<BlockPos> var5, BoundingBox var6, TreeConfiguration var7);
+   public abstract List<FoliagePlacer.FoliageAttachment> placeTrunk(LevelSimulatedReader var1, BiConsumer<BlockPos, BlockState> var2, Random var3, int var4, BlockPos var5, TreeConfiguration var6);
 
    public int getTreeHeight(Random var1) {
       return this.baseHeight + var1.nextInt(this.heightRandA + 1) + var1.nextInt(this.heightRandB + 1);
    }
 
-   protected static void setBlock(LevelWriter var0, BlockPos var1, BlockState var2, BoundingBox var3) {
-      TreeFeature.setBlockKnownShape(var0, var1, var2);
-      var3.expand(new BoundingBox(var1, var1));
-   }
-
    private static boolean isDirt(LevelSimulatedReader var0, BlockPos var1) {
       return var0.isStateAtPosition(var1, (var0x) -> {
-         Block var1 = var0x.getBlock();
-         return Feature.isDirt(var1) && !var0x.is(Blocks.GRASS_BLOCK) && !var0x.is(Blocks.MYCELIUM);
+         return Feature.isDirt(var0x) && !var0x.is(Blocks.GRASS_BLOCK) && !var0x.is(Blocks.MYCELIUM);
       });
    }
 
-   protected static void setDirtAt(LevelSimulatedRW var0, BlockPos var1) {
-      if (!isDirt(var0, var1)) {
-         TreeFeature.setBlockKnownShape(var0, var1, Blocks.DIRT.defaultBlockState());
+   protected static void setDirtAt(LevelSimulatedReader var0, BiConsumer<BlockPos, BlockState> var1, Random var2, BlockPos var3, TreeConfiguration var4) {
+      if (var4.forceDirt || !isDirt(var0, var3)) {
+         var1.accept(var3, var4.dirtProvider.getState(var2, var3));
       }
 
    }
 
-   protected static boolean placeLog(LevelSimulatedRW var0, Random var1, BlockPos var2, Set<BlockPos> var3, BoundingBox var4, TreeConfiguration var5) {
-      if (TreeFeature.validTreePos(var0, var2)) {
-         setBlock(var0, var2, var5.trunkProvider.getState(var1, var2), var4);
-         var3.add(var2.immutable());
+   protected static boolean placeLog(LevelSimulatedReader var0, BiConsumer<BlockPos, BlockState> var1, Random var2, BlockPos var3, TreeConfiguration var4) {
+      return placeLog(var0, var1, var2, var3, var4, Function.identity());
+   }
+
+   protected static boolean placeLog(LevelSimulatedReader var0, BiConsumer<BlockPos, BlockState> var1, Random var2, BlockPos var3, TreeConfiguration var4, Function<BlockState, BlockState> var5) {
+      if (TreeFeature.validTreePos(var0, var3)) {
+         var1.accept(var3, (BlockState)var5.apply(var4.trunkProvider.getState(var2, var3)));
          return true;
       } else {
          return false;
       }
    }
 
-   protected static void placeLogIfFree(LevelSimulatedRW var0, Random var1, BlockPos.MutableBlockPos var2, Set<BlockPos> var3, BoundingBox var4, TreeConfiguration var5) {
-      if (TreeFeature.isFree(var0, var2)) {
-         placeLog(var0, var1, var2, var3, var4, var5);
+   protected static void placeLogIfFree(LevelSimulatedReader var0, BiConsumer<BlockPos, BlockState> var1, Random var2, BlockPos.MutableBlockPos var3, TreeConfiguration var4) {
+      if (TreeFeature.isFree(var0, var3)) {
+         placeLog(var0, var1, var2, var3, var4);
       }
 
    }
 
    static {
