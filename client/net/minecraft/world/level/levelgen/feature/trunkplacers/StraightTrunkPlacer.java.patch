--- net/minecraft/world/level/levelgen/feature/trunkplacers/StraightTrunkPlacer.java
+++ net/minecraft/world/level/levelgen/feature/trunkplacers/StraightTrunkPlacer.java
@@ -3,16 +3,16 @@
 import com.google.common.collect.ImmutableList;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 import java.util.List;
 import java.util.Random;
-import java.util.Set;
+import java.util.function.BiConsumer;
 import net.minecraft.core.BlockPos;
-import net.minecraft.world.level.LevelSimulatedRW;
+import net.minecraft.world.level.LevelSimulatedReader;
+import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration;
 import net.minecraft.world.level.levelgen.feature.foliageplacers.FoliagePlacer;
-import net.minecraft.world.level.levelgen.structure.BoundingBox;
 
 public class StraightTrunkPlacer extends TrunkPlacer {
    public static final Codec<StraightTrunkPlacer> CODEC = RecordCodecBuilder.create((var0) -> {
       return trunkPlacerParts(var0).apply(var0, StraightTrunkPlacer::new);
    });
@@ -23,15 +23,15 @@
 
    protected TrunkPlacerType<?> type() {
       return TrunkPlacerType.STRAIGHT_TRUNK_PLACER;
    }
 
-   public List<FoliagePlacer.FoliageAttachment> placeTrunk(LevelSimulatedRW var1, Random var2, int var3, BlockPos var4, Set<BlockPos> var5, BoundingBox var6, TreeConfiguration var7) {
-      setDirtAt(var1, var4.below());
+   public List<FoliagePlacer.FoliageAttachment> placeTrunk(LevelSimulatedReader var1, BiConsumer<BlockPos, BlockState> var2, Random var3, int var4, BlockPos var5, TreeConfiguration var6) {
+      setDirtAt(var1, var2, var3, var5.below(), var6);
 
-      for(int var8 = 0; var8 < var3; ++var8) {
-         placeLog(var1, var2, var4.above(var8), var5, var6, var7);
+      for(int var7 = 0; var7 < var4; ++var7) {
+         placeLog(var1, var2, var3, var5.above(var7), var6);
       }
 
-      return ImmutableList.of(new FoliagePlacer.FoliageAttachment(var4.above(var3), 0, false));
+      return ImmutableList.of(new FoliagePlacer.FoliageAttachment(var5.above(var4), 0, false));
    }
 }
