--- net/minecraft/world/level/levelgen/feature/StructureFeature.java
+++ net/minecraft/world/level/levelgen/feature/StructureFeature.java
@@ -4,22 +4,25 @@
 import com.google.common.collect.HashBiMap;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Maps;
 import com.mojang.serialization.Codec;
+import com.mojang.serialization.DataResult;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Registry;
 import net.minecraft.core.RegistryAccess;
 import net.minecraft.core.SectionPos;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
+import net.minecraft.nbt.NbtOps;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.level.ChunkPos;
+import net.minecraft.world.level.LevelHeightAccessor;
 import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.StructureFeatureManager;
 import net.minecraft.world.level.biome.Biome;
 import net.minecraft.world.level.biome.BiomeSource;
 import net.minecraft.world.level.biome.MobSpawnSettings;
@@ -103,40 +106,48 @@
          StructureFeature var5 = (StructureFeature)Registry.STRUCTURE_FEATURE.get(new ResourceLocation(var4.toLowerCase(Locale.ROOT)));
          if (var5 == null) {
             LOGGER.error("Unknown feature id: {}", var4);
             return null;
          } else {
-            int var6 = var1.getInt("ChunkX");
-            int var7 = var1.getInt("ChunkZ");
-            int var8 = var1.getInt("references");
-            BoundingBox var9 = var1.contains("BB") ? new BoundingBox(var1.getIntArray("BB")) : BoundingBox.getUnknownBox();
-            ListTag var10 = var1.getList("Children", 10);
+            ChunkPos var6 = new ChunkPos(var1.getInt("ChunkX"), var1.getInt("ChunkZ"));
+            int var7 = var1.getInt("references");
+            BoundingBox var8;
+            if (var1.contains("BB")) {
+               DataResult var10000 = BoundingBox.CODEC.parse(NbtOps.INSTANCE, var1.get("BB"));
+               Logger var10001 = LOGGER;
+               var10001.getClass();
+               var8 = (BoundingBox)var10000.resultOrPartial(var10001::error).orElse(new BoundingBox(BlockPos.ZERO));
+            } else {
+               var8 = BoundingBox.getUnknownBox();
+            }
 
+            ListTag var9 = var1.getList("Children", 10);
+
             try {
-               StructureStart var11 = var5.createStart(var6, var7, var9, var8, var2);
+               StructureStart var10 = var5.createStart(var6, var8, var7, var2);
 
-               for(int var12 = 0; var12 < var10.size(); ++var12) {
-                  CompoundTag var13 = var10.getCompound(var12);
-                  String var14 = var13.getString("id").toLowerCase(Locale.ROOT);
-                  ResourceLocation var15 = new ResourceLocation(var14);
-                  ResourceLocation var16 = (ResourceLocation)RENAMES.getOrDefault(var15, var15);
-                  StructurePieceType var17 = (StructurePieceType)Registry.STRUCTURE_PIECE.get(var16);
-                  if (var17 == null) {
-                     LOGGER.error("Unknown structure piece id: {}", var16);
+               for(int var11 = 0; var11 < var9.size(); ++var11) {
+                  CompoundTag var12 = var9.getCompound(var11);
+                  String var13 = var12.getString("id").toLowerCase(Locale.ROOT);
+                  ResourceLocation var14 = new ResourceLocation(var13);
+                  ResourceLocation var15 = (ResourceLocation)RENAMES.getOrDefault(var14, var14);
+                  StructurePieceType var16 = (StructurePieceType)Registry.STRUCTURE_PIECE.get(var15);
+                  if (var16 == null) {
+                     LOGGER.error("Unknown structure piece id: {}", var15);
                   } else {
                      try {
-                        StructurePiece var18 = var17.load(var0, var13);
-                        var11.getPieces().add(var18);
-                     } catch (Exception var19) {
-                        LOGGER.error("Exception loading structure piece with id {}", var16, var19);
+                        StructurePiece var17 = var16.load(var0, var12);
+                        var10.getPieces().add(var17);
+                     } catch (Exception var18) {
+                        LOGGER.error("Exception loading structure piece with id {}", var15, var18);
                      }
                   }
                }
 
-               return var11;
-            } catch (Exception var20) {
-               LOGGER.error("Failed Start with id {}", var4, var20);
+               return var10;
+            } catch (Exception var19) {
+               LOGGER.error("Failed Start with id {}", var4, var19);
                return null;
             }
          }
       }
    }
@@ -150,12 +161,12 @@
    }
 
    @Nullable
    public BlockPos getNearestGeneratedFeature(LevelReader var1, StructureFeatureManager var2, BlockPos var3, int var4, boolean var5, long var6, StructureFeatureConfiguration var8) {
       int var9 = var8.spacing();
-      int var10 = var3.getX() >> 4;
-      int var11 = var3.getZ() >> 4;
+      int var10 = SectionPos.blockToSectionCoord(var3.getX());
+      int var11 = SectionPos.blockToSectionCoord(var3.getZ());
       int var12 = 0;
 
       for(WorldgenRandom var13 = new WorldgenRandom(); var12 <= var4; ++var12) {
          for(int var14 = -var12; var14 <= var12; ++var14) {
             boolean var15 = var14 == -var12 || var14 == var12;
@@ -164,20 +175,23 @@
                boolean var17 = var16 == -var12 || var16 == var12;
                if (var15 || var17) {
                   int var18 = var10 + var9 * var14;
                   int var19 = var11 + var9 * var16;
                   ChunkPos var20 = this.getPotentialFeatureChunk(var8, var6, var13, var18, var19);
-                  ChunkAccess var21 = var1.getChunk(var20.x, var20.z, ChunkStatus.STRUCTURE_STARTS);
-                  StructureStart var22 = var2.getStartForFeature(SectionPos.of(var21.getPos(), 0), this, var21);
-                  if (var22 != null && var22.isValid()) {
-                     if (var5 && var22.canBeReferenced()) {
-                        var22.addReference();
-                        return var22.getLocatePos();
-                     }
+                  boolean var21 = var1.getBiomeManager().getPrimaryBiomeAtChunk(var20).getGenerationSettings().isValidStart(this);
+                  if (var21) {
+                     ChunkAccess var22 = var1.getChunk(var20.x, var20.z, ChunkStatus.STRUCTURE_STARTS);
+                     StructureStart var23 = var2.getStartForFeature(SectionPos.bottomOf(var22), this, var22);
+                     if (var23 != null && var23.isValid()) {
+                        if (var5 && var23.canBeReferenced()) {
+                           var23.addReference();
+                           return var23.getLocatePos();
+                        }
 
-                     if (!var5) {
-                        return var22.getLocatePos();
+                        if (!var5) {
+                           return var23.getLocatePos();
+                        }
                      }
                   }
 
                   if (var12 == 0) {
                      break;
@@ -215,25 +229,25 @@
       }
 
       return new ChunkPos(var9 * var7 + var11, var10 * var7 + var12);
    }
 
-   protected boolean isFeatureChunk(ChunkGenerator var1, BiomeSource var2, long var3, WorldgenRandom var5, int var6, int var7, Biome var8, ChunkPos var9, C var10) {
+   protected boolean isFeatureChunk(ChunkGenerator var1, BiomeSource var2, long var3, WorldgenRandom var5, ChunkPos var6, Biome var7, ChunkPos var8, C var9, LevelHeightAccessor var10) {
       return true;
    }
 
-   private StructureStart<C> createStart(int var1, int var2, BoundingBox var3, int var4, long var5) {
-      return this.getStartFactory().create(this, var1, var2, var3, var4, var5);
+   private StructureStart<C> createStart(ChunkPos var1, BoundingBox var2, int var3, long var4) {
+      return this.getStartFactory().create(this, var1, var2, var3, var4);
    }
 
-   public StructureStart<?> generate(RegistryAccess var1, ChunkGenerator var2, BiomeSource var3, StructureManager var4, long var5, ChunkPos var7, Biome var8, int var9, WorldgenRandom var10, StructureFeatureConfiguration var11, C var12) {
-      ChunkPos var13 = this.getPotentialFeatureChunk(var11, var5, var10, var7.x, var7.z);
-      if (var7.x == var13.x && var7.z == var13.z && this.isFeatureChunk(var2, var3, var5, var10, var7.x, var7.z, var8, var13, var12)) {
-         StructureStart var14 = this.createStart(var7.x, var7.z, BoundingBox.getUnknownBox(), var9, var5);
-         var14.generatePieces(var1, var2, var4, var7.x, var7.z, var8, var12);
-         if (var14.isValid()) {
-            return var14;
+   public StructureStart<?> generate(RegistryAccess var1, ChunkGenerator var2, BiomeSource var3, StructureManager var4, long var5, ChunkPos var7, Biome var8, int var9, WorldgenRandom var10, StructureFeatureConfiguration var11, C var12, LevelHeightAccessor var13) {
+      ChunkPos var14 = this.getPotentialFeatureChunk(var11, var5, var10, var7.x, var7.z);
+      if (var7.x == var14.x && var7.z == var14.z && this.isFeatureChunk(var2, var3, var5, var10, var7, var8, var14, var12, var13)) {
+         StructureStart var15 = this.createStart(var7, BoundingBox.getUnknownBox(), var9, var5);
+         var15.generatePieces(var1, var2, var4, var7, var8, var12, var13);
+         if (var15.isValid()) {
+            return var15;
          }
       }
 
       return StructureStart.INVALID_START;
    }
@@ -269,14 +283,14 @@
       END_CITY = register("EndCity", new EndCityFeature(NoneFeatureConfiguration.CODEC), GenerationStep.Decoration.SURFACE_STRUCTURES);
       BURIED_TREASURE = register("Buried_Treasure", new BuriedTreasureFeature(ProbabilityFeatureConfiguration.CODEC), GenerationStep.Decoration.UNDERGROUND_STRUCTURES);
       VILLAGE = register("Village", new VillageFeature(JigsawConfiguration.CODEC), GenerationStep.Decoration.SURFACE_STRUCTURES);
       NETHER_FOSSIL = register("Nether_Fossil", new NetherFossilFeature(NoneFeatureConfiguration.CODEC), GenerationStep.Decoration.UNDERGROUND_DECORATION);
       BASTION_REMNANT = register("Bastion_Remnant", new BastionFeature(JigsawConfiguration.CODEC), GenerationStep.Decoration.SURFACE_STRUCTURES);
-      NOISE_AFFECTING_FEATURES = ImmutableList.of(PILLAGER_OUTPOST, VILLAGE, NETHER_FOSSIL);
+      NOISE_AFFECTING_FEATURES = ImmutableList.of(PILLAGER_OUTPOST, VILLAGE, NETHER_FOSSIL, STRONGHOLD);
       JIGSAW_RENAME = new ResourceLocation("jigsaw");
       RENAMES = ImmutableMap.builder().put(new ResourceLocation("nvi"), JIGSAW_RENAME).put(new ResourceLocation("pcp"), JIGSAW_RENAME).put(new ResourceLocation("bastionremnant"), JIGSAW_RENAME).put(new ResourceLocation("runtime"), JIGSAW_RENAME).build();
    }
 
    public interface StructureStartFactory<C extends FeatureConfiguration> {
-      StructureStart<C> create(StructureFeature<C> var1, int var2, int var3, BoundingBox var4, int var5, long var6);
+      StructureStart<C> create(StructureFeature<C> var1, ChunkPos var2, BoundingBox var3, int var4, long var5);
    }
 }
