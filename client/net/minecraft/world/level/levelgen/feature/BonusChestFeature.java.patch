--- net/minecraft/world/level/levelgen/feature/BonusChestFeature.java
+++ net/minecraft/world/level/levelgen/feature/BonusChestFeature.java
@@ -12,48 +12,49 @@
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.WorldGenLevel;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.entity.RandomizableContainerBlockEntity;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.chunk.ChunkGenerator;
 import net.minecraft.world.level.levelgen.Heightmap;
 import net.minecraft.world.level.levelgen.feature.configurations.NoneFeatureConfiguration;
 import net.minecraft.world.level.storage.loot.BuiltInLootTables;
 
 public class BonusChestFeature extends Feature<NoneFeatureConfiguration> {
    public BonusChestFeature(Codec<NoneFeatureConfiguration> var1) {
       super(var1);
    }
 
-   public boolean place(WorldGenLevel var1, ChunkGenerator var2, Random var3, BlockPos var4, NoneFeatureConfiguration var5) {
-      ChunkPos var6 = new ChunkPos(var4);
-      List var7 = (List)IntStream.rangeClosed(var6.getMinBlockX(), var6.getMaxBlockX()).boxed().collect(Collectors.toList());
-      Collections.shuffle(var7, var3);
-      List var8 = (List)IntStream.rangeClosed(var6.getMinBlockZ(), var6.getMaxBlockZ()).boxed().collect(Collectors.toList());
-      Collections.shuffle(var8, var3);
-      BlockPos.MutableBlockPos var9 = new BlockPos.MutableBlockPos();
-      Iterator var10 = var7.iterator();
+   public boolean place(FeaturePlaceContext<NoneFeatureConfiguration> var1) {
+      Random var2 = var1.random();
+      WorldGenLevel var3 = var1.level();
+      ChunkPos var4 = new ChunkPos(var1.origin());
+      List var5 = (List)IntStream.rangeClosed(var4.getMinBlockX(), var4.getMaxBlockX()).boxed().collect(Collectors.toList());
+      Collections.shuffle(var5, var2);
+      List var6 = (List)IntStream.rangeClosed(var4.getMinBlockZ(), var4.getMaxBlockZ()).boxed().collect(Collectors.toList());
+      Collections.shuffle(var6, var2);
+      BlockPos.MutableBlockPos var7 = new BlockPos.MutableBlockPos();
+      Iterator var8 = var5.iterator();
 
-      while(var10.hasNext()) {
-         Integer var11 = (Integer)var10.next();
-         Iterator var12 = var8.iterator();
+      while(var8.hasNext()) {
+         Integer var9 = (Integer)var8.next();
+         Iterator var10 = var6.iterator();
 
-         while(var12.hasNext()) {
-            Integer var13 = (Integer)var12.next();
-            var9.set(var11, 0, var13);
-            BlockPos var14 = var1.getHeightmapPos(Heightmap.Types.MOTION_BLOCKING_NO_LEAVES, var9);
-            if (var1.isEmptyBlock(var14) || var1.getBlockState(var14).getCollisionShape(var1, var14).isEmpty()) {
-               var1.setBlock(var14, Blocks.CHEST.defaultBlockState(), 2);
-               RandomizableContainerBlockEntity.setLootTable(var1, var3, var14, BuiltInLootTables.SPAWN_BONUS_CHEST);
-               BlockState var15 = Blocks.TORCH.defaultBlockState();
-               Iterator var16 = Direction.Plane.HORIZONTAL.iterator();
+         while(var10.hasNext()) {
+            Integer var11 = (Integer)var10.next();
+            var7.set(var9, 0, var11);
+            BlockPos var12 = var3.getHeightmapPos(Heightmap.Types.MOTION_BLOCKING_NO_LEAVES, var7);
+            if (var3.isEmptyBlock(var12) || var3.getBlockState(var12).getCollisionShape(var3, var12).isEmpty()) {
+               var3.setBlock(var12, Blocks.CHEST.defaultBlockState(), 2);
+               RandomizableContainerBlockEntity.setLootTable(var3, var2, var12, BuiltInLootTables.SPAWN_BONUS_CHEST);
+               BlockState var13 = Blocks.TORCH.defaultBlockState();
+               Iterator var14 = Direction.Plane.HORIZONTAL.iterator();
 
-               while(var16.hasNext()) {
-                  Direction var17 = (Direction)var16.next();
-                  BlockPos var18 = var14.relative(var17);
-                  if (var15.canSurvive(var1, var18)) {
-                     var1.setBlock(var18, var15, 2);
+               while(var14.hasNext()) {
+                  Direction var15 = (Direction)var14.next();
+                  BlockPos var16 = var12.relative(var15);
+                  if (var13.canSurvive(var3, var16)) {
+                     var3.setBlock(var16, var13, 2);
                   }
                }
 
                return true;
             }
