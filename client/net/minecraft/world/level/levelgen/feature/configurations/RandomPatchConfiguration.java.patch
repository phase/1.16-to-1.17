--- net/minecraft/world/level/levelgen/feature/configurations/RandomPatchConfiguration.java
+++ net/minecraft/world/level/levelgen/feature/configurations/RandomPatchConfiguration.java
@@ -5,10 +5,11 @@
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 import java.util.List;
 import java.util.Set;
 import java.util.stream.Collectors;
+import net.minecraft.util.ExtraCodecs;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.levelgen.feature.blockplacers.BlockPlacer;
 import net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider;
@@ -21,17 +22,17 @@
          return var0x.blockPlacer;
       }), BlockState.CODEC.listOf().fieldOf("whitelist").forGetter((var0x) -> {
          return (List)var0x.whitelist.stream().map(Block::defaultBlockState).collect(Collectors.toList());
       }), BlockState.CODEC.listOf().fieldOf("blacklist").forGetter((var0x) -> {
          return ImmutableList.copyOf(var0x.blacklist);
-      }), Codec.INT.fieldOf("tries").orElse(128).forGetter((var0x) -> {
+      }), ExtraCodecs.POSITIVE_INT.fieldOf("tries").orElse(128).forGetter((var0x) -> {
          return var0x.tries;
-      }), Codec.INT.fieldOf("xspread").orElse(7).forGetter((var0x) -> {
+      }), ExtraCodecs.NON_NEGATIVE_INT.fieldOf("xspread").orElse(7).forGetter((var0x) -> {
          return var0x.xspread;
-      }), Codec.INT.fieldOf("yspread").orElse(3).forGetter((var0x) -> {
+      }), ExtraCodecs.NON_NEGATIVE_INT.fieldOf("yspread").orElse(3).forGetter((var0x) -> {
          return var0x.yspread;
-      }), Codec.INT.fieldOf("zspread").orElse(7).forGetter((var0x) -> {
+      }), ExtraCodecs.NON_NEGATIVE_INT.fieldOf("zspread").orElse(7).forGetter((var0x) -> {
          return var0x.zspread;
       }), Codec.BOOL.fieldOf("can_replace").orElse(false).forGetter((var0x) -> {
          return var0x.canReplace;
       }), Codec.BOOL.fieldOf("project").orElse(true).forGetter((var0x) -> {
          return var0x.project;
@@ -53,11 +54,11 @@
 
    private RandomPatchConfiguration(BlockStateProvider var1, BlockPlacer var2, List<BlockState> var3, List<BlockState> var4, int var5, int var6, int var7, int var8, boolean var9, boolean var10, boolean var11) {
       this(var1, var2, (Set)((Set)var3.stream().map(BlockBehaviour.BlockStateBase::getBlock).collect(Collectors.toSet())), (Set)ImmutableSet.copyOf(var4), var5, var6, var7, var8, var9, var10, var11);
    }
 
-   private RandomPatchConfiguration(BlockStateProvider var1, BlockPlacer var2, Set<Block> var3, Set<BlockState> var4, int var5, int var6, int var7, int var8, boolean var9, boolean var10, boolean var11) {
+   RandomPatchConfiguration(BlockStateProvider var1, BlockPlacer var2, Set<Block> var3, Set<BlockState> var4, int var5, int var6, int var7, int var8, boolean var9, boolean var10, boolean var11) {
       this.stateProvider = var1;
       this.blockPlacer = var2;
       this.whitelist = var3;
       this.blacklist = var4;
       this.tries = var5;
@@ -78,11 +79,11 @@
       private int xspread = 7;
       private int yspread = 3;
       private int zspread = 7;
       private boolean canReplace;
       private boolean project = true;
-      private boolean needWater = false;
+      private boolean needWater;
 
       public GrassConfigurationBuilder(BlockStateProvider var1, BlockPlacer var2) {
          this.stateProvider = var1;
          this.blockPlacer = var2;
       }
