--- net/minecraft/world/level/levelgen/feature/RuinedPortalFeature.java
+++ net/minecraft/world/level/levelgen/feature/RuinedPortalFeature.java
@@ -11,13 +11,14 @@
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.RegistryAccess;
 import net.minecraft.core.Vec3i;
 import net.minecraft.resources.ResourceLocation;
+import net.minecraft.util.Mth;
 import net.minecraft.util.StringRepresentable;
-import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.ChunkPos;
+import net.minecraft.world.level.NoiseColumn;
 import net.minecraft.world.level.biome.Biome;
 import net.minecraft.world.level.block.Mirror;
 import net.minecraft.world.level.block.Rotation;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.chunk.ChunkGenerator;
@@ -47,26 +48,26 @@
 
    private static int findSuitableY(Random var0, ChunkGenerator var1, RuinedPortalPiece.VerticalPlacement var2, boolean var3, int var4, int var5, BoundingBox var6) {
       int var7;
       if (var2 == RuinedPortalPiece.VerticalPlacement.IN_NETHER) {
          if (var3) {
-            var7 = randomIntInclusive(var0, 32, 100);
+            var7 = Mth.randomBetweenInclusive(var0, 32, 100);
          } else if (var0.nextFloat() < 0.5F) {
-            var7 = randomIntInclusive(var0, 27, 29);
+            var7 = Mth.randomBetweenInclusive(var0, 27, 29);
          } else {
-            var7 = randomIntInclusive(var0, 29, 100);
+            var7 = Mth.randomBetweenInclusive(var0, 29, 100);
          }
       } else {
          int var8;
          if (var2 == RuinedPortalPiece.VerticalPlacement.IN_MOUNTAIN) {
             var8 = var4 - var5;
             var7 = getRandomWithinInterval(var0, 70, var8);
          } else if (var2 == RuinedPortalPiece.VerticalPlacement.UNDERGROUND) {
             var8 = var4 - var5;
             var7 = getRandomWithinInterval(var0, 15, var8);
          } else if (var2 == RuinedPortalPiece.VerticalPlacement.PARTLY_BURIED) {
-            var7 = var4 - var5 + randomIntInclusive(var0, 2, 8);
+            var7 = var4 - var5 + Mth.randomBetweenInclusive(var0, 2, 8);
          } else {
             var7 = var4;
          }
       }
 
@@ -82,11 +83,11 @@
          int var13 = 0;
          var11.set(0, var12, 0);
          Iterator var14 = var9.iterator();
 
          while(var14.hasNext()) {
-            BlockGetter var15 = (BlockGetter)var14.next();
+            NoiseColumn var15 = (NoiseColumn)var14.next();
             BlockState var16 = var15.getBlockState(var11);
             if (var16 != null && var10.isOpaque().test(var16)) {
                ++var13;
                if (var13 == 3) {
                   return var12;
@@ -96,16 +97,12 @@
       }
 
       return var12;
    }
 
-   private static int randomIntInclusive(Random var0, int var1, int var2) {
-      return var0.nextInt(var2 - var1 + 1) + var1;
-   }
-
    private static int getRandomWithinInterval(Random var0, int var1, int var2) {
-      return var1 < var2 ? randomIntInclusive(var0, var1, var2) : var2;
+      return var1 < var2 ? Mth.randomBetweenInclusive(var0, var1, var2) : var2;
    }
 
    public static enum Type implements StringRepresentable {
       STANDARD("standard"),
       DESERT("desert"),
