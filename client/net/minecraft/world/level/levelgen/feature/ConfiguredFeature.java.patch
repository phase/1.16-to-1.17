--- net/minecraft/world/level/levelgen/feature/ConfiguredFeature.java
+++ net/minecraft/world/level/levelgen/feature/ConfiguredFeature.java
@@ -1,14 +1,17 @@
 package net.minecraft.world.level.levelgen.feature;
 
 import com.mojang.serialization.Codec;
+import com.mojang.serialization.JsonOps;
 import java.util.List;
+import java.util.Objects;
 import java.util.Random;
 import java.util.function.Supplier;
 import java.util.stream.Stream;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Registry;
+import net.minecraft.data.BuiltinRegistries;
 import net.minecraft.resources.RegistryFileCodec;
 import net.minecraft.world.level.WorldGenLevel;
 import net.minecraft.world.level.chunk.ChunkGenerator;
 import net.minecraft.world.level.levelgen.Decoratable;
 import net.minecraft.world.level.levelgen.feature.configurations.DecoratedFeatureConfiguration;
@@ -47,17 +50,23 @@
    public WeightedConfiguredFeature weighted(float var1) {
       return new WeightedConfiguredFeature(this, var1);
    }
 
    public boolean place(WorldGenLevel var1, ChunkGenerator var2, Random var3, BlockPos var4) {
-      return this.feature.place(var1, var2, var3, var4, this.config);
+      return this.feature.place(new FeaturePlaceContext(var1, var2, var3, var4, this.config));
    }
 
    public Stream<ConfiguredFeature<?, ?>> getFeatures() {
       return Stream.concat(Stream.of(this), this.config.getFeatures());
    }
 
+   public String toString() {
+      return (String)BuiltinRegistries.CONFIGURED_FEATURE.getResourceKey(this).map(Objects::toString).orElseGet(() -> {
+         return DIRECT_CODEC.encodeStart(JsonOps.INSTANCE, this).toString();
+      });
+   }
+
    static {
       DIRECT_CODEC = Registry.FEATURE.dispatch((var0) -> {
          return var0.feature;
       }, Feature::configuredCodec);
       CODEC = RegistryFileCodec.create(Registry.CONFIGURED_FEATURE_REGISTRY, DIRECT_CODEC);
