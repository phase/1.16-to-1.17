--- net/minecraft/world/level/levelgen/feature/Feature.java
+++ net/minecraft/world/level/levelgen/feature/Feature.java
@@ -1,43 +1,52 @@
 package net.minecraft.world.level.levelgen.feature;
 
 import com.mojang.serialization.Codec;
-import java.util.Random;
+import java.util.function.Function;
+import java.util.function.Predicate;
 import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
 import net.minecraft.core.Registry;
+import net.minecraft.tags.BlockTags;
 import net.minecraft.world.level.LevelSimulatedReader;
 import net.minecraft.world.level.LevelWriter;
-import net.minecraft.world.level.WorldGenLevel;
-import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.chunk.ChunkGenerator;
 import net.minecraft.world.level.levelgen.feature.configurations.BlockPileConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.BlockStateConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.ColumnFeatureConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.CountConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.DecoratedFeatureConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.DeltaFeatureConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.DiskConfiguration;
+import net.minecraft.world.level.levelgen.feature.configurations.DripstoneClusterConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.EndGatewayConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
+import net.minecraft.world.level.levelgen.feature.configurations.GeodeConfiguration;
+import net.minecraft.world.level.levelgen.feature.configurations.GlowLichenConfiguration;
+import net.minecraft.world.level.levelgen.feature.configurations.GrowingPlantConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.HugeMushroomFeatureConfiguration;
+import net.minecraft.world.level.levelgen.feature.configurations.LargeDripstoneConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.LayerConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.NoneFeatureConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.OreConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.ProbabilityFeatureConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.RandomBooleanFeatureConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.RandomFeatureConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.ReplaceBlockConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.ReplaceSphereConfiguration;
+import net.minecraft.world.level.levelgen.feature.configurations.RootSystemConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.SimpleBlockConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.SimpleRandomFeatureConfiguration;
+import net.minecraft.world.level.levelgen.feature.configurations.SmallDripstoneConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.SpikeConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.SpringConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration;
+import net.minecraft.world.level.levelgen.feature.configurations.UnderwaterMagmaConfiguration;
+import net.minecraft.world.level.levelgen.feature.configurations.VegetationPatchConfiguration;
 
 public abstract class Feature<FC extends FeatureConfiguration> {
    public static final Feature<NoneFeatureConfiguration> NO_OP;
    public static final Feature<TreeConfiguration> TREE;
    public static final AbstractFlowerFeature<RandomPatchConfiguration> FLOWER;
@@ -47,17 +56,23 @@
    public static final Feature<SpringConfiguration> SPRING;
    public static final Feature<NoneFeatureConfiguration> CHORUS_PLANT;
    public static final Feature<ReplaceBlockConfiguration> EMERALD_ORE;
    public static final Feature<NoneFeatureConfiguration> VOID_START_PLATFORM;
    public static final Feature<NoneFeatureConfiguration> DESERT_WELL;
-   public static final Feature<NoneFeatureConfiguration> FOSSIL;
+   public static final Feature<FossilFeatureConfiguration> FOSSIL;
    public static final Feature<HugeMushroomFeatureConfiguration> HUGE_RED_MUSHROOM;
    public static final Feature<HugeMushroomFeatureConfiguration> HUGE_BROWN_MUSHROOM;
    public static final Feature<NoneFeatureConfiguration> ICE_SPIKE;
    public static final Feature<NoneFeatureConfiguration> GLOWSTONE_BLOB;
    public static final Feature<NoneFeatureConfiguration> FREEZE_TOP_LAYER;
    public static final Feature<NoneFeatureConfiguration> VINES;
+   public static final Feature<GrowingPlantConfiguration> GROWING_PLANT;
+   public static final Feature<VegetationPatchConfiguration> VEGETATION_PATCH;
+   public static final Feature<VegetationPatchConfiguration> WATERLOGGED_VEGETATION_PATCH;
+   public static final Feature<RootSystemConfiguration> ROOT_SYSTEM;
+   public static final Feature<GlowLichenConfiguration> GLOW_LICHEN;
+   public static final Feature<UnderwaterMagmaConfiguration> UNDERWATER_MAGMA;
    public static final Feature<NoneFeatureConfiguration> MONSTER_ROOM;
    public static final Feature<NoneFeatureConfiguration> BLUE_ICE;
    public static final Feature<BlockStateConfiguration> ICEBERG;
    public static final Feature<BlockStateConfiguration> FOREST_ROCK;
    public static final Feature<DiskConfiguration> DISK;
@@ -83,15 +98,19 @@
    public static final Feature<DeltaFeatureConfiguration> DELTA_FEATURE;
    public static final Feature<ReplaceSphereConfiguration> REPLACE_BLOBS;
    public static final Feature<LayerConfiguration> FILL_LAYER;
    public static final BonusChestFeature BONUS_CHEST;
    public static final Feature<NoneFeatureConfiguration> BASALT_PILLAR;
-   public static final Feature<OreConfiguration> NO_SURFACE_ORE;
+   public static final Feature<OreConfiguration> SCATTERED_ORE;
    public static final Feature<RandomFeatureConfiguration> RANDOM_SELECTOR;
    public static final Feature<SimpleRandomFeatureConfiguration> SIMPLE_RANDOM_SELECTOR;
    public static final Feature<RandomBooleanFeatureConfiguration> RANDOM_BOOLEAN_SELECTOR;
    public static final Feature<DecoratedFeatureConfiguration> DECORATED;
+   public static final Feature<GeodeConfiguration> GEODE;
+   public static final Feature<DripstoneClusterConfiguration> DRIPSTONE_CLUSTER;
+   public static final Feature<LargeDripstoneConfiguration> LARGE_DRIPSTONE;
+   public static final Feature<SmallDripstoneConfiguration> SMALL_DRIPSTONE;
    private final Codec<ConfiguredFeature<FC, Feature<FC>>> configuredCodec;
 
    private static <C extends FeatureConfiguration, F extends Feature<C>> F register(String var0, F var1) {
       return (Feature)Registry.register(Registry.FEATURE, (String)var0, var1);
    }
@@ -114,30 +133,48 @@
 
    protected void setBlock(LevelWriter var1, BlockPos var2, BlockState var3) {
       var1.setBlock(var2, var3, 3);
    }
 
-   public abstract boolean place(WorldGenLevel var1, ChunkGenerator var2, Random var3, BlockPos var4, FC var5);
+   public abstract boolean place(FeaturePlaceContext<FC> var1);
 
-   protected static boolean isStone(Block var0) {
-      return var0 == Blocks.STONE || var0 == Blocks.GRANITE || var0 == Blocks.DIORITE || var0 == Blocks.ANDESITE;
+   protected static boolean isStone(BlockState var0) {
+      return var0.is(BlockTags.BASE_STONE_OVERWORLD);
    }
 
-   public static boolean isDirt(Block var0) {
-      return var0 == Blocks.DIRT || var0 == Blocks.GRASS_BLOCK || var0 == Blocks.PODZOL || var0 == Blocks.COARSE_DIRT || var0 == Blocks.MYCELIUM;
+   public static boolean isDirt(BlockState var0) {
+      return var0.is(Blocks.DIRT) || var0.is(Blocks.GRASS_BLOCK) || var0.is(Blocks.PODZOL) || var0.is(Blocks.COARSE_DIRT) || var0.is(Blocks.MYCELIUM) || var0.is(Blocks.ROOTED_DIRT);
    }
 
    public static boolean isGrassOrDirt(LevelSimulatedReader var0, BlockPos var1) {
-      return var0.isStateAtPosition(var1, (var0x) -> {
-         return isDirt(var0x.getBlock());
-      });
+      return var0.isStateAtPosition(var1, Feature::isDirt);
    }
 
    public static boolean isAir(LevelSimulatedReader var0, BlockPos var1) {
       return var0.isStateAtPosition(var1, BlockBehaviour.BlockStateBase::isAir);
    }
 
+   public static boolean checkNeighbors(Function<BlockPos, BlockState> var0, BlockPos var1, Predicate<BlockState> var2) {
+      BlockPos.MutableBlockPos var3 = new BlockPos.MutableBlockPos();
+      Direction[] var4 = Direction.values();
+      int var5 = var4.length;
+
+      for(int var6 = 0; var6 < var5; ++var6) {
+         Direction var7 = var4[var6];
+         var3.setWithOffset(var1, (Direction)var7);
+         if (var2.test(var0.apply(var3))) {
+            return true;
+         }
+      }
+
+      return false;
+   }
+
+   public static boolean isAdjacentToAir(Function<BlockPos, BlockState> var0, BlockPos var1) {
+      return checkNeighbors(var0, var1, BlockBehaviour.BlockStateBase::isAir);
+   }
+
    static {
       NO_OP = register("no_op", new NoOpFeature(NoneFeatureConfiguration.CODEC));
       TREE = register("tree", new TreeFeature(TreeConfiguration.CODEC));
       FLOWER = (AbstractFlowerFeature)register("flower", new DefaultFlowerFeature(RandomPatchConfiguration.CODEC));
       NO_BONEMEAL_FLOWER = (AbstractFlowerFeature)register("no_bonemeal_flower", new DefaultFlowerFeature(RandomPatchConfiguration.CODEC));
@@ -146,17 +183,23 @@
       SPRING = register("spring_feature", new SpringFeature(SpringConfiguration.CODEC));
       CHORUS_PLANT = register("chorus_plant", new ChorusPlantFeature(NoneFeatureConfiguration.CODEC));
       EMERALD_ORE = register("emerald_ore", new ReplaceBlockFeature(ReplaceBlockConfiguration.CODEC));
       VOID_START_PLATFORM = register("void_start_platform", new VoidStartPlatformFeature(NoneFeatureConfiguration.CODEC));
       DESERT_WELL = register("desert_well", new DesertWellFeature(NoneFeatureConfiguration.CODEC));
-      FOSSIL = register("fossil", new FossilFeature(NoneFeatureConfiguration.CODEC));
+      FOSSIL = register("fossil", new FossilFeature(FossilFeatureConfiguration.CODEC));
       HUGE_RED_MUSHROOM = register("huge_red_mushroom", new HugeRedMushroomFeature(HugeMushroomFeatureConfiguration.CODEC));
       HUGE_BROWN_MUSHROOM = register("huge_brown_mushroom", new HugeBrownMushroomFeature(HugeMushroomFeatureConfiguration.CODEC));
       ICE_SPIKE = register("ice_spike", new IceSpikeFeature(NoneFeatureConfiguration.CODEC));
       GLOWSTONE_BLOB = register("glowstone_blob", new GlowstoneFeature(NoneFeatureConfiguration.CODEC));
       FREEZE_TOP_LAYER = register("freeze_top_layer", new SnowAndFreezeFeature(NoneFeatureConfiguration.CODEC));
       VINES = register("vines", new VinesFeature(NoneFeatureConfiguration.CODEC));
+      GROWING_PLANT = register("growing_plant", new GrowingPlantFeature(GrowingPlantConfiguration.CODEC));
+      VEGETATION_PATCH = register("vegetation_patch", new VegetationPatchFeature(VegetationPatchConfiguration.CODEC));
+      WATERLOGGED_VEGETATION_PATCH = register("waterlogged_vegetation_patch", new WaterloggedVegetationPatchFeature(VegetationPatchConfiguration.CODEC));
+      ROOT_SYSTEM = register("root_system", new RootSystemFeature(RootSystemConfiguration.CODEC));
+      GLOW_LICHEN = register("glow_lichen", new GlowLichenFeature(GlowLichenConfiguration.CODEC));
+      UNDERWATER_MAGMA = register("underwater_magma", new UnderwaterMagmaFeature(UnderwaterMagmaConfiguration.CODEC));
       MONSTER_ROOM = register("monster_room", new MonsterRoomFeature(NoneFeatureConfiguration.CODEC));
       BLUE_ICE = register("blue_ice", new BlueIceFeature(NoneFeatureConfiguration.CODEC));
       ICEBERG = register("iceberg", new IcebergFeature(BlockStateConfiguration.CODEC));
       FOREST_ROCK = register("forest_rock", new BlockBlobFeature(BlockStateConfiguration.CODEC));
       DISK = register("disk", new DiskReplaceFeature(DiskConfiguration.CODEC));
@@ -182,12 +225,16 @@
       DELTA_FEATURE = register("delta_feature", new DeltaFeature(DeltaFeatureConfiguration.CODEC));
       REPLACE_BLOBS = register("netherrack_replace_blobs", new ReplaceBlobsFeature(ReplaceSphereConfiguration.CODEC));
       FILL_LAYER = register("fill_layer", new FillLayerFeature(LayerConfiguration.CODEC));
       BONUS_CHEST = (BonusChestFeature)register("bonus_chest", new BonusChestFeature(NoneFeatureConfiguration.CODEC));
       BASALT_PILLAR = register("basalt_pillar", new BasaltPillarFeature(NoneFeatureConfiguration.CODEC));
-      NO_SURFACE_ORE = register("no_surface_ore", new NoSurfaceOreFeature(OreConfiguration.CODEC));
+      SCATTERED_ORE = register("scattered_ore", new ScatteredOreFeature(OreConfiguration.CODEC));
       RANDOM_SELECTOR = register("random_selector", new RandomSelectorFeature(RandomFeatureConfiguration.CODEC));
       SIMPLE_RANDOM_SELECTOR = register("simple_random_selector", new SimpleRandomSelectorFeature(SimpleRandomFeatureConfiguration.CODEC));
       RANDOM_BOOLEAN_SELECTOR = register("random_boolean_selector", new RandomBooleanSelectorFeature(RandomBooleanFeatureConfiguration.CODEC));
       DECORATED = register("decorated", new DecoratedFeature(DecoratedFeatureConfiguration.CODEC));
+      GEODE = register("geode", new GeodeFeature(GeodeConfiguration.CODEC));
+      DRIPSTONE_CLUSTER = register("dripstone_cluster", new DripstoneClusterFeature(DripstoneClusterConfiguration.CODEC));
+      LARGE_DRIPSTONE = register("large_dripstone", new LargeDripstoneFeature(LargeDripstoneConfiguration.CODEC));
+      SMALL_DRIPSTONE = register("small_dripstone", new SmallDripstoneFeature(SmallDripstoneConfiguration.CODEC));
    }
 }
