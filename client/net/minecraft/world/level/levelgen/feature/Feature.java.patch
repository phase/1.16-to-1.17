--- net/minecraft/world/level/levelgen/feature/Feature.java
+++ net/minecraft/world/level/levelgen/feature/Feature.java
@@ -5,11 +5,10 @@
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Registry;
 import net.minecraft.world.level.LevelSimulatedReader;
 import net.minecraft.world.level.LevelWriter;
 import net.minecraft.world.level.WorldGenLevel;
-import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.chunk.ChunkGenerator;
 import net.minecraft.world.level.levelgen.feature.configurations.BlockPileConfiguration;
@@ -19,10 +18,11 @@
 import net.minecraft.world.level.levelgen.feature.configurations.DecoratedFeatureConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.DeltaFeatureConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.DiskConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.EndGatewayConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
+import net.minecraft.world.level.levelgen.feature.configurations.GeodeConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.HugeMushroomFeatureConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.LayerConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.NoneFeatureConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.OreConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.ProbabilityFeatureConfiguration;
@@ -88,10 +88,11 @@
    public static final Feature<OreConfiguration> NO_SURFACE_ORE;
    public static final Feature<RandomFeatureConfiguration> RANDOM_SELECTOR;
    public static final Feature<SimpleRandomFeatureConfiguration> SIMPLE_RANDOM_SELECTOR;
    public static final Feature<RandomBooleanFeatureConfiguration> RANDOM_BOOLEAN_SELECTOR;
    public static final Feature<DecoratedFeatureConfiguration> DECORATED;
+   public static final Feature<GeodeConfiguration> GEODE;
    private final Codec<ConfiguredFeature<FC, Feature<FC>>> configuredCodec;
 
    private static <C extends FeatureConfiguration, F extends Feature<C>> F register(String var0, F var1) {
       return (Feature)Registry.register(Registry.FEATURE, (String)var0, var1);
    }
@@ -116,22 +117,20 @@
       var1.setBlock(var2, var3, 3);
    }
 
    public abstract boolean place(WorldGenLevel var1, ChunkGenerator var2, Random var3, BlockPos var4, FC var5);
 
-   protected static boolean isStone(Block var0) {
-      return var0 == Blocks.STONE || var0 == Blocks.GRANITE || var0 == Blocks.DIORITE || var0 == Blocks.ANDESITE;
+   protected static boolean isStone(BlockState var0) {
+      return var0.is(Blocks.STONE) || var0.is(Blocks.GRANITE) || var0.is(Blocks.DIORITE) || var0.is(Blocks.ANDESITE);
    }
 
-   public static boolean isDirt(Block var0) {
-      return var0 == Blocks.DIRT || var0 == Blocks.GRASS_BLOCK || var0 == Blocks.PODZOL || var0 == Blocks.COARSE_DIRT || var0 == Blocks.MYCELIUM;
+   public static boolean isDirt(BlockState var0) {
+      return var0.is(Blocks.DIRT) || var0.is(Blocks.GRASS_BLOCK) || var0.is(Blocks.PODZOL) || var0.is(Blocks.COARSE_DIRT) || var0.is(Blocks.MYCELIUM);
    }
 
    public static boolean isGrassOrDirt(LevelSimulatedReader var0, BlockPos var1) {
-      return var0.isStateAtPosition(var1, (var0x) -> {
-         return isDirt(var0x.getBlock());
-      });
+      return var0.isStateAtPosition(var1, Feature::isDirt);
    }
 
    public static boolean isAir(LevelSimulatedReader var0, BlockPos var1) {
       return var0.isStateAtPosition(var1, BlockBehaviour.BlockStateBase::isAir);
    }
@@ -187,7 +186,8 @@
       NO_SURFACE_ORE = register("no_surface_ore", new NoSurfaceOreFeature(OreConfiguration.CODEC));
       RANDOM_SELECTOR = register("random_selector", new RandomSelectorFeature(RandomFeatureConfiguration.CODEC));
       SIMPLE_RANDOM_SELECTOR = register("simple_random_selector", new SimpleRandomSelectorFeature(SimpleRandomFeatureConfiguration.CODEC));
       RANDOM_BOOLEAN_SELECTOR = register("random_boolean_selector", new RandomBooleanSelectorFeature(RandomBooleanFeatureConfiguration.CODEC));
       DECORATED = register("decorated", new DecoratedFeature(DecoratedFeatureConfiguration.CODEC));
+      GEODE = register("geode", new GeodeFeature(GeodeConfiguration.CODEC));
    }
 }
