--- net/minecraft/world/level/levelgen/feature/StrongholdFeature.java
+++ net/minecraft/world/level/levelgen/feature/StrongholdFeature.java
@@ -2,19 +2,20 @@
 
 import com.mojang.serialization.Codec;
 import java.util.List;
 import net.minecraft.core.RegistryAccess;
 import net.minecraft.world.level.ChunkPos;
+import net.minecraft.world.level.LevelHeightAccessor;
 import net.minecraft.world.level.biome.Biome;
 import net.minecraft.world.level.biome.BiomeSource;
 import net.minecraft.world.level.chunk.ChunkGenerator;
 import net.minecraft.world.level.levelgen.WorldgenRandom;
 import net.minecraft.world.level.levelgen.feature.configurations.NoneFeatureConfiguration;
 import net.minecraft.world.level.levelgen.structure.BoundingBox;
+import net.minecraft.world.level.levelgen.structure.NoiseAffectingStructureStart;
 import net.minecraft.world.level.levelgen.structure.StrongholdPieces;
 import net.minecraft.world.level.levelgen.structure.StructurePiece;
-import net.minecraft.world.level.levelgen.structure.StructureStart;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager;
 
 public class StrongholdFeature extends StructureFeature<NoneFeatureConfiguration> {
    public StrongholdFeature(Codec<NoneFeatureConfiguration> var1) {
       super(var1);
@@ -22,32 +23,32 @@
 
    public StructureFeature.StructureStartFactory<NoneFeatureConfiguration> getStartFactory() {
       return StrongholdFeature.StrongholdStart::new;
    }
 
-   protected boolean isFeatureChunk(ChunkGenerator var1, BiomeSource var2, long var3, WorldgenRandom var5, int var6, int var7, Biome var8, ChunkPos var9, NoneFeatureConfiguration var10) {
-      return var1.hasStronghold(new ChunkPos(var6, var7));
+   protected boolean isFeatureChunk(ChunkGenerator var1, BiomeSource var2, long var3, WorldgenRandom var5, ChunkPos var6, Biome var7, ChunkPos var8, NoneFeatureConfiguration var9, LevelHeightAccessor var10) {
+      return var1.hasStronghold(var6);
    }
 
-   public static class StrongholdStart extends StructureStart<NoneFeatureConfiguration> {
+   public static class StrongholdStart extends NoiseAffectingStructureStart<NoneFeatureConfiguration> {
       private final long seed;
 
-      public StrongholdStart(StructureFeature<NoneFeatureConfiguration> var1, int var2, int var3, BoundingBox var4, int var5, long var6) {
-         super(var1, var2, var3, var4, var5, var6);
-         this.seed = var6;
+      public StrongholdStart(StructureFeature<NoneFeatureConfiguration> var1, ChunkPos var2, BoundingBox var3, int var4, long var5) {
+         super(var1, var2, var3, var4, var5);
+         this.seed = var5;
       }
 
-      public void generatePieces(RegistryAccess var1, ChunkGenerator var2, StructureManager var3, int var4, int var5, Biome var6, NoneFeatureConfiguration var7) {
+      public void generatePieces(RegistryAccess var1, ChunkGenerator var2, StructureManager var3, ChunkPos var4, Biome var5, NoneFeatureConfiguration var6, LevelHeightAccessor var7) {
          int var8 = 0;
 
          StrongholdPieces.StartPiece var9;
          do {
             this.pieces.clear();
             this.boundingBox = BoundingBox.getUnknownBox();
-            this.random.setLargeFeatureSeed(this.seed + (long)(var8++), var4, var5);
+            this.random.setLargeFeatureSeed(this.seed + (long)(var8++), var4.x, var4.z);
             StrongholdPieces.resetPieces();
-            var9 = new StrongholdPieces.StartPiece(this.random, (var4 << 4) + 2, (var5 << 4) + 2);
+            var9 = new StrongholdPieces.StartPiece(this.random, var4.getBlockX(2), var4.getBlockZ(2));
             this.pieces.add(var9);
             var9.addChildren(var9, this.pieces, this.random);
             List var10 = var9.pendingChildren;
 
             while(!var10.isEmpty()) {
@@ -55,11 +56,11 @@
                StructurePiece var12 = (StructurePiece)var10.remove(var11);
                var12.addChildren(var9, this.pieces, this.random);
             }
 
             this.calculateBoundingBox();
-            this.moveBelowSeaLevel(var2.getSeaLevel(), this.random, 10);
+            this.moveBelowSeaLevel(var2.getSeaLevel(), var2.getMinY(), this.random, 10);
          } while(this.pieces.isEmpty() || var9.portalRoomPiece == null);
 
       }
    }
 }
