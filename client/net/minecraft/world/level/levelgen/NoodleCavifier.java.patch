--- net/minecraft/world/level/levelgen/NoodleCavifier.java
+++ net/minecraft/world/level/levelgen/NoodleCavifier.java
@@ -1,0 +1,86 @@
+package net.minecraft.world.level.levelgen;
+
+import java.util.Random;
+import net.minecraft.util.Mth;
+import net.minecraft.world.level.levelgen.synth.NoiseUtils;
+import net.minecraft.world.level.levelgen.synth.NormalNoise;
+
+public class NoodleCavifier {
+   private static final int NOODLES_MAX_Y = 30;
+   private static final double SPACING_AND_STRAIGHTNESS = 1.5D;
+   private static final double XZ_FREQUENCY = 2.6666666666666665D;
+   private static final double Y_FREQUENCY = 2.6666666666666665D;
+   private final NormalNoise toggleNoiseSource;
+   private final NormalNoise thicknessNoiseSource;
+   private final NormalNoise noodleANoiseSource;
+   private final NormalNoise noodleBNoiseSource;
+
+   public NoodleCavifier(long var1) {
+      Random var3 = new Random(var1);
+      this.toggleNoiseSource = NormalNoise.create(new SimpleRandomSource(var3.nextLong()), -8, (double[])(1.0D));
+      this.thicknessNoiseSource = NormalNoise.create(new SimpleRandomSource(var3.nextLong()), -8, (double[])(1.0D));
+      this.noodleANoiseSource = NormalNoise.create(new SimpleRandomSource(var3.nextLong()), -7, (double[])(1.0D));
+      this.noodleBNoiseSource = NormalNoise.create(new SimpleRandomSource(var3.nextLong()), -7, (double[])(1.0D));
+   }
+
+   public void fillToggleNoiseColumn(double[] var1, int var2, int var3, int var4, int var5) {
+      this.fillNoiseColumn(var1, var2, var3, var4, var5, this.toggleNoiseSource, 1.0D);
+   }
+
+   public void fillThicknessNoiseColumn(double[] var1, int var2, int var3, int var4, int var5) {
+      this.fillNoiseColumn(var1, var2, var3, var4, var5, this.thicknessNoiseSource, 1.0D);
+   }
+
+   public void fillRidgeANoiseColumn(double[] var1, int var2, int var3, int var4, int var5) {
+      this.fillNoiseColumn(var1, var2, var3, var4, var5, this.noodleANoiseSource, 2.6666666666666665D, 2.6666666666666665D);
+   }
+
+   public void fillRidgeBNoiseColumn(double[] var1, int var2, int var3, int var4, int var5) {
+      this.fillNoiseColumn(var1, var2, var3, var4, var5, this.noodleBNoiseSource, 2.6666666666666665D, 2.6666666666666665D);
+   }
+
+   public void fillNoiseColumn(double[] var1, int var2, int var3, int var4, int var5, NormalNoise var6, double var7) {
+      this.fillNoiseColumn(var1, var2, var3, var4, var5, var6, var7, var7);
+   }
+
+   public void fillNoiseColumn(double[] var1, int var2, int var3, int var4, int var5, NormalNoise var6, double var7, double var9) {
+      boolean var11 = true;
+      boolean var12 = true;
+
+      for(int var13 = 0; var13 < var5; ++var13) {
+         int var14 = var13 + var4;
+         int var15 = var2 * 4;
+         int var16 = var14 * 8;
+         int var17 = var3 * 4;
+         double var18;
+         if (var16 < 38) {
+            var18 = NoiseUtils.sampleNoiseAndMapToRange(var6, (double)var15 * var7, (double)var16 * var9, (double)var17 * var7, -1.0D, 1.0D);
+         } else {
+            var18 = 1.0D;
+         }
+
+         var1[var13] = var18;
+      }
+
+   }
+
+   public double noodleCavify(double var1, int var3, int var4, int var5, double var6, double var8, double var10, double var12, int var14) {
+      if (var4 <= 30 && var4 >= var14 + 4) {
+         if (var1 < 0.0D) {
+            return var1;
+         } else if (var6 < 0.0D) {
+            return var1;
+         } else {
+            double var15 = 0.05D;
+            double var17 = 0.1D;
+            double var19 = Mth.clampedMap(var8, -1.0D, 1.0D, 0.05D, 0.1D);
+            double var21 = Math.abs(1.5D * var10) - var19;
+            double var23 = Math.abs(1.5D * var12) - var19;
+            double var25 = Math.max(var21, var23);
+            return Math.min(var1, var25);
+         }
+      } else {
+         return var1;
+      }
+   }
+}
