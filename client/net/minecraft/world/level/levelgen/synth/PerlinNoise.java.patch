--- net/minecraft/world/level/levelgen/synth/PerlinNoise.java
+++ net/minecraft/world/level/levelgen/synth/PerlinNoise.java
@@ -6,30 +6,37 @@
 import it.unimi.dsi.fastutil.doubles.DoubleList;
 import it.unimi.dsi.fastutil.ints.IntBidirectionalIterator;
 import it.unimi.dsi.fastutil.ints.IntRBTreeSet;
 import it.unimi.dsi.fastutil.ints.IntSortedSet;
 import java.util.List;
+import java.util.function.LongFunction;
 import java.util.stream.IntStream;
 import javax.annotation.Nullable;
 import net.minecraft.util.Mth;
+import net.minecraft.world.level.levelgen.RandomSource;
 import net.minecraft.world.level.levelgen.WorldgenRandom;
 
 public class PerlinNoise implements SurfaceNoise {
+   private static final int ROUND_OFF = 33554432;
    private final ImprovedNoise[] noiseLevels;
    private final DoubleList amplitudes;
    private final double lowestFreqValueFactor;
    private final double lowestFreqInputFactor;
 
-   public PerlinNoise(WorldgenRandom var1, IntStream var2) {
+   public PerlinNoise(RandomSource var1, IntStream var2) {
       this(var1, (List)var2.boxed().collect(ImmutableList.toImmutableList()));
    }
 
-   public PerlinNoise(WorldgenRandom var1, List<Integer> var2) {
+   public PerlinNoise(RandomSource var1, List<Integer> var2) {
       this(var1, (IntSortedSet)(new IntRBTreeSet(var2)));
    }
 
-   public static PerlinNoise create(WorldgenRandom var0, int var1, DoubleList var2) {
+   public static PerlinNoise create(RandomSource var0, int var1, double... var2) {
+      return create(var0, var1, (DoubleList)(new DoubleArrayList(var2)));
+   }
+
+   public static PerlinNoise create(RandomSource var0, int var1, DoubleList var2) {
       return new PerlinNoise(var0, Pair.of(var1, var2));
    }
 
    private static Pair<Integer, DoubleList> makeAmplitudes(IntSortedSet var0) {
       if (var0.isEmpty()) {
@@ -52,76 +59,76 @@
             return Pair.of(-var1, var4);
          }
       }
    }
 
-   private PerlinNoise(WorldgenRandom var1, IntSortedSet var2) {
-      this(var1, makeAmplitudes(var2));
+   private PerlinNoise(RandomSource var1, IntSortedSet var2) {
+      this(var1, var2, WorldgenRandom::new);
    }
 
-   private PerlinNoise(WorldgenRandom var1, Pair<Integer, DoubleList> var2) {
-      int var3 = (Integer)var2.getFirst();
+   private PerlinNoise(RandomSource var1, IntSortedSet var2, LongFunction<RandomSource> var3) {
+      this(var1, makeAmplitudes(var2), var3);
+   }
+
+   protected PerlinNoise(RandomSource var1, Pair<Integer, DoubleList> var2) {
+      this(var1, var2, WorldgenRandom::new);
+   }
+
+   protected PerlinNoise(RandomSource var1, Pair<Integer, DoubleList> var2, LongFunction<RandomSource> var3) {
+      int var4 = (Integer)var2.getFirst();
       this.amplitudes = (DoubleList)var2.getSecond();
-      ImprovedNoise var4 = new ImprovedNoise(var1);
-      int var5 = this.amplitudes.size();
-      int var6 = -var3;
-      this.noiseLevels = new ImprovedNoise[var5];
-      if (var6 >= 0 && var6 < var5) {
-         double var7 = this.amplitudes.getDouble(var6);
-         if (var7 != 0.0D) {
-            this.noiseLevels[var6] = var4;
+      ImprovedNoise var5 = new ImprovedNoise(var1);
+      int var6 = this.amplitudes.size();
+      int var7 = -var4;
+      this.noiseLevels = new ImprovedNoise[var6];
+      if (var7 >= 0 && var7 < var6) {
+         double var8 = this.amplitudes.getDouble(var7);
+         if (var8 != 0.0D) {
+            this.noiseLevels[var7] = var5;
          }
       }
 
-      for(int var13 = var6 - 1; var13 >= 0; --var13) {
-         if (var13 < var5) {
-            double var8 = this.amplitudes.getDouble(var13);
-            if (var8 != 0.0D) {
-               this.noiseLevels[var13] = new ImprovedNoise(var1);
+      for(int var11 = var7 - 1; var11 >= 0; --var11) {
+         if (var11 < var6) {
+            double var9 = this.amplitudes.getDouble(var11);
+            if (var9 != 0.0D) {
+               this.noiseLevels[var11] = new ImprovedNoise(var1);
             } else {
-               var1.consumeCount(262);
+               skipOctave(var1);
             }
          } else {
-            var1.consumeCount(262);
+            skipOctave(var1);
          }
       }
 
-      if (var6 < var5 - 1) {
-         long var14 = (long)(var4.noise(0.0D, 0.0D, 0.0D, 0.0D, 0.0D) * 9.223372036854776E18D);
-         WorldgenRandom var9 = new WorldgenRandom(var14);
-
-         for(int var10 = var6 + 1; var10 < var5; ++var10) {
-            if (var10 >= 0) {
-               double var11 = this.amplitudes.getDouble(var10);
-               if (var11 != 0.0D) {
-                  this.noiseLevels[var10] = new ImprovedNoise(var9);
-               } else {
-                  var9.consumeCount(262);
-               }
-            } else {
-               var9.consumeCount(262);
-            }
-         }
+      if (var7 < var6 - 1) {
+         throw new IllegalArgumentException("Positive octaves are temporarily disabled");
+      } else {
+         this.lowestFreqInputFactor = Math.pow(2.0D, (double)(-var7));
+         this.lowestFreqValueFactor = Math.pow(2.0D, (double)(var6 - 1)) / (Math.pow(2.0D, (double)var6) - 1.0D);
       }
+   }
 
-      this.lowestFreqInputFactor = Math.pow(2.0D, (double)(-var6));
-      this.lowestFreqValueFactor = Math.pow(2.0D, (double)(var5 - 1)) / (Math.pow(2.0D, (double)var5) - 1.0D);
+   private static void skipOctave(RandomSource var0) {
+      var0.consumeCount(262);
    }
 
    public double getValue(double var1, double var3, double var5) {
       return this.getValue(var1, var3, var5, 0.0D, 0.0D, false);
    }
 
+   @Deprecated
    public double getValue(double var1, double var3, double var5, double var7, double var9, boolean var11) {
       double var12 = 0.0D;
       double var14 = this.lowestFreqInputFactor;
       double var16 = this.lowestFreqValueFactor;
 
       for(int var18 = 0; var18 < this.noiseLevels.length; ++var18) {
          ImprovedNoise var19 = this.noiseLevels[var18];
          if (var19 != null) {
-            var12 += this.amplitudes.getDouble(var18) * var19.noise(wrap(var1 * var14), var11 ? -var19.yo : wrap(var3 * var14), wrap(var5 * var14), var7 * var14, var9 * var14) * var16;
+            double var20 = var19.noise(wrap(var1 * var14), var11 ? -var19.yo : wrap(var3 * var14), wrap(var5 * var14), var7 * var14, var9 * var14);
+            var12 += this.amplitudes.getDouble(var18) * var20 * var16;
          }
 
          var14 *= 2.0D;
          var16 /= 2.0D;
       }
