--- net/minecraft/world/level/storage/LevelStorageSource.java
+++ net/minecraft/world/level/storage/LevelStorageSource.java
@@ -26,10 +26,11 @@
 import java.time.format.SignStyle;
 import java.time.temporal.ChronoField;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.function.BiFunction;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipOutputStream;
 import javax.annotation.Nullable;
@@ -57,16 +58,17 @@
 import net.minecraft.world.level.levelgen.WorldGenSettings;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class LevelStorageSource {
-   private static final Logger LOGGER = LogManager.getLogger();
-   private static final DateTimeFormatter FORMATTER;
+   static final Logger LOGGER = LogManager.getLogger();
+   static final DateTimeFormatter FORMATTER;
+   private static final String ICON_FILENAME = "icon.png";
    private static final ImmutableList<String> OLD_SETTINGS_KEYS;
-   private final Path baseDir;
+   final Path baseDir;
    private final Path backupDir;
-   private final DataFixer fixerUpper;
+   final DataFixer fixerUpper;
 
    public LevelStorageSource(Path var1, Path var2, DataFixer var3) {
       this.fixerUpper = var3;
 
       try {
@@ -96,41 +98,45 @@
       }
 
       Dynamic var8 = var1.update(References.WORLD_GEN_SETTINGS, var3, var2, SharedConstants.getCurrentVersion().getWorldVersion());
       DataResult var7 = WorldGenSettings.CODEC.parse(var8);
       Logger var10002 = LOGGER;
-      var10002.getClass();
-      return Pair.of(var7.resultOrPartial(Util.prefix("WorldGenSettings: ", var10002::error)).orElseGet(() -> {
+      Objects.requireNonNull(var10002);
+      return Pair.of((WorldGenSettings)var7.resultOrPartial(Util.prefix("WorldGenSettings: ", var10002::error)).orElseGet(() -> {
          DataResult var10000 = RegistryLookupCodec.create(Registry.DIMENSION_TYPE_REGISTRY).codec().parse(var8);
          Logger var10002 = LOGGER;
-         var10002.getClass();
+         Objects.requireNonNull(var10002);
          Registry var1 = (Registry)var10000.resultOrPartial(Util.prefix("Dimension type registry: ", var10002::error)).orElseThrow(() -> {
             return new IllegalStateException("Failed to get dimension registry");
          });
          var10000 = RegistryLookupCodec.create(Registry.BIOME_REGISTRY).codec().parse(var8);
          var10002 = LOGGER;
-         var10002.getClass();
+         Objects.requireNonNull(var10002);
          Registry var2 = (Registry)var10000.resultOrPartial(Util.prefix("Biome registry: ", var10002::error)).orElseThrow(() -> {
             return new IllegalStateException("Failed to get biome registry");
          });
          var10000 = RegistryLookupCodec.create(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY).codec().parse(var8);
          var10002 = LOGGER;
-         var10002.getClass();
+         Objects.requireNonNull(var10002);
          Registry var3 = (Registry)var10000.resultOrPartial(Util.prefix("Noise settings registry: ", var10002::error)).orElseThrow(() -> {
             return new IllegalStateException("Failed to get noise settings registry");
          });
          return WorldGenSettings.makeDefault(var1, var2, var3);
       }), var7.lifecycle());
    }
 
    private static DataPackConfig readDataPackConfig(Dynamic<?> var0) {
       DataResult var10000 = DataPackConfig.CODEC.parse(var0);
       Logger var10001 = LOGGER;
-      var10001.getClass();
+      Objects.requireNonNull(var10001);
       return (DataPackConfig)var10000.resultOrPartial(var10001::error).orElse(DataPackConfig.DEFAULT);
    }
 
+   public String getName() {
+      return "Anvil";
+   }
+
    public List<LevelSummary> getLevelList() throws LevelStorageException {
       if (!Files.isDirectory(this.baseDir, new LinkOption[0])) {
          throw new LevelStorageException((new TranslatableComponent("selectWorld.load_folder_access")).getString());
       } else {
          ArrayList var1 = Lists.newArrayList();
@@ -158,16 +164,16 @@
 
          return var1;
       }
    }
 
-   private int getStorageVersion() {
+   int getStorageVersion() {
       return 19133;
    }
 
    @Nullable
-   private <T> T readLevelData(File var1, BiFunction<File, DataFixer, T> var2) {
+   <T> T readLevelData(File var1, BiFunction<File, DataFixer, T> var2) {
       if (!var1.exists()) {
          return null;
       } else {
          File var3 = new File(var1, "level.dat");
          if (var3.exists()) {
@@ -195,11 +201,11 @@
          LOGGER.error("Exception reading {}", var0, var6);
          return null;
       }
    }
 
-   private static BiFunction<File, DataFixer, PrimaryLevelData> getLevelData(DynamicOps<Tag> var0, DataPackConfig var1) {
+   static BiFunction<File, DataFixer, PrimaryLevelData> getLevelData(DynamicOps<Tag> var0, DataPackConfig var1) {
       return (var2, var3) -> {
          try {
             CompoundTag var4 = NbtIo.readCompressed(var2);
             CompoundTag var5 = var4.getCompound("Data");
             CompoundTag var6 = var5.contains("Player", 10) ? var5.getCompound("Player") : null;
@@ -215,11 +221,11 @@
             return null;
          }
       };
    }
 
-   private BiFunction<File, DataFixer, LevelSummary> levelSummaryReader(File var1, boolean var2) {
+   BiFunction<File, DataFixer, LevelSummary> levelSummaryReader(File var1, boolean var2) {
       return (var3, var4) -> {
          try {
             CompoundTag var5 = NbtIo.readCompressed(var3);
             CompoundTag var6 = var5.getCompound("Data");
             var6.remove("Player");
@@ -274,12 +280,12 @@
       FORMATTER = (new DateTimeFormatterBuilder()).appendValue(ChronoField.YEAR, 4, 10, SignStyle.EXCEEDS_PAD).appendLiteral('-').appendValue(ChronoField.MONTH_OF_YEAR, 2).appendLiteral('-').appendValue(ChronoField.DAY_OF_MONTH, 2).appendLiteral('_').appendValue(ChronoField.HOUR_OF_DAY, 2).appendLiteral('-').appendValue(ChronoField.MINUTE_OF_HOUR, 2).appendLiteral('-').appendValue(ChronoField.SECOND_OF_MINUTE, 2).toFormatter();
       OLD_SETTINGS_KEYS = ImmutableList.of("RandomSeed", "generatorName", "generatorOptions", "generatorVersion", "legacy_custom_options", "MapFeatures", "BonusChest");
    }
 
    public class LevelStorageAccess implements AutoCloseable {
-      private final DirectoryLock lock;
-      private final Path levelPath;
+      final DirectoryLock lock;
+      final Path levelPath;
       private final String levelId;
       private final Map<LevelResource, Path> resources = Maps.newHashMap();
 
       public LevelStorageAccess(String var2) throws IOException {
          this.levelId = var2;
@@ -335,13 +341,11 @@
       }
 
       @Nullable
       public DataPackConfig getDataPacks() {
          this.checkLock();
-         return (DataPackConfig)LevelStorageSource.this.readLevelData(this.levelPath.toFile(), (var0, var1) -> {
-            return LevelStorageSource.getDataPacks(var0, var1);
-         });
+         return (DataPackConfig)LevelStorageSource.this.readLevelData(this.levelPath.toFile(), LevelStorageSource::getDataPacks);
       }
 
       public void saveDataTag(RegistryAccess var1, WorldData var2) {
          this.saveDataTag(var1, var2, (CompoundTag)null);
       }
@@ -436,57 +440,50 @@
          }
       }
 
       public long makeWorldBackup() throws IOException {
          this.checkLock();
-         String var1 = LocalDateTime.now().format(LevelStorageSource.FORMATTER) + "_" + this.levelId;
+         String var10000 = LocalDateTime.now().format(LevelStorageSource.FORMATTER);
+         String var1 = var10000 + "_" + this.levelId;
          Path var2 = LevelStorageSource.this.getBackupPath();
 
          try {
             Files.createDirectories(Files.exists(var2, new LinkOption[0]) ? var2.toRealPath() : var2);
-         } catch (IOException var16) {
-            throw new RuntimeException(var16);
+         } catch (IOException var9) {
+            throw new RuntimeException(var9);
          }
 
          Path var3 = var2.resolve(FileUtil.findAvailableName(var2, var1, ".zip"));
          final ZipOutputStream var4 = new ZipOutputStream(new BufferedOutputStream(Files.newOutputStream(var3)));
-         Throwable var5 = null;
 
          try {
-            final Path var6 = Paths.get(this.levelId);
+            final Path var5 = Paths.get(this.levelId);
             Files.walkFileTree(this.levelPath, new SimpleFileVisitor<Path>() {
                public FileVisitResult visitFile(Path var1, BasicFileAttributes var2) throws IOException {
                   if (var1.endsWith("session.lock")) {
                      return FileVisitResult.CONTINUE;
                   } else {
-                     String var3 = var6.resolve(LevelStorageAccess.this.levelPath.relativize(var1)).toString().replace('\\', '/');
+                     String var3 = var5.resolve(LevelStorageAccess.this.levelPath.relativize(var1)).toString().replace('\\', '/');
                      ZipEntry var4x = new ZipEntry(var3);
                      var4.putNextEntry(var4x);
                      com.google.common.io.Files.asByteSource(var1.toFile()).copyTo(var4);
                      var4.closeEntry();
                      return FileVisitResult.CONTINUE;
                   }
                }
             });
-         } catch (Throwable var15) {
-            var5 = var15;
-            throw var15;
-         } finally {
-            if (var4 != null) {
-               if (var5 != null) {
-                  try {
-                     var4.close();
-                  } catch (Throwable var14) {
-                     var5.addSuppressed(var14);
-                  }
-               } else {
-                  var4.close();
-               }
+         } catch (Throwable var8) {
+            try {
+               var4.close();
+            } catch (Throwable var7) {
+               var8.addSuppressed(var7);
             }
 
+            throw var8;
          }
 
+         var4.close();
          return Files.size(var3);
       }
 
       public void close() throws IOException {
          this.lock.close();
