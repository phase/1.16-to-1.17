--- net/minecraft/world/level/storage/LevelSummary.java
+++ net/minecraft/world/level/storage/LevelSummary.java
@@ -1,7 +1,8 @@
 package net.minecraft.world.level.storage;
 
+import com.mojang.bridge.game.GameVersion;
 import java.io.File;
 import javax.annotation.Nullable;
 import net.minecraft.ChatFormatting;
 import net.minecraft.SharedConstants;
 import net.minecraft.network.chat.Component;
@@ -58,10 +59,14 @@
       } else {
          return this.levelVersion.lastPlayed() > var1.levelVersion.lastPlayed() ? -1 : this.levelId.compareTo(var1.levelId);
       }
    }
 
+   public LevelSettings getSettings() {
+      return this.settings;
+   }
+
    public GameType getGameMode() {
       return this.settings.gameType();
    }
 
    public boolean isHardcore() {
@@ -79,25 +84,42 @@
    public LevelVersion levelVersion() {
       return this.levelVersion;
    }
 
    public boolean markVersionInList() {
-      return this.askToOpenWorld() || !SharedConstants.getCurrentVersion().isStable() && !this.levelVersion.snapshot() || this.shouldBackup();
+      return this.askToOpenWorld() || !SharedConstants.getCurrentVersion().isStable() && !this.levelVersion.snapshot() || this.backupStatus().shouldBackup();
    }
 
    public boolean askToOpenWorld() {
       return this.levelVersion.minecraftVersion() > SharedConstants.getCurrentVersion().getWorldVersion();
    }
 
-   public boolean shouldBackup() {
-      return this.levelVersion.minecraftVersion() < SharedConstants.getCurrentVersion().getWorldVersion();
+   public LevelSummary.BackupStatus backupStatus() {
+      GameVersion var1 = SharedConstants.getCurrentVersion();
+      int var2 = var1.getWorldVersion();
+      int var3 = this.levelVersion.minecraftVersion();
+      if (!var1.isStable() && var3 < var2) {
+         return LevelSummary.BackupStatus.UPGRADE_TO_SNAPSHOT;
+      } else {
+         return var3 > var2 ? LevelSummary.BackupStatus.DOWNGRADE : LevelSummary.BackupStatus.NONE;
+      }
    }
 
    public boolean isLocked() {
       return this.locked;
    }
 
+   public boolean isIncompatibleWorldHeight() {
+      int var1 = this.levelVersion.minecraftVersion();
+      boolean var2 = var1 > 2692 && var1 <= 2706;
+      return var2;
+   }
+
+   public boolean isDisabled() {
+      return this.isLocked() || this.isIncompatibleWorldHeight();
+   }
+
    public Component getInfo() {
       if (this.info == null) {
          this.info = this.createInfo();
       }
 
@@ -105,10 +127,12 @@
    }
 
    private Component createInfo() {
       if (this.isLocked()) {
          return (new TranslatableComponent("selectWorld.locked")).withStyle(ChatFormatting.RED);
+      } else if (this.isIncompatibleWorldHeight()) {
+         return (new TranslatableComponent("selectWorld.pre_worldheight")).withStyle(ChatFormatting.RED);
       } else if (this.isRequiresConversion()) {
          return new TranslatableComponent("selectWorld.conversion");
       } else {
          Object var1 = this.isHardcore() ? (new TextComponent("")).append((new TranslatableComponent("gameMode.hardcore")).withStyle(ChatFormatting.DARK_RED)) : new TranslatableComponent("gameMode." + this.getGameMode().getName());
          if (this.hasCheats()) {
@@ -125,6 +149,34 @@
 
          ((MutableComponent)var1).append((Component)var3);
          return (Component)var1;
       }
    }
+
+   public static enum BackupStatus {
+      NONE(false, false, ""),
+      DOWNGRADE(true, true, "downgrade"),
+      UPGRADE_TO_SNAPSHOT(true, false, "snapshot");
+
+      private final boolean shouldBackup;
+      private final boolean severe;
+      private final String translationKey;
+
+      private BackupStatus(boolean var3, boolean var4, String var5) {
+         this.shouldBackup = var3;
+         this.severe = var4;
+         this.translationKey = var5;
+      }
+
+      public boolean shouldBackup() {
+         return this.shouldBackup;
+      }
+
+      public boolean isSevere() {
+         return this.severe;
+      }
+
+      public String getTranslationKey() {
+         return this.translationKey;
+      }
+   }
 }
