--- net/minecraft/world/level/storage/loot/functions/SetAttributesFunction.java
+++ net/minecraft/world/level/storage/loot/functions/SetAttributesFunction.java
@@ -1,8 +1,9 @@
 package net.minecraft.world.level.storage.loot.functions;
 
 import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Lists;
 import com.google.gson.JsonArray;
 import com.google.gson.JsonDeserializationContext;
 import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
@@ -11,10 +12,11 @@
 import com.google.gson.JsonSyntaxException;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
+import java.util.Set;
 import java.util.UUID;
 import javax.annotation.Nullable;
 import net.minecraft.Util;
 import net.minecraft.core.Registry;
 import net.minecraft.resources.ResourceLocation;
@@ -22,12 +24,13 @@
 import net.minecraft.world.entity.EquipmentSlot;
 import net.minecraft.world.entity.ai.attributes.Attribute;
 import net.minecraft.world.entity.ai.attributes.AttributeModifier;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.storage.loot.LootContext;
-import net.minecraft.world.level.storage.loot.RandomValueBounds;
+import net.minecraft.world.level.storage.loot.parameters.LootContextParam;
 import net.minecraft.world.level.storage.loot.predicates.LootItemCondition;
+import net.minecraft.world.level.storage.loot.providers.number.NumberProvider;
 
 public class SetAttributesFunction extends LootItemConditionalFunction {
    private final List<SetAttributesFunction.Modifier> modifiers;
 
    private SetAttributesFunction(LootItemCondition[] var1, List<SetAttributesFunction.Modifier> var2) {
@@ -37,10 +40,16 @@
 
    public LootItemFunctionType getType() {
       return LootItemFunctions.SET_ATTRIBUTES;
    }
 
+   public Set<LootContextParam<?>> getReferencedContextParams() {
+      return (Set)this.modifiers.stream().flatMap((var0) -> {
+         return var0.amount.getReferencedContextParams().stream();
+      }).collect(ImmutableSet.toImmutableSet());
+   }
+
    public ItemStack run(ItemStack var1, LootContext var2) {
       Random var3 = var2.getRandom();
       Iterator var4 = this.modifiers.iterator();
 
       while(var4.hasNext()) {
@@ -49,26 +58,26 @@
          if (var6 == null) {
             var6 = UUID.randomUUID();
          }
 
          EquipmentSlot var7 = (EquipmentSlot)Util.getRandom((Object[])var5.slots, var3);
-         var1.addAttributeModifier(var5.attribute, new AttributeModifier(var6, var5.name, (double)var5.amount.getFloat(var3), var5.operation), var7);
+         var1.addAttributeModifier(var5.attribute, new AttributeModifier(var6, var5.name, (double)var5.amount.getFloat(var2), var5.operation), var7);
       }
 
       return var1;
    }
 
    static class Modifier {
       private final String name;
       private final Attribute attribute;
       private final AttributeModifier.Operation operation;
-      private final RandomValueBounds amount;
+      private final NumberProvider amount;
       @Nullable
       private final UUID id;
       private final EquipmentSlot[] slots;
 
-      private Modifier(String var1, Attribute var2, AttributeModifier.Operation var3, RandomValueBounds var4, EquipmentSlot[] var5, @Nullable UUID var6) {
+      private Modifier(String var1, Attribute var2, AttributeModifier.Operation var3, NumberProvider var4, EquipmentSlot[] var5, @Nullable UUID var6) {
          this.name = var1;
          this.attribute = var2;
          this.operation = var3;
          this.amount = var4;
          this.id = var6;
@@ -109,11 +118,11 @@
          Attribute var4 = (Attribute)Registry.ATTRIBUTE.get(var3);
          if (var4 == null) {
             throw new JsonSyntaxException("Unknown attribute: " + var3);
          } else {
             AttributeModifier.Operation var5 = operationFromString(GsonHelper.getAsString(var0, "operation"));
-            RandomValueBounds var6 = (RandomValueBounds)GsonHelper.getAsObject(var0, "amount", var1, RandomValueBounds.class);
+            NumberProvider var6 = (NumberProvider)GsonHelper.getAsObject(var0, "amount", var1, NumberProvider.class);
             UUID var8 = null;
             EquipmentSlot[] var7;
             if (GsonHelper.isStringValue(var0, "slot")) {
                var7 = new EquipmentSlot[]{EquipmentSlot.byName(GsonHelper.getAsString(var0, "slot"))};
             } else {
