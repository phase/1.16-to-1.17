--- net/minecraft/world/level/storage/loot/functions/CopyNbtFunction.java
+++ net/minecraft/world/level/storage/loot/functions/CopyNbtFunction.java
@@ -1,9 +1,8 @@
 package net.minecraft.world.level.storage.loot.functions;
 
 import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
 import com.google.gson.JsonArray;
 import com.google.gson.JsonDeserializationContext;
 import com.google.gson.JsonElement;
@@ -13,35 +12,27 @@
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
-import java.util.function.Function;
 import java.util.function.Supplier;
-import net.minecraft.advancements.critereon.NbtPredicate;
 import net.minecraft.commands.arguments.NbtPathArgument;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.nbt.Tag;
 import net.minecraft.util.GsonHelper;
-import net.minecraft.world.entity.Entity;
 import net.minecraft.world.item.ItemStack;
-import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.storage.loot.LootContext;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParam;
-import net.minecraft.world.level.storage.loot.parameters.LootContextParams;
 import net.minecraft.world.level.storage.loot.predicates.LootItemCondition;
+import net.minecraft.world.level.storage.loot.providers.nbt.NbtProvider;
 
 public class CopyNbtFunction extends LootItemConditionalFunction {
-   private final CopyNbtFunction.DataSource source;
+   private final NbtProvider source;
    private final List<CopyNbtFunction.CopyOperation> operations;
-   private static final Function<Entity, Tag> ENTITY_GETTER = NbtPredicate::getEntityTagToCompare;
-   private static final Function<BlockEntity, Tag> BLOCK_ENTITY_GETTER = (var0) -> {
-      return var0.save(new CompoundTag());
-   };
 
-   private CopyNbtFunction(LootItemCondition[] var1, CopyNbtFunction.DataSource var2, List<CopyNbtFunction.CopyOperation> var3) {
+   private CopyNbtFunction(LootItemCondition[] var1, NbtProvider var2, List<CopyNbtFunction.CopyOperation> var3) {
       super(var1);
       this.source = var2;
       this.operations = ImmutableList.copyOf(var3);
    }
 
@@ -56,42 +47,42 @@
          throw new IllegalArgumentException("Failed to parse path " + var0, var2);
       }
    }
 
    public Set<LootContextParam<?>> getReferencedContextParams() {
-      return ImmutableSet.of(this.source.param);
+      return this.source.getReferencedContextParams();
    }
 
    public ItemStack run(ItemStack var1, LootContext var2) {
-      Tag var3 = (Tag)this.source.getter.apply(var2);
+      Tag var3 = this.source.get(var2);
       if (var3 != null) {
          this.operations.forEach((var2x) -> {
             var2x.apply(var1::getOrCreateTag, var3);
          });
       }
 
       return var1;
    }
 
-   public static CopyNbtFunction.Builder copyData(CopyNbtFunction.DataSource var0) {
+   public static CopyNbtFunction.Builder copyData(NbtProvider var0) {
       return new CopyNbtFunction.Builder(var0);
    }
 
    public static class Serializer extends LootItemConditionalFunction.Serializer<CopyNbtFunction> {
       public Serializer() {
       }
 
       public void serialize(JsonObject var1, CopyNbtFunction var2, JsonSerializationContext var3) {
          super.serialize(var1, (LootItemConditionalFunction)var2, var3);
-         var1.addProperty("source", var2.source.name);
+         var1.add("source", var3.serialize(var2.source));
          JsonArray var4 = new JsonArray();
          var2.operations.stream().map(CopyNbtFunction.CopyOperation::toJson).forEach(var4::add);
          var1.add("ops", var4);
       }
 
       public CopyNbtFunction deserialize(JsonObject var1, JsonDeserializationContext var2, LootItemCondition[] var3) {
-         CopyNbtFunction.DataSource var4 = CopyNbtFunction.DataSource.getByName(GsonHelper.getAsString(var1, "source"));
+         NbtProvider var4 = (NbtProvider)GsonHelper.getAsObject(var1, "source", var2, NbtProvider.class);
          ArrayList var5 = Lists.newArrayList();
          JsonArray var6 = GsonHelper.getAsJsonArray(var1, "ops");
          Iterator var7 = var6.iterator();
 
          while(var7.hasNext()) {
@@ -102,44 +93,10 @@
 
          return new CopyNbtFunction(var3, var4, var5);
       }
    }
 
-   public static enum DataSource {
-      THIS("this", LootContextParams.THIS_ENTITY, CopyNbtFunction.ENTITY_GETTER),
-      KILLER("killer", LootContextParams.KILLER_ENTITY, CopyNbtFunction.ENTITY_GETTER),
-      KILLER_PLAYER("killer_player", LootContextParams.LAST_DAMAGE_PLAYER, CopyNbtFunction.ENTITY_GETTER),
-      BLOCK_ENTITY("block_entity", LootContextParams.BLOCK_ENTITY, CopyNbtFunction.BLOCK_ENTITY_GETTER);
-
-      public final String name;
-      public final LootContextParam<?> param;
-      public final Function<LootContext, Tag> getter;
-
-      private <T> DataSource(String var3, LootContextParam<T> var4, Function<? super T, Tag> var5) {
-         this.name = var3;
-         this.param = var4;
-         this.getter = (var2x) -> {
-            Object var3 = var2x.getParamOrNull(var4);
-            return var3 != null ? (Tag)var5.apply(var3) : null;
-         };
-      }
-
-      public static CopyNbtFunction.DataSource getByName(String var0) {
-         CopyNbtFunction.DataSource[] var1 = values();
-         int var2 = var1.length;
-
-         for(int var3 = 0; var3 < var2; ++var3) {
-            CopyNbtFunction.DataSource var4 = var1[var3];
-            if (var4.name.equals(var0)) {
-               return var4;
-            }
-         }
-
-         throw new IllegalArgumentException("Invalid tag source " + var0);
-      }
-   }
-
    public static enum MergeStrategy {
       REPLACE("replace") {
          public void merge(Tag var1, NbtPathArgument.NbtPath var2, List<Tag> var3) throws CommandSyntaxException {
             Tag var10002 = (Tag)Iterables.getLast(var3);
             var2.set(var1, var10002::copy);
@@ -197,14 +154,14 @@
          throw new IllegalArgumentException("Invalid merge strategy" + var0);
       }
    }
 
    public static class Builder extends LootItemConditionalFunction.Builder<CopyNbtFunction.Builder> {
-      private final CopyNbtFunction.DataSource source;
+      private final NbtProvider source;
       private final List<CopyNbtFunction.CopyOperation> ops;
 
-      private Builder(CopyNbtFunction.DataSource var1) {
+      private Builder(NbtProvider var1) {
          this.ops = Lists.newArrayList();
          this.source = var1;
       }
 
       public CopyNbtFunction.Builder copy(String var1, String var2, CopyNbtFunction.MergeStrategy var3) {
