--- net/minecraft/world/level/storage/loot/functions/ExplorationMapFunction.java
+++ net/minecraft/world/level/storage/loot/functions/ExplorationMapFunction.java
@@ -25,11 +25,15 @@
 import org.apache.logging.log4j.Logger;
 
 public class ExplorationMapFunction extends LootItemConditionalFunction {
    private static final Logger LOGGER = LogManager.getLogger();
    public static final StructureFeature<?> DEFAULT_FEATURE;
+   public static final String DEFAULT_DECORATION_NAME = "mansion";
    public static final MapDecoration.Type DEFAULT_DECORATION;
+   public static final byte DEFAULT_ZOOM = 2;
+   public static final int DEFAULT_SEARCH_RADIUS = 50;
+   public static final boolean DEFAULT_SKIP_EXISTING = true;
    private final StructureFeature<?> destination;
    private final MapDecoration.Type mapDecoration;
    private final byte zoom;
    private final int searchRadius;
    private final boolean skipKnownStructures;
@@ -50,11 +54,11 @@
    public Set<LootContextParam<?>> getReferencedContextParams() {
       return ImmutableSet.of(LootContextParams.ORIGIN);
    }
 
    public ItemStack run(ItemStack var1, LootContext var2) {
-      if (var1.getItem() != Items.MAP) {
+      if (!var1.is(Items.MAP)) {
          return var1;
       } else {
          Vec3 var3 = (Vec3)var2.getParamOrNull(LootContextParams.ORIGIN);
          if (var3 != null) {
             ServerLevel var4 = var2.getLevel();
@@ -115,11 +119,11 @@
          MapDecoration.Type var6 = ExplorationMapFunction.DEFAULT_DECORATION;
 
          try {
             var6 = MapDecoration.Type.valueOf(var5.toUpperCase(Locale.ROOT));
          } catch (IllegalArgumentException var10) {
-            ExplorationMapFunction.LOGGER.error("Error while parsing loot table decoration entry. Found {}. Defaulting to " + ExplorationMapFunction.DEFAULT_DECORATION, var5);
+            ExplorationMapFunction.LOGGER.error("Error while parsing loot table decoration entry. Found {}. Defaulting to {}", var5, ExplorationMapFunction.DEFAULT_DECORATION);
          }
 
          byte var7 = GsonHelper.getAsByte(var1, "zoom", (byte)2);
          int var8 = GsonHelper.getAsInt(var1, "search_radius", 50);
          boolean var9 = GsonHelper.getAsBoolean(var1, "skip_existing_chunks", true);
@@ -171,10 +175,15 @@
       public ExplorationMapFunction.Builder setZoom(byte var1) {
          this.zoom = var1;
          return this;
       }
 
+      public ExplorationMapFunction.Builder setSearchRadius(int var1) {
+         this.searchRadius = var1;
+         return this;
+      }
+
       public ExplorationMapFunction.Builder setSkipKnownStructures(boolean var1) {
          this.skipKnownStructures = var1;
          return this;
       }
 
