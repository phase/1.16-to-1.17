--- net/minecraft/world/level/storage/loot/functions/ApplyBonusCount.java
+++ net/minecraft/world/level/storage/loot/functions/ApplyBonusCount.java
@@ -19,15 +19,15 @@
 import net.minecraft.world.level.storage.loot.parameters.LootContextParam;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParams;
 import net.minecraft.world.level.storage.loot.predicates.LootItemCondition;
 
 public class ApplyBonusCount extends LootItemConditionalFunction {
-   private static final Map<ResourceLocation, ApplyBonusCount.FormulaDeserializer> FORMULAS = Maps.newHashMap();
-   private final Enchantment enchantment;
-   private final ApplyBonusCount.Formula formula;
+   static final Map<ResourceLocation, ApplyBonusCount.FormulaDeserializer> FORMULAS = Maps.newHashMap();
+   final Enchantment enchantment;
+   final ApplyBonusCount.Formula formula;
 
-   private ApplyBonusCount(LootItemCondition[] var1, Enchantment var2, ApplyBonusCount.Formula var3) {
+   ApplyBonusCount(LootItemCondition[] var1, Enchantment var2, ApplyBonusCount.Formula var3) {
       super(var1);
       this.enchantment = var2;
       this.formula = var3;
    }
 
@@ -78,52 +78,48 @@
       FORMULAS.put(ApplyBonusCount.BinomialWithBonusCount.TYPE, ApplyBonusCount.BinomialWithBonusCount::deserialize);
       FORMULAS.put(ApplyBonusCount.OreDrops.TYPE, ApplyBonusCount.OreDrops::deserialize);
       FORMULAS.put(ApplyBonusCount.UniformBonusCount.TYPE, ApplyBonusCount.UniformBonusCount::deserialize);
    }
 
-   public static class Serializer extends LootItemConditionalFunction.Serializer<ApplyBonusCount> {
-      public Serializer() {
+   private interface Formula {
+      int calculateNewCount(Random var1, int var2, int var3);
+
+      void serializeParams(JsonObject var1, JsonSerializationContext var2);
+
+      ResourceLocation getType();
+   }
+
+   static final class UniformBonusCount implements ApplyBonusCount.Formula {
+      public static final ResourceLocation TYPE = new ResourceLocation("uniform_bonus_count");
+      private final int bonusMultiplier;
+
+      public UniformBonusCount(int var1) {
+         this.bonusMultiplier = var1;
       }
 
-      public void serialize(JsonObject var1, ApplyBonusCount var2, JsonSerializationContext var3) {
-         super.serialize(var1, (LootItemConditionalFunction)var2, var3);
-         var1.addProperty("enchantment", Registry.ENCHANTMENT.getKey(var2.enchantment).toString());
-         var1.addProperty("formula", var2.formula.getType().toString());
-         JsonObject var4 = new JsonObject();
-         var2.formula.serializeParams(var4, var3);
-         if (var4.size() > 0) {
-            var1.add("parameters", var4);
-         }
+      public int calculateNewCount(Random var1, int var2, int var3) {
+         return var2 + var1.nextInt(this.bonusMultiplier * var3 + 1);
+      }
 
+      public void serializeParams(JsonObject var1, JsonSerializationContext var2) {
+         var1.addProperty("bonusMultiplier", this.bonusMultiplier);
       }
 
-      public ApplyBonusCount deserialize(JsonObject var1, JsonDeserializationContext var2, LootItemCondition[] var3) {
-         ResourceLocation var4 = new ResourceLocation(GsonHelper.getAsString(var1, "enchantment"));
-         Enchantment var5 = (Enchantment)Registry.ENCHANTMENT.getOptional(var4).orElseThrow(() -> {
-            return new JsonParseException("Invalid enchantment id: " + var4);
-         });
-         ResourceLocation var6 = new ResourceLocation(GsonHelper.getAsString(var1, "formula"));
-         ApplyBonusCount.FormulaDeserializer var7 = (ApplyBonusCount.FormulaDeserializer)ApplyBonusCount.FORMULAS.get(var6);
-         if (var7 == null) {
-            throw new JsonParseException("Invalid formula id: " + var6);
-         } else {
-            ApplyBonusCount.Formula var8;
-            if (var1.has("parameters")) {
-               var8 = var7.deserialize(GsonHelper.getAsJsonObject(var1, "parameters"), var2);
-            } else {
-               var8 = var7.deserialize(new JsonObject(), var2);
-            }
+      public static ApplyBonusCount.Formula deserialize(JsonObject var0, JsonDeserializationContext var1) {
+         int var2 = GsonHelper.getAsInt(var0, "bonusMultiplier");
+         return new ApplyBonusCount.UniformBonusCount(var2);
+      }
 
-            return new ApplyBonusCount(var3, var5, var8);
-         }
+      public ResourceLocation getType() {
+         return TYPE;
       }
    }
 
    static final class OreDrops implements ApplyBonusCount.Formula {
       public static final ResourceLocation TYPE = new ResourceLocation("ore_drops");
 
-      private OreDrops() {
+      OreDrops() {
       }
 
       public int calculateNewCount(Random var1, int var2, int var3) {
          if (var3 > 0) {
             int var4 = var1.nextInt(var3 + 2) - 1;
@@ -147,36 +143,10 @@
       public ResourceLocation getType() {
          return TYPE;
       }
    }
 
-   static final class UniformBonusCount implements ApplyBonusCount.Formula {
-      public static final ResourceLocation TYPE = new ResourceLocation("uniform_bonus_count");
-      private final int bonusMultiplier;
-
-      public UniformBonusCount(int var1) {
-         this.bonusMultiplier = var1;
-      }
-
-      public int calculateNewCount(Random var1, int var2, int var3) {
-         return var2 + var1.nextInt(this.bonusMultiplier * var3 + 1);
-      }
-
-      public void serializeParams(JsonObject var1, JsonSerializationContext var2) {
-         var1.addProperty("bonusMultiplier", this.bonusMultiplier);
-      }
-
-      public static ApplyBonusCount.Formula deserialize(JsonObject var0, JsonDeserializationContext var1) {
-         int var2 = GsonHelper.getAsInt(var0, "bonusMultiplier");
-         return new ApplyBonusCount.UniformBonusCount(var2);
-      }
-
-      public ResourceLocation getType() {
-         return TYPE;
-      }
-   }
-
    static final class BinomialWithBonusCount implements ApplyBonusCount.Formula {
       public static final ResourceLocation TYPE = new ResourceLocation("binomial_with_bonus_count");
       private final int extraRounds;
       private final float probability;
 
@@ -213,13 +183,43 @@
 
    interface FormulaDeserializer {
       ApplyBonusCount.Formula deserialize(JsonObject var1, JsonDeserializationContext var2);
    }
 
-   interface Formula {
-      int calculateNewCount(Random var1, int var2, int var3);
+   public static class Serializer extends LootItemConditionalFunction.Serializer<ApplyBonusCount> {
+      public Serializer() {
+      }
 
-      void serializeParams(JsonObject var1, JsonSerializationContext var2);
+      public void serialize(JsonObject var1, ApplyBonusCount var2, JsonSerializationContext var3) {
+         super.serialize(var1, (LootItemConditionalFunction)var2, var3);
+         var1.addProperty("enchantment", Registry.ENCHANTMENT.getKey(var2.enchantment).toString());
+         var1.addProperty("formula", var2.formula.getType().toString());
+         JsonObject var4 = new JsonObject();
+         var2.formula.serializeParams(var4, var3);
+         if (var4.size() > 0) {
+            var1.add("parameters", var4);
+         }
 
-      ResourceLocation getType();
+      }
+
+      public ApplyBonusCount deserialize(JsonObject var1, JsonDeserializationContext var2, LootItemCondition[] var3) {
+         ResourceLocation var4 = new ResourceLocation(GsonHelper.getAsString(var1, "enchantment"));
+         Enchantment var5 = (Enchantment)Registry.ENCHANTMENT.getOptional(var4).orElseThrow(() -> {
+            return new JsonParseException("Invalid enchantment id: " + var4);
+         });
+         ResourceLocation var6 = new ResourceLocation(GsonHelper.getAsString(var1, "formula"));
+         ApplyBonusCount.FormulaDeserializer var7 = (ApplyBonusCount.FormulaDeserializer)ApplyBonusCount.FORMULAS.get(var6);
+         if (var7 == null) {
+            throw new JsonParseException("Invalid formula id: " + var6);
+         } else {
+            ApplyBonusCount.Formula var8;
+            if (var1.has("parameters")) {
+               var8 = var7.deserialize(GsonHelper.getAsJsonObject(var1, "parameters"), var2);
+            } else {
+               var8 = var7.deserialize(new JsonObject(), var2);
+            }
+
+            return new ApplyBonusCount(var3, var5, var8);
+         }
+      }
    }
 }
