--- net/minecraft/world/level/storage/loot/functions/CopyNameFunction.java
+++ net/minecraft/world/level/storage/loot/functions/CopyNameFunction.java
@@ -12,13 +12,13 @@
 import net.minecraft.world.level.storage.loot.parameters.LootContextParam;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParams;
 import net.minecraft.world.level.storage.loot.predicates.LootItemCondition;
 
 public class CopyNameFunction extends LootItemConditionalFunction {
-   private final CopyNameFunction.NameSource source;
+   final CopyNameFunction.NameSource source;
 
-   private CopyNameFunction(LootItemCondition[] var1, CopyNameFunction.NameSource var2) {
+   CopyNameFunction(LootItemCondition[] var1, CopyNameFunction.NameSource var2) {
       super(var1);
       this.source = var2;
    }
 
    public LootItemFunctionType getType() {
@@ -45,25 +45,10 @@
       return simpleBuilder((var1) -> {
          return new CopyNameFunction(var1, var0);
       });
    }
 
-   public static class Serializer extends LootItemConditionalFunction.Serializer<CopyNameFunction> {
-      public Serializer() {
-      }
-
-      public void serialize(JsonObject var1, CopyNameFunction var2, JsonSerializationContext var3) {
-         super.serialize(var1, (LootItemConditionalFunction)var2, var3);
-         var1.addProperty("source", var2.source.name);
-      }
-
-      public CopyNameFunction deserialize(JsonObject var1, JsonDeserializationContext var2, LootItemCondition[] var3) {
-         CopyNameFunction.NameSource var4 = CopyNameFunction.NameSource.getByName(GsonHelper.getAsString(var1, "source"));
-         return new CopyNameFunction(var3, var4);
-      }
-   }
-
    public static enum NameSource {
       THIS("this", LootContextParams.THIS_ENTITY),
       KILLER("killer", LootContextParams.KILLER_ENTITY),
       KILLER_PLAYER("killer_player", LootContextParams.LAST_DAMAGE_PLAYER),
       BLOCK_ENTITY("block_entity", LootContextParams.BLOCK_ENTITY);
@@ -88,6 +73,21 @@
          }
 
          throw new IllegalArgumentException("Invalid name source " + var0);
       }
    }
+
+   public static class Serializer extends LootItemConditionalFunction.Serializer<CopyNameFunction> {
+      public Serializer() {
+      }
+
+      public void serialize(JsonObject var1, CopyNameFunction var2, JsonSerializationContext var3) {
+         super.serialize(var1, (LootItemConditionalFunction)var2, var3);
+         var1.addProperty("source", var2.source.name);
+      }
+
+      public CopyNameFunction deserialize(JsonObject var1, JsonDeserializationContext var2, LootItemCondition[] var3) {
+         CopyNameFunction.NameSource var4 = CopyNameFunction.NameSource.getByName(GsonHelper.getAsString(var1, "source"));
+         return new CopyNameFunction(var3, var4);
+      }
+   }
 }
