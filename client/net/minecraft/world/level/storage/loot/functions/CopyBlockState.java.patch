--- net/minecraft/world/level/storage/loot/functions/CopyBlockState.java
+++ net/minecraft/world/level/storage/loot/functions/CopyBlockState.java
@@ -5,10 +5,11 @@
 import com.google.gson.JsonArray;
 import com.google.gson.JsonDeserializationContext;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonSerializationContext;
 import java.util.HashSet;
+import java.util.Objects;
 import java.util.Set;
 import java.util.stream.Stream;
 import net.minecraft.core.Registry;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.resources.ResourceLocation;
@@ -22,14 +23,14 @@
 import net.minecraft.world.level.storage.loot.parameters.LootContextParam;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParams;
 import net.minecraft.world.level.storage.loot.predicates.LootItemCondition;
 
 public class CopyBlockState extends LootItemConditionalFunction {
-   private final Block block;
-   private final Set<Property<?>> properties;
+   final Block block;
+   final Set<Property<?>> properties;
 
-   private CopyBlockState(LootItemCondition[] var1, Block var2, Set<Property<?>> var3) {
+   CopyBlockState(LootItemCondition[] var1, Block var2, Set<Property<?>> var3) {
       super(var1);
       this.block = var2;
       this.properties = var3;
    }
 
@@ -52,11 +53,11 @@
             var5 = new CompoundTag();
             var4.put("BlockStateTag", var5);
          }
 
          Stream var10000 = this.properties.stream();
-         var3.getClass();
+         Objects.requireNonNull(var3);
          var10000.filter(var3::hasProperty).forEach((var2x) -> {
             var5.putString(var2x.getName(), serialize(var3, var2x));
          });
       }
 
@@ -70,10 +71,36 @@
    private static <T extends Comparable<T>> String serialize(BlockState var0, Property<T> var1) {
       Comparable var2 = var0.getValue(var1);
       return var1.getName(var2);
    }
 
+   public static class Builder extends LootItemConditionalFunction.Builder<CopyBlockState.Builder> {
+      private final Block block;
+      private final Set<Property<?>> properties = Sets.newHashSet();
+
+      Builder(Block var1) {
+         this.block = var1;
+      }
+
+      public CopyBlockState.Builder copy(Property<?> var1) {
+         if (!this.block.getStateDefinition().getProperties().contains(var1)) {
+            throw new IllegalStateException("Property " + var1 + " is not present on block " + this.block);
+         } else {
+            this.properties.add(var1);
+            return this;
+         }
+      }
+
+      protected CopyBlockState.Builder getThis() {
+         return this;
+      }
+
+      public LootItemFunction build() {
+         return new CopyBlockState(this.getConditions(), this.block, this.properties);
+      }
+   }
+
    public static class Serializer extends LootItemConditionalFunction.Serializer<CopyBlockState> {
       public Serializer() {
       }
 
       public void serialize(JsonObject var1, CopyBlockState var2, JsonSerializationContext var3) {
@@ -101,33 +128,6 @@
          }
 
          return new CopyBlockState(var3, var5, var7);
       }
    }
-
-   public static class Builder extends LootItemConditionalFunction.Builder<CopyBlockState.Builder> {
-      private final Block block;
-      private final Set<Property<?>> properties;
-
-      private Builder(Block var1) {
-         this.properties = Sets.newHashSet();
-         this.block = var1;
-      }
-
-      public CopyBlockState.Builder copy(Property<?> var1) {
-         if (!this.block.getStateDefinition().getProperties().contains(var1)) {
-            throw new IllegalStateException("Property " + var1 + " is not present on block " + this.block);
-         } else {
-            this.properties.add(var1);
-            return this;
-         }
-      }
-
-      protected CopyBlockState.Builder getThis() {
-         return this;
-      }
-
-      public LootItemFunction build() {
-         return new CopyBlockState(this.getConditions(), this.block, this.properties);
-      }
-   }
 }
