--- net/minecraft/world/level/storage/loot/predicates/EntityHasScoreCondition.java
+++ net/minecraft/world/level/storage/loot/predicates/EntityHasScoreCondition.java
@@ -10,33 +10,36 @@
 import java.util.Iterator;
 import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.Set;
 import java.util.Map.Entry;
+import java.util.stream.Stream;
 import net.minecraft.util.GsonHelper;
 import net.minecraft.world.entity.Entity;
+import net.minecraft.world.level.storage.loot.IntRange;
 import net.minecraft.world.level.storage.loot.LootContext;
-import net.minecraft.world.level.storage.loot.RandomValueBounds;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParam;
 import net.minecraft.world.scores.Objective;
 import net.minecraft.world.scores.Scoreboard;
 
 public class EntityHasScoreCondition implements LootItemCondition {
-   private final Map<String, RandomValueBounds> scores;
+   private final Map<String, IntRange> scores;
    private final LootContext.EntityTarget entityTarget;
 
-   private EntityHasScoreCondition(Map<String, RandomValueBounds> var1, LootContext.EntityTarget var2) {
+   private EntityHasScoreCondition(Map<String, IntRange> var1, LootContext.EntityTarget var2) {
       this.scores = ImmutableMap.copyOf(var1);
       this.entityTarget = var2;
    }
 
    public LootItemConditionType getType() {
       return LootItemConditions.ENTITY_SCORES;
    }
 
    public Set<LootContextParam<?>> getReferencedContextParams() {
-      return ImmutableSet.of(this.entityTarget.getParam());
+      return (Set)Stream.concat(Stream.of(this.entityTarget.getParam()), this.scores.values().stream().flatMap((var0) -> {
+         return var0.getReferencedContextParams().stream();
+      })).collect(ImmutableSet.toImmutableSet());
    }
 
    public boolean test(LootContext var1) {
       Entity var2 = (Entity)var1.getParamOrNull(this.entityTarget.getParam());
       if (var2 == null) {
@@ -50,23 +53,23 @@
             if (!var4.hasNext()) {
                return true;
             }
 
             var5 = (Entry)var4.next();
-         } while(this.hasScore(var2, var3, (String)var5.getKey(), (RandomValueBounds)var5.getValue()));
+         } while(this.hasScore(var1, var2, var3, (String)var5.getKey(), (IntRange)var5.getValue()));
 
          return false;
       }
    }
 
-   protected boolean hasScore(Entity var1, Scoreboard var2, String var3, RandomValueBounds var4) {
-      Objective var5 = var2.getObjective(var3);
-      if (var5 == null) {
+   protected boolean hasScore(LootContext var1, Entity var2, Scoreboard var3, String var4, IntRange var5) {
+      Objective var6 = var3.getObjective(var4);
+      if (var6 == null) {
          return false;
       } else {
-         String var6 = var1.getScoreboardName();
-         return !var2.hasPlayerScore(var6, var5) ? false : var4.matchesValue(var2.getOrCreatePlayerScore(var6, var5).getScore());
+         String var7 = var2.getScoreboardName();
+         return !var3.hasPlayerScore(var7, var6) ? false : var5.test(var1, var3.getOrCreatePlayerScore(var7, var6).getScore());
       }
    }
 
    public static class Serializer implements net.minecraft.world.level.storage.loot.Serializer<EntityHasScoreCondition> {
       public Serializer() {
@@ -90,11 +93,11 @@
          LinkedHashMap var4 = Maps.newLinkedHashMap();
          Iterator var5 = var3.iterator();
 
          while(var5.hasNext()) {
             Entry var6 = (Entry)var5.next();
-            var4.put(var6.getKey(), GsonHelper.convertToObject((JsonElement)var6.getValue(), "score", var2, RandomValueBounds.class));
+            var4.put(var6.getKey(), GsonHelper.convertToObject((JsonElement)var6.getValue(), "score", var2, IntRange.class));
          }
 
          return new EntityHasScoreCondition(var4, (LootContext.EntityTarget)GsonHelper.getAsObject(var1, "entity", var2, LootContext.EntityTarget.class));
       }
    }
