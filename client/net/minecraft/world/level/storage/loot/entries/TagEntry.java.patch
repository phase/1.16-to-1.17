--- net/minecraft/world/level/storage/loot/entries/TagEntry.java
+++ net/minecraft/world/level/storage/loot/entries/TagEntry.java
@@ -4,10 +4,11 @@
 import com.google.gson.JsonObject;
 import com.google.gson.JsonParseException;
 import com.google.gson.JsonSerializationContext;
 import java.util.Iterator;
 import java.util.function.Consumer;
+import net.minecraft.core.Registry;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.tags.SerializationTags;
 import net.minecraft.tags.Tag;
 import net.minecraft.util.GsonHelper;
 import net.minecraft.world.item.Item;
@@ -69,21 +70,21 @@
       public Serializer() {
       }
 
       public void serializeCustom(JsonObject var1, TagEntry var2, JsonSerializationContext var3) {
          super.serializeCustom(var1, (LootPoolSingletonContainer)var2, var3);
-         var1.addProperty("name", SerializationTags.getInstance().getItems().getIdOrThrow(var2.tag).toString());
+         var1.addProperty("name", SerializationTags.getInstance().getIdOrThrow(Registry.ITEM_REGISTRY, var2.tag, () -> {
+            return new IllegalStateException("Unknown item tag");
+         }).toString());
          var1.addProperty("expand", var2.expand);
       }
 
       protected TagEntry deserialize(JsonObject var1, JsonDeserializationContext var2, int var3, int var4, LootItemCondition[] var5, LootItemFunction[] var6) {
          ResourceLocation var7 = new ResourceLocation(GsonHelper.getAsString(var1, "name"));
-         Tag var8 = SerializationTags.getInstance().getItems().getTag(var7);
-         if (var8 == null) {
-            throw new JsonParseException("Can't find tag: " + var7);
-         } else {
-            boolean var9 = GsonHelper.getAsBoolean(var1, "expand");
-            return new TagEntry(var8, var9, var3, var4, var5, var6);
-         }
+         Tag var8 = SerializationTags.getInstance().getTagOrThrow(Registry.ITEM_REGISTRY, var7, (var0) -> {
+            return new JsonParseException("Can't find tag: " + var0);
+         });
+         boolean var9 = GsonHelper.getAsBoolean(var1, "expand");
+         return new TagEntry(var8, var9, var3, var4, var5, var6);
       }
    }
 }
