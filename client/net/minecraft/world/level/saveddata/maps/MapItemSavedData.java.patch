--- net/minecraft/world/level/saveddata/maps/MapItemSavedData.java
+++ net/minecraft/world/level/saveddata/maps/MapItemSavedData.java
@@ -2,13 +2,15 @@
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.mojang.serialization.DataResult;
 import com.mojang.serialization.Dynamic;
+import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.nbt.NbtOps;
@@ -19,96 +21,103 @@
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.util.Mth;
 import net.minecraft.world.entity.decoration.ItemFrame;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
-import net.minecraft.world.item.MapItem;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.dimension.DimensionType;
 import net.minecraft.world.level.saveddata.SavedData;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class MapItemSavedData extends SavedData {
    private static final Logger LOGGER = LogManager.getLogger();
-   public int x;
-   public int z;
-   public ResourceKey<Level> dimension;
-   public boolean trackingPosition;
-   public boolean unlimitedTracking;
-   public byte scale;
+   private static final int MAP_SIZE = 128;
+   private static final int HALF_MAP_SIZE = 64;
+   public static final int MAX_SCALE = 4;
+   public final int x;
+   public final int z;
+   public final ResourceKey<Level> dimension;
+   private final boolean trackingPosition;
+   private final boolean unlimitedTracking;
+   public final byte scale;
    public byte[] colors = new byte[16384];
-   public boolean locked;
-   public final List<MapItemSavedData.HoldingPlayer> carriedBy = Lists.newArrayList();
+   public final boolean locked;
+   private final List<MapItemSavedData.HoldingPlayer> carriedBy = Lists.newArrayList();
    private final Map<Player, MapItemSavedData.HoldingPlayer> carriedByPlayers = Maps.newHashMap();
    private final Map<String, MapBanner> bannerMarkers = Maps.newHashMap();
-   public final Map<String, MapDecoration> decorations = Maps.newLinkedHashMap();
+   final Map<String, MapDecoration> decorations = Maps.newLinkedHashMap();
    private final Map<String, MapFrame> frameMarkers = Maps.newHashMap();
 
-   public MapItemSavedData(String var1) {
-      super(var1);
-   }
-
-   public void setProperties(int var1, int var2, int var3, boolean var4, boolean var5, ResourceKey<Level> var6) {
-      this.scale = (byte)var3;
-      this.setOrigin((double)var1, (double)var2, this.scale);
-      this.dimension = var6;
+   private MapItemSavedData(int var1, int var2, byte var3, boolean var4, boolean var5, boolean var6, ResourceKey<Level> var7) {
+      this.scale = var3;
+      this.x = var1;
+      this.z = var2;
+      this.dimension = var7;
       this.trackingPosition = var4;
       this.unlimitedTracking = var5;
+      this.locked = var6;
       this.setDirty();
    }
 
-   public void setOrigin(double var1, double var3, int var5) {
-      int var6 = 128 * (1 << var5);
-      int var7 = Mth.floor((var1 + 64.0D) / (double)var6);
-      int var8 = Mth.floor((var3 + 64.0D) / (double)var6);
-      this.x = var7 * var6 + var6 / 2 - 64;
-      this.z = var8 * var6 + var6 / 2 - 64;
+   public static MapItemSavedData createFresh(double var0, double var2, byte var4, boolean var5, boolean var6, ResourceKey<Level> var7) {
+      int var8 = 128 * (1 << var4);
+      int var9 = Mth.floor((var0 + 64.0D) / (double)var8);
+      int var10 = Mth.floor((var2 + 64.0D) / (double)var8);
+      int var11 = var9 * var8 + var8 / 2 - 64;
+      int var12 = var10 * var8 + var8 / 2 - 64;
+      return new MapItemSavedData(var11, var12, var4, var5, var6, false, var7);
    }
 
-   public void load(CompoundTag var1) {
-      DataResult var10001 = DimensionType.parseLegacy(new Dynamic(NbtOps.INSTANCE, var1.get("dimension")));
-      Logger var10002 = LOGGER;
-      var10002.getClass();
-      this.dimension = (ResourceKey)var10001.resultOrPartial(var10002::error).orElseThrow(() -> {
-         return new IllegalArgumentException("Invalid map dimension: " + var1.get("dimension"));
+   public static MapItemSavedData createForClient(byte var0, boolean var1, ResourceKey<Level> var2) {
+      return new MapItemSavedData(0, 0, var0, false, false, var1, var2);
+   }
+
+   public static MapItemSavedData load(CompoundTag var0) {
+      DataResult var10000 = DimensionType.parseLegacy(new Dynamic(NbtOps.INSTANCE, var0.get("dimension")));
+      Logger var10001 = LOGGER;
+      Objects.requireNonNull(var10001);
+      ResourceKey var1 = (ResourceKey)var10000.resultOrPartial(var10001::error).orElseThrow(() -> {
+         return new IllegalArgumentException("Invalid map dimension: " + var0.get("dimension"));
       });
-      this.x = var1.getInt("xCenter");
-      this.z = var1.getInt("zCenter");
-      this.scale = (byte)Mth.clamp(var1.getByte("scale"), 0, 4);
-      this.trackingPosition = !var1.contains("trackingPosition", 1) || var1.getBoolean("trackingPosition");
-      this.unlimitedTracking = var1.getBoolean("unlimitedTracking");
-      this.locked = var1.getBoolean("locked");
-      this.colors = var1.getByteArray("colors");
-      if (this.colors.length != 16384) {
-         this.colors = new byte[16384];
+      int var2 = var0.getInt("xCenter");
+      int var3 = var0.getInt("zCenter");
+      byte var4 = (byte)Mth.clamp((int)var0.getByte("scale"), (int)0, (int)4);
+      boolean var5 = !var0.contains("trackingPosition", 1) || var0.getBoolean("trackingPosition");
+      boolean var6 = var0.getBoolean("unlimitedTracking");
+      boolean var7 = var0.getBoolean("locked");
+      MapItemSavedData var8 = new MapItemSavedData(var2, var3, var4, var5, var6, var7, var1);
+      byte[] var9 = var0.getByteArray("colors");
+      if (var9.length == 16384) {
+         var8.colors = var9;
       }
 
-      ListTag var2 = var1.getList("banners", 10);
+      ListTag var10 = var0.getList("banners", 10);
 
-      for(int var3 = 0; var3 < var2.size(); ++var3) {
-         MapBanner var4 = MapBanner.load(var2.getCompound(var3));
-         this.bannerMarkers.put(var4.getId(), var4);
-         this.addDecoration(var4.getDecoration(), (LevelAccessor)null, var4.getId(), (double)var4.getPos().getX(), (double)var4.getPos().getZ(), 180.0D, var4.getName());
+      for(int var11 = 0; var11 < var10.size(); ++var11) {
+         MapBanner var12 = MapBanner.load(var10.getCompound(var11));
+         var8.bannerMarkers.put(var12.getId(), var12);
+         var8.addDecoration(var12.getDecoration(), (LevelAccessor)null, var12.getId(), (double)var12.getPos().getX(), (double)var12.getPos().getZ(), 180.0D, var12.getName());
       }
 
-      ListTag var6 = var1.getList("frames", 10);
+      ListTag var14 = var0.getList("frames", 10);
 
-      for(int var7 = 0; var7 < var6.size(); ++var7) {
-         MapFrame var5 = MapFrame.load(var6.getCompound(var7));
-         this.frameMarkers.put(var5.getId(), var5);
-         this.addDecoration(MapDecoration.Type.FRAME, (LevelAccessor)null, "frame-" + var5.getEntityId(), (double)var5.getPos().getX(), (double)var5.getPos().getZ(), (double)var5.getRotation(), (Component)null);
+      for(int var15 = 0; var15 < var14.size(); ++var15) {
+         MapFrame var13 = MapFrame.load(var14.getCompound(var15));
+         var8.frameMarkers.put(var13.getId(), var13);
+         var8.addDecoration(MapDecoration.Type.FRAME, (LevelAccessor)null, "frame-" + var13.getEntityId(), (double)var13.getPos().getX(), (double)var13.getPos().getZ(), (double)var13.getRotation(), (Component)null);
       }
 
+      return var8;
    }
 
    public CompoundTag save(CompoundTag var1) {
       DataResult var10000 = ResourceLocation.CODEC.encodeStart(NbtOps.INSTANCE, this.dimension.location());
       Logger var10001 = LOGGER;
-      var10001.getClass();
+      Objects.requireNonNull(var10001);
       var10000.resultOrPartial(var10001::error).ifPresent((var1x) -> {
          var1.put("dimension", var1x);
       });
       var1.putInt("xCenter", this.x);
       var1.putInt("zCenter", this.z);
@@ -136,51 +145,54 @@
 
       var1.put("frames", var6);
       return var1;
    }
 
-   public void lockData(MapItemSavedData var1) {
-      this.locked = true;
-      this.x = var1.x;
-      this.z = var1.z;
-      this.bannerMarkers.putAll(var1.bannerMarkers);
-      this.decorations.putAll(var1.decorations);
-      System.arraycopy(var1.colors, 0, this.colors, 0, var1.colors.length);
-      this.setDirty();
+   public MapItemSavedData locked() {
+      MapItemSavedData var1 = new MapItemSavedData(this.x, this.z, this.scale, this.trackingPosition, this.unlimitedTracking, true, this.dimension);
+      var1.bannerMarkers.putAll(this.bannerMarkers);
+      var1.decorations.putAll(this.decorations);
+      System.arraycopy(this.colors, 0, var1.colors, 0, this.colors.length);
+      var1.setDirty();
+      return var1;
    }
 
+   public MapItemSavedData scaled(int var1) {
+      return createFresh((double)this.x, (double)this.z, (byte)Mth.clamp((int)(this.scale + var1), (int)0, (int)4), this.trackingPosition, this.unlimitedTracking, this.dimension);
+   }
+
    public void tickCarriedBy(Player var1, ItemStack var2) {
       if (!this.carriedByPlayers.containsKey(var1)) {
          MapItemSavedData.HoldingPlayer var3 = new MapItemSavedData.HoldingPlayer(var1);
          this.carriedByPlayers.put(var1, var3);
          this.carriedBy.add(var3);
       }
 
-      if (!var1.inventory.contains(var2)) {
+      if (!var1.getInventory().contains(var2)) {
          this.decorations.remove(var1.getName().getString());
       }
 
       for(int var7 = 0; var7 < this.carriedBy.size(); ++var7) {
          MapItemSavedData.HoldingPlayer var4 = (MapItemSavedData.HoldingPlayer)this.carriedBy.get(var7);
          String var5 = var4.player.getName().getString();
-         if (!var4.player.removed && (var4.player.inventory.contains(var2) || var2.isFramed())) {
+         if (!var4.player.isRemoved() && (var4.player.getInventory().contains(var2) || var2.isFramed())) {
             if (!var2.isFramed() && var4.player.level.dimension() == this.dimension && this.trackingPosition) {
-               this.addDecoration(MapDecoration.Type.PLAYER, var4.player.level, var5, var4.player.getX(), var4.player.getZ(), (double)var4.player.yRot, (Component)null);
+               this.addDecoration(MapDecoration.Type.PLAYER, var4.player.level, var5, var4.player.getX(), var4.player.getZ(), (double)var4.player.getYRot(), (Component)null);
             }
          } else {
             this.carriedByPlayers.remove(var4.player);
             this.carriedBy.remove(var4);
-            this.decorations.remove(var5);
+            this.removeDecoration(var5);
          }
       }
 
       if (var2.isFramed() && this.trackingPosition) {
          ItemFrame var8 = var2.getFrame();
          BlockPos var9 = var8.getPos();
          MapFrame var12 = (MapFrame)this.frameMarkers.get(MapFrame.frameId(var9));
          if (var12 != null && var8.getId() != var12.getEntityId() && this.frameMarkers.containsKey(var12.getId())) {
-            this.decorations.remove("frame-" + var12.getEntityId());
+            this.removeDecoration("frame-" + var12.getEntityId());
          }
 
          MapFrame var6 = new MapFrame(var9, var8.getDirection().get2DDataValue() * 90, var8.getId());
          this.addDecoration(MapDecoration.Type.FRAME, var1.level, "frame-" + var8.getId(), (double)var9.getX(), (double)var9.getZ(), (double)(var8.getDirection().get2DDataValue() * 90), (Component)null);
          this.frameMarkers.put(var6.getId(), var6);
@@ -198,10 +210,15 @@
          }
       }
 
    }
 
+   private void removeDecoration(String var1) {
+      this.decorations.remove(var1);
+      this.setDecorationsDirty();
+   }
+
    public static void addTargetDecoration(ItemStack var0, BlockPos var1, String var2, MapDecoration.Type var3) {
       ListTag var4;
       if (var0.hasTag() && var0.getTag().contains("Decorations", 9)) {
          var4 = var0.getTag().getList("Decorations", 10);
       } else {
@@ -233,25 +250,25 @@
       byte var16;
       if (var12 >= -63.0F && var13 >= -63.0F && var12 <= 63.0F && var13 <= 63.0F) {
          var8 += var8 < 0.0D ? -8.0D : 8.0D;
          var16 = (byte)((int)(var8 * 16.0D / 360.0D));
          if (this.dimension == Level.NETHER && var2 != null) {
-            int var19 = (int)(var2.getLevelData().getDayTime() / 10L);
-            var16 = (byte)(var19 * var19 * 34187121 + var19 * 121 >> 15 & 15);
+            int var20 = (int)(var2.getLevelData().getDayTime() / 10L);
+            var16 = (byte)(var20 * var20 * 34187121 + var20 * 121 >> 15 & 15);
          }
       } else {
          if (var1 != MapDecoration.Type.PLAYER) {
-            this.decorations.remove(var3);
+            this.removeDecoration(var3);
             return;
          }
 
          boolean var18 = true;
          if (Math.abs(var12) < 320.0F && Math.abs(var13) < 320.0F) {
             var1 = MapDecoration.Type.PLAYER_OFF_MAP;
          } else {
             if (!this.unlimitedTracking) {
-               this.decorations.remove(var3);
+               this.removeDecoration(var3);
                return;
             }
 
             var1 = MapDecoration.Type.PLAYER_OFF_LIMITS;
          }
@@ -272,30 +289,40 @@
          if (var13 >= 63.0F) {
             var15 = 127;
          }
       }
 
-      this.decorations.put(var3, new MapDecoration(var1, var14, var15, var16, var10));
+      MapDecoration var21 = new MapDecoration(var1, var14, var15, var16, var10);
+      MapDecoration var19 = (MapDecoration)this.decorations.put(var3, var21);
+      if (!var21.equals(var19)) {
+         this.setDecorationsDirty();
+      }
+
    }
 
    @Nullable
-   public Packet<?> getUpdatePacket(ItemStack var1, BlockGetter var2, Player var3) {
-      MapItemSavedData.HoldingPlayer var4 = (MapItemSavedData.HoldingPlayer)this.carriedByPlayers.get(var3);
-      return var4 == null ? null : var4.nextUpdatePacket(var1);
+   public Packet<?> getUpdatePacket(int var1, Player var2) {
+      MapItemSavedData.HoldingPlayer var3 = (MapItemSavedData.HoldingPlayer)this.carriedByPlayers.get(var2);
+      return var3 == null ? null : var3.nextUpdatePacket(var1);
    }
 
-   public void setDirty(int var1, int var2) {
+   private void setColorsDirty(int var1, int var2) {
       this.setDirty();
       Iterator var3 = this.carriedBy.iterator();
 
       while(var3.hasNext()) {
          MapItemSavedData.HoldingPlayer var4 = (MapItemSavedData.HoldingPlayer)var3.next();
-         var4.markDirty(var1, var2);
+         var4.markColorsDirty(var1, var2);
       }
 
    }
 
+   private void setDecorationsDirty() {
+      this.setDirty();
+      this.carriedBy.forEach(MapItemSavedData.HoldingPlayer::markDecorationsDirty);
+   }
+
    public MapItemSavedData.HoldingPlayer getHoldingPlayer(Player var1) {
       MapItemSavedData.HoldingPlayer var2 = (MapItemSavedData.HoldingPlayer)this.carriedByPlayers.get(var1);
       if (var2 == null) {
          var2 = new MapItemSavedData.HoldingPlayer(var1);
          this.carriedByPlayers.put(var1, var2);
@@ -310,34 +337,22 @@
       double var5 = (double)var2.getZ() + 0.5D;
       int var7 = 1 << this.scale;
       double var8 = (var3 - (double)this.x) / (double)var7;
       double var10 = (var5 - (double)this.z) / (double)var7;
       boolean var12 = true;
-      boolean var13 = false;
       if (var8 >= -63.0D && var10 >= -63.0D && var8 <= 63.0D && var10 <= 63.0D) {
-         MapBanner var14 = MapBanner.fromWorld(var1, var2);
-         if (var14 == null) {
+         MapBanner var13 = MapBanner.fromWorld(var1, var2);
+         if (var13 == null) {
             return;
          }
 
-         boolean var15 = true;
-         if (this.bannerMarkers.containsKey(var14.getId()) && ((MapBanner)this.bannerMarkers.get(var14.getId())).equals(var14)) {
-            this.bannerMarkers.remove(var14.getId());
-            this.decorations.remove(var14.getId());
-            var15 = false;
-            var13 = true;
+         if (this.bannerMarkers.remove(var13.getId(), var13)) {
+            this.removeDecoration(var13.getId());
+         } else {
+            this.bannerMarkers.put(var13.getId(), var13);
+            this.addDecoration(var13.getDecoration(), var1, var13.getId(), var3, var5, 180.0D, var13.getName());
          }
-
-         if (var15) {
-            this.bannerMarkers.put(var14.getId(), var14);
-            this.addDecoration(var14.getDecoration(), var1, var14.getId(), var3, var5, 180.0D, var14.getName());
-            var13 = true;
-         }
-
-         if (var13) {
-            this.setDirty();
-         }
       }
 
    }
 
    public void checkBanners(BlockGetter var1, int var2, int var3) {
@@ -347,47 +362,123 @@
          MapBanner var5 = (MapBanner)var4.next();
          if (var5.getPos().getX() == var2 && var5.getPos().getZ() == var3) {
             MapBanner var6 = MapBanner.fromWorld(var1, var5.getPos());
             if (!var5.equals(var6)) {
                var4.remove();
-               this.decorations.remove(var5.getId());
+               this.removeDecoration(var5.getId());
             }
          }
       }
 
    }
 
+   public Collection<MapBanner> getBanners() {
+      return this.bannerMarkers.values();
+   }
+
    public void removedFromFrame(BlockPos var1, int var2) {
-      this.decorations.remove("frame-" + var2);
+      this.removeDecoration("frame-" + var2);
       this.frameMarkers.remove(MapFrame.frameId(var1));
    }
 
+   public boolean updateColor(int var1, int var2, byte var3) {
+      byte var4 = this.colors[var1 + var2 * 128];
+      if (var4 != var3) {
+         this.setColor(var1, var2, var3);
+         return true;
+      } else {
+         return false;
+      }
+   }
+
+   public void setColor(int var1, int var2, byte var3) {
+      this.colors[var1 + var2 * 128] = var3;
+      this.setColorsDirty(var1, var2);
+   }
+
+   public boolean isExplorationMap() {
+      Iterator var1 = this.decorations.values().iterator();
+
+      MapDecoration var2;
+      do {
+         if (!var1.hasNext()) {
+            return false;
+         }
+
+         var2 = (MapDecoration)var1.next();
+      } while(var2.getType() != MapDecoration.Type.MANSION && var2.getType() != MapDecoration.Type.MONUMENT);
+
+      return true;
+   }
+
+   public void addClientSideDecorations(List<MapDecoration> var1) {
+      this.decorations.clear();
+
+      for(int var2 = 0; var2 < var1.size(); ++var2) {
+         MapDecoration var3 = (MapDecoration)var1.get(var2);
+         this.decorations.put("icon-" + var2, var3);
+      }
+
+   }
+
+   public Iterable<MapDecoration> getDecorations() {
+      return this.decorations.values();
+   }
+
    public class HoldingPlayer {
       public final Player player;
       private boolean dirtyData = true;
       private int minDirtyX;
       private int minDirtyY;
       private int maxDirtyX = 127;
       private int maxDirtyY = 127;
+      private boolean dirtyDecorations = true;
       private int tick;
       public int step;
 
-      public HoldingPlayer(Player var2) {
+      HoldingPlayer(Player var2) {
          this.player = var2;
       }
 
+      private MapItemSavedData.MapPatch createPatch() {
+         int var1 = this.minDirtyX;
+         int var2 = this.minDirtyY;
+         int var3 = this.maxDirtyX + 1 - this.minDirtyX;
+         int var4 = this.maxDirtyY + 1 - this.minDirtyY;
+         byte[] var5 = new byte[var3 * var4];
+
+         for(int var6 = 0; var6 < var3; ++var6) {
+            for(int var7 = 0; var7 < var4; ++var7) {
+               var5[var6 + var7 * var3] = MapItemSavedData.this.colors[var1 + var6 + (var2 + var7) * 128];
+            }
+         }
+
+         return new MapItemSavedData.MapPatch(var1, var2, var3, var4, var5);
+      }
+
       @Nullable
-      public Packet<?> nextUpdatePacket(ItemStack var1) {
+      Packet<?> nextUpdatePacket(int var1) {
+         MapItemSavedData.MapPatch var2;
          if (this.dirtyData) {
             this.dirtyData = false;
-            return new ClientboundMapItemDataPacket(MapItem.getMapId(var1), MapItemSavedData.this.scale, MapItemSavedData.this.trackingPosition, MapItemSavedData.this.locked, MapItemSavedData.this.decorations.values(), MapItemSavedData.this.colors, this.minDirtyX, this.minDirtyY, this.maxDirtyX + 1 - this.minDirtyX, this.maxDirtyY + 1 - this.minDirtyY);
+            var2 = this.createPatch();
          } else {
-            return this.tick++ % 5 == 0 ? new ClientboundMapItemDataPacket(MapItem.getMapId(var1), MapItemSavedData.this.scale, MapItemSavedData.this.trackingPosition, MapItemSavedData.this.locked, MapItemSavedData.this.decorations.values(), MapItemSavedData.this.colors, 0, 0, 0, 0) : null;
+            var2 = null;
          }
+
+         Collection var3;
+         if (this.dirtyDecorations && this.tick++ % 5 == 0) {
+            this.dirtyDecorations = false;
+            var3 = MapItemSavedData.this.decorations.values();
+         } else {
+            var3 = null;
+         }
+
+         return var3 == null && var2 == null ? null : new ClientboundMapItemDataPacket(var1, MapItemSavedData.this.scale, MapItemSavedData.this.locked, var3, var2);
       }
 
-      public void markDirty(int var1, int var2) {
+      void markColorsDirty(int var1, int var2) {
          if (this.dirtyData) {
             this.minDirtyX = Math.min(this.minDirtyX, var1);
             this.minDirtyY = Math.min(this.minDirtyY, var2);
             this.maxDirtyX = Math.max(this.maxDirtyX, var1);
             this.maxDirtyY = Math.max(this.maxDirtyY, var2);
@@ -398,7 +489,36 @@
             this.maxDirtyX = var1;
             this.maxDirtyY = var2;
          }
 
       }
+
+      private void markDecorationsDirty() {
+         this.dirtyDecorations = true;
+      }
    }
+
+   public static class MapPatch {
+      public final int startX;
+      public final int startY;
+      public final int width;
+      public final int height;
+      public final byte[] mapColors;
+
+      public MapPatch(int var1, int var2, int var3, int var4, byte[] var5) {
+         this.startX = var1;
+         this.startY = var2;
+         this.width = var3;
+         this.height = var4;
+         this.mapColors = var5;
+      }
+
+      public void applyToMap(MapItemSavedData var1) {
+         for(int var2 = 0; var2 < this.width; ++var2) {
+            for(int var3 = 0; var3 < this.height; ++var3) {
+               var1.setColor(this.startX + var2, this.startY + var3, this.mapColors[var2 + var3 * this.width]);
+            }
+         }
+
+      }
+   }
 }
