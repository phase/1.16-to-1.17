--- net/minecraft/world/level/GameRules.java
+++ net/minecraft/world/level/GameRules.java
@@ -25,10 +25,11 @@
 import net.minecraft.server.level.ServerPlayer;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class GameRules {
+   public static final int DEFAULT_RANDOM_TICK_SPEED = 3;
    private static final Logger LOGGER = LogManager.getLogger();
    private static final Map<GameRules.Key<?>, GameRules.Type<?>> GAME_RULE_TYPES = Maps.newTreeMap(Comparator.comparing((var0) -> {
       return var0.id;
    }));
    public static final GameRules.Key<GameRules.BooleanValue> RULE_DOFIRETICK;
@@ -58,14 +59,16 @@
    public static final GameRules.Key<GameRules.BooleanValue> RULE_DOINSOMNIA;
    public static final GameRules.Key<GameRules.BooleanValue> RULE_DO_IMMEDIATE_RESPAWN;
    public static final GameRules.Key<GameRules.BooleanValue> RULE_DROWNING_DAMAGE;
    public static final GameRules.Key<GameRules.BooleanValue> RULE_FALL_DAMAGE;
    public static final GameRules.Key<GameRules.BooleanValue> RULE_FIRE_DAMAGE;
+   public static final GameRules.Key<GameRules.BooleanValue> RULE_FREEZE_DAMAGE;
    public static final GameRules.Key<GameRules.BooleanValue> RULE_DO_PATROL_SPAWNING;
    public static final GameRules.Key<GameRules.BooleanValue> RULE_DO_TRADER_SPAWNING;
    public static final GameRules.Key<GameRules.BooleanValue> RULE_FORGIVE_DEAD_PLAYERS;
    public static final GameRules.Key<GameRules.BooleanValue> RULE_UNIVERSAL_ANGER;
+   public static final GameRules.Key<GameRules.IntegerValue> RULE_PLAYERS_SLEEPING_PERCENTAGE;
    private final Map<GameRules.Key<?>, GameRules.Value<?>> rules;
 
    private static <T extends GameRules.Value<T>> GameRules.Key<T> register(String var0, GameRules.Category var1, GameRules.Type<T> var2) {
       GameRules.Key var3 = new GameRules.Key(var0, var1);
       GameRules.Type var4 = (GameRules.Type)GAME_RULE_TYPES.put(var3, var2);
@@ -190,14 +193,16 @@
 
       }));
       RULE_DROWNING_DAMAGE = register("drowningDamage", GameRules.Category.PLAYER, GameRules.BooleanValue.create(true));
       RULE_FALL_DAMAGE = register("fallDamage", GameRules.Category.PLAYER, GameRules.BooleanValue.create(true));
       RULE_FIRE_DAMAGE = register("fireDamage", GameRules.Category.PLAYER, GameRules.BooleanValue.create(true));
+      RULE_FREEZE_DAMAGE = register("freezeDamage", GameRules.Category.PLAYER, GameRules.BooleanValue.create(true));
       RULE_DO_PATROL_SPAWNING = register("doPatrolSpawning", GameRules.Category.SPAWNING, GameRules.BooleanValue.create(true));
       RULE_DO_TRADER_SPAWNING = register("doTraderSpawning", GameRules.Category.SPAWNING, GameRules.BooleanValue.create(true));
       RULE_FORGIVE_DEAD_PLAYERS = register("forgiveDeadPlayers", GameRules.Category.MOBS, GameRules.BooleanValue.create(true));
       RULE_UNIVERSAL_ANGER = register("universalAnger", GameRules.Category.MOBS, GameRules.BooleanValue.create(false));
+      RULE_PLAYERS_SLEEPING_PERCENTAGE = register("playersSleepingPercentage", GameRules.Category.PLAYER, GameRules.IntegerValue.create(100));
    }
 
    public static class BooleanValue extends GameRules.Value<GameRules.BooleanValue> {
       private boolean value;
 
@@ -281,10 +286,15 @@
 
       public int get() {
          return this.value;
       }
 
+      public void set(int var1, @Nullable MinecraftServer var2) {
+         this.value = var1;
+         this.onChanged(var2);
+      }
+
       public String serialize() {
          return Integer.toString(this.value);
       }
 
       protected void deserialize(String var1) {
