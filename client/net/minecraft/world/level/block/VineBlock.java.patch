--- net/minecraft/world/level/block/VineBlock.java
+++ net/minecraft/world/level/block/VineBlock.java
@@ -28,10 +28,11 @@
    public static final BooleanProperty NORTH;
    public static final BooleanProperty EAST;
    public static final BooleanProperty SOUTH;
    public static final BooleanProperty WEST;
    public static final Map<Direction, BooleanProperty> PROPERTY_BY_DIRECTION;
+   protected static final float AABB_OFFSET = 1.0F;
    private static final VoxelShape UP_AABB;
    private static final VoxelShape WEST_AABB;
    private static final VoxelShape EAST_AABB;
    private static final VoxelShape NORTH_AABB;
    private static final VoxelShape SOUTH_AABB;
@@ -158,11 +159,11 @@
          return !this.hasFaces(var7) ? Blocks.AIR.defaultBlockState() : var7;
       }
    }
 
    public void randomTick(BlockState var1, ServerLevel var2, BlockPos var3, Random var4) {
-      if (var2.random.nextInt(4) == 0) {
+      if (var4.nextInt(4) == 0) {
          Direction var5 = Direction.getRandom(var4);
          BlockPos var6 = var3.above();
          BlockPos var7;
          BlockState var8;
          Direction var18;
@@ -185,21 +186,21 @@
                      Direction var15 = var5.getOpposite();
                      if (var11 && var2.isEmptyBlock(var13) && isAcceptableNeighbour(var2, var3.relative(var18), var15)) {
                         var2.setBlock(var13, (BlockState)this.defaultBlockState().setValue(getPropertyForFace(var15), true), 2);
                      } else if (var12 && var2.isEmptyBlock(var14) && isAcceptableNeighbour(var2, var3.relative(var19), var15)) {
                         var2.setBlock(var14, (BlockState)this.defaultBlockState().setValue(getPropertyForFace(var15), true), 2);
-                     } else if ((double)var2.random.nextFloat() < 0.05D && isAcceptableNeighbour(var2, var7.above(), Direction.UP)) {
+                     } else if ((double)var4.nextFloat() < 0.05D && isAcceptableNeighbour(var2, var7.above(), Direction.UP)) {
                         var2.setBlock(var7, (BlockState)this.defaultBlockState().setValue(UP, true), 2);
                      }
                   }
                } else if (isAcceptableNeighbour(var2, var7, var5)) {
                   var2.setBlock(var3, (BlockState)var1.setValue(getPropertyForFace(var5), true), 2);
                }
 
             }
          } else {
-            if (var5 == Direction.UP && var3.getY() < 255) {
+            if (var5 == Direction.UP && var3.getY() < var2.getMaxBuildHeight() - 1) {
                if (this.canSupportAtFace(var2, var3, var5)) {
                   var2.setBlock(var3, (BlockState)var1.setValue(UP, true), 2);
                   return;
                }
 
@@ -227,11 +228,11 @@
                      var16 = (BlockState)var16.setValue(getPropertyForFace(var18), false);
                   }
                }
             }
 
-            if (var3.getY() > 0) {
+            if (var3.getY() > var2.getMinBuildHeight()) {
                var7 = var3.below();
                var8 = var2.getBlockState(var7);
                if (var8.isAir() || var8.is(this)) {
                   BlockState var9 = var8.isAir() ? this.defaultBlockState() : var8;
                   BlockState var10 = this.copyRandomFaces(var1, var9, var4);
