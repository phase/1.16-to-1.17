--- net/minecraft/world/level/block/DoorBlock.java
+++ net/minecraft/world/level/block/DoorBlock.java
@@ -4,10 +4,11 @@
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.util.Mth;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
+import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.context.BlockPlaceContext;
 import net.minecraft.world.level.BlockGetter;
@@ -21,10 +22,11 @@
 import net.minecraft.world.level.block.state.properties.BooleanProperty;
 import net.minecraft.world.level.block.state.properties.DirectionProperty;
 import net.minecraft.world.level.block.state.properties.DoorHingeSide;
 import net.minecraft.world.level.block.state.properties.DoubleBlockHalf;
 import net.minecraft.world.level.block.state.properties.EnumProperty;
+import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.material.Material;
 import net.minecraft.world.level.material.PushReaction;
 import net.minecraft.world.level.pathfinder.PathComputationType;
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.Vec3;
@@ -35,10 +37,11 @@
    public static final DirectionProperty FACING;
    public static final BooleanProperty OPEN;
    public static final EnumProperty<DoorHingeSide> HINGE;
    public static final BooleanProperty POWERED;
    public static final EnumProperty<DoubleBlockHalf> HALF;
+   protected static final float AABB_DOOR_THICKNESS = 3.0F;
    protected static final VoxelShape SOUTH_AABB;
    protected static final VoxelShape NORTH_AABB;
    protected static final VoxelShape WEST_AABB;
    protected static final VoxelShape EAST_AABB;
 
@@ -65,11 +68,11 @@
    }
 
    public BlockState updateShape(BlockState var1, Direction var2, BlockState var3, LevelAccessor var4, BlockPos var5, BlockPos var6) {
       DoubleBlockHalf var7 = (DoubleBlockHalf)var1.getValue(HALF);
       if (var2.getAxis() == Direction.Axis.Y && var7 == DoubleBlockHalf.LOWER == (var2 == Direction.UP)) {
-         return var3.is(this) && var3.getValue(HALF) != var7 ? (BlockState)((BlockState)((BlockState)((BlockState)var1.setValue(FACING, var3.getValue(FACING))).setValue(OPEN, var3.getValue(OPEN))).setValue(HINGE, var3.getValue(HINGE))).setValue(POWERED, var3.getValue(POWERED)) : Blocks.AIR.defaultBlockState();
+         return var3.is(this) && var3.getValue(HALF) != var7 ? (BlockState)((BlockState)((BlockState)((BlockState)var1.setValue(FACING, (Direction)var3.getValue(FACING))).setValue(OPEN, (Boolean)var3.getValue(OPEN))).setValue(HINGE, (DoorHingeSide)var3.getValue(HINGE))).setValue(POWERED, (Boolean)var3.getValue(POWERED)) : Blocks.AIR.defaultBlockState();
       } else {
          return var7 == DoubleBlockHalf.LOWER && var2 == Direction.DOWN && !var1.canSurvive(var4, var5) ? Blocks.AIR.defaultBlockState() : super.updateShape(var1, var2, var3, var4, var5, var6);
       }
    }
 
@@ -103,12 +106,12 @@
    }
 
    @Nullable
    public BlockState getStateForPlacement(BlockPlaceContext var1) {
       BlockPos var2 = var1.getClickedPos();
-      if (var2.getY() < 255 && var1.getLevel().getBlockState(var2.above()).canBeReplaced(var1)) {
-         Level var3 = var1.getLevel();
+      Level var3 = var1.getLevel();
+      if (var2.getY() < var3.getMaxBuildHeight() - 1 && var3.getBlockState(var2.above()).canBeReplaced(var1)) {
          boolean var4 = var3.hasNeighborSignal(var2) || var3.hasNeighborSignal(var2.above());
          return (BlockState)((BlockState)((BlockState)((BlockState)((BlockState)this.defaultBlockState().setValue(FACING, var1.getHorizontalDirection())).setValue(HINGE, this.getHinge(var1))).setValue(POWERED, var4)).setValue(OPEN, var4)).setValue(HALF, DoubleBlockHalf.LOWER);
       } else {
          return null;
       }
@@ -157,30 +160,33 @@
          return InteractionResult.PASS;
       } else {
          var1 = (BlockState)var1.cycle(OPEN);
          var2.setBlock(var3, var1, 10);
          var2.levelEvent(var4, (Boolean)var1.getValue(OPEN) ? this.getOpenSound() : this.getCloseSound(), var3, 0);
+         var2.gameEvent(var4, this.isOpen(var1) ? GameEvent.BLOCK_OPEN : GameEvent.BLOCK_CLOSE, var3);
          return InteractionResult.sidedSuccess(var2.isClientSide);
       }
    }
 
    public boolean isOpen(BlockState var1) {
       return (Boolean)var1.getValue(OPEN);
    }
 
-   public void setOpen(Level var1, BlockState var2, BlockPos var3, boolean var4) {
-      if (var2.is(this) && (Boolean)var2.getValue(OPEN) != var4) {
-         var1.setBlock(var3, (BlockState)var2.setValue(OPEN, var4), 10);
-         this.playSound(var1, var3, var4);
+   public void setOpen(@Nullable Entity var1, Level var2, BlockState var3, BlockPos var4, boolean var5) {
+      if (var3.is(this) && (Boolean)var3.getValue(OPEN) != var5) {
+         var2.setBlock(var4, (BlockState)var3.setValue(OPEN, var5), 10);
+         this.playSound(var2, var4, var5);
+         var2.gameEvent(var1, var5 ? GameEvent.BLOCK_OPEN : GameEvent.BLOCK_CLOSE, var4);
       }
    }
 
    public void neighborChanged(BlockState var1, Level var2, BlockPos var3, Block var4, BlockPos var5, boolean var6) {
       boolean var7 = var2.hasNeighborSignal(var3) || var2.hasNeighborSignal(var3.relative(var1.getValue(HALF) == DoubleBlockHalf.LOWER ? Direction.UP : Direction.DOWN));
-      if (var4 != this && var7 != (Boolean)var1.getValue(POWERED)) {
+      if (!this.defaultBlockState().is(var4) && var7 != (Boolean)var1.getValue(POWERED)) {
          if (var7 != (Boolean)var1.getValue(OPEN)) {
             this.playSound(var2, var3, var7);
+            var2.gameEvent(var7 ? GameEvent.BLOCK_OPEN : GameEvent.BLOCK_CLOSE, var3);
          }
 
          var2.setBlock(var3, (BlockState)((BlockState)var1.setValue(POWERED, var7)).setValue(OPEN, var7), 2);
       }
 
