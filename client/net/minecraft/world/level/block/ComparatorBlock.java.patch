--- net/minecraft/world/level/block/ComparatorBlock.java
+++ net/minecraft/world/level/block/ComparatorBlock.java
@@ -42,11 +42,21 @@
       BlockEntity var4 = var1.getBlockEntity(var2);
       return var4 instanceof ComparatorBlockEntity ? ((ComparatorBlockEntity)var4).getOutputSignal() : 0;
    }
 
    private int calculateOutputSignal(Level var1, BlockPos var2, BlockState var3) {
-      return var3.getValue(MODE) == ComparatorMode.SUBTRACT ? Math.max(this.getInputSignal(var1, var2, var3) - this.getAlternateSignal(var1, var2, var3), 0) : this.getInputSignal(var1, var2, var3);
+      int var4 = this.getInputSignal(var1, var2, var3);
+      if (var4 == 0) {
+         return 0;
+      } else {
+         int var5 = this.getAlternateSignal(var1, var2, var3);
+         if (var5 > var4) {
+            return 0;
+         } else {
+            return var3.getValue(MODE) == ComparatorMode.SUBTRACT ? var4 - var5 : var4;
+         }
+      }
    }
 
    protected boolean shouldTurnOn(Level var1, BlockPos var2, BlockState var3) {
       int var4 = this.getInputSignal(var1, var2, var3);
       if (var4 == 0) {
@@ -88,11 +98,11 @@
       });
       return var4.size() == 1 ? (ItemFrame)var4.get(0) : null;
    }
 
    public InteractionResult use(BlockState var1, Level var2, BlockPos var3, Player var4, InteractionHand var5, BlockHitResult var6) {
-      if (!var4.abilities.mayBuild) {
+      if (!var4.getAbilities().mayBuild) {
          return InteractionResult.PASS;
       } else {
          var1 = (BlockState)var1.cycle(MODE);
          float var7 = var1.getValue(MODE) == ComparatorMode.SUBTRACT ? 0.55F : 0.5F;
          var2.playSound(var4, var3, SoundEvents.COMPARATOR_CLICK, SoundSource.BLOCKS, 0.3F, var7);
@@ -147,12 +157,12 @@
       super.triggerEvent(var1, var2, var3, var4, var5);
       BlockEntity var6 = var2.getBlockEntity(var3);
       return var6 != null && var6.triggerEvent(var4, var5);
    }
 
-   public BlockEntity newBlockEntity(BlockGetter var1) {
-      return new ComparatorBlockEntity();
+   public BlockEntity newBlockEntity(BlockPos var1, BlockState var2) {
+      return new ComparatorBlockEntity(var1, var2);
    }
 
    protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> var1) {
       var1.add(FACING, MODE, POWERED);
    }
