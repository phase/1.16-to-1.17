--- net/minecraft/world/level/block/SmallDripleafBlock.java
+++ net/minecraft/world/level/block/SmallDripleafBlock.java
@@ -1,0 +1,106 @@
+package net.minecraft.world.level.block;
+
+import java.util.Random;
+import javax.annotation.Nullable;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.context.BlockPlaceContext;
+import net.minecraft.world.level.BlockGetter;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.LevelReader;
+import net.minecraft.world.level.block.state.BlockBehaviour;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.StateDefinition;
+import net.minecraft.world.level.block.state.properties.BlockStateProperties;
+import net.minecraft.world.level.block.state.properties.BooleanProperty;
+import net.minecraft.world.level.block.state.properties.DoubleBlockHalf;
+import net.minecraft.world.level.material.FluidState;
+import net.minecraft.world.level.material.Fluids;
+import net.minecraft.world.phys.shapes.CollisionContext;
+import net.minecraft.world.phys.shapes.VoxelShape;
+
+public class SmallDripleafBlock extends DoublePlantBlock implements BonemealableBlock, SimpleWaterloggedBlock {
+   private static final BooleanProperty WATERLOGGED;
+   protected static final VoxelShape SHAPE;
+
+   public SmallDripleafBlock(BlockBehaviour.Properties var1) {
+      super(var1);
+      this.registerDefaultState((BlockState)((BlockState)((BlockState)this.stateDefinition.any()).setValue(HALF, DoubleBlockHalf.LOWER)).setValue(WATERLOGGED, false));
+   }
+
+   public VoxelShape getShape(BlockState var1, BlockGetter var2, BlockPos var3, CollisionContext var4) {
+      return SHAPE;
+   }
+
+   protected boolean mayPlaceOn(BlockState var1, BlockGetter var2, BlockPos var3) {
+      return var1.is(Blocks.CLAY) || super.mayPlaceOn(var1, var2, var3);
+   }
+
+   @Nullable
+   public BlockState getStateForPlacement(BlockPlaceContext var1) {
+      BlockState var2 = super.getStateForPlacement(var1);
+      if (var2 != null) {
+         FluidState var3 = var1.getLevel().getFluidState(var1.getClickedPos());
+         return (BlockState)var2.setValue(WATERLOGGED, var3.getType() == Fluids.WATER);
+      } else {
+         return null;
+      }
+   }
+
+   public void setPlacedBy(Level var1, BlockPos var2, BlockState var3, LivingEntity var4, ItemStack var5) {
+      var1.setBlock(var2.above(), (BlockState)((BlockState)this.defaultBlockState().setValue(HALF, DoubleBlockHalf.UPPER)).setValue(WATERLOGGED, var1.isWaterAt(var2.above())), 3);
+   }
+
+   public FluidState getFluidState(BlockState var1) {
+      return (Boolean)var1.getValue(WATERLOGGED) ? Fluids.WATER.getSource(false) : super.getFluidState(var1);
+   }
+
+   public boolean canSurvive(BlockState var1, LevelReader var2, BlockPos var3) {
+      if (var1.getValue(HALF) == DoubleBlockHalf.UPPER) {
+         return super.canSurvive(var1, var2, var3);
+      } else {
+         BlockPos var4 = var3.below();
+         BlockState var5 = var2.getBlockState(var4);
+         return var5.is(Blocks.CLAY) || var2.getFluidState(var3).isSourceOfType(Fluids.WATER) && this.mayPlaceOn(var5, var2, var4);
+      }
+   }
+
+   public BlockState updateShape(BlockState var1, Direction var2, BlockState var3, LevelAccessor var4, BlockPos var5, BlockPos var6) {
+      if ((Boolean)var1.getValue(WATERLOGGED)) {
+         var4.getLiquidTicks().scheduleTick(var5, Fluids.WATER, Fluids.WATER.getTickDelay(var4));
+      }
+
+      return super.updateShape(var1, var2, var3, var4, var5, var6);
+   }
+
+   protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> var1) {
+      var1.add(HALF, WATERLOGGED);
+   }
+
+   public boolean isValidBonemealTarget(BlockGetter var1, BlockPos var2, BlockState var3, boolean var4) {
+      return true;
+   }
+
+   public boolean isBonemealSuccess(Level var1, Random var2, BlockPos var3, BlockState var4) {
+      return true;
+   }
+
+   public void performBonemeal(ServerLevel var1, Random var2, BlockPos var3, BlockState var4) {
+      if (var4.getValue(DoublePlantBlock.HALF) == DoubleBlockHalf.LOWER) {
+         BigDripleafBlock.placeWithRandomHeight(var1, var2, var3);
+      } else {
+         BlockPos var5 = var3.below();
+         this.performBonemeal(var1, var2, var5, var1.getBlockState(var5));
+      }
+
+   }
+
+   static {
+      WATERLOGGED = BlockStateProperties.WATERLOGGED;
+      SHAPE = Block.box(2.0D, 0.0D, 2.0D, 14.0D, 13.0D, 14.0D);
+   }
+}
