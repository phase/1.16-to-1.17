--- net/minecraft/world/level/block/piston/PistonStructureResolver.java
+++ net/minecraft/world/level/block/piston/PistonStructureResolver.java
@@ -4,11 +4,10 @@
 import java.util.ArrayList;
 import java.util.List;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.world.level.Level;
-import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.material.PushReaction;
 
 public class PistonStructureResolver {
@@ -50,111 +49,109 @@
       } else if (!this.addBlockLine(this.startPos, this.pushDirection)) {
          return false;
       } else {
          for(int var2 = 0; var2 < this.toPush.size(); ++var2) {
             BlockPos var3 = (BlockPos)this.toPush.get(var2);
-            if (isSticky(this.level.getBlockState(var3).getBlock()) && !this.addBranchingBlocks(var3)) {
+            if (isSticky(this.level.getBlockState(var3)) && !this.addBranchingBlocks(var3)) {
                return false;
             }
          }
 
          return true;
       }
    }
 
-   private static boolean isSticky(Block var0) {
-      return var0 == Blocks.SLIME_BLOCK || var0 == Blocks.HONEY_BLOCK;
+   private static boolean isSticky(BlockState var0) {
+      return var0.is(Blocks.SLIME_BLOCK) || var0.is(Blocks.HONEY_BLOCK);
    }
 
-   private static boolean canStickToEachOther(Block var0, Block var1) {
-      if (var0 == Blocks.HONEY_BLOCK && var1 == Blocks.SLIME_BLOCK) {
+   private static boolean canStickToEachOther(BlockState var0, BlockState var1) {
+      if (var0.is(Blocks.HONEY_BLOCK) && var1.is(Blocks.SLIME_BLOCK)) {
          return false;
-      } else if (var0 == Blocks.SLIME_BLOCK && var1 == Blocks.HONEY_BLOCK) {
+      } else if (var0.is(Blocks.SLIME_BLOCK) && var1.is(Blocks.HONEY_BLOCK)) {
          return false;
       } else {
          return isSticky(var0) || isSticky(var1);
       }
    }
 
    private boolean addBlockLine(BlockPos var1, Direction var2) {
       BlockState var3 = this.level.getBlockState(var1);
-      Block var4 = var3.getBlock();
       if (var3.isAir()) {
          return true;
       } else if (!PistonBaseBlock.isPushable(var3, this.level, var1, this.pushDirection, false, var2)) {
          return true;
       } else if (var1.equals(this.pistonPos)) {
          return true;
       } else if (this.toPush.contains(var1)) {
          return true;
       } else {
-         int var5 = 1;
-         if (var5 + this.toPush.size() > 12) {
+         int var4 = 1;
+         if (var4 + this.toPush.size() > 12) {
             return false;
          } else {
-            while(isSticky(var4)) {
-               BlockPos var6 = var1.relative(this.pushDirection.getOpposite(), var5);
-               Block var7 = var4;
-               var3 = this.level.getBlockState(var6);
-               var4 = var3.getBlock();
-               if (var3.isAir() || !canStickToEachOther(var7, var4) || !PistonBaseBlock.isPushable(var3, this.level, var6, this.pushDirection, false, this.pushDirection.getOpposite()) || var6.equals(this.pistonPos)) {
+            while(isSticky(var3)) {
+               BlockPos var5 = var1.relative(this.pushDirection.getOpposite(), var4);
+               BlockState var6 = var3;
+               var3 = this.level.getBlockState(var5);
+               if (var3.isAir() || !canStickToEachOther(var6, var3) || !PistonBaseBlock.isPushable(var3, this.level, var5, this.pushDirection, false, this.pushDirection.getOpposite()) || var5.equals(this.pistonPos)) {
                   break;
                }
 
-               ++var5;
-               if (var5 + this.toPush.size() > 12) {
+               ++var4;
+               if (var4 + this.toPush.size() > 12) {
                   return false;
                }
             }
 
-            int var12 = 0;
+            int var11 = 0;
 
-            int var13;
-            for(var13 = var5 - 1; var13 >= 0; --var13) {
-               this.toPush.add(var1.relative(this.pushDirection.getOpposite(), var13));
-               ++var12;
+            int var12;
+            for(var12 = var4 - 1; var12 >= 0; --var12) {
+               this.toPush.add(var1.relative(this.pushDirection.getOpposite(), var12));
+               ++var11;
             }
 
-            var13 = 1;
+            var12 = 1;
 
             while(true) {
-               BlockPos var8 = var1.relative(this.pushDirection, var13);
-               int var9 = this.toPush.indexOf(var8);
-               if (var9 > -1) {
-                  this.reorderListAtCollision(var12, var9);
+               BlockPos var7 = var1.relative(this.pushDirection, var12);
+               int var8 = this.toPush.indexOf(var7);
+               if (var8 > -1) {
+                  this.reorderListAtCollision(var11, var8);
 
-                  for(int var10 = 0; var10 <= var9 + var12; ++var10) {
-                     BlockPos var11 = (BlockPos)this.toPush.get(var10);
-                     if (isSticky(this.level.getBlockState(var11).getBlock()) && !this.addBranchingBlocks(var11)) {
+                  for(int var9 = 0; var9 <= var8 + var11; ++var9) {
+                     BlockPos var10 = (BlockPos)this.toPush.get(var9);
+                     if (isSticky(this.level.getBlockState(var10)) && !this.addBranchingBlocks(var10)) {
                         return false;
                      }
                   }
 
                   return true;
                }
 
-               var3 = this.level.getBlockState(var8);
+               var3 = this.level.getBlockState(var7);
                if (var3.isAir()) {
                   return true;
                }
 
-               if (!PistonBaseBlock.isPushable(var3, this.level, var8, this.pushDirection, true, this.pushDirection) || var8.equals(this.pistonPos)) {
+               if (!PistonBaseBlock.isPushable(var3, this.level, var7, this.pushDirection, true, this.pushDirection) || var7.equals(this.pistonPos)) {
                   return false;
                }
 
                if (var3.getPistonPushReaction() == PushReaction.DESTROY) {
-                  this.toDestroy.add(var8);
+                  this.toDestroy.add(var7);
                   return true;
                }
 
                if (this.toPush.size() >= 12) {
                   return false;
                }
 
-               this.toPush.add(var8);
+               this.toPush.add(var7);
+               ++var11;
                ++var12;
-               ++var13;
             }
          }
       }
    }
 
@@ -179,11 +176,11 @@
       for(int var5 = 0; var5 < var4; ++var5) {
          Direction var6 = var3[var5];
          if (var6.getAxis() != this.pushDirection.getAxis()) {
             BlockPos var7 = var1.relative(var6);
             BlockState var8 = this.level.getBlockState(var7);
-            if (canStickToEachOther(var8.getBlock(), var2.getBlock()) && !this.addBlockLine(var7, var6)) {
+            if (canStickToEachOther(var8, var2) && !this.addBlockLine(var7, var6)) {
                return false;
             }
          }
       }
 
