--- net/minecraft/world/level/block/BigDripleafStemBlock.java
+++ net/minecraft/world/level/block/BigDripleafStemBlock.java
@@ -1,0 +1,91 @@
+package net.minecraft.world.level.block;
+
+import java.util.Random;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.level.BlockGetter;
+import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.LevelReader;
+import net.minecraft.world.level.block.state.BlockBehaviour;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.StateDefinition;
+import net.minecraft.world.level.block.state.properties.BlockStateProperties;
+import net.minecraft.world.level.block.state.properties.BooleanProperty;
+import net.minecraft.world.level.material.FluidState;
+import net.minecraft.world.level.material.Fluids;
+import net.minecraft.world.phys.shapes.CollisionContext;
+import net.minecraft.world.phys.shapes.VoxelShape;
+
+public class BigDripleafStemBlock extends HorizontalDirectionalBlock implements SimpleWaterloggedBlock {
+   private static final BooleanProperty WATERLOGGED;
+   private static final VoxelShape NORTH_SHAPE;
+   private static final VoxelShape SOUTH_SHAPE;
+   private static final VoxelShape EAST_SHAPE;
+   private static final VoxelShape WEST_SHAPE;
+
+   protected BigDripleafStemBlock(BlockBehaviour.Properties var1) {
+      super(var1);
+      this.registerDefaultState((BlockState)((BlockState)((BlockState)this.stateDefinition.any()).setValue(WATERLOGGED, false)).setValue(FACING, Direction.NORTH));
+   }
+
+   public VoxelShape getShape(BlockState var1, BlockGetter var2, BlockPos var3, CollisionContext var4) {
+      switch((Direction)var1.getValue(FACING)) {
+      case SOUTH:
+         return SOUTH_SHAPE;
+      case NORTH:
+      default:
+         return NORTH_SHAPE;
+      case WEST:
+         return WEST_SHAPE;
+      case EAST:
+         return EAST_SHAPE;
+      }
+   }
+
+   protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> var1) {
+      var1.add(WATERLOGGED, FACING);
+   }
+
+   public FluidState getFluidState(BlockState var1) {
+      return (Boolean)var1.getValue(WATERLOGGED) ? Fluids.WATER.getSource(false) : super.getFluidState(var1);
+   }
+
+   public boolean canSurvive(BlockState var1, LevelReader var2, BlockPos var3) {
+      BlockPos var4 = var3.below();
+      BlockState var5 = var2.getBlockState(var4);
+      return var5.is(this) || var5.isFaceSturdy(var2, var4, Direction.UP);
+   }
+
+   protected static boolean place(LevelAccessor var0, BlockPos var1, FluidState var2, Direction var3) {
+      BlockState var4 = (BlockState)((BlockState)Blocks.BIG_DRIPLEAF_STEM.defaultBlockState().setValue(WATERLOGGED, var2.isSourceOfType(Fluids.WATER))).setValue(FACING, var3);
+      return var0.setBlock(var1, var4, 2);
+   }
+
+   public BlockState updateShape(BlockState var1, Direction var2, BlockState var3, LevelAccessor var4, BlockPos var5, BlockPos var6) {
+      if (var2 == Direction.DOWN && !var1.canSurvive(var4, var5)) {
+         var4.getBlockTicks().scheduleTick(var5, this, 1);
+      }
+
+      if ((Boolean)var1.getValue(WATERLOGGED)) {
+         var4.getLiquidTicks().scheduleTick(var5, Fluids.WATER, Fluids.WATER.getTickDelay(var4));
+      }
+
+      return super.updateShape(var1, var2, var3, var4, var5, var6);
+   }
+
+   public void tick(BlockState var1, ServerLevel var2, BlockPos var3, Random var4) {
+      if (!var1.canSurvive(var2, var3)) {
+         var2.destroyBlock(var3, true);
+      }
+
+   }
+
+   static {
+      WATERLOGGED = BlockStateProperties.WATERLOGGED;
+      NORTH_SHAPE = Block.box(5.0D, 0.0D, 8.0D, 11.0D, 16.0D, 14.0D);
+      SOUTH_SHAPE = Block.box(5.0D, 0.0D, 2.0D, 11.0D, 16.0D, 8.0D);
+      EAST_SHAPE = Block.box(2.0D, 0.0D, 5.0D, 8.0D, 16.0D, 11.0D);
+      WEST_SHAPE = Block.box(8.0D, 0.0D, 5.0D, 14.0D, 16.0D, 11.0D);
+   }
+}
