--- net/minecraft/world/level/block/CampfireBlock.java
+++ net/minecraft/world/level/block/CampfireBlock.java
@@ -26,17 +26,20 @@
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.block.entity.BlockEntity;
+import net.minecraft.world.level.block.entity.BlockEntityTicker;
+import net.minecraft.world.level.block.entity.BlockEntityType;
 import net.minecraft.world.level.block.entity.CampfireBlockEntity;
 import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.StateDefinition;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.block.state.properties.BooleanProperty;
 import net.minecraft.world.level.block.state.properties.DirectionProperty;
+import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.material.FluidState;
 import net.minecraft.world.level.material.Fluids;
 import net.minecraft.world.level.pathfinder.PathComputationType;
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.shapes.BooleanOp;
@@ -49,10 +52,11 @@
    public static final BooleanProperty LIT;
    public static final BooleanProperty SIGNAL_FIRE;
    public static final BooleanProperty WATERLOGGED;
    public static final DirectionProperty FACING;
    private static final VoxelShape VIRTUAL_FENCE_POST;
+   private static final int SMOKE_DISTANCE = 5;
    private final boolean spawnParticles;
    private final int fireDamage;
 
    public CampfireBlock(boolean var1, int var2, BlockBehaviour.Properties var3) {
       super(var3);
@@ -66,11 +70,11 @@
       if (var7 instanceof CampfireBlockEntity) {
          CampfireBlockEntity var8 = (CampfireBlockEntity)var7;
          ItemStack var9 = var4.getItemInHand(var5);
          Optional var10 = var8.getCookableRecipe(var9);
          if (var10.isPresent()) {
-            if (!var2.isClientSide && var8.placeFood(var4.abilities.instabuild ? var9.copy() : var9, ((CampfireCookingRecipe)var10.get()).getCookingTime())) {
+            if (!var2.isClientSide && var8.placeFood(var4.getAbilities().instabuild ? var9.copy() : var9, ((CampfireCookingRecipe)var10.get()).getCookingTime())) {
                var4.awardStat(Stats.INTERACT_WITH_CAMPFIRE);
                return InteractionResult.SUCCESS;
             }
 
             return InteractionResult.CONSUME;
@@ -140,33 +144,34 @@
          }
 
       }
    }
 
-   public static void dowse(LevelAccessor var0, BlockPos var1, BlockState var2) {
-      if (var0.isClientSide()) {
-         for(int var3 = 0; var3 < 20; ++var3) {
-            makeParticles((Level)var0, var1, (Boolean)var2.getValue(SIGNAL_FIRE), true);
+   public static void dowse(@Nullable Entity var0, LevelAccessor var1, BlockPos var2, BlockState var3) {
+      if (var1.isClientSide()) {
+         for(int var4 = 0; var4 < 20; ++var4) {
+            makeParticles((Level)var1, var2, (Boolean)var3.getValue(SIGNAL_FIRE), true);
          }
       }
 
-      BlockEntity var4 = var0.getBlockEntity(var1);
-      if (var4 instanceof CampfireBlockEntity) {
-         ((CampfireBlockEntity)var4).dowse();
+      BlockEntity var5 = var1.getBlockEntity(var2);
+      if (var5 instanceof CampfireBlockEntity) {
+         ((CampfireBlockEntity)var5).dowse();
       }
 
+      var1.gameEvent(var0, GameEvent.BLOCK_CHANGE, var2);
    }
 
    public boolean placeLiquid(LevelAccessor var1, BlockPos var2, BlockState var3, FluidState var4) {
       if (!(Boolean)var3.getValue(BlockStateProperties.WATERLOGGED) && var4.getType() == Fluids.WATER) {
          boolean var5 = (Boolean)var3.getValue(LIT);
          if (var5) {
             if (!var1.isClientSide()) {
                var1.playSound((Player)null, var2, SoundEvents.GENERIC_EXTINGUISH_FIRE, SoundSource.BLOCKS, 1.0F, 1.0F);
             }
 
-            dowse(var1, var2, var3);
+            dowse((Entity)null, var1, var2, var3);
          }
 
          var1.setBlock(var2, (BlockState)((BlockState)var3.setValue(WATERLOGGED, true)).setValue(LIT, false), 3);
          var1.getLiquidTicks().scheduleTick(var2, var4.getType(), var4.getType().getTickDelay(var1));
          return true;
@@ -190,11 +195,11 @@
    public static void makeParticles(Level var0, BlockPos var1, boolean var2, boolean var3) {
       Random var4 = var0.getRandom();
       SimpleParticleType var5 = var2 ? ParticleTypes.CAMPFIRE_SIGNAL_SMOKE : ParticleTypes.CAMPFIRE_COSY_SMOKE;
       var0.addAlwaysVisibleParticle(var5, true, (double)var1.getX() + 0.5D + var4.nextDouble() / 3.0D * (double)(var4.nextBoolean() ? 1 : -1), (double)var1.getY() + var4.nextDouble() + var4.nextDouble(), (double)var1.getZ() + 0.5D + var4.nextDouble() / 3.0D * (double)(var4.nextBoolean() ? 1 : -1), 0.0D, 0.07D, 0.0D);
       if (var3) {
-         var0.addParticle(ParticleTypes.SMOKE, (double)var1.getX() + 0.25D + var4.nextDouble() / 2.0D * (double)(var4.nextBoolean() ? 1 : -1), (double)var1.getY() + 0.4D, (double)var1.getZ() + 0.25D + var4.nextDouble() / 2.0D * (double)(var4.nextBoolean() ? 1 : -1), 0.0D, 0.005D, 0.0D);
+         var0.addParticle(ParticleTypes.SMOKE, (double)var1.getX() + 0.5D + var4.nextDouble() / 4.0D * (double)(var4.nextBoolean() ? 1 : -1), (double)var1.getY() + 0.4D, (double)var1.getZ() + 0.5D + var4.nextDouble() / 4.0D * (double)(var4.nextBoolean() ? 1 : -1), 0.0D, 0.005D, 0.0D);
       }
 
    }
 
    public static boolean isSmokeyPos(Level var0, BlockPos var1) {
@@ -233,22 +238,31 @@
 
    protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> var1) {
       var1.add(LIT, SIGNAL_FIRE, WATERLOGGED, FACING);
    }
 
-   public BlockEntity newBlockEntity(BlockGetter var1) {
-      return new CampfireBlockEntity();
+   public BlockEntity newBlockEntity(BlockPos var1, BlockState var2) {
+      return new CampfireBlockEntity(var1, var2);
    }
 
+   @Nullable
+   public <T extends BlockEntity> BlockEntityTicker<T> getTicker(Level var1, BlockState var2, BlockEntityType<T> var3) {
+      if (var1.isClientSide) {
+         return (Boolean)var2.getValue(LIT) ? createTickerHelper(var3, BlockEntityType.CAMPFIRE, CampfireBlockEntity::particleTick) : null;
+      } else {
+         return (Boolean)var2.getValue(LIT) ? createTickerHelper(var3, BlockEntityType.CAMPFIRE, CampfireBlockEntity::cookTick) : createTickerHelper(var3, BlockEntityType.CAMPFIRE, CampfireBlockEntity::cooldownTick);
+      }
+   }
+
    public boolean isPathfindable(BlockState var1, BlockGetter var2, BlockPos var3, PathComputationType var4) {
       return false;
    }
 
    public static boolean canLight(BlockState var0) {
       return var0.is(BlockTags.CAMPFIRES, (var0x) -> {
-         return var0x.hasProperty(BlockStateProperties.WATERLOGGED) && var0x.hasProperty(BlockStateProperties.LIT);
-      }) && !(Boolean)var0.getValue(BlockStateProperties.WATERLOGGED) && !(Boolean)var0.getValue(BlockStateProperties.LIT);
+         return var0x.hasProperty(WATERLOGGED) && var0x.hasProperty(LIT);
+      }) && !(Boolean)var0.getValue(WATERLOGGED) && !(Boolean)var0.getValue(LIT);
    }
 
    static {
       LIT = BlockStateProperties.LIT;
       SIGNAL_FIRE = BlockStateProperties.SIGNAL_FIRE;
