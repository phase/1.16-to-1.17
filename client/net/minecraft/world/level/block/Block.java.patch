--- net/minecraft/world/level/block/Block.java
+++ net/minecraft/world/level/block/Block.java
@@ -1,16 +1,19 @@
 package net.minecraft.world.level.block;
 
 import com.google.common.cache.CacheBuilder;
 import com.google.common.cache.CacheLoader;
 import com.google.common.cache.LoadingCache;
+import com.google.common.collect.ImmutableMap;
 import it.unimi.dsi.fastutil.objects.Object2ByteLinkedOpenHashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
+import java.util.function.Function;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
+import net.minecraft.SharedConstants;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.IdMapper;
 import net.minecraft.core.NonNullList;
@@ -19,11 +22,11 @@
 import net.minecraft.network.chat.MutableComponent;
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.stats.Stats;
 import net.minecraft.tags.BlockTags;
-import net.minecraft.tags.Tag;
+import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.ExperienceOrb;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.monster.piglin.PiglinAi;
@@ -39,14 +42,17 @@
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.LevelReader;
+import net.minecraft.world.level.biome.Biome;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.StateDefinition;
+import net.minecraft.world.level.block.state.properties.Property;
+import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.storage.loot.LootContext;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParams;
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.phys.shapes.BooleanOp;
 import net.minecraft.world.phys.shapes.Shapes;
@@ -60,16 +66,31 @@
    private static final LoadingCache<VoxelShape, Boolean> SHAPE_FULL_BLOCK_CACHE = CacheBuilder.newBuilder().maximumSize(512L).weakKeys().build(new CacheLoader<VoxelShape, Boolean>() {
       public Boolean load(VoxelShape var1) {
          return !Shapes.joinIsNotEmpty(Shapes.block(), var1, BooleanOp.NOT_SAME);
       }
    });
+   public static final int UPDATE_NEIGHBORS = 1;
+   public static final int UPDATE_CLIENTS = 2;
+   public static final int UPDATE_INVISIBLE = 4;
+   public static final int UPDATE_IMMEDIATE = 8;
+   public static final int UPDATE_KNOWN_SHAPE = 16;
+   public static final int UPDATE_SUPPRESS_DROPS = 32;
+   public static final int UPDATE_MOVE_BY_PISTON = 64;
+   public static final int UPDATE_SUPPRESS_LIGHT = 128;
+   public static final int UPDATE_NONE = 4;
+   public static final int UPDATE_ALL = 3;
+   public static final int UPDATE_ALL_IMMEDIATE = 11;
+   public static final float INDESTRUCTIBLE = -1.0F;
+   public static final float INSTANT = 0.0F;
+   public static final int UPDATE_LIMIT = 512;
    protected final StateDefinition<Block, BlockState> stateDefinition;
    private BlockState defaultBlockState;
    @Nullable
    private String descriptionId;
    @Nullable
    private Item item;
+   private static final int CACHE_SIZE = 2048;
    private static final ThreadLocal<Object2ByteLinkedOpenHashMap<Block.BlockStatePairKey>> OCCLUSION_CACHE = ThreadLocal.withInitial(() -> {
       Object2ByteLinkedOpenHashMap var0 = new Object2ByteLinkedOpenHashMap<Block.BlockStatePairKey>(2048, 0.25F) {
          protected void rehash(int var1) {
          }
       };
@@ -95,43 +116,39 @@
       return var0 instanceof BlockItem ? ((BlockItem)var0).getBlock() : Blocks.AIR;
    }
 
    public static BlockState pushEntitiesUp(BlockState var0, BlockState var1, Level var2, BlockPos var3) {
       VoxelShape var4 = Shapes.joinUnoptimized(var0.getCollisionShape(var2, var3), var1.getCollisionShape(var2, var3), BooleanOp.ONLY_SECOND).move((double)var3.getX(), (double)var3.getY(), (double)var3.getZ());
-      List var5 = var2.getEntities((Entity)null, var4.bounds());
-      Iterator var6 = var5.iterator();
+      if (var4.isEmpty()) {
+         return var1;
+      } else {
+         List var5 = var2.getEntities((Entity)null, var4.bounds());
+         Iterator var6 = var5.iterator();
 
-      while(var6.hasNext()) {
-         Entity var7 = (Entity)var6.next();
-         double var8 = Shapes.collide(Direction.Axis.Y, var7.getBoundingBox().move(0.0D, 1.0D, 0.0D), Stream.of(var4), -1.0D);
-         var7.teleportTo(var7.getX(), var7.getY() + 1.0D + var8, var7.getZ());
-      }
+         while(var6.hasNext()) {
+            Entity var7 = (Entity)var6.next();
+            double var8 = Shapes.collide(Direction.Axis.Y, var7.getBoundingBox().move(0.0D, 1.0D, 0.0D), Stream.of(var4), -1.0D);
+            var7.teleportTo(var7.getX(), var7.getY() + 1.0D + var8, var7.getZ());
+         }
 
-      return var1;
+         return var1;
+      }
    }
 
    public static VoxelShape box(double var0, double var2, double var4, double var6, double var8, double var10) {
       return Shapes.box(var0 / 16.0D, var2 / 16.0D, var4 / 16.0D, var6 / 16.0D, var8 / 16.0D, var10 / 16.0D);
    }
 
-   public boolean is(Tag<Block> var1) {
-      return var1.contains(this);
-   }
-
-   public boolean is(Block var1) {
-      return this == var1;
-   }
-
    public static BlockState updateFromNeighbourShapes(BlockState var0, LevelAccessor var1, BlockPos var2) {
       BlockState var3 = var0;
       BlockPos.MutableBlockPos var4 = new BlockPos.MutableBlockPos();
       Direction[] var5 = UPDATE_SHAPE_ORDER;
       int var6 = var5.length;
 
       for(int var7 = 0; var7 < var6; ++var7) {
          Direction var8 = var5[var7];
-         var4.setWithOffset(var2, var8);
+         var4.setWithOffset(var2, (Direction)var8);
          var3 = var3.updateShape(var8, var1.getBlockState(var4), var1, var2, var4);
       }
 
       return var3;
    }
@@ -157,22 +174,28 @@
       super(var1);
       StateDefinition.Builder var2 = new StateDefinition.Builder(this);
       this.createBlockStateDefinition(var2);
       this.stateDefinition = var2.create(Block::defaultBlockState, BlockState::new);
       this.registerDefaultState((BlockState)this.stateDefinition.any());
+      if (SharedConstants.IS_RUNNING_IN_IDE) {
+         String var3 = this.getClass().getSimpleName();
+         if (!var3.endsWith("Block")) {
+            LOGGER.error("Block classes should end with Block and {} doesn't.", var3);
+         }
+      }
+
    }
 
-   public static boolean isExceptionForConnection(Block var0) {
-      return var0 instanceof LeavesBlock || var0 == Blocks.BARRIER || var0 == Blocks.CARVED_PUMPKIN || var0 == Blocks.JACK_O_LANTERN || var0 == Blocks.MELON || var0 == Blocks.PUMPKIN || var0.is((Tag)BlockTags.SHULKER_BOXES);
+   public static boolean isExceptionForConnection(BlockState var0) {
+      return var0.getBlock() instanceof LeavesBlock || var0.is(Blocks.BARRIER) || var0.is(Blocks.CARVED_PUMPKIN) || var0.is(Blocks.JACK_O_LANTERN) || var0.is(Blocks.MELON) || var0.is(Blocks.PUMPKIN) || var0.is(BlockTags.SHULKER_BOXES);
    }
 
    public boolean isRandomlyTicking(BlockState var1) {
       return this.isRandomlyTicking;
    }
 
-   public static boolean shouldRenderFace(BlockState var0, BlockGetter var1, BlockPos var2, Direction var3) {
-      BlockPos var4 = var2.relative(var3);
+   public static boolean shouldRenderFace(BlockState var0, BlockGetter var1, BlockPos var2, Direction var3, BlockPos var4) {
       BlockState var5 = var1.getBlockState(var4);
       if (var0.skipRendering(var5, var3)) {
          return false;
       } else if (var5.canOcclude()) {
          Block.BlockStatePairKey var6 = new Block.BlockStatePairKey(var0, var5, var3);
@@ -180,18 +203,22 @@
          byte var8 = var7.getAndMoveToFirst(var6);
          if (var8 != 127) {
             return var8 != 0;
          } else {
             VoxelShape var9 = var0.getFaceOcclusionShape(var1, var2, var3);
-            VoxelShape var10 = var5.getFaceOcclusionShape(var1, var4, var3.getOpposite());
-            boolean var11 = Shapes.joinIsNotEmpty(var9, var10, BooleanOp.ONLY_FIRST);
-            if (var7.size() == 2048) {
-               var7.removeLastByte();
-            }
+            if (var9.isEmpty()) {
+               return true;
+            } else {
+               VoxelShape var10 = var5.getFaceOcclusionShape(var1, var4, var3.getOpposite());
+               boolean var11 = Shapes.joinIsNotEmpty(var9, var10, BooleanOp.ONLY_FIRST);
+               if (var7.size() == 2048) {
+                  var7.removeLastByte();
+               }
 
-            var7.putAndMoveToFirst(var6, (byte)(var11 ? 1 : 0));
-            return var11;
+               var7.putAndMoveToFirst(var6, (byte)(var11 ? 1 : 0));
+               return var11;
+            }
          }
       } else {
          return true;
       }
    }
@@ -232,10 +259,19 @@
    public static List<ItemStack> getDrops(BlockState var0, ServerLevel var1, BlockPos var2, @Nullable BlockEntity var3, @Nullable Entity var4, ItemStack var5) {
       LootContext.Builder var6 = (new LootContext.Builder(var1)).withRandom(var1.random).withParameter(LootContextParams.ORIGIN, Vec3.atCenterOf(var2)).withParameter(LootContextParams.TOOL, var5).withOptionalParameter(LootContextParams.THIS_ENTITY, var4).withOptionalParameter(LootContextParams.BLOCK_ENTITY, var3);
       return var0.getDrops(var6);
    }
 
+   public static void dropResources(BlockState var0, LootContext.Builder var1) {
+      ServerLevel var2 = var1.getLevel();
+      BlockPos var3 = new BlockPos((Vec3)var1.getParameter(LootContextParams.ORIGIN));
+      var0.getDrops(var1).forEach((var2x) -> {
+         popResource(var2, var3, var2x);
+      });
+      var0.spawnAfterBreak(var2, var3, ItemStack.EMPTY);
+   }
+
    public static void dropResources(BlockState var0, Level var1, BlockPos var2) {
       if (var1 instanceof ServerLevel) {
          getDrops(var0, (ServerLevel)var1, var2, (BlockEntity)null).forEach((var2x) -> {
             popResource(var1, var2, var2x);
          });
@@ -276,15 +312,11 @@
       }
    }
 
    protected void popExperience(ServerLevel var1, BlockPos var2, int var3) {
       if (var1.getGameRules().getBoolean(GameRules.RULE_DOBLOCKDROPS)) {
-         while(var3 > 0) {
-            int var4 = ExperienceOrb.getExperienceValue(var3);
-            var3 -= var4;
-            var1.addFreshEntity(new ExperienceOrb(var1, (double)var2.getX() + 0.5D, (double)var2.getY() + 0.5D, (double)var2.getZ() + 0.5D, var4));
-         }
+         ExperienceOrb.award(var1, Vec3.atCenterOf(var2), var3);
       }
 
    }
 
    public float getExplosionResistance() {
@@ -326,11 +358,11 @@
 
       return this.descriptionId;
    }
 
    public void fallOn(Level var1, BlockPos var2, Entity var3, float var4) {
-      var3.causeFallDamage(var4, 1.0F);
+      var3.causeFallDamage(var4, 1.0F, DamageSource.FALL);
    }
 
    public void updateEntityAfterFallOn(BlockGetter var1, Entity var2) {
       var2.setDeltaMovement(var2.getDeltaMovement().multiply(1.0D, 0.0D, 1.0D));
    }
@@ -353,19 +385,24 @@
 
    public float getJumpFactor() {
       return this.jumpFactor;
    }
 
+   protected void spawnDestroyParticles(Level var1, Player var2, BlockPos var3, BlockState var4) {
+      var1.levelEvent(var2, 2001, var3, getId(var4));
+   }
+
    public void playerWillDestroy(Level var1, BlockPos var2, BlockState var3, Player var4) {
-      var1.levelEvent(var4, 2001, var2, getId(var3));
-      if (this.is((Tag)BlockTags.GUARDED_BY_PIGLINS)) {
+      this.spawnDestroyParticles(var1, var4, var2, var3);
+      if (var3.is(BlockTags.GUARDED_BY_PIGLINS)) {
          PiglinAi.angerNearbyPiglins(var4, false);
       }
 
+      var1.gameEvent(var4, GameEvent.BLOCK_DESTROY, var2);
    }
 
-   public void handleRain(Level var1, BlockPos var2) {
+   public void handlePrecipitation(BlockState var1, Level var2, BlockPos var3, Biome.Precipitation var4) {
    }
 
    public boolean dropFromExplosion(Explosion var1) {
       return true;
    }
@@ -383,10 +420,28 @@
 
    public final BlockState defaultBlockState() {
       return this.defaultBlockState;
    }
 
+   public final BlockState withPropertiesOf(BlockState var1) {
+      BlockState var2 = this.defaultBlockState();
+      Iterator var3 = var1.getBlock().getStateDefinition().getProperties().iterator();
+
+      while(var3.hasNext()) {
+         Property var4 = (Property)var3.next();
+         if (var2.hasProperty(var4)) {
+            var2 = copyProperty(var1, var2, var4);
+         }
+      }
+
+      return var2;
+   }
+
+   private static <T extends Comparable<T>> BlockState copyProperty(BlockState var0, BlockState var1, Property<T> var2) {
+      return (BlockState)var1.setValue(var2, var0.getValue(var2));
+   }
+
    public SoundType getSoundType(BlockState var1) {
       return this.soundType;
    }
 
    public Item asItem() {
@@ -410,10 +465,14 @@
 
    protected Block asBlock() {
       return this;
    }
 
+   protected ImmutableMap<BlockState, VoxelShape> getShapeForEachState(Function<BlockState, VoxelShape> var1) {
+      return (ImmutableMap)this.stateDefinition.getPossibleStates().stream().collect(ImmutableMap.toImmutableMap(Function.identity(), var1));
+   }
+
    public static final class BlockStatePairKey {
       private final BlockState first;
       private final BlockState second;
       private final Direction direction;
 
