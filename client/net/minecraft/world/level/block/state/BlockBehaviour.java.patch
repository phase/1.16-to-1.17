--- net/minecraft/world/level/block/state/BlockBehaviour.java
+++ net/minecraft/world/level/block/state/BlockBehaviour.java
@@ -40,10 +40,13 @@
 import net.minecraft.world.level.block.Mirror;
 import net.minecraft.world.level.block.RenderShape;
 import net.minecraft.world.level.block.Rotation;
 import net.minecraft.world.level.block.SoundType;
 import net.minecraft.world.level.block.SupportType;
+import net.minecraft.world.level.block.entity.BlockEntity;
+import net.minecraft.world.level.block.entity.BlockEntityTicker;
+import net.minecraft.world.level.block.entity.BlockEntityType;
 import net.minecraft.world.level.block.state.properties.Property;
 import net.minecraft.world.level.material.Fluid;
 import net.minecraft.world.level.material.FluidState;
 import net.minecraft.world.level.material.Fluids;
 import net.minecraft.world.level.material.Material;
@@ -127,11 +130,11 @@
    public void onPlace(BlockState var1, Level var2, BlockPos var3, BlockState var4, boolean var5) {
    }
 
    @Deprecated
    public void onRemove(BlockState var1, Level var2, BlockPos var3, BlockState var4, boolean var5) {
-      if (this.isEntityBlock() && !var1.is(var4.getBlock())) {
+      if (var1.hasBlockEntity() && !var1.is(var4.getBlock())) {
          var2.removeBlockEntity(var3);
       }
 
    }
 
@@ -177,10 +180,18 @@
 
    public BlockBehaviour.OffsetType getOffsetType() {
       return BlockBehaviour.OffsetType.NONE;
    }
 
+   public float getMaxHorizontalOffset() {
+      return 0.25F;
+   }
+
+   public float getMaxVerticalOffset() {
+      return 0.2F;
+   }
+
    @Deprecated
    public BlockState rotate(BlockState var1, Rotation var2) {
       return var1;
    }
 
@@ -189,11 +200,11 @@
       return var1;
    }
 
    @Deprecated
    public boolean canBeReplaced(BlockState var1, BlockPlaceContext var2) {
-      return this.material.isReplaceable() && (var2.getItemInHand().isEmpty() || var2.getItemInHand().getItem() != this.asItem());
+      return this.material.isReplaceable() && (var2.getItemInHand().isEmpty() || !var2.getItemInHand().is(this.asItem()));
    }
 
    @Deprecated
    public boolean canBeReplaced(BlockState var1, Fluid var2) {
       return this.material.isReplaceable() || !this.material.isSolid();
@@ -317,14 +328,10 @@
    @Deprecated
    public int getDirectSignal(BlockState var1, BlockGetter var2, BlockPos var3, Direction var4) {
       return 0;
    }
 
-   public final boolean isEntityBlock() {
-      return this instanceof EntityBlock;
-   }
-
    public final ResourceLocation getLootTable() {
       if (this.drops == null) {
          ResourceLocation var1 = Registry.BLOCK.getKey(this.asBlock());
          this.drops = new ResourceLocation(var1.getNamespace(), "blocks/" + var1.getPath());
       }
@@ -342,14 +349,249 @@
 
    public MaterialColor defaultMaterialColor() {
       return (MaterialColor)this.properties.materialColor.apply(this.asBlock().defaultBlockState());
    }
 
+   public float defaultDestroyTime() {
+      return this.properties.destroyTime;
+   }
+
    static {
       UPDATE_SHAPE_ORDER = new Direction[]{Direction.WEST, Direction.EAST, Direction.NORTH, Direction.SOUTH, Direction.DOWN, Direction.UP};
    }
 
+   public static class Properties {
+      Material material;
+      Function<BlockState, MaterialColor> materialColor;
+      boolean hasCollision;
+      SoundType soundType;
+      ToIntFunction<BlockState> lightEmission;
+      float explosionResistance;
+      float destroyTime;
+      boolean requiresCorrectToolForDrops;
+      boolean isRandomlyTicking;
+      float friction;
+      float speedFactor;
+      float jumpFactor;
+      ResourceLocation drops;
+      boolean canOcclude;
+      boolean isAir;
+      BlockBehaviour.StateArgumentPredicate<EntityType<?>> isValidSpawn;
+      BlockBehaviour.StatePredicate isRedstoneConductor;
+      BlockBehaviour.StatePredicate isSuffocating;
+      BlockBehaviour.StatePredicate isViewBlocking;
+      BlockBehaviour.StatePredicate hasPostProcess;
+      BlockBehaviour.StatePredicate emissiveRendering;
+      boolean dynamicShape;
+
+      private Properties(Material var1, MaterialColor var2) {
+         this(var1, (var1x) -> {
+            return var2;
+         });
+      }
+
+      private Properties(Material var1, Function<BlockState, MaterialColor> var2) {
+         this.hasCollision = true;
+         this.soundType = SoundType.STONE;
+         this.lightEmission = (var0) -> {
+            return 0;
+         };
+         this.friction = 0.6F;
+         this.speedFactor = 1.0F;
+         this.jumpFactor = 1.0F;
+         this.canOcclude = true;
+         this.isValidSpawn = (var0, var1x, var2x, var3) -> {
+            return var0.isFaceSturdy(var1x, var2x, Direction.UP) && var0.getLightEmission() < 14;
+         };
+         this.isRedstoneConductor = (var0, var1x, var2x) -> {
+            return var0.getMaterial().isSolidBlocking() && var0.isCollisionShapeFullBlock(var1x, var2x);
+         };
+         this.isSuffocating = (var1x, var2x, var3) -> {
+            return this.material.blocksMotion() && var1x.isCollisionShapeFullBlock(var2x, var3);
+         };
+         this.isViewBlocking = this.isSuffocating;
+         this.hasPostProcess = (var0, var1x, var2x) -> {
+            return false;
+         };
+         this.emissiveRendering = (var0, var1x, var2x) -> {
+            return false;
+         };
+         this.material = var1;
+         this.materialColor = var2;
+      }
+
+      public static BlockBehaviour.Properties of(Material var0) {
+         return of(var0, var0.getColor());
+      }
+
+      public static BlockBehaviour.Properties of(Material var0, DyeColor var1) {
+         return of(var0, var1.getMaterialColor());
+      }
+
+      public static BlockBehaviour.Properties of(Material var0, MaterialColor var1) {
+         return new BlockBehaviour.Properties(var0, var1);
+      }
+
+      public static BlockBehaviour.Properties of(Material var0, Function<BlockState, MaterialColor> var1) {
+         return new BlockBehaviour.Properties(var0, var1);
+      }
+
+      public static BlockBehaviour.Properties copy(BlockBehaviour var0) {
+         BlockBehaviour.Properties var1 = new BlockBehaviour.Properties(var0.material, var0.properties.materialColor);
+         var1.material = var0.properties.material;
+         var1.destroyTime = var0.properties.destroyTime;
+         var1.explosionResistance = var0.properties.explosionResistance;
+         var1.hasCollision = var0.properties.hasCollision;
+         var1.isRandomlyTicking = var0.properties.isRandomlyTicking;
+         var1.lightEmission = var0.properties.lightEmission;
+         var1.materialColor = var0.properties.materialColor;
+         var1.soundType = var0.properties.soundType;
+         var1.friction = var0.properties.friction;
+         var1.speedFactor = var0.properties.speedFactor;
+         var1.dynamicShape = var0.properties.dynamicShape;
+         var1.canOcclude = var0.properties.canOcclude;
+         var1.isAir = var0.properties.isAir;
+         var1.requiresCorrectToolForDrops = var0.properties.requiresCorrectToolForDrops;
+         return var1;
+      }
+
+      public BlockBehaviour.Properties noCollission() {
+         this.hasCollision = false;
+         this.canOcclude = false;
+         return this;
+      }
+
+      public BlockBehaviour.Properties noOcclusion() {
+         this.canOcclude = false;
+         return this;
+      }
+
+      public BlockBehaviour.Properties friction(float var1) {
+         this.friction = var1;
+         return this;
+      }
+
+      public BlockBehaviour.Properties speedFactor(float var1) {
+         this.speedFactor = var1;
+         return this;
+      }
+
+      public BlockBehaviour.Properties jumpFactor(float var1) {
+         this.jumpFactor = var1;
+         return this;
+      }
+
+      public BlockBehaviour.Properties sound(SoundType var1) {
+         this.soundType = var1;
+         return this;
+      }
+
+      public BlockBehaviour.Properties lightLevel(ToIntFunction<BlockState> var1) {
+         this.lightEmission = var1;
+         return this;
+      }
+
+      public BlockBehaviour.Properties strength(float var1, float var2) {
+         return this.destroyTime(var1).explosionResistance(var2);
+      }
+
+      public BlockBehaviour.Properties instabreak() {
+         return this.strength(0.0F);
+      }
+
+      public BlockBehaviour.Properties strength(float var1) {
+         this.strength(var1, var1);
+         return this;
+      }
+
+      public BlockBehaviour.Properties randomTicks() {
+         this.isRandomlyTicking = true;
+         return this;
+      }
+
+      public BlockBehaviour.Properties dynamicShape() {
+         this.dynamicShape = true;
+         return this;
+      }
+
+      public BlockBehaviour.Properties noDrops() {
+         this.drops = BuiltInLootTables.EMPTY;
+         return this;
+      }
+
+      public BlockBehaviour.Properties dropsLike(Block var1) {
+         this.drops = var1.getLootTable();
+         return this;
+      }
+
+      public BlockBehaviour.Properties air() {
+         this.isAir = true;
+         return this;
+      }
+
+      public BlockBehaviour.Properties isValidSpawn(BlockBehaviour.StateArgumentPredicate<EntityType<?>> var1) {
+         this.isValidSpawn = var1;
+         return this;
+      }
+
+      public BlockBehaviour.Properties isRedstoneConductor(BlockBehaviour.StatePredicate var1) {
+         this.isRedstoneConductor = var1;
+         return this;
+      }
+
+      public BlockBehaviour.Properties isSuffocating(BlockBehaviour.StatePredicate var1) {
+         this.isSuffocating = var1;
+         return this;
+      }
+
+      public BlockBehaviour.Properties isViewBlocking(BlockBehaviour.StatePredicate var1) {
+         this.isViewBlocking = var1;
+         return this;
+      }
+
+      public BlockBehaviour.Properties hasPostProcess(BlockBehaviour.StatePredicate var1) {
+         this.hasPostProcess = var1;
+         return this;
+      }
+
+      public BlockBehaviour.Properties emissiveRendering(BlockBehaviour.StatePredicate var1) {
+         this.emissiveRendering = var1;
+         return this;
+      }
+
+      public BlockBehaviour.Properties requiresCorrectToolForDrops() {
+         this.requiresCorrectToolForDrops = true;
+         return this;
+      }
+
+      public BlockBehaviour.Properties color(MaterialColor var1) {
+         this.materialColor = (var1x) -> {
+            return var1;
+         };
+         return this;
+      }
+
+      public BlockBehaviour.Properties destroyTime(float var1) {
+         this.destroyTime = var1;
+         return this;
+      }
+
+      public BlockBehaviour.Properties explosionResistance(float var1) {
+         this.explosionResistance = Math.max(0.0F, var1);
+         return this;
+      }
+   }
+
+   public static enum OffsetType {
+      NONE,
+      XZ,
+      XYZ;
+
+      private OffsetType() {
+      }
+   }
+
    public interface StateArgumentPredicate<A> {
       boolean test(BlockState var1, BlockGetter var2, BlockPos var3, A var4);
    }
 
    public interface StatePredicate {
@@ -554,16 +796,21 @@
       public final boolean entityCanStandOnFace(BlockGetter var1, BlockPos var2, Entity var3, Direction var4) {
          return Block.isFaceFull(this.getCollisionShape(var1, var2, CollisionContext.of(var3)), var4);
       }
 
       public Vec3 getOffset(BlockGetter var1, BlockPos var2) {
-         BlockBehaviour.OffsetType var3 = this.getBlock().getOffsetType();
-         if (var3 == BlockBehaviour.OffsetType.NONE) {
+         Block var3 = this.getBlock();
+         BlockBehaviour.OffsetType var4 = var3.getOffsetType();
+         if (var4 == BlockBehaviour.OffsetType.NONE) {
             return Vec3.ZERO;
          } else {
-            long var4 = Mth.getSeed(var2.getX(), 0, var2.getZ());
-            return new Vec3(((double)((float)(var4 & 15L) / 15.0F) - 0.5D) * 0.5D, var3 == BlockBehaviour.OffsetType.XYZ ? ((double)((float)(var4 >> 4 & 15L) / 15.0F) - 1.0D) * 0.2D : 0.0D, ((double)((float)(var4 >> 8 & 15L) / 15.0F) - 0.5D) * 0.5D);
+            long var5 = Mth.getSeed(var2.getX(), 0, var2.getZ());
+            float var7 = var3.getMaxHorizontalOffset();
+            double var8 = Mth.clamp(((double)((float)(var5 & 15L) / 15.0F) - 0.5D) * 0.5D, (double)(-var7), (double)var7);
+            double var10 = var4 == BlockBehaviour.OffsetType.XYZ ? ((double)((float)(var5 >> 4 & 15L) / 15.0F) - 1.0D) * (double)var3.getMaxVerticalOffset() : 0.0D;
+            double var12 = Mth.clamp(((double)((float)(var5 >> 8 & 15L) / 15.0F) - 0.5D) * 0.5D, (double)(-var7), (double)var7);
+            return new Vec3(var8, var10, var12);
          }
       }
 
       public boolean triggerEvent(Level var1, BlockPos var2, int var3, int var4) {
          return this.getBlock().triggerEvent(this.asState(), var1, var2, var3, var4);
@@ -583,11 +830,11 @@
          Direction[] var6 = BlockBehaviour.UPDATE_SHAPE_ORDER;
          int var7 = var6.length;
 
          for(int var8 = 0; var8 < var7; ++var8) {
             Direction var9 = var6[var8];
-            var5.setWithOffset(var2, var9);
+            var5.setWithOffset(var2, (Direction)var9);
             BlockState var10 = var1.getBlockState(var5);
             BlockState var11 = var10.updateShape(var9.getOpposite(), this.asState(), var1, var5, var2);
             Block.updateOrDestroy(var10, var11, var1, var5, var3, var4);
          }
 
@@ -673,19 +920,28 @@
       public MenuProvider getMenuProvider(Level var1, BlockPos var2) {
          return this.getBlock().getMenuProvider(this.asState(), var1, var2);
       }
 
       public boolean is(Tag<Block> var1) {
-         return this.getBlock().is(var1);
+         return var1.contains(this.getBlock());
       }
 
       public boolean is(Tag<Block> var1, Predicate<BlockBehaviour.BlockStateBase> var2) {
-         return this.getBlock().is(var1) && var2.test(this);
+         return this.is(var1) && var2.test(this);
       }
 
+      public boolean hasBlockEntity() {
+         return this.getBlock() instanceof EntityBlock;
+      }
+
+      @Nullable
+      public <T extends BlockEntity> BlockEntityTicker<T> getTicker(Level var1, BlockEntityType<T> var2) {
+         return this.getBlock() instanceof EntityBlock ? ((EntityBlock)this.getBlock()).getTicker(var1, this.asState(), var2) : null;
+      }
+
       public boolean is(Block var1) {
-         return this.getBlock().is(var1);
+         return this.getBlock() == var1;
       }
 
       public FluidState getFluidState() {
          return this.getBlock().getFluidState(this.asState());
       }
@@ -722,24 +978,24 @@
 
       public boolean requiresCorrectToolForDrops() {
          return this.requiresCorrectToolForDrops;
       }
 
-      static final class Cache {
+      private static final class Cache {
          private static final Direction[] DIRECTIONS = Direction.values();
          private static final int SUPPORT_TYPE_COUNT = SupportType.values().length;
          protected final boolean solidRender;
-         private final boolean propagatesSkylightDown;
-         private final int lightBlock;
+         final boolean propagatesSkylightDown;
+         final int lightBlock;
          @Nullable
-         private final VoxelShape[] occlusionShapes;
+         final VoxelShape[] occlusionShapes;
          protected final VoxelShape collisionShape;
          protected final boolean largeCollisionShape;
          private final boolean[] faceSturdy;
          protected final boolean isCollisionShapeFullBlock;
 
-         private Cache(BlockState var1) {
+         Cache(BlockState var1) {
             Block var2 = var1.getBlock();
             this.solidRender = var1.isSolidRender(EmptyBlockGetter.INSTANCE, BlockPos.ZERO);
             this.propagatesSkylightDown = var2.propagatesSkylightDown(var1, EmptyBlockGetter.INSTANCE, BlockPos.ZERO);
             this.lightBlock = var2.getLightBlock(var1, EmptyBlockGetter.INSTANCE, BlockPos.ZERO);
             int var5;
@@ -786,222 +1042,6 @@
          private static int getFaceSupportIndex(Direction var0, SupportType var1) {
             return var0.ordinal() * SUPPORT_TYPE_COUNT + var1.ordinal();
          }
       }
    }
-
-   public static class Properties {
-      private Material material;
-      private Function<BlockState, MaterialColor> materialColor;
-      private boolean hasCollision;
-      private SoundType soundType;
-      private ToIntFunction<BlockState> lightEmission;
-      private float explosionResistance;
-      private float destroyTime;
-      private boolean requiresCorrectToolForDrops;
-      private boolean isRandomlyTicking;
-      private float friction;
-      private float speedFactor;
-      private float jumpFactor;
-      private ResourceLocation drops;
-      private boolean canOcclude;
-      private boolean isAir;
-      private BlockBehaviour.StateArgumentPredicate<EntityType<?>> isValidSpawn;
-      private BlockBehaviour.StatePredicate isRedstoneConductor;
-      private BlockBehaviour.StatePredicate isSuffocating;
-      private BlockBehaviour.StatePredicate isViewBlocking;
-      private BlockBehaviour.StatePredicate hasPostProcess;
-      private BlockBehaviour.StatePredicate emissiveRendering;
-      private boolean dynamicShape;
-
-      private Properties(Material var1, MaterialColor var2) {
-         this(var1, (var1x) -> {
-            return var2;
-         });
-      }
-
-      private Properties(Material var1, Function<BlockState, MaterialColor> var2) {
-         this.hasCollision = true;
-         this.soundType = SoundType.STONE;
-         this.lightEmission = (var0) -> {
-            return 0;
-         };
-         this.friction = 0.6F;
-         this.speedFactor = 1.0F;
-         this.jumpFactor = 1.0F;
-         this.canOcclude = true;
-         this.isValidSpawn = (var0, var1x, var2x, var3) -> {
-            return var0.isFaceSturdy(var1x, var2x, Direction.UP) && var0.getLightEmission() < 14;
-         };
-         this.isRedstoneConductor = (var0, var1x, var2x) -> {
-            return var0.getMaterial().isSolidBlocking() && var0.isCollisionShapeFullBlock(var1x, var2x);
-         };
-         this.isSuffocating = (var1x, var2x, var3) -> {
-            return this.material.blocksMotion() && var1x.isCollisionShapeFullBlock(var2x, var3);
-         };
-         this.isViewBlocking = this.isSuffocating;
-         this.hasPostProcess = (var0, var1x, var2x) -> {
-            return false;
-         };
-         this.emissiveRendering = (var0, var1x, var2x) -> {
-            return false;
-         };
-         this.material = var1;
-         this.materialColor = var2;
-      }
-
-      public static BlockBehaviour.Properties of(Material var0) {
-         return of(var0, var0.getColor());
-      }
-
-      public static BlockBehaviour.Properties of(Material var0, DyeColor var1) {
-         return of(var0, var1.getMaterialColor());
-      }
-
-      public static BlockBehaviour.Properties of(Material var0, MaterialColor var1) {
-         return new BlockBehaviour.Properties(var0, var1);
-      }
-
-      public static BlockBehaviour.Properties of(Material var0, Function<BlockState, MaterialColor> var1) {
-         return new BlockBehaviour.Properties(var0, var1);
-      }
-
-      public static BlockBehaviour.Properties copy(BlockBehaviour var0) {
-         BlockBehaviour.Properties var1 = new BlockBehaviour.Properties(var0.material, var0.properties.materialColor);
-         var1.material = var0.properties.material;
-         var1.destroyTime = var0.properties.destroyTime;
-         var1.explosionResistance = var0.properties.explosionResistance;
-         var1.hasCollision = var0.properties.hasCollision;
-         var1.isRandomlyTicking = var0.properties.isRandomlyTicking;
-         var1.lightEmission = var0.properties.lightEmission;
-         var1.materialColor = var0.properties.materialColor;
-         var1.soundType = var0.properties.soundType;
-         var1.friction = var0.properties.friction;
-         var1.speedFactor = var0.properties.speedFactor;
-         var1.dynamicShape = var0.properties.dynamicShape;
-         var1.canOcclude = var0.properties.canOcclude;
-         var1.isAir = var0.properties.isAir;
-         var1.requiresCorrectToolForDrops = var0.properties.requiresCorrectToolForDrops;
-         return var1;
-      }
-
-      public BlockBehaviour.Properties noCollission() {
-         this.hasCollision = false;
-         this.canOcclude = false;
-         return this;
-      }
-
-      public BlockBehaviour.Properties noOcclusion() {
-         this.canOcclude = false;
-         return this;
-      }
-
-      public BlockBehaviour.Properties friction(float var1) {
-         this.friction = var1;
-         return this;
-      }
-
-      public BlockBehaviour.Properties speedFactor(float var1) {
-         this.speedFactor = var1;
-         return this;
-      }
-
-      public BlockBehaviour.Properties jumpFactor(float var1) {
-         this.jumpFactor = var1;
-         return this;
-      }
-
-      public BlockBehaviour.Properties sound(SoundType var1) {
-         this.soundType = var1;
-         return this;
-      }
-
-      public BlockBehaviour.Properties lightLevel(ToIntFunction<BlockState> var1) {
-         this.lightEmission = var1;
-         return this;
-      }
-
-      public BlockBehaviour.Properties strength(float var1, float var2) {
-         this.destroyTime = var1;
-         this.explosionResistance = Math.max(0.0F, var2);
-         return this;
-      }
-
-      public BlockBehaviour.Properties instabreak() {
-         return this.strength(0.0F);
-      }
-
-      public BlockBehaviour.Properties strength(float var1) {
-         this.strength(var1, var1);
-         return this;
-      }
-
-      public BlockBehaviour.Properties randomTicks() {
-         this.isRandomlyTicking = true;
-         return this;
-      }
-
-      public BlockBehaviour.Properties dynamicShape() {
-         this.dynamicShape = true;
-         return this;
-      }
-
-      public BlockBehaviour.Properties noDrops() {
-         this.drops = BuiltInLootTables.EMPTY;
-         return this;
-      }
-
-      public BlockBehaviour.Properties dropsLike(Block var1) {
-         this.drops = var1.getLootTable();
-         return this;
-      }
-
-      public BlockBehaviour.Properties air() {
-         this.isAir = true;
-         return this;
-      }
-
-      public BlockBehaviour.Properties isValidSpawn(BlockBehaviour.StateArgumentPredicate<EntityType<?>> var1) {
-         this.isValidSpawn = var1;
-         return this;
-      }
-
-      public BlockBehaviour.Properties isRedstoneConductor(BlockBehaviour.StatePredicate var1) {
-         this.isRedstoneConductor = var1;
-         return this;
-      }
-
-      public BlockBehaviour.Properties isSuffocating(BlockBehaviour.StatePredicate var1) {
-         this.isSuffocating = var1;
-         return this;
-      }
-
-      public BlockBehaviour.Properties isViewBlocking(BlockBehaviour.StatePredicate var1) {
-         this.isViewBlocking = var1;
-         return this;
-      }
-
-      public BlockBehaviour.Properties hasPostProcess(BlockBehaviour.StatePredicate var1) {
-         this.hasPostProcess = var1;
-         return this;
-      }
-
-      public BlockBehaviour.Properties emissiveRendering(BlockBehaviour.StatePredicate var1) {
-         this.emissiveRendering = var1;
-         return this;
-      }
-
-      public BlockBehaviour.Properties requiresCorrectToolForDrops() {
-         this.requiresCorrectToolForDrops = true;
-         return this;
-      }
-   }
-
-   public static enum OffsetType {
-      NONE,
-      XZ,
-      XYZ;
-
-      private OffsetType() {
-      }
-   }
 }
