--- net/minecraft/world/level/block/entity/BlockEntityType.java
+++ net/minecraft/world/level/block/entity/BlockEntityType.java
@@ -1,21 +1,21 @@
 package net.minecraft.world.level.block.entity;
 
 import com.google.common.collect.ImmutableSet;
 import com.mojang.datafixers.types.Type;
 import java.util.Set;
-import java.util.function.Supplier;
 import javax.annotation.Nullable;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Registry;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.util.datafix.fixes.References;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.piston.PistonMovingBlockEntity;
+import net.minecraft.world.level.block.state.BlockState;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class BlockEntityType<T extends BlockEntity> {
    private static final Logger LOGGER = LogManager.getLogger();
@@ -50,11 +50,11 @@
    public static final BlockEntityType<LecternBlockEntity> LECTERN;
    public static final BlockEntityType<BellBlockEntity> BELL;
    public static final BlockEntityType<JigsawBlockEntity> JIGSAW;
    public static final BlockEntityType<CampfireBlockEntity> CAMPFIRE;
    public static final BlockEntityType<BeehiveBlockEntity> BEEHIVE;
-   private final Supplier<? extends T> factory;
+   private final BlockEntityType.BlockEntitySupplier<? extends T> factory;
    private final Set<Block> validBlocks;
    private final Type<?> dataType;
 
    @Nullable
    public static ResourceLocation getKey(BlockEntityType<?> var0) {
@@ -68,23 +68,23 @@
 
       Type var2 = Util.fetchChoiceType(References.BLOCK_ENTITY, var0);
       return (BlockEntityType)Registry.register(Registry.BLOCK_ENTITY_TYPE, (String)var0, var1.build(var2));
    }
 
-   public BlockEntityType(Supplier<? extends T> var1, Set<Block> var2, Type<?> var3) {
+   public BlockEntityType(BlockEntityType.BlockEntitySupplier<? extends T> var1, Set<Block> var2, Type<?> var3) {
       this.factory = var1;
       this.validBlocks = var2;
       this.dataType = var3;
    }
 
    @Nullable
-   public T create() {
-      return (BlockEntity)this.factory.get();
+   public T create(BlockPos var1, BlockState var2) {
+      return this.factory.create(var1, var2);
    }
 
-   public boolean isValid(Block var1) {
-      return this.validBlocks.contains(var1);
+   public boolean isValid(BlockState var1) {
+      return this.validBlocks.contains(var1.getBlock());
    }
 
    @Nullable
    public T getBlockEntity(BlockGetter var1, BlockPos var2) {
       BlockEntity var3 = var1.getBlockEntity(var2);
@@ -126,22 +126,27 @@
       CAMPFIRE = register("campfire", BlockEntityType.Builder.of(CampfireBlockEntity::new, Blocks.CAMPFIRE, Blocks.SOUL_CAMPFIRE));
       BEEHIVE = register("beehive", BlockEntityType.Builder.of(BeehiveBlockEntity::new, Blocks.BEE_NEST, Blocks.BEEHIVE));
    }
 
    public static final class Builder<T extends BlockEntity> {
-      private final Supplier<? extends T> factory;
+      private final BlockEntityType.BlockEntitySupplier<? extends T> factory;
       private final Set<Block> validBlocks;
 
-      private Builder(Supplier<? extends T> var1, Set<Block> var2) {
+      private Builder(BlockEntityType.BlockEntitySupplier<? extends T> var1, Set<Block> var2) {
          this.factory = var1;
          this.validBlocks = var2;
       }
 
-      public static <T extends BlockEntity> BlockEntityType.Builder<T> of(Supplier<? extends T> var0, Block... var1) {
+      public static <T extends BlockEntity> BlockEntityType.Builder<T> of(BlockEntityType.BlockEntitySupplier<? extends T> var0, Block... var1) {
          return new BlockEntityType.Builder(var0, ImmutableSet.copyOf(var1));
       }
 
       public BlockEntityType<T> build(Type<?> var1) {
          return new BlockEntityType(this.factory, this.validBlocks, var1);
       }
    }
+
+   @FunctionalInterface
+   interface BlockEntitySupplier<T extends BlockEntity> {
+      T create(BlockPos var1, BlockState var2);
+   }
 }
