--- net/minecraft/world/level/block/BasePressurePlateBlock.java
+++ net/minecraft/world/level/block/BasePressurePlateBlock.java
@@ -1,18 +1,20 @@
 package net.minecraft.world.level.block;
 
 import java.util.Random;
+import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.material.PushReaction;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.world.phys.shapes.VoxelShape;
 
@@ -47,44 +49,46 @@
    }
 
    public void tick(BlockState var1, ServerLevel var2, BlockPos var3, Random var4) {
       int var5 = this.getSignalForState(var1);
       if (var5 > 0) {
-         this.checkPressed(var2, var3, var1, var5);
+         this.checkPressed((Entity)null, var2, var3, var1, var5);
       }
 
    }
 
    public void entityInside(BlockState var1, Level var2, BlockPos var3, Entity var4) {
       if (!var2.isClientSide) {
          int var5 = this.getSignalForState(var1);
          if (var5 == 0) {
-            this.checkPressed(var2, var3, var1, var5);
+            this.checkPressed(var4, var2, var3, var1, var5);
          }
 
       }
    }
 
-   protected void checkPressed(Level var1, BlockPos var2, BlockState var3, int var4) {
-      int var5 = this.getSignalStrength(var1, var2);
-      boolean var6 = var4 > 0;
+   protected void checkPressed(@Nullable Entity var1, Level var2, BlockPos var3, BlockState var4, int var5) {
+      int var6 = this.getSignalStrength(var2, var3);
       boolean var7 = var5 > 0;
-      if (var4 != var5) {
-         BlockState var8 = this.setSignalForState(var3, var5);
-         var1.setBlock(var2, var8, 2);
-         this.updateNeighbours(var1, var2);
-         var1.setBlocksDirty(var2, var3, var8);
+      boolean var8 = var6 > 0;
+      if (var5 != var6) {
+         BlockState var9 = this.setSignalForState(var4, var6);
+         var2.setBlock(var3, var9, 2);
+         this.updateNeighbours(var2, var3);
+         var2.setBlocksDirty(var3, var4, var9);
       }
 
-      if (!var7 && var6) {
-         this.playOffSound(var1, var2);
-      } else if (var7 && !var6) {
-         this.playOnSound(var1, var2);
+      if (!var8 && var7) {
+         this.playOffSound(var2, var3);
+         var2.gameEvent(var1, GameEvent.BLOCK_UNPRESS, var3);
+      } else if (var8 && !var7) {
+         this.playOnSound(var2, var3);
+         var2.gameEvent(var1, GameEvent.BLOCK_PRESS, var3);
       }
 
-      if (var7) {
-         var1.getBlockTicks().scheduleTick(new BlockPos(var2), this, this.getPressedTime());
+      if (var8) {
+         var2.getBlockTicks().scheduleTick(new BlockPos(var3), this, this.getPressedTime());
       }
 
    }
 
    protected abstract void playOnSound(LevelAccessor var1, BlockPos var2);
