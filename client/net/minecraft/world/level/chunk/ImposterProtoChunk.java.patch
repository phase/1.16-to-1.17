--- net/minecraft/world/level/chunk/ImposterProtoChunk.java
+++ net/minecraft/world/level/chunk/ImposterProtoChunk.java
@@ -15,20 +15,19 @@
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.levelgen.GenerationStep;
 import net.minecraft.world.level.levelgen.Heightmap;
 import net.minecraft.world.level.levelgen.feature.StructureFeature;
 import net.minecraft.world.level.levelgen.structure.StructureStart;
-import net.minecraft.world.level.lighting.LevelLightEngine;
 import net.minecraft.world.level.material.Fluid;
 import net.minecraft.world.level.material.FluidState;
 import net.minecraft.world.level.material.Fluids;
 
 public class ImposterProtoChunk extends ProtoChunk {
    private final LevelChunk wrapped;
 
    public ImposterProtoChunk(LevelChunk var1) {
-      super(var1.getPos(), UpgradeData.EMPTY);
+      super(var1.getPos(), UpgradeData.EMPTY, var1);
       this.wrapped = var1;
    }
 
    @Nullable
    public BlockEntity getBlockEntity(BlockPos var1) {
@@ -51,11 +50,11 @@
    @Nullable
    public BlockState setBlockState(BlockPos var1, BlockState var2, boolean var3) {
       return null;
    }
 
-   public void setBlockEntity(BlockPos var1, BlockEntity var2) {
+   public void setBlockEntity(BlockEntity var1) {
    }
 
    public void addEntity(Entity var1) {
    }
 
@@ -64,15 +63,10 @@
 
    public LevelChunkSection[] getSections() {
       return this.wrapped.getSections();
    }
 
-   @Nullable
-   public LevelLightEngine getLightEngine() {
-      return this.wrapped.getLightEngine();
-   }
-
    public void setHeightmap(Heightmap.Types var1, long[] var2) {
    }
 
    private Heightmap.Types fixType(Heightmap.Types var1) {
       if (var1 == Heightmap.Types.WORLD_SURFACE_WG) {
@@ -84,17 +78,18 @@
 
    public int getHeight(Heightmap.Types var1, int var2, int var3) {
       return this.wrapped.getHeight(this.fixType(var1), var2, var3);
    }
 
+   public BlockPos getHeighestPosition(Heightmap.Types var1) {
+      return this.wrapped.getHeighestPosition(this.fixType(var1));
+   }
+
    public ChunkPos getPos() {
       return this.wrapped.getPos();
    }
 
-   public void setLastSaveTime(long var1) {
-   }
-
    @Nullable
    public StructureStart<?> getStartForFeature(StructureFeature<?> var1) {
       return this.wrapped.getStartForFeature(var1);
    }
 
@@ -164,17 +159,17 @@
    }
 
    public ProtoTickList<Block> getBlockTicks() {
       return new ProtoTickList((var0) -> {
          return var0.defaultBlockState().isAir();
-      }, this.getPos());
+      }, this.getPos(), this);
    }
 
    public ProtoTickList<Fluid> getLiquidTicks() {
       return new ProtoTickList((var0) -> {
          return var0 == Fluids.EMPTY;
-      }, this.getPos());
+      }, this.getPos(), this);
    }
 
    public BitSet getCarvingMask(GenerationStep.Carving var1) {
       throw (UnsupportedOperationException)Util.pauseInIde(new UnsupportedOperationException("Meaningless in this context"));
    }
