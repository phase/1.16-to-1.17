--- net/minecraft/world/level/chunk/ImposterProtoChunk.java
+++ net/minecraft/world/level/chunk/ImposterProtoChunk.java
@@ -24,11 +24,11 @@
 
 public class ImposterProtoChunk extends ProtoChunk {
    private final LevelChunk wrapped;
 
    public ImposterProtoChunk(LevelChunk var1) {
-      super(var1.getPos(), UpgradeData.EMPTY);
+      super(var1.getPos(), UpgradeData.EMPTY, var1);
       this.wrapped = var1;
    }
 
    @Nullable
    public BlockEntity getBlockEntity(BlockPos var1) {
@@ -51,11 +51,11 @@
    @Nullable
    public BlockState setBlockState(BlockPos var1, BlockState var2, boolean var3) {
       return null;
    }
 
-   public void setBlockEntity(BlockPos var1, BlockEntity var2) {
+   public void setBlockEntity(BlockEntity var1) {
    }
 
    public void addEntity(Entity var1) {
    }
 
@@ -88,13 +88,10 @@
 
    public ChunkPos getPos() {
       return this.wrapped.getPos();
    }
 
-   public void setLastSaveTime(long var1) {
-   }
-
    @Nullable
    public StructureStart<?> getStartForFeature(StructureFeature<?> var1) {
       return this.wrapped.getStartForFeature(var1);
    }
 
@@ -164,17 +161,17 @@
    }
 
    public ProtoTickList<Block> getBlockTicks() {
       return new ProtoTickList((var0) -> {
          return var0.defaultBlockState().isAir();
-      }, this.getPos());
+      }, this.getPos(), this);
    }
 
    public ProtoTickList<Fluid> getLiquidTicks() {
       return new ProtoTickList((var0) -> {
          return var0 == Fluids.EMPTY;
-      }, this.getPos());
+      }, this.getPos(), this);
    }
 
    public BitSet getCarvingMask(GenerationStep.Carving var1) {
       throw (UnsupportedOperationException)Util.pauseInIde(new UnsupportedOperationException("Meaningless in this context"));
    }
