--- net/minecraft/world/level/chunk/ChunkAccess.java
+++ net/minecraft/world/level/chunk/ChunkAccess.java
@@ -15,21 +15,26 @@
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.TickList;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.gameevent.GameEventDispatcher;
 import net.minecraft.world.level.levelgen.Heightmap;
 import net.minecraft.world.level.levelgen.feature.StructureFeature;
 import net.minecraft.world.level.levelgen.structure.StructureStart;
 import net.minecraft.world.level.material.Fluid;
 import org.apache.logging.log4j.LogManager;
 
 public interface ChunkAccess extends BlockGetter, FeatureAccess {
+   default GameEventDispatcher getEventDispatcher(int var1) {
+      return GameEventDispatcher.NOOP;
+   }
+
    @Nullable
    BlockState setBlockState(BlockPos var1, BlockState var2, boolean var3);
 
-   void setBlockEntity(BlockPos var1, BlockEntity var2);
+   void setBlockEntity(BlockEntity var1);
 
    void addEntity(Entity var1);
 
    @Nullable
    default LevelChunkSection getHighestSection() {
@@ -45,44 +50,51 @@
       return null;
    }
 
    default int getHighestSectionPosition() {
       LevelChunkSection var1 = this.getHighestSection();
-      return var1 == null ? 0 : var1.bottomBlockY();
+      return var1 == null ? this.getMinBuildHeight() : var1.bottomBlockY();
    }
 
    Set<BlockPos> getBlockEntitiesPos();
 
    LevelChunkSection[] getSections();
 
+   default LevelChunkSection getOrCreateSection(int var1) {
+      LevelChunkSection[] var2 = this.getSections();
+      if (var2[var1] == LevelChunk.EMPTY_SECTION) {
+         var2[var1] = new LevelChunkSection(this.getSectionYFromSectionIndex(var1));
+      }
+
+      return var2[var1];
+   }
+
    Collection<Entry<Heightmap.Types, Heightmap>> getHeightmaps();
 
    void setHeightmap(Heightmap.Types var1, long[] var2);
 
    Heightmap getOrCreateHeightmapUnprimed(Heightmap.Types var1);
 
    int getHeight(Heightmap.Types var1, int var2, int var3);
 
    ChunkPos getPos();
 
-   void setLastSaveTime(long var1);
-
    Map<StructureFeature<?>, StructureStart<?>> getAllStarts();
 
    void setAllStarts(Map<StructureFeature<?>, StructureStart<?>> var1);
 
    default boolean isYSpaceEmpty(int var1, int var2) {
-      if (var1 < 0) {
-         var1 = 0;
+      if (var1 < this.getMinBuildHeight()) {
+         var1 = this.getMinBuildHeight();
       }
 
-      if (var2 >= 256) {
-         var2 = 255;
+      if (var2 >= this.getMaxBuildHeight()) {
+         var2 = this.getMaxBuildHeight() - 1;
       }
 
       for(int var3 = var1; var3 <= var2; var3 += 16) {
-         if (!LevelChunkSection.isEmpty(this.getSections()[var3 >> 4])) {
+         if (!LevelChunkSection.isEmpty(this.getSections()[this.getSectionIndex(var3)])) {
             return false;
          }
       }
 
       return true;
