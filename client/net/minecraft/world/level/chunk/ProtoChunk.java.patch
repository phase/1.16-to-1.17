--- net/minecraft/world/level/chunk/ProtoChunk.java
+++ net/minecraft/world/level/chunk/ProtoChunk.java
@@ -18,14 +18,15 @@
 import java.util.Set;
 import java.util.Map.Entry;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
+import net.minecraft.core.SectionPos;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.level.ChunkPos;
-import net.minecraft.world.level.Level;
+import net.minecraft.world.level.LevelHeightAccessor;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.levelgen.GenerationStep;
@@ -58,86 +59,88 @@
    private final Map<StructureFeature<?>, StructureStart<?>> structureStarts;
    private final Map<StructureFeature<?>, LongSet> structuresRefences;
    private final UpgradeData upgradeData;
    private final ProtoTickList<Block> blockTicks;
    private final ProtoTickList<Fluid> liquidTicks;
+   private final LevelHeightAccessor levelHeightAccessor;
    private long inhabitedTime;
    private final Map<GenerationStep.Carving, BitSet> carvingMasks;
    private volatile boolean isLightCorrect;
 
-   public ProtoChunk(ChunkPos var1, UpgradeData var2) {
+   public ProtoChunk(ChunkPos var1, UpgradeData var2, LevelHeightAccessor var3) {
       this(var1, var2, (LevelChunkSection[])null, new ProtoTickList((var0) -> {
          return var0 == null || var0.defaultBlockState().isAir();
-      }, var1), new ProtoTickList((var0) -> {
+      }, var1, var3), new ProtoTickList((var0) -> {
          return var0 == null || var0 == Fluids.EMPTY;
-      }, var1));
+      }, var1, var3), var3);
    }
 
-   public ProtoChunk(ChunkPos var1, UpgradeData var2, @Nullable LevelChunkSection[] var3, ProtoTickList<Block> var4, ProtoTickList<Fluid> var5) {
+   public ProtoChunk(ChunkPos var1, UpgradeData var2, @Nullable LevelChunkSection[] var3, ProtoTickList<Block> var4, ProtoTickList<Fluid> var5, LevelHeightAccessor var6) {
       this.heightmaps = Maps.newEnumMap(Heightmap.Types.class);
       this.status = ChunkStatus.EMPTY;
       this.blockEntities = Maps.newHashMap();
       this.blockEntityNbts = Maps.newHashMap();
-      this.sections = new LevelChunkSection[16];
       this.entities = Lists.newArrayList();
       this.lights = Lists.newArrayList();
-      this.postProcessing = new ShortList[16];
       this.structureStarts = Maps.newHashMap();
       this.structuresRefences = Maps.newHashMap();
       this.carvingMasks = new Object2ObjectArrayMap();
       this.chunkPos = var1;
       this.upgradeData = var2;
       this.blockTicks = var4;
       this.liquidTicks = var5;
+      this.levelHeightAccessor = var6;
+      this.sections = new LevelChunkSection[var6.getSectionsCount()];
       if (var3 != null) {
          if (this.sections.length == var3.length) {
             System.arraycopy(var3, 0, this.sections, 0, this.sections.length);
          } else {
             LOGGER.warn("Could not set level chunk sections, array length is {} instead of {}", var3.length, this.sections.length);
          }
       }
 
+      this.postProcessing = new ShortList[var6.getSectionsCount()];
    }
 
    public BlockState getBlockState(BlockPos var1) {
       int var2 = var1.getY();
-      if (Level.isOutsideBuildHeight(var2)) {
+      if (this.isOutsideBuildHeight(var2)) {
          return Blocks.VOID_AIR.defaultBlockState();
       } else {
-         LevelChunkSection var3 = this.getSections()[var2 >> 4];
+         LevelChunkSection var3 = this.getSections()[this.getSectionIndex(var2)];
          return LevelChunkSection.isEmpty(var3) ? Blocks.AIR.defaultBlockState() : var3.getBlockState(var1.getX() & 15, var2 & 15, var1.getZ() & 15);
       }
    }
 
    public FluidState getFluidState(BlockPos var1) {
       int var2 = var1.getY();
-      if (Level.isOutsideBuildHeight(var2)) {
+      if (this.isOutsideBuildHeight(var2)) {
          return Fluids.EMPTY.defaultFluidState();
       } else {
-         LevelChunkSection var3 = this.getSections()[var2 >> 4];
+         LevelChunkSection var3 = this.getSections()[this.getSectionIndex(var2)];
          return LevelChunkSection.isEmpty(var3) ? Fluids.EMPTY.defaultFluidState() : var3.getFluidState(var1.getX() & 15, var2 & 15, var1.getZ() & 15);
       }
    }
 
    public Stream<BlockPos> getLights() {
       return this.lights.stream();
    }
 
    public ShortList[] getPackedLights() {
-      ShortList[] var1 = new ShortList[16];
+      ShortList[] var1 = new ShortList[this.getSectionsCount()];
       Iterator var2 = this.lights.iterator();
 
       while(var2.hasNext()) {
          BlockPos var3 = (BlockPos)var2.next();
-         ChunkAccess.getOrCreateOffsetList(var1, var3.getY() >> 4).add(packOffsetCoordinates(var3));
+         ChunkAccess.getOrCreateOffsetList(var1, this.getSectionIndex(var3.getY())).add(packOffsetCoordinates(var3));
       }
 
       return var1;
    }
 
    public void addLight(short var1, int var2) {
-      this.addLight(unpackOffsetCoordinates(var1, var2, this.chunkPos));
+      this.addLight(unpackOffsetCoordinates(var1, this.getSectionYFromSectionIndex(var2), this.chunkPos));
    }
 
    public void addLight(BlockPos var1) {
       this.lights.add(var1.immutable());
    }
@@ -145,73 +148,64 @@
    @Nullable
    public BlockState setBlockState(BlockPos var1, BlockState var2, boolean var3) {
       int var4 = var1.getX();
       int var5 = var1.getY();
       int var6 = var1.getZ();
-      if (var5 >= 0 && var5 < 256) {
-         if (this.sections[var5 >> 4] == LevelChunk.EMPTY_SECTION && var2.is(Blocks.AIR)) {
+      if (var5 >= this.getMinBuildHeight() && var5 < this.getMaxBuildHeight()) {
+         int var7 = this.getSectionIndex(var5);
+         if (this.sections[var7] == LevelChunk.EMPTY_SECTION && var2.is(Blocks.AIR)) {
             return var2;
          } else {
             if (var2.getLightEmission() > 0) {
                this.lights.add(new BlockPos((var4 & 15) + this.getPos().getMinBlockX(), var5, (var6 & 15) + this.getPos().getMinBlockZ()));
             }
 
-            LevelChunkSection var7 = this.getOrCreateSection(var5 >> 4);
-            BlockState var8 = var7.setBlockState(var4 & 15, var5 & 15, var6 & 15, var2);
-            if (this.status.isOrAfter(ChunkStatus.FEATURES) && var2 != var8 && (var2.getLightBlock(this, var1) != var8.getLightBlock(this, var1) || var2.getLightEmission() != var8.getLightEmission() || var2.useShapeForLightOcclusion() || var8.useShapeForLightOcclusion())) {
-               LevelLightEngine var9 = this.getLightEngine();
-               var9.checkBlock(var1);
+            LevelChunkSection var8 = this.getOrCreateSection(var7);
+            BlockState var9 = var8.setBlockState(var4 & 15, var5 & 15, var6 & 15, var2);
+            if (this.status.isOrAfter(ChunkStatus.FEATURES) && var2 != var9 && (var2.getLightBlock(this, var1) != var9.getLightBlock(this, var1) || var2.getLightEmission() != var9.getLightEmission() || var2.useShapeForLightOcclusion() || var9.useShapeForLightOcclusion())) {
+               this.lightEngine.checkBlock(var1);
             }
 
-            EnumSet var14 = this.getStatus().heightmapsAfter();
-            EnumSet var10 = null;
-            Iterator var11 = var14.iterator();
+            EnumSet var10 = this.getStatus().heightmapsAfter();
+            EnumSet var11 = null;
+            Iterator var12 = var10.iterator();
 
-            Heightmap.Types var12;
-            while(var11.hasNext()) {
-               var12 = (Heightmap.Types)var11.next();
-               Heightmap var13 = (Heightmap)this.heightmaps.get(var12);
-               if (var13 == null) {
-                  if (var10 == null) {
-                     var10 = EnumSet.noneOf(Heightmap.Types.class);
+            Heightmap.Types var13;
+            while(var12.hasNext()) {
+               var13 = (Heightmap.Types)var12.next();
+               Heightmap var14 = (Heightmap)this.heightmaps.get(var13);
+               if (var14 == null) {
+                  if (var11 == null) {
+                     var11 = EnumSet.noneOf(Heightmap.Types.class);
                   }
 
-                  var10.add(var12);
+                  var11.add(var13);
                }
             }
 
-            if (var10 != null) {
-               Heightmap.primeHeightmaps(this, var10);
+            if (var11 != null) {
+               Heightmap.primeHeightmaps(this, var11);
             }
 
-            var11 = var14.iterator();
+            var12 = var10.iterator();
 
-            while(var11.hasNext()) {
-               var12 = (Heightmap.Types)var11.next();
-               ((Heightmap)this.heightmaps.get(var12)).update(var4 & 15, var5, var6 & 15, var2);
+            while(var12.hasNext()) {
+               var13 = (Heightmap.Types)var12.next();
+               ((Heightmap)this.heightmaps.get(var13)).update(var4 & 15, var5, var6 & 15, var2);
             }
 
-            return var8;
+            return var9;
          }
       } else {
          return Blocks.VOID_AIR.defaultBlockState();
       }
    }
 
-   public LevelChunkSection getOrCreateSection(int var1) {
-      if (this.sections[var1] == LevelChunk.EMPTY_SECTION) {
-         this.sections[var1] = new LevelChunkSection(var1 << 4);
-      }
-
-      return this.sections[var1];
+   public void setBlockEntity(BlockEntity var1) {
+      this.blockEntities.put(var1.getBlockPos(), var1);
    }
 
-   public void setBlockEntity(BlockPos var1, BlockEntity var2) {
-      var2.setPosition(var1);
-      this.blockEntities.put(var1, var2);
-   }
-
    public Set<BlockPos> getBlockEntitiesPos() {
       HashSet var1 = Sets.newHashSet(this.blockEntityNbts.keySet());
       var1.addAll(this.blockEntities.keySet());
       return var1;
    }
@@ -269,15 +263,10 @@
 
    public LevelChunkSection[] getSections() {
       return this.sections;
    }
 
-   @Nullable
-   public LevelLightEngine getLightEngine() {
-      return this.lightEngine;
-   }
-
    public Collection<Entry<Heightmap.Types, Heightmap>> getHeightmaps() {
       return Collections.unmodifiableSet(this.heightmaps.entrySet());
    }
 
    public void setHeightmap(Heightmap.Types var1, long[] var2) {
@@ -298,17 +287,31 @@
       }
 
       return var4.getFirstAvailable(var2 & 15, var3 & 15) - 1;
    }
 
+   public BlockPos getHeighestPosition(Heightmap.Types var1) {
+      int var2 = this.getMinBuildHeight();
+      BlockPos.MutableBlockPos var3 = new BlockPos.MutableBlockPos();
+
+      for(int var4 = this.chunkPos.getMinBlockX(); var4 <= this.chunkPos.getMaxBlockX(); ++var4) {
+         for(int var5 = this.chunkPos.getMinBlockZ(); var5 <= this.chunkPos.getMaxBlockZ(); ++var5) {
+            int var6 = this.getHeight(var1, var4 & 15, var5 & 15);
+            if (var6 > var2) {
+               var2 = var6;
+               var3.set(var4, var6, var5);
+            }
+         }
+      }
+
+      return var3.immutable();
+   }
+
    public ChunkPos getPos() {
       return this.chunkPos;
    }
 
-   public void setLastSaveTime(long var1) {
-   }
-
    @Nullable
    public StructureStart<?> getStartForFeature(StructureFeature<?> var1) {
       return (StructureStart)this.structureStarts.get(var1);
    }
 
@@ -359,19 +362,19 @@
       int var6 = var3 & 15;
       return (short)(var4 | var5 << 4 | var6 << 8);
    }
 
    public static BlockPos unpackOffsetCoordinates(short var0, int var1, ChunkPos var2) {
-      int var3 = (var0 & 15) + (var2.x << 4);
-      int var4 = (var0 >>> 4 & 15) + (var1 << 4);
-      int var5 = (var0 >>> 8 & 15) + (var2.z << 4);
+      int var3 = SectionPos.sectionToBlockCoord(var2.x, var0 & 15);
+      int var4 = SectionPos.sectionToBlockCoord(var1, var0 >>> 4 & 15);
+      int var5 = SectionPos.sectionToBlockCoord(var2.z, var0 >>> 8 & 15);
       return new BlockPos(var3, var4, var5);
    }
 
    public void markPosForPostprocessing(BlockPos var1) {
-      if (!Level.isOutsideBuildHeight(var1)) {
-         ChunkAccess.getOrCreateOffsetList(this.postProcessing, var1.getY() >> 4).add(packOffsetCoordinates(var1));
+      if (!this.isOutsideBuildHeight(var1)) {
+         ChunkAccess.getOrCreateOffsetList(this.postProcessing, this.getSectionIndex(var1.getY())).add(packOffsetCoordinates(var1));
       }
 
    }
 
    public ShortList[] getPostProcessing() {
@@ -430,11 +433,11 @@
       return (BitSet)this.carvingMasks.get(var1);
    }
 
    public BitSet getOrCreateCarvingMask(GenerationStep.Carving var1) {
       return (BitSet)this.carvingMasks.computeIfAbsent(var1, (var0) -> {
-         return new BitSet(65536);
+         return new BitSet(98304);
       });
    }
 
    public void setCarvingMask(GenerationStep.Carving var1, BitSet var2) {
       this.carvingMasks.put(var1, var2);
@@ -450,6 +453,14 @@
 
    public void setLightCorrect(boolean var1) {
       this.isLightCorrect = var1;
       this.setUnsaved(true);
    }
+
+   public int getMinBuildHeight() {
+      return this.levelHeightAccessor.getMinBuildHeight();
+   }
+
+   public int getHeight() {
+      return this.levelHeightAccessor.getHeight();
+   }
 }
