--- net/minecraft/world/level/chunk/BulkSectionAccess.java
+++ net/minecraft/world/level/chunk/BulkSectionAccess.java
@@ -1,0 +1,56 @@
+package net.minecraft.world.level.chunk;
+
+import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
+import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
+import it.unimi.dsi.fastutil.objects.ObjectIterator;
+import javax.annotation.Nullable;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.SectionPos;
+import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.block.state.BlockState;
+
+public class BulkSectionAccess implements AutoCloseable {
+   private final LevelAccessor level;
+   private final Long2ObjectMap<LevelChunkSection> acquiredSections = new Long2ObjectOpenHashMap();
+   @Nullable
+   private LevelChunkSection lastSection;
+   private long lastSectionKey;
+
+   public BulkSectionAccess(LevelAccessor var1) {
+      this.level = var1;
+   }
+
+   public LevelChunkSection getSection(BlockPos var1) {
+      long var2 = SectionPos.asLong(var1);
+      if (this.lastSection != null && this.lastSectionKey == var2) {
+         return this.lastSection;
+      } else {
+         this.lastSection = (LevelChunkSection)this.acquiredSections.computeIfAbsent(var2, (var2x) -> {
+            ChunkAccess var4 = this.level.getChunk(SectionPos.blockToSectionCoord(var1.getX()), SectionPos.blockToSectionCoord(var1.getZ()));
+            LevelChunkSection var5 = var4.getOrCreateSection(var4.getSectionIndex(var1.getY()));
+            var5.acquire();
+            return var5;
+         });
+         this.lastSectionKey = var2;
+         return this.lastSection;
+      }
+   }
+
+   public BlockState getBlockState(BlockPos var1) {
+      LevelChunkSection var2 = this.getSection(var1);
+      int var3 = SectionPos.sectionRelative(var1.getX());
+      int var4 = SectionPos.sectionRelative(var1.getY());
+      int var5 = SectionPos.sectionRelative(var1.getZ());
+      return var2.getBlockState(var3, var4, var5);
+   }
+
+   public void close() {
+      ObjectIterator var1 = this.acquiredSections.values().iterator();
+
+      while(var1.hasNext()) {
+         LevelChunkSection var2 = (LevelChunkSection)var1.next();
+         var2.release();
+      }
+
+   }
+}
