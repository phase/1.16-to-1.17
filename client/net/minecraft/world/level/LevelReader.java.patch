--- net/minecraft/world/level/LevelReader.java
+++ net/minecraft/world/level/LevelReader.java
@@ -2,10 +2,12 @@
 
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
+import net.minecraft.core.QuartPos;
+import net.minecraft.core.SectionPos;
 import net.minecraft.tags.FluidTags;
 import net.minecraft.util.Mth;
 import net.minecraft.world.level.biome.Biome;
 import net.minecraft.world.level.biome.BiomeManager;
 import net.minecraft.world.level.block.state.BlockState;
@@ -45,11 +47,11 @@
    default int getBlockTint(BlockPos var1, ColorResolver var2) {
       return var2.getColor(this.getBiome(var1), (double)var1.getX(), (double)var1.getZ());
    }
 
    default Biome getNoiseBiome(int var1, int var2, int var3) {
-      ChunkAccess var4 = this.getChunk(var1 >> 2, var3 >> 2, ChunkStatus.BIOMES, false);
+      ChunkAccess var4 = this.getChunk(QuartPos.toSection(var1), QuartPos.toSection(var3), ChunkStatus.BIOMES, false);
       return var4 != null && var4.getBiomes() != null ? var4.getBiomes().getNoiseBiome(var1, var2, var3) : this.getUncachedNoiseBiome(var1, var2, var3);
    }
 
    Biome getUncachedNoiseBiome(int var1, int var2, int var3);
 
@@ -58,10 +60,18 @@
    @Deprecated
    int getSeaLevel();
 
    DimensionType dimensionType();
 
+   default int getMinBuildHeight() {
+      return this.dimensionType().minY();
+   }
+
+   default int getHeight() {
+      return this.dimensionType().height();
+   }
+
    default BlockPos getHeightmapPos(Heightmap.Types var1, BlockPos var2) {
       return new BlockPos(var2.getX(), this.getHeight(var1, var2.getX(), var2.getZ()), var2.getZ());
    }
 
    default boolean isEmptyBlock(BlockPos var1) {
@@ -96,11 +106,11 @@
    default int getDirectSignal(BlockPos var1, Direction var2) {
       return this.getBlockState(var1).getDirectSignal(this, var1, var2);
    }
 
    default ChunkAccess getChunk(BlockPos var1) {
-      return this.getChunk(var1.getX() >> 4, var1.getZ() >> 4);
+      return this.getChunk(SectionPos.blockToSectionCoord(var1.getX()), SectionPos.blockToSectionCoord(var1.getZ()));
    }
 
    default ChunkAccess getChunk(int var1, int var2) {
       return this.getChunk(var1, var2, ChunkStatus.FULL, true);
    }
@@ -148,36 +158,42 @@
    default int getMaxLocalRawBrightness(BlockPos var1, int var2) {
       return var1.getX() >= -30000000 && var1.getZ() >= -30000000 && var1.getX() < 30000000 && var1.getZ() < 30000000 ? this.getRawBrightness(var1, var2) : 15;
    }
 
    @Deprecated
+   default boolean hasChunkAt(int var1, int var2) {
+      return this.hasChunk(SectionPos.blockToSectionCoord(var1), SectionPos.blockToSectionCoord(var2));
+   }
+
+   @Deprecated
    default boolean hasChunkAt(BlockPos var1) {
-      return this.hasChunk(var1.getX() >> 4, var1.getZ() >> 4);
+      return this.hasChunkAt(var1.getX(), var1.getZ());
    }
 
    @Deprecated
    default boolean hasChunksAt(BlockPos var1, BlockPos var2) {
       return this.hasChunksAt(var1.getX(), var1.getY(), var1.getZ(), var2.getX(), var2.getY(), var2.getZ());
    }
 
    @Deprecated
    default boolean hasChunksAt(int var1, int var2, int var3, int var4, int var5, int var6) {
-      if (var5 >= 0 && var2 < 256) {
-         var1 >>= 4;
-         var3 >>= 4;
-         var4 >>= 4;
-         var6 >>= 4;
+      return var5 >= this.getMinBuildHeight() && var2 < this.getMaxBuildHeight() ? this.hasChunksAt(var1, var3, var4, var6) : false;
+   }
 
-         for(int var7 = var1; var7 <= var4; ++var7) {
-            for(int var8 = var3; var8 <= var6; ++var8) {
-               if (!this.hasChunk(var7, var8)) {
-                  return false;
-               }
+   @Deprecated
+   default boolean hasChunksAt(int var1, int var2, int var3, int var4) {
+      int var5 = SectionPos.blockToSectionCoord(var1);
+      int var6 = SectionPos.blockToSectionCoord(var3);
+      int var7 = SectionPos.blockToSectionCoord(var2);
+      int var8 = SectionPos.blockToSectionCoord(var4);
+
+      for(int var9 = var5; var9 <= var6; ++var9) {
+         for(int var10 = var7; var10 <= var8; ++var10) {
+            if (!this.hasChunk(var9, var10)) {
+               return false;
             }
          }
-
-         return true;
-      } else {
-         return false;
       }
+
+      return true;
    }
 }
