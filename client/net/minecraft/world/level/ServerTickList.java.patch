--- net/minecraft/world/level/ServerTickList.java
+++ net/minecraft/world/level/ServerTickList.java
@@ -7,19 +7,19 @@
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Queue;
 import java.util.Set;
-import java.util.TreeSet;
 import java.util.function.Consumer;
 import java.util.function.Function;
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
 import net.minecraft.core.BlockPos;
+import net.minecraft.core.SectionPos;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.level.ServerChunkCache;
 import net.minecraft.server.level.ServerLevel;
@@ -28,11 +28,11 @@
 
 public class ServerTickList<T> implements TickList<T> {
    protected final Predicate<T> ignore;
    private final Function<T, ResourceLocation> toId;
    private final Set<TickNextTickData<T>> tickNextTickSet = Sets.newHashSet();
-   private final TreeSet<TickNextTickData<T>> tickNextTickList = Sets.newTreeSet(TickNextTickData.createTimeComparator());
+   private final Set<TickNextTickData<T>> tickNextTickList = Sets.newTreeSet(TickNextTickData.createTimeComparator());
    private final ServerLevel level;
    private final Queue<TickNextTickData<T>> currentlyTicking = Queues.newArrayDeque();
    private final List<TickNextTickData<T>> alreadyTicked = Lists.newArrayList();
    private final Consumer<TickNextTickData<T>> ticker;
 
@@ -79,11 +79,11 @@
                   this.alreadyTicked.add(var4);
                   this.ticker.accept(var4);
                } catch (Throwable var8) {
                   CrashReport var6 = CrashReport.forThrowable(var8, "Exception while ticking");
                   CrashReportCategory var7 = var6.addCategory("Block being ticked");
-                  CrashReportCategory.populateBlockDetails(var7, var4.pos, (BlockState)null);
+                  CrashReportCategory.populateBlockDetails(var7, this.level, var4.pos, (BlockState)null);
                   throw new ReportedException(var6);
                }
             } else {
                this.scheduleTick(var4.pos, var4.getType(), 0);
             }
@@ -98,15 +98,15 @@
    public boolean willTickThisTick(BlockPos var1, T var2) {
       return this.currentlyTicking.contains(new TickNextTickData(var1, var2));
    }
 
    public List<TickNextTickData<T>> fetchTicksInChunk(ChunkPos var1, boolean var2, boolean var3) {
-      int var4 = (var1.x << 4) - 2;
+      int var4 = SectionPos.sectionToBlockCoord(var1.x) - 2;
       int var5 = var4 + 16 + 2;
-      int var6 = (var1.z << 4) - 2;
+      int var6 = SectionPos.sectionToBlockCoord(var1.z) - 2;
       int var7 = var6 + 16 + 2;
-      return this.fetchTicksInArea(new BoundingBox(var4, 0, var6, var5, 256, var7), var2, var3);
+      return this.fetchTicksInArea(new BoundingBox(var4, this.level.getMinBuildHeight(), var6, var5, this.level.getMaxBuildHeight(), var7), var2, var3);
    }
 
    public List<TickNextTickData<T>> fetchTicksInArea(BoundingBox var1, boolean var2, boolean var3) {
       List var4 = this.fetchTicksInArea((List)null, this.tickNextTickList, var1, var2);
       if (var2 && var4 != null) {
