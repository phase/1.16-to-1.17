--- net/minecraft/world/level/ServerTickList.java
+++ net/minecraft/world/level/ServerTickList.java
@@ -7,11 +7,10 @@
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Queue;
 import java.util.Set;
-import java.util.TreeSet;
 import java.util.function.Consumer;
 import java.util.function.Function;
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
 import net.minecraft.CrashReport;
@@ -25,14 +24,15 @@
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.levelgen.structure.BoundingBox;
 
 public class ServerTickList<T> implements TickList<T> {
+   public static final int MAX_TICK_BLOCKS_PER_TICK = 65536;
    protected final Predicate<T> ignore;
    private final Function<T, ResourceLocation> toId;
    private final Set<TickNextTickData<T>> tickNextTickSet = Sets.newHashSet();
-   private final TreeSet<TickNextTickData<T>> tickNextTickList = Sets.newTreeSet(TickNextTickData.createTimeComparator());
+   private final Set<TickNextTickData<T>> tickNextTickList = Sets.newTreeSet(TickNextTickData.createTimeComparator());
    private final ServerLevel level;
    private final Queue<TickNextTickData<T>> currentlyTicking = Queues.newArrayDeque();
    private final List<TickNextTickData<T>> alreadyTicked = Lists.newArrayList();
    private final Consumer<TickNextTickData<T>> ticker;
 
@@ -79,11 +79,11 @@
                   this.alreadyTicked.add(var4);
                   this.ticker.accept(var4);
                } catch (Throwable var8) {
                   CrashReport var6 = CrashReport.forThrowable(var8, "Exception while ticking");
                   CrashReportCategory var7 = var6.addCategory("Block being ticked");
-                  CrashReportCategory.populateBlockDetails(var7, var4.pos, (BlockState)null);
+                  CrashReportCategory.populateBlockDetails(var7, this.level, var4.pos, (BlockState)null);
                   throw new ReportedException(var6);
                }
             } else {
                this.scheduleTick(var4.pos, var4.getType(), 0);
             }
@@ -98,15 +98,15 @@
    public boolean willTickThisTick(BlockPos var1, T var2) {
       return this.currentlyTicking.contains(new TickNextTickData(var1, var2));
    }
 
    public List<TickNextTickData<T>> fetchTicksInChunk(ChunkPos var1, boolean var2, boolean var3) {
-      int var4 = (var1.x << 4) - 2;
+      int var4 = var1.getMinBlockX() - 2;
       int var5 = var4 + 16 + 2;
-      int var6 = (var1.z << 4) - 2;
+      int var6 = var1.getMinBlockZ() - 2;
       int var7 = var6 + 16 + 2;
-      return this.fetchTicksInArea(new BoundingBox(var4, 0, var6, var5, 256, var7), var2, var3);
+      return this.fetchTicksInArea(new BoundingBox(var4, this.level.getMinBuildHeight(), var6, var5, this.level.getMaxBuildHeight(), var7), var2, var3);
    }
 
    public List<TickNextTickData<T>> fetchTicksInArea(BoundingBox var1, boolean var2, boolean var3) {
       List var4 = this.fetchTicksInArea((List)null, this.tickNextTickList, var1, var2);
       if (var2 && var4 != null) {
@@ -126,11 +126,11 @@
       Iterator var5 = var2.iterator();
 
       while(var5.hasNext()) {
          TickNextTickData var6 = (TickNextTickData)var5.next();
          BlockPos var7 = var6.pos;
-         if (var7.getX() >= var3.x0 && var7.getX() < var3.x1 && var7.getZ() >= var3.z0 && var7.getZ() < var3.z1) {
+         if (var7.getX() >= var3.minX() && var7.getX() < var3.maxX() && var7.getZ() >= var3.minZ() && var7.getZ() < var3.maxZ()) {
             if (var4) {
                var5.remove();
             }
 
             if (var1 == null) {
