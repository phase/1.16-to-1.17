--- net/minecraft/world/level/dimension/LevelStem.java
+++ net/minecraft/world/level/dimension/LevelStem.java
@@ -6,11 +6,11 @@
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.Lifecycle;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 import java.util.ArrayList;
 import java.util.Iterator;
-import java.util.LinkedHashSet;
+import java.util.Set;
 import java.util.Map.Entry;
 import java.util.function.Supplier;
 import net.minecraft.core.MappedRegistry;
 import net.minecraft.core.Registry;
 import net.minecraft.resources.ResourceKey;
@@ -26,11 +26,11 @@
       return var0.group(DimensionType.CODEC.fieldOf("type").forGetter(LevelStem::typeSupplier), ChunkGenerator.CODEC.fieldOf("generator").forGetter(LevelStem::generator)).apply(var0, var0.stable(LevelStem::new));
    });
    public static final ResourceKey<LevelStem> OVERWORLD;
    public static final ResourceKey<LevelStem> NETHER;
    public static final ResourceKey<LevelStem> END;
-   private static final LinkedHashSet<ResourceKey<LevelStem>> BUILTIN_ORDER;
+   private static final Set<ResourceKey<LevelStem>> BUILTIN_ORDER;
    private final Supplier<DimensionType> type;
    private final ChunkGenerator generator;
 
    public LevelStem(Supplier<DimensionType> var1, ChunkGenerator var2) {
       this.type = var1;
@@ -65,11 +65,11 @@
 
       while(var2.hasNext()) {
          Entry var5 = (Entry)var2.next();
          ResourceKey var6 = (ResourceKey)var5.getKey();
          if (!BUILTIN_ORDER.contains(var6)) {
-            var1.register(var6, var5.getValue(), var0.lifecycle(var5.getValue()));
+            var1.register(var6, (LevelStem)var5.getValue(), var0.lifecycle((LevelStem)var5.getValue()));
          }
       }
 
       return var1;
    }
