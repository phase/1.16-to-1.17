--- net/minecraft/world/level/dimension/DimensionType.java
+++ net/minecraft/world/level/dimension/DimensionType.java
@@ -6,11 +6,13 @@
 import com.mojang.serialization.Lifecycle;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 import java.io.File;
 import java.util.Optional;
 import java.util.OptionalLong;
+import java.util.function.Function;
 import java.util.function.Supplier;
+import net.minecraft.core.BlockPos;
 import net.minecraft.core.MappedRegistry;
 import net.minecraft.core.Registry;
 import net.minecraft.core.RegistryAccess;
 import net.minecraft.core.WritableRegistry;
 import net.minecraft.resources.RegistryFileCodec;
@@ -30,29 +32,19 @@
 import net.minecraft.world.level.chunk.ChunkGenerator;
 import net.minecraft.world.level.levelgen.NoiseBasedChunkGenerator;
 import net.minecraft.world.level.levelgen.NoiseGeneratorSettings;
 
 public class DimensionType {
-   public static final ResourceLocation OVERWORLD_EFFECTS = new ResourceLocation("overworld");
-   public static final ResourceLocation NETHER_EFFECTS = new ResourceLocation("the_nether");
-   public static final ResourceLocation END_EFFECTS = new ResourceLocation("the_end");
-   public static final Codec<DimensionType> DIRECT_CODEC = RecordCodecBuilder.create((var0) -> {
-      return var0.group(Codec.LONG.optionalFieldOf("fixed_time").xmap((var0x) -> {
-         return (OptionalLong)var0x.map(OptionalLong::of).orElseGet(OptionalLong::empty);
-      }, (var0x) -> {
-         return var0x.isPresent() ? Optional.of(var0x.getAsLong()) : Optional.empty();
-      }).forGetter((var0x) -> {
-         return var0x.fixedTime;
-      }), Codec.BOOL.fieldOf("has_skylight").forGetter(DimensionType::hasSkyLight), Codec.BOOL.fieldOf("has_ceiling").forGetter(DimensionType::hasCeiling), Codec.BOOL.fieldOf("ultrawarm").forGetter(DimensionType::ultraWarm), Codec.BOOL.fieldOf("natural").forGetter(DimensionType::natural), Codec.doubleRange(9.999999747378752E-6D, 3.0E7D).fieldOf("coordinate_scale").forGetter(DimensionType::coordinateScale), Codec.BOOL.fieldOf("piglin_safe").forGetter(DimensionType::piglinSafe), Codec.BOOL.fieldOf("bed_works").forGetter(DimensionType::bedWorks), Codec.BOOL.fieldOf("respawn_anchor_works").forGetter(DimensionType::respawnAnchorWorks), Codec.BOOL.fieldOf("has_raids").forGetter(DimensionType::hasRaids), Codec.intRange(0, 256).fieldOf("logical_height").forGetter(DimensionType::logicalHeight), ResourceLocation.CODEC.fieldOf("infiniburn").forGetter((var0x) -> {
-         return var0x.infiniburn;
-      }), ResourceLocation.CODEC.fieldOf("effects").orElse(OVERWORLD_EFFECTS).forGetter((var0x) -> {
-         return var0x.effectsLocation;
-      }), Codec.FLOAT.fieldOf("ambient_light").forGetter((var0x) -> {
-         return var0x.ambientLight;
-      })).apply(var0, DimensionType::new);
-   });
-   public static final float[] MOON_BRIGHTNESS_PER_PHASE = new float[]{1.0F, 0.75F, 0.5F, 0.25F, 0.0F, 0.25F, 0.5F, 0.75F};
+   public static final int BITS_FOR_Y;
+   public static final int Y_SIZE;
+   public static final int MAX_Y;
+   public static final int MIN_Y;
+   public static final ResourceLocation OVERWORLD_EFFECTS;
+   public static final ResourceLocation NETHER_EFFECTS;
+   public static final ResourceLocation END_EFFECTS;
+   public static final Codec<DimensionType> DIRECT_CODEC;
+   public static final float[] MOON_BRIGHTNESS_PER_PHASE;
    public static final ResourceKey<DimensionType> OVERWORLD_LOCATION;
    public static final ResourceKey<DimensionType> NETHER_LOCATION;
    public static final ResourceKey<DimensionType> END_LOCATION;
    protected static final DimensionType DEFAULT_OVERWORLD;
    protected static final DimensionType DEFAULT_NETHER;
@@ -69,22 +61,45 @@
    private final boolean createDragonFight;
    private final boolean piglinSafe;
    private final boolean bedWorks;
    private final boolean respawnAnchorWorks;
    private final boolean hasRaids;
+   private final int minY;
+   private final int height;
    private final int logicalHeight;
    private final BiomeZoomer biomeZoomer;
    private final ResourceLocation infiniburn;
    private final ResourceLocation effectsLocation;
    private final float ambientLight;
    private final transient float[] brightnessRamp;
 
-   protected DimensionType(OptionalLong var1, boolean var2, boolean var3, boolean var4, boolean var5, double var6, boolean var8, boolean var9, boolean var10, boolean var11, int var12, ResourceLocation var13, ResourceLocation var14, float var15) {
-      this(var1, var2, var3, var4, var5, var6, false, var8, var9, var10, var11, var12, FuzzyOffsetBiomeZoomer.INSTANCE, var13, var14, var15);
+   private static DataResult<DimensionType> guardY(DimensionType var0) {
+      if (var0.minY() + var0.height() > MAX_Y + 1) {
+         return DataResult.error("min_y + height cannot be higher than: " + (MAX_Y + 1));
+      } else if (var0.logicalHeight() > var0.height()) {
+         return DataResult.error("logical_height cannot be higher than height");
+      } else if (var0.height() % 16 != 0) {
+         return DataResult.error("height has to be multiple of 16");
+      } else {
+         return var0.minY() % 16 != 0 ? DataResult.error("min_y has to be a multiple of 16") : DataResult.success(var0);
+      }
    }
 
-   protected DimensionType(OptionalLong var1, boolean var2, boolean var3, boolean var4, boolean var5, double var6, boolean var8, boolean var9, boolean var10, boolean var11, boolean var12, int var13, BiomeZoomer var14, ResourceLocation var15, ResourceLocation var16, float var17) {
+   private DimensionType(OptionalLong var1, boolean var2, boolean var3, boolean var4, boolean var5, double var6, boolean var8, boolean var9, boolean var10, boolean var11, int var12, int var13, int var14, ResourceLocation var15, ResourceLocation var16, float var17) {
+      this(var1, var2, var3, var4, var5, var6, false, var8, var9, var10, var11, var12, var13, var14, FuzzyOffsetBiomeZoomer.INSTANCE, var15, var16, var17);
+   }
+
+   public static DimensionType create(OptionalLong var0, boolean var1, boolean var2, boolean var3, boolean var4, double var5, boolean var7, boolean var8, boolean var9, boolean var10, boolean var11, int var12, int var13, int var14, BiomeZoomer var15, ResourceLocation var16, ResourceLocation var17, float var18) {
+      DimensionType var19 = new DimensionType(var0, var1, var2, var3, var4, var5, var7, var8, var9, var10, var11, var12, var13, var14, var15, var16, var17, var18);
+      guardY(var19).error().ifPresent((var0x) -> {
+         throw new IllegalStateException(var0x.message());
+      });
+      return var19;
+   }
+
+   @Deprecated
+   private DimensionType(OptionalLong var1, boolean var2, boolean var3, boolean var4, boolean var5, double var6, boolean var8, boolean var9, boolean var10, boolean var11, boolean var12, int var13, int var14, int var15, BiomeZoomer var16, ResourceLocation var17, ResourceLocation var18, float var19) {
       this.fixedTime = var1;
       this.hasSkylight = var2;
       this.hasCeiling = var3;
       this.ultraWarm = var4;
       this.natural = var5;
@@ -92,16 +107,18 @@
       this.createDragonFight = var8;
       this.piglinSafe = var9;
       this.bedWorks = var10;
       this.respawnAnchorWorks = var11;
       this.hasRaids = var12;
-      this.logicalHeight = var13;
-      this.biomeZoomer = var14;
-      this.infiniburn = var15;
-      this.effectsLocation = var16;
-      this.ambientLight = var17;
-      this.brightnessRamp = fillBrightnessRamp(var17);
+      this.minY = var13;
+      this.height = var14;
+      this.logicalHeight = var15;
+      this.biomeZoomer = var16;
+      this.infiniburn = var17;
+      this.effectsLocation = var18;
+      this.ambientLight = var19;
+      this.brightnessRamp = fillBrightnessRamp(var19);
    }
 
    private static float[] fillBrightnessRamp(float var0) {
       float[] var1 = new float[16];
 
@@ -134,11 +151,11 @@
 
       return Level.RESOURCE_KEY_CODEC.parse(var0);
    }
 
    public static RegistryAccess.RegistryHolder registerBuiltin(RegistryAccess.RegistryHolder var0) {
-      WritableRegistry var1 = var0.registryOrThrow(Registry.DIMENSION_TYPE_REGISTRY);
+      WritableRegistry var1 = var0.ownedRegistryOrThrow(Registry.DIMENSION_TYPE_REGISTRY);
       var1.register(OVERWORLD_LOCATION, DEFAULT_OVERWORLD, Lifecycle.stable());
       var1.register(OVERWORLD_CAVES_LOCATION, DEFAULT_OVERWORLD_CAVES, Lifecycle.stable());
       var1.register(NETHER_LOCATION, DEFAULT_NETHER, Lifecycle.stable());
       var1.register(END_LOCATION, DEFAULT_END, Lifecycle.stable());
       return var0;
@@ -222,10 +239,18 @@
 
    public boolean hasRaids() {
       return this.hasRaids;
    }
 
+   public int minY() {
+      return this.minY;
+   }
+
+   public int height() {
+      return this.height;
+   }
+
    public int logicalHeight() {
       return this.logicalHeight;
    }
 
    public boolean createDragonFight() {
@@ -265,21 +290,44 @@
 
    public boolean equalTo(DimensionType var1) {
       if (this == var1) {
          return true;
       } else {
-         return this.hasSkylight == var1.hasSkylight && this.hasCeiling == var1.hasCeiling && this.ultraWarm == var1.ultraWarm && this.natural == var1.natural && this.coordinateScale == var1.coordinateScale && this.createDragonFight == var1.createDragonFight && this.piglinSafe == var1.piglinSafe && this.bedWorks == var1.bedWorks && this.respawnAnchorWorks == var1.respawnAnchorWorks && this.hasRaids == var1.hasRaids && this.logicalHeight == var1.logicalHeight && Float.compare(var1.ambientLight, this.ambientLight) == 0 && this.fixedTime.equals(var1.fixedTime) && this.biomeZoomer.equals(var1.biomeZoomer) && this.infiniburn.equals(var1.infiniburn) && this.effectsLocation.equals(var1.effectsLocation);
+         return this.hasSkylight == var1.hasSkylight && this.hasCeiling == var1.hasCeiling && this.ultraWarm == var1.ultraWarm && this.natural == var1.natural && this.coordinateScale == var1.coordinateScale && this.createDragonFight == var1.createDragonFight && this.piglinSafe == var1.piglinSafe && this.bedWorks == var1.bedWorks && this.respawnAnchorWorks == var1.respawnAnchorWorks && this.hasRaids == var1.hasRaids && this.minY == var1.minY && this.height == var1.height && this.logicalHeight == var1.logicalHeight && Float.compare(var1.ambientLight, this.ambientLight) == 0 && this.fixedTime.equals(var1.fixedTime) && this.biomeZoomer.equals(var1.biomeZoomer) && this.infiniburn.equals(var1.infiniburn) && this.effectsLocation.equals(var1.effectsLocation);
       }
    }
 
    static {
+      BITS_FOR_Y = BlockPos.PACKED_Y_LENGTH;
+      Y_SIZE = (1 << BITS_FOR_Y) - 32;
+      MAX_Y = (Y_SIZE >> 1) - 1;
+      MIN_Y = MAX_Y - Y_SIZE + 1;
+      OVERWORLD_EFFECTS = new ResourceLocation("overworld");
+      NETHER_EFFECTS = new ResourceLocation("the_nether");
+      END_EFFECTS = new ResourceLocation("the_end");
+      DIRECT_CODEC = RecordCodecBuilder.create((var0) -> {
+         return var0.group(Codec.LONG.optionalFieldOf("fixed_time").xmap((var0x) -> {
+            return (OptionalLong)var0x.map(OptionalLong::of).orElseGet(OptionalLong::empty);
+         }, (var0x) -> {
+            return var0x.isPresent() ? Optional.of(var0x.getAsLong()) : Optional.empty();
+         }).forGetter((var0x) -> {
+            return var0x.fixedTime;
+         }), Codec.BOOL.fieldOf("has_skylight").forGetter(DimensionType::hasSkyLight), Codec.BOOL.fieldOf("has_ceiling").forGetter(DimensionType::hasCeiling), Codec.BOOL.fieldOf("ultrawarm").forGetter(DimensionType::ultraWarm), Codec.BOOL.fieldOf("natural").forGetter(DimensionType::natural), Codec.doubleRange(9.999999747378752E-6D, 3.0E7D).fieldOf("coordinate_scale").forGetter(DimensionType::coordinateScale), Codec.BOOL.fieldOf("piglin_safe").forGetter(DimensionType::piglinSafe), Codec.BOOL.fieldOf("bed_works").forGetter(DimensionType::bedWorks), Codec.BOOL.fieldOf("respawn_anchor_works").forGetter(DimensionType::respawnAnchorWorks), Codec.BOOL.fieldOf("has_raids").forGetter(DimensionType::hasRaids), Codec.intRange(MIN_Y, MAX_Y).fieldOf("min_y").forGetter(DimensionType::minY), Codec.intRange(0, Y_SIZE).fieldOf("height").forGetter(DimensionType::height), Codec.intRange(0, Y_SIZE).fieldOf("logical_height").forGetter(DimensionType::logicalHeight), ResourceLocation.CODEC.fieldOf("infiniburn").forGetter((var0x) -> {
+            return var0x.infiniburn;
+         }), ResourceLocation.CODEC.fieldOf("effects").orElse(OVERWORLD_EFFECTS).forGetter((var0x) -> {
+            return var0x.effectsLocation;
+         }), Codec.FLOAT.fieldOf("ambient_light").forGetter((var0x) -> {
+            return var0x.ambientLight;
+         })).apply(var0, DimensionType::new);
+      }).comapFlatMap(DimensionType::guardY, Function.identity());
+      MOON_BRIGHTNESS_PER_PHASE = new float[]{1.0F, 0.75F, 0.5F, 0.25F, 0.0F, 0.25F, 0.5F, 0.75F};
       OVERWORLD_LOCATION = ResourceKey.create(Registry.DIMENSION_TYPE_REGISTRY, new ResourceLocation("overworld"));
       NETHER_LOCATION = ResourceKey.create(Registry.DIMENSION_TYPE_REGISTRY, new ResourceLocation("the_nether"));
       END_LOCATION = ResourceKey.create(Registry.DIMENSION_TYPE_REGISTRY, new ResourceLocation("the_end"));
-      DEFAULT_OVERWORLD = new DimensionType(OptionalLong.empty(), true, false, false, true, 1.0D, false, false, true, false, true, 256, FuzzyOffsetConstantColumnBiomeZoomer.INSTANCE, BlockTags.INFINIBURN_OVERWORLD.getName(), OVERWORLD_EFFECTS, 0.0F);
-      DEFAULT_NETHER = new DimensionType(OptionalLong.of(18000L), false, true, true, false, 8.0D, false, true, false, true, false, 128, FuzzyOffsetBiomeZoomer.INSTANCE, BlockTags.INFINIBURN_NETHER.getName(), NETHER_EFFECTS, 0.1F);
-      DEFAULT_END = new DimensionType(OptionalLong.of(6000L), false, false, false, false, 1.0D, true, false, false, false, true, 256, FuzzyOffsetBiomeZoomer.INSTANCE, BlockTags.INFINIBURN_END.getName(), END_EFFECTS, 0.0F);
+      DEFAULT_OVERWORLD = create(OptionalLong.empty(), true, false, false, true, 1.0D, false, false, true, false, true, -64, 384, 384, FuzzyOffsetConstantColumnBiomeZoomer.INSTANCE, BlockTags.INFINIBURN_OVERWORLD.getName(), OVERWORLD_EFFECTS, 0.0F);
+      DEFAULT_NETHER = create(OptionalLong.of(18000L), false, true, true, false, 8.0D, false, true, false, true, false, 0, 256, 128, FuzzyOffsetBiomeZoomer.INSTANCE, BlockTags.INFINIBURN_NETHER.getName(), NETHER_EFFECTS, 0.1F);
+      DEFAULT_END = create(OptionalLong.of(6000L), false, false, false, false, 1.0D, true, false, false, false, true, 0, 256, 256, FuzzyOffsetBiomeZoomer.INSTANCE, BlockTags.INFINIBURN_END.getName(), END_EFFECTS, 0.0F);
       OVERWORLD_CAVES_LOCATION = ResourceKey.create(Registry.DIMENSION_TYPE_REGISTRY, new ResourceLocation("overworld_caves"));
-      DEFAULT_OVERWORLD_CAVES = new DimensionType(OptionalLong.empty(), true, true, false, true, 1.0D, false, false, true, false, true, 256, FuzzyOffsetConstantColumnBiomeZoomer.INSTANCE, BlockTags.INFINIBURN_OVERWORLD.getName(), OVERWORLD_EFFECTS, 0.0F);
+      DEFAULT_OVERWORLD_CAVES = create(OptionalLong.empty(), true, true, false, true, 1.0D, false, false, true, false, true, -64, 384, 384, FuzzyOffsetConstantColumnBiomeZoomer.INSTANCE, BlockTags.INFINIBURN_OVERWORLD.getName(), OVERWORLD_EFFECTS, 0.0F);
       CODEC = RegistryFileCodec.create(Registry.DIMENSION_TYPE_REGISTRY, DIRECT_CODEC);
    }
 }
