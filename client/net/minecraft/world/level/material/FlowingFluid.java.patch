--- net/minecraft/world/level/material/FlowingFluid.java
+++ net/minecraft/world/level/material/FlowingFluid.java
@@ -12,11 +12,10 @@
 import java.util.Map;
 import java.util.Map.Entry;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.tags.BlockTags;
-import net.minecraft.tags.Tag;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.block.Block;
@@ -33,10 +32,11 @@
 import net.minecraft.world.phys.shapes.VoxelShape;
 
 public abstract class FlowingFluid extends Fluid {
    public static final BooleanProperty FALLING;
    public static final IntegerProperty LEVEL;
+   private static final int CACHE_SIZE = 200;
    private static final ThreadLocal<Object2ByteLinkedOpenHashMap<Block.BlockStatePairKey>> OCCLUSION_CACHE;
    private final Map<FluidState, VoxelShape> shapes = Maps.newIdentityHashMap();
 
    public FlowingFluid() {
    }
@@ -51,11 +51,11 @@
       BlockPos.MutableBlockPos var8 = new BlockPos.MutableBlockPos();
       Iterator var9 = Direction.Plane.HORIZONTAL.iterator();
 
       while(var9.hasNext()) {
          Direction var10 = (Direction)var9.next();
-         var8.setWithOffset(var2, var10);
+         var8.setWithOffset(var2, (Direction)var10);
          FluidState var11 = var1.getFluidState(var8);
          if (this.affectsFlow(var11)) {
             float var12 = var11.getOwnHeight();
             float var13 = 0.0F;
             if (var12 == 0.0F) {
@@ -89,11 +89,11 @@
             if (!var17.hasNext()) {
                return var16.normalize();
             }
 
             var18 = (Direction)var17.next();
-            var8.setWithOffset(var2, var18);
+            var8.setWithOffset(var2, (Direction)var18);
          } while(!this.isSolidFace(var1, var8, var18) && !this.isSolidFace(var1, var8.above(), var18));
 
          var16 = var16.normalize().add(0.0D, -6.0D, 0.0D);
       }
 
@@ -190,11 +190,15 @@
       FluidState var15 = var14.getFluidState();
       if (!var15.isEmpty() && var15.getType().isSame(this) && this.canPassThroughWall(Direction.UP, var1, var2, var3, var12, var14)) {
          return this.getFlowing(8, true);
       } else {
          int var16 = var4 - this.getDropOff(var1);
-         return var16 <= 0 ? Fluids.EMPTY.defaultFluidState() : this.getFlowing(var16, false);
+         if (var16 <= 0) {
+            return Fluids.EMPTY.defaultFluidState();
+         } else {
+            return this.getFlowing(var16, false);
+         }
       }
    }
 
    private boolean canPassThroughWall(Direction var1, BlockGetter var2, BlockPos var3, BlockState var4, BlockPos var5, BlockState var6) {
       Object2ByteLinkedOpenHashMap var7;
@@ -383,11 +387,11 @@
 
    private boolean canHoldFluid(BlockGetter var1, BlockPos var2, BlockState var3, Fluid var4) {
       Block var5 = var3.getBlock();
       if (var5 instanceof LiquidBlockContainer) {
          return ((LiquidBlockContainer)var5).canPlaceLiquid(var1, var2, var3, var4);
-      } else if (!(var5 instanceof DoorBlock) && !var5.is((Tag)BlockTags.SIGNS) && var5 != Blocks.LADDER && var5 != Blocks.SUGAR_CANE && var5 != Blocks.BUBBLE_COLUMN) {
+      } else if (!(var5 instanceof DoorBlock) && !var3.is(BlockTags.SIGNS) && !var3.is(Blocks.LADDER) && !var3.is(Blocks.SUGAR_CANE) && !var3.is(Blocks.BUBBLE_COLUMN)) {
          Material var6 = var3.getMaterial();
          if (var6 != Material.PORTAL && var6 != Material.STRUCTURAL_AIR && var6 != Material.WATER_PLANT && var6 != Material.REPLACEABLE_WATER_PLANT) {
             return !var6.blocksMotion();
          } else {
             return false;
@@ -440,10 +444,12 @@
 
    public float getOwnHeight(FluidState var1) {
       return (float)var1.getAmount() / 9.0F;
    }
 
+   public abstract int getAmount(FluidState var1);
+
    public VoxelShape getShape(FluidState var1, BlockGetter var2, BlockPos var3) {
       return var1.getAmount() == 9 && hasSameAbove(var1, var2, var3) ? Shapes.block() : (VoxelShape)this.shapes.computeIfAbsent(var1, (var2x) -> {
          return Shapes.box(0.0D, 0.0D, 0.0D, 1.0D, (double)var2x.getHeight(var2, var3), 1.0D);
       });
    }
