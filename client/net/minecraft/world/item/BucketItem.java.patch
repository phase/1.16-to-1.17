--- net/minecraft/world/item/BucketItem.java
+++ net/minecraft/world/item/BucketItem.java
@@ -19,18 +19,19 @@
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.BucketPickup;
 import net.minecraft.world.level.block.LiquidBlockContainer;
 import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.material.FlowingFluid;
 import net.minecraft.world.level.material.Fluid;
 import net.minecraft.world.level.material.Fluids;
 import net.minecraft.world.level.material.Material;
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.HitResult;
 
-public class BucketItem extends Item {
+public class BucketItem extends Item implements DispensibleContainerItem {
    private final Fluid content;
 
    public BucketItem(Fluid var1, Item.Properties var2) {
       super(var2);
       this.content = var1;
@@ -42,72 +43,75 @@
       if (var5.getType() == HitResult.Type.MISS) {
          return InteractionResultHolder.pass(var4);
       } else if (var5.getType() != HitResult.Type.BLOCK) {
          return InteractionResultHolder.pass(var4);
       } else {
-         BlockHitResult var6 = (BlockHitResult)var5;
-         BlockPos var7 = var6.getBlockPos();
-         Direction var8 = var6.getDirection();
-         BlockPos var9 = var7.relative(var8);
-         if (var1.mayInteract(var2, var7) && var2.mayUseItemAt(var9, var8, var4)) {
-            BlockState var10;
+         BlockPos var6 = var5.getBlockPos();
+         Direction var7 = var5.getDirection();
+         BlockPos var8 = var6.relative(var7);
+         if (var1.mayInteract(var2, var6) && var2.mayUseItemAt(var8, var7, var4)) {
+            BlockState var9;
             if (this.content == Fluids.EMPTY) {
-               var10 = var1.getBlockState(var7);
-               if (var10.getBlock() instanceof BucketPickup) {
-                  Fluid var13 = ((BucketPickup)var10.getBlock()).takeLiquid(var1, var7, var10);
-                  if (var13 != Fluids.EMPTY) {
+               var9 = var1.getBlockState(var6);
+               if (var9.getBlock() instanceof BucketPickup) {
+                  BucketPickup var13 = (BucketPickup)var9.getBlock();
+                  ItemStack var11 = var13.pickupBlock(var1, var6, var9);
+                  if (!var11.isEmpty()) {
                      var2.awardStat(Stats.ITEM_USED.get(this));
-                     var2.playSound(var13.is(FluidTags.LAVA) ? SoundEvents.BUCKET_FILL_LAVA : SoundEvents.BUCKET_FILL, 1.0F, 1.0F);
-                     ItemStack var12 = ItemUtils.createFilledResult(var4, var2, new ItemStack(var13.getBucket()));
+                     var13.getPickupSound().ifPresent((var1x) -> {
+                        var2.playSound(var1x, 1.0F, 1.0F);
+                     });
+                     var1.gameEvent(var2, GameEvent.FLUID_PICKUP, var6);
+                     ItemStack var12 = ItemUtils.createFilledResult(var4, var2, var11);
                      if (!var1.isClientSide) {
-                        CriteriaTriggers.FILLED_BUCKET.trigger((ServerPlayer)var2, new ItemStack(var13.getBucket()));
+                        CriteriaTriggers.FILLED_BUCKET.trigger((ServerPlayer)var2, var11);
                      }
 
                      return InteractionResultHolder.sidedSuccess(var12, var1.isClientSide());
                   }
                }
 
                return InteractionResultHolder.fail(var4);
             } else {
-               var10 = var1.getBlockState(var7);
-               BlockPos var11 = var10.getBlock() instanceof LiquidBlockContainer && this.content == Fluids.WATER ? var7 : var9;
-               if (this.emptyBucket(var2, var1, var11, var6)) {
-                  this.checkExtraContent(var1, var4, var11);
+               var9 = var1.getBlockState(var6);
+               BlockPos var10 = var9.getBlock() instanceof LiquidBlockContainer && this.content == Fluids.WATER ? var6 : var8;
+               if (this.emptyContents(var2, var1, var10, var5)) {
+                  this.checkExtraContent(var2, var1, var4, var10);
                   if (var2 instanceof ServerPlayer) {
-                     CriteriaTriggers.PLACED_BLOCK.trigger((ServerPlayer)var2, var11, var4);
+                     CriteriaTriggers.PLACED_BLOCK.trigger((ServerPlayer)var2, var10, var4);
                   }
 
                   var2.awardStat(Stats.ITEM_USED.get(this));
-                  return InteractionResultHolder.sidedSuccess(this.getEmptySuccessItem(var4, var2), var1.isClientSide());
+                  return InteractionResultHolder.sidedSuccess(getEmptySuccessItem(var4, var2), var1.isClientSide());
                } else {
                   return InteractionResultHolder.fail(var4);
                }
             }
          } else {
             return InteractionResultHolder.fail(var4);
          }
       }
    }
 
-   protected ItemStack getEmptySuccessItem(ItemStack var1, Player var2) {
-      return !var2.abilities.instabuild ? new ItemStack(Items.BUCKET) : var1;
+   public static ItemStack getEmptySuccessItem(ItemStack var0, Player var1) {
+      return !var1.getAbilities().instabuild ? new ItemStack(Items.BUCKET) : var0;
    }
 
-   public void checkExtraContent(Level var1, ItemStack var2, BlockPos var3) {
+   public void checkExtraContent(@Nullable Player var1, Level var2, ItemStack var3, BlockPos var4) {
    }
 
-   public boolean emptyBucket(@Nullable Player var1, Level var2, BlockPos var3, @Nullable BlockHitResult var4) {
+   public boolean emptyContents(@Nullable Player var1, Level var2, BlockPos var3, @Nullable BlockHitResult var4) {
       if (!(this.content instanceof FlowingFluid)) {
          return false;
       } else {
          BlockState var5 = var2.getBlockState(var3);
          Block var6 = var5.getBlock();
          Material var7 = var5.getMaterial();
          boolean var8 = var5.canBeReplaced(this.content);
          boolean var9 = var5.isAir() || var8 || var6 instanceof LiquidBlockContainer && ((LiquidBlockContainer)var6).canPlaceLiquid(var2, var3, var5, this.content);
          if (!var9) {
-            return var4 != null && this.emptyBucket(var1, var2, var4.getBlockPos().relative(var4.getDirection()), (BlockHitResult)null);
+            return var4 != null && this.emptyContents(var1, var2, var4.getBlockPos().relative(var4.getDirection()), (BlockHitResult)null);
          } else if (var2.dimensionType().ultraWarm() && this.content.is(FluidTags.WATER)) {
             int var10 = var3.getX();
             int var11 = var3.getY();
             int var12 = var3.getZ();
             var2.playSound(var1, var3, SoundEvents.FIRE_EXTINGUISH, SoundSource.BLOCKS, 0.5F, 2.6F + (var2.random.nextFloat() - var2.random.nextFloat()) * 0.8F);
@@ -137,7 +141,8 @@
    }
 
    protected void playEmptySound(@Nullable Player var1, LevelAccessor var2, BlockPos var3) {
       SoundEvent var4 = this.content.is(FluidTags.LAVA) ? SoundEvents.BUCKET_EMPTY_LAVA : SoundEvents.BUCKET_EMPTY;
       var2.playSound(var1, var3, var4, SoundSource.BLOCKS, 1.0F, 1.0F);
+      var2.gameEvent(var1, GameEvent.FLUID_PLACE, (BlockPos)var3);
    }
 }
