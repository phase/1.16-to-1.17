--- net/minecraft/world/item/ItemStack.java
+++ net/minecraft/world/item/ItemStack.java
@@ -51,15 +51,20 @@
 import net.minecraft.world.InteractionResultHolder;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EquipmentSlot;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.MobType;
+import net.minecraft.world.entity.SlotAccess;
 import net.minecraft.world.entity.ai.attributes.Attribute;
 import net.minecraft.world.entity.ai.attributes.AttributeModifier;
 import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.decoration.ItemFrame;
+import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.inventory.ClickAction;
+import net.minecraft.world.inventory.Slot;
+import net.minecraft.world.inventory.tooltip.TooltipComponent;
 import net.minecraft.world.item.context.UseOnContext;
 import net.minecraft.world.item.enchantment.DigDurabilityEnchantment;
 import net.minecraft.world.item.enchantment.Enchantment;
 import net.minecraft.world.item.enchantment.EnchantmentHelper;
 import net.minecraft.world.item.enchantment.Enchantments;
@@ -84,10 +89,24 @@
    private static final Logger LOGGER = LogManager.getLogger();
    public static final ItemStack EMPTY = new ItemStack((Item)null);
    public static final DecimalFormat ATTRIBUTE_MODIFIER_FORMAT = (DecimalFormat)Util.make(new DecimalFormat("#.##"), (var0) -> {
       var0.setDecimalFormatSymbols(DecimalFormatSymbols.getInstance(Locale.ROOT));
    });
+   public static final String TAG_ENCH = "Enchantments";
+   public static final String TAG_ENCH_ID = "id";
+   public static final String TAG_ENCH_LEVEL = "lvl";
+   public static final String TAG_DISPLAY = "display";
+   public static final String TAG_DISPLAY_NAME = "Name";
+   public static final String TAG_LORE = "Lore";
+   public static final String TAG_DAMAGE = "Damage";
+   public static final String TAG_COLOR = "color";
+   private static final String TAG_UNBREAKABLE = "Unbreakable";
+   private static final String TAG_REPAIR_COST = "RepairCost";
+   private static final String TAG_CAN_DESTROY_BLOCK_LIST = "CanDestroy";
+   private static final String TAG_CAN_PLACE_ON_BLOCK_LIST = "CanPlaceOn";
+   private static final String TAG_HIDE_FLAGS = "HideFlags";
+   private static final int DONT_HIDE_TOOLTIP = 0;
    private static final Style LORE_STYLE;
    private int count;
    private int popTime;
    @Deprecated
    private final Item item;
@@ -97,10 +116,14 @@
    private BlockInWorld cachedBreakBlock;
    private boolean cachedBreakBlockResult;
    private BlockInWorld cachedPlaceBlock;
    private boolean cachedPlaceBlockResult;
 
+   public Optional<TooltipComponent> getTooltipImage() {
+      return this.getItem().getTooltipImage(this);
+   }
+
    public ItemStack(ItemLike var1) {
       this(var1, 1);
    }
 
    private ItemStack(ItemLike var1, int var2, Optional<CompoundTag> var3) {
@@ -148,11 +171,11 @@
    }
 
    public boolean isEmpty() {
       if (this == EMPTY) {
          return true;
-      } else if (this.getItem() != null && this.getItem() != Items.AIR) {
+      } else if (this.getItem() != null && !this.is(Items.AIR)) {
          return this.count <= 0;
       } else {
          return true;
       }
    }
@@ -167,20 +190,28 @@
 
    public Item getItem() {
       return this.emptyCacheFlag ? Items.AIR : this.item;
    }
 
+   public boolean is(Tag<Item> var1) {
+      return var1.contains(this.getItem());
+   }
+
+   public boolean is(Item var1) {
+      return this.getItem() == var1;
+   }
+
    public InteractionResult useOn(UseOnContext var1) {
       Player var2 = var1.getPlayer();
       BlockPos var3 = var1.getClickedPos();
       BlockInWorld var4 = new BlockInWorld(var1.getLevel(), var3, false);
-      if (var2 != null && !var2.abilities.mayBuild && !this.hasAdventureModePlaceTagForBlock(var1.getLevel().getTagManager(), var4)) {
+      if (var2 != null && !var2.getAbilities().mayBuild && !this.hasAdventureModePlaceTagForBlock(var1.getLevel().getTagManager(), var4)) {
          return InteractionResult.PASS;
       } else {
          Item var5 = this.getItem();
          InteractionResult var6 = var5.useOn(var1);
-         if (var2 != null && var6.consumesAction()) {
+         if (var2 != null && var6.shouldAwardStats()) {
             var2.awardStat(Stats.ITEM_USED.get(var5));
          }
 
          return var6;
       }
@@ -272,11 +303,11 @@
          return var4 >= this.getMaxDamage();
       }
    }
 
    public <T extends LivingEntity> void hurtAndBreak(int var1, T var2, Consumer<T> var3) {
-      if (!var2.level.isClientSide && (!(var2 instanceof Player) || !((Player)var2).abilities.instabuild)) {
+      if (!var2.level.isClientSide && (!(var2 instanceof Player) || !((Player)var2).getAbilities().instabuild)) {
          if (this.isDamageableItem()) {
             if (this.hurt(var1, var2.getRandom(), var2 instanceof ServerPlayer ? (ServerPlayer)var2 : null)) {
                var3.accept(var2);
                Item var4 = this.getItem();
                this.shrink(1);
@@ -289,10 +320,30 @@
 
          }
       }
    }
 
+   public boolean isBarVisible() {
+      return this.item.isBarVisible(this);
+   }
+
+   public int getBarWidth() {
+      return this.item.getBarWidth(this);
+   }
+
+   public int getBarColor() {
+      return this.item.getBarColor(this);
+   }
+
+   public boolean overrideStackedOnOther(Slot var1, ClickAction var2, Player var3) {
+      return this.getItem().overrideStackedOnOther(this, var1, var2, var3);
+   }
+
+   public boolean overrideOtherStackedOnMe(ItemStack var1, Slot var2, ClickAction var3, Player var4, SlotAccess var5) {
+      return this.getItem().overrideOtherStackedOnMe(this, var1, var2, var3, var4, var5);
+   }
+
    public void hurtEnemy(LivingEntity var1, Player var2) {
       Item var3 = this.getItem();
       if (var3.hurtEnemy(this, var1, var2)) {
          var2.awardStat(Stats.ITEM_USED.get(var3));
       }
@@ -352,11 +403,11 @@
    }
 
    private boolean matches(ItemStack var1) {
       if (this.count != var1.count) {
          return false;
-      } else if (this.getItem() != var1.getItem()) {
+      } else if (!this.is(var1.getItem())) {
          return false;
       } else if (this.tag == null && var1.tag != null) {
          return false;
       } else {
          return this.tag == null || this.tag.equals(var1.tag);
@@ -378,27 +429,32 @@
          return !var0.isEmpty() && !var1.isEmpty() ? var0.sameItemStackIgnoreDurability(var1) : false;
       }
    }
 
    public boolean sameItem(ItemStack var1) {
-      return !var1.isEmpty() && this.getItem() == var1.getItem();
+      return !var1.isEmpty() && this.is(var1.getItem());
    }
 
    public boolean sameItemStackIgnoreDurability(ItemStack var1) {
       if (!this.isDamageableItem()) {
          return this.sameItem(var1);
       } else {
-         return !var1.isEmpty() && this.getItem() == var1.getItem();
+         return !var1.isEmpty() && this.is(var1.getItem());
       }
    }
 
+   public static boolean isSameItemSameTags(ItemStack var0, ItemStack var1) {
+      return var0.is(var1.getItem()) && tagMatches(var0, var1);
+   }
+
    public String getDescriptionId() {
       return this.getItem().getDescriptionId(this);
    }
 
    public String toString() {
-      return this.count + " " + this.getItem();
+      int var10000 = this.count;
+      return var10000 + " " + this.getItem();
    }
 
    public void inventoryTick(Level var1, Entity var2, int var3, boolean var4) {
       if (this.popTime > 0) {
          --this.popTime;
@@ -540,28 +596,31 @@
       if (this.hasCustomHoverName()) {
          var4.withStyle(ChatFormatting.ITALIC);
       }
 
       var3.add(var4);
-      if (!var2.isAdvanced() && !this.hasCustomHoverName() && this.getItem() == Items.FILLED_MAP) {
-         var3.add((new TextComponent("#" + MapItem.getMapId(this))).withStyle(ChatFormatting.GRAY));
+      if (!var2.isAdvanced() && !this.hasCustomHoverName() && this.is(Items.FILLED_MAP)) {
+         Integer var5 = MapItem.getMapId(this);
+         if (var5 != null) {
+            var3.add((new TextComponent("#" + var5)).withStyle(ChatFormatting.GRAY));
+         }
       }
 
-      int var5 = this.getHideFlags();
-      if (shouldShowInTooltip(var5, ItemStack.TooltipPart.ADDITIONAL)) {
+      int var20 = this.getHideFlags();
+      if (shouldShowInTooltip(var20, ItemStack.TooltipPart.ADDITIONAL)) {
          this.getItem().appendHoverText(this, var1 == null ? null : var1.level, var3, var2);
       }
 
       int var8;
       if (this.hasTag()) {
-         if (shouldShowInTooltip(var5, ItemStack.TooltipPart.ENCHANTMENTS)) {
+         if (shouldShowInTooltip(var20, ItemStack.TooltipPart.ENCHANTMENTS)) {
             appendEnchantmentNames(var3, this.getEnchantmentTags());
          }
 
          if (this.tag.contains("display", 10)) {
             CompoundTag var6 = this.tag.getCompound("display");
-            if (shouldShowInTooltip(var5, ItemStack.TooltipPart.DYE) && var6.contains("color", 99)) {
+            if (shouldShowInTooltip(var20, ItemStack.TooltipPart.DYE) && var6.contains("color", 99)) {
                if (var2.isAdvanced()) {
                   var3.add((new TranslatableComponent("item.color", new Object[]{String.format("#%06X", var6.getInt("color"))})).withStyle(ChatFormatting.GRAY));
                } else {
                   var3.add((new TranslatableComponent("item.dyed")).withStyle(new ChatFormatting[]{ChatFormatting.GRAY, ChatFormatting.ITALIC}));
                }
@@ -584,22 +643,22 @@
                }
             }
          }
       }
 
-      int var22;
-      if (shouldShowInTooltip(var5, ItemStack.TooltipPart.MODIFIERS)) {
-         EquipmentSlot[] var20 = EquipmentSlot.values();
-         var22 = var20.length;
+      int var23;
+      if (shouldShowInTooltip(var20, ItemStack.TooltipPart.MODIFIERS)) {
+         EquipmentSlot[] var21 = EquipmentSlot.values();
+         var23 = var21.length;
 
-         for(var8 = 0; var8 < var22; ++var8) {
-            EquipmentSlot var23 = var20[var8];
-            Multimap var24 = this.getAttributeModifiers(var23);
-            if (!var24.isEmpty()) {
+         for(var8 = 0; var8 < var23; ++var8) {
+            EquipmentSlot var24 = var21[var8];
+            Multimap var25 = this.getAttributeModifiers(var24);
+            if (!var25.isEmpty()) {
                var3.add(TextComponent.EMPTY);
-               var3.add((new TranslatableComponent("item.modifiers." + var23.getName())).withStyle(ChatFormatting.GRAY));
-               Iterator var11 = var24.entries().iterator();
+               var3.add((new TranslatableComponent("item.modifiers." + var24.getName())).withStyle(ChatFormatting.GRAY));
+               Iterator var11 = var25.entries().iterator();
 
                while(var11.hasNext()) {
                   Entry var12 = (Entry)var11.next();
                   AttributeModifier var13 = (AttributeModifier)var12.getValue();
                   double var14 = var13.getAmount();
@@ -638,35 +697,35 @@
             }
          }
       }
 
       if (this.hasTag()) {
-         if (shouldShowInTooltip(var5, ItemStack.TooltipPart.UNBREAKABLE) && this.tag.getBoolean("Unbreakable")) {
+         if (shouldShowInTooltip(var20, ItemStack.TooltipPart.UNBREAKABLE) && this.tag.getBoolean("Unbreakable")) {
             var3.add((new TranslatableComponent("item.unbreakable")).withStyle(ChatFormatting.BLUE));
          }
 
-         ListTag var21;
-         if (shouldShowInTooltip(var5, ItemStack.TooltipPart.CAN_DESTROY) && this.tag.contains("CanDestroy", 9)) {
-            var21 = this.tag.getList("CanDestroy", 8);
-            if (!var21.isEmpty()) {
+         ListTag var22;
+         if (shouldShowInTooltip(var20, ItemStack.TooltipPart.CAN_DESTROY) && this.tag.contains("CanDestroy", 9)) {
+            var22 = this.tag.getList("CanDestroy", 8);
+            if (!var22.isEmpty()) {
                var3.add(TextComponent.EMPTY);
                var3.add((new TranslatableComponent("item.canBreak")).withStyle(ChatFormatting.GRAY));
 
-               for(var22 = 0; var22 < var21.size(); ++var22) {
-                  var3.addAll(expandBlockState(var21.getString(var22)));
+               for(var23 = 0; var23 < var22.size(); ++var23) {
+                  var3.addAll(expandBlockState(var22.getString(var23)));
                }
             }
          }
 
-         if (shouldShowInTooltip(var5, ItemStack.TooltipPart.CAN_PLACE) && this.tag.contains("CanPlaceOn", 9)) {
-            var21 = this.tag.getList("CanPlaceOn", 8);
-            if (!var21.isEmpty()) {
+         if (shouldShowInTooltip(var20, ItemStack.TooltipPart.CAN_PLACE) && this.tag.contains("CanPlaceOn", 9)) {
+            var22 = this.tag.getList("CanPlaceOn", 8);
+            if (!var22.isEmpty()) {
                var3.add(TextComponent.EMPTY);
                var3.add((new TranslatableComponent("item.canPlace")).withStyle(ChatFormatting.GRAY));
 
-               for(var22 = 0; var22 < var21.size(); ++var22) {
-                  var3.addAll(expandBlockState(var21.getString(var22)));
+               for(var23 = 0; var23 < var22.size(); ++var23) {
+                  var3.addAll(expandBlockState(var22.getString(var23)));
                }
             }
          }
       }
 
@@ -813,11 +872,11 @@
             if (!var5.contains("Slot", 8) || var5.getString("Slot").equals(var1.getName())) {
                Optional var6 = Registry.ATTRIBUTE.getOptional(ResourceLocation.tryParse(var5.getString("AttributeName")));
                if (var6.isPresent()) {
                   AttributeModifier var7 = AttributeModifier.load(var5);
                   if (var7 != null && var7.getId().getLeastSignificantBits() != 0L && var7.getId().getMostSignificantBits() != 0L) {
-                     ((Multimap)var2).put(var6.get(), var7);
+                     ((Multimap)var2).put((Attribute)var6.get(), var7);
                   }
                }
             }
          }
       } else {
@@ -952,10 +1011,14 @@
 
    public void onUseTick(Level var1, LivingEntity var2, int var3) {
       this.getItem().onUseTick(var1, var2, this, var3);
    }
 
+   public void onDestroyed(ItemEntity var1) {
+      this.getItem().onDestroyed(var1);
+   }
+
    public boolean isEdible() {
       return this.getItem().isEdible();
    }
 
    public SoundEvent getDrinkingSound() {
@@ -964,10 +1027,15 @@
 
    public SoundEvent getEatingSound() {
       return this.getItem().getEatingSound();
    }
 
+   @Nullable
+   public SoundEvent getEquipSound() {
+      return this.getItem().getEquipSound();
+   }
+
    static {
       LORE_STYLE = Style.EMPTY.withColor(ChatFormatting.DARK_PURPLE).withItalic(true);
    }
 
    public static enum TooltipPart {
@@ -977,11 +1045,11 @@
       CAN_DESTROY,
       CAN_PLACE,
       ADDITIONAL,
       DYE;
 
-      private int mask = 1 << this.ordinal();
+      private final int mask = 1 << this.ordinal();
 
       private TooltipPart() {
       }
 
       public int getMask() {
