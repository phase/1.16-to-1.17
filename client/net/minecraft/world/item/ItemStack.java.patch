--- net/minecraft/world/item/ItemStack.java
+++ net/minecraft/world/item/ItemStack.java
@@ -55,11 +55,13 @@
 import net.minecraft.world.entity.MobType;
 import net.minecraft.world.entity.ai.attributes.Attribute;
 import net.minecraft.world.entity.ai.attributes.AttributeModifier;
 import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.decoration.ItemFrame;
+import net.minecraft.world.entity.player.Inventory;
 import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.inventory.ClickAction;
 import net.minecraft.world.item.context.UseOnContext;
 import net.minecraft.world.item.enchantment.DigDurabilityEnchantment;
 import net.minecraft.world.item.enchantment.Enchantment;
 import net.minecraft.world.item.enchantment.EnchantmentHelper;
 import net.minecraft.world.item.enchantment.Enchantments;
@@ -148,11 +150,11 @@
    }
 
    public boolean isEmpty() {
       if (this == EMPTY) {
          return true;
-      } else if (this.getItem() != null && this.getItem() != Items.AIR) {
+      } else if (this.getItem() != null && !this.is(Items.AIR)) {
          return this.count <= 0;
       } else {
          return true;
       }
    }
@@ -167,15 +169,23 @@
 
    public Item getItem() {
       return this.emptyCacheFlag ? Items.AIR : this.item;
    }
 
+   public boolean is(Tag<Item> var1) {
+      return var1.contains(this.getItem());
+   }
+
+   public boolean is(Item var1) {
+      return this.getItem() == var1;
+   }
+
    public InteractionResult useOn(UseOnContext var1) {
       Player var2 = var1.getPlayer();
       BlockPos var3 = var1.getClickedPos();
       BlockInWorld var4 = new BlockInWorld(var1.getLevel(), var3, false);
-      if (var2 != null && !var2.abilities.mayBuild && !this.hasAdventureModePlaceTagForBlock(var1.getLevel().getTagManager(), var4)) {
+      if (var2 != null && !var2.getAbilities().mayBuild && !this.hasAdventureModePlaceTagForBlock(var1.getLevel().getTagManager(), var4)) {
          return InteractionResult.PASS;
       } else {
          Item var5 = this.getItem();
          InteractionResult var6 = var5.useOn(var1);
          if (var2 != null && var6.consumesAction()) {
@@ -272,11 +282,11 @@
          return var4 >= this.getMaxDamage();
       }
    }
 
    public <T extends LivingEntity> void hurtAndBreak(int var1, T var2, Consumer<T> var3) {
-      if (!var2.level.isClientSide && (!(var2 instanceof Player) || !((Player)var2).abilities.instabuild)) {
+      if (!var2.level.isClientSide && (!(var2 instanceof Player) || !((Player)var2).getAbilities().instabuild)) {
          if (this.isDamageableItem()) {
             if (this.hurt(var1, var2.getRandom(), var2 instanceof ServerPlayer ? (ServerPlayer)var2 : null)) {
                var3.accept(var2);
                Item var4 = this.getItem();
                this.shrink(1);
@@ -289,10 +299,30 @@
 
          }
       }
    }
 
+   public boolean isBarVisible() {
+      return this.item.isBarVisible(this);
+   }
+
+   public int getBarWidth() {
+      return this.item.getBarWidth(this);
+   }
+
+   public int getBarColor() {
+      return this.item.getBarColor(this);
+   }
+
+   public boolean overrideStackedOnOther(ItemStack var1, ClickAction var2, Inventory var3) {
+      return this.getItem().overrideStackedOnOther(this, var1, var2, var3);
+   }
+
+   public boolean overrideOtherStackedOnMe(ItemStack var1, ClickAction var2, Inventory var3) {
+      return this.getItem().overrideOtherStackedOnMe(this, var1, var2, var3);
+   }
+
    public void hurtEnemy(LivingEntity var1, Player var2) {
       Item var3 = this.getItem();
       if (var3.hurtEnemy(this, var1, var2)) {
          var2.awardStat(Stats.ITEM_USED.get(var3));
       }
@@ -352,11 +382,11 @@
    }
 
    private boolean matches(ItemStack var1) {
       if (this.count != var1.count) {
          return false;
-      } else if (this.getItem() != var1.getItem()) {
+      } else if (!this.is(var1.getItem())) {
          return false;
       } else if (this.tag == null && var1.tag != null) {
          return false;
       } else {
          return this.tag == null || this.tag.equals(var1.tag);
@@ -378,21 +408,25 @@
          return !var0.isEmpty() && !var1.isEmpty() ? var0.sameItemStackIgnoreDurability(var1) : false;
       }
    }
 
    public boolean sameItem(ItemStack var1) {
-      return !var1.isEmpty() && this.getItem() == var1.getItem();
+      return !var1.isEmpty() && this.is(var1.getItem());
    }
 
    public boolean sameItemStackIgnoreDurability(ItemStack var1) {
       if (!this.isDamageableItem()) {
          return this.sameItem(var1);
       } else {
-         return !var1.isEmpty() && this.getItem() == var1.getItem();
+         return !var1.isEmpty() && this.is(var1.getItem());
       }
    }
 
+   public static boolean isSameItemSameTags(ItemStack var0, ItemStack var1) {
+      return var0.is(var1.getItem()) && tagMatches(var0, var1);
+   }
+
    public String getDescriptionId() {
       return this.getItem().getDescriptionId(this);
    }
 
    public String toString() {
@@ -540,11 +574,11 @@
       if (this.hasCustomHoverName()) {
          var4.withStyle(ChatFormatting.ITALIC);
       }
 
       var3.add(var4);
-      if (!var2.isAdvanced() && !this.hasCustomHoverName() && this.getItem() == Items.FILLED_MAP) {
+      if (!var2.isAdvanced() && !this.hasCustomHoverName() && this.is(Items.FILLED_MAP)) {
          var3.add((new TextComponent("#" + MapItem.getMapId(this))).withStyle(ChatFormatting.GRAY));
       }
 
       int var5 = this.getHideFlags();
       if (shouldShowInTooltip(var5, ItemStack.TooltipPart.ADDITIONAL)) {
@@ -964,10 +998,15 @@
 
    public SoundEvent getEatingSound() {
       return this.getItem().getEatingSound();
    }
 
+   @Nullable
+   public SoundEvent getEquipSound() {
+      return this.getItem().getEquipSound();
+   }
+
    static {
       LORE_STYLE = Style.EMPTY.withColor(ChatFormatting.DARK_PURPLE).withItalic(true);
    }
 
    public static enum TooltipPart {
@@ -977,11 +1016,11 @@
       CAN_DESTROY,
       CAN_PLACE,
       ADDITIONAL,
       DYE;
 
-      private int mask = 1 << this.ordinal();
+      private final int mask = 1 << this.ordinal();
 
       private TooltipPart() {
       }
 
       public int getMask() {
