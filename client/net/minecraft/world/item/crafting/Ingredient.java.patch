--- net/minecraft/world/item/crafting/Ingredient.java
+++ net/minecraft/world/item/crafting/Ingredient.java
@@ -68,11 +68,11 @@
             ItemStack[] var2 = this.itemStacks;
             int var3 = var2.length;
 
             for(int var4 = 0; var4 < var3; ++var4) {
                ItemStack var5 = var2[var4];
-               if (var5.getItem() == var1.getItem()) {
+               if (var5.is(var1.getItem())) {
                   return true;
                }
             }
 
             return false;
@@ -98,16 +98,11 @@
       return this.stackingIds;
    }
 
    public void toNetwork(FriendlyByteBuf var1) {
       this.dissolve();
-      var1.writeVarInt(this.itemStacks.length);
-
-      for(int var2 = 0; var2 < this.itemStacks.length; ++var2) {
-         var1.writeItem(this.itemStacks[var2]);
-      }
-
+      var1.writeCollection(Arrays.asList(this.itemStacks), FriendlyByteBuf::writeItem);
    }
 
    public JsonElement toJson() {
       if (this.values.length == 1) {
          return this.values[0].serialize();
@@ -153,14 +148,13 @@
    public static Ingredient of(Tag<Item> var0) {
       return fromValues(Stream.of(new Ingredient.TagValue(var0)));
    }
 
    public static Ingredient fromNetwork(FriendlyByteBuf var0) {
-      int var1 = var0.readVarInt();
-      return fromValues(Stream.generate(() -> {
-         return new Ingredient.ItemValue(var0.readItem());
-      }).limit((long)var1));
+      return fromValues(var0.readList(FriendlyByteBuf::readItem).stream().map((var0x) -> {
+         return new Ingredient.ItemValue(var0x);
+      }));
    }
 
    public static Ingredient fromJson(@Nullable JsonElement var0) {
       if (var0 != null && !var0.isJsonNull()) {
          if (var0.isJsonObject()) {
@@ -193,16 +187,14 @@
                return new JsonSyntaxException("Unknown item '" + var1 + "'");
             });
             return new Ingredient.ItemValue(new ItemStack(var3));
          } else if (var0.has("tag")) {
             var1 = new ResourceLocation(GsonHelper.getAsString(var0, "tag"));
-            Tag var2 = SerializationTags.getInstance().getItems().getTag(var1);
-            if (var2 == null) {
-               throw new JsonSyntaxException("Unknown item tag '" + var1 + "'");
-            } else {
-               return new Ingredient.TagValue(var2);
-            }
+            Tag var2 = SerializationTags.getInstance().getTagOrThrow(Registry.ITEM_REGISTRY, var1, (var0x) -> {
+               return new JsonSyntaxException("Unknown item tag '" + var0x + "'");
+            });
+            return new Ingredient.TagValue(var2);
          } else {
             throw new JsonParseException("An ingredient entry needs either a tag or an item");
          }
       }
    }
@@ -226,11 +218,13 @@
          return var1;
       }
 
       public JsonObject serialize() {
          JsonObject var1 = new JsonObject();
-         var1.addProperty("tag", SerializationTags.getInstance().getItems().getIdOrThrow(this.tag).toString());
+         var1.addProperty("tag", SerializationTags.getInstance().getIdOrThrow(Registry.ITEM_REGISTRY, this.tag, () -> {
+            return new IllegalStateException("Unknown item tag");
+         }).toString());
          return var1;
       }
    }
 
    static class ItemValue implements Ingredient.Value {
