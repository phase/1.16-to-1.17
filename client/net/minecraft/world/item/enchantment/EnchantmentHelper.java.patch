--- net/minecraft/world/item/enchantment/EnchantmentHelper.java
+++ net/minecraft/world/item/enchantment/EnchantmentHelper.java
@@ -51,11 +51,11 @@
          return 0;
       }
    }
 
    public static Map<Enchantment, Integer> getEnchantments(ItemStack var0) {
-      ListTag var1 = var0.getItem() == Items.ENCHANTED_BOOK ? EnchantedBookItem.getEnchantments(var0) : var0.getEnchantmentTags();
+      ListTag var1 = var0.is(Items.ENCHANTED_BOOK) ? EnchantedBookItem.getEnchantments(var0) : var0.getEnchantmentTags();
       return deserializeEnchantments(var1);
    }
 
    public static Map<Enchantment, Integer> deserializeEnchantments(ListTag var0) {
       LinkedHashMap var1 = Maps.newLinkedHashMap();
@@ -81,19 +81,19 @@
             int var6 = (Integer)var4.getValue();
             CompoundTag var7 = new CompoundTag();
             var7.putString("id", String.valueOf(Registry.ENCHANTMENT.getKey(var5)));
             var7.putShort("lvl", (short)var6);
             var2.add(var7);
-            if (var1.getItem() == Items.ENCHANTED_BOOK) {
+            if (var1.is(Items.ENCHANTED_BOOK)) {
                EnchantedBookItem.addEnchantment(var1, new EnchantmentInstance(var5, var6));
             }
          }
       }
 
       if (var2.isEmpty()) {
          var1.removeTagKey("Enchantments");
-      } else if (var1.getItem() != Items.ENCHANTED_BOOK) {
+      } else if (!var1.is(Items.ENCHANTED_BOOK)) {
          var1.addTagElement("Enchantments", var2);
       }
 
    }
 
@@ -302,11 +302,11 @@
       }
    }
 
    public static ItemStack enchantItem(Random var0, ItemStack var1, int var2, boolean var3) {
       List var4 = selectEnchantment(var0, var1, var2, var3);
-      boolean var5 = var1.getItem() == Items.BOOK;
+      boolean var5 = var1.is(Items.BOOK);
       if (var5) {
          var1 = new ItemStack(Items.ENCHANTED_BOOK);
       }
 
       Iterator var6 = var4.iterator();
@@ -333,19 +333,22 @@
          var2 += 1 + var0.nextInt(var6 / 4 + 1) + var0.nextInt(var6 / 4 + 1);
          float var7 = (var0.nextFloat() + var0.nextFloat() - 1.0F) * 0.15F;
          var2 = Mth.clamp(Math.round((float)var2 + (float)var2 * var7), 1, Integer.MAX_VALUE);
          List var8 = getAvailableEnchantmentResults(var2, var1, var3);
          if (!var8.isEmpty()) {
-            var4.add(WeighedRandom.getRandomItem(var0, var8));
+            WeighedRandom.getRandomItem(var0, var8).ifPresent(var4::add);
 
             while(var0.nextInt(50) <= var2) {
-               filterCompatibleEnchantments(var8, (EnchantmentInstance)Util.lastOf(var4));
+               if (!var4.isEmpty()) {
+                  filterCompatibleEnchantments(var8, (EnchantmentInstance)Util.lastOf(var4));
+               }
+
                if (var8.isEmpty()) {
                   break;
                }
 
-               var4.add(WeighedRandom.getRandomItem(var0, var8));
+               WeighedRandom.getRandomItem(var0, var8).ifPresent(var4::add);
                var2 /= 2;
             }
          }
 
          return var4;
@@ -379,11 +382,11 @@
    }
 
    public static List<EnchantmentInstance> getAvailableEnchantmentResults(int var0, ItemStack var1, boolean var2) {
       ArrayList var3 = Lists.newArrayList();
       Item var4 = var1.getItem();
-      boolean var5 = var1.getItem() == Items.BOOK;
+      boolean var5 = var1.is(Items.BOOK);
       Iterator var6 = Registry.ENCHANTMENT.iterator();
 
       while(true) {
          while(true) {
             Enchantment var7;
