--- net/minecraft/world/inventory/AnvilMenu.java
+++ net/minecraft/world/inventory/AnvilMenu.java
@@ -17,13 +17,22 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class AnvilMenu extends ItemCombinerMenu {
    private static final Logger LOGGER = LogManager.getLogger();
+   private static final boolean DEBUG_COST = false;
+   public static final int MAX_NAME_LENGTH = 35;
    private int repairItemCountCost;
    private String itemName;
    private final DataSlot cost;
+   private static final int COST_FAIL = 0;
+   private static final int COST_BASE = 1;
+   private static final int COST_ADDED_BASE = 1;
+   private static final int COST_REPAIR_MATERIAL = 1;
+   private static final int COST_REPAIR_SACRIFICE = 2;
+   private static final int COST_INCOMPATIBLE_PENALTY = 1;
+   private static final int COST_RENAME = 1;
 
    public AnvilMenu(int var1, Inventory var2) {
       this(var1, var2, ContainerLevelAccess.NULL);
    }
 
@@ -36,15 +45,15 @@
    protected boolean isValidBlock(BlockState var1) {
       return var1.is(BlockTags.ANVIL);
    }
 
    protected boolean mayPickup(Player var1, boolean var2) {
-      return (var1.abilities.instabuild || var1.experienceLevel >= this.cost.get()) && this.cost.get() > 0;
+      return (var1.getAbilities().instabuild || var1.experienceLevel >= this.cost.get()) && this.cost.get() > 0;
    }
 
-   protected ItemStack onTake(Player var1, ItemStack var2) {
-      if (!var1.abilities.instabuild) {
+   protected void onTake(Player var1, ItemStack var2) {
+      if (!var1.getAbilities().instabuild) {
          var1.giveExperienceLevels(-this.cost.get());
       }
 
       this.inputSlots.setItem(0, ItemStack.EMPTY);
       if (this.repairItemCountCost > 0) {
@@ -60,11 +69,11 @@
       }
 
       this.cost.set(0);
       this.access.execute((var1x, var2x) -> {
          BlockState var3 = var1x.getBlockState(var2x);
-         if (!var1.abilities.instabuild && var3.is(BlockTags.ANVIL) && var1.getRandom().nextFloat() < 0.12F) {
+         if (!var1.getAbilities().instabuild && var3.is(BlockTags.ANVIL) && var1.getRandom().nextFloat() < 0.12F) {
             BlockState var4 = AnvilBlock.damage(var3);
             if (var4 == null) {
                var1x.removeBlock(var2x, false);
                var1x.levelEvent(1029, var2x, 0);
             } else {
@@ -74,11 +83,10 @@
          } else {
             var1x.levelEvent(1030, var2x, 0);
          }
 
       });
-      return var2;
    }
 
    public void createResult() {
       ItemStack var1 = this.inputSlots.getItem(0);
       this.cost.set(1);
@@ -93,11 +101,11 @@
          ItemStack var6 = this.inputSlots.getItem(1);
          Map var7 = EnchantmentHelper.getEnchantments(var5);
          int var19 = var3 + var1.getBaseRepairCost() + (var6.isEmpty() ? 0 : var6.getBaseRepairCost());
          this.repairItemCountCost = 0;
          if (!var6.isEmpty()) {
-            boolean var8 = var6.getItem() == Items.ENCHANTED_BOOK && !EnchantedBookItem.getEnchantments(var6).isEmpty();
+            boolean var8 = var6.is(Items.ENCHANTED_BOOK) && !EnchantedBookItem.getEnchantments(var6).isEmpty();
             int var9;
             int var10;
             int var11;
             if (var5.isDamageableItem() && var5.getItem().isValidRepairItem(var1, var6)) {
                var9 = Math.min(var5.getDamageValue(), var5.getMaxDamage() / 4);
@@ -114,11 +122,11 @@
                   var9 = Math.min(var5.getDamageValue(), var5.getMaxDamage() / 4);
                }
 
                this.repairItemCountCost = var10;
             } else {
-               if (!var8 && (var5.getItem() != var6.getItem() || !var5.isDamageableItem())) {
+               if (!var8 && (!var5.is(var6.getItem()) || !var5.isDamageableItem())) {
                   this.resultSlots.setItem(0, ItemStack.EMPTY);
                   this.cost.set(0);
                   return;
                }
 
@@ -161,11 +169,11 @@
 
                   int var14 = (Integer)var7.getOrDefault(var25, 0);
                   int var15 = (Integer)var21.get(var25);
                   var15 = var14 == var15 ? var15 + 1 : Math.max(var15, var14);
                   boolean var16 = var25.canEnchant(var1);
-                  if (this.player.abilities.instabuild || var1.getItem() == Items.ENCHANTED_BOOK) {
+                  if (this.player.getAbilities().instabuild || var1.is(Items.ENCHANTED_BOOK)) {
                      var16 = true;
                   }
 
                   Iterator var17 = var7.keySet().iterator();
 
@@ -233,11 +241,11 @@
 
          if (var4 == var2 && var4 > 0 && this.cost.get() >= 40) {
             this.cost.set(39);
          }
 
-         if (this.cost.get() >= 40 && !this.player.abilities.instabuild) {
+         if (this.cost.get() >= 40 && !this.player.getAbilities().instabuild) {
             var5 = ItemStack.EMPTY;
          }
 
          if (!var5.isEmpty()) {
             int var20 = var5.getBaseRepairCost();
