--- net/minecraft/world/inventory/AbstractContainerMenu.java
+++ net/minecraft/world/inventory/AbstractContainerMenu.java
@@ -1,43 +1,69 @@
 package net.minecraft.world.inventory;
 
+import com.google.common.base.Supplier;
+import com.google.common.base.Suppliers;
+import com.google.common.collect.HashBasedTable;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
+import it.unimi.dsi.fastutil.ints.IntArrayList;
+import it.unimi.dsi.fastutil.ints.IntList;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Optional;
 import java.util.Set;
 import javax.annotation.Nullable;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
 import net.minecraft.core.NonNullList;
 import net.minecraft.core.Registry;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.util.Mth;
 import net.minecraft.world.Container;
+import net.minecraft.world.entity.SlotAccess;
 import net.minecraft.world.entity.player.Inventory;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
-import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.entity.BlockEntity;
 
 public abstract class AbstractContainerMenu {
+   public static final int SLOT_CLICKED_OUTSIDE = -999;
+   public static final int QUICKCRAFT_TYPE_CHARITABLE = 0;
+   public static final int QUICKCRAFT_TYPE_GREEDY = 1;
+   public static final int QUICKCRAFT_TYPE_CLONE = 2;
+   public static final int QUICKCRAFT_HEADER_START = 0;
+   public static final int QUICKCRAFT_HEADER_CONTINUE = 1;
+   public static final int QUICKCRAFT_HEADER_END = 2;
+   public static final int CARRIED_SLOT_SIZE = Integer.MAX_VALUE;
    private final NonNullList<ItemStack> lastSlots = NonNullList.create();
-   public final List<Slot> slots = Lists.newArrayList();
+   public final NonNullList<Slot> slots = NonNullList.create();
    private final List<DataSlot> dataSlots = Lists.newArrayList();
+   private ItemStack carried;
+   private final NonNullList<ItemStack> remoteSlots;
+   private final IntList remoteDataSlots;
+   private ItemStack remoteCarried;
    @Nullable
    private final MenuType<?> menuType;
    public final int containerId;
-   private short changeUid;
-   private int quickcraftType = -1;
+   private int quickcraftType;
    private int quickcraftStatus;
-   private final Set<Slot> quickcraftSlots = Sets.newHashSet();
-   private final List<ContainerListener> containerListeners = Lists.newArrayList();
-   private final Set<Player> unSynchedPlayers = Sets.newHashSet();
+   private final Set<Slot> quickcraftSlots;
+   private final List<ContainerListener> containerListeners;
+   @Nullable
+   private ContainerSynchronizer synchronizer;
+   private boolean suppressRemoteUpdates;
 
    protected AbstractContainerMenu(@Nullable MenuType<?> var1, int var2) {
+      this.carried = ItemStack.EMPTY;
+      this.remoteSlots = NonNullList.create();
+      this.remoteDataSlots = new IntArrayList();
+      this.remoteCarried = ItemStack.EMPTY;
+      this.quickcraftType = -1;
+      this.quickcraftSlots = Sets.newHashSet();
+      this.containerListeners = Lists.newArrayList();
       this.menuType = var1;
       this.containerId = var2;
    }
 
    protected static boolean stillValid(ContainerLevelAccess var0, Player var1, Block var2) {
@@ -70,15 +96,17 @@
 
    protected Slot addSlot(Slot var1) {
       var1.index = this.slots.size();
       this.slots.add(var1);
       this.lastSlots.add(ItemStack.EMPTY);
+      this.remoteSlots.add(ItemStack.EMPTY);
       return var1;
    }
 
    protected DataSlot addDataSlot(DataSlot var1) {
       this.dataSlots.add(var1);
+      this.remoteDataSlots.add(0);
       return var1;
    }
 
    protected void addDataSlots(ContainerData var1) {
       for(int var2 = 0; var2 < var1.getCount(); ++var2) {
@@ -88,76 +116,162 @@
    }
 
    public void addSlotListener(ContainerListener var1) {
       if (!this.containerListeners.contains(var1)) {
          this.containerListeners.add(var1);
-         var1.refreshContainer(this, this.getItems());
          this.broadcastChanges();
       }
    }
 
+   public void setSynchronizer(ContainerSynchronizer var1) {
+      this.synchronizer = var1;
+      this.sendAllDataToRemote();
+   }
+
+   public void sendAllDataToRemote() {
+      int var1 = 0;
+
+      int var2;
+      for(var2 = this.slots.size(); var1 < var2; ++var1) {
+         this.remoteSlots.set(var1, ((Slot)this.slots.get(var1)).getItem().copy());
+      }
+
+      this.remoteCarried = this.getCarried().copy();
+      var1 = 0;
+
+      for(var2 = this.dataSlots.size(); var1 < var2; ++var1) {
+         this.remoteDataSlots.set(var1, ((DataSlot)this.dataSlots.get(var1)).get());
+      }
+
+      if (this.synchronizer != null) {
+         this.synchronizer.sendInitialData(this, this.remoteSlots, this.remoteCarried, this.remoteDataSlots.toIntArray());
+      }
+
+   }
+
    public void removeSlotListener(ContainerListener var1) {
       this.containerListeners.remove(var1);
    }
 
    public NonNullList<ItemStack> getItems() {
       NonNullList var1 = NonNullList.create();
+      Iterator var2 = this.slots.iterator();
 
-      for(int var2 = 0; var2 < this.slots.size(); ++var2) {
-         var1.add(((Slot)this.slots.get(var2)).getItem());
+      while(var2.hasNext()) {
+         Slot var3 = (Slot)var2.next();
+         var1.add(var3.getItem());
       }
 
       return var1;
    }
 
    public void broadcastChanges() {
       int var1;
       for(var1 = 0; var1 < this.slots.size(); ++var1) {
          ItemStack var2 = ((Slot)this.slots.get(var1)).getItem();
-         ItemStack var3 = (ItemStack)this.lastSlots.get(var1);
-         if (!ItemStack.matches(var3, var2)) {
-            ItemStack var4 = var2.copy();
-            this.lastSlots.set(var1, var4);
-            Iterator var5 = this.containerListeners.iterator();
+         var2.getClass();
+         Supplier var3 = Suppliers.memoize(var2::copy);
+         this.triggerSlotListeners(var1, var2, var3);
+         this.synchronizeSlotToRemote(var1, var2, var3);
+      }
 
-            while(var5.hasNext()) {
-               ContainerListener var6 = (ContainerListener)var5.next();
-               var6.slotChanged(this, var1, var4);
+      this.synchronizeCarriedToRemote();
+
+      for(var1 = 0; var1 < this.dataSlots.size(); ++var1) {
+         DataSlot var6 = (DataSlot)this.dataSlots.get(var1);
+         int var7 = var6.get();
+         if (var6.checkAndClearUpdateFlag()) {
+            Iterator var4 = this.containerListeners.iterator();
+
+            while(var4.hasNext()) {
+               ContainerListener var5 = (ContainerListener)var4.next();
+               var5.dataChanged(this, var1, var7);
             }
          }
+
+         this.synchronizeDataSlotToRemote(var1, var7);
       }
 
-      for(var1 = 0; var1 < this.dataSlots.size(); ++var1) {
-         DataSlot var7 = (DataSlot)this.dataSlots.get(var1);
-         if (var7.checkAndClearUpdateFlag()) {
-            Iterator var8 = this.containerListeners.iterator();
+   }
 
-            while(var8.hasNext()) {
-               ContainerListener var9 = (ContainerListener)var8.next();
-               var9.setContainerData(this, var1, var7.get());
+   private void triggerSlotListeners(int var1, ItemStack var2, java.util.function.Supplier<ItemStack> var3) {
+      ItemStack var4 = (ItemStack)this.lastSlots.get(var1);
+      if (!ItemStack.matches(var4, var2)) {
+         ItemStack var5 = (ItemStack)var3.get();
+         this.lastSlots.set(var1, var5);
+         Iterator var6 = this.containerListeners.iterator();
+
+         while(var6.hasNext()) {
+            ContainerListener var7 = (ContainerListener)var6.next();
+            var7.slotChanged(this, var1, var5);
+         }
+      }
+
+   }
+
+   private void synchronizeSlotToRemote(int var1, ItemStack var2, java.util.function.Supplier<ItemStack> var3) {
+      if (!this.suppressRemoteUpdates) {
+         ItemStack var4 = (ItemStack)this.remoteSlots.get(var1);
+         if (!ItemStack.matches(var4, var2)) {
+            ItemStack var5 = (ItemStack)var3.get();
+            this.remoteSlots.set(var1, var5);
+            if (this.synchronizer != null) {
+               this.synchronizer.sendSlotChange(this, var1, var5);
             }
          }
+
       }
+   }
 
+   private void synchronizeDataSlotToRemote(int var1, int var2) {
+      if (!this.suppressRemoteUpdates) {
+         int var3 = this.remoteDataSlots.getInt(var1);
+         if (var3 != var2) {
+            this.remoteDataSlots.set(var1, var2);
+            if (this.synchronizer != null) {
+               this.synchronizer.sendDataChange(this, var1, var2);
+            }
+         }
+
+      }
    }
 
+   private void synchronizeCarriedToRemote() {
+      if (!this.suppressRemoteUpdates) {
+         if (!ItemStack.matches(this.getCarried(), this.remoteCarried)) {
+            this.remoteCarried = this.getCarried().copy();
+            if (this.synchronizer != null) {
+               this.synchronizer.sendCarriedChange(this, this.remoteCarried);
+            }
+         }
+
+      }
+   }
+
+   public void setRemoteSlot(int var1, ItemStack var2) {
+      this.remoteSlots.set(var1, var2);
+   }
+
+   public void setRemoteCarried(ItemStack var1) {
+      this.remoteCarried = var1.copy();
+   }
+
    public boolean clickMenuButton(Player var1, int var2) {
       return false;
    }
 
    public Slot getSlot(int var1) {
       return (Slot)this.slots.get(var1);
    }
 
    public ItemStack quickMoveStack(Player var1, int var2) {
-      Slot var3 = (Slot)this.slots.get(var2);
-      return var3 != null ? var3.getItem() : ItemStack.EMPTY;
+      return ((Slot)this.slots.get(var2)).getItem();
    }
 
-   public ItemStack clicked(int var1, int var2, ClickType var3, Player var4) {
+   public void clicked(int var1, int var2, ClickType var3, Player var4) {
       try {
-         return this.doClick(var1, var2, var3, var4);
+         this.doClick(var1, var2, var3, var4);
       } catch (Exception var8) {
          CrashReport var6 = CrashReport.forThrowable(var8, "Container click");
          CrashReportCategory var7 = var6.addCategory("Click info");
          var7.setDetail("Menu Type", () -> {
             return this.menuType != null ? Registry.MENU.getKey(this.menuType).toString() : "<no type>";
@@ -171,76 +285,83 @@
          var7.setDetail("Type", (Object)var3);
          throw new ReportedException(var6);
       }
    }
 
-   private ItemStack doClick(int var1, int var2, ClickType var3, Player var4) {
-      ItemStack var5 = ItemStack.EMPTY;
-      Inventory var6 = var4.inventory;
+   private void doClick(int var1, int var2, ClickType var3, Player var4) {
+      Inventory var5 = var4.getInventory();
+      Slot var7;
       ItemStack var8;
-      ItemStack var9;
-      int var15;
+      ItemStack var16;
       int var18;
+      int var19;
       if (var3 == ClickType.QUICK_CRAFT) {
-         int var17 = this.quickcraftStatus;
+         int var6 = this.quickcraftStatus;
          this.quickcraftStatus = getQuickcraftHeader(var2);
-         if ((var17 != 1 || this.quickcraftStatus != 2) && var17 != this.quickcraftStatus) {
+         if ((var6 != 1 || this.quickcraftStatus != 2) && var6 != this.quickcraftStatus) {
             this.resetQuickCraft();
-         } else if (var6.getCarried().isEmpty()) {
+         } else if (this.getCarried().isEmpty()) {
             this.resetQuickCraft();
          } else if (this.quickcraftStatus == 0) {
             this.quickcraftType = getQuickcraftType(var2);
             if (isValidQuickcraftType(this.quickcraftType, var4)) {
                this.quickcraftStatus = 1;
                this.quickcraftSlots.clear();
             } else {
                this.resetQuickCraft();
             }
          } else if (this.quickcraftStatus == 1) {
-            Slot var19 = (Slot)this.slots.get(var1);
-            var9 = var6.getCarried();
-            if (var19 != null && canItemQuickReplace(var19, var9, true) && var19.mayPlace(var9) && (this.quickcraftType == 2 || var9.getCount() > this.quickcraftSlots.size()) && this.canDragTo(var19)) {
-               this.quickcraftSlots.add(var19);
+            var7 = (Slot)this.slots.get(var1);
+            var8 = this.getCarried();
+            if (canItemQuickReplace(var7, var8, true) && var7.mayPlace(var8) && (this.quickcraftType == 2 || var8.getCount() > this.quickcraftSlots.size()) && this.canDragTo(var7)) {
+               this.quickcraftSlots.add(var7);
             }
          } else if (this.quickcraftStatus == 2) {
             if (!this.quickcraftSlots.isEmpty()) {
-               var8 = var6.getCarried().copy();
-               var18 = var6.getCarried().getCount();
-               Iterator var23 = this.quickcraftSlots.iterator();
+               if (this.quickcraftSlots.size() == 1) {
+                  var18 = ((Slot)this.quickcraftSlots.iterator().next()).index;
+                  this.resetQuickCraft();
+                  this.doClick(var18, this.quickcraftType, ClickType.PICKUP, var4);
+                  return;
+               }
 
-               label336:
+               var16 = this.getCarried().copy();
+               var19 = this.getCarried().getCount();
+               Iterator var9 = this.quickcraftSlots.iterator();
+
+               label305:
                while(true) {
-                  Slot var20;
-                  ItemStack var21;
+                  Slot var10;
+                  ItemStack var11;
                   do {
                      do {
                         do {
                            do {
-                              if (!var23.hasNext()) {
-                                 var8.setCount(var18);
-                                 var6.setCarried(var8);
-                                 break label336;
+                              if (!var9.hasNext()) {
+                                 var16.setCount(var19);
+                                 this.setCarried(var16);
+                                 break label305;
                               }
 
-                              var20 = (Slot)var23.next();
-                              var21 = var6.getCarried();
-                           } while(var20 == null);
-                        } while(!canItemQuickReplace(var20, var21, true));
-                     } while(!var20.mayPlace(var21));
-                  } while(this.quickcraftType != 2 && var21.getCount() < this.quickcraftSlots.size());
+                              var10 = (Slot)var9.next();
+                              var11 = this.getCarried();
+                           } while(var10 == null);
+                        } while(!canItemQuickReplace(var10, var11, true));
+                     } while(!var10.mayPlace(var11));
+                  } while(this.quickcraftType != 2 && var11.getCount() < this.quickcraftSlots.size());
 
-                  if (this.canDragTo(var20)) {
-                     ItemStack var22 = var8.copy();
-                     int var24 = var20.hasItem() ? var20.getItem().getCount() : 0;
-                     getQuickCraftSlotCount(this.quickcraftSlots, this.quickcraftType, var22, var24);
-                     var15 = Math.min(var22.getMaxStackSize(), var20.getMaxStackSize(var22));
-                     if (var22.getCount() > var15) {
-                        var22.setCount(var15);
+                  if (this.canDragTo(var10)) {
+                     ItemStack var12 = var16.copy();
+                     int var13 = var10.hasItem() ? var10.getItem().getCount() : 0;
+                     getQuickCraftSlotCount(this.quickcraftSlots, this.quickcraftType, var12, var13);
+                     int var14 = Math.min(var12.getMaxStackSize(), var10.getMaxStackSize(var12));
+                     if (var12.getCount() > var14) {
+                        var12.setCount(var14);
                      }
 
-                     var18 -= var22.getCount() - var24;
-                     var20.set(var22);
+                     var19 -= var12.getCount() - var13;
+                     var10.set(var12);
                   }
                }
             }
 
             this.resetQuickCraft();
@@ -248,219 +369,193 @@
             this.resetQuickCraft();
          }
       } else if (this.quickcraftStatus != 0) {
          this.resetQuickCraft();
       } else {
-         Slot var7;
-         int var10;
+         int var22;
          if ((var3 == ClickType.PICKUP || var3 == ClickType.QUICK_MOVE) && (var2 == 0 || var2 == 1)) {
+            ClickAction var17 = var2 == 0 ? ClickAction.PRIMARY : ClickAction.SECONDARY;
             if (var1 == -999) {
-               if (!var6.getCarried().isEmpty()) {
-                  if (var2 == 0) {
-                     var4.drop(var6.getCarried(), true);
-                     var6.setCarried(ItemStack.EMPTY);
+               if (!this.getCarried().isEmpty()) {
+                  if (var17 == ClickAction.PRIMARY) {
+                     var4.drop(this.getCarried(), true);
+                     this.setCarried(ItemStack.EMPTY);
+                  } else {
+                     var4.drop(this.getCarried().split(1), true);
                   }
-
-                  if (var2 == 1) {
-                     var4.drop(var6.getCarried().split(1), true);
-                  }
                }
             } else if (var3 == ClickType.QUICK_MOVE) {
                if (var1 < 0) {
-                  return ItemStack.EMPTY;
+                  return;
                }
 
                var7 = (Slot)this.slots.get(var1);
-               if (var7 == null || !var7.mayPickup(var4)) {
-                  return ItemStack.EMPTY;
+               if (!var7.mayPickup(var4)) {
+                  return;
                }
 
                for(var8 = this.quickMoveStack(var4, var1); !var8.isEmpty() && ItemStack.isSame(var7.getItem(), var8); var8 = this.quickMoveStack(var4, var1)) {
-                  var5 = var8.copy();
                }
             } else {
                if (var1 < 0) {
-                  return ItemStack.EMPTY;
+                  return;
                }
 
                var7 = (Slot)this.slots.get(var1);
-               if (var7 != null) {
-                  var8 = var7.getItem();
-                  var9 = var6.getCarried();
-                  if (!var8.isEmpty()) {
-                     var5 = var8.copy();
-                  }
-
+               var8 = var7.getItem();
+               ItemStack var21 = this.getCarried();
+               var4.updateTutorialInventoryAction(var21, var7.getItem(), var17);
+               if (!var21.overrideStackedOnOther(var7, var17, var4) && !var8.overrideOtherStackedOnMe(var21, var7, var17, var4, this.createCarriedSlotAccess())) {
                   if (var8.isEmpty()) {
-                     if (!var9.isEmpty() && var7.mayPlace(var9)) {
-                        var10 = var2 == 0 ? var9.getCount() : 1;
-                        if (var10 > var7.getMaxStackSize(var9)) {
-                           var10 = var7.getMaxStackSize(var9);
-                        }
-
-                        var7.set(var9.split(var10));
+                     if (!var21.isEmpty()) {
+                        var22 = var17 == ClickAction.PRIMARY ? var21.getCount() : 1;
+                        this.setCarried(var7.safeInsert(var21, var22));
                      }
                   } else if (var7.mayPickup(var4)) {
-                     if (var9.isEmpty()) {
-                        if (var8.isEmpty()) {
-                           var7.set(ItemStack.EMPTY);
-                           var6.setCarried(ItemStack.EMPTY);
-                        } else {
-                           var10 = var2 == 0 ? var8.getCount() : (var8.getCount() + 1) / 2;
-                           var6.setCarried(var7.remove(var10));
-                           if (var8.isEmpty()) {
-                              var7.set(ItemStack.EMPTY);
-                           }
-
-                           var7.onTake(var4, var6.getCarried());
+                     if (var21.isEmpty()) {
+                        var22 = var17 == ClickAction.PRIMARY ? var8.getCount() : (var8.getCount() + 1) / 2;
+                        Optional var24 = var7.tryRemove(var22, Integer.MAX_VALUE, var4);
+                        var24.ifPresent((var3x) -> {
+                           this.setCarried(var3x);
+                           var7.onTake(var4, var3x);
+                        });
+                     } else if (var7.mayPlace(var21)) {
+                        if (ItemStack.isSameItemSameTags(var8, var21)) {
+                           var22 = var17 == ClickAction.PRIMARY ? var21.getCount() : 1;
+                           this.setCarried(var7.safeInsert(var21, var22));
+                        } else if (var21.getCount() <= var7.getMaxStackSize(var21)) {
+                           var7.set(var21);
+                           this.setCarried(var8);
                         }
-                     } else if (var7.mayPlace(var9)) {
-                        if (consideredTheSameItem(var8, var9)) {
-                           var10 = var2 == 0 ? var9.getCount() : 1;
-                           if (var10 > var7.getMaxStackSize(var9) - var8.getCount()) {
-                              var10 = var7.getMaxStackSize(var9) - var8.getCount();
-                           }
-
-                           if (var10 > var9.getMaxStackSize() - var8.getCount()) {
-                              var10 = var9.getMaxStackSize() - var8.getCount();
-                           }
-
-                           var9.shrink(var10);
-                           var8.grow(var10);
-                        } else if (var9.getCount() <= var7.getMaxStackSize(var9)) {
-                           var7.set(var9);
-                           var6.setCarried(var8);
-                        }
-                     } else if (var9.getMaxStackSize() > 1 && consideredTheSameItem(var8, var9) && !var8.isEmpty()) {
-                        var10 = var8.getCount();
-                        if (var10 + var9.getCount() <= var9.getMaxStackSize()) {
-                           var9.grow(var10);
-                           var8 = var7.remove(var10);
-                           if (var8.isEmpty()) {
-                              var7.set(ItemStack.EMPTY);
-                           }
-
-                           var7.onTake(var4, var6.getCarried());
-                        }
+                     } else if (ItemStack.isSameItemSameTags(var8, var21)) {
+                        Optional var25 = var7.tryRemove(var8.getCount(), var21.getMaxStackSize() - var21.getCount(), var4);
+                        var25.ifPresent((var3x) -> {
+                           var21.grow(var3x.getCount());
+                           var7.onTake(var4, var3x);
+                        });
                      }
                   }
-
-                  var7.setChanged();
                }
+
+               var7.setChanged();
             }
-         } else if (var3 == ClickType.SWAP) {
-            var7 = (Slot)this.slots.get(var1);
-            var8 = var6.getItem(var2);
-            var9 = var7.getItem();
-            if (!var8.isEmpty() || !var9.isEmpty()) {
-               if (var8.isEmpty()) {
-                  if (var7.mayPickup(var4)) {
-                     var6.setItem(var2, var9);
-                     var7.onSwapCraft(var9.getCount());
-                     var7.set(ItemStack.EMPTY);
-                     var7.onTake(var4, var9);
-                  }
-               } else if (var9.isEmpty()) {
-                  if (var7.mayPlace(var8)) {
-                     var10 = var7.getMaxStackSize(var8);
-                     if (var8.getCount() > var10) {
-                        var7.set(var8.split(var10));
+         } else {
+            Slot var15;
+            int var20;
+            if (var3 == ClickType.SWAP) {
+               var15 = (Slot)this.slots.get(var1);
+               var16 = var5.getItem(var2);
+               var8 = var15.getItem();
+               if (!var16.isEmpty() || !var8.isEmpty()) {
+                  if (var16.isEmpty()) {
+                     if (var15.mayPickup(var4)) {
+                        var5.setItem(var2, var8);
+                        var15.onSwapCraft(var8.getCount());
+                        var15.set(ItemStack.EMPTY);
+                        var15.onTake(var4, var8);
+                     }
+                  } else if (var8.isEmpty()) {
+                     if (var15.mayPlace(var16)) {
+                        var20 = var15.getMaxStackSize(var16);
+                        if (var16.getCount() > var20) {
+                           var15.set(var16.split(var20));
+                        } else {
+                           var15.set(var16);
+                           var5.setItem(var2, ItemStack.EMPTY);
+                        }
+                     }
+                  } else if (var15.mayPickup(var4) && var15.mayPlace(var16)) {
+                     var20 = var15.getMaxStackSize(var16);
+                     if (var16.getCount() > var20) {
+                        var15.set(var16.split(var20));
+                        var15.onTake(var4, var8);
+                        if (!var5.add(var8)) {
+                           var4.drop(var8, true);
+                        }
                      } else {
-                        var7.set(var8);
-                        var6.setItem(var2, ItemStack.EMPTY);
+                        var15.set(var16);
+                        var5.setItem(var2, var8);
+                        var15.onTake(var4, var8);
                      }
                   }
-               } else if (var7.mayPickup(var4) && var7.mayPlace(var8)) {
-                  var10 = var7.getMaxStackSize(var8);
-                  if (var8.getCount() > var10) {
-                     var7.set(var8.split(var10));
-                     var7.onTake(var4, var9);
-                     if (!var6.add(var9)) {
-                        var4.drop(var9, true);
-                     }
-                  } else {
-                     var7.set(var8);
-                     var6.setItem(var2, var9);
-                     var7.onTake(var4, var9);
-                  }
                }
-            }
-         } else if (var3 == ClickType.CLONE && var4.abilities.instabuild && var6.getCarried().isEmpty() && var1 >= 0) {
-            var7 = (Slot)this.slots.get(var1);
-            if (var7 != null && var7.hasItem()) {
-               var8 = var7.getItem().copy();
-               var8.setCount(var8.getMaxStackSize());
-               var6.setCarried(var8);
-            }
-         } else if (var3 == ClickType.THROW && var6.getCarried().isEmpty() && var1 >= 0) {
-            var7 = (Slot)this.slots.get(var1);
-            if (var7 != null && var7.hasItem() && var7.mayPickup(var4)) {
-               var8 = var7.remove(var2 == 0 ? 1 : var7.getItem().getCount());
-               var7.onTake(var4, var8);
+            } else if (var3 == ClickType.CLONE && var4.getAbilities().instabuild && this.getCarried().isEmpty() && var1 >= 0) {
+               var15 = (Slot)this.slots.get(var1);
+               if (var15.hasItem()) {
+                  var16 = var15.getItem().copy();
+                  var16.setCount(var16.getMaxStackSize());
+                  this.setCarried(var16);
+               }
+            } else if (var3 == ClickType.THROW && this.getCarried().isEmpty() && var1 >= 0) {
+               var15 = (Slot)this.slots.get(var1);
+               var18 = var2 == 0 ? 1 : var15.getItem().getCount();
+               var8 = var15.safeTake(var18, Integer.MAX_VALUE, var4);
                var4.drop(var8, true);
-            }
-         } else if (var3 == ClickType.PICKUP_ALL && var1 >= 0) {
-            var7 = (Slot)this.slots.get(var1);
-            var8 = var6.getCarried();
-            if (!var8.isEmpty() && (var7 == null || !var7.hasItem() || !var7.mayPickup(var4))) {
-               var18 = var2 == 0 ? 0 : this.slots.size() - 1;
-               var10 = var2 == 0 ? 1 : -1;
+            } else if (var3 == ClickType.PICKUP_ALL && var1 >= 0) {
+               var15 = (Slot)this.slots.get(var1);
+               var16 = this.getCarried();
+               if (!var16.isEmpty() && (!var15.hasItem() || !var15.mayPickup(var4))) {
+                  var19 = var2 == 0 ? 0 : this.slots.size() - 1;
+                  var20 = var2 == 0 ? 1 : -1;
 
-               for(int var11 = 0; var11 < 2; ++var11) {
-                  for(int var12 = var18; var12 >= 0 && var12 < this.slots.size() && var8.getCount() < var8.getMaxStackSize(); var12 += var10) {
-                     Slot var13 = (Slot)this.slots.get(var12);
-                     if (var13.hasItem() && canItemQuickReplace(var13, var8, true) && var13.mayPickup(var4) && this.canTakeItemForPickAll(var8, var13)) {
-                        ItemStack var14 = var13.getItem();
-                        if (var11 != 0 || var14.getCount() != var14.getMaxStackSize()) {
-                           var15 = Math.min(var8.getMaxStackSize() - var8.getCount(), var14.getCount());
-                           ItemStack var16 = var13.remove(var15);
-                           var8.grow(var15);
-                           if (var16.isEmpty()) {
-                              var13.set(ItemStack.EMPTY);
+                  for(var22 = 0; var22 < 2; ++var22) {
+                     for(int var23 = var19; var23 >= 0 && var23 < this.slots.size() && var16.getCount() < var16.getMaxStackSize(); var23 += var20) {
+                        Slot var26 = (Slot)this.slots.get(var23);
+                        if (var26.hasItem() && canItemQuickReplace(var26, var16, true) && var26.mayPickup(var4) && this.canTakeItemForPickAll(var16, var26)) {
+                           ItemStack var27 = var26.getItem();
+                           if (var22 != 0 || var27.getCount() != var27.getMaxStackSize()) {
+                              ItemStack var28 = var26.safeTake(var27.getCount(), var16.getMaxStackSize() - var16.getCount(), var4);
+                              var16.grow(var28.getCount());
                            }
-
-                           var13.onTake(var4, var16);
                         }
                      }
                   }
                }
             }
-
-            this.broadcastChanges();
          }
       }
 
-      return var5;
    }
 
-   public static boolean consideredTheSameItem(ItemStack var0, ItemStack var1) {
-      return var0.getItem() == var1.getItem() && ItemStack.tagMatches(var0, var1);
+   private SlotAccess createCarriedSlotAccess() {
+      return new SlotAccess() {
+         public ItemStack get() {
+            return AbstractContainerMenu.this.getCarried();
+         }
+
+         public boolean set(ItemStack var1) {
+            AbstractContainerMenu.this.setCarried(var1);
+            return true;
+         }
+      };
    }
 
    public boolean canTakeItemForPickAll(ItemStack var1, Slot var2) {
       return true;
    }
 
    public void removed(Player var1) {
-      Inventory var2 = var1.inventory;
-      if (!var2.getCarried().isEmpty()) {
-         var1.drop(var2.getCarried(), false);
-         var2.setCarried(ItemStack.EMPTY);
+      if (!this.getCarried().isEmpty()) {
+         var1.drop(this.getCarried(), false);
+         this.setCarried(ItemStack.EMPTY);
       }
 
    }
 
-   protected void clearContainer(Player var1, Level var2, Container var3) {
-      int var4;
+   protected void clearContainer(Player var1, Container var2) {
+      int var3;
       if (!var1.isAlive() || var1 instanceof ServerPlayer && ((ServerPlayer)var1).hasDisconnected()) {
-         for(var4 = 0; var4 < var3.getContainerSize(); ++var4) {
-            var1.drop(var3.removeItemNoUpdate(var4), false);
+         for(var3 = 0; var3 < var2.getContainerSize(); ++var3) {
+            var1.drop(var2.removeItemNoUpdate(var3), false);
          }
 
       } else {
-         for(var4 = 0; var4 < var3.getContainerSize(); ++var4) {
-            var1.inventory.placeItemBackInInventory(var2, var3.removeItemNoUpdate(var4));
+         for(var3 = 0; var3 < var2.getContainerSize(); ++var3) {
+            Inventory var4 = var1.getInventory();
+            if (var4.player instanceof ServerPlayer) {
+               var4.placeItemBackInInventory(var2.removeItemNoUpdate(var3));
+            }
          }
 
       }
    }
 
@@ -481,28 +576,10 @@
 
    public void setData(int var1, int var2) {
       ((DataSlot)this.dataSlots.get(var1)).set(var2);
    }
 
-   public short backup(Inventory var1) {
-      ++this.changeUid;
-      return this.changeUid;
-   }
-
-   public boolean isSynched(Player var1) {
-      return !this.unSynchedPlayers.contains(var1);
-   }
-
-   public void setSynched(Player var1, boolean var2) {
-      if (var2) {
-         this.unSynchedPlayers.remove(var1);
-      } else {
-         this.unSynchedPlayers.add(var1);
-      }
-
-   }
-
    public abstract boolean stillValid(Player var1);
 
    protected boolean moveItemStackTo(ItemStack var1, int var2, int var3, boolean var4) {
       boolean var5 = false;
       int var6 = var2;
@@ -522,11 +599,11 @@
                break;
             }
 
             var7 = (Slot)this.slots.get(var6);
             var8 = var7.getItem();
-            if (!var8.isEmpty() && consideredTheSameItem(var1, var8)) {
+            if (!var8.isEmpty() && ItemStack.isSameItemSameTags(var1, var8)) {
                int var9 = var8.getCount() + var1.getCount();
                if (var9 <= var1.getMaxStackSize()) {
                   var1.setCount(0);
                   var8.setCount(var9);
                   var7.setChanged();
@@ -604,22 +681,22 @@
       if (var0 == 0) {
          return true;
       } else if (var0 == 1) {
          return true;
       } else {
-         return var0 == 2 && var1.abilities.instabuild;
+         return var0 == 2 && var1.getAbilities().instabuild;
       }
    }
 
    protected void resetQuickCraft() {
       this.quickcraftStatus = 0;
       this.quickcraftSlots.clear();
    }
 
    public static boolean canItemQuickReplace(@Nullable Slot var0, ItemStack var1, boolean var2) {
       boolean var3 = var0 == null || !var0.hasItem();
-      if (!var3 && var1.sameItem(var0.getItem()) && ItemStack.tagMatches(var0.getItem(), var1)) {
+      if (!var3 && ItemStack.isSameItemSameTags(var1, var0.getItem())) {
          return var0.getItem().getCount() + (var2 ? 0 : var1.getCount()) <= var1.getMaxStackSize();
       } else {
          return var3;
       }
    }
@@ -664,6 +741,42 @@
 
          var2 /= (float)var0.getContainerSize();
          return Mth.floor(var2 * 14.0F) + (var1 > 0 ? 1 : 0);
       }
    }
+
+   public void setCarried(ItemStack var1) {
+      this.carried = var1;
+   }
+
+   public ItemStack getCarried() {
+      return this.carried;
+   }
+
+   public void suppressRemoteUpdates() {
+      this.suppressRemoteUpdates = true;
+   }
+
+   public void resumeRemoteUpdates() {
+      this.suppressRemoteUpdates = false;
+   }
+
+   public void transferState(AbstractContainerMenu var1) {
+      HashBasedTable var2 = HashBasedTable.create();
+
+      int var3;
+      Slot var4;
+      for(var3 = 0; var3 < var1.slots.size(); ++var3) {
+         var4 = (Slot)var1.slots.get(var3);
+         var2.put(var4.container, var4.getContainerSlot(), var3);
+      }
+
+      for(var3 = 0; var3 < this.slots.size(); ++var3) {
+         var4 = (Slot)this.slots.get(var3);
+         Integer var5 = (Integer)var2.get(var4.container, var4.getContainerSlot());
+         if (var5 != null) {
+            this.remoteSlots.set(var3, var1.remoteSlots.get(var5));
+         }
+      }
+
+   }
 }
