--- net/minecraft/world/inventory/GrindstoneMenu.java
+++ net/minecraft/world/inventory/GrindstoneMenu.java
@@ -2,10 +2,11 @@
 
 import java.util.Iterator;
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.stream.Collectors;
+import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.Container;
 import net.minecraft.world.SimpleContainer;
 import net.minecraft.world.entity.ExperienceOrb;
 import net.minecraft.world.entity.player.Inventory;
 import net.minecraft.world.entity.player.Player;
@@ -14,12 +15,21 @@
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.enchantment.Enchantment;
 import net.minecraft.world.item.enchantment.EnchantmentHelper;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.phys.Vec3;
 
 public class GrindstoneMenu extends AbstractContainerMenu {
+   public static final int MAX_NAME_LENGTH = 35;
+   public static final int INPUT_SLOT = 0;
+   public static final int ADDITIONAL_SLOT = 1;
+   public static final int RESULT_SLOT = 2;
+   private static final int INV_SLOT_START = 3;
+   private static final int INV_SLOT_END = 30;
+   private static final int USE_ROW_SLOT_START = 30;
+   private static final int USE_ROW_SLOT_END = 39;
    private final Container resultSlots;
    private final Container repairSlots;
    private final ContainerLevelAccess access;
 
    public GrindstoneMenu(int var1, Inventory var2) {
@@ -36,38 +46,33 @@
          }
       };
       this.access = var3;
       this.addSlot(new Slot(this.repairSlots, 0, 49, 19) {
          public boolean mayPlace(ItemStack var1) {
-            return var1.isDamageableItem() || var1.getItem() == Items.ENCHANTED_BOOK || var1.isEnchanted();
+            return var1.isDamageableItem() || var1.is(Items.ENCHANTED_BOOK) || var1.isEnchanted();
          }
       });
       this.addSlot(new Slot(this.repairSlots, 1, 49, 40) {
          public boolean mayPlace(ItemStack var1) {
-            return var1.isDamageableItem() || var1.getItem() == Items.ENCHANTED_BOOK || var1.isEnchanted();
+            return var1.isDamageableItem() || var1.is(Items.ENCHANTED_BOOK) || var1.isEnchanted();
          }
       });
       this.addSlot(new Slot(this.resultSlots, 2, 129, 34) {
          public boolean mayPlace(ItemStack var1) {
             return false;
          }
 
-         public ItemStack onTake(Player var1, ItemStack var2) {
+         public void onTake(Player var1, ItemStack var2) {
             var3.execute((var1x, var2x) -> {
-               int var3x = this.getExperienceAmount(var1x);
-
-               while(var3x > 0) {
-                  int var4 = ExperienceOrb.getExperienceValue(var3x);
-                  var3x -= var4;
-                  var1x.addFreshEntity(new ExperienceOrb(var1x, (double)var2x.getX(), (double)var2x.getY() + 0.5D, (double)var2x.getZ() + 0.5D, var4));
+               if (var1x instanceof ServerLevel) {
+                  ExperienceOrb.award((ServerLevel)var1x, Vec3.atCenterOf(var2x), this.getExperienceAmount(var1x));
                }
 
                var1x.levelEvent(1042, var2x, 0);
             });
             GrindstoneMenu.this.repairSlots.setItem(0, ItemStack.EMPTY);
             GrindstoneMenu.this.repairSlots.setItem(1, ItemStack.EMPTY);
-            return var2;
          }
 
          private int getExperienceAmount(Level var1) {
             byte var2 = 0;
             int var4 = var2 + this.getExperienceFromItem(GrindstoneMenu.this.repairSlots.getItem(0));
@@ -125,22 +130,22 @@
       boolean var3 = !var1.isEmpty() || !var2.isEmpty();
       boolean var4 = !var1.isEmpty() && !var2.isEmpty();
       if (!var3) {
          this.resultSlots.setItem(0, ItemStack.EMPTY);
       } else {
-         boolean var5 = !var1.isEmpty() && var1.getItem() != Items.ENCHANTED_BOOK && !var1.isEnchanted() || !var2.isEmpty() && var2.getItem() != Items.ENCHANTED_BOOK && !var2.isEnchanted();
+         boolean var5 = !var1.isEmpty() && !var1.is(Items.ENCHANTED_BOOK) && !var1.isEnchanted() || !var2.isEmpty() && !var2.is(Items.ENCHANTED_BOOK) && !var2.isEnchanted();
          if (var1.getCount() > 1 || var2.getCount() > 1 || !var4 && var5) {
             this.resultSlots.setItem(0, ItemStack.EMPTY);
             this.broadcastChanges();
             return;
          }
 
          byte var7 = 1;
          int var6;
          ItemStack var8;
          if (var4) {
-            if (var1.getItem() != var2.getItem()) {
+            if (!var1.is(var2.getItem())) {
                this.resultSlots.setItem(0, ItemStack.EMPTY);
                this.broadcastChanges();
                return;
             }
 
@@ -206,11 +211,11 @@
       Map var5 = (Map)EnchantmentHelper.getEnchantments(var1).entrySet().stream().filter((var0) -> {
          return ((Enchantment)var0.getKey()).isCurse();
       }).collect(Collectors.toMap(Entry::getKey, Entry::getValue));
       EnchantmentHelper.setEnchantments(var5, var4);
       var4.setRepairCost(0);
-      if (var4.getItem() == Items.ENCHANTED_BOOK && var5.size() == 0) {
+      if (var4.is(Items.ENCHANTED_BOOK) && var5.size() == 0) {
          var4 = new ItemStack(Items.BOOK);
          if (var1.hasCustomHoverName()) {
             var4.setHoverName(var1.getHoverName());
          }
       }
@@ -223,11 +228,11 @@
    }
 
    public void removed(Player var1) {
       super.removed(var1);
       this.access.execute((var2, var3) -> {
-         this.clearContainer(var1, var2, this.repairSlots);
+         this.clearContainer(var1, this.repairSlots);
       });
    }
 
    public boolean stillValid(Player var1) {
       return stillValid(this.access, var1, Blocks.GRINDSTONE);
