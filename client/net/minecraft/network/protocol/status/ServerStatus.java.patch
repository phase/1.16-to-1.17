--- net/minecraft/network/protocol/status/ServerStatus.java
+++ net/minecraft/network/protocol/status/ServerStatus.java
@@ -13,10 +13,12 @@
 import java.util.UUID;
 import net.minecraft.network.chat.Component;
 import net.minecraft.util.GsonHelper;
 
 public class ServerStatus {
+   public static final int FAVICON_WIDTH = 64;
+   public static final int FAVICON_HEIGHT = 64;
    private Component description;
    private ServerStatus.Players players;
    private ServerStatus.Version version;
    private String favicon;
 
@@ -53,93 +55,10 @@
 
    public String getFavicon() {
       return this.favicon;
    }
 
-   public static class Serializer implements JsonDeserializer<ServerStatus>, JsonSerializer<ServerStatus> {
-      public Serializer() {
-      }
-
-      public ServerStatus deserialize(JsonElement var1, Type var2, JsonDeserializationContext var3) throws JsonParseException {
-         JsonObject var4 = GsonHelper.convertToJsonObject(var1, "status");
-         ServerStatus var5 = new ServerStatus();
-         if (var4.has("description")) {
-            var5.setDescription((Component)var3.deserialize(var4.get("description"), Component.class));
-         }
-
-         if (var4.has("players")) {
-            var5.setPlayers((ServerStatus.Players)var3.deserialize(var4.get("players"), ServerStatus.Players.class));
-         }
-
-         if (var4.has("version")) {
-            var5.setVersion((ServerStatus.Version)var3.deserialize(var4.get("version"), ServerStatus.Version.class));
-         }
-
-         if (var4.has("favicon")) {
-            var5.setFavicon(GsonHelper.getAsString(var4, "favicon"));
-         }
-
-         return var5;
-      }
-
-      public JsonElement serialize(ServerStatus var1, Type var2, JsonSerializationContext var3) {
-         JsonObject var4 = new JsonObject();
-         if (var1.getDescription() != null) {
-            var4.add("description", var3.serialize(var1.getDescription()));
-         }
-
-         if (var1.getPlayers() != null) {
-            var4.add("players", var3.serialize(var1.getPlayers()));
-         }
-
-         if (var1.getVersion() != null) {
-            var4.add("version", var3.serialize(var1.getVersion()));
-         }
-
-         if (var1.getFavicon() != null) {
-            var4.addProperty("favicon", var1.getFavicon());
-         }
-
-         return var4;
-      }
-   }
-
-   public static class Version {
-      private final String name;
-      private final int protocol;
-
-      public Version(String var1, int var2) {
-         this.name = var1;
-         this.protocol = var2;
-      }
-
-      public String getName() {
-         return this.name;
-      }
-
-      public int getProtocol() {
-         return this.protocol;
-      }
-
-      public static class Serializer implements JsonDeserializer<ServerStatus.Version>, JsonSerializer<ServerStatus.Version> {
-         public Serializer() {
-         }
-
-         public ServerStatus.Version deserialize(JsonElement var1, Type var2, JsonDeserializationContext var3) throws JsonParseException {
-            JsonObject var4 = GsonHelper.convertToJsonObject(var1, "version");
-            return new ServerStatus.Version(GsonHelper.getAsString(var4, "name"), GsonHelper.getAsInt(var4, "protocol"));
-         }
-
-         public JsonElement serialize(ServerStatus.Version var1, Type var2, JsonSerializationContext var3) {
-            JsonObject var4 = new JsonObject();
-            var4.addProperty("name", var1.getName());
-            var4.addProperty("protocol", var1.getProtocol());
-            return var4;
-         }
-      }
-   }
-
    public static class Players {
       private final int maxPlayers;
       private final int numPlayers;
       private GameProfile[] sample;
 
@@ -209,6 +128,89 @@
 
             return var4;
          }
       }
    }
+
+   public static class Version {
+      private final String name;
+      private final int protocol;
+
+      public Version(String var1, int var2) {
+         this.name = var1;
+         this.protocol = var2;
+      }
+
+      public String getName() {
+         return this.name;
+      }
+
+      public int getProtocol() {
+         return this.protocol;
+      }
+
+      public static class Serializer implements JsonDeserializer<ServerStatus.Version>, JsonSerializer<ServerStatus.Version> {
+         public Serializer() {
+         }
+
+         public ServerStatus.Version deserialize(JsonElement var1, Type var2, JsonDeserializationContext var3) throws JsonParseException {
+            JsonObject var4 = GsonHelper.convertToJsonObject(var1, "version");
+            return new ServerStatus.Version(GsonHelper.getAsString(var4, "name"), GsonHelper.getAsInt(var4, "protocol"));
+         }
+
+         public JsonElement serialize(ServerStatus.Version var1, Type var2, JsonSerializationContext var3) {
+            JsonObject var4 = new JsonObject();
+            var4.addProperty("name", var1.getName());
+            var4.addProperty("protocol", var1.getProtocol());
+            return var4;
+         }
+      }
+   }
+
+   public static class Serializer implements JsonDeserializer<ServerStatus>, JsonSerializer<ServerStatus> {
+      public Serializer() {
+      }
+
+      public ServerStatus deserialize(JsonElement var1, Type var2, JsonDeserializationContext var3) throws JsonParseException {
+         JsonObject var4 = GsonHelper.convertToJsonObject(var1, "status");
+         ServerStatus var5 = new ServerStatus();
+         if (var4.has("description")) {
+            var5.setDescription((Component)var3.deserialize(var4.get("description"), Component.class));
+         }
+
+         if (var4.has("players")) {
+            var5.setPlayers((ServerStatus.Players)var3.deserialize(var4.get("players"), ServerStatus.Players.class));
+         }
+
+         if (var4.has("version")) {
+            var5.setVersion((ServerStatus.Version)var3.deserialize(var4.get("version"), ServerStatus.Version.class));
+         }
+
+         if (var4.has("favicon")) {
+            var5.setFavicon(GsonHelper.getAsString(var4, "favicon"));
+         }
+
+         return var5;
+      }
+
+      public JsonElement serialize(ServerStatus var1, Type var2, JsonSerializationContext var3) {
+         JsonObject var4 = new JsonObject();
+         if (var1.getDescription() != null) {
+            var4.add("description", var3.serialize(var1.getDescription()));
+         }
+
+         if (var1.getPlayers() != null) {
+            var4.add("players", var3.serialize(var1.getPlayers()));
+         }
+
+         if (var1.getVersion() != null) {
+            var4.add("version", var3.serialize(var1.getVersion()));
+         }
+
+         if (var1.getFavicon() != null) {
+            var4.addProperty("favicon", var1.getFavicon());
+         }
+
+         return var4;
+      }
+   }
 }
