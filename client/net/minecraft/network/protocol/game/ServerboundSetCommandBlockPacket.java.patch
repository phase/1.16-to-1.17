--- net/minecraft/network/protocol/game/ServerboundSetCommandBlockPacket.java
+++ net/minecraft/network/protocol/game/ServerboundSetCommandBlockPacket.java
@@ -1,44 +1,43 @@
 package net.minecraft.network.protocol.game;
 
-import java.io.IOException;
 import net.minecraft.core.BlockPos;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.world.level.block.entity.CommandBlockEntity;
 
 public class ServerboundSetCommandBlockPacket implements Packet<ServerGamePacketListener> {
-   private BlockPos pos;
-   private String command;
-   private boolean trackOutput;
-   private boolean conditional;
-   private boolean automatic;
-   private CommandBlockEntity.Mode mode;
+   private static final int FLAG_TRACK_OUTPUT = 1;
+   private static final int FLAG_CONDITIONAL = 2;
+   private static final int FLAG_AUTOMATIC = 4;
+   private final BlockPos pos;
+   private final String command;
+   private final boolean trackOutput;
+   private final boolean conditional;
+   private final boolean automatic;
+   private final CommandBlockEntity.Mode mode;
 
-   public ServerboundSetCommandBlockPacket() {
-   }
-
    public ServerboundSetCommandBlockPacket(BlockPos var1, String var2, CommandBlockEntity.Mode var3, boolean var4, boolean var5, boolean var6) {
       this.pos = var1;
       this.command = var2;
       this.trackOutput = var4;
       this.conditional = var5;
       this.automatic = var6;
       this.mode = var3;
    }
 
-   public void read(FriendlyByteBuf var1) throws IOException {
+   public ServerboundSetCommandBlockPacket(FriendlyByteBuf var1) {
       this.pos = var1.readBlockPos();
-      this.command = var1.readUtf(32767);
+      this.command = var1.readUtf();
       this.mode = (CommandBlockEntity.Mode)var1.readEnum(CommandBlockEntity.Mode.class);
       byte var2 = var1.readByte();
       this.trackOutput = (var2 & 1) != 0;
       this.conditional = (var2 & 2) != 0;
       this.automatic = (var2 & 4) != 0;
    }
 
-   public void write(FriendlyByteBuf var1) throws IOException {
+   public void write(FriendlyByteBuf var1) {
       var1.writeBlockPos(this.pos);
       var1.writeUtf(this.command);
       var1.writeEnum(this.mode);
       int var2 = 0;
       if (this.trackOutput) {
