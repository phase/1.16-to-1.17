--- net/minecraft/network/protocol/game/ClientboundUpdateMobEffectPacket.java
+++ net/minecraft/network/protocol/game/ClientboundUpdateMobEffectPacket.java
@@ -1,57 +1,57 @@
 package net.minecraft.network.protocol.game;
 
-import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.world.effect.MobEffect;
 import net.minecraft.world.effect.MobEffectInstance;
 
 public class ClientboundUpdateMobEffectPacket implements Packet<ClientGamePacketListener> {
-   private int entityId;
-   private byte effectId;
-   private byte effectAmplifier;
-   private int effectDurationTicks;
-   private byte flags;
+   private static final int FLAG_AMBIENT = 1;
+   private static final int FLAG_VISIBLE = 2;
+   private static final int FLAG_SHOW_ICON = 4;
+   private final int entityId;
+   private final byte effectId;
+   private final byte effectAmplifier;
+   private final int effectDurationTicks;
+   private final byte flags;
 
-   public ClientboundUpdateMobEffectPacket() {
-   }
-
    public ClientboundUpdateMobEffectPacket(int var1, MobEffectInstance var2) {
       this.entityId = var1;
       this.effectId = (byte)(MobEffect.getId(var2.getEffect()) & 255);
       this.effectAmplifier = (byte)(var2.getAmplifier() & 255);
       if (var2.getDuration() > 32767) {
          this.effectDurationTicks = 32767;
       } else {
          this.effectDurationTicks = var2.getDuration();
       }
 
-      this.flags = 0;
+      byte var3 = 0;
       if (var2.isAmbient()) {
-         this.flags = (byte)(this.flags | 1);
+         var3 = (byte)(var3 | 1);
       }
 
       if (var2.isVisible()) {
-         this.flags = (byte)(this.flags | 2);
+         var3 = (byte)(var3 | 2);
       }
 
       if (var2.showIcon()) {
-         this.flags = (byte)(this.flags | 4);
+         var3 = (byte)(var3 | 4);
       }
 
+      this.flags = var3;
    }
 
-   public void read(FriendlyByteBuf var1) throws IOException {
+   public ClientboundUpdateMobEffectPacket(FriendlyByteBuf var1) {
       this.entityId = var1.readVarInt();
       this.effectId = var1.readByte();
       this.effectAmplifier = var1.readByte();
       this.effectDurationTicks = var1.readVarInt();
       this.flags = var1.readByte();
    }
 
-   public void write(FriendlyByteBuf var1) throws IOException {
+   public void write(FriendlyByteBuf var1) {
       var1.writeVarInt(this.entityId);
       var1.writeByte(this.effectId);
       var1.writeByte(this.effectAmplifier);
       var1.writeVarInt(this.effectDurationTicks);
       var1.writeByte(this.flags);
