--- net/minecraft/network/protocol/game/ClientboundUpdateRecipesPacket.java
+++ net/minecraft/network/protocol/game/ClientboundUpdateRecipesPacket.java
@@ -1,52 +1,34 @@
 package net.minecraft.network.protocol.game;
 
 import com.google.common.collect.Lists;
-import java.io.IOException;
 import java.util.Collection;
-import java.util.Iterator;
 import java.util.List;
 import net.minecraft.core.Registry;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.item.crafting.Recipe;
 import net.minecraft.world.item.crafting.RecipeSerializer;
 
 public class ClientboundUpdateRecipesPacket implements Packet<ClientGamePacketListener> {
-   private List<Recipe<?>> recipes;
+   private final List<Recipe<?>> recipes;
 
-   public ClientboundUpdateRecipesPacket() {
-   }
-
    public ClientboundUpdateRecipesPacket(Collection<Recipe<?>> var1) {
       this.recipes = Lists.newArrayList(var1);
    }
 
-   public void handle(ClientGamePacketListener var1) {
-      var1.handleUpdateRecipes(this);
+   public ClientboundUpdateRecipesPacket(FriendlyByteBuf var1) {
+      this.recipes = var1.readList(ClientboundUpdateRecipesPacket::fromNetwork);
    }
 
-   public void read(FriendlyByteBuf var1) throws IOException {
-      this.recipes = Lists.newArrayList();
-      int var2 = var1.readVarInt();
-
-      for(int var3 = 0; var3 < var2; ++var3) {
-         this.recipes.add(fromNetwork(var1));
-      }
-
+   public void write(FriendlyByteBuf var1) {
+      var1.writeCollection(this.recipes, ClientboundUpdateRecipesPacket::toNetwork);
    }
 
-   public void write(FriendlyByteBuf var1) throws IOException {
-      var1.writeVarInt(this.recipes.size());
-      Iterator var2 = this.recipes.iterator();
-
-      while(var2.hasNext()) {
-         Recipe var3 = (Recipe)var2.next();
-         toNetwork(var3, var1);
-      }
-
+   public void handle(ClientGamePacketListener var1) {
+      var1.handleUpdateRecipes(this);
    }
 
    public List<Recipe<?>> getRecipes() {
       return this.recipes;
    }
@@ -57,11 +39,11 @@
       return ((RecipeSerializer)Registry.RECIPE_SERIALIZER.getOptional(var1).orElseThrow(() -> {
          return new IllegalArgumentException("Unknown recipe serializer " + var1);
       })).fromNetwork(var2, var0);
    }
 
-   public static <T extends Recipe<?>> void toNetwork(T var0, FriendlyByteBuf var1) {
-      var1.writeResourceLocation(Registry.RECIPE_SERIALIZER.getKey(var0.getSerializer()));
-      var1.writeResourceLocation(var0.getId());
-      var0.getSerializer().toNetwork(var1, var0);
+   public static <T extends Recipe<?>> void toNetwork(FriendlyByteBuf var0, T var1) {
+      var0.writeResourceLocation(Registry.RECIPE_SERIALIZER.getKey(var1.getSerializer()));
+      var0.writeResourceLocation(var1.getId());
+      var1.getSerializer().toNetwork(var0, var1);
    }
 }
