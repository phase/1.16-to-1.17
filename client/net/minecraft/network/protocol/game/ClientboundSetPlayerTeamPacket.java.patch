--- net/minecraft/network/protocol/game/ClientboundSetPlayerTeamPacket.java
+++ net/minecraft/network/protocol/game/ClientboundSetPlayerTeamPacket.java
@@ -1,173 +1,196 @@
 package net.minecraft.network.protocol.game;
 
-import com.google.common.collect.Lists;
-import java.io.IOException;
+import com.google.common.collect.ImmutableList;
 import java.util.Collection;
-import java.util.Iterator;
+import java.util.Optional;
+import javax.annotation.Nullable;
 import net.minecraft.ChatFormatting;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.chat.Component;
-import net.minecraft.network.chat.TextComponent;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.world.scores.PlayerTeam;
-import net.minecraft.world.scores.Team;
 
 public class ClientboundSetPlayerTeamPacket implements Packet<ClientGamePacketListener> {
-   private String name = "";
-   private Component displayName;
-   private Component playerPrefix;
-   private Component playerSuffix;
-   private String nametagVisibility;
-   private String collisionRule;
-   private ChatFormatting color;
+   private final int method;
+   private final String name;
    private final Collection<String> players;
-   private int method;
-   private int options;
+   private final Optional<ClientboundSetPlayerTeamPacket.Parameters> parameters;
 
-   public ClientboundSetPlayerTeamPacket() {
-      this.displayName = TextComponent.EMPTY;
-      this.playerPrefix = TextComponent.EMPTY;
-      this.playerSuffix = TextComponent.EMPTY;
-      this.nametagVisibility = Team.Visibility.ALWAYS.name;
-      this.collisionRule = Team.CollisionRule.ALWAYS.name;
-      this.color = ChatFormatting.RESET;
-      this.players = Lists.newArrayList();
+   private ClientboundSetPlayerTeamPacket(String var1, int var2, Optional<ClientboundSetPlayerTeamPacket.Parameters> var3, Collection<String> var4) {
+      this.name = var1;
+      this.method = var2;
+      this.parameters = var3;
+      this.players = ImmutableList.copyOf(var4);
    }
 
-   public ClientboundSetPlayerTeamPacket(PlayerTeam var1, int var2) {
-      this.displayName = TextComponent.EMPTY;
-      this.playerPrefix = TextComponent.EMPTY;
-      this.playerSuffix = TextComponent.EMPTY;
-      this.nametagVisibility = Team.Visibility.ALWAYS.name;
-      this.collisionRule = Team.CollisionRule.ALWAYS.name;
-      this.color = ChatFormatting.RESET;
-      this.players = Lists.newArrayList();
-      this.name = var1.getName();
-      this.method = var2;
-      if (var2 == 0 || var2 == 2) {
-         this.displayName = var1.getDisplayName();
-         this.options = var1.packOptions();
-         this.nametagVisibility = var1.getNameTagVisibility().name;
-         this.collisionRule = var1.getCollisionRule().name;
-         this.color = var1.getColor();
-         this.playerPrefix = var1.getPlayerPrefix();
-         this.playerSuffix = var1.getPlayerSuffix();
-      }
+   public static ClientboundSetPlayerTeamPacket createAddOrModifyPacket(PlayerTeam var0, boolean var1) {
+      return new ClientboundSetPlayerTeamPacket(var0.getName(), var1 ? 0 : 2, Optional.of(new ClientboundSetPlayerTeamPacket.Parameters(var0)), (Collection)(var1 ? var0.getPlayers() : ImmutableList.of()));
+   }
 
-      if (var2 == 0) {
-         this.players.addAll(var1.getPlayers());
-      }
-
+   public static ClientboundSetPlayerTeamPacket createRemovePacket(PlayerTeam var0) {
+      return new ClientboundSetPlayerTeamPacket(var0.getName(), 1, Optional.empty(), ImmutableList.of());
    }
 
-   public ClientboundSetPlayerTeamPacket(PlayerTeam var1, Collection<String> var2, int var3) {
-      this.displayName = TextComponent.EMPTY;
-      this.playerPrefix = TextComponent.EMPTY;
-      this.playerSuffix = TextComponent.EMPTY;
-      this.nametagVisibility = Team.Visibility.ALWAYS.name;
-      this.collisionRule = Team.CollisionRule.ALWAYS.name;
-      this.color = ChatFormatting.RESET;
-      this.players = Lists.newArrayList();
-      if (var3 != 3 && var3 != 4) {
-         throw new IllegalArgumentException("Method must be join or leave for player constructor");
-      } else if (var2 != null && !var2.isEmpty()) {
-         this.method = var3;
-         this.name = var1.getName();
-         this.players.addAll(var2);
-      } else {
-         throw new IllegalArgumentException("Players cannot be null/empty");
-      }
+   public static ClientboundSetPlayerTeamPacket createPlayerPacket(PlayerTeam var0, String var1, ClientboundSetPlayerTeamPacket.Action var2) {
+      return new ClientboundSetPlayerTeamPacket(var0.getName(), var2 == ClientboundSetPlayerTeamPacket.Action.ADD ? 3 : 1, Optional.empty(), ImmutableList.of(var1));
    }
 
-   public void read(FriendlyByteBuf var1) throws IOException {
+   public ClientboundSetPlayerTeamPacket(FriendlyByteBuf var1) {
       this.name = var1.readUtf(16);
       this.method = var1.readByte();
-      if (this.method == 0 || this.method == 2) {
-         this.displayName = var1.readComponent();
-         this.options = var1.readByte();
-         this.nametagVisibility = var1.readUtf(40);
-         this.collisionRule = var1.readUtf(40);
-         this.color = (ChatFormatting)var1.readEnum(ChatFormatting.class);
-         this.playerPrefix = var1.readComponent();
-         this.playerSuffix = var1.readComponent();
+      if (shouldHaveParameters(this.method)) {
+         this.parameters = Optional.of(new ClientboundSetPlayerTeamPacket.Parameters(var1));
+      } else {
+         this.parameters = Optional.empty();
       }
 
-      if (this.method == 0 || this.method == 3 || this.method == 4) {
-         int var2 = var1.readVarInt();
-
-         for(int var3 = 0; var3 < var2; ++var3) {
-            this.players.add(var1.readUtf(40));
-         }
+      if (shouldHavePlayerList(this.method)) {
+         this.players = var1.readList(FriendlyByteBuf::readUtf);
+      } else {
+         this.players = ImmutableList.of();
       }
 
    }
 
-   public void write(FriendlyByteBuf var1) throws IOException {
+   public void write(FriendlyByteBuf var1) {
       var1.writeUtf(this.name);
       var1.writeByte(this.method);
-      if (this.method == 0 || this.method == 2) {
-         var1.writeComponent(this.displayName);
-         var1.writeByte(this.options);
-         var1.writeUtf(this.nametagVisibility);
-         var1.writeUtf(this.collisionRule);
-         var1.writeEnum(this.color);
-         var1.writeComponent(this.playerPrefix);
-         var1.writeComponent(this.playerSuffix);
+      if (shouldHaveParameters(this.method)) {
+         ((ClientboundSetPlayerTeamPacket.Parameters)this.parameters.orElseThrow(() -> {
+            return new IllegalStateException("Parameters not present, but method is" + this.method);
+         })).write(var1);
       }
 
-      if (this.method == 0 || this.method == 3 || this.method == 4) {
-         var1.writeVarInt(this.players.size());
-         Iterator var2 = this.players.iterator();
+      if (shouldHavePlayerList(this.method)) {
+         var1.writeCollection(this.players, FriendlyByteBuf::writeUtf);
+      }
 
-         while(var2.hasNext()) {
-            String var3 = (String)var2.next();
-            var1.writeUtf(var3);
-         }
+   }
+
+   private static boolean shouldHavePlayerList(int var0) {
+      return var0 == 0 || var0 == 3 || var0 == 4;
+   }
+
+   private static boolean shouldHaveParameters(int var0) {
+      return var0 == 0 || var0 == 2;
+   }
+
+   @Nullable
+   public ClientboundSetPlayerTeamPacket.Action getPlayerAction() {
+      switch(this.method) {
+      case 0:
+      case 3:
+         return ClientboundSetPlayerTeamPacket.Action.ADD;
+      case 1:
+      case 2:
+      default:
+         return null;
+      case 4:
+         return ClientboundSetPlayerTeamPacket.Action.REMOVE;
       }
+   }
 
+   @Nullable
+   public ClientboundSetPlayerTeamPacket.Action getTeamAction() {
+      switch(this.method) {
+      case 0:
+         return ClientboundSetPlayerTeamPacket.Action.ADD;
+      case 1:
+         return ClientboundSetPlayerTeamPacket.Action.REMOVE;
+      default:
+         return null;
+      }
    }
 
    public void handle(ClientGamePacketListener var1) {
       var1.handleSetPlayerTeamPacket(this);
    }
 
    public String getName() {
       return this.name;
    }
 
-   public Component getDisplayName() {
-      return this.displayName;
-   }
-
    public Collection<String> getPlayers() {
       return this.players;
    }
 
-   public int getMethod() {
-      return this.method;
+   public Optional<ClientboundSetPlayerTeamPacket.Parameters> getParameters() {
+      return this.parameters;
    }
 
-   public int getOptions() {
-      return this.options;
-   }
+   public static class Parameters {
+      private final Component displayName;
+      private final Component playerPrefix;
+      private final Component playerSuffix;
+      private final String nametagVisibility;
+      private final String collisionRule;
+      private final ChatFormatting color;
+      private final int options;
 
-   public ChatFormatting getColor() {
-      return this.color;
-   }
+      public Parameters(PlayerTeam var1) {
+         this.displayName = var1.getDisplayName();
+         this.options = var1.packOptions();
+         this.nametagVisibility = var1.getNameTagVisibility().name;
+         this.collisionRule = var1.getCollisionRule().name;
+         this.color = var1.getColor();
+         this.playerPrefix = var1.getPlayerPrefix();
+         this.playerSuffix = var1.getPlayerSuffix();
+      }
 
-   public String getNametagVisibility() {
-      return this.nametagVisibility;
-   }
+      public Parameters(FriendlyByteBuf var1) {
+         this.displayName = var1.readComponent();
+         this.options = var1.readByte();
+         this.nametagVisibility = var1.readUtf(40);
+         this.collisionRule = var1.readUtf(40);
+         this.color = (ChatFormatting)var1.readEnum(ChatFormatting.class);
+         this.playerPrefix = var1.readComponent();
+         this.playerSuffix = var1.readComponent();
+      }
 
-   public String getCollisionRule() {
-      return this.collisionRule;
-   }
+      public Component getDisplayName() {
+         return this.displayName;
+      }
 
-   public Component getPlayerPrefix() {
-      return this.playerPrefix;
+      public int getOptions() {
+         return this.options;
+      }
+
+      public ChatFormatting getColor() {
+         return this.color;
+      }
+
+      public String getNametagVisibility() {
+         return this.nametagVisibility;
+      }
+
+      public String getCollisionRule() {
+         return this.collisionRule;
+      }
+
+      public Component getPlayerPrefix() {
+         return this.playerPrefix;
+      }
+
+      public Component getPlayerSuffix() {
+         return this.playerSuffix;
+      }
+
+      public void write(FriendlyByteBuf var1) {
+         var1.writeComponent(this.displayName);
+         var1.writeByte(this.options);
+         var1.writeUtf(this.nametagVisibility);
+         var1.writeUtf(this.collisionRule);
+         var1.writeEnum(this.color);
+         var1.writeComponent(this.playerPrefix);
+         var1.writeComponent(this.playerSuffix);
+      }
    }
 
-   public Component getPlayerSuffix() {
-      return this.playerSuffix;
+   public static enum Action {
+      ADD,
+      REMOVE;
+
+      private Action() {
+      }
    }
 }
