--- net/minecraft/network/protocol/game/ClientboundLightUpdatePacket.java
+++ net/minecraft/network/protocol/game/ClientboundLightUpdatePacket.java
@@ -1,152 +1,92 @@
 package net.minecraft.network.protocol.game;
 
 import com.google.common.collect.Lists;
-import java.io.IOException;
-import java.util.Iterator;
+import java.util.BitSet;
 import java.util.List;
+import javax.annotation.Nullable;
 import net.minecraft.core.SectionPos;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.LightLayer;
 import net.minecraft.world.level.chunk.DataLayer;
 import net.minecraft.world.level.lighting.LevelLightEngine;
 
 public class ClientboundLightUpdatePacket implements Packet<ClientGamePacketListener> {
-   private int x;
-   private int z;
-   private int skyYMask;
-   private int blockYMask;
-   private int emptySkyYMask;
-   private int emptyBlockYMask;
-   private List<byte[]> skyUpdates;
-   private List<byte[]> blockUpdates;
-   private boolean trustEdges;
+   private final int x;
+   private final int z;
+   private final BitSet skyYMask;
+   private final BitSet blockYMask;
+   private final BitSet emptySkyYMask;
+   private final BitSet emptyBlockYMask;
+   private final List<byte[]> skyUpdates;
+   private final List<byte[]> blockUpdates;
+   private final boolean trustEdges;
 
-   public ClientboundLightUpdatePacket() {
-   }
-
-   public ClientboundLightUpdatePacket(ChunkPos var1, LevelLightEngine var2, boolean var3) {
+   public ClientboundLightUpdatePacket(ChunkPos var1, LevelLightEngine var2, @Nullable BitSet var3, @Nullable BitSet var4, boolean var5) {
       this.x = var1.x;
       this.z = var1.z;
-      this.trustEdges = var3;
+      this.trustEdges = var5;
+      this.skyYMask = new BitSet();
+      this.blockYMask = new BitSet();
+      this.emptySkyYMask = new BitSet();
+      this.emptyBlockYMask = new BitSet();
       this.skyUpdates = Lists.newArrayList();
       this.blockUpdates = Lists.newArrayList();
 
-      for(int var4 = 0; var4 < 18; ++var4) {
-         DataLayer var5 = var2.getLayerListener(LightLayer.SKY).getDataLayerData(SectionPos.of(var1, -1 + var4));
-         DataLayer var6 = var2.getLayerListener(LightLayer.BLOCK).getDataLayerData(SectionPos.of(var1, -1 + var4));
-         if (var5 != null) {
-            if (var5.isEmpty()) {
-               this.emptySkyYMask |= 1 << var4;
-            } else {
-               this.skyYMask |= 1 << var4;
-               this.skyUpdates.add(var5.getData().clone());
-            }
+      for(int var6 = 0; var6 < var2.getLightSectionCount(); ++var6) {
+         if (var3 == null || var3.get(var6)) {
+            prepareSectionData(var1, var2, LightLayer.SKY, var6, this.skyYMask, this.emptySkyYMask, this.skyUpdates);
          }
 
-         if (var6 != null) {
-            if (var6.isEmpty()) {
-               this.emptyBlockYMask |= 1 << var4;
-            } else {
-               this.blockYMask |= 1 << var4;
-               this.blockUpdates.add(var6.getData().clone());
-            }
+         if (var4 == null || var4.get(var6)) {
+            prepareSectionData(var1, var2, LightLayer.BLOCK, var6, this.blockYMask, this.emptyBlockYMask, this.blockUpdates);
          }
       }
 
    }
 
-   public ClientboundLightUpdatePacket(ChunkPos var1, LevelLightEngine var2, int var3, int var4, boolean var5) {
-      this.x = var1.x;
-      this.z = var1.z;
-      this.trustEdges = var5;
-      this.skyYMask = var3;
-      this.blockYMask = var4;
-      this.skyUpdates = Lists.newArrayList();
-      this.blockUpdates = Lists.newArrayList();
-
-      for(int var6 = 0; var6 < 18; ++var6) {
-         DataLayer var7;
-         if ((this.skyYMask & 1 << var6) != 0) {
-            var7 = var2.getLayerListener(LightLayer.SKY).getDataLayerData(SectionPos.of(var1, -1 + var6));
-            if (var7 != null && !var7.isEmpty()) {
-               this.skyUpdates.add(var7.getData().clone());
-            } else {
-               this.skyYMask &= ~(1 << var6);
-               if (var7 != null) {
-                  this.emptySkyYMask |= 1 << var6;
-               }
-            }
+   private static void prepareSectionData(ChunkPos var0, LevelLightEngine var1, LightLayer var2, int var3, BitSet var4, BitSet var5, List<byte[]> var6) {
+      DataLayer var7 = var1.getLayerListener(var2).getDataLayerData(SectionPos.of(var0, var1.getMinLightSection() + var3));
+      if (var7 != null) {
+         if (var7.isEmpty()) {
+            var5.set(var3);
+         } else {
+            var4.set(var3);
+            var6.add((byte[])var7.getData().clone());
          }
-
-         if ((this.blockYMask & 1 << var6) != 0) {
-            var7 = var2.getLayerListener(LightLayer.BLOCK).getDataLayerData(SectionPos.of(var1, -1 + var6));
-            if (var7 != null && !var7.isEmpty()) {
-               this.blockUpdates.add(var7.getData().clone());
-            } else {
-               this.blockYMask &= ~(1 << var6);
-               if (var7 != null) {
-                  this.emptyBlockYMask |= 1 << var6;
-               }
-            }
-         }
       }
 
    }
 
-   public void read(FriendlyByteBuf var1) throws IOException {
+   public ClientboundLightUpdatePacket(FriendlyByteBuf var1) {
       this.x = var1.readVarInt();
       this.z = var1.readVarInt();
       this.trustEdges = var1.readBoolean();
-      this.skyYMask = var1.readVarInt();
-      this.blockYMask = var1.readVarInt();
-      this.emptySkyYMask = var1.readVarInt();
-      this.emptyBlockYMask = var1.readVarInt();
-      this.skyUpdates = Lists.newArrayList();
-
-      int var2;
-      for(var2 = 0; var2 < 18; ++var2) {
-         if ((this.skyYMask & 1 << var2) != 0) {
-            this.skyUpdates.add(var1.readByteArray(2048));
-         }
-      }
-
-      this.blockUpdates = Lists.newArrayList();
-
-      for(var2 = 0; var2 < 18; ++var2) {
-         if ((this.blockYMask & 1 << var2) != 0) {
-            this.blockUpdates.add(var1.readByteArray(2048));
-         }
-      }
-
+      this.skyYMask = var1.readBitSet();
+      this.blockYMask = var1.readBitSet();
+      this.emptySkyYMask = var1.readBitSet();
+      this.emptyBlockYMask = var1.readBitSet();
+      this.skyUpdates = var1.readList((var0) -> {
+         return var0.readByteArray(2048);
+      });
+      this.blockUpdates = var1.readList((var0) -> {
+         return var0.readByteArray(2048);
+      });
    }
 
-   public void write(FriendlyByteBuf var1) throws IOException {
+   public void write(FriendlyByteBuf var1) {
       var1.writeVarInt(this.x);
       var1.writeVarInt(this.z);
       var1.writeBoolean(this.trustEdges);
-      var1.writeVarInt(this.skyYMask);
-      var1.writeVarInt(this.blockYMask);
-      var1.writeVarInt(this.emptySkyYMask);
-      var1.writeVarInt(this.emptyBlockYMask);
-      Iterator var2 = this.skyUpdates.iterator();
-
-      byte[] var3;
-      while(var2.hasNext()) {
-         var3 = (byte[])var2.next();
-         var1.writeByteArray(var3);
-      }
-
-      var2 = this.blockUpdates.iterator();
-
-      while(var2.hasNext()) {
-         var3 = (byte[])var2.next();
-         var1.writeByteArray(var3);
-      }
-
+      var1.writeBitSet(this.skyYMask);
+      var1.writeBitSet(this.blockYMask);
+      var1.writeBitSet(this.emptySkyYMask);
+      var1.writeBitSet(this.emptyBlockYMask);
+      var1.writeCollection(this.skyUpdates, FriendlyByteBuf::writeByteArray);
+      var1.writeCollection(this.blockUpdates, FriendlyByteBuf::writeByteArray);
    }
 
    public void handle(ClientGamePacketListener var1) {
       var1.handleLightUpdatePacked(this);
    }
@@ -157,27 +97,27 @@
 
    public int getZ() {
       return this.z;
    }
 
-   public int getSkyYMask() {
+   public BitSet getSkyYMask() {
       return this.skyYMask;
    }
 
-   public int getEmptySkyYMask() {
+   public BitSet getEmptySkyYMask() {
       return this.emptySkyYMask;
    }
 
    public List<byte[]> getSkyUpdates() {
       return this.skyUpdates;
    }
 
-   public int getBlockYMask() {
+   public BitSet getBlockYMask() {
       return this.blockYMask;
    }
 
-   public int getEmptyBlockYMask() {
+   public BitSet getEmptyBlockYMask() {
       return this.emptyBlockYMask;
    }
 
    public List<byte[]> getBlockUpdates() {
       return this.blockUpdates;
