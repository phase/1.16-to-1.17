--- net/minecraft/network/FriendlyByteBuf.java
+++ net/minecraft/network/FriendlyByteBuf.java
@@ -1,17 +1,21 @@
 package net.minecraft.network;
 
+import com.google.common.annotations.VisibleForTesting;
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.DataResult;
-import com.mojang.serialization.DataResult.PartialResult;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufAllocator;
 import io.netty.buffer.ByteBufInputStream;
 import io.netty.buffer.ByteBufOutputStream;
 import io.netty.handler.codec.DecoderException;
 import io.netty.handler.codec.EncoderException;
 import io.netty.util.ByteProcessor;
+import it.unimi.dsi.fastutil.ints.IntArrayList;
+import it.unimi.dsi.fastutil.ints.IntList;
 import java.io.DataOutput;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
 import java.nio.ByteBuffer;
@@ -19,12 +23,21 @@
 import java.nio.channels.FileChannel;
 import java.nio.channels.GatheringByteChannel;
 import java.nio.channels.ScatteringByteChannel;
 import java.nio.charset.Charset;
 import java.nio.charset.StandardCharsets;
+import java.util.BitSet;
+import java.util.Collection;
 import java.util.Date;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
 import java.util.UUID;
+import java.util.function.BiConsumer;
+import java.util.function.Consumer;
+import java.util.function.Function;
+import java.util.function.IntFunction;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.SectionPos;
 import net.minecraft.nbt.CompoundTag;
@@ -33,15 +46,21 @@
 import net.minecraft.nbt.NbtOps;
 import net.minecraft.network.chat.Component;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.Vec3;
 
 public class FriendlyByteBuf extends ByteBuf {
+   private static final int MAX_VARINT_SIZE = 5;
+   private static final int MAX_VARLONG_SIZE = 10;
+   private static final int DEFAULT_NBT_QUOTA = 2097152;
    private final ByteBuf source;
+   public static final short MAX_STRING_LENGTH = 32767;
+   public static final int MAX_COMPONENT_STRING_LENGTH = 262144;
 
    public FriendlyByteBuf(ByteBuf var1) {
       this.source = var1;
    }
 
@@ -53,39 +72,123 @@
       }
 
       return 5;
    }
 
-   public <T> T readWithCodec(Codec<T> var1) throws IOException {
+   public static int getVarLongSize(long var0) {
+      for(int var2 = 1; var2 < 10; ++var2) {
+         if ((var0 & -1L << var2 * 7) == 0L) {
+            return var2;
+         }
+      }
+
+      return 10;
+   }
+
+   public <T> T readWithCodec(Codec<T> var1) {
       CompoundTag var2 = this.readAnySizeNbt();
       DataResult var3 = var1.parse(NbtOps.INSTANCE, var2);
-      if (var3.error().isPresent()) {
-         throw new IOException("Failed to decode: " + ((PartialResult)var3.error().get()).message() + " " + var2);
-      } else {
-         return var3.result().get();
-      }
+      var3.error().ifPresent((var1x) -> {
+         throw new EncoderException("Failed to decode: " + var1x.message() + " " + var2);
+      });
+      return var3.result().get();
    }
 
-   public <T> void writeWithCodec(Codec<T> var1, T var2) throws IOException {
+   public <T> void writeWithCodec(Codec<T> var1, T var2) {
       DataResult var3 = var1.encodeStart(NbtOps.INSTANCE, var2);
-      if (var3.error().isPresent()) {
-         throw new IOException("Failed to encode: " + ((PartialResult)var3.error().get()).message() + " " + var2);
-      } else {
-         this.writeNbt((CompoundTag)var3.result().get());
+      var3.error().ifPresent((var1x) -> {
+         throw new EncoderException("Failed to encode: " + var1x.message() + " " + var2);
+      });
+      this.writeNbt((CompoundTag)var3.result().get());
+   }
+
+   public <T, C extends Collection<T>> C readCollection(IntFunction<C> var1, Function<FriendlyByteBuf, T> var2) {
+      int var3 = this.readVarInt();
+      Collection var4 = (Collection)var1.apply(var3);
+
+      for(int var5 = 0; var5 < var3; ++var5) {
+         var4.add(var2.apply(this));
       }
+
+      return var4;
    }
 
-   public FriendlyByteBuf writeByteArray(byte[] var1) {
-      this.writeVarInt(var1.length);
-      this.writeBytes(var1);
-      return this;
+   public <T> void writeCollection(Collection<T> var1, BiConsumer<FriendlyByteBuf, T> var2) {
+      this.writeVarInt(var1.size());
+      Iterator var3 = var1.iterator();
+
+      while(var3.hasNext()) {
+         Object var4 = var3.next();
+         var2.accept(this, var4);
+      }
+
    }
 
+   public <T> List<T> readList(Function<FriendlyByteBuf, T> var1) {
+      return (List)this.readCollection(Lists::newArrayListWithCapacity, var1);
+   }
+
+   public IntList readIntIdList() {
+      int var1 = this.readVarInt();
+      IntArrayList var2 = new IntArrayList();
+
+      for(int var3 = 0; var3 < var1; ++var3) {
+         var2.add(this.readVarInt());
+      }
+
+      return var2;
+   }
+
+   public void writeIntIdList(IntList var1) {
+      this.writeVarInt(var1.size());
+      var1.forEach(this::writeVarInt);
+   }
+
+   public <K, V, M extends Map<K, V>> M readMap(IntFunction<M> var1, Function<FriendlyByteBuf, K> var2, Function<FriendlyByteBuf, V> var3) {
+      int var4 = this.readVarInt();
+      Map var5 = (Map)var1.apply(var4);
+
+      for(int var6 = 0; var6 < var4; ++var6) {
+         Object var7 = var2.apply(this);
+         Object var8 = var3.apply(this);
+         var5.put(var7, var8);
+      }
+
+      return var5;
+   }
+
+   public <K, V> Map<K, V> readMap(Function<FriendlyByteBuf, K> var1, Function<FriendlyByteBuf, V> var2) {
+      return this.readMap(Maps::newHashMapWithExpectedSize, var1, var2);
+   }
+
+   public <K, V> void writeMap(Map<K, V> var1, BiConsumer<FriendlyByteBuf, K> var2, BiConsumer<FriendlyByteBuf, V> var3) {
+      this.writeVarInt(var1.size());
+      var1.forEach((var3x, var4) -> {
+         var2.accept(this, var3x);
+         var3.accept(this, var4);
+      });
+   }
+
+   public void readWithCount(Consumer<FriendlyByteBuf> var1) {
+      int var2 = this.readVarInt();
+
+      for(int var3 = 0; var3 < var2; ++var3) {
+         var1.accept(this);
+      }
+
+   }
+
    public byte[] readByteArray() {
       return this.readByteArray(this.readableBytes());
    }
 
+   public FriendlyByteBuf writeByteArray(byte[] var1) {
+      this.writeVarInt(var1.length);
+      this.writeBytes(var1);
+      return this;
+   }
+
    public byte[] readByteArray(int var1) {
       int var2 = this.readVarInt();
       if (var2 > var1) {
          throw new DecoderException("ByteArray with size " + var2 + " is bigger than allowed " + var1);
       } else {
@@ -138,10 +241,14 @@
       }
 
       return this;
    }
 
+   public long[] readLongArray() {
+      return this.readLongArray((long[])null);
+   }
+
    public long[] readLongArray(@Nullable long[] var1) {
       return this.readLongArray(var1, this.readableBytes() / 8);
    }
 
    public long[] readLongArray(@Nullable long[] var1, int var2) {
@@ -159,23 +266,45 @@
       }
 
       return var1;
    }
 
+   @VisibleForTesting
+   public byte[] accessByteBufWithCorrectSize() {
+      int var1 = this.writerIndex();
+      byte[] var2 = new byte[var1];
+      this.getBytes(0, (byte[])var2);
+      return var2;
+   }
+
    public BlockPos readBlockPos() {
       return BlockPos.of(this.readLong());
    }
 
    public FriendlyByteBuf writeBlockPos(BlockPos var1) {
       this.writeLong(var1.asLong());
       return this;
    }
 
+   public ChunkPos readChunkPos() {
+      return new ChunkPos(this.readLong());
+   }
+
+   public FriendlyByteBuf writeChunkPos(ChunkPos var1) {
+      this.writeLong(var1.toLong());
+      return this;
+   }
+
    public SectionPos readSectionPos() {
       return SectionPos.of(this.readLong());
    }
 
+   public FriendlyByteBuf writeSectionPos(SectionPos var1) {
+      this.writeLong(var1.asLong());
+      return this;
+   }
+
    public Component readComponent() {
       return Component.Serializer.fromJson(this.readUtf(262144));
    }
 
    public FriendlyByteBuf writeComponent(Component var1) {
@@ -397,10 +526,18 @@
       this.writeFloat((float)(var3.y - (double)var2.getY()));
       this.writeFloat((float)(var3.z - (double)var2.getZ()));
       this.writeBoolean(var1.isInside());
    }
 
+   public BitSet readBitSet() {
+      return BitSet.valueOf(this.readLongArray());
+   }
+
+   public void writeBitSet(BitSet var1) {
+      this.writeLongArray(var1.toLongArray());
+   }
+
    public int capacity() {
       return this.source.capacity();
    }
 
    public ByteBuf capacity(int var1) {
