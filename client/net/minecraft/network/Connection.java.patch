--- net/minecraft/network/Connection.java
+++ net/minecraft/network/Connection.java
@@ -23,20 +23,21 @@
 import io.netty.handler.timeout.ReadTimeoutHandler;
 import io.netty.handler.timeout.TimeoutException;
 import io.netty.util.AttributeKey;
 import io.netty.util.concurrent.Future;
 import io.netty.util.concurrent.GenericFutureListener;
-import java.net.InetAddress;
+import java.net.InetSocketAddress;
 import java.net.SocketAddress;
 import java.util.Queue;
 import javax.annotation.Nullable;
 import javax.crypto.Cipher;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.PacketFlow;
 import net.minecraft.network.protocol.game.ClientboundDisconnectPacket;
+import net.minecraft.network.protocol.login.ClientboundLoginDisconnectPacket;
 import net.minecraft.server.RunningOnDifferentThreadException;
 import net.minecraft.server.network.ServerGamePacketListenerImpl;
 import net.minecraft.server.network.ServerLoginPacketListenerImpl;
 import net.minecraft.util.LazyLoadedValue;
 import net.minecraft.util.Mth;
@@ -45,10 +46,11 @@
 import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.Marker;
 import org.apache.logging.log4j.MarkerManager;
 
 public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
+   private static final float AVERAGE_PACKETS_SMOOTHING = 0.75F;
    private static final Logger LOGGER = LogManager.getLogger();
    public static final Marker ROOT_MARKER = MarkerManager.getMarker("NETWORK");
    public static final Marker PACKET_MARKER;
    public static final AttributeKey<ConnectionProtocol> ATTRIBUTE_PROTOCOL;
    public static final LazyLoadedValue<NioEventLoopGroup> NETWORK_WORKER_GROUP;
@@ -90,11 +92,11 @@
       this.channel.attr(ATTRIBUTE_PROTOCOL).set(var1);
       this.channel.config().setAutoRead(true);
       LOGGER.debug("Enabled auto read");
    }
 
-   public void channelInactive(ChannelHandlerContext var1) throws Exception {
+   public void channelInactive(ChannelHandlerContext var1) {
       this.disconnect(new TranslatableComponent("disconnect.endOfStream"));
    }
 
    public void exceptionCaught(ChannelHandlerContext var1, Throwable var2) {
       if (var2 instanceof SkipPacketException) {
@@ -108,11 +110,13 @@
                this.disconnect(new TranslatableComponent("disconnect.timeout"));
             } else {
                TranslatableComponent var4 = new TranslatableComponent("disconnect.genericReason", new Object[]{"Internal Exception: " + var2});
                if (var3) {
                   LOGGER.debug("Failed to sent packet", var2);
-                  this.send(new ClientboundDisconnectPacket(var4), (var2x) -> {
+                  ConnectionProtocol var5 = this.getCurrentProtocol();
+                  Object var6 = var5 == ConnectionProtocol.LOGIN ? new ClientboundLoginDisconnectPacket(var4) : new ClientboundDisconnectPacket(var4);
+                  this.send((Packet)var6, (var2x) -> {
                      this.disconnect(var4);
                   });
                   this.setReadOnly();
                } else {
                   LOGGER.debug("Double fault", var2);
@@ -122,15 +126,18 @@
 
          }
       }
    }
 
-   protected void channelRead0(ChannelHandlerContext var1, Packet<?> var2) throws Exception {
+   protected void channelRead0(ChannelHandlerContext var1, Packet<?> var2) {
       if (this.channel.isOpen()) {
          try {
             genericsFtw(var2, this.packetListener);
          } catch (RunningOnDifferentThreadException var4) {
+         } catch (ClassCastException var5) {
+            LOGGER.error("Received {} that couldn't be processed", var2.getClass(), var5);
+            this.disconnect(new TranslatableComponent("multiplayer.disconnect.invalid_packet"));
          }
 
          ++this.receivedPackets;
       }
 
@@ -159,45 +166,44 @@
 
    }
 
    private void sendPacket(Packet<?> var1, @Nullable GenericFutureListener<? extends Future<? super Void>> var2) {
       ConnectionProtocol var3 = ConnectionProtocol.getProtocolForPacket(var1);
-      ConnectionProtocol var4 = (ConnectionProtocol)this.channel.attr(ATTRIBUTE_PROTOCOL).get();
+      ConnectionProtocol var4 = this.getCurrentProtocol();
       ++this.sentPackets;
       if (var4 != var3) {
          LOGGER.debug("Disabled auto read");
          this.channel.config().setAutoRead(false);
       }
 
       if (this.channel.eventLoop().inEventLoop()) {
-         if (var3 != var4) {
-            this.setProtocol(var3);
-         }
-
-         ChannelFuture var5 = this.channel.writeAndFlush(var1);
-         if (var2 != null) {
-            var5.addListener(var2);
-         }
-
-         var5.addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
+         this.doSendPacket(var1, var2, var3, var4);
       } else {
          this.channel.eventLoop().execute(() -> {
-            if (var3 != var4) {
-               this.setProtocol(var3);
-            }
+            this.doSendPacket(var1, var2, var3, var4);
+         });
+      }
 
-            ChannelFuture var5 = this.channel.writeAndFlush(var1);
-            if (var2 != null) {
-               var5.addListener(var2);
-            }
+   }
 
-            var5.addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
-         });
+   private void doSendPacket(Packet<?> var1, @Nullable GenericFutureListener<? extends Future<? super Void>> var2, ConnectionProtocol var3, ConnectionProtocol var4) {
+      if (var3 != var4) {
+         this.setProtocol(var3);
       }
 
+      ChannelFuture var5 = this.channel.writeAndFlush(var1);
+      if (var2 != null) {
+         var5.addListener(var2);
+      }
+
+      var5.addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
    }
 
+   private ConnectionProtocol getCurrentProtocol() {
+      return (ConnectionProtocol)this.channel.attr(ATTRIBUTE_PROTOCOL).get();
+   }
+
    private void flushQueue() {
       if (this.channel != null && this.channel.isOpen()) {
          synchronized(this.queue) {
             Connection.PacketHolder var2;
             while((var2 = (Connection.PacketHolder)this.queue.poll()) != null) {
@@ -216,10 +222,14 @@
 
       if (this.packetListener instanceof ServerGamePacketListenerImpl) {
          ((ServerGamePacketListenerImpl)this.packetListener).tick();
       }
 
+      if (!this.isConnected() && !this.disconnectionHandled) {
+         this.handleDisconnection();
+      }
+
       if (this.channel != null) {
          this.channel.flush();
       }
 
       if (this.tickCount++ % 20 == 0) {
@@ -249,39 +259,47 @@
 
    public boolean isMemoryConnection() {
       return this.channel instanceof LocalChannel || this.channel instanceof LocalServerChannel;
    }
 
-   public static Connection connectToServer(InetAddress var0, int var1, boolean var2) {
-      final Connection var3 = new Connection(PacketFlow.CLIENTBOUND);
-      Class var4;
-      LazyLoadedValue var5;
-      if (Epoll.isAvailable() && var2) {
-         var4 = EpollSocketChannel.class;
-         var5 = NETWORK_EPOLL_WORKER_GROUP;
+   public PacketFlow getReceiving() {
+      return this.receiving;
+   }
+
+   public PacketFlow getSending() {
+      return this.receiving.getOpposite();
+   }
+
+   public static Connection connectToServer(InetSocketAddress var0, boolean var1) {
+      final Connection var2 = new Connection(PacketFlow.CLIENTBOUND);
+      Class var3;
+      LazyLoadedValue var4;
+      if (Epoll.isAvailable() && var1) {
+         var3 = EpollSocketChannel.class;
+         var4 = NETWORK_EPOLL_WORKER_GROUP;
       } else {
-         var4 = NioSocketChannel.class;
-         var5 = NETWORK_WORKER_GROUP;
+         var3 = NioSocketChannel.class;
+         var4 = NETWORK_WORKER_GROUP;
       }
 
-      ((Bootstrap)((Bootstrap)((Bootstrap)(new Bootstrap()).group((EventLoopGroup)var5.get())).handler(new ChannelInitializer<Channel>() {
-         protected void initChannel(Channel var1) throws Exception {
+      ((Bootstrap)((Bootstrap)((Bootstrap)(new Bootstrap()).group((EventLoopGroup)var4.get())).handler(new ChannelInitializer<Channel>() {
+         protected void initChannel(Channel var1) {
             try {
                var1.config().setOption(ChannelOption.TCP_NODELAY, true);
-            } catch (ChannelException var3x) {
+            } catch (ChannelException var3) {
             }
 
-            var1.pipeline().addLast("timeout", new ReadTimeoutHandler(30)).addLast("splitter", new Varint21FrameDecoder()).addLast("decoder", new PacketDecoder(PacketFlow.CLIENTBOUND)).addLast("prepender", new Varint21LengthFieldPrepender()).addLast("encoder", new PacketEncoder(PacketFlow.SERVERBOUND)).addLast("packet_handler", var3);
+            var1.pipeline().addLast("timeout", new ReadTimeoutHandler(30)).addLast("splitter", new Varint21FrameDecoder()).addLast("decoder", new PacketDecoder(PacketFlow.CLIENTBOUND)).addLast("prepender", new Varint21LengthFieldPrepender()).addLast("encoder", new PacketEncoder(PacketFlow.SERVERBOUND)).addLast("packet_handler", var2);
          }
-      })).channel(var4)).connect(var0, var1).syncUninterruptibly();
-      return var3;
+      })).channel(var3)).connect(var0.getAddress(), var0.getPort()).syncUninterruptibly();
+      return var2;
    }
 
    public static Connection connectToLocalServer(SocketAddress var0) {
       final Connection var1 = new Connection(PacketFlow.CLIENTBOUND);
       ((Bootstrap)((Bootstrap)((Bootstrap)(new Bootstrap()).group((EventLoopGroup)LOCAL_WORKER_GROUP.get())).handler(new ChannelInitializer<Channel>() {
-         protected void initChannel(Channel var1x) throws Exception {
+         protected void initChannel(Channel var1x) {
             var1x.pipeline().addLast("packet_handler", var1);
          }
       })).channel(LocalChannel.class)).connect(var0).syncUninterruptibly();
       return var1;
    }
@@ -379,13 +397,13 @@
          return new DefaultEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Local Client IO #%d").setDaemon(true).build());
       });
    }
 
    static class PacketHolder {
-      private final Packet<?> packet;
+      final Packet<?> packet;
       @Nullable
-      private final GenericFutureListener<? extends Future<? super Void>> listener;
+      final GenericFutureListener<? extends Future<? super Void>> listener;
 
       public PacketHolder(Packet<?> var1, @Nullable GenericFutureListener<? extends Future<? super Void>> var2) {
          this.packet = var1;
          this.listener = var2;
       }
