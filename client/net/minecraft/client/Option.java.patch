--- net/minecraft/client/Option.java
+++ net/minecraft/client/Option.java
@@ -1,23 +1,26 @@
 package net.minecraft.client;
 
+import com.google.common.collect.ImmutableList;
 import com.mojang.blaze3d.pipeline.RenderTarget;
-import com.mojang.blaze3d.platform.GlStateManager;
 import com.mojang.blaze3d.platform.Window;
+import java.util.Arrays;
 import java.util.List;
-import java.util.Optional;
+import java.util.stream.Collectors;
+import java.util.stream.IntStream;
+import java.util.stream.Stream;
 import net.minecraft.ChatFormatting;
 import net.minecraft.client.gui.chat.NarratorChatListener;
 import net.minecraft.client.gui.components.AbstractWidget;
 import net.minecraft.client.gui.components.ChatComponent;
 import net.minecraft.client.renderer.GpuWarnlistManager;
 import net.minecraft.network.chat.CommonComponents;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.TextComponent;
 import net.minecraft.network.chat.TranslatableComponent;
-import net.minecraft.util.FormattedCharSequence;
 import net.minecraft.util.Mth;
+import net.minecraft.world.entity.HumanoidArm;
 import net.minecraft.world.entity.player.ChatVisiblity;
 
 public abstract class Option {
    public static final ProgressOption BIOME_BLEND_RADIUS = new ProgressOption("options.biomeBlendRadius", 0.0D, 7.0D, 1.0F, (var0) -> {
       return (double)var0.biomeBlendRadius;
@@ -105,23 +108,25 @@
    public static final ProgressOption FOV_EFFECTS_SCALE = new ProgressOption("options.fovEffectScale", 0.0D, 1.0D, 0.0F, (var0) -> {
       return Math.pow((double)var0.fovEffectScale, 2.0D);
    }, (var0, var1) -> {
       var0.fovEffectScale = Mth.sqrt(var1);
    }, (var0, var1) -> {
-      var1.setTooltip(Minecraft.getInstance().font.split(ACCESSIBILITY_TOOLTIP_FOV_EFFECT, 200));
       double var2 = var1.toPct(var1.get(var0));
-      return var2 == 0.0D ? var1.genericValueLabel(new TranslatableComponent("options.fovEffectScale.off")) : var1.percentValueLabel(var2);
+      return var2 == 0.0D ? var1.genericValueLabel(CommonComponents.OPTION_OFF) : var1.percentValueLabel(var2);
+   }, (var0) -> {
+      return var0.font.split(ACCESSIBILITY_TOOLTIP_FOV_EFFECT, 200);
    });
    private static final Component ACCESSIBILITY_TOOLTIP_SCREEN_EFFECT = new TranslatableComponent("options.screenEffectScale.tooltip");
    public static final ProgressOption SCREEN_EFFECTS_SCALE = new ProgressOption("options.screenEffectScale", 0.0D, 1.0D, 0.0F, (var0) -> {
       return (double)var0.screenEffectScale;
    }, (var0, var1) -> {
       var0.screenEffectScale = var1.floatValue();
    }, (var0, var1) -> {
-      var1.setTooltip(Minecraft.getInstance().font.split(ACCESSIBILITY_TOOLTIP_SCREEN_EFFECT, 200));
       double var2 = var1.toPct(var1.get(var0));
-      return var2 == 0.0D ? var1.genericValueLabel(new TranslatableComponent("options.screenEffectScale.off")) : var1.percentValueLabel(var2);
+      return var2 == 0.0D ? var1.genericValueLabel(CommonComponents.OPTION_OFF) : var1.percentValueLabel(var2);
+   }, (var0) -> {
+      return var0.font.split(ACCESSIBILITY_TOOLTIP_SCREEN_EFFECT, 200);
    });
    public static final ProgressOption FRAMERATE_LIMIT = new ProgressOption("options.framerateLimit", 10.0D, 260.0D, 10.0F, (var0) -> {
       return (double)var0.framerateLimit;
    }, (var0, var1) -> {
       var0.framerateLimit = (int)var1;
@@ -156,17 +161,17 @@
       var0.mouseWheelSensitivity = var1;
    }, (var0, var1) -> {
       double var2 = var1.toPct(var1.get(var0));
       return var1.genericValueLabel(new TextComponent(String.format("%.2f", var1.toValue(var2))));
    });
-   public static final BooleanOption RAW_MOUSE_INPUT = new BooleanOption("options.rawMouseInput", (var0) -> {
+   public static final CycleOption<Boolean> RAW_MOUSE_INPUT = CycleOption.createOnOff("options.rawMouseInput", (var0) -> {
       return var0.rawMouseInput;
-   }, (var0, var1) -> {
-      var0.rawMouseInput = var1;
-      Window var2 = Minecraft.getInstance().getWindow();
-      if (var2 != null) {
-         var2.updateRawMouseInput(var1);
+   }, (var0, var1, var2) -> {
+      var0.rawMouseInput = var2;
+      Window var3 = Minecraft.getInstance().getWindow();
+      if (var3 != null) {
+         var3.updateRawMouseInput(var2);
       }
 
    });
    public static final ProgressOption RENDER_DISTANCE = new ProgressOption("options.renderDistance", 2.0D, 16.0D, 1.0F, (var0) -> {
       return (double)var0.renderDistance;
@@ -203,59 +208,66 @@
       var0.textBackgroundOpacity = var1;
       Minecraft.getInstance().gui.getChat().rescaleChat();
    }, (var0, var1) -> {
       return var1.percentValueLabel(var1.toPct(var1.get(var0)));
    });
-   public static final CycleOption AMBIENT_OCCLUSION = new CycleOption("options.ao", (var0, var1) -> {
-      var0.ambientOcclusion = AmbientOcclusionStatus.byId(var0.ambientOcclusion.getId() + var1);
+   public static final CycleOption<AmbientOcclusionStatus> AMBIENT_OCCLUSION = CycleOption.create("options.ao", (Object[])AmbientOcclusionStatus.values(), (var0) -> {
+      return new TranslatableComponent(var0.getKey());
+   }, (var0) -> {
+      return var0.ambientOcclusion;
+   }, (var0, var1, var2) -> {
+      var0.ambientOcclusion = var2;
       Minecraft.getInstance().levelRenderer.allChanged();
-   }, (var0, var1) -> {
-      return var1.genericValueLabel(new TranslatableComponent(var0.ambientOcclusion.getKey()));
    });
-   public static final CycleOption ATTACK_INDICATOR = new CycleOption("options.attackIndicator", (var0, var1) -> {
-      var0.attackIndicator = AttackIndicatorStatus.byId(var0.attackIndicator.getId() + var1);
-   }, (var0, var1) -> {
-      return var1.genericValueLabel(new TranslatableComponent(var0.attackIndicator.getKey()));
+   public static final CycleOption<AttackIndicatorStatus> ATTACK_INDICATOR = CycleOption.create("options.attackIndicator", (Object[])AttackIndicatorStatus.values(), (var0) -> {
+      return new TranslatableComponent(var0.getKey());
+   }, (var0) -> {
+      return var0.attackIndicator;
+   }, (var0, var1, var2) -> {
+      var0.attackIndicator = var2;
    });
-   public static final CycleOption CHAT_VISIBILITY = new CycleOption("options.chat.visibility", (var0, var1) -> {
-      var0.chatVisibility = ChatVisiblity.byId((var0.chatVisibility.getId() + var1) % 3);
-   }, (var0, var1) -> {
-      return var1.genericValueLabel(new TranslatableComponent(var0.chatVisibility.getKey()));
+   public static final CycleOption<ChatVisiblity> CHAT_VISIBILITY = CycleOption.create("options.chat.visibility", (Object[])ChatVisiblity.values(), (var0) -> {
+      return new TranslatableComponent(var0.getKey());
+   }, (var0) -> {
+      return var0.chatVisibility;
+   }, (var0, var1, var2) -> {
+      var0.chatVisibility = var2;
    });
    private static final Component GRAPHICS_TOOLTIP_FAST = new TranslatableComponent("options.graphics.fast.tooltip");
    private static final Component GRAPHICS_TOOLTIP_FABULOUS;
    private static final Component GRAPHICS_TOOLTIP_FANCY;
-   public static final CycleOption GRAPHICS;
+   public static final CycleOption<GraphicsStatus> GRAPHICS;
    public static final CycleOption GUI_SCALE;
-   public static final CycleOption MAIN_HAND;
-   public static final CycleOption NARRATOR;
-   public static final CycleOption PARTICLES;
-   public static final CycleOption RENDER_CLOUDS;
-   public static final CycleOption TEXT_BACKGROUND;
+   public static final CycleOption<HumanoidArm> MAIN_HAND;
+   public static final CycleOption<NarratorStatus> NARRATOR;
+   public static final CycleOption<ParticleStatus> PARTICLES;
+   public static final CycleOption<CloudStatus> RENDER_CLOUDS;
+   public static final CycleOption<Boolean> TEXT_BACKGROUND;
    private static final Component CHAT_TOOLTIP_HIDE_MATCHED_NAMES;
-   public static final BooleanOption AUTO_JUMP;
-   public static final BooleanOption AUTO_SUGGESTIONS;
-   public static final BooleanOption HIDE_MATCHED_NAMES;
-   public static final BooleanOption CHAT_COLOR;
-   public static final BooleanOption CHAT_LINKS;
-   public static final BooleanOption CHAT_LINKS_PROMPT;
-   public static final BooleanOption DISCRETE_MOUSE_SCROLL;
-   public static final BooleanOption ENABLE_VSYNC;
-   public static final BooleanOption ENTITY_SHADOWS;
-   public static final BooleanOption FORCE_UNICODE_FONT;
-   public static final BooleanOption INVERT_MOUSE;
-   public static final BooleanOption REALMS_NOTIFICATIONS;
-   public static final BooleanOption REDUCED_DEBUG_INFO;
-   public static final BooleanOption SHOW_SUBTITLES;
-   public static final BooleanOption SNOOPER_ENABLED;
-   public static final CycleOption TOGGLE_CROUCH;
-   public static final CycleOption TOGGLE_SPRINT;
-   public static final BooleanOption TOUCHSCREEN;
-   public static final BooleanOption USE_FULLSCREEN;
-   public static final BooleanOption VIEW_BOBBING;
+   public static final CycleOption<Boolean> AUTO_JUMP;
+   public static final CycleOption<Boolean> AUTO_SUGGESTIONS;
+   public static final CycleOption<Boolean> CHAT_COLOR;
+   public static final CycleOption<Boolean> HIDE_MATCHED_NAMES;
+   public static final CycleOption<Boolean> CHAT_LINKS;
+   public static final CycleOption<Boolean> CHAT_LINKS_PROMPT;
+   public static final CycleOption<Boolean> DISCRETE_MOUSE_SCROLL;
+   public static final CycleOption<Boolean> ENABLE_VSYNC;
+   public static final CycleOption<Boolean> ENTITY_SHADOWS;
+   public static final CycleOption<Boolean> FORCE_UNICODE_FONT;
+   public static final CycleOption<Boolean> INVERT_MOUSE;
+   public static final CycleOption<Boolean> REALMS_NOTIFICATIONS;
+   public static final CycleOption<Boolean> REDUCED_DEBUG_INFO;
+   public static final CycleOption<Boolean> SHOW_SUBTITLES;
+   public static final CycleOption<Boolean> SNOOPER_ENABLED;
+   private static final Component MOVEMENT_TOGGLE;
+   private static final Component MOVEMENT_HOLD;
+   public static final CycleOption<Boolean> TOGGLE_CROUCH;
+   public static final CycleOption<Boolean> TOGGLE_SPRINT;
+   public static final CycleOption<Boolean> TOUCHSCREEN;
+   public static final CycleOption<Boolean> USE_FULLSCREEN;
+   public static final CycleOption<Boolean> VIEW_BOBBING;
    private final Component caption;
-   private Optional<List<FormattedCharSequence>> toolTip = Optional.empty();
 
    public Option(String var1) {
       this.caption = new TranslatableComponent(var1);
    }
 
@@ -263,18 +275,10 @@
 
    protected Component getCaption() {
       return this.caption;
    }
 
-   public void setTooltip(List<FormattedCharSequence> var1) {
-      this.toolTip = Optional.of(var1);
-   }
-
-   public Optional<List<FormattedCharSequence>> getTooltip() {
-      return this.toolTip;
-   }
-
    protected Component pixelValueLabel(int var1) {
       return new TranslatableComponent("options.pixel_value", new Object[]{this.getCaption(), var1});
    }
 
    protected Component percentValueLabel(double var1) {
@@ -294,197 +298,212 @@
    }
 
    static {
       GRAPHICS_TOOLTIP_FABULOUS = new TranslatableComponent("options.graphics.fabulous.tooltip", new Object[]{(new TranslatableComponent("options.graphics.fabulous")).withStyle(ChatFormatting.ITALIC)});
       GRAPHICS_TOOLTIP_FANCY = new TranslatableComponent("options.graphics.fancy.tooltip");
-      GRAPHICS = new CycleOption("options.graphics", (var0, var1) -> {
-         Minecraft var2 = Minecraft.getInstance();
-         GpuWarnlistManager var3 = var2.getGpuWarnlistManager();
-         if (var0.graphicsMode == GraphicsStatus.FANCY && var3.willShowWarning()) {
-            var3.showWarning();
+      GRAPHICS = CycleOption.create("options.graphics", Arrays.asList(GraphicsStatus.values()), (List)Stream.of(GraphicsStatus.values()).filter((var0) -> {
+         return var0 != GraphicsStatus.FABULOUS;
+      }).collect(Collectors.toList()), () -> {
+         return Minecraft.getInstance().getGpuWarnlistManager().isSkippingFabulous();
+      }, (var0) -> {
+         TranslatableComponent var1 = new TranslatableComponent(var0.getKey());
+         return (Component)(var0 == GraphicsStatus.FABULOUS ? var1.withStyle(ChatFormatting.ITALIC) : var1);
+      }, (var0) -> {
+         return var0.graphicsMode;
+      }, (var0, var1, var2) -> {
+         Minecraft var3 = Minecraft.getInstance();
+         GpuWarnlistManager var4 = var3.getGpuWarnlistManager();
+         if (var2 == GraphicsStatus.FABULOUS && var4.willShowWarning()) {
+            var4.showWarning();
          } else {
-            var0.graphicsMode = var0.graphicsMode.cycleNext();
-            if (var0.graphicsMode == GraphicsStatus.FABULOUS && (!GlStateManager.supportsFramebufferBlit() || var3.isSkippingFabulous())) {
-               var0.graphicsMode = GraphicsStatus.FAST;
-            }
-
-            var2.levelRenderer.allChanged();
+            var0.graphicsMode = var2;
+            var3.levelRenderer.allChanged();
          }
-      }, (var0, var1) -> {
-         switch(var0.graphicsMode) {
-         case FAST:
-            var1.setTooltip(Minecraft.getInstance().font.split(GRAPHICS_TOOLTIP_FAST, 200));
-            break;
-         case FANCY:
-            var1.setTooltip(Minecraft.getInstance().font.split(GRAPHICS_TOOLTIP_FANCY, 200));
-            break;
-         case FABULOUS:
-            var1.setTooltip(Minecraft.getInstance().font.split(GRAPHICS_TOOLTIP_FABULOUS, 200));
-         }
-
-         TranslatableComponent var2 = new TranslatableComponent(var0.graphicsMode.getKey());
-         return var0.graphicsMode == GraphicsStatus.FABULOUS ? var1.genericValueLabel(var2.withStyle(ChatFormatting.ITALIC)) : var1.genericValueLabel(var2);
+      }).setTooltip((var0) -> {
+         List var1 = var0.font.split(GRAPHICS_TOOLTIP_FAST, 200);
+         List var2 = var0.font.split(GRAPHICS_TOOLTIP_FANCY, 200);
+         List var3 = var0.font.split(GRAPHICS_TOOLTIP_FABULOUS, 200);
+         return (var3x) -> {
+            switch(var3x) {
+            case FANCY:
+               return var2;
+            case FAST:
+               return var1;
+            case FABULOUS:
+               return var3;
+            default:
+               return ImmutableList.of();
+            }
+         };
       });
-      GUI_SCALE = new CycleOption("options.guiScale", (var0, var1) -> {
-         var0.guiScale = Integer.remainderUnsigned(var0.guiScale + var1, Minecraft.getInstance().getWindow().calculateScale(0, Minecraft.getInstance().isEnforceUnicode()) + 1);
-      }, (var0, var1) -> {
-         return var0.guiScale == 0 ? var1.genericValueLabel(new TranslatableComponent("options.guiScale.auto")) : var1.genericValueLabel(var0.guiScale);
+      GUI_SCALE = CycleOption.create("options.guiScale", () -> {
+         return (List)IntStream.rangeClosed(0, Minecraft.getInstance().getWindow().calculateScale(0, Minecraft.getInstance().isEnforceUnicode())).boxed().collect(Collectors.toList());
+      }, (var0) -> {
+         return (Component)(var0 == 0 ? new TranslatableComponent("options.guiScale.auto") : new TextComponent(Integer.toString(var0)));
+      }, (var0) -> {
+         return var0.guiScale;
+      }, (var0, var1, var2) -> {
+         var0.guiScale = var2;
       });
-      MAIN_HAND = new CycleOption("options.mainHand", (var0, var1) -> {
-         var0.mainHand = var0.mainHand.getOpposite();
-      }, (var0, var1) -> {
-         return var1.genericValueLabel(var0.mainHand.getName());
+      MAIN_HAND = CycleOption.create("options.mainHand", (Object[])HumanoidArm.values(), HumanoidArm::getName, (var0) -> {
+         return var0.mainHand;
+      }, (var0, var1, var2) -> {
+         var0.mainHand = var2;
+         var0.broadcastOptions();
       });
-      NARRATOR = new CycleOption("options.narrator", (var0, var1) -> {
-         if (NarratorChatListener.INSTANCE.isActive()) {
-            var0.narratorStatus = NarratorStatus.byId(var0.narratorStatus.getId() + var1);
-         } else {
-            var0.narratorStatus = NarratorStatus.OFF;
-         }
-
-         NarratorChatListener.INSTANCE.updateNarratorStatus(var0.narratorStatus);
-      }, (var0, var1) -> {
-         return NarratorChatListener.INSTANCE.isActive() ? var1.genericValueLabel(var0.narratorStatus.getName()) : var1.genericValueLabel(new TranslatableComponent("options.narrator.notavailable"));
+      NARRATOR = CycleOption.create("options.narrator", (Object[])NarratorStatus.values(), (var0) -> {
+         return (Component)(NarratorChatListener.INSTANCE.isActive() ? var0.getName() : new TranslatableComponent("options.narrator.notavailable"));
+      }, (var0) -> {
+         return var0.narratorStatus;
+      }, (var0, var1, var2) -> {
+         var0.narratorStatus = var2;
+         NarratorChatListener.INSTANCE.updateNarratorStatus(var2);
       });
-      PARTICLES = new CycleOption("options.particles", (var0, var1) -> {
-         var0.particles = ParticleStatus.byId(var0.particles.getId() + var1);
-      }, (var0, var1) -> {
-         return var1.genericValueLabel(new TranslatableComponent(var0.particles.getKey()));
+      PARTICLES = CycleOption.create("options.particles", (Object[])ParticleStatus.values(), (var0) -> {
+         return new TranslatableComponent(var0.getKey());
+      }, (var0) -> {
+         return var0.particles;
+      }, (var0, var1, var2) -> {
+         var0.particles = var2;
       });
-      RENDER_CLOUDS = new CycleOption("options.renderClouds", (var0, var1) -> {
-         var0.renderClouds = CloudStatus.byId(var0.renderClouds.getId() + var1);
+      RENDER_CLOUDS = CycleOption.create("options.renderClouds", (Object[])CloudStatus.values(), (var0) -> {
+         return new TranslatableComponent(var0.getKey());
+      }, (var0) -> {
+         return var0.renderClouds;
+      }, (var0, var1, var2) -> {
+         var0.renderClouds = var2;
          if (Minecraft.useShaderTransparency()) {
-            RenderTarget var2 = Minecraft.getInstance().levelRenderer.getCloudsTarget();
-            if (var2 != null) {
-               var2.clear(Minecraft.ON_OSX);
+            RenderTarget var3 = Minecraft.getInstance().levelRenderer.getCloudsTarget();
+            if (var3 != null) {
+               var3.clear(Minecraft.ON_OSX);
             }
          }
 
-      }, (var0, var1) -> {
-         return var1.genericValueLabel(new TranslatableComponent(var0.renderClouds.getKey()));
       });
-      TEXT_BACKGROUND = new CycleOption("options.accessibility.text_background", (var0, var1) -> {
-         var0.backgroundForChatOnly = !var0.backgroundForChatOnly;
-      }, (var0, var1) -> {
-         return var1.genericValueLabel(new TranslatableComponent(var0.backgroundForChatOnly ? "options.accessibility.text_background.chat" : "options.accessibility.text_background.everywhere"));
+      TEXT_BACKGROUND = CycleOption.createBinaryOption("options.accessibility.text_background", new TranslatableComponent("options.accessibility.text_background.chat"), new TranslatableComponent("options.accessibility.text_background.everywhere"), (var0) -> {
+         return var0.backgroundForChatOnly;
+      }, (var0, var1, var2) -> {
+         var0.backgroundForChatOnly = var2;
       });
       CHAT_TOOLTIP_HIDE_MATCHED_NAMES = new TranslatableComponent("options.hideMatchedNames.tooltip");
-      AUTO_JUMP = new BooleanOption("options.autoJump", (var0) -> {
+      AUTO_JUMP = CycleOption.createOnOff("options.autoJump", (var0) -> {
          return var0.autoJump;
-      }, (var0, var1) -> {
-         var0.autoJump = var1;
+      }, (var0, var1, var2) -> {
+         var0.autoJump = var2;
       });
-      AUTO_SUGGESTIONS = new BooleanOption("options.autoSuggestCommands", (var0) -> {
+      AUTO_SUGGESTIONS = CycleOption.createOnOff("options.autoSuggestCommands", (var0) -> {
          return var0.autoSuggestions;
-      }, (var0, var1) -> {
-         var0.autoSuggestions = var1;
+      }, (var0, var1, var2) -> {
+         var0.autoSuggestions = var2;
       });
-      HIDE_MATCHED_NAMES = new BooleanOption("options.hideMatchedNames", CHAT_TOOLTIP_HIDE_MATCHED_NAMES, (var0) -> {
-         return var0.hideMatchedNames;
-      }, (var0, var1) -> {
-         var0.hideMatchedNames = var1;
-      });
-      CHAT_COLOR = new BooleanOption("options.chat.color", (var0) -> {
+      CHAT_COLOR = CycleOption.createOnOff("options.chat.color", (var0) -> {
          return var0.chatColors;
-      }, (var0, var1) -> {
-         var0.chatColors = var1;
+      }, (var0, var1, var2) -> {
+         var0.chatColors = var2;
       });
-      CHAT_LINKS = new BooleanOption("options.chat.links", (var0) -> {
+      HIDE_MATCHED_NAMES = CycleOption.createOnOff("options.hideMatchedNames", CHAT_TOOLTIP_HIDE_MATCHED_NAMES, (var0) -> {
+         return var0.hideMatchedNames;
+      }, (var0, var1, var2) -> {
+         var0.hideMatchedNames = var2;
+      });
+      CHAT_LINKS = CycleOption.createOnOff("options.chat.links", (var0) -> {
          return var0.chatLinks;
-      }, (var0, var1) -> {
-         var0.chatLinks = var1;
+      }, (var0, var1, var2) -> {
+         var0.chatLinks = var2;
       });
-      CHAT_LINKS_PROMPT = new BooleanOption("options.chat.links.prompt", (var0) -> {
+      CHAT_LINKS_PROMPT = CycleOption.createOnOff("options.chat.links.prompt", (var0) -> {
          return var0.chatLinksPrompt;
-      }, (var0, var1) -> {
-         var0.chatLinksPrompt = var1;
+      }, (var0, var1, var2) -> {
+         var0.chatLinksPrompt = var2;
       });
-      DISCRETE_MOUSE_SCROLL = new BooleanOption("options.discrete_mouse_scroll", (var0) -> {
+      DISCRETE_MOUSE_SCROLL = CycleOption.createOnOff("options.discrete_mouse_scroll", (var0) -> {
          return var0.discreteMouseScroll;
-      }, (var0, var1) -> {
-         var0.discreteMouseScroll = var1;
+      }, (var0, var1, var2) -> {
+         var0.discreteMouseScroll = var2;
       });
-      ENABLE_VSYNC = new BooleanOption("options.vsync", (var0) -> {
+      ENABLE_VSYNC = CycleOption.createOnOff("options.vsync", (var0) -> {
          return var0.enableVsync;
-      }, (var0, var1) -> {
-         var0.enableVsync = var1;
+      }, (var0, var1, var2) -> {
+         var0.enableVsync = var2;
          if (Minecraft.getInstance().getWindow() != null) {
             Minecraft.getInstance().getWindow().updateVsync(var0.enableVsync);
          }
 
       });
-      ENTITY_SHADOWS = new BooleanOption("options.entityShadows", (var0) -> {
+      ENTITY_SHADOWS = CycleOption.createOnOff("options.entityShadows", (var0) -> {
          return var0.entityShadows;
-      }, (var0, var1) -> {
-         var0.entityShadows = var1;
+      }, (var0, var1, var2) -> {
+         var0.entityShadows = var2;
       });
-      FORCE_UNICODE_FONT = new BooleanOption("options.forceUnicodeFont", (var0) -> {
+      FORCE_UNICODE_FONT = CycleOption.createOnOff("options.forceUnicodeFont", (var0) -> {
          return var0.forceUnicodeFont;
-      }, (var0, var1) -> {
-         var0.forceUnicodeFont = var1;
-         Minecraft var2 = Minecraft.getInstance();
-         if (var2.getWindow() != null) {
-            var2.selectMainFont(var1);
+      }, (var0, var1, var2) -> {
+         var0.forceUnicodeFont = var2;
+         Minecraft var3 = Minecraft.getInstance();
+         if (var3.getWindow() != null) {
+            var3.selectMainFont(var2);
          }
 
       });
-      INVERT_MOUSE = new BooleanOption("options.invertMouse", (var0) -> {
+      INVERT_MOUSE = CycleOption.createOnOff("options.invertMouse", (var0) -> {
          return var0.invertYMouse;
-      }, (var0, var1) -> {
-         var0.invertYMouse = var1;
+      }, (var0, var1, var2) -> {
+         var0.invertYMouse = var2;
       });
-      REALMS_NOTIFICATIONS = new BooleanOption("options.realmsNotifications", (var0) -> {
+      REALMS_NOTIFICATIONS = CycleOption.createOnOff("options.realmsNotifications", (var0) -> {
          return var0.realmsNotifications;
-      }, (var0, var1) -> {
-         var0.realmsNotifications = var1;
+      }, (var0, var1, var2) -> {
+         var0.realmsNotifications = var2;
       });
-      REDUCED_DEBUG_INFO = new BooleanOption("options.reducedDebugInfo", (var0) -> {
+      REDUCED_DEBUG_INFO = CycleOption.createOnOff("options.reducedDebugInfo", (var0) -> {
          return var0.reducedDebugInfo;
-      }, (var0, var1) -> {
-         var0.reducedDebugInfo = var1;
+      }, (var0, var1, var2) -> {
+         var0.reducedDebugInfo = var2;
       });
-      SHOW_SUBTITLES = new BooleanOption("options.showSubtitles", (var0) -> {
+      SHOW_SUBTITLES = CycleOption.createOnOff("options.showSubtitles", (var0) -> {
          return var0.showSubtitles;
-      }, (var0, var1) -> {
-         var0.showSubtitles = var1;
+      }, (var0, var1, var2) -> {
+         var0.showSubtitles = var2;
       });
-      SNOOPER_ENABLED = new BooleanOption("options.snooper", (var0) -> {
+      SNOOPER_ENABLED = CycleOption.createOnOff("options.snooper", (var0) -> {
          if (var0.snooperEnabled) {
          }
 
          return false;
-      }, (var0, var1) -> {
-         var0.snooperEnabled = var1;
+      }, (var0, var1, var2) -> {
+         var0.snooperEnabled = var2;
       });
-      TOGGLE_CROUCH = new CycleOption("key.sneak", (var0, var1) -> {
-         var0.toggleCrouch = !var0.toggleCrouch;
-      }, (var0, var1) -> {
-         return var1.genericValueLabel(new TranslatableComponent(var0.toggleCrouch ? "options.key.toggle" : "options.key.hold"));
+      MOVEMENT_TOGGLE = new TranslatableComponent("options.key.toggle");
+      MOVEMENT_HOLD = new TranslatableComponent("options.key.hold");
+      TOGGLE_CROUCH = CycleOption.createBinaryOption("key.sneak", MOVEMENT_TOGGLE, MOVEMENT_HOLD, (var0) -> {
+         return var0.toggleCrouch;
+      }, (var0, var1, var2) -> {
+         var0.toggleCrouch = var2;
       });
-      TOGGLE_SPRINT = new CycleOption("key.sprint", (var0, var1) -> {
-         var0.toggleSprint = !var0.toggleSprint;
-      }, (var0, var1) -> {
-         return var1.genericValueLabel(new TranslatableComponent(var0.toggleSprint ? "options.key.toggle" : "options.key.hold"));
+      TOGGLE_SPRINT = CycleOption.createBinaryOption("key.sprint", MOVEMENT_TOGGLE, MOVEMENT_HOLD, (var0) -> {
+         return var0.toggleSprint;
+      }, (var0, var1, var2) -> {
+         var0.toggleSprint = var2;
       });
-      TOUCHSCREEN = new BooleanOption("options.touchscreen", (var0) -> {
+      TOUCHSCREEN = CycleOption.createOnOff("options.touchscreen", (var0) -> {
          return var0.touchscreen;
-      }, (var0, var1) -> {
-         var0.touchscreen = var1;
+      }, (var0, var1, var2) -> {
+         var0.touchscreen = var2;
       });
-      USE_FULLSCREEN = new BooleanOption("options.fullscreen", (var0) -> {
+      USE_FULLSCREEN = CycleOption.createOnOff("options.fullscreen", (var0) -> {
          return var0.fullscreen;
-      }, (var0, var1) -> {
-         var0.fullscreen = var1;
-         Minecraft var2 = Minecraft.getInstance();
-         if (var2.getWindow() != null && var2.getWindow().isFullscreen() != var0.fullscreen) {
-            var2.getWindow().toggleFullScreen();
-            var0.fullscreen = var2.getWindow().isFullscreen();
+      }, (var0, var1, var2) -> {
+         var0.fullscreen = var2;
+         Minecraft var3 = Minecraft.getInstance();
+         if (var3.getWindow() != null && var3.getWindow().isFullscreen() != var0.fullscreen) {
+            var3.getWindow().toggleFullScreen();
+            var0.fullscreen = var3.getWindow().isFullscreen();
          }
 
       });
-      VIEW_BOBBING = new BooleanOption("options.viewBobbing", (var0) -> {
+      VIEW_BOBBING = CycleOption.createOnOff("options.viewBobbing", (var0) -> {
          return var0.bobView;
-      }, (var0, var1) -> {
-         var0.bobView = var1;
+      }, (var0, var1, var2) -> {
+         var0.bobView = var2;
       });
    }
 }
