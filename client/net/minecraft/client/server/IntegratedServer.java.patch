--- net/minecraft/client/server/IntegratedServer.java
+++ net/minecraft/client/server/IntegratedServer.java
@@ -1,7 +1,8 @@
 package net.minecraft.client.server;
 
+import com.google.common.base.MoreObjects;
 import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.GameProfileRepository;
 import com.mojang.authlib.minecraft.MinecraftSessionService;
 import java.io.File;
@@ -10,54 +11,60 @@
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.Optional;
 import java.util.UUID;
 import java.util.function.BooleanSupplier;
+import javax.annotation.Nullable;
 import net.minecraft.CrashReport;
 import net.minecraft.SharedConstants;
+import net.minecraft.SystemReport;
 import net.minecraft.client.ClientBrandRetriever;
 import net.minecraft.client.Minecraft;
 import net.minecraft.core.RegistryAccess;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.ServerResources;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.server.level.progress.ChunkProgressListenerFactory;
 import net.minecraft.server.packs.repository.PackRepository;
 import net.minecraft.server.players.GameProfileCache;
+import net.minecraft.stats.Stats;
 import net.minecraft.util.profiling.ProfilerFiller;
 import net.minecraft.world.Snooper;
 import net.minecraft.world.level.GameType;
 import net.minecraft.world.level.storage.LevelStorageSource;
 import net.minecraft.world.level.storage.WorldData;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class IntegratedServer extends MinecraftServer {
+   public static final int CLIENT_VIEW_DISTANCE_OFFSET = -1;
    private static final Logger LOGGER = LogManager.getLogger();
    private final Minecraft minecraft;
    private boolean paused;
    private int publishedPort = -1;
+   @Nullable
+   private GameType publishedGameType;
    private LanServerPinger lanPinger;
    private UUID uuid;
 
    public IntegratedServer(Thread var1, Minecraft var2, RegistryAccess.RegistryHolder var3, LevelStorageSource.LevelStorageAccess var4, PackRepository var5, ServerResources var6, WorldData var7, MinecraftSessionService var8, GameProfileRepository var9, GameProfileCache var10, ChunkProgressListenerFactory var11) {
       super(var1, var3, var4, var7, var5, var2.getProxy(), var2.getFixerUpper(), var6, var8, var9, var10, var11);
       this.setSingleplayerName(var2.getUser().getName());
       this.setDemo(var2.isDemo());
-      this.setMaxBuildHeight(256);
       this.setPlayerList(new IntegratedPlayerList(this, this.registryHolder, this.playerDataStorage));
       this.minecraft = var2;
    }
 
    public boolean initServer() {
-      LOGGER.info("Starting integrated minecraft server version " + SharedConstants.getCurrentVersion().getName());
+      LOGGER.info("Starting integrated minecraft server version {}", SharedConstants.getCurrentVersion().getName());
       this.setUsesAuthentication(true);
       this.setPvpAllowed(true);
       this.setFlightAllowed(true);
       this.initializeKeyPair();
       this.loadLevel();
-      this.setMotd(this.getSingleplayerName() + " - " + this.getWorldData().getLevelName());
+      String var10001 = this.getSingleplayerName();
+      this.setMotd(var10001 + " - " + this.getWorldData().getLevelName());
       return true;
    }
 
    public void tickServer(BooleanSupplier var1) {
       boolean var2 = this.paused;
@@ -69,21 +76,33 @@
          this.getPlayerList().saveAll();
          this.saveAllChunks(false, false, false);
          var3.pop();
       }
 
-      if (!this.paused) {
+      if (this.paused) {
+         this.tickPaused();
+      } else {
          super.tickServer(var1);
          int var4 = Math.max(2, this.minecraft.options.renderDistance + -1);
          if (var4 != this.getPlayerList().getViewDistance()) {
             LOGGER.info("Changing view distance to {}, from {}", var4, this.getPlayerList().getViewDistance());
             this.getPlayerList().setViewDistance(var4);
          }
 
       }
    }
 
+   private void tickPaused() {
+      Iterator var1 = this.getPlayerList().getPlayers().iterator();
+
+      while(var1.hasNext()) {
+         ServerPlayer var2 = (ServerPlayer)var1.next();
+         var2.awardStat(Stats.TOTAL_WORLD_TIME);
+      }
+
+   }
+
    public boolean shouldRconBroadcast() {
       return true;
    }
 
    public boolean shouldInformAdmins() {
@@ -108,14 +127,13 @@
 
    public void onServerCrash(CrashReport var1) {
       this.minecraft.delayCrash(var1);
    }
 
-   public CrashReport fillReport(CrashReport var1) {
-      var1 = super.fillReport(var1);
-      var1.getSystemDetails().setDetail("Type", (Object)"Integrated Server (map_client.txt)");
-      var1.getSystemDetails().setDetail("Is Modded", () -> {
+   public SystemReport fillServerSystemReport(SystemReport var1) {
+      var1.setDetail("Type", "Integrated Server (map_client.txt)");
+      var1.setDetail("Is Modded", () -> {
          return (String)this.getModdedStatus().orElse("Probably not. Jar signature remains and both client + server brands are untouched.");
       });
       return var1;
    }
 
@@ -136,18 +154,22 @@
    public void populateSnooper(Snooper var1) {
       super.populateSnooper(var1);
       var1.setDynamicData("snooper_partner", this.minecraft.getSnooper().getToken());
    }
 
-   public boolean publishServer(GameType var1, boolean var2, int var3) {
+   public boolean isSnooperEnabled() {
+      return Minecraft.getInstance().isSnooperEnabled();
+   }
+
+   public boolean publishServer(@Nullable GameType var1, boolean var2, int var3) {
       try {
          this.getConnection().startTcpServerListener((InetAddress)null, var3);
          LOGGER.info("Started serving on {}", var3);
          this.publishedPort = var3;
-         this.lanPinger = new LanServerPinger(this.getMotd(), var3 + "");
+         this.lanPinger = new LanServerPinger(this.getMotd(), var3.makeConcatWithConstants<invokedynamic>(var3));
          this.lanPinger.start();
-         this.getPlayerList().setOverrideGameMode(var1);
+         this.publishedGameType = var1;
          this.getPlayerList().setAllowCheatsForAllPlayers(var2);
          int var4 = this.getProfilePermissions(this.minecraft.player.getGameProfile());
          this.minecraft.player.setPermissionLevel(var4);
          Iterator var5 = this.getPlayerList().getPlayers().iterator();
 
@@ -200,11 +222,11 @@
       return this.publishedPort;
    }
 
    public void setDefaultGameType(GameType var1) {
       super.setDefaultGameType(var1);
-      this.getPlayerList().setOverrideGameMode(var1);
+      this.publishedGameType = null;
    }
 
    public boolean isCommandBlockEnabled() {
       return true;
    }
@@ -230,6 +252,11 @@
    }
 
    public boolean forceSynchronousWrites() {
       return this.minecraft.options.syncWrites;
    }
+
+   @Nullable
+   public GameType getForcedGameType() {
+      return this.isPublished() ? (GameType)MoreObjects.firstNonNull(this.publishedGameType, this.worldData.getGameType()) : null;
+   }
 }
