--- net/minecraft/client/player/LocalPlayer.java
+++ net/minecraft/client/player/LocalPlayer.java
@@ -5,10 +5,11 @@
 import java.util.List;
 import java.util.UUID;
 import javax.annotation.Nullable;
 import net.minecraft.client.ClientRecipeBook;
 import net.minecraft.client.Minecraft;
+import net.minecraft.client.gui.screens.DeathScreen;
 import net.minecraft.client.gui.screens.Screen;
 import net.minecraft.client.gui.screens.inventory.AbstractContainerScreen;
 import net.minecraft.client.gui.screens.inventory.BookEditScreen;
 import net.minecraft.client.gui.screens.inventory.CommandBlockEditScreen;
 import net.minecraft.client.gui.screens.inventory.JigsawBlockEditScreen;
@@ -59,12 +60,12 @@
 import net.minecraft.world.entity.MoverType;
 import net.minecraft.world.entity.PlayerRideableJumping;
 import net.minecraft.world.entity.Pose;
 import net.minecraft.world.entity.vehicle.AbstractMinecart;
 import net.minecraft.world.entity.vehicle.Boat;
+import net.minecraft.world.inventory.ClickAction;
 import net.minecraft.world.item.ElytraItem;
-import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.crafting.Recipe;
 import net.minecraft.world.level.BaseCommandBlock;
 import net.minecraft.world.level.block.entity.CommandBlockEntity;
@@ -77,10 +78,15 @@
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.world.phys.shapes.VoxelShape;
 
 public class LocalPlayer extends AbstractClientPlayer {
+   private static final int POSITION_REMINDER_INTERVAL = 20;
+   private static final int WATER_VISION_MAX_TIME = 600;
+   private static final int WATER_VISION_QUICK_TIME = 100;
+   private static final float WATER_VISION_QUICK_PERCENT = 0.6F;
+   private static final double SUFFOCATING_COLLISION_CHECK_SCALE = 0.35D;
    public final ClientPacketListener connection;
    private final StatsCounter stats;
    private final ClientRecipeBook recipeBook;
    private final List<AmbientSoundHandler> ambientSoundHandlers = Lists.newArrayList();
    private int permissionLevel = 0;
@@ -140,17 +146,18 @@
    public boolean startRiding(Entity var1, boolean var2) {
       if (!super.startRiding(var1, var2)) {
          return false;
       } else {
          if (var1 instanceof AbstractMinecart) {
-            this.minecraft.getSoundManager().play(new RidingMinecartSoundInstance(this, (AbstractMinecart)var1));
+            this.minecraft.getSoundManager().play(new RidingMinecartSoundInstance(this, (AbstractMinecart)var1, true));
+            this.minecraft.getSoundManager().play(new RidingMinecartSoundInstance(this, (AbstractMinecart)var1, false));
          }
 
          if (var1 instanceof Boat) {
-            this.yRotO = var1.yRot;
-            this.yRot = var1.yRot;
-            this.setYHeadRot(var1.yRot);
+            this.yRotO = var1.getYRot();
+            this.setYRot(var1.getYRot());
+            this.setYHeadRot(var1.getYRot());
          }
 
          return true;
       }
    }
@@ -159,22 +166,22 @@
       super.removeVehicle();
       this.handsBusy = false;
    }
 
    public float getViewXRot(float var1) {
-      return this.xRot;
+      return this.getXRot();
    }
 
    public float getViewYRot(float var1) {
-      return this.isPassenger() ? super.getViewYRot(var1) : this.yRot;
+      return this.isPassenger() ? super.getViewYRot(var1) : this.getYRot();
    }
 
    public void tick() {
-      if (this.level.hasChunkAt(new BlockPos(this.getX(), 0.0D, this.getZ()))) {
+      if (this.level.hasChunkAt(this.getBlockX(), this.getBlockZ())) {
          super.tick();
          if (this.isPassenger()) {
-            this.connection.send((Packet)(new ServerboundMovePlayerPacket.Rot(this.yRot, this.xRot, this.onGround)));
+            this.connection.send((Packet)(new ServerboundMovePlayerPacket.Rot(this.getYRot(), this.getXRot(), this.onGround)));
             this.connection.send((Packet)(new ServerboundPlayerInputPacket(this.xxa, this.zza, this.input.jumping, this.input.shiftKeyDown)));
             Entity var1 = this.getRootVehicle();
             if (var1 != this && var1.isControlledByLocalInstance()) {
                this.connection.send((Packet)(new ServerboundMoveVehiclePacket(var1)));
             }
@@ -224,39 +231,39 @@
 
       if (this.isControlledCamera()) {
          double var17 = this.getX() - this.xLast;
          double var5 = this.getY() - this.yLast1;
          double var7 = this.getZ() - this.zLast;
-         double var9 = (double)(this.yRot - this.yRotLast);
-         double var11 = (double)(this.xRot - this.xRotLast);
+         double var9 = (double)(this.getYRot() - this.yRotLast);
+         double var11 = (double)(this.getXRot() - this.xRotLast);
          ++this.positionReminder;
          boolean var13 = var17 * var17 + var5 * var5 + var7 * var7 > 9.0E-4D || this.positionReminder >= 20;
          boolean var14 = var9 != 0.0D || var11 != 0.0D;
          if (this.isPassenger()) {
             Vec3 var15 = this.getDeltaMovement();
-            this.connection.send((Packet)(new ServerboundMovePlayerPacket.PosRot(var15.x, -999.0D, var15.z, this.yRot, this.xRot, this.onGround)));
+            this.connection.send((Packet)(new ServerboundMovePlayerPacket.PosRot(var15.x, -999.0D, var15.z, this.getYRot(), this.getXRot(), this.onGround)));
             var13 = false;
          } else if (var13 && var14) {
-            this.connection.send((Packet)(new ServerboundMovePlayerPacket.PosRot(this.getX(), this.getY(), this.getZ(), this.yRot, this.xRot, this.onGround)));
+            this.connection.send((Packet)(new ServerboundMovePlayerPacket.PosRot(this.getX(), this.getY(), this.getZ(), this.getYRot(), this.getXRot(), this.onGround)));
          } else if (var13) {
             this.connection.send((Packet)(new ServerboundMovePlayerPacket.Pos(this.getX(), this.getY(), this.getZ(), this.onGround)));
          } else if (var14) {
-            this.connection.send((Packet)(new ServerboundMovePlayerPacket.Rot(this.yRot, this.xRot, this.onGround)));
+            this.connection.send((Packet)(new ServerboundMovePlayerPacket.Rot(this.getYRot(), this.getXRot(), this.onGround)));
          } else if (this.lastOnGround != this.onGround) {
-            this.connection.send((Packet)(new ServerboundMovePlayerPacket(this.onGround)));
+            this.connection.send((Packet)(new ServerboundMovePlayerPacket.StatusOnly(this.onGround)));
          }
 
          if (var13) {
             this.xLast = this.getX();
             this.yLast1 = this.getY();
             this.zLast = this.getZ();
             this.positionReminder = 0;
          }
 
          if (var14) {
-            this.yRotLast = this.yRot;
-            this.xRotLast = this.xRot;
+            this.yRotLast = this.getYRot();
+            this.xRotLast = this.getXRot();
          }
 
          this.lastOnGround = this.onGround;
          this.autoJumpEnabled = this.minecraft.options.autoJump;
       }
@@ -264,11 +271,11 @@
    }
 
    public boolean drop(boolean var1) {
       ServerboundPlayerActionPacket.Action var2 = var1 ? ServerboundPlayerActionPacket.Action.DROP_ALL_ITEMS : ServerboundPlayerActionPacket.Action.DROP_ITEM;
       this.connection.send((Packet)(new ServerboundPlayerActionPacket(var2, BlockPos.ZERO, Direction.DOWN)));
-      return this.inventory.removeItem(this.inventory.selected, var1 && !this.inventory.getSelected().isEmpty() ? this.inventory.getSelected().getCount() : 1) != ItemStack.EMPTY;
+      return this.getInventory().removeItem(this.getInventory().selected, var1 && !this.getInventory().getSelected().isEmpty() ? this.getInventory().getSelected().getCount() : 1) != ItemStack.EMPTY;
    }
 
    public void chat(String var1) {
       this.connection.send((Packet)(new ServerboundChatPacket(var1)));
    }
@@ -292,11 +299,10 @@
       this.connection.send((Packet)(new ServerboundContainerClosePacket(this.containerMenu.containerId)));
       this.clientSideCloseContainer();
    }
 
    public void clientSideCloseContainer() {
-      this.inventory.setCarried(ItemStack.EMPTY);
       super.closeContainer();
       this.minecraft.setScreen((Screen)null);
    }
 
    public void hurtTo(float var1) {
@@ -307,13 +313,12 @@
             if (var2 < 0.0F) {
                this.invulnerableTime = 10;
             }
          } else {
             this.lastHurt = var2;
-            this.setHealth(this.getHealth());
             this.invulnerableTime = 20;
-            this.actuallyHurt(DamageSource.GENERIC, var2);
+            this.setHealth(var1);
             this.hurtDuration = 10;
             this.hurtTime = this.hurtDuration;
          }
       } else {
          this.setHealth(var1);
@@ -321,27 +326,27 @@
       }
 
    }
 
    public void onUpdateAbilities() {
-      this.connection.send((Packet)(new ServerboundPlayerAbilitiesPacket(this.abilities)));
+      this.connection.send((Packet)(new ServerboundPlayerAbilitiesPacket(this.getAbilities())));
    }
 
    public boolean isLocalPlayer() {
       return true;
    }
 
    public boolean isSuppressingSlidingDownLadder() {
-      return !this.abilities.flying && super.isSuppressingSlidingDownLadder();
+      return !this.getAbilities().flying && super.isSuppressingSlidingDownLadder();
    }
 
    public boolean canSpawnSprintParticle() {
-      return !this.abilities.flying && super.canSpawnSprintParticle();
+      return !this.getAbilities().flying && super.canSpawnSprintParticle();
    }
 
    public boolean canSpawnSoulSpeedParticle() {
-      return !this.abilities.flying && super.canSpawnSoulSpeedParticle();
+      return !this.getAbilities().flying && super.canSpawnSoulSpeedParticle();
    }
 
    protected void sendRidingJump() {
       this.connection.send((Packet)(new ServerboundPlayerCommandPacket(this, ServerboundPlayerCommandPacket.Action.START_RIDING_JUMP, Mth.floor(this.getJumpRidingScale() * 100.0F))));
    }
@@ -425,11 +430,11 @@
    }
 
    private boolean suffocatesAt(BlockPos var1) {
       AABB var2 = this.getBoundingBox();
       AABB var3 = (new AABB((double)var1.getX(), var2.minY, (double)var1.getZ(), (double)var1.getX() + 1.0D, var2.maxY, (double)var1.getZ() + 1.0D)).deflate(1.0E-7D);
-      return !this.level.noBlockCollision(this, var3, (var1x, var2x) -> {
+      return this.level.hasBlockCollision(this, var3, (var1x, var2x) -> {
          return var1x.isSuffocating(this.level, var2x);
       });
    }
 
    public void setSprinting(boolean var1) {
@@ -524,11 +529,11 @@
    public float getJumpRidingScale() {
       return this.jumpRidingScale;
    }
 
    public void openTextEdit(SignBlockEntity var1) {
-      this.minecraft.setScreen(new SignEditScreen(var1));
+      this.minecraft.setScreen(new SignEditScreen(var1, this.minecraft.isTextFilteringEnabled()));
    }
 
    public void openMinecartCommandBlock(BaseCommandBlock var1) {
       this.minecraft.setScreen(new MinecartCommandBlockEditScreen(var1));
    }
@@ -544,12 +549,11 @@
    public void openJigsawBlock(JigsawBlockEntity var1) {
       this.minecraft.setScreen(new JigsawBlockEditScreen(var1));
    }
 
    public void openItemGui(ItemStack var1, InteractionHand var2) {
-      Item var3 = var1.getItem();
-      if (var3 == Items.WRITABLE_BOOK) {
+      if (var1.is(Items.WRITABLE_BOOK)) {
          this.minecraft.setScreen(new BookEditScreen(this, var1, var2));
       }
 
    }
 
@@ -579,31 +583,49 @@
          this.xxa = this.input.leftImpulse;
          this.zza = this.input.forwardImpulse;
          this.jumping = this.input.jumping;
          this.yBobO = this.yBob;
          this.xBobO = this.xBob;
-         this.xBob = (float)((double)this.xBob + (double)(this.xRot - this.xBob) * 0.5D);
-         this.yBob = (float)((double)this.yBob + (double)(this.yRot - this.yBob) * 0.5D);
+         this.xBob = (float)((double)this.xBob + (double)(this.getXRot() - this.xBob) * 0.5D);
+         this.yBob = (float)((double)this.yBob + (double)(this.getYRot() - this.yBob) * 0.5D);
       }
 
    }
 
    protected boolean isControlledCamera() {
       return this.minecraft.getCameraEntity() == this;
    }
 
+   public void resetPos() {
+      this.setPose(Pose.STANDING);
+      if (this.level != null) {
+         for(double var1 = this.getY(); var1 > (double)this.level.getMinBuildHeight() && var1 < (double)this.level.getMaxBuildHeight(); ++var1) {
+            this.setPos(this.getX(), var1, this.getZ());
+            if (this.level.noCollision(this)) {
+               break;
+            }
+         }
+
+         this.setDeltaMovement(Vec3.ZERO);
+         this.setXRot(0.0F);
+      }
+
+      this.setHealth(this.getMaxHealth());
+      this.deathTime = 0;
+   }
+
    public void aiStep() {
       ++this.sprintTime;
       if (this.sprintTriggerTime > 0) {
          --this.sprintTriggerTime;
       }
 
       this.handleNetherPortalClient();
       boolean var1 = this.input.jumping;
       boolean var2 = this.input.shiftKeyDown;
       boolean var3 = this.hasEnoughImpulseToStartSprinting();
-      this.crouching = !this.abilities.flying && !this.isSwimming() && this.canEnterPose(Pose.CROUCHING) && (this.isShiftKeyDown() || !this.isSleeping() && !this.canEnterPose(Pose.STANDING));
+      this.crouching = !this.getAbilities().flying && !this.isSwimming() && this.canEnterPose(Pose.CROUCHING) && (this.isShiftKeyDown() || !this.isSleeping() && !this.canEnterPose(Pose.STANDING));
       this.input.tick(this.isMovingSlowly());
       this.minecraft.getTutorial().onInput(this.input);
       if (this.isUsingItem() && !this.isPassenger()) {
          Input var10000 = this.input;
          var10000.leftImpulse *= 0.2F;
@@ -628,11 +650,11 @@
 
       if (var2) {
          this.sprintTriggerTime = 0;
       }
 
-      boolean var5 = (float)this.getFoodData().getFoodLevel() > 6.0F || this.abilities.mayfly;
+      boolean var5 = (float)this.getFoodData().getFoodLevel() > 6.0F || this.getAbilities().mayfly;
       if ((this.onGround || this.isUnderWater()) && !var2 && !var3 && this.hasEnoughImpulseToStartSprinting() && !this.isSprinting() && var5 && !this.isUsingItem() && !this.hasEffect(MobEffects.BLINDNESS)) {
          if (this.sprintTriggerTime <= 0 && !this.minecraft.options.keySprint.isDown()) {
             this.sprintTriggerTime = 7;
          } else {
             this.setSprinting(true);
@@ -655,32 +677,32 @@
             this.setSprinting(false);
          }
       }
 
       var6 = false;
-      if (this.abilities.mayfly) {
+      if (this.getAbilities().mayfly) {
          if (this.minecraft.gameMode.isAlwaysFlying()) {
-            if (!this.abilities.flying) {
-               this.abilities.flying = true;
+            if (!this.getAbilities().flying) {
+               this.getAbilities().flying = true;
                var6 = true;
                this.onUpdateAbilities();
             }
          } else if (!var1 && this.input.jumping && !var4) {
             if (this.jumpTriggerTime == 0) {
                this.jumpTriggerTime = 7;
             } else if (!this.isSwimming()) {
-               this.abilities.flying = !this.abilities.flying;
+               this.getAbilities().flying = !this.getAbilities().flying;
                var6 = true;
                this.onUpdateAbilities();
                this.jumpTriggerTime = 0;
             }
          }
       }
 
-      if (this.input.jumping && !var6 && !var1 && !this.abilities.flying && !this.isPassenger() && !this.onClimbable()) {
+      if (this.input.jumping && !var6 && !var1 && !this.getAbilities().flying && !this.isPassenger() && !this.onClimbable()) {
          ItemStack var8 = this.getItemBySlot(EquipmentSlot.CHEST);
-         if (var8.getItem() == Items.ELYTRA && ElytraItem.isFlyEnabled(var8) && this.tryToStartFallFlying()) {
+         if (var8.is(Items.ELYTRA) && ElytraItem.isFlyEnabled(var8) && this.tryToStartFallFlying()) {
             this.connection.send((Packet)(new ServerboundPlayerCommandPacket(this, ServerboundPlayerCommandPacket.Action.START_FALL_FLYING)));
          }
       }
 
       this.wasFallFlying = this.isFallFlying();
@@ -689,28 +711,28 @@
       }
 
       int var9;
       if (this.isEyeInFluid(FluidTags.WATER)) {
          var9 = this.isSpectator() ? 10 : 1;
-         this.waterVisionTime = Mth.clamp(this.waterVisionTime + var9, 0, 600);
+         this.waterVisionTime = Mth.clamp((int)(this.waterVisionTime + var9), (int)0, (int)600);
       } else if (this.waterVisionTime > 0) {
          this.isEyeInFluid(FluidTags.WATER);
-         this.waterVisionTime = Mth.clamp(this.waterVisionTime - 10, 0, 600);
+         this.waterVisionTime = Mth.clamp((int)(this.waterVisionTime - 10), (int)0, (int)600);
       }
 
-      if (this.abilities.flying && this.isControlledCamera()) {
+      if (this.getAbilities().flying && this.isControlledCamera()) {
          var9 = 0;
          if (this.input.shiftKeyDown) {
             --var9;
          }
 
          if (this.input.jumping) {
             ++var9;
          }
 
          if (var9 != 0) {
-            this.setDeltaMovement(this.getDeltaMovement().add(0.0D, (double)((float)var9 * this.abilities.getFlyingSpeed() * 3.0F), 0.0D));
+            this.setDeltaMovement(this.getDeltaMovement().add(0.0D, (double)((float)var9 * this.getAbilities().getFlyingSpeed() * 3.0F), 0.0D));
          }
       }
 
       if (this.isRidingJumpable()) {
          PlayerRideableJumping var10 = (PlayerRideableJumping)this.getVehicle();
@@ -739,21 +761,29 @@
       } else {
          this.jumpRidingScale = 0.0F;
       }
 
       super.aiStep();
-      if (this.onGround && this.abilities.flying && !this.minecraft.gameMode.isAlwaysFlying()) {
-         this.abilities.flying = false;
+      if (this.onGround && this.getAbilities().flying && !this.minecraft.gameMode.isAlwaysFlying()) {
+         this.getAbilities().flying = false;
          this.onUpdateAbilities();
       }
 
    }
 
+   protected void tickDeath() {
+      ++this.deathTime;
+      if (this.deathTime == 20) {
+         this.remove(Entity.RemovalReason.KILLED);
+      }
+
+   }
+
    private void handleNetherPortalClient() {
       this.oPortalTime = this.portalTime;
       if (this.isInsidePortal) {
-         if (this.minecraft.screen != null && !this.minecraft.screen.isPauseScreen()) {
+         if (this.minecraft.screen != null && !this.minecraft.screen.isPauseScreen() && !(this.minecraft.screen instanceof DeathScreen)) {
             if (this.minecraft.screen instanceof AbstractContainerScreen) {
                this.closeContainer();
             }
 
             this.minecraft.setScreen((Screen)null);
@@ -833,12 +863,12 @@
          float var11;
          if (var7 <= 0.001F) {
             Vec2 var8 = this.input.getMoveVector();
             float var9 = var6 * var8.x;
             float var10 = var6 * var8.y;
-            var11 = Mth.sin(this.yRot * 0.017453292F);
-            float var12 = Mth.cos(this.yRot * 0.017453292F);
+            var11 = Mth.sin(this.getYRot() * 0.017453292F);
+            float var12 = Mth.cos(this.getYRot() * 0.017453292F);
             var5 = new Vec3((double)(var9 * var12 - var10 * var11), var5.y, (double)(var10 * var12 + var9 * var11));
             var7 = (float)var5.lengthSqr();
             if (var7 <= 0.001F) {
                return;
             }
@@ -984,15 +1014,19 @@
       }
    }
 
    public Vec3 getRopeHoldPosition(float var1) {
       if (this.minecraft.options.getCameraType().isFirstPerson()) {
-         float var2 = Mth.lerp(var1 * 0.5F, this.yRot, this.yRotO) * 0.017453292F;
-         float var3 = Mth.lerp(var1 * 0.5F, this.xRot, this.xRotO) * 0.017453292F;
+         float var2 = Mth.lerp(var1 * 0.5F, this.getYRot(), this.yRotO) * 0.017453292F;
+         float var3 = Mth.lerp(var1 * 0.5F, this.getXRot(), this.xRotO) * 0.017453292F;
          double var4 = this.getMainArm() == HumanoidArm.RIGHT ? -1.0D : 1.0D;
          Vec3 var6 = new Vec3(0.39D * var4, -0.6D, 0.3D);
          return var6.xRot(-var3).yRot(-var2).add(this.getEyePosition(var1));
       } else {
          return super.getRopeHoldPosition(var1);
       }
    }
+
+   public void updateTutorialInventoryAction(ItemStack var1, ItemStack var2, ClickAction var3) {
+      this.minecraft.getTutorial().onInventoryAction(var1, var2, var3);
+   }
 }
