--- net/minecraft/client/tutorial/FindTreeTutorialStepInstance.java
+++ net/minecraft/client/tutorial/FindTreeTutorialStepInstance.java
@@ -8,18 +8,18 @@
 import net.minecraft.client.player.LocalPlayer;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.stats.Stats;
 import net.minecraft.world.item.ItemStack;
-import net.minecraft.world.level.GameType;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.HitResult;
 
 public class FindTreeTutorialStepInstance implements TutorialStepInstance {
+   private static final int HINT_DELAY = 6000;
    private static final Set<Block> TREE_BLOCKS;
    private static final Component TITLE;
    private static final Component DESCRIPTION;
    private final Tutorial tutorial;
    private TutorialToast toast;
@@ -29,21 +29,21 @@
       this.tutorial = var1;
    }
 
    public void tick() {
       ++this.timeWaiting;
-      if (this.tutorial.getGameMode() != GameType.SURVIVAL) {
+      if (!this.tutorial.isSurvival()) {
          this.tutorial.setStep(TutorialSteps.NONE);
       } else {
          if (this.timeWaiting == 1) {
             LocalPlayer var1 = this.tutorial.getMinecraft().player;
             if (var1 != null) {
                Iterator var2 = TREE_BLOCKS.iterator();
 
                while(var2.hasNext()) {
                   Block var3 = (Block)var2.next();
-                  if (var1.inventory.contains(new ItemStack(var3))) {
+                  if (var1.getInventory().contains(new ItemStack(var3))) {
                      this.tutorial.setStep(TutorialSteps.CRAFT_PLANKS);
                      return;
                   }
                }
 
@@ -88,11 +88,11 @@
          if (!var2.hasNext()) {
             return;
          }
 
          var3 = (Block)var2.next();
-      } while(var1.getItem() != var3.asItem());
+      } while(!var1.is(var3.asItem()));
 
       this.tutorial.setStep(TutorialSteps.CRAFT_PLANKS);
    }
 
    public static boolean hasPunchedTreesPreviously(LocalPlayer var0) {
@@ -109,10 +109,10 @@
 
       return true;
    }
 
    static {
-      TREE_BLOCKS = Sets.newHashSet(new Block[]{Blocks.OAK_LOG, Blocks.SPRUCE_LOG, Blocks.BIRCH_LOG, Blocks.JUNGLE_LOG, Blocks.ACACIA_LOG, Blocks.DARK_OAK_LOG, Blocks.WARPED_STEM, Blocks.CRIMSON_STEM, Blocks.OAK_WOOD, Blocks.SPRUCE_WOOD, Blocks.BIRCH_WOOD, Blocks.JUNGLE_WOOD, Blocks.ACACIA_WOOD, Blocks.DARK_OAK_WOOD, Blocks.WARPED_HYPHAE, Blocks.CRIMSON_HYPHAE, Blocks.OAK_LEAVES, Blocks.SPRUCE_LEAVES, Blocks.BIRCH_LEAVES, Blocks.JUNGLE_LEAVES, Blocks.ACACIA_LEAVES, Blocks.DARK_OAK_LEAVES, Blocks.NETHER_WART_BLOCK, Blocks.WARPED_WART_BLOCK});
+      TREE_BLOCKS = Sets.newHashSet(new Block[]{Blocks.OAK_LOG, Blocks.SPRUCE_LOG, Blocks.BIRCH_LOG, Blocks.JUNGLE_LOG, Blocks.ACACIA_LOG, Blocks.DARK_OAK_LOG, Blocks.WARPED_STEM, Blocks.CRIMSON_STEM, Blocks.OAK_WOOD, Blocks.SPRUCE_WOOD, Blocks.BIRCH_WOOD, Blocks.JUNGLE_WOOD, Blocks.ACACIA_WOOD, Blocks.DARK_OAK_WOOD, Blocks.WARPED_HYPHAE, Blocks.CRIMSON_HYPHAE, Blocks.OAK_LEAVES, Blocks.SPRUCE_LEAVES, Blocks.BIRCH_LEAVES, Blocks.JUNGLE_LEAVES, Blocks.ACACIA_LEAVES, Blocks.DARK_OAK_LEAVES, Blocks.NETHER_WART_BLOCK, Blocks.WARPED_WART_BLOCK, Blocks.AZALEA_LEAVES, Blocks.AZALEA_LEAVES_FLOWERS});
       TITLE = new TranslatableComponent("tutorial.find_tree.title");
       DESCRIPTION = new TranslatableComponent("tutorial.find_tree.description");
    }
 }
