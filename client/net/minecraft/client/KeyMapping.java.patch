--- net/minecraft/client/KeyMapping.java
+++ net/minecraft/client/KeyMapping.java
@@ -3,10 +3,11 @@
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import com.mojang.blaze3d.platform.InputConstants;
 import java.util.Iterator;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Set;
 import java.util.function.Supplier;
 import net.minecraft.Util;
 import net.minecraft.client.resources.language.I18n;
 import net.minecraft.network.chat.Component;
@@ -14,10 +15,17 @@
 
 public class KeyMapping implements Comparable<KeyMapping> {
    private static final Map<String, KeyMapping> ALL = Maps.newHashMap();
    private static final Map<InputConstants.Key, KeyMapping> MAP = Maps.newHashMap();
    private static final Set<String> CATEGORIES = Sets.newHashSet();
+   public static final String CATEGORY_MOVEMENT = "key.categories.movement";
+   public static final String CATEGORY_MISC = "key.categories.misc";
+   public static final String CATEGORY_MULTIPLAYER = "key.categories.multiplayer";
+   public static final String CATEGORY_GAMEPLAY = "key.categories.gameplay";
+   public static final String CATEGORY_INVENTORY = "key.categories.inventory";
+   public static final String CATEGORY_INTERFACE = "key.categories.ui";
+   public static final String CATEGORY_CREATIVE = "key.categories.creative";
    private static final Map<String, Integer> CATEGORY_SORT_ORDER = (Map)Util.make(Maps.newHashMap(), (var0) -> {
       var0.put("key.categories.movement", 1);
       var0.put("key.categories.gameplay", 2);
       var0.put("key.categories.inventory", 3);
       var0.put("key.categories.creative", 4);
@@ -133,13 +141,18 @@
       return this.category.equals(var1.category) ? I18n.get(this.name).compareTo(I18n.get(var1.name)) : ((Integer)CATEGORY_SORT_ORDER.get(this.category)).compareTo((Integer)CATEGORY_SORT_ORDER.get(var1.category));
    }
 
    public static Supplier<Component> createNameSupplier(String var0) {
       KeyMapping var1 = (KeyMapping)ALL.get(var0);
-      return var1 == null ? () -> {
-         return new TranslatableComponent(var0);
-      } : var1::getTranslatedKeyMessage;
+      if (var1 == null) {
+         return () -> {
+            return new TranslatableComponent(var0);
+         };
+      } else {
+         Objects.requireNonNull(var1);
+         return var1::getTranslatedKeyMessage;
+      }
    }
 
    public boolean same(KeyMapping var1) {
       return this.key.equals(var1.key);
    }
