--- net/minecraft/client/Options.java
+++ net/minecraft/client/Options.java
@@ -1,10 +1,9 @@
 package net.minecraft.client;
 
 import com.google.common.base.Charsets;
 import com.google.common.base.Splitter;
-import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import com.google.common.io.Files;
 import com.google.gson.Gson;
@@ -162,21 +161,19 @@
       this.ambientOcclusion = AmbientOcclusionStatus.MAX;
       this.resourcePacks = Lists.newArrayList();
       this.incompatibleResourcePacks = Lists.newArrayList();
       this.chatVisibility = ChatVisiblity.FULL;
       this.chatOpacity = 1.0D;
-      this.chatLineSpacing = 0.0D;
       this.textBackgroundOpacity = 0.5D;
       this.pauseOnLostFocus = true;
       this.modelParts = Sets.newHashSet(PlayerModelPart.values());
       this.mainHand = HumanoidArm.RIGHT;
       this.heldItemTooltips = true;
       this.chatScale = 1.0D;
       this.chatWidth = 1.0D;
       this.chatHeightUnfocused = 0.44366195797920227D;
       this.chatHeightFocused = 1.0D;
-      this.chatDelay = 0.0D;
       this.mipmapLevels = 4;
       this.sourceVolumes = Maps.newEnumMap(SoundSource.class);
       this.useNativeTransport = true;
       this.attackIndicator = AttackIndicatorStatus.CROSSHAIR;
       this.tutorialStep = TutorialSteps.MOVEMENT;
@@ -306,11 +303,11 @@
 
          }
 
          CompoundTag var21 = this.dataFix(var1);
          if (!var21.contains("graphicsMode") && var21.contains("fancyGraphics")) {
-            if ("true".equals(var21.getString("fancyGraphics"))) {
+            if (isTrue(var21.getString("fancyGraphics"))) {
                this.graphicsMode = GraphicsStatus.FANCY;
             } else {
                this.graphicsMode = GraphicsStatus.FAST;
             }
          }
@@ -321,83 +318,83 @@
             String var4 = (String)var22.next();
             String var5 = var21.getString(var4);
 
             try {
                if ("autoJump".equals(var4)) {
-                  Option.AUTO_JUMP.set(this, var5);
+                  this.autoJump = isTrue(var5);
                }
 
                if ("autoSuggestions".equals(var4)) {
-                  Option.AUTO_SUGGESTIONS.set(this, var5);
+                  this.autoSuggestions = isTrue(var5);
                }
 
                if ("chatColors".equals(var4)) {
-                  Option.CHAT_COLOR.set(this, var5);
+                  this.chatColors = isTrue(var5);
                }
 
                if ("chatLinks".equals(var4)) {
-                  Option.CHAT_LINKS.set(this, var5);
+                  this.chatLinks = isTrue(var5);
                }
 
                if ("chatLinksPrompt".equals(var4)) {
-                  Option.CHAT_LINKS_PROMPT.set(this, var5);
+                  this.chatLinksPrompt = isTrue(var5);
                }
 
                if ("enableVsync".equals(var4)) {
-                  Option.ENABLE_VSYNC.set(this, var5);
+                  this.enableVsync = isTrue(var5);
                }
 
                if ("entityShadows".equals(var4)) {
-                  Option.ENTITY_SHADOWS.set(this, var5);
+                  this.entityShadows = isTrue(var5);
                }
 
                if ("forceUnicodeFont".equals(var4)) {
-                  Option.FORCE_UNICODE_FONT.set(this, var5);
+                  this.forceUnicodeFont = isTrue(var5);
                }
 
                if ("discrete_mouse_scroll".equals(var4)) {
-                  Option.DISCRETE_MOUSE_SCROLL.set(this, var5);
+                  this.discreteMouseScroll = isTrue(var5);
                }
 
                if ("invertYMouse".equals(var4)) {
-                  Option.INVERT_MOUSE.set(this, var5);
+                  this.invertYMouse = isTrue(var5);
                }
 
                if ("realmsNotifications".equals(var4)) {
-                  Option.REALMS_NOTIFICATIONS.set(this, var5);
+                  this.realmsNotifications = isTrue(var5);
                }
 
                if ("reducedDebugInfo".equals(var4)) {
-                  Option.REDUCED_DEBUG_INFO.set(this, var5);
+                  this.reducedDebugInfo = isTrue(var5);
                }
 
                if ("showSubtitles".equals(var4)) {
-                  Option.SHOW_SUBTITLES.set(this, var5);
+                  this.showSubtitles = isTrue(var5);
                }
 
                if ("snooperEnabled".equals(var4)) {
-                  Option.SNOOPER_ENABLED.set(this, var5);
+                  this.snooperEnabled = isTrue(var5);
                }
 
                if ("touchscreen".equals(var4)) {
-                  Option.TOUCHSCREEN.set(this, var5);
+                  this.touchscreen = isTrue(var5);
                }
 
                if ("fullscreen".equals(var4)) {
-                  Option.USE_FULLSCREEN.set(this, var5);
+                  this.fullscreen = isTrue(var5);
                }
 
                if ("bobView".equals(var4)) {
-                  Option.VIEW_BOBBING.set(this, var5);
+                  this.bobView = isTrue(var5);
                }
 
                if ("toggleCrouch".equals(var4)) {
-                  this.toggleCrouch = "true".equals(var5);
+                  this.toggleCrouch = isTrue(var5);
                }
 
                if ("toggleSprint".equals(var4)) {
-                  this.toggleSprint = "true".equals(var5);
+                  this.toggleSprint = isTrue(var5);
                }
 
                if ("mouseSensitivity".equals(var4)) {
                   this.sensitivity = (double)readFloat(var5);
                }
@@ -452,23 +449,23 @@
                if ("tutorialStep".equals(var4)) {
                   this.tutorialStep = TutorialSteps.getByName(var5);
                }
 
                if ("ao".equals(var4)) {
-                  if ("true".equals(var5)) {
+                  if (isTrue(var5)) {
                      this.ambientOcclusion = AmbientOcclusionStatus.MAX;
-                  } else if ("false".equals(var5)) {
+                  } else if (isFalse(var5)) {
                      this.ambientOcclusion = AmbientOcclusionStatus.OFF;
                   } else {
                      this.ambientOcclusion = AmbientOcclusionStatus.byId(Integer.parseInt(var5));
                   }
                }
 
                if ("renderClouds".equals(var4)) {
-                  if ("true".equals(var5)) {
+                  if (isTrue(var5)) {
                      this.renderClouds = CloudStatus.FANCY;
-                  } else if ("false".equals(var5)) {
+                  } else if (isFalse(var5)) {
                      this.renderClouds = CloudStatus.OFF;
                   } else if ("fast".equals(var5)) {
                      this.renderClouds = CloudStatus.FAST;
                   }
                }
@@ -514,27 +511,27 @@
                if ("textBackgroundOpacity".equals(var4)) {
                   this.textBackgroundOpacity = (double)readFloat(var5);
                }
 
                if ("backgroundForChatOnly".equals(var4)) {
-                  this.backgroundForChatOnly = "true".equals(var5);
+                  this.backgroundForChatOnly = isTrue(var5);
                }
 
                if ("fullscreenResolution".equals(var4)) {
                   this.fullscreenVideoModeString = var5;
                }
 
                if ("hideServerAddress".equals(var4)) {
-                  this.hideServerAddress = "true".equals(var5);
+                  this.hideServerAddress = isTrue(var5);
                }
 
                if ("advancedItemTooltips".equals(var4)) {
-                  this.advancedItemTooltips = "true".equals(var5);
+                  this.advancedItemTooltips = isTrue(var5);
                }
 
                if ("pauseOnLostFocus".equals(var4)) {
-                  this.pauseOnLostFocus = "true".equals(var5);
+                  this.pauseOnLostFocus = isTrue(var5);
                }
 
                if ("overrideHeight".equals(var4)) {
                   this.overrideHeight = Integer.parseInt(var5);
                }
@@ -542,11 +539,11 @@
                if ("overrideWidth".equals(var4)) {
                   this.overrideWidth = Integer.parseInt(var5);
                }
 
                if ("heldItemTooltips".equals(var4)) {
-                  this.heldItemTooltips = "true".equals(var5);
+                  this.heldItemTooltips = isTrue(var5);
                }
 
                if ("chatHeightFocused".equals(var4)) {
                   this.chatHeightFocused = (double)readFloat(var5);
                }
@@ -570,11 +567,11 @@
                if ("mipmapLevels".equals(var4)) {
                   this.mipmapLevels = Integer.parseInt(var5);
                }
 
                if ("useNativeTransport".equals(var4)) {
-                  this.useNativeTransport = "true".equals(var5);
+                  this.useNativeTransport = isTrue(var5);
                }
 
                if ("mainHand".equals(var4)) {
                   this.mainHand = "left".equals(var5) ? HumanoidArm.LEFT : HumanoidArm.RIGHT;
                }
@@ -590,19 +587,19 @@
                if ("mouseWheelSensitivity".equals(var4)) {
                   this.mouseWheelSensitivity = (double)readFloat(var5);
                }
 
                if ("rawMouseInput".equals(var4)) {
-                  this.rawMouseInput = "true".equals(var5);
+                  this.rawMouseInput = isTrue(var5);
                }
 
                if ("glDebugVerbosity".equals(var4)) {
                   this.glDebugVerbosity = Integer.parseInt(var5);
                }
 
                if ("skipMultiplayerWarning".equals(var4)) {
-                  this.skipMultiplayerWarning = "true".equals(var5);
+                  this.skipMultiplayerWarning = isTrue(var5);
                }
 
                if ("hideMatchedNames".equals(var4)) {
                   this.hideMatchedNames = "true".equals(var5);
                }
@@ -610,11 +607,11 @@
                if ("joinedFirstServer".equals(var4)) {
                   this.joinedFirstServer = "true".equals(var5);
                }
 
                if ("syncChunkWrites".equals(var4)) {
-                  this.syncWrites = "true".equals(var5);
+                  this.syncWrites = isTrue(var5);
                }
 
                KeyMapping[] var6 = this.keyMappings;
                int var7 = var6.length;
 
@@ -640,11 +637,11 @@
                var7 = var24.length;
 
                for(var8 = 0; var8 < var7; ++var8) {
                   PlayerModelPart var26 = var24[var8];
                   if (var4.equals("modelPart_" + var26.getId())) {
-                     this.setModelPart(var26, "true".equals(var5));
+                     this.setModelPart(var26, isTrue(var5));
                   }
                }
             } catch (Exception var19) {
                LOGGER.warn("Skipping bad option: {}:{}", var4, var5);
             }
@@ -655,10 +652,18 @@
          LOGGER.error("Failed to load options", var20);
       }
 
    }
 
+   private static boolean isTrue(String var0) {
+      return "true".equals(var0);
+   }
+
+   private static boolean isFalse(String var0) {
+      return "false".equals(var0);
+   }
+
    private CompoundTag dataFix(CompoundTag var1) {
       int var2 = 0;
 
       try {
          var2 = Integer.parseInt(var1.getString("version"));
@@ -667,41 +672,41 @@
 
       return NbtUtils.update(this.minecraft.getFixerUpper(), DataFixTypes.OPTIONS, var1, var2);
    }
 
    private static float readFloat(String var0) {
-      if ("true".equals(var0)) {
+      if (isTrue(var0)) {
          return 1.0F;
       } else {
-         return "false".equals(var0) ? 0.0F : Float.parseFloat(var0);
+         return isFalse(var0) ? 0.0F : Float.parseFloat(var0);
       }
    }
 
    public void save() {
       try {
          PrintWriter var1 = new PrintWriter(new OutputStreamWriter(new FileOutputStream(this.optionsFile), StandardCharsets.UTF_8));
          Throwable var2 = null;
 
          try {
             var1.println("version:" + SharedConstants.getCurrentVersion().getWorldVersion());
-            var1.println("autoJump:" + Option.AUTO_JUMP.get(this));
-            var1.println("autoSuggestions:" + Option.AUTO_SUGGESTIONS.get(this));
-            var1.println("chatColors:" + Option.CHAT_COLOR.get(this));
-            var1.println("chatLinks:" + Option.CHAT_LINKS.get(this));
-            var1.println("chatLinksPrompt:" + Option.CHAT_LINKS_PROMPT.get(this));
-            var1.println("enableVsync:" + Option.ENABLE_VSYNC.get(this));
-            var1.println("entityShadows:" + Option.ENTITY_SHADOWS.get(this));
-            var1.println("forceUnicodeFont:" + Option.FORCE_UNICODE_FONT.get(this));
-            var1.println("discrete_mouse_scroll:" + Option.DISCRETE_MOUSE_SCROLL.get(this));
-            var1.println("invertYMouse:" + Option.INVERT_MOUSE.get(this));
-            var1.println("realmsNotifications:" + Option.REALMS_NOTIFICATIONS.get(this));
-            var1.println("reducedDebugInfo:" + Option.REDUCED_DEBUG_INFO.get(this));
-            var1.println("snooperEnabled:" + Option.SNOOPER_ENABLED.get(this));
-            var1.println("showSubtitles:" + Option.SHOW_SUBTITLES.get(this));
-            var1.println("touchscreen:" + Option.TOUCHSCREEN.get(this));
-            var1.println("fullscreen:" + Option.USE_FULLSCREEN.get(this));
-            var1.println("bobView:" + Option.VIEW_BOBBING.get(this));
+            var1.println("autoJump:" + this.autoJump);
+            var1.println("autoSuggestions:" + this.autoSuggestions);
+            var1.println("chatColors:" + this.chatColors);
+            var1.println("chatLinks:" + this.chatLinks);
+            var1.println("chatLinksPrompt:" + this.chatLinksPrompt);
+            var1.println("enableVsync:" + this.enableVsync);
+            var1.println("entityShadows:" + this.entityShadows);
+            var1.println("forceUnicodeFont:" + this.forceUnicodeFont);
+            var1.println("discrete_mouse_scroll:" + this.discreteMouseScroll);
+            var1.println("invertYMouse:" + this.invertYMouse);
+            var1.println("realmsNotifications:" + this.realmsNotifications);
+            var1.println("reducedDebugInfo:" + this.reducedDebugInfo);
+            var1.println("snooperEnabled:" + this.snooperEnabled);
+            var1.println("showSubtitles:" + this.showSubtitles);
+            var1.println("touchscreen:" + this.touchscreen);
+            var1.println("fullscreen:" + this.fullscreen);
+            var1.println("bobView:" + this.bobView);
             var1.println("toggleCrouch:" + this.toggleCrouch);
             var1.println("toggleSprint:" + this.toggleSprint);
             var1.println("mouseSensitivity:" + this.sensitivity);
             var1.println("fov:" + (this.fov - 70.0D) / 40.0D);
             var1.println("screenEffectScale:" + this.screenEffectScale);
@@ -756,11 +761,11 @@
             var1.println("mainHand:" + (this.mainHand == HumanoidArm.LEFT ? "left" : "right"));
             var1.println("attackIndicator:" + this.attackIndicator.getId());
             var1.println("narrator:" + this.narratorStatus.getId());
             var1.println("tutorialStep:" + this.tutorialStep.getName());
             var1.println("mouseWheelSensitivity:" + this.mouseWheelSensitivity);
-            var1.println("rawMouseInput:" + Option.RAW_MOUSE_INPUT.get(this));
+            var1.println("rawMouseInput:" + this.rawMouseInput);
             var1.println("glDebugVerbosity:" + this.glDebugVerbosity);
             var1.println("skipMultiplayerWarning:" + this.skipMultiplayerWarning);
             var1.println("hideMatchedNames:" + this.hideMatchedNames);
             var1.println("joinedFirstServer:" + this.joinedFirstServer);
             var1.println("syncChunkWrites:" + this.syncWrites);
@@ -833,26 +838,26 @@
          this.minecraft.player.connection.send((Packet)(new ServerboundClientInformationPacket(this.languageCode, this.renderDistance, this.chatVisibility, this.chatColors, var1, this.mainHand)));
       }
 
    }
 
-   public Set<PlayerModelPart> getModelParts() {
-      return ImmutableSet.copyOf(this.modelParts);
-   }
-
    public void setModelPart(PlayerModelPart var1, boolean var2) {
       if (var2) {
          this.modelParts.add(var1);
       } else {
          this.modelParts.remove(var1);
       }
 
       this.broadcastOptions();
    }
 
-   public void toggleModelPart(PlayerModelPart var1) {
-      if (this.getModelParts().contains(var1)) {
+   public boolean isModelPartEnabled(PlayerModelPart var1) {
+      return this.modelParts.contains(var1);
+   }
+
+   public void toggleModelPart(PlayerModelPart var1, boolean var2) {
+      if (!var2) {
          this.modelParts.remove(var1);
       } else {
          this.modelParts.add(var1);
       }
 
