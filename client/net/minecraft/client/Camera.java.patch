--- net/minecraft/client/Camera.java
+++ net/minecraft/client/Camera.java
@@ -1,18 +1,24 @@
 package net.minecraft.client;
 
 import com.mojang.math.Quaternion;
 import com.mojang.math.Vector3f;
+import java.util.Arrays;
+import java.util.Iterator;
+import java.util.List;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
+import net.minecraft.tags.FluidTags;
 import net.minecraft.util.Mth;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.ClipContext;
+import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.material.FluidState;
-import net.minecraft.world.level.material.Fluids;
+import net.minecraft.world.level.material.FogType;
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.HitResult;
 import net.minecraft.world.phys.Vec3;
 
 public class Camera {
@@ -26,13 +32,13 @@
    private final Vector3f left;
    private float xRot;
    private float yRot;
    private final Quaternion rotation;
    private boolean detached;
-   private boolean mirror;
    private float eyeHeight;
    private float eyeHeightOld;
+   public static final float FOG_DISTANCE_SCALE = 0.083333336F;
 
    public Camera() {
       this.position = Vec3.ZERO;
       this.blockPosition = new BlockPos.MutableBlockPos();
       this.forwards = new Vector3f(0.0F, 0.0F, 1.0F);
@@ -44,11 +50,10 @@
    public void setup(BlockGetter var1, Entity var2, boolean var3, boolean var4, float var5) {
       this.initialized = true;
       this.level = var1;
       this.entity = var2;
       this.detached = var3;
-      this.mirror = var4;
       this.setRotation(var2.getViewYRot(var5), var2.getViewXRot(var5));
       this.setPosition(Mth.lerp((double)var5, var2.xo, var2.getX()), Mth.lerp((double)var5, var2.yo, var2.getY()) + (double)Mth.lerp(var5, this.eyeHeightOld, this.eyeHeight), Mth.lerp((double)var5, var2.zo, var2.getZ()));
       if (var3) {
          if (var4) {
             this.setRotation(this.yRot + 180.0F, -this.xRot);
@@ -153,16 +158,51 @@
 
    public boolean isDetached() {
       return this.detached;
    }
 
-   public FluidState getFluidInCamera() {
+   public FogType getFluidInCamera() {
       if (!this.initialized) {
-         return Fluids.EMPTY.defaultFluidState();
+         return FogType.NONE;
       } else {
          FluidState var1 = this.level.getFluidState(this.blockPosition);
-         return !var1.isEmpty() && this.position.y >= (double)((float)this.blockPosition.getY() + var1.getHeight(this.level, this.blockPosition)) ? Fluids.EMPTY.defaultFluidState() : var1;
+         if (var1.is(FluidTags.WATER) && this.position.y < (double)((float)this.blockPosition.getY() + var1.getHeight(this.level, this.blockPosition))) {
+            return FogType.WATER;
+         } else {
+            Minecraft var2 = Minecraft.getInstance();
+            double var3 = (double)var2.getWindow().getWidth() / (double)var2.getWindow().getHeight();
+            double var5 = Math.tan(var2.options.fov * 0.01745329238474369D / 2.0D) * 0.05000000074505806D;
+            double var7 = var5 * var3;
+            Vec3 var9 = (new Vec3(this.forwards)).scale(0.05000000074505806D);
+            Vec3 var10 = (new Vec3(this.left)).scale(var7);
+            Vec3 var11 = (new Vec3(this.up)).scale(var5);
+            Vec3 var12 = var9.add(var11).add(var10);
+            Vec3 var13 = var9.add(var11).subtract(var10);
+            Vec3 var14 = var9.subtract(var11).add(var10);
+            Vec3 var15 = var9.subtract(var11).subtract(var10);
+            List var16 = Arrays.asList(var9, var12, var13, var14, var15);
+            Iterator var17 = var16.iterator();
+
+            while(var17.hasNext()) {
+               Vec3 var18 = (Vec3)var17.next();
+               Vec3 var19 = this.position.add(var18);
+               BlockPos var20 = new BlockPos(var19);
+               FluidState var21 = this.level.getFluidState(var20);
+               if (!var21.isEmpty()) {
+                  if (var19.y < (double)((float)this.blockPosition.getY() + var21.getHeight(this.level, this.blockPosition)) && var21.is(FluidTags.LAVA)) {
+                     return FogType.LAVA;
+                  }
+               } else {
+                  BlockState var22 = this.level.getBlockState(var20);
+                  if (var22.is(Blocks.POWDER_SNOW)) {
+                     return FogType.POWDER_SNOW;
+                  }
+               }
+            }
+
+            return FogType.NONE;
+         }
       }
    }
 
    public final Vector3f getLookVector() {
       return this.forwards;
@@ -170,10 +210,14 @@
 
    public final Vector3f getUpVector() {
       return this.up;
    }
 
+   public final Vector3f getLeftVector() {
+      return this.left;
+   }
+
    public void reset() {
       this.level = null;
       this.entity = null;
       this.initialized = false;
    }
