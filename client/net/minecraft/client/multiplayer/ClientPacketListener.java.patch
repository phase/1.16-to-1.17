--- net/minecraft/client/multiplayer/ClientPacketListener.java
+++ net/minecraft/client/multiplayer/ClientPacketListener.java
@@ -12,20 +12,22 @@
 import java.net.URI;
 import java.net.URISyntaxException;
 import java.net.URLDecoder;
 import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
+import java.util.BitSet;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.Map;
 import java.util.Random;
 import java.util.Set;
 import java.util.UUID;
 import java.util.Map.Entry;
 import java.util.concurrent.CompletableFuture;
 import javax.annotation.Nullable;
+import net.minecraft.ChatFormatting;
 import net.minecraft.advancements.Advancement;
 import net.minecraft.client.ClientBrandRetriever;
 import net.minecraft.client.ClientRecipeBook;
 import net.minecraft.client.DebugQueryHandler;
 import net.minecraft.client.Minecraft;
@@ -67,19 +69,20 @@
 import net.minecraft.client.resources.sounds.TickableSoundInstance;
 import net.minecraft.client.searchtree.MutableSearchTree;
 import net.minecraft.client.searchtree.SearchRegistry;
 import net.minecraft.commands.SharedSuggestionProvider;
 import net.minecraft.core.BlockPos;
-import net.minecraft.core.Direction;
 import net.minecraft.core.PositionImpl;
 import net.minecraft.core.Registry;
 import net.minecraft.core.RegistryAccess;
 import net.minecraft.core.SectionPos;
 import net.minecraft.core.particles.ParticleTypes;
+import net.minecraft.core.particles.VibrationParticleOption;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.Connection;
 import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.network.chat.CommonComponents;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.TextComponent;
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.PacketUtils;
@@ -87,10 +90,11 @@
 import net.minecraft.network.protocol.game.ClientboundAddEntityPacket;
 import net.minecraft.network.protocol.game.ClientboundAddExperienceOrbPacket;
 import net.minecraft.network.protocol.game.ClientboundAddMobPacket;
 import net.minecraft.network.protocol.game.ClientboundAddPaintingPacket;
 import net.minecraft.network.protocol.game.ClientboundAddPlayerPacket;
+import net.minecraft.network.protocol.game.ClientboundAddVibrationSignalPacket;
 import net.minecraft.network.protocol.game.ClientboundAnimatePacket;
 import net.minecraft.network.protocol.game.ClientboundAwardStatsPacket;
 import net.minecraft.network.protocol.game.ClientboundBlockBreakAckPacket;
 import net.minecraft.network.protocol.game.ClientboundBlockDestructionPacket;
 import net.minecraft.network.protocol.game.ClientboundBlockEntityDataPacket;
@@ -197,64 +201,29 @@
 import net.minecraft.world.Difficulty;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.SimpleContainer;
 import net.minecraft.world.effect.MobEffect;
 import net.minecraft.world.effect.MobEffectInstance;
-import net.minecraft.world.entity.AreaEffectCloud;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.EquipmentSlot;
 import net.minecraft.world.entity.ExperienceOrb;
-import net.minecraft.world.entity.LightningBolt;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.ai.attributes.AttributeInstance;
 import net.minecraft.world.entity.ai.attributes.AttributeMap;
 import net.minecraft.world.entity.ai.attributes.AttributeModifier;
 import net.minecraft.world.entity.animal.Bee;
 import net.minecraft.world.entity.animal.horse.AbstractHorse;
 import net.minecraft.world.entity.boss.EnderDragonPart;
-import net.minecraft.world.entity.boss.enderdragon.EndCrystal;
 import net.minecraft.world.entity.boss.enderdragon.EnderDragon;
-import net.minecraft.world.entity.decoration.ArmorStand;
-import net.minecraft.world.entity.decoration.ItemFrame;
-import net.minecraft.world.entity.decoration.LeashFenceKnotEntity;
 import net.minecraft.world.entity.decoration.Painting;
-import net.minecraft.world.entity.item.FallingBlockEntity;
 import net.minecraft.world.entity.item.ItemEntity;
-import net.minecraft.world.entity.item.PrimedTnt;
 import net.minecraft.world.entity.monster.Guardian;
 import net.minecraft.world.entity.player.Inventory;
 import net.minecraft.world.entity.player.Player;
-import net.minecraft.world.entity.projectile.AbstractArrow;
-import net.minecraft.world.entity.projectile.Arrow;
-import net.minecraft.world.entity.projectile.DragonFireball;
-import net.minecraft.world.entity.projectile.EvokerFangs;
-import net.minecraft.world.entity.projectile.EyeOfEnder;
-import net.minecraft.world.entity.projectile.FireworkRocketEntity;
-import net.minecraft.world.entity.projectile.FishingHook;
-import net.minecraft.world.entity.projectile.LargeFireball;
-import net.minecraft.world.entity.projectile.LlamaSpit;
-import net.minecraft.world.entity.projectile.ShulkerBullet;
-import net.minecraft.world.entity.projectile.SmallFireball;
-import net.minecraft.world.entity.projectile.Snowball;
-import net.minecraft.world.entity.projectile.SpectralArrow;
-import net.minecraft.world.entity.projectile.ThrownEgg;
-import net.minecraft.world.entity.projectile.ThrownEnderpearl;
-import net.minecraft.world.entity.projectile.ThrownExperienceBottle;
-import net.minecraft.world.entity.projectile.ThrownPotion;
-import net.minecraft.world.entity.projectile.ThrownTrident;
-import net.minecraft.world.entity.projectile.WitherSkull;
 import net.minecraft.world.entity.vehicle.AbstractMinecart;
-import net.minecraft.world.entity.vehicle.Boat;
-import net.minecraft.world.entity.vehicle.Minecart;
-import net.minecraft.world.entity.vehicle.MinecartChest;
-import net.minecraft.world.entity.vehicle.MinecartCommandBlock;
-import net.minecraft.world.entity.vehicle.MinecartFurnace;
-import net.minecraft.world.entity.vehicle.MinecartHopper;
-import net.minecraft.world.entity.vehicle.MinecartSpawner;
-import net.minecraft.world.entity.vehicle.MinecartTNT;
 import net.minecraft.world.inventory.AbstractContainerMenu;
 import net.minecraft.world.inventory.HorseInventoryMenu;
 import net.minecraft.world.inventory.MerchantMenu;
 import net.minecraft.world.item.CreativeModeTab;
 import net.minecraft.world.item.ItemStack;
@@ -265,11 +234,10 @@
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.Explosion;
 import net.minecraft.world.level.GameType;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LightLayer;
-import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.entity.BannerBlockEntity;
 import net.minecraft.world.level.block.entity.BeaconBlockEntity;
 import net.minecraft.world.level.block.entity.BedBlockEntity;
 import net.minecraft.world.level.block.entity.BeehiveBlockEntity;
 import net.minecraft.world.level.block.entity.BlockEntity;
@@ -280,14 +248,19 @@
 import net.minecraft.world.level.block.entity.SignBlockEntity;
 import net.minecraft.world.level.block.entity.SkullBlockEntity;
 import net.minecraft.world.level.block.entity.SpawnerBlockEntity;
 import net.minecraft.world.level.block.entity.StructureBlockEntity;
 import net.minecraft.world.level.block.entity.TheEndGatewayBlockEntity;
+import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.chunk.ChunkBiomeContainer;
 import net.minecraft.world.level.chunk.DataLayer;
 import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.dimension.DimensionType;
+import net.minecraft.world.level.gameevent.GameEvent;
+import net.minecraft.world.level.gameevent.PositionSource;
+import net.minecraft.world.level.gameevent.PositionSourceType;
+import net.minecraft.world.level.gameevent.vibrations.VibrationPath;
 import net.minecraft.world.level.levelgen.structure.BoundingBox;
 import net.minecraft.world.level.lighting.LevelLightEngine;
 import net.minecraft.world.level.pathfinder.Path;
 import net.minecraft.world.level.saveddata.maps.MapItemSavedData;
 import net.minecraft.world.phys.Vec3;
@@ -304,11 +277,11 @@
    private static final Logger LOGGER = LogManager.getLogger();
    private static final Component GENERIC_DISCONNECT_MESSAGE = new TranslatableComponent("disconnect.lost");
    private final Connection connection;
    private final GameProfile localGameProfile;
    private final Screen callbackScreen;
-   private Minecraft minecraft;
+   private final Minecraft minecraft;
    private ClientLevel level;
    private ClientLevel.ClientLevelData levelData;
    private boolean started;
    private final Map<UUID, PlayerInfo> playerInfoMap = Maps.newHashMap();
    private final ClientAdvancements advancements;
@@ -381,140 +354,37 @@
       }
 
       this.minecraft.debugRenderer.clear();
       this.minecraft.player.resetPos();
       int var8 = var1.getPlayerId();
+      this.minecraft.player.setId(var8);
       this.level.addPlayer(var8, this.minecraft.player);
       this.minecraft.player.input = new KeyboardInput(this.minecraft.options);
       this.minecraft.gameMode.adjustPlayer(this.minecraft.player);
       this.minecraft.cameraEntity = this.minecraft.player;
       this.minecraft.setScreen(new ReceivingLevelScreen());
-      this.minecraft.player.setId(var8);
       this.minecraft.player.setReducedDebugInfo(var1.isReducedDebugInfo());
       this.minecraft.player.setShowDeathScreen(var1.shouldShowDeathScreen());
-      this.minecraft.gameMode.setLocalMode(var1.getGameType());
-      this.minecraft.gameMode.setPreviousLocalMode(var1.getPreviousGameType());
+      this.minecraft.gameMode.setLocalMode(var1.getGameType(), var1.getPreviousGameType());
       this.minecraft.options.broadcastOptions();
       this.connection.send(new ServerboundCustomPayloadPacket(ServerboundCustomPayloadPacket.BRAND, (new FriendlyByteBuf(Unpooled.buffer())).writeUtf(ClientBrandRetriever.getClientModName())));
       this.minecraft.getGame().onStartGameSession();
    }
 
    public void handleAddEntity(ClientboundAddEntityPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
-      double var2 = var1.getX();
-      double var4 = var1.getY();
-      double var6 = var1.getZ();
-      EntityType var9 = var1.getType();
-      Object var8;
-      if (var9 == EntityType.CHEST_MINECART) {
-         var8 = new MinecartChest(this.level, var2, var4, var6);
-      } else if (var9 == EntityType.FURNACE_MINECART) {
-         var8 = new MinecartFurnace(this.level, var2, var4, var6);
-      } else if (var9 == EntityType.TNT_MINECART) {
-         var8 = new MinecartTNT(this.level, var2, var4, var6);
-      } else if (var9 == EntityType.SPAWNER_MINECART) {
-         var8 = new MinecartSpawner(this.level, var2, var4, var6);
-      } else if (var9 == EntityType.HOPPER_MINECART) {
-         var8 = new MinecartHopper(this.level, var2, var4, var6);
-      } else if (var9 == EntityType.COMMAND_BLOCK_MINECART) {
-         var8 = new MinecartCommandBlock(this.level, var2, var4, var6);
-      } else if (var9 == EntityType.MINECART) {
-         var8 = new Minecart(this.level, var2, var4, var6);
-      } else {
-         Entity var10;
-         if (var9 == EntityType.FISHING_BOBBER) {
-            var10 = this.level.getEntity(var1.getData());
-            if (var10 instanceof Player) {
-               var8 = new FishingHook(this.level, (Player)var10, var2, var4, var6);
-            } else {
-               var8 = null;
-            }
-         } else if (var9 == EntityType.ARROW) {
-            var8 = new Arrow(this.level, var2, var4, var6);
-            var10 = this.level.getEntity(var1.getData());
-            if (var10 != null) {
-               ((AbstractArrow)var8).setOwner(var10);
-            }
-         } else if (var9 == EntityType.SPECTRAL_ARROW) {
-            var8 = new SpectralArrow(this.level, var2, var4, var6);
-            var10 = this.level.getEntity(var1.getData());
-            if (var10 != null) {
-               ((AbstractArrow)var8).setOwner(var10);
-            }
-         } else if (var9 == EntityType.TRIDENT) {
-            var8 = new ThrownTrident(this.level, var2, var4, var6);
-            var10 = this.level.getEntity(var1.getData());
-            if (var10 != null) {
-               ((AbstractArrow)var8).setOwner(var10);
-            }
-         } else if (var9 == EntityType.SNOWBALL) {
-            var8 = new Snowball(this.level, var2, var4, var6);
-         } else if (var9 == EntityType.LLAMA_SPIT) {
-            var8 = new LlamaSpit(this.level, var2, var4, var6, var1.getXa(), var1.getYa(), var1.getZa());
-         } else if (var9 == EntityType.ITEM_FRAME) {
-            var8 = new ItemFrame(this.level, new BlockPos(var2, var4, var6), Direction.from3DDataValue(var1.getData()));
-         } else if (var9 == EntityType.LEASH_KNOT) {
-            var8 = new LeashFenceKnotEntity(this.level, new BlockPos(var2, var4, var6));
-         } else if (var9 == EntityType.ENDER_PEARL) {
-            var8 = new ThrownEnderpearl(this.level, var2, var4, var6);
-         } else if (var9 == EntityType.EYE_OF_ENDER) {
-            var8 = new EyeOfEnder(this.level, var2, var4, var6);
-         } else if (var9 == EntityType.FIREWORK_ROCKET) {
-            var8 = new FireworkRocketEntity(this.level, var2, var4, var6, ItemStack.EMPTY);
-         } else if (var9 == EntityType.FIREBALL) {
-            var8 = new LargeFireball(this.level, var2, var4, var6, var1.getXa(), var1.getYa(), var1.getZa());
-         } else if (var9 == EntityType.DRAGON_FIREBALL) {
-            var8 = new DragonFireball(this.level, var2, var4, var6, var1.getXa(), var1.getYa(), var1.getZa());
-         } else if (var9 == EntityType.SMALL_FIREBALL) {
-            var8 = new SmallFireball(this.level, var2, var4, var6, var1.getXa(), var1.getYa(), var1.getZa());
-         } else if (var9 == EntityType.WITHER_SKULL) {
-            var8 = new WitherSkull(this.level, var2, var4, var6, var1.getXa(), var1.getYa(), var1.getZa());
-         } else if (var9 == EntityType.SHULKER_BULLET) {
-            var8 = new ShulkerBullet(this.level, var2, var4, var6, var1.getXa(), var1.getYa(), var1.getZa());
-         } else if (var9 == EntityType.EGG) {
-            var8 = new ThrownEgg(this.level, var2, var4, var6);
-         } else if (var9 == EntityType.EVOKER_FANGS) {
-            var8 = new EvokerFangs(this.level, var2, var4, var6, 0.0F, 0, (LivingEntity)null);
-         } else if (var9 == EntityType.POTION) {
-            var8 = new ThrownPotion(this.level, var2, var4, var6);
-         } else if (var9 == EntityType.EXPERIENCE_BOTTLE) {
-            var8 = new ThrownExperienceBottle(this.level, var2, var4, var6);
-         } else if (var9 == EntityType.BOAT) {
-            var8 = new Boat(this.level, var2, var4, var6);
-         } else if (var9 == EntityType.TNT) {
-            var8 = new PrimedTnt(this.level, var2, var4, var6, (LivingEntity)null);
-         } else if (var9 == EntityType.ARMOR_STAND) {
-            var8 = new ArmorStand(this.level, var2, var4, var6);
-         } else if (var9 == EntityType.END_CRYSTAL) {
-            var8 = new EndCrystal(this.level, var2, var4, var6);
-         } else if (var9 == EntityType.ITEM) {
-            var8 = new ItemEntity(this.level, var2, var4, var6);
-         } else if (var9 == EntityType.FALLING_BLOCK) {
-            var8 = new FallingBlockEntity(this.level, var2, var4, var6, Block.stateById(var1.getData()));
-         } else if (var9 == EntityType.AREA_EFFECT_CLOUD) {
-            var8 = new AreaEffectCloud(this.level, var2, var4, var6);
-         } else if (var9 == EntityType.LIGHTNING_BOLT) {
-            var8 = new LightningBolt(EntityType.LIGHTNING_BOLT, this.level);
-         } else {
-            var8 = null;
+      EntityType var2 = var1.getType();
+      Entity var3 = var2.create(this.level);
+      if (var3 != null) {
+         var3.recreateFromPacket(var1);
+         int var4 = var1.getId();
+         this.level.putNonPlayerEntity(var4, var3);
+         if (var3 instanceof AbstractMinecart) {
+            this.minecraft.getSoundManager().play(new MinecartSoundInstance((AbstractMinecart)var3));
          }
       }
 
-      if (var8 != null) {
-         int var11 = var1.getId();
-         ((Entity)var8).setPacketCoordinates(var2, var4, var6);
-         ((Entity)var8).moveTo(var2, var4, var6);
-         ((Entity)var8).xRot = (float)(var1.getxRot() * 360) / 256.0F;
-         ((Entity)var8).yRot = (float)(var1.getyRot() * 360) / 256.0F;
-         ((Entity)var8).setId(var11);
-         ((Entity)var8).setUUID(var1.getUUID());
-         this.level.putNonPlayerEntity(var11, (Entity)var8);
-         if (var8 instanceof AbstractMinecart) {
-            this.minecraft.getSoundManager().play(new MinecartSoundInstance((AbstractMinecart)var8));
-         }
-      }
-
    }
 
    public void handleAddExperienceOrb(ClientboundAddExperienceOrbPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       double var2 = var1.getX();
@@ -526,10 +396,17 @@
       var8.xRot = 0.0F;
       var8.setId(var1.getId());
       this.level.putNonPlayerEntity(var1.getId(), var8);
    }
 
+   public void handleAddVibrationSignal(ClientboundAddVibrationSignalPacket var1) {
+      PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
+      VibrationPath var2 = var1.getVibrationPath();
+      BlockPos var3 = var2.getOrigin();
+      this.level.addAlwaysVisibleParticle(new VibrationParticleOption(var2), true, (double)var3.getX() + 0.5D, (double)var3.getY() + 0.5D, (double)var3.getZ() + 0.5D, 0.0D, 0.0D, 0.0D);
+   }
+
    public void handleAddPainting(ClientboundAddPaintingPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       Painting var2 = new Painting(this.level, var1.getPos(), var1.getDirection(), var1.getMotive());
       var2.setId(var1.getId());
       var2.setUUID(var1.getUUID());
@@ -561,13 +438,13 @@
       float var8 = (float)(var1.getyRot() * 360) / 256.0F;
       float var9 = (float)(var1.getxRot() * 360) / 256.0F;
       int var10 = var1.getEntityId();
       RemotePlayer var11 = new RemotePlayer(this.minecraft.level, this.getPlayerInfo(var1.getPlayerId()).getProfile());
       var11.setId(var10);
-      var11.setPosAndOldPos(var2, var4, var6);
       var11.setPacketCoordinates(var2, var4, var6);
       var11.absMoveTo(var2, var4, var6, var8, var9);
+      var11.setOldPosAndRot();
       this.level.addPlayer(var10, var11);
    }
 
    public void handleTeleportEntity(ClientboundTeleportEntityPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
@@ -588,11 +465,11 @@
    }
 
    public void handleSetCarriedItem(ClientboundSetCarriedItemPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       if (Inventory.isHotbarSlot(var1.getSlot())) {
-         this.minecraft.player.inventory.selected = var1.getSlot();
+         this.minecraft.player.getInventory().selected = var1.getSlot();
       }
 
    }
 
    public void handleMoveEntity(ClientboundMoveEntityPacket var1) {
@@ -631,11 +508,11 @@
    public void handleRemoveEntity(ClientboundRemoveEntitiesPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
 
       for(int var2 = 0; var2 < var1.getEntityIds().length; ++var2) {
          int var3 = var1.getEntityIds()[var2];
-         this.level.removeEntity(var3);
+         this.level.removeEntity(var3, Entity.RemovalReason.DISCARDED);
       }
 
    }
 
    public void handleMovePlayer(ClientboundPlayerPositionPacket var1) {
@@ -720,28 +597,27 @@
 
    public void handleLevelChunk(ClientboundLevelChunkPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       int var2 = var1.getX();
       int var3 = var1.getZ();
-      ChunkBiomeContainer var4 = var1.getBiomes() == null ? null : new ChunkBiomeContainer(this.registryAccess.registryOrThrow(Registry.BIOME_REGISTRY), var1.getBiomes());
-      LevelChunk var5 = this.level.getChunkSource().replaceWithPacketData(var2, var3, var4, var1.getReadBuffer(), var1.getHeightmaps(), var1.getAvailableSections(), var1.isFullChunk());
-      if (var5 != null && var1.isFullChunk()) {
-         this.level.reAddEntitiesToChunk(var5);
-      }
+      ChunkBiomeContainer var4 = var1.getBiomes() == null ? null : new ChunkBiomeContainer(this.registryAccess.registryOrThrow(Registry.BIOME_REGISTRY), this.level, var1.getBiomes());
+      LevelChunk var5 = this.level.getChunkSource().replaceWithPacketData(var2, var3, var4, var1.getReadBuffer(), var1.getHeightmaps(), var1.getAvailableSections());
 
-      for(int var6 = 0; var6 < 16; ++var6) {
+      for(int var6 = this.level.getMinSection(); var6 < this.level.getMaxSection(); ++var6) {
          this.level.setSectionDirtyWithNeighbors(var2, var6, var3);
       }
 
-      Iterator var10 = var1.getBlockEntitiesTags().iterator();
+      if (var5 != null) {
+         Iterator var10 = var1.getBlockEntitiesTags().iterator();
 
-      while(var10.hasNext()) {
-         CompoundTag var7 = (CompoundTag)var10.next();
-         BlockPos var8 = new BlockPos(var7.getInt("x"), var7.getInt("y"), var7.getInt("z"));
-         BlockEntity var9 = this.level.getBlockEntity(var8);
-         if (var9 != null) {
-            var9.load(this.level.getBlockState(var8), var7);
+         while(var10.hasNext()) {
+            CompoundTag var7 = (CompoundTag)var10.next();
+            BlockPos var8 = new BlockPos(var7.getInt("x"), var7.getInt("y"), var7.getInt("z"));
+            BlockEntity var9 = var5.getBlockEntity(var8, LevelChunk.EntityCreationType.IMMEDIATE);
+            if (var9 != null) {
+               var9.load(var7);
+            }
          }
       }
 
    }
 
@@ -751,11 +627,11 @@
       int var3 = var1.getZ();
       ClientChunkCache var4 = this.level.getChunkSource();
       var4.drop(var2, var3);
       LevelLightEngine var5 = var4.getLightEngine();
 
-      for(int var6 = 0; var6 < 16; ++var6) {
+      for(int var6 = this.level.getMinSection(); var6 < this.level.getMaxSection(); ++var6) {
          this.level.setSectionDirtyWithNeighbors(var2, var6, var3);
          var5.updateSectionStatus(SectionPos.of(var2, var6, var3), true);
       }
 
       var5.enableLightSources(new ChunkPos(var2, var3), false);
@@ -807,14 +683,14 @@
          if (var2 instanceof ItemEntity) {
             ItemEntity var4 = (ItemEntity)var2;
             ItemStack var5 = var4.getItem();
             var5.shrink(var1.getAmount());
             if (var5.isEmpty()) {
-               this.level.removeEntity(var1.getItemId());
+               this.level.removeEntity(var1.getItemId(), Entity.RemovalReason.DISCARDED);
             }
-         } else {
-            this.level.removeEntity(var1.getItemId());
+         } else if (!(var2 instanceof ExperienceOrb)) {
+            this.level.removeEntity(var1.getItemId(), Entity.RemovalReason.DISCARDED);
          }
       }
 
    }
 
@@ -940,11 +816,11 @@
       int var2 = var1.length;
 
       for(int var3 = 0; var3 < var2; ++var3) {
          InteractionHand var4 = var1[var3];
          ItemStack var5 = var0.getItemInHand(var4);
-         if (var5.getItem() == Items.TOTEM_OF_UNDYING) {
+         if (var5.is(Items.TOTEM_OF_UNDYING)) {
             return var5;
          }
       }
 
       return new ItemStack(Items.TOTEM_OF_UNDYING);
@@ -999,11 +875,10 @@
          this.level.setScoreboard(var6);
          this.minecraft.setLevel(this.level);
          this.minecraft.setScreen(new ReceivingLevelScreen());
       }
 
-      this.level.removeAllPendingEntityRemovals();
       String var10 = var4.getServerBrand();
       this.minecraft.cameraEntity = null;
       LocalPlayer var11 = this.minecraft.gameMode.createPlayer(this.level, var4.getStats(), var4.getRecipeBook(), var4.isShiftKeyDown(), var4.isSprinting());
       var11.setId(var5);
       this.minecraft.player = var11;
@@ -1027,12 +902,11 @@
       var11.setShowDeathScreen(var4.shouldShowDeathScreen());
       if (this.minecraft.screen instanceof DeathScreen) {
          this.minecraft.setScreen((Screen)null);
       }
 
-      this.minecraft.gameMode.setLocalMode(var1.getPlayerGameType());
-      this.minecraft.gameMode.setPreviousLocalMode(var1.getPreviousPlayerGameType());
+      this.minecraft.gameMode.setLocalMode(var1.getPlayerGameType(), var1.getPreviousPlayerGameType());
    }
 
    public void handleExplosion(ClientboundExplodePacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       Explosion var2 = new Explosion(this.minecraft.level, (Entity)null, var1.getX(), var1.getY(), var1.getZ(), var1.getPower(), var1.getToBlow());
@@ -1045,13 +919,13 @@
       Entity var2 = this.level.getEntity(var1.getEntityId());
       if (var2 instanceof AbstractHorse) {
          LocalPlayer var3 = this.minecraft.player;
          AbstractHorse var4 = (AbstractHorse)var2;
          SimpleContainer var5 = new SimpleContainer(var1.getSize());
-         HorseInventoryMenu var6 = new HorseInventoryMenu(var1.getContainerId(), var3.inventory, var5, var4);
+         HorseInventoryMenu var6 = new HorseInventoryMenu(var1.getContainerId(), var3.getInventory(), var5, var4);
          var3.containerMenu = var6;
-         this.minecraft.setScreen(new HorseInventoryScreen(var6, var3.inventory, var4));
+         this.minecraft.setScreen(new HorseInventoryScreen(var6, var3.getInventory(), var4));
       }
 
    }
 
    public void handleOpenScreen(ClientboundOpenScreenPacket var1) {
@@ -1065,14 +939,14 @@
       ItemStack var3 = var1.getItem();
       int var4 = var1.getSlot();
       this.minecraft.getTutorial().onGetItem(var3);
       if (var1.getContainerId() == -1) {
          if (!(this.minecraft.screen instanceof CreativeModeInventoryScreen)) {
-            var2.inventory.setCarried(var3);
+            var2.getInventory().setCarried(var3);
          }
       } else if (var1.getContainerId() == -2) {
-         var2.inventory.setItem(var4, var3);
+         var2.getInventory().setItem(var4, var3);
       } else {
          boolean var5 = false;
          if (this.minecraft.screen instanceof CreativeModeInventoryScreen) {
             CreativeModeInventoryScreen var6 = (CreativeModeInventoryScreen)this.minecraft.screen;
             var5 = var6.getSelectedTab() != CreativeModeTab.TAB_INVENTORY.getId();
@@ -1121,27 +995,29 @@
 
    }
 
    public void handleOpenSignEditor(ClientboundOpenSignEditorPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
-      Object var2 = this.level.getBlockEntity(var1.getPos());
-      if (!(var2 instanceof SignBlockEntity)) {
-         var2 = new SignBlockEntity();
-         ((BlockEntity)var2).setLevelAndPosition(this.level, var1.getPos());
+      BlockPos var2 = var1.getPos();
+      Object var3 = this.level.getBlockEntity(var2);
+      if (!(var3 instanceof SignBlockEntity)) {
+         BlockState var4 = this.level.getBlockState(var2);
+         var3 = new SignBlockEntity(var2, var4);
+         ((BlockEntity)var3).setLevel(this.level);
       }
 
-      this.minecraft.player.openTextEdit((SignBlockEntity)var2);
+      this.minecraft.player.openTextEdit((SignBlockEntity)var3);
    }
 
    public void handleBlockEntityData(ClientboundBlockEntityDataPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       BlockPos var2 = var1.getPos();
       BlockEntity var3 = this.minecraft.level.getBlockEntity(var2);
       int var4 = var1.getType();
       boolean var5 = var4 == 2 && var3 instanceof CommandBlockEntity;
       if (var4 == 1 && var3 instanceof SpawnerBlockEntity || var5 || var4 == 3 && var3 instanceof BeaconBlockEntity || var4 == 4 && var3 instanceof SkullBlockEntity || var4 == 6 && var3 instanceof BannerBlockEntity || var4 == 7 && var3 instanceof StructureBlockEntity || var4 == 8 && var3 instanceof TheEndGatewayBlockEntity || var4 == 9 && var3 instanceof SignBlockEntity || var4 == 11 && var3 instanceof BedBlockEntity || var4 == 5 && var3 instanceof ConduitBlockEntity || var4 == 12 && var3 instanceof JigsawBlockEntity || var4 == 13 && var3 instanceof CampfireBlockEntity || var4 == 14 && var3 instanceof BeehiveBlockEntity) {
-         var3.load(this.minecraft.level.getBlockState(var2), var1.getTag());
+         var3.load(var1.getTag());
       }
 
       if (var5 && this.minecraft.screen instanceof CommandBlockEditScreen) {
          ((CommandBlockEditScreen)this.minecraft.screen).updateGui();
       }
@@ -1241,26 +1117,24 @@
    }
 
    public void handleMapItemData(ClientboundMapItemDataPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       MapRenderer var2 = this.minecraft.gameRenderer.getMapRenderer();
-      String var3 = MapItem.makeKey(var1.getMapId());
-      MapItemSavedData var4 = this.minecraft.level.getMapData(var3);
-      if (var4 == null) {
-         var4 = new MapItemSavedData(var3);
-         if (var2.getMapInstanceIfExists(var3) != null) {
-            MapItemSavedData var5 = var2.getData(var2.getMapInstanceIfExists(var3));
-            if (var5 != null) {
-               var4 = var5;
-            }
+      int var3 = var1.getMapId();
+      String var4 = MapItem.makeKey(var3);
+      MapItemSavedData var5 = this.minecraft.level.getMapData(var4);
+      if (var5 == null) {
+         var5 = var2.retrieveMapFromRenderer(var3);
+         if (var5 == null) {
+            var5 = MapItemSavedData.createForClient(var1.getScale(), var1.isLocked(), this.minecraft.level.dimension());
          }
 
-         this.minecraft.level.setMapData(var4);
+         this.minecraft.level.setMapData(var4, var5);
       }
 
-      var1.applyToMap(var4);
-      var2.update(var4);
+      var1.applyToMap(var5);
+      var2.update(var3, var5);
    }
 
    public void handleLevelEvent(ClientboundLevelEventPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       if (var1.isGlobalEvent()) {
@@ -1422,11 +1296,11 @@
       }
    }
 
    public void handleUpdateTags(ClientboundUpdateTagsPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
-      TagContainer var2 = var1.getTags();
+      TagContainer var2 = TagContainer.deserializeFromNetwork(this.registryAccess, var1.getTags());
       Multimap var3 = StaticTags.getAllMissingTags(var2);
       if (!var3.isEmpty()) {
          LOGGER.warn("Incomplete server tags, disconnecting. Missing: {}", var3);
          this.connection.disconnect(new TranslatableComponent("multiplayer.disconnect.missing_tags"));
       } else {
@@ -1557,16 +1431,16 @@
    }
 
    public void handlePlayerAbilities(ClientboundPlayerAbilitiesPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       LocalPlayer var2 = this.minecraft.player;
-      var2.abilities.flying = var1.isFlying();
-      var2.abilities.instabuild = var1.canInstabuild();
-      var2.abilities.invulnerable = var1.isInvulnerable();
-      var2.abilities.mayfly = var1.canFly();
-      var2.abilities.setFlyingSpeed(var1.getFlyingSpeed());
-      var2.abilities.setWalkingSpeed(var1.getWalkingSpeed());
+      var2.getAbilities().flying = var1.isFlying();
+      var2.getAbilities().instabuild = var1.canInstabuild();
+      var2.getAbilities().invulnerable = var1.isInvulnerable();
+      var2.getAbilities().mayfly = var1.canFly();
+      var2.getAbilities().setFlyingSpeed(var1.getFlyingSpeed());
+      var2.getAbilities().setWalkingSpeed(var1.getWalkingSpeed());
    }
 
    public void handleSoundEvent(ClientboundSoundPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       this.minecraft.level.playSound(this.minecraft.player, var1.getX(), var1.getY(), var1.getZ(), var1.getSound(), var1.getSource(), var1.getVolume(), var1.getPitch());
@@ -1586,56 +1460,63 @@
    }
 
    public void handleResourcePack(ClientboundResourcePackPacket var1) {
       String var2 = var1.getUrl();
       String var3 = var1.getHash();
+      boolean var4 = var1.isRequired();
       if (this.validateResourcePackUrl(var2)) {
          if (var2.startsWith("level://")) {
             try {
-               String var9 = URLDecoder.decode(var2.substring("level://".length()), StandardCharsets.UTF_8.toString());
-               File var5 = new File(this.minecraft.gameDirectory, "saves");
-               File var6 = new File(var5, var9);
-               if (var6.isFile()) {
+               String var10 = URLDecoder.decode(var2.substring("level://".length()), StandardCharsets.UTF_8.toString());
+               File var6 = new File(this.minecraft.gameDirectory, "saves");
+               File var7 = new File(var6, var10);
+               if (var7.isFile()) {
                   this.send(ServerboundResourcePackPacket.Action.ACCEPTED);
-                  CompletableFuture var7 = this.minecraft.getClientPackSource().setServerPack(var6, PackSource.WORLD);
-                  this.downloadCallback(var7);
+                  CompletableFuture var8 = this.minecraft.getClientPackSource().setServerPack(var7, PackSource.WORLD);
+                  this.downloadCallback(var8);
                   return;
                }
-            } catch (UnsupportedEncodingException var8) {
+            } catch (UnsupportedEncodingException var9) {
             }
 
             this.send(ServerboundResourcePackPacket.Action.FAILED_DOWNLOAD);
          } else {
-            ServerData var4 = this.minecraft.getCurrentServer();
-            if (var4 != null && var4.getResourcePackStatus() == ServerData.ServerPackStatus.ENABLED) {
+            ServerData var5 = this.minecraft.getCurrentServer();
+            if (var5 != null && var5.getResourcePackStatus() == ServerData.ServerPackStatus.ENABLED) {
                this.send(ServerboundResourcePackPacket.Action.ACCEPTED);
                this.downloadCallback(this.minecraft.getClientPackSource().downloadAndSelectResourcePack(var2, var3));
-            } else if (var4 != null && var4.getResourcePackStatus() != ServerData.ServerPackStatus.PROMPT) {
+            } else if (var5 != null && var5.getResourcePackStatus() != ServerData.ServerPackStatus.PROMPT) {
                this.send(ServerboundResourcePackPacket.Action.DECLINED);
+               if (var4) {
+                  this.connection.disconnect(new TranslatableComponent("multiplayer.requiredTexturePrompt.disconnect"));
+               }
             } else {
                this.minecraft.execute(() -> {
-                  this.minecraft.setScreen(new ConfirmScreen((var3x) -> {
-                     this.minecraft = Minecraft.getInstance();
-                     ServerData var4 = this.minecraft.getCurrentServer();
-                     if (var3x) {
-                        if (var4 != null) {
-                           var4.setResourcePackStatus(ServerData.ServerPackStatus.ENABLED);
+                  this.minecraft.setScreen(new ConfirmScreen((var4x) -> {
+                     this.minecraft.setScreen((Screen)null);
+                     ServerData var5 = this.minecraft.getCurrentServer();
+                     if (var4x) {
+                        if (var5 != null) {
+                           var5.setResourcePackStatus(ServerData.ServerPackStatus.ENABLED);
                         }
 
                         this.send(ServerboundResourcePackPacket.Action.ACCEPTED);
                         this.downloadCallback(this.minecraft.getClientPackSource().downloadAndSelectResourcePack(var2, var3));
                      } else {
-                        if (var4 != null) {
-                           var4.setResourcePackStatus(ServerData.ServerPackStatus.DISABLED);
+                        this.send(ServerboundResourcePackPacket.Action.DECLINED);
+                        if (var4) {
+                           this.connection.disconnect(new TranslatableComponent("multiplayer.requiredTexturePrompt.disconnect"));
+                        } else if (var5 != null) {
+                           var5.setResourcePackStatus(ServerData.ServerPackStatus.DISABLED);
                         }
+                     }
 
-                        this.send(ServerboundResourcePackPacket.Action.DECLINED);
+                     if (var5 != null) {
+                        ServerList.saveSingleServer(var5);
                      }
 
-                     ServerList.saveSingleServer(var4);
-                     this.minecraft.setScreen((Screen)null);
-                  }, new TranslatableComponent("multiplayer.texturePrompt.line1"), new TranslatableComponent("multiplayer.texturePrompt.line2")));
+                  }, var4 ? new TranslatableComponent("multiplayer.requiredTexturePrompt.line1") : new TranslatableComponent("multiplayer.texturePrompt.line1"), (Component)(var4 ? (new TranslatableComponent("multiplayer.requiredTexturePrompt.line2")).withStyle(new ChatFormatting[]{ChatFormatting.YELLOW, ChatFormatting.BOLD}) : new TranslatableComponent("multiplayer.texturePrompt.line2")), (Component)(var4 ? new TranslatableComponent("gui.proceed") : CommonComponents.GUI_YES), (Component)(var4 ? new TranslatableComponent("menu.disconnect") : CommonComponents.GUI_NO)));
                });
             }
 
          }
       }
@@ -1698,11 +1579,11 @@
    }
 
    public void handleOpenBook(ClientboundOpenBookPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       ItemStack var2 = this.minecraft.player.getItemInHand(var1.getHand());
-      if (var2.getItem() == Items.WRITTEN_BOOK) {
+      if (var2.is(Items.WRITTEN_BOOK)) {
          this.minecraft.setScreen(new BookViewScreen(new BookViewScreen.WrittenBookAccess(var2)));
       }
 
    }
 
@@ -1745,11 +1626,11 @@
                   this.minecraft.debugRenderer.caveRenderer.addTunnel(var35, var40, var7);
                } else {
                   int var9;
                   int var41;
                   if (ClientboundCustomPayloadPacket.DEBUG_STRUCTURES_PACKET.equals(var2)) {
-                     DimensionType var36 = (DimensionType)this.registryAccess.dimensionTypes().get(var3.readResourceLocation());
+                     DimensionType var36 = (DimensionType)this.registryAccess.registryOrThrow(Registry.DIMENSION_TYPE_REGISTRY).get(var3.readResourceLocation());
                      BoundingBox var38 = new BoundingBox(var3.readInt(), var3.readInt(), var3.readInt(), var3.readInt(), var3.readInt(), var3.readInt());
                      var41 = var3.readInt();
                      var7 = Lists.newArrayList();
                      ArrayList var47 = Lists.newArrayList();
 
@@ -1813,20 +1694,20 @@
                         this.minecraft.debugRenderer.raidDebugRenderer.setRaidCenters(var45);
                      } else {
                         int var12;
                         int var23;
                         double var43;
-                        double var48;
-                        double var49;
-                        PositionImpl var51;
-                        UUID var54;
+                        double var51;
+                        double var53;
+                        PositionImpl var55;
+                        UUID var58;
                         if (ClientboundCustomPayloadPacket.DEBUG_BRAIN.equals(var2)) {
                            var43 = var3.readDouble();
-                           var48 = var3.readDouble();
-                           var49 = var3.readDouble();
-                           var51 = new PositionImpl(var43, var48, var49);
-                           var54 = var3.readUUID();
+                           var51 = var3.readDouble();
+                           var53 = var3.readDouble();
+                           var55 = new PositionImpl(var43, var51, var53);
+                           var58 = var3.readUUID();
                            var12 = var3.readInt();
                            String var13 = var3.readUtf();
                            String var14 = var3.readUtf();
                            int var15 = var3.readInt();
                            float var16 = var3.readFloat();
@@ -1839,120 +1720,131 @@
                            } else {
                               var20 = null;
                            }
 
                            boolean var21 = var3.readBoolean();
-                           BrainDebugRenderer.BrainDump var22 = new BrainDebugRenderer.BrainDump(var54, var12, var13, var14, var15, var16, var17, var51, var18, var20, var21);
+                           BrainDebugRenderer.BrainDump var22 = new BrainDebugRenderer.BrainDump(var58, var12, var13, var14, var15, var16, var17, var55, var18, var20, var21);
                            var23 = var3.readInt();
 
                            int var24;
                            for(var24 = 0; var24 < var23; ++var24) {
                               String var25 = var3.readUtf();
                               var22.activities.add(var25);
                            }
 
                            var24 = var3.readInt();
 
-                           int var67;
-                           for(var67 = 0; var67 < var24; ++var67) {
+                           int var71;
+                           for(var71 = 0; var71 < var24; ++var71) {
                               String var26 = var3.readUtf();
                               var22.behaviors.add(var26);
                            }
 
-                           var67 = var3.readInt();
+                           var71 = var3.readInt();
 
-                           int var68;
-                           for(var68 = 0; var68 < var67; ++var68) {
+                           int var72;
+                           for(var72 = 0; var72 < var71; ++var72) {
                               String var27 = var3.readUtf();
                               var22.memories.add(var27);
                            }
 
-                           var68 = var3.readInt();
+                           var72 = var3.readInt();
 
-                           int var69;
-                           for(var69 = 0; var69 < var68; ++var69) {
+                           int var73;
+                           for(var73 = 0; var73 < var72; ++var73) {
                               BlockPos var28 = var3.readBlockPos();
                               var22.pois.add(var28);
                            }
 
-                           var69 = var3.readInt();
+                           var73 = var3.readInt();
 
-                           int var70;
-                           for(var70 = 0; var70 < var69; ++var70) {
+                           int var74;
+                           for(var74 = 0; var74 < var73; ++var74) {
                               BlockPos var29 = var3.readBlockPos();
                               var22.potentialPois.add(var29);
                            }
 
-                           var70 = var3.readInt();
+                           var74 = var3.readInt();
 
-                           for(int var71 = 0; var71 < var70; ++var71) {
+                           for(int var75 = 0; var75 < var74; ++var75) {
                               String var30 = var3.readUtf();
                               var22.gossips.add(var30);
                            }
 
                            this.minecraft.debugRenderer.brainDebugRenderer.addOrUpdateBrainDump(var22);
                         } else if (ClientboundCustomPayloadPacket.DEBUG_BEE.equals(var2)) {
                            var43 = var3.readDouble();
-                           var48 = var3.readDouble();
-                           var49 = var3.readDouble();
-                           var51 = new PositionImpl(var43, var48, var49);
-                           var54 = var3.readUUID();
+                           var51 = var3.readDouble();
+                           var53 = var3.readDouble();
+                           var55 = new PositionImpl(var43, var51, var53);
+                           var58 = var3.readUUID();
                            var12 = var3.readInt();
-                           boolean var55 = var3.readBoolean();
-                           BlockPos var56 = null;
-                           if (var55) {
-                              var56 = var3.readBlockPos();
+                           boolean var59 = var3.readBoolean();
+                           BlockPos var60 = null;
+                           if (var59) {
+                              var60 = var3.readBlockPos();
                            }
 
-                           boolean var57 = var3.readBoolean();
-                           BlockPos var58 = null;
-                           if (var57) {
-                              var58 = var3.readBlockPos();
+                           boolean var61 = var3.readBoolean();
+                           BlockPos var62 = null;
+                           if (var61) {
+                              var62 = var3.readBlockPos();
                            }
 
-                           int var59 = var3.readInt();
-                           boolean var60 = var3.readBoolean();
-                           Path var61 = null;
-                           if (var60) {
-                              var61 = Path.createFromStream(var3);
+                           int var63 = var3.readInt();
+                           boolean var64 = var3.readBoolean();
+                           Path var65 = null;
+                           if (var64) {
+                              var65 = Path.createFromStream(var3);
                            }
 
-                           BeeDebugRenderer.BeeInfo var62 = new BeeDebugRenderer.BeeInfo(var54, var12, var51, var61, var56, var58, var59);
-                           int var63 = var3.readInt();
+                           BeeDebugRenderer.BeeInfo var66 = new BeeDebugRenderer.BeeInfo(var58, var12, var55, var65, var60, var62, var63);
+                           int var67 = var3.readInt();
 
-                           int var64;
-                           for(var64 = 0; var64 < var63; ++var64) {
-                              String var65 = var3.readUtf();
-                              var62.goals.add(var65);
+                           int var68;
+                           for(var68 = 0; var68 < var67; ++var68) {
+                              String var69 = var3.readUtf();
+                              var66.goals.add(var69);
                            }
 
-                           var64 = var3.readInt();
+                           var68 = var3.readInt();
 
-                           for(var23 = 0; var23 < var64; ++var23) {
-                              BlockPos var66 = var3.readBlockPos();
-                              var62.blacklistedHives.add(var66);
+                           for(var23 = 0; var23 < var68; ++var23) {
+                              BlockPos var70 = var3.readBlockPos();
+                              var66.blacklistedHives.add(var70);
                            }
 
-                           this.minecraft.debugRenderer.beeDebugRenderer.addOrUpdateBeeInfo(var62);
+                           this.minecraft.debugRenderer.beeDebugRenderer.addOrUpdateBeeInfo(var66);
                         } else {
                            int var46;
                            if (ClientboundCustomPayloadPacket.DEBUG_HIVE.equals(var2)) {
                               var35 = var3.readBlockPos();
                               var42 = var3.readUtf();
                               var41 = var3.readInt();
                               var46 = var3.readInt();
-                              boolean var52 = var3.readBoolean();
-                              BeeDebugRenderer.HiveInfo var50 = new BeeDebugRenderer.HiveInfo(var35, var42, var41, var46, var52, this.level.getGameTime());
-                              this.minecraft.debugRenderer.beeDebugRenderer.addOrUpdateHiveInfo(var50);
+                              boolean var56 = var3.readBoolean();
+                              BeeDebugRenderer.HiveInfo var54 = new BeeDebugRenderer.HiveInfo(var35, var42, var41, var46, var56, this.level.getGameTime());
+                              this.minecraft.debugRenderer.beeDebugRenderer.addOrUpdateHiveInfo(var54);
                            } else if (ClientboundCustomPayloadPacket.DEBUG_GAME_TEST_CLEAR.equals(var2)) {
                               this.minecraft.debugRenderer.gameTestDebugRenderer.clear();
                            } else if (ClientboundCustomPayloadPacket.DEBUG_GAME_TEST_ADD_MARKER.equals(var2)) {
                               var35 = var3.readBlockPos();
                               var37 = var3.readInt();
-                              String var53 = var3.readUtf();
+                              String var57 = var3.readUtf();
                               var46 = var3.readInt();
-                              this.minecraft.debugRenderer.gameTestDebugRenderer.addMarker(var35, var37, var53, var46);
+                              this.minecraft.debugRenderer.gameTestDebugRenderer.addMarker(var35, var37, var57, var46);
+                           } else if (ClientboundCustomPayloadPacket.DEBUG_GAME_EVENT.equals(var2)) {
+                              GameEvent var48 = (GameEvent)Registry.GAME_EVENT.get(new ResourceLocation(var3.readUtf()));
+                              BlockPos var49 = var3.readBlockPos();
+                              this.minecraft.debugRenderer.gameEventListenerRenderer.trackGameEvent(var48, var49);
+                           } else if (ClientboundCustomPayloadPacket.DEBUG_GAME_EVENT_LISTENER.equals(var2)) {
+                              ResourceLocation var50 = var3.readResourceLocation();
+                              PositionSource var52 = ((PositionSourceType)Registry.POSITION_SOURCE_TYPE.getOptional(var50).orElseThrow(() -> {
+                                 return new IllegalArgumentException("Unknown position source type " + var50);
+                              })).read(var3);
+                              var41 = var3.readVarInt();
+                              this.minecraft.debugRenderer.gameEventListenerRenderer.trackListener(var52, var41);
                            } else {
                               LOGGER.warn("Unknown custom packed identifier: {}", var2);
                            }
                         }
                      }
@@ -2148,29 +2040,30 @@
    public void handleLightUpdatePacked(ClientboundLightUpdatePacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       int var2 = var1.getX();
       int var3 = var1.getZ();
       LevelLightEngine var4 = this.level.getChunkSource().getLightEngine();
-      int var5 = var1.getSkyYMask();
-      int var6 = var1.getEmptySkyYMask();
+      BitSet var5 = var1.getSkyYMask();
+      BitSet var6 = var1.getEmptySkyYMask();
       Iterator var7 = var1.getSkyUpdates().iterator();
       this.readSectionList(var2, var3, var4, LightLayer.SKY, var5, var6, var7, var1.getTrustEdges());
-      int var8 = var1.getBlockYMask();
-      int var9 = var1.getEmptyBlockYMask();
+      BitSet var8 = var1.getBlockYMask();
+      BitSet var9 = var1.getEmptyBlockYMask();
       Iterator var10 = var1.getBlockUpdates().iterator();
       this.readSectionList(var2, var3, var4, LightLayer.BLOCK, var8, var9, var10, var1.getTrustEdges());
    }
 
    public void handleMerchantOffers(ClientboundMerchantOffersPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       AbstractContainerMenu var2 = this.minecraft.player.containerMenu;
       if (var1.getContainerId() == var2.containerId && var2 instanceof MerchantMenu) {
-         ((MerchantMenu)var2).setOffers(new MerchantOffers(var1.getOffers().createTag()));
-         ((MerchantMenu)var2).setXp(var1.getVillagerXp());
-         ((MerchantMenu)var2).setMerchantLevel(var1.getVillagerLevel());
-         ((MerchantMenu)var2).setShowProgressBar(var1.showProgress());
-         ((MerchantMenu)var2).setCanRestock(var1.canRestock());
+         MerchantMenu var3 = (MerchantMenu)var2;
+         var3.setOffers(new MerchantOffers(var1.getOffers().createTag()));
+         var3.setXp(var1.getVillagerXp());
+         var3.setMerchantLevel(var1.getVillagerLevel());
+         var3.setShowProgressBar(var1.showProgress());
+         var3.setCanRestock(var1.canRestock());
       }
 
    }
 
    public void handleSetChunkCacheRadius(ClientboundSetChunkCacheRadiusPacket var1) {
@@ -2187,15 +2080,15 @@
    public void handleBlockBreakAck(ClientboundBlockBreakAckPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       this.minecraft.gameMode.handleBlockBreakAck(this.level, var1.getPos(), var1.getState(), var1.action(), var1.allGood());
    }
 
-   private void readSectionList(int var1, int var2, LevelLightEngine var3, LightLayer var4, int var5, int var6, Iterator<byte[]> var7, boolean var8) {
-      for(int var9 = 0; var9 < 18; ++var9) {
-         int var10 = -1 + var9;
-         boolean var11 = (var5 & 1 << var9) != 0;
-         boolean var12 = (var6 & 1 << var9) != 0;
+   private void readSectionList(int var1, int var2, LevelLightEngine var3, LightLayer var4, BitSet var5, BitSet var6, Iterator<byte[]> var7, boolean var8) {
+      for(int var9 = 0; var9 < var3.getLightSectionCount(); ++var9) {
+         int var10 = var3.getMinLightSection() + var9;
+         boolean var11 = var5.get(var9);
+         boolean var12 = var6.get(var9);
          if (var11 || var12) {
             var3.queueSectionData(var4, SectionPos.of(var1, var10, var2), var11 ? new DataLayer((byte[])((byte[])var7.next()).clone()) : new DataLayer(), var8);
             this.level.setSectionDirtyWithNeighbors(var1, var10, var2);
          }
       }
