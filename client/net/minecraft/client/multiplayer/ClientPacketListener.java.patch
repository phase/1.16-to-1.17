--- net/minecraft/client/multiplayer/ClientPacketListener.java
+++ net/minecraft/client/multiplayer/ClientPacketListener.java
@@ -12,20 +12,25 @@
 import java.net.URI;
 import java.net.URISyntaxException;
 import java.net.URLDecoder;
 import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
+import java.util.BitSet;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.Iterator;
+import java.util.List;
 import java.util.Map;
+import java.util.Objects;
+import java.util.Optional;
 import java.util.Random;
 import java.util.Set;
 import java.util.UUID;
 import java.util.Map.Entry;
 import java.util.concurrent.CompletableFuture;
 import javax.annotation.Nullable;
+import net.minecraft.ChatFormatting;
 import net.minecraft.advancements.Advancement;
 import net.minecraft.client.ClientBrandRetriever;
 import net.minecraft.client.ClientRecipeBook;
 import net.minecraft.client.DebugQueryHandler;
 import net.minecraft.client.Minecraft;
@@ -67,43 +72,44 @@
 import net.minecraft.client.resources.sounds.TickableSoundInstance;
 import net.minecraft.client.searchtree.MutableSearchTree;
 import net.minecraft.client.searchtree.SearchRegistry;
 import net.minecraft.commands.SharedSuggestionProvider;
 import net.minecraft.core.BlockPos;
-import net.minecraft.core.Direction;
 import net.minecraft.core.PositionImpl;
 import net.minecraft.core.Registry;
 import net.minecraft.core.RegistryAccess;
 import net.minecraft.core.SectionPos;
 import net.minecraft.core.particles.ParticleTypes;
+import net.minecraft.core.particles.VibrationParticleOption;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.Connection;
 import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.network.chat.CommonComponents;
 import net.minecraft.network.chat.Component;
-import net.minecraft.network.chat.TextComponent;
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.PacketUtils;
 import net.minecraft.network.protocol.game.ClientGamePacketListener;
 import net.minecraft.network.protocol.game.ClientboundAddEntityPacket;
 import net.minecraft.network.protocol.game.ClientboundAddExperienceOrbPacket;
 import net.minecraft.network.protocol.game.ClientboundAddMobPacket;
 import net.minecraft.network.protocol.game.ClientboundAddPaintingPacket;
 import net.minecraft.network.protocol.game.ClientboundAddPlayerPacket;
+import net.minecraft.network.protocol.game.ClientboundAddVibrationSignalPacket;
 import net.minecraft.network.protocol.game.ClientboundAnimatePacket;
 import net.minecraft.network.protocol.game.ClientboundAwardStatsPacket;
 import net.minecraft.network.protocol.game.ClientboundBlockBreakAckPacket;
 import net.minecraft.network.protocol.game.ClientboundBlockDestructionPacket;
 import net.minecraft.network.protocol.game.ClientboundBlockEntityDataPacket;
 import net.minecraft.network.protocol.game.ClientboundBlockEventPacket;
 import net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket;
 import net.minecraft.network.protocol.game.ClientboundBossEventPacket;
 import net.minecraft.network.protocol.game.ClientboundChangeDifficultyPacket;
 import net.minecraft.network.protocol.game.ClientboundChatPacket;
+import net.minecraft.network.protocol.game.ClientboundClearTitlesPacket;
 import net.minecraft.network.protocol.game.ClientboundCommandSuggestionsPacket;
 import net.minecraft.network.protocol.game.ClientboundCommandsPacket;
-import net.minecraft.network.protocol.game.ClientboundContainerAckPacket;
 import net.minecraft.network.protocol.game.ClientboundContainerClosePacket;
 import net.minecraft.network.protocol.game.ClientboundContainerSetContentPacket;
 import net.minecraft.network.protocol.game.ClientboundContainerSetDataPacket;
 import net.minecraft.network.protocol.game.ClientboundContainerSetSlotPacket;
 import net.minecraft.network.protocol.game.ClientboundCooldownPacket;
@@ -113,10 +119,11 @@
 import net.minecraft.network.protocol.game.ClientboundEntityEventPacket;
 import net.minecraft.network.protocol.game.ClientboundExplodePacket;
 import net.minecraft.network.protocol.game.ClientboundForgetLevelChunkPacket;
 import net.minecraft.network.protocol.game.ClientboundGameEventPacket;
 import net.minecraft.network.protocol.game.ClientboundHorseScreenOpenPacket;
+import net.minecraft.network.protocol.game.ClientboundInitializeBorderPacket;
 import net.minecraft.network.protocol.game.ClientboundKeepAlivePacket;
 import net.minecraft.network.protocol.game.ClientboundLevelChunkPacket;
 import net.minecraft.network.protocol.game.ClientboundLevelEventPacket;
 import net.minecraft.network.protocol.game.ClientboundLevelParticlesPacket;
 import net.minecraft.network.protocol.game.ClientboundLightUpdatePacket;
@@ -126,25 +133,33 @@
 import net.minecraft.network.protocol.game.ClientboundMoveEntityPacket;
 import net.minecraft.network.protocol.game.ClientboundMoveVehiclePacket;
 import net.minecraft.network.protocol.game.ClientboundOpenBookPacket;
 import net.minecraft.network.protocol.game.ClientboundOpenScreenPacket;
 import net.minecraft.network.protocol.game.ClientboundOpenSignEditorPacket;
+import net.minecraft.network.protocol.game.ClientboundPingPacket;
 import net.minecraft.network.protocol.game.ClientboundPlaceGhostRecipePacket;
 import net.minecraft.network.protocol.game.ClientboundPlayerAbilitiesPacket;
-import net.minecraft.network.protocol.game.ClientboundPlayerCombatPacket;
+import net.minecraft.network.protocol.game.ClientboundPlayerCombatEndPacket;
+import net.minecraft.network.protocol.game.ClientboundPlayerCombatEnterPacket;
+import net.minecraft.network.protocol.game.ClientboundPlayerCombatKillPacket;
 import net.minecraft.network.protocol.game.ClientboundPlayerInfoPacket;
 import net.minecraft.network.protocol.game.ClientboundPlayerLookAtPacket;
 import net.minecraft.network.protocol.game.ClientboundPlayerPositionPacket;
 import net.minecraft.network.protocol.game.ClientboundRecipePacket;
-import net.minecraft.network.protocol.game.ClientboundRemoveEntitiesPacket;
+import net.minecraft.network.protocol.game.ClientboundRemoveEntityPacket;
 import net.minecraft.network.protocol.game.ClientboundRemoveMobEffectPacket;
 import net.minecraft.network.protocol.game.ClientboundResourcePackPacket;
 import net.minecraft.network.protocol.game.ClientboundRespawnPacket;
 import net.minecraft.network.protocol.game.ClientboundRotateHeadPacket;
 import net.minecraft.network.protocol.game.ClientboundSectionBlocksUpdatePacket;
 import net.minecraft.network.protocol.game.ClientboundSelectAdvancementsTabPacket;
-import net.minecraft.network.protocol.game.ClientboundSetBorderPacket;
+import net.minecraft.network.protocol.game.ClientboundSetActionBarTextPacket;
+import net.minecraft.network.protocol.game.ClientboundSetBorderCenterPacket;
+import net.minecraft.network.protocol.game.ClientboundSetBorderLerpSizePacket;
+import net.minecraft.network.protocol.game.ClientboundSetBorderSizePacket;
+import net.minecraft.network.protocol.game.ClientboundSetBorderWarningDelayPacket;
+import net.minecraft.network.protocol.game.ClientboundSetBorderWarningDistancePacket;
 import net.minecraft.network.protocol.game.ClientboundSetCameraPacket;
 import net.minecraft.network.protocol.game.ClientboundSetCarriedItemPacket;
 import net.minecraft.network.protocol.game.ClientboundSetChunkCacheCenterPacket;
 import net.minecraft.network.protocol.game.ClientboundSetChunkCacheRadiusPacket;
 import net.minecraft.network.protocol.game.ClientboundSetDefaultSpawnPositionPacket;
@@ -157,12 +172,14 @@
 import net.minecraft.network.protocol.game.ClientboundSetHealthPacket;
 import net.minecraft.network.protocol.game.ClientboundSetObjectivePacket;
 import net.minecraft.network.protocol.game.ClientboundSetPassengersPacket;
 import net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket;
 import net.minecraft.network.protocol.game.ClientboundSetScorePacket;
+import net.minecraft.network.protocol.game.ClientboundSetSubtitleTextPacket;
 import net.minecraft.network.protocol.game.ClientboundSetTimePacket;
-import net.minecraft.network.protocol.game.ClientboundSetTitlesPacket;
+import net.minecraft.network.protocol.game.ClientboundSetTitleTextPacket;
+import net.minecraft.network.protocol.game.ClientboundSetTitlesAnimationPacket;
 import net.minecraft.network.protocol.game.ClientboundSoundEntityPacket;
 import net.minecraft.network.protocol.game.ClientboundSoundPacket;
 import net.minecraft.network.protocol.game.ClientboundStopSoundPacket;
 import net.minecraft.network.protocol.game.ClientboundTabListPacket;
 import net.minecraft.network.protocol.game.ClientboundTagQueryPacket;
@@ -173,15 +190,15 @@
 import net.minecraft.network.protocol.game.ClientboundUpdateMobEffectPacket;
 import net.minecraft.network.protocol.game.ClientboundUpdateRecipesPacket;
 import net.minecraft.network.protocol.game.ClientboundUpdateTagsPacket;
 import net.minecraft.network.protocol.game.ServerboundAcceptTeleportationPacket;
 import net.minecraft.network.protocol.game.ServerboundClientCommandPacket;
-import net.minecraft.network.protocol.game.ServerboundContainerAckPacket;
 import net.minecraft.network.protocol.game.ServerboundCustomPayloadPacket;
 import net.minecraft.network.protocol.game.ServerboundKeepAlivePacket;
 import net.minecraft.network.protocol.game.ServerboundMovePlayerPacket;
 import net.minecraft.network.protocol.game.ServerboundMoveVehiclePacket;
+import net.minecraft.network.protocol.game.ServerboundPongPacket;
 import net.minecraft.network.protocol.game.ServerboundResourcePackPacket;
 import net.minecraft.realms.DisconnectedRealmsScreen;
 import net.minecraft.realms.RealmsScreen;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
@@ -197,66 +214,30 @@
 import net.minecraft.world.Difficulty;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.SimpleContainer;
 import net.minecraft.world.effect.MobEffect;
 import net.minecraft.world.effect.MobEffectInstance;
-import net.minecraft.world.entity.AreaEffectCloud;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.EquipmentSlot;
 import net.minecraft.world.entity.ExperienceOrb;
-import net.minecraft.world.entity.LightningBolt;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.ai.attributes.AttributeInstance;
 import net.minecraft.world.entity.ai.attributes.AttributeMap;
 import net.minecraft.world.entity.ai.attributes.AttributeModifier;
 import net.minecraft.world.entity.animal.Bee;
 import net.minecraft.world.entity.animal.horse.AbstractHorse;
-import net.minecraft.world.entity.boss.EnderDragonPart;
-import net.minecraft.world.entity.boss.enderdragon.EndCrystal;
-import net.minecraft.world.entity.boss.enderdragon.EnderDragon;
-import net.minecraft.world.entity.decoration.ArmorStand;
-import net.minecraft.world.entity.decoration.ItemFrame;
-import net.minecraft.world.entity.decoration.LeashFenceKnotEntity;
 import net.minecraft.world.entity.decoration.Painting;
-import net.minecraft.world.entity.item.FallingBlockEntity;
 import net.minecraft.world.entity.item.ItemEntity;
-import net.minecraft.world.entity.item.PrimedTnt;
 import net.minecraft.world.entity.monster.Guardian;
 import net.minecraft.world.entity.player.Inventory;
 import net.minecraft.world.entity.player.Player;
-import net.minecraft.world.entity.projectile.AbstractArrow;
-import net.minecraft.world.entity.projectile.Arrow;
-import net.minecraft.world.entity.projectile.DragonFireball;
-import net.minecraft.world.entity.projectile.EvokerFangs;
-import net.minecraft.world.entity.projectile.EyeOfEnder;
-import net.minecraft.world.entity.projectile.FireworkRocketEntity;
-import net.minecraft.world.entity.projectile.FishingHook;
-import net.minecraft.world.entity.projectile.LargeFireball;
-import net.minecraft.world.entity.projectile.LlamaSpit;
-import net.minecraft.world.entity.projectile.ShulkerBullet;
-import net.minecraft.world.entity.projectile.SmallFireball;
-import net.minecraft.world.entity.projectile.Snowball;
-import net.minecraft.world.entity.projectile.SpectralArrow;
-import net.minecraft.world.entity.projectile.ThrownEgg;
-import net.minecraft.world.entity.projectile.ThrownEnderpearl;
-import net.minecraft.world.entity.projectile.ThrownExperienceBottle;
-import net.minecraft.world.entity.projectile.ThrownPotion;
-import net.minecraft.world.entity.projectile.ThrownTrident;
-import net.minecraft.world.entity.projectile.WitherSkull;
 import net.minecraft.world.entity.vehicle.AbstractMinecart;
-import net.minecraft.world.entity.vehicle.Boat;
-import net.minecraft.world.entity.vehicle.Minecart;
-import net.minecraft.world.entity.vehicle.MinecartChest;
-import net.minecraft.world.entity.vehicle.MinecartCommandBlock;
-import net.minecraft.world.entity.vehicle.MinecartFurnace;
-import net.minecraft.world.entity.vehicle.MinecartHopper;
-import net.minecraft.world.entity.vehicle.MinecartSpawner;
-import net.minecraft.world.entity.vehicle.MinecartTNT;
 import net.minecraft.world.inventory.AbstractContainerMenu;
 import net.minecraft.world.inventory.HorseInventoryMenu;
+import net.minecraft.world.inventory.InventoryMenu;
 import net.minecraft.world.inventory.MerchantMenu;
 import net.minecraft.world.item.CreativeModeTab;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.MapItem;
@@ -265,11 +246,10 @@
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.Explosion;
 import net.minecraft.world.level.GameType;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LightLayer;
-import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.entity.BannerBlockEntity;
 import net.minecraft.world.level.block.entity.BeaconBlockEntity;
 import net.minecraft.world.level.block.entity.BedBlockEntity;
 import net.minecraft.world.level.block.entity.BeehiveBlockEntity;
 import net.minecraft.world.level.block.entity.BlockEntity;
@@ -280,14 +260,20 @@
 import net.minecraft.world.level.block.entity.SignBlockEntity;
 import net.minecraft.world.level.block.entity.SkullBlockEntity;
 import net.minecraft.world.level.block.entity.SpawnerBlockEntity;
 import net.minecraft.world.level.block.entity.StructureBlockEntity;
 import net.minecraft.world.level.block.entity.TheEndGatewayBlockEntity;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.border.WorldBorder;
 import net.minecraft.world.level.chunk.ChunkBiomeContainer;
 import net.minecraft.world.level.chunk.DataLayer;
 import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.dimension.DimensionType;
+import net.minecraft.world.level.gameevent.GameEvent;
+import net.minecraft.world.level.gameevent.PositionSource;
+import net.minecraft.world.level.gameevent.PositionSourceType;
+import net.minecraft.world.level.gameevent.vibrations.VibrationPath;
 import net.minecraft.world.level.levelgen.structure.BoundingBox;
 import net.minecraft.world.level.lighting.LevelLightEngine;
 import net.minecraft.world.level.pathfinder.Path;
 import net.minecraft.world.level.saveddata.maps.MapItemSavedData;
 import net.minecraft.world.phys.Vec3;
@@ -304,11 +290,11 @@
    private static final Logger LOGGER = LogManager.getLogger();
    private static final Component GENERIC_DISCONNECT_MESSAGE = new TranslatableComponent("disconnect.lost");
    private final Connection connection;
    private final GameProfile localGameProfile;
    private final Screen callbackScreen;
-   private Minecraft minecraft;
+   private final Minecraft minecraft;
    private ClientLevel level;
    private ClientLevel.ClientLevelData levelData;
    private boolean started;
    private final Map<UUID, PlayerInfo> playerInfoMap = Maps.newHashMap();
    private final ClientAdvancements advancements;
@@ -368,168 +354,75 @@
       this.serverChunkRadius = var1.getChunkRadius();
       boolean var5 = var1.isDebug();
       boolean var6 = var1.isFlat();
       ClientLevel.ClientLevelData var7 = new ClientLevel.ClientLevelData(Difficulty.NORMAL, var1.isHardcore(), var6);
       this.levelData = var7;
-      this.level = new ClientLevel(this, var7, var3, var4, this.serverChunkRadius, this.minecraft::getProfiler, this.minecraft.levelRenderer, var5, var1.getSeed());
+      int var10007 = this.serverChunkRadius;
+      Minecraft var10008 = this.minecraft;
+      Objects.requireNonNull(var10008);
+      this.level = new ClientLevel(this, var7, var3, var4, var10007, var10008::getProfiler, this.minecraft.levelRenderer, var5, var1.getSeed());
       this.minecraft.setLevel(this.level);
       if (this.minecraft.player == null) {
          this.minecraft.player = this.minecraft.gameMode.createPlayer(this.level, new StatsCounter(), new ClientRecipeBook());
-         this.minecraft.player.yRot = -180.0F;
+         this.minecraft.player.setYRot(-180.0F);
          if (this.minecraft.getSingleplayerServer() != null) {
             this.minecraft.getSingleplayerServer().setUUID(this.minecraft.player.getUUID());
          }
       }
 
       this.minecraft.debugRenderer.clear();
       this.minecraft.player.resetPos();
       int var8 = var1.getPlayerId();
+      this.minecraft.player.setId(var8);
       this.level.addPlayer(var8, this.minecraft.player);
       this.minecraft.player.input = new KeyboardInput(this.minecraft.options);
       this.minecraft.gameMode.adjustPlayer(this.minecraft.player);
       this.minecraft.cameraEntity = this.minecraft.player;
       this.minecraft.setScreen(new ReceivingLevelScreen());
-      this.minecraft.player.setId(var8);
       this.minecraft.player.setReducedDebugInfo(var1.isReducedDebugInfo());
       this.minecraft.player.setShowDeathScreen(var1.shouldShowDeathScreen());
-      this.minecraft.gameMode.setLocalMode(var1.getGameType());
-      this.minecraft.gameMode.setPreviousLocalMode(var1.getPreviousGameType());
+      this.minecraft.gameMode.setLocalMode(var1.getGameType(), var1.getPreviousGameType());
       this.minecraft.options.broadcastOptions();
       this.connection.send(new ServerboundCustomPayloadPacket(ServerboundCustomPayloadPacket.BRAND, (new FriendlyByteBuf(Unpooled.buffer())).writeUtf(ClientBrandRetriever.getClientModName())));
       this.minecraft.getGame().onStartGameSession();
    }
 
    public void handleAddEntity(ClientboundAddEntityPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
-      double var2 = var1.getX();
-      double var4 = var1.getY();
-      double var6 = var1.getZ();
-      EntityType var9 = var1.getType();
-      Object var8;
-      if (var9 == EntityType.CHEST_MINECART) {
-         var8 = new MinecartChest(this.level, var2, var4, var6);
-      } else if (var9 == EntityType.FURNACE_MINECART) {
-         var8 = new MinecartFurnace(this.level, var2, var4, var6);
-      } else if (var9 == EntityType.TNT_MINECART) {
-         var8 = new MinecartTNT(this.level, var2, var4, var6);
-      } else if (var9 == EntityType.SPAWNER_MINECART) {
-         var8 = new MinecartSpawner(this.level, var2, var4, var6);
-      } else if (var9 == EntityType.HOPPER_MINECART) {
-         var8 = new MinecartHopper(this.level, var2, var4, var6);
-      } else if (var9 == EntityType.COMMAND_BLOCK_MINECART) {
-         var8 = new MinecartCommandBlock(this.level, var2, var4, var6);
-      } else if (var9 == EntityType.MINECART) {
-         var8 = new Minecart(this.level, var2, var4, var6);
-      } else {
-         Entity var10;
-         if (var9 == EntityType.FISHING_BOBBER) {
-            var10 = this.level.getEntity(var1.getData());
-            if (var10 instanceof Player) {
-               var8 = new FishingHook(this.level, (Player)var10, var2, var4, var6);
-            } else {
-               var8 = null;
-            }
-         } else if (var9 == EntityType.ARROW) {
-            var8 = new Arrow(this.level, var2, var4, var6);
-            var10 = this.level.getEntity(var1.getData());
-            if (var10 != null) {
-               ((AbstractArrow)var8).setOwner(var10);
-            }
-         } else if (var9 == EntityType.SPECTRAL_ARROW) {
-            var8 = new SpectralArrow(this.level, var2, var4, var6);
-            var10 = this.level.getEntity(var1.getData());
-            if (var10 != null) {
-               ((AbstractArrow)var8).setOwner(var10);
-            }
-         } else if (var9 == EntityType.TRIDENT) {
-            var8 = new ThrownTrident(this.level, var2, var4, var6);
-            var10 = this.level.getEntity(var1.getData());
-            if (var10 != null) {
-               ((AbstractArrow)var8).setOwner(var10);
-            }
-         } else if (var9 == EntityType.SNOWBALL) {
-            var8 = new Snowball(this.level, var2, var4, var6);
-         } else if (var9 == EntityType.LLAMA_SPIT) {
-            var8 = new LlamaSpit(this.level, var2, var4, var6, var1.getXa(), var1.getYa(), var1.getZa());
-         } else if (var9 == EntityType.ITEM_FRAME) {
-            var8 = new ItemFrame(this.level, new BlockPos(var2, var4, var6), Direction.from3DDataValue(var1.getData()));
-         } else if (var9 == EntityType.LEASH_KNOT) {
-            var8 = new LeashFenceKnotEntity(this.level, new BlockPos(var2, var4, var6));
-         } else if (var9 == EntityType.ENDER_PEARL) {
-            var8 = new ThrownEnderpearl(this.level, var2, var4, var6);
-         } else if (var9 == EntityType.EYE_OF_ENDER) {
-            var8 = new EyeOfEnder(this.level, var2, var4, var6);
-         } else if (var9 == EntityType.FIREWORK_ROCKET) {
-            var8 = new FireworkRocketEntity(this.level, var2, var4, var6, ItemStack.EMPTY);
-         } else if (var9 == EntityType.FIREBALL) {
-            var8 = new LargeFireball(this.level, var2, var4, var6, var1.getXa(), var1.getYa(), var1.getZa());
-         } else if (var9 == EntityType.DRAGON_FIREBALL) {
-            var8 = new DragonFireball(this.level, var2, var4, var6, var1.getXa(), var1.getYa(), var1.getZa());
-         } else if (var9 == EntityType.SMALL_FIREBALL) {
-            var8 = new SmallFireball(this.level, var2, var4, var6, var1.getXa(), var1.getYa(), var1.getZa());
-         } else if (var9 == EntityType.WITHER_SKULL) {
-            var8 = new WitherSkull(this.level, var2, var4, var6, var1.getXa(), var1.getYa(), var1.getZa());
-         } else if (var9 == EntityType.SHULKER_BULLET) {
-            var8 = new ShulkerBullet(this.level, var2, var4, var6, var1.getXa(), var1.getYa(), var1.getZa());
-         } else if (var9 == EntityType.EGG) {
-            var8 = new ThrownEgg(this.level, var2, var4, var6);
-         } else if (var9 == EntityType.EVOKER_FANGS) {
-            var8 = new EvokerFangs(this.level, var2, var4, var6, 0.0F, 0, (LivingEntity)null);
-         } else if (var9 == EntityType.POTION) {
-            var8 = new ThrownPotion(this.level, var2, var4, var6);
-         } else if (var9 == EntityType.EXPERIENCE_BOTTLE) {
-            var8 = new ThrownExperienceBottle(this.level, var2, var4, var6);
-         } else if (var9 == EntityType.BOAT) {
-            var8 = new Boat(this.level, var2, var4, var6);
-         } else if (var9 == EntityType.TNT) {
-            var8 = new PrimedTnt(this.level, var2, var4, var6, (LivingEntity)null);
-         } else if (var9 == EntityType.ARMOR_STAND) {
-            var8 = new ArmorStand(this.level, var2, var4, var6);
-         } else if (var9 == EntityType.END_CRYSTAL) {
-            var8 = new EndCrystal(this.level, var2, var4, var6);
-         } else if (var9 == EntityType.ITEM) {
-            var8 = new ItemEntity(this.level, var2, var4, var6);
-         } else if (var9 == EntityType.FALLING_BLOCK) {
-            var8 = new FallingBlockEntity(this.level, var2, var4, var6, Block.stateById(var1.getData()));
-         } else if (var9 == EntityType.AREA_EFFECT_CLOUD) {
-            var8 = new AreaEffectCloud(this.level, var2, var4, var6);
-         } else if (var9 == EntityType.LIGHTNING_BOLT) {
-            var8 = new LightningBolt(EntityType.LIGHTNING_BOLT, this.level);
-         } else {
-            var8 = null;
+      EntityType var2 = var1.getType();
+      Entity var3 = var2.create(this.level);
+      if (var3 != null) {
+         var3.recreateFromPacket(var1);
+         int var4 = var1.getId();
+         this.level.putNonPlayerEntity(var4, var3);
+         if (var3 instanceof AbstractMinecart) {
+            this.minecraft.getSoundManager().play(new MinecartSoundInstance((AbstractMinecart)var3));
          }
       }
 
-      if (var8 != null) {
-         int var11 = var1.getId();
-         ((Entity)var8).setPacketCoordinates(var2, var4, var6);
-         ((Entity)var8).moveTo(var2, var4, var6);
-         ((Entity)var8).xRot = (float)(var1.getxRot() * 360) / 256.0F;
-         ((Entity)var8).yRot = (float)(var1.getyRot() * 360) / 256.0F;
-         ((Entity)var8).setId(var11);
-         ((Entity)var8).setUUID(var1.getUUID());
-         this.level.putNonPlayerEntity(var11, (Entity)var8);
-         if (var8 instanceof AbstractMinecart) {
-            this.minecraft.getSoundManager().play(new MinecartSoundInstance((AbstractMinecart)var8));
-         }
-      }
-
    }
 
    public void handleAddExperienceOrb(ClientboundAddExperienceOrbPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       double var2 = var1.getX();
       double var4 = var1.getY();
       double var6 = var1.getZ();
       ExperienceOrb var8 = new ExperienceOrb(this.level, var2, var4, var6, var1.getValue());
       var8.setPacketCoordinates(var2, var4, var6);
-      var8.yRot = 0.0F;
-      var8.xRot = 0.0F;
+      var8.setYRot(0.0F);
+      var8.setXRot(0.0F);
       var8.setId(var1.getId());
       this.level.putNonPlayerEntity(var1.getId(), var8);
    }
 
+   public void handleAddVibrationSignal(ClientboundAddVibrationSignalPacket var1) {
+      PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
+      VibrationPath var2 = var1.getVibrationPath();
+      BlockPos var3 = var2.getOrigin();
+      this.level.addAlwaysVisibleParticle(new VibrationParticleOption(var2), true, (double)var3.getX() + 0.5D, (double)var3.getY() + 0.5D, (double)var3.getZ() + 0.5D, 0.0D, 0.0D, 0.0D);
+   }
+
    public void handleAddPainting(ClientboundAddPaintingPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       Painting var2 = new Painting(this.level, var1.getPos(), var1.getDirection(), var1.getMotive());
       var2.setId(var1.getId());
       var2.setUUID(var1.getUUID());
@@ -561,13 +454,13 @@
       float var8 = (float)(var1.getyRot() * 360) / 256.0F;
       float var9 = (float)(var1.getxRot() * 360) / 256.0F;
       int var10 = var1.getEntityId();
       RemotePlayer var11 = new RemotePlayer(this.minecraft.level, this.getPlayerInfo(var1.getPlayerId()).getProfile());
       var11.setId(var10);
-      var11.setPosAndOldPos(var2, var4, var6);
       var11.setPacketCoordinates(var2, var4, var6);
       var11.absMoveTo(var2, var4, var6, var8, var9);
+      var11.setOldPosAndRot();
       this.level.addPlayer(var10, var11);
    }
 
    public void handleTeleportEntity(ClientboundTeleportEntityPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
@@ -588,11 +481,11 @@
    }
 
    public void handleSetCarriedItem(ClientboundSetCarriedItemPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       if (Inventory.isHotbarSlot(var1.getSlot())) {
-         this.minecraft.player.inventory.selected = var1.getSlot();
+         this.minecraft.player.getInventory().selected = var1.getSlot();
       }
 
    }
 
    public void handleMoveEntity(ClientboundMoveEntityPacket var1) {
@@ -602,12 +495,12 @@
          if (!var2.isControlledByLocalInstance()) {
             float var4;
             if (var1.hasPosition()) {
                Vec3 var3 = var1.updateEntityPosition(var2.getPacketCoordinates());
                var2.setPacketCoordinates(var3);
-               var4 = var1.hasRotation() ? (float)(var1.getyRot() * 360) / 256.0F : var2.yRot;
-               float var5 = var1.hasRotation() ? (float)(var1.getxRot() * 360) / 256.0F : var2.xRot;
+               var4 = var1.hasRotation() ? (float)(var1.getyRot() * 360) / 256.0F : var2.getYRot();
+               float var5 = var1.hasRotation() ? (float)(var1.getxRot() * 360) / 256.0F : var2.getXRot();
                var2.lerpTo(var3.x(), var3.y(), var3.z(), var4, var5, 3, false);
             } else if (var1.hasRotation()) {
                float var6 = (float)(var1.getyRot() * 360) / 256.0F;
                var4 = (float)(var1.getxRot() * 360) / 256.0F;
                var2.lerpTo(var2.getX(), var2.getY(), var2.getZ(), var6, var4, 3, false);
@@ -626,23 +519,23 @@
          float var3 = (float)(var1.getYHeadRot() * 360) / 256.0F;
          var2.lerpHeadTo(var3, 3);
       }
    }
 
-   public void handleRemoveEntity(ClientboundRemoveEntitiesPacket var1) {
+   public void handleRemoveEntity(ClientboundRemoveEntityPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
-
-      for(int var2 = 0; var2 < var1.getEntityIds().length; ++var2) {
-         int var3 = var1.getEntityIds()[var2];
-         this.level.removeEntity(var3);
-      }
-
+      int var2 = var1.getEntityId();
+      this.level.removeEntity(var2, Entity.RemovalReason.DISCARDED);
    }
 
    public void handleMovePlayer(ClientboundPlayerPositionPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       LocalPlayer var2 = this.minecraft.player;
+      if (var1.requestDismountVehicle()) {
+         var2.removeVehicle();
+      }
+
       Vec3 var3 = var2.getDeltaMovement();
       boolean var4 = var1.getRelativeArguments().contains(ClientboundPlayerPositionPacket.RelativeArgument.X);
       boolean var5 = var1.getRelativeArguments().contains(ClientboundPlayerPositionPacket.RelativeArgument.Y);
       boolean var6 = var1.getRelativeArguments().contains(ClientboundPlayerPositionPacket.RelativeArgument.Z);
       double var7;
@@ -679,32 +572,28 @@
          var15 = 0.0D;
          var17 = var1.getZ();
          var2.zOld = var17;
       }
 
-      if (var2.tickCount > 0 && var2.getVehicle() != null) {
-         var2.removeVehicle();
-      }
-
       var2.setPosRaw(var9, var13, var17);
       var2.xo = var9;
       var2.yo = var13;
       var2.zo = var17;
       var2.setDeltaMovement(var7, var11, var15);
       float var19 = var1.getYRot();
       float var20 = var1.getXRot();
       if (var1.getRelativeArguments().contains(ClientboundPlayerPositionPacket.RelativeArgument.X_ROT)) {
-         var20 += var2.xRot;
+         var20 += var2.getXRot();
       }
 
       if (var1.getRelativeArguments().contains(ClientboundPlayerPositionPacket.RelativeArgument.Y_ROT)) {
-         var19 += var2.yRot;
+         var19 += var2.getYRot();
       }
 
       var2.absMoveTo(var9, var13, var17, var19, var20);
       this.connection.send(new ServerboundAcceptTeleportationPacket(var1.getId()));
-      this.connection.send(new ServerboundMovePlayerPacket.PosRot(var2.getX(), var2.getY(), var2.getZ(), var2.yRot, var2.xRot, false));
+      this.connection.send(new ServerboundMovePlayerPacket.PosRot(var2.getX(), var2.getY(), var2.getZ(), var2.getYRot(), var2.getXRot(), false));
       if (!this.started) {
          this.started = true;
          this.minecraft.setScreen((Screen)null);
       }
 
@@ -720,28 +609,27 @@
 
    public void handleLevelChunk(ClientboundLevelChunkPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       int var2 = var1.getX();
       int var3 = var1.getZ();
-      ChunkBiomeContainer var4 = var1.getBiomes() == null ? null : new ChunkBiomeContainer(this.registryAccess.registryOrThrow(Registry.BIOME_REGISTRY), var1.getBiomes());
-      LevelChunk var5 = this.level.getChunkSource().replaceWithPacketData(var2, var3, var4, var1.getReadBuffer(), var1.getHeightmaps(), var1.getAvailableSections(), var1.isFullChunk());
-      if (var5 != null && var1.isFullChunk()) {
-         this.level.reAddEntitiesToChunk(var5);
-      }
+      ChunkBiomeContainer var4 = new ChunkBiomeContainer(this.registryAccess.registryOrThrow(Registry.BIOME_REGISTRY), this.level, var1.getBiomes());
+      LevelChunk var5 = this.level.getChunkSource().replaceWithPacketData(var2, var3, var4, var1.getReadBuffer(), var1.getHeightmaps(), var1.getAvailableSections());
 
-      for(int var6 = 0; var6 < 16; ++var6) {
+      for(int var6 = this.level.getMinSection(); var6 < this.level.getMaxSection(); ++var6) {
          this.level.setSectionDirtyWithNeighbors(var2, var6, var3);
       }
 
-      Iterator var10 = var1.getBlockEntitiesTags().iterator();
+      if (var5 != null) {
+         Iterator var10 = var1.getBlockEntitiesTags().iterator();
 
-      while(var10.hasNext()) {
-         CompoundTag var7 = (CompoundTag)var10.next();
-         BlockPos var8 = new BlockPos(var7.getInt("x"), var7.getInt("y"), var7.getInt("z"));
-         BlockEntity var9 = this.level.getBlockEntity(var8);
-         if (var9 != null) {
-            var9.load(this.level.getBlockState(var8), var7);
+         while(var10.hasNext()) {
+            CompoundTag var7 = (CompoundTag)var10.next();
+            BlockPos var8 = new BlockPos(var7.getInt("x"), var7.getInt("y"), var7.getInt("z"));
+            BlockEntity var9 = var5.getBlockEntity(var8, LevelChunk.EntityCreationType.IMMEDIATE);
+            if (var9 != null) {
+               var9.load(var7);
+            }
          }
       }
 
    }
 
@@ -751,11 +639,11 @@
       int var3 = var1.getZ();
       ClientChunkCache var4 = this.level.getChunkSource();
       var4.drop(var2, var3);
       LevelLightEngine var5 = var4.getLightEngine();
 
-      for(int var6 = 0; var6 < 16; ++var6) {
+      for(int var6 = this.level.getMinSection(); var6 < this.level.getMaxSection(); ++var6) {
          this.level.setSectionDirtyWithNeighbors(var2, var6, var3);
          var5.updateSectionStatus(SectionPos.of(var2, var6, var3), true);
       }
 
       var5.enableLightSources(new ChunkPos(var2, var3), false);
@@ -807,14 +695,14 @@
          if (var2 instanceof ItemEntity) {
             ItemEntity var4 = (ItemEntity)var2;
             ItemStack var5 = var4.getItem();
             var5.shrink(var1.getAmount());
             if (var5.isEmpty()) {
-               this.level.removeEntity(var1.getItemId());
+               this.level.removeEntity(var1.getItemId(), Entity.RemovalReason.DISCARDED);
             }
-         } else {
-            this.level.removeEntity(var1.getItemId());
+         } else if (!(var2 instanceof ExperienceOrb)) {
+            this.level.removeEntity(var1.getItemId(), Entity.RemovalReason.DISCARDED);
          }
       }
 
    }
 
@@ -848,43 +736,24 @@
       }
    }
 
    public void handleAddMob(ClientboundAddMobPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
-      double var2 = var1.getX();
-      double var4 = var1.getY();
-      double var6 = var1.getZ();
-      float var8 = (float)(var1.getyRot() * 360) / 256.0F;
-      float var9 = (float)(var1.getxRot() * 360) / 256.0F;
-      LivingEntity var10 = (LivingEntity)EntityType.create(var1.getType(), this.minecraft.level);
-      if (var10 != null) {
-         var10.setPacketCoordinates(var2, var4, var6);
-         var10.yBodyRot = (float)(var1.getyHeadRot() * 360) / 256.0F;
-         var10.yHeadRot = (float)(var1.getyHeadRot() * 360) / 256.0F;
-         if (var10 instanceof EnderDragon) {
-            EnderDragonPart[] var11 = ((EnderDragon)var10).getSubEntities();
-
-            for(int var12 = 0; var12 < var11.length; ++var12) {
-               var11[var12].setId(var12 + var1.getId());
-            }
-         }
-
-         var10.setId(var1.getId());
-         var10.setUUID(var1.getUUID());
-         var10.absMoveTo(var2, var4, var6, var8, var9);
-         var10.setDeltaMovement((double)((float)var1.getXd() / 8000.0F), (double)((float)var1.getYd() / 8000.0F), (double)((float)var1.getZd() / 8000.0F));
-         this.level.putNonPlayerEntity(var1.getId(), var10);
-         if (var10 instanceof Bee) {
-            boolean var13 = ((Bee)var10).isAngry();
-            Object var14;
-            if (var13) {
-               var14 = new BeeAggressiveSoundInstance((Bee)var10);
+      LivingEntity var2 = (LivingEntity)EntityType.create(var1.getType(), this.level);
+      if (var2 != null) {
+         var2.recreateFromPacket(var1);
+         this.level.putNonPlayerEntity(var1.getId(), var2);
+         if (var2 instanceof Bee) {
+            boolean var3 = ((Bee)var2).isAngry();
+            Object var4;
+            if (var3) {
+               var4 = new BeeAggressiveSoundInstance((Bee)var2);
             } else {
-               var14 = new BeeFlyingSoundInstance((Bee)var10);
+               var4 = new BeeFlyingSoundInstance((Bee)var2);
             }
 
-            this.minecraft.getSoundManager().queueTickingSound((TickableSoundInstance)var14);
+            this.minecraft.getSoundManager().queueTickingSound((TickableSoundInstance)var4);
          }
       } else {
          LOGGER.warn("Skipping Entity with id {}", var1.getType());
       }
 
@@ -940,11 +809,11 @@
       int var2 = var1.length;
 
       for(int var3 = 0; var3 < var2; ++var3) {
          InteractionHand var4 = var1[var3];
          ItemStack var5 = var0.getItemInHand(var4);
-         if (var5.getItem() == Items.TOTEM_OF_UNDYING) {
+         if (var5.is(Items.TOTEM_OF_UNDYING)) {
             return var5;
          }
       }
 
       return new ItemStack(Items.TOTEM_OF_UNDYING);
@@ -989,50 +858,53 @@
       LocalPlayer var4 = this.minecraft.player;
       int var5 = var4.getId();
       this.started = false;
       if (var2 != var4.level.dimension()) {
          Scoreboard var6 = this.level.getScoreboard();
-         boolean var7 = var1.isDebug();
-         boolean var8 = var1.isFlat();
-         ClientLevel.ClientLevelData var9 = new ClientLevel.ClientLevelData(this.levelData.getDifficulty(), this.levelData.isHardcore(), var8);
-         this.levelData = var9;
-         this.level = new ClientLevel(this, var9, var2, var3, this.serverChunkRadius, this.minecraft::getProfiler, this.minecraft.levelRenderer, var7, var1.getSeed());
+         Map var7 = this.level.getAllMapData();
+         boolean var8 = var1.isDebug();
+         boolean var9 = var1.isFlat();
+         ClientLevel.ClientLevelData var10 = new ClientLevel.ClientLevelData(this.levelData.getDifficulty(), this.levelData.isHardcore(), var9);
+         this.levelData = var10;
+         int var10007 = this.serverChunkRadius;
+         Minecraft var10008 = this.minecraft;
+         Objects.requireNonNull(var10008);
+         this.level = new ClientLevel(this, var10, var2, var3, var10007, var10008::getProfiler, this.minecraft.levelRenderer, var8, var1.getSeed());
          this.level.setScoreboard(var6);
+         this.level.addMapData(var7);
          this.minecraft.setLevel(this.level);
          this.minecraft.setScreen(new ReceivingLevelScreen());
       }
 
-      this.level.removeAllPendingEntityRemovals();
-      String var10 = var4.getServerBrand();
+      String var11 = var4.getServerBrand();
       this.minecraft.cameraEntity = null;
-      LocalPlayer var11 = this.minecraft.gameMode.createPlayer(this.level, var4.getStats(), var4.getRecipeBook(), var4.isShiftKeyDown(), var4.isSprinting());
-      var11.setId(var5);
-      this.minecraft.player = var11;
+      LocalPlayer var12 = this.minecraft.gameMode.createPlayer(this.level, var4.getStats(), var4.getRecipeBook(), var4.isShiftKeyDown(), var4.isSprinting());
+      var12.setId(var5);
+      this.minecraft.player = var12;
       if (var2 != var4.level.dimension()) {
          this.minecraft.getMusicManager().stopPlaying();
       }
 
-      this.minecraft.cameraEntity = var11;
-      var11.getEntityData().assignValues(var4.getEntityData().getAll());
+      this.minecraft.cameraEntity = var12;
+      var12.getEntityData().assignValues(var4.getEntityData().getAll());
       if (var1.shouldKeepAllPlayerData()) {
-         var11.getAttributes().assignValues(var4.getAttributes());
+         var12.getAttributes().assignValues(var4.getAttributes());
       }
 
-      var11.resetPos();
-      var11.setServerBrand(var10);
-      this.level.addPlayer(var5, var11);
-      var11.yRot = -180.0F;
-      var11.input = new KeyboardInput(this.minecraft.options);
-      this.minecraft.gameMode.adjustPlayer(var11);
-      var11.setReducedDebugInfo(var4.isReducedDebugInfo());
-      var11.setShowDeathScreen(var4.shouldShowDeathScreen());
+      var12.resetPos();
+      var12.setServerBrand(var11);
+      this.level.addPlayer(var5, var12);
+      var12.setYRot(-180.0F);
+      var12.input = new KeyboardInput(this.minecraft.options);
+      this.minecraft.gameMode.adjustPlayer(var12);
+      var12.setReducedDebugInfo(var4.isReducedDebugInfo());
+      var12.setShowDeathScreen(var4.shouldShowDeathScreen());
       if (this.minecraft.screen instanceof DeathScreen) {
          this.minecraft.setScreen((Screen)null);
       }
 
-      this.minecraft.gameMode.setLocalMode(var1.getPlayerGameType());
-      this.minecraft.gameMode.setPreviousLocalMode(var1.getPreviousPlayerGameType());
+      this.minecraft.gameMode.setLocalMode(var1.getPlayerGameType(), var1.getPreviousPlayerGameType());
    }
 
    public void handleExplosion(ClientboundExplodePacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       Explosion var2 = new Explosion(this.minecraft.level, (Entity)null, var1.getX(), var1.getY(), var1.getZ(), var1.getPower(), var1.getToBlow());
@@ -1045,13 +917,13 @@
       Entity var2 = this.level.getEntity(var1.getEntityId());
       if (var2 instanceof AbstractHorse) {
          LocalPlayer var3 = this.minecraft.player;
          AbstractHorse var4 = (AbstractHorse)var2;
          SimpleContainer var5 = new SimpleContainer(var1.getSize());
-         HorseInventoryMenu var6 = new HorseInventoryMenu(var1.getContainerId(), var3.inventory, var5, var4);
+         HorseInventoryMenu var6 = new HorseInventoryMenu(var1.getContainerId(), var3.getInventory(), var5, var4);
          var3.containerMenu = var6;
-         this.minecraft.setScreen(new HorseInventoryScreen(var6, var3.inventory, var4));
+         this.minecraft.setScreen(new HorseInventoryScreen(var6, var3.getInventory(), var4));
       }
 
    }
 
    public void handleOpenScreen(ClientboundOpenScreenPacket var1) {
@@ -1065,22 +937,22 @@
       ItemStack var3 = var1.getItem();
       int var4 = var1.getSlot();
       this.minecraft.getTutorial().onGetItem(var3);
       if (var1.getContainerId() == -1) {
          if (!(this.minecraft.screen instanceof CreativeModeInventoryScreen)) {
-            var2.inventory.setCarried(var3);
+            var2.containerMenu.setCarried(var3);
          }
       } else if (var1.getContainerId() == -2) {
-         var2.inventory.setItem(var4, var3);
+         var2.getInventory().setItem(var4, var3);
       } else {
          boolean var5 = false;
          if (this.minecraft.screen instanceof CreativeModeInventoryScreen) {
             CreativeModeInventoryScreen var6 = (CreativeModeInventoryScreen)this.minecraft.screen;
             var5 = var6.getSelectedTab() != CreativeModeTab.TAB_INVENTORY.getId();
          }
 
-         if (var1.getContainerId() == 0 && var1.getSlot() >= 36 && var4 < 45) {
+         if (var1.getContainerId() == 0 && InventoryMenu.isHotbarSlot(var4)) {
             if (!var3.isEmpty()) {
                ItemStack var7 = var2.inventoryMenu.getSlot(var4).getItem();
                if (var7.isEmpty() || var7.getCount() < var3.getCount()) {
                   var3.setPopTime(5);
                }
@@ -1092,26 +964,10 @@
          }
       }
 
    }
 
-   public void handleContainerAck(ClientboundContainerAckPacket var1) {
-      PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
-      Object var2 = null;
-      LocalPlayer var3 = this.minecraft.player;
-      if (var1.getContainerId() == 0) {
-         var2 = var3.inventoryMenu;
-      } else if (var1.getContainerId() == var3.containerMenu.containerId) {
-         var2 = var3.containerMenu;
-      }
-
-      if (var2 != null && !var1.isAccepted()) {
-         this.send((Packet)(new ServerboundContainerAckPacket(var1.getContainerId(), var1.getUid(), true)));
-      }
-
-   }
-
    public void handleContainerContent(ClientboundContainerSetContentPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       LocalPlayer var2 = this.minecraft.player;
       if (var1.getContainerId() == 0) {
          var2.inventoryMenu.setAll(var1.getItems());
@@ -1121,27 +977,29 @@
 
    }
 
    public void handleOpenSignEditor(ClientboundOpenSignEditorPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
-      Object var2 = this.level.getBlockEntity(var1.getPos());
-      if (!(var2 instanceof SignBlockEntity)) {
-         var2 = new SignBlockEntity();
-         ((BlockEntity)var2).setLevelAndPosition(this.level, var1.getPos());
+      BlockPos var2 = var1.getPos();
+      Object var3 = this.level.getBlockEntity(var2);
+      if (!(var3 instanceof SignBlockEntity)) {
+         BlockState var4 = this.level.getBlockState(var2);
+         var3 = new SignBlockEntity(var2, var4);
+         ((BlockEntity)var3).setLevel(this.level);
       }
 
-      this.minecraft.player.openTextEdit((SignBlockEntity)var2);
+      this.minecraft.player.openTextEdit((SignBlockEntity)var3);
    }
 
    public void handleBlockEntityData(ClientboundBlockEntityDataPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       BlockPos var2 = var1.getPos();
       BlockEntity var3 = this.minecraft.level.getBlockEntity(var2);
       int var4 = var1.getType();
       boolean var5 = var4 == 2 && var3 instanceof CommandBlockEntity;
       if (var4 == 1 && var3 instanceof SpawnerBlockEntity || var5 || var4 == 3 && var3 instanceof BeaconBlockEntity || var4 == 4 && var3 instanceof SkullBlockEntity || var4 == 6 && var3 instanceof BannerBlockEntity || var4 == 7 && var3 instanceof StructureBlockEntity || var4 == 8 && var3 instanceof TheEndGatewayBlockEntity || var4 == 9 && var3 instanceof SignBlockEntity || var4 == 11 && var3 instanceof BedBlockEntity || var4 == 5 && var3 instanceof ConduitBlockEntity || var4 == 12 && var3 instanceof JigsawBlockEntity || var4 == 13 && var3 instanceof CampfireBlockEntity || var4 == 14 && var3 instanceof BeehiveBlockEntity) {
-         var3.load(this.minecraft.level.getBlockState(var2), var1.getTag());
+         var3.load(var1.getTag());
       }
 
       if (var5 && this.minecraft.screen instanceof CommandBlockEditScreen) {
          ((CommandBlockEditScreen)this.minecraft.screen).updateGui();
       }
@@ -1241,26 +1099,20 @@
    }
 
    public void handleMapItemData(ClientboundMapItemDataPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       MapRenderer var2 = this.minecraft.gameRenderer.getMapRenderer();
-      String var3 = MapItem.makeKey(var1.getMapId());
-      MapItemSavedData var4 = this.minecraft.level.getMapData(var3);
-      if (var4 == null) {
-         var4 = new MapItemSavedData(var3);
-         if (var2.getMapInstanceIfExists(var3) != null) {
-            MapItemSavedData var5 = var2.getData(var2.getMapInstanceIfExists(var3));
-            if (var5 != null) {
-               var4 = var5;
-            }
-         }
-
-         this.minecraft.level.setMapData(var4);
+      int var3 = var1.getMapId();
+      String var4 = MapItem.makeKey(var3);
+      MapItemSavedData var5 = this.minecraft.level.getMapData(var4);
+      if (var5 == null) {
+         var5 = MapItemSavedData.createForClient(var1.getScale(), var1.isLocked(), this.minecraft.level.dimension());
+         this.minecraft.level.setMapData(var4, var5);
       }
 
-      var1.applyToMap(var4);
-      var2.update(var4);
+      var1.applyToMap(var5);
+      var2.update(var3, var5);
    }
 
    public void handleLevelEvent(ClientboundLevelEventPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       if (var1.isGlobalEvent()) {
@@ -1308,11 +1160,13 @@
       this.recipeManager.replaceRecipes(var1.getRecipes());
       MutableSearchTree var2 = this.minecraft.getSearchTree(SearchRegistry.RECIPE_COLLECTIONS);
       var2.clear();
       ClientRecipeBook var3 = this.minecraft.player.getRecipeBook();
       var3.setupCollections(this.recipeManager.getRecipes());
-      var3.getCollections().forEach(var2::add);
+      List var10000 = var3.getCollections();
+      Objects.requireNonNull(var2);
+      var10000.forEach(var2::add);
       var2.refresh();
    }
 
    public void handleLookAt(ClientboundPlayerLookAtPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
@@ -1352,10 +1206,11 @@
       ClientRecipeBook var2;
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       var2 = this.minecraft.player.getRecipeBook();
       var2.setBookSettings(var1.getBookSettings());
       ClientboundRecipePacket.State var3 = var1.getState();
+      Optional var10000;
       Iterator var4;
       ResourceLocation var5;
       label45:
       switch(var3) {
       case REMOVE:
@@ -1365,29 +1220,35 @@
             if (!var4.hasNext()) {
                break label45;
             }
 
             var5 = (ResourceLocation)var4.next();
-            this.recipeManager.byKey(var5).ifPresent(var2::remove);
+            var10000 = this.recipeManager.byKey(var5);
+            Objects.requireNonNull(var2);
+            var10000.ifPresent(var2::remove);
          }
       case INIT:
          var4 = var1.getRecipes().iterator();
 
          while(var4.hasNext()) {
             var5 = (ResourceLocation)var4.next();
-            this.recipeManager.byKey(var5).ifPresent(var2::add);
+            var10000 = this.recipeManager.byKey(var5);
+            Objects.requireNonNull(var2);
+            var10000.ifPresent(var2::add);
          }
 
          var4 = var1.getHighlights().iterator();
 
          while(true) {
             if (!var4.hasNext()) {
                break label45;
             }
 
             var5 = (ResourceLocation)var4.next();
-            this.recipeManager.byKey(var5).ifPresent(var2::addHighlight);
+            var10000 = this.recipeManager.byKey(var5);
+            Objects.requireNonNull(var2);
+            var10000.ifPresent(var2::addHighlight);
          }
       case ADD:
          var4 = var1.getRecipes().iterator();
 
          while(var4.hasNext()) {
@@ -1415,18 +1276,18 @@
       if (var2 instanceof LivingEntity) {
          MobEffect var3 = MobEffect.byId(var1.getEffectId());
          if (var3 != null) {
             MobEffectInstance var4 = new MobEffectInstance(var3, var1.getEffectDurationTicks(), var1.getEffectAmplifier(), var1.isEffectAmbient(), var1.isEffectVisible(), var1.effectShowsIcon());
             var4.setNoCounter(var1.isSuperLongDuration());
-            ((LivingEntity)var2).forceAddEffect(var4);
+            ((LivingEntity)var2).forceAddEffect(var4, (Entity)null);
          }
       }
    }
 
    public void handleUpdateTags(ClientboundUpdateTagsPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
-      TagContainer var2 = var1.getTags();
+      TagContainer var2 = TagContainer.deserializeFromNetwork(this.registryAccess, var1.getTags());
       Multimap var3 = StaticTags.getAllMissingTags(var2);
       if (!var3.isEmpty()) {
          LOGGER.warn("Incomplete server tags, disconnecting. Missing: {}", var3);
          this.connection.disconnect(new TranslatableComponent("multiplayer.disconnect.missing_tags"));
       } else {
@@ -1437,20 +1298,24 @@
 
          this.minecraft.getSearchTree(SearchRegistry.CREATIVE_TAGS).refresh();
       }
    }
 
-   public void handlePlayerCombat(ClientboundPlayerCombatPacket var1) {
+   public void handlePlayerCombatEnd(ClientboundPlayerCombatEndPacket var1) {
+   }
+
+   public void handlePlayerCombatEnter(ClientboundPlayerCombatEnterPacket var1) {
+   }
+
+   public void handlePlayerCombatKill(ClientboundPlayerCombatKillPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
-      if (var1.event == ClientboundPlayerCombatPacket.Event.ENTITY_DIED) {
-         Entity var2 = this.level.getEntity(var1.playerId);
-         if (var2 == this.minecraft.player) {
-            if (this.minecraft.player.shouldShowDeathScreen()) {
-               this.minecraft.setScreen(new DeathScreen(var1.message, this.level.getLevelData().isHardcore()));
-            } else {
-               this.minecraft.player.respawn();
-            }
+      Entity var2 = this.level.getEntity(var1.getPlayerId());
+      if (var2 == this.minecraft.player) {
+         if (this.minecraft.player.shouldShowDeathScreen()) {
+            this.minecraft.setScreen(new DeathScreen(var1.getMessage(), this.level.getLevelData().isHardcore()));
+         } else {
+            this.minecraft.player.respawn();
          }
       }
 
    }
 
@@ -1467,40 +1332,75 @@
          this.minecraft.setCameraEntity(var2);
       }
 
    }
 
-   public void handleSetBorder(ClientboundSetBorderPacket var1) {
+   public void handleInitializeBorder(ClientboundInitializeBorderPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
-      var1.applyChanges(this.level.getWorldBorder());
+      WorldBorder var2 = this.level.getWorldBorder();
+      var2.setCenter(var1.getNewCenterX(), var1.getNewCenterZ());
+      long var3 = var1.getLerpTime();
+      if (var3 > 0L) {
+         var2.lerpSizeBetween(var1.getOldSize(), var1.getNewSize(), var3);
+      } else {
+         var2.setSize(var1.getNewSize());
+      }
+
+      var2.setAbsoluteMaxSize(var1.getNewAbsoluteMaxSize());
+      var2.setWarningBlocks(var1.getWarningBlocks());
+      var2.setWarningTime(var1.getWarningTime());
    }
 
-   public void handleSetTitles(ClientboundSetTitlesPacket var1) {
+   public void handleSetBorderCenter(ClientboundSetBorderCenterPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
-      ClientboundSetTitlesPacket.Type var2 = var1.getType();
-      Component var3 = null;
-      Component var4 = null;
-      Component var5 = var1.getText() != null ? var1.getText() : TextComponent.EMPTY;
-      switch(var2) {
-      case TITLE:
-         var3 = var5;
-         break;
-      case SUBTITLE:
-         var4 = var5;
-         break;
-      case ACTIONBAR:
-         this.minecraft.gui.setOverlayMessage(var5, false);
-         return;
-      case RESET:
-         this.minecraft.gui.setTitles((Component)null, (Component)null, -1, -1, -1);
+      this.level.getWorldBorder().setCenter(var1.getNewCenterX(), var1.getNewCenterZ());
+   }
+
+   public void handleSetBorderLerpSize(ClientboundSetBorderLerpSizePacket var1) {
+      PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
+      this.level.getWorldBorder().lerpSizeBetween(var1.getOldSize(), var1.getNewSize(), var1.getLerpTime());
+   }
+
+   public void handleSetBorderSize(ClientboundSetBorderSizePacket var1) {
+      PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
+      this.level.getWorldBorder().setSize(var1.getSize());
+   }
+
+   public void handleSetBorderWarningDistance(ClientboundSetBorderWarningDistancePacket var1) {
+      PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
+      this.level.getWorldBorder().setWarningBlocks(var1.getWarningBlocks());
+   }
+
+   public void handleSetBorderWarningDelay(ClientboundSetBorderWarningDelayPacket var1) {
+      PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
+      this.level.getWorldBorder().setWarningTime(var1.getWarningDelay());
+   }
+
+   public void handleTitlesClear(ClientboundClearTitlesPacket var1) {
+      this.minecraft.gui.clear();
+      if (var1.shouldResetTimes()) {
          this.minecraft.gui.resetTitleTimes();
-         return;
       }
 
-      this.minecraft.gui.setTitles(var3, var4, var1.getFadeInTime(), var1.getStayTime(), var1.getFadeOutTime());
    }
 
+   public void setActionBarText(ClientboundSetActionBarTextPacket var1) {
+      this.minecraft.gui.setOverlayMessage(var1.getText(), false);
+   }
+
+   public void setTitleText(ClientboundSetTitleTextPacket var1) {
+      this.minecraft.gui.setTitle(var1.getText());
+   }
+
+   public void setSubtitleText(ClientboundSetSubtitleTextPacket var1) {
+      this.minecraft.gui.setSubtitle(var1.getText());
+   }
+
+   public void setTitlesAnimation(ClientboundSetTitlesAnimationPacket var1) {
+      this.minecraft.gui.setTimes(var1.getFadeIn(), var1.getStay(), var1.getFadeOut());
+   }
+
    public void handleTabListCustomisation(ClientboundTabListPacket var1) {
       this.minecraft.gui.getTabList().setHeader(var1.getHeader().getString().isEmpty() ? null : var1.getHeader());
       this.minecraft.gui.getTabList().setFooter(var1.getFooter().getString().isEmpty() ? null : var1.getFooter());
    }
 
@@ -1557,16 +1457,16 @@
    }
 
    public void handlePlayerAbilities(ClientboundPlayerAbilitiesPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       LocalPlayer var2 = this.minecraft.player;
-      var2.abilities.flying = var1.isFlying();
-      var2.abilities.instabuild = var1.canInstabuild();
-      var2.abilities.invulnerable = var1.isInvulnerable();
-      var2.abilities.mayfly = var1.canFly();
-      var2.abilities.setFlyingSpeed(var1.getFlyingSpeed());
-      var2.abilities.setWalkingSpeed(var1.getWalkingSpeed());
+      var2.getAbilities().flying = var1.isFlying();
+      var2.getAbilities().instabuild = var1.canInstabuild();
+      var2.getAbilities().invulnerable = var1.isInvulnerable();
+      var2.getAbilities().mayfly = var1.canFly();
+      var2.getAbilities().setFlyingSpeed(var1.getFlyingSpeed());
+      var2.getAbilities().setWalkingSpeed(var1.getWalkingSpeed());
    }
 
    public void handleSoundEvent(ClientboundSoundPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       this.minecraft.level.playSound(this.minecraft.player, var1.getX(), var1.getY(), var1.getZ(), var1.getSound(), var1.getSource(), var1.getVolume(), var1.getPitch());
@@ -1586,63 +1486,74 @@
    }
 
    public void handleResourcePack(ClientboundResourcePackPacket var1) {
       String var2 = var1.getUrl();
       String var3 = var1.getHash();
+      boolean var4 = var1.isRequired();
       if (this.validateResourcePackUrl(var2)) {
          if (var2.startsWith("level://")) {
             try {
-               String var9 = URLDecoder.decode(var2.substring("level://".length()), StandardCharsets.UTF_8.toString());
-               File var5 = new File(this.minecraft.gameDirectory, "saves");
-               File var6 = new File(var5, var9);
-               if (var6.isFile()) {
+               String var10 = URLDecoder.decode(var2.substring("level://".length()), StandardCharsets.UTF_8.toString());
+               File var6 = new File(this.minecraft.gameDirectory, "saves");
+               File var7 = new File(var6, var10);
+               if (var7.isFile()) {
                   this.send(ServerboundResourcePackPacket.Action.ACCEPTED);
-                  CompletableFuture var7 = this.minecraft.getClientPackSource().setServerPack(var6, PackSource.WORLD);
-                  this.downloadCallback(var7);
+                  CompletableFuture var8 = this.minecraft.getClientPackSource().setServerPack(var7, PackSource.WORLD);
+                  this.downloadCallback(var8);
                   return;
                }
-            } catch (UnsupportedEncodingException var8) {
+            } catch (UnsupportedEncodingException var9) {
             }
 
             this.send(ServerboundResourcePackPacket.Action.FAILED_DOWNLOAD);
          } else {
-            ServerData var4 = this.minecraft.getCurrentServer();
-            if (var4 != null && var4.getResourcePackStatus() == ServerData.ServerPackStatus.ENABLED) {
+            ServerData var5 = this.minecraft.getCurrentServer();
+            if (var5 != null && var5.getResourcePackStatus() == ServerData.ServerPackStatus.ENABLED) {
                this.send(ServerboundResourcePackPacket.Action.ACCEPTED);
-               this.downloadCallback(this.minecraft.getClientPackSource().downloadAndSelectResourcePack(var2, var3));
-            } else if (var4 != null && var4.getResourcePackStatus() != ServerData.ServerPackStatus.PROMPT) {
+               this.downloadCallback(this.minecraft.getClientPackSource().downloadAndSelectResourcePack(var2, var3, true));
+            } else if (var5 != null && var5.getResourcePackStatus() != ServerData.ServerPackStatus.PROMPT && (!var4 || var5.getResourcePackStatus() != ServerData.ServerPackStatus.DISABLED)) {
                this.send(ServerboundResourcePackPacket.Action.DECLINED);
+               if (var4) {
+                  this.connection.disconnect(new TranslatableComponent("multiplayer.requiredTexturePrompt.disconnect"));
+               }
             } else {
                this.minecraft.execute(() -> {
-                  this.minecraft.setScreen(new ConfirmScreen((var3x) -> {
-                     this.minecraft = Minecraft.getInstance();
-                     ServerData var4 = this.minecraft.getCurrentServer();
-                     if (var3x) {
-                        if (var4 != null) {
-                           var4.setResourcePackStatus(ServerData.ServerPackStatus.ENABLED);
+                  this.minecraft.setScreen(new ConfirmScreen((var4x) -> {
+                     this.minecraft.setScreen((Screen)null);
+                     ServerData var5 = this.minecraft.getCurrentServer();
+                     if (var4x) {
+                        if (var5 != null) {
+                           var5.setResourcePackStatus(ServerData.ServerPackStatus.ENABLED);
                         }
 
                         this.send(ServerboundResourcePackPacket.Action.ACCEPTED);
-                        this.downloadCallback(this.minecraft.getClientPackSource().downloadAndSelectResourcePack(var2, var3));
+                        this.downloadCallback(this.minecraft.getClientPackSource().downloadAndSelectResourcePack(var2, var3, true));
                      } else {
-                        if (var4 != null) {
-                           var4.setResourcePackStatus(ServerData.ServerPackStatus.DISABLED);
+                        this.send(ServerboundResourcePackPacket.Action.DECLINED);
+                        if (var4) {
+                           this.connection.disconnect(new TranslatableComponent("multiplayer.requiredTexturePrompt.disconnect"));
+                        } else if (var5 != null) {
+                           var5.setResourcePackStatus(ServerData.ServerPackStatus.DISABLED);
                         }
+                     }
 
-                        this.send(ServerboundResourcePackPacket.Action.DECLINED);
+                     if (var5 != null) {
+                        ServerList.saveSingleServer(var5);
                      }
 
-                     ServerList.saveSingleServer(var4);
-                     this.minecraft.setScreen((Screen)null);
-                  }, new TranslatableComponent("multiplayer.texturePrompt.line1"), new TranslatableComponent("multiplayer.texturePrompt.line2")));
+                  }, var4 ? new TranslatableComponent("multiplayer.requiredTexturePrompt.line1") : new TranslatableComponent("multiplayer.texturePrompt.line1"), preparePackPrompt((Component)(var4 ? (new TranslatableComponent("multiplayer.requiredTexturePrompt.line2")).withStyle(new ChatFormatting[]{ChatFormatting.YELLOW, ChatFormatting.BOLD}) : new TranslatableComponent("multiplayer.texturePrompt.line2")), var1.getPrompt()), var4 ? CommonComponents.GUI_PROCEED : CommonComponents.GUI_YES, (Component)(var4 ? new TranslatableComponent("menu.disconnect") : CommonComponents.GUI_NO)));
                });
             }
 
          }
       }
    }
 
+   private static Component preparePackPrompt(Component var0, @Nullable Component var1) {
+      return (Component)(var1 == null ? var0 : new TranslatableComponent("multiplayer.texturePrompt.serverPrompt", new Object[]{var0, var1}));
+   }
+
    private boolean validateResourcePackUrl(String var1) {
       try {
          URI var2 = new URI(var1);
          String var3 = var2.getScheme();
          boolean var4 = "level".equals(var3);
@@ -1698,11 +1609,11 @@
    }
 
    public void handleOpenBook(ClientboundOpenBookPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       ItemStack var2 = this.minecraft.player.getItemInHand(var1.getHand());
-      if (var2.getItem() == Items.WRITTEN_BOOK) {
+      if (var2.is(Items.WRITTEN_BOOK)) {
          this.minecraft.setScreen(new BookViewScreen(new BookViewScreen.WrittenBookAccess(var2)));
       }
 
    }
 
@@ -1712,11 +1623,11 @@
       FriendlyByteBuf var3 = null;
 
       try {
          var3 = var1.getData();
          if (ClientboundCustomPayloadPacket.BRAND.equals(var2)) {
-            this.minecraft.player.setServerBrand(var3.readUtf(32767));
+            this.minecraft.player.setServerBrand(var3.readUtf());
          } else {
             int var4;
             if (ClientboundCustomPayloadPacket.DEBUG_PATHFINDING_PACKET.equals(var2)) {
                var4 = var3.readInt();
                float var5 = var3.readFloat();
@@ -1726,107 +1637,94 @@
                long var34 = var3.readVarLong();
                BlockPos var39 = var3.readBlockPos();
                ((NeighborsUpdateRenderer)this.minecraft.debugRenderer.neighborsUpdateRenderer).addUpdate(var34, var39);
             } else {
                ArrayList var7;
-               int var8;
-               BlockPos var35;
-               int var37;
-               if (ClientboundCustomPayloadPacket.DEBUG_CAVES_PACKET.equals(var2)) {
-                  var35 = var3.readBlockPos();
-                  var37 = var3.readInt();
-                  ArrayList var40 = Lists.newArrayList();
+               int var9;
+               int var40;
+               if (ClientboundCustomPayloadPacket.DEBUG_STRUCTURES_PACKET.equals(var2)) {
+                  DimensionType var35 = (DimensionType)this.registryAccess.registryOrThrow(Registry.DIMENSION_TYPE_REGISTRY).get(var3.readResourceLocation());
+                  BoundingBox var36 = new BoundingBox(var3.readInt(), var3.readInt(), var3.readInt(), var3.readInt(), var3.readInt(), var3.readInt());
+                  var40 = var3.readInt();
                   var7 = Lists.newArrayList();
+                  ArrayList var8 = Lists.newArrayList();
 
-                  for(var8 = 0; var8 < var37; ++var8) {
-                     var40.add(var3.readBlockPos());
-                     var7.add(var3.readFloat());
+                  for(var9 = 0; var9 < var40; ++var9) {
+                     var7.add(new BoundingBox(var3.readInt(), var3.readInt(), var3.readInt(), var3.readInt(), var3.readInt(), var3.readInt()));
+                     var8.add(var3.readBoolean());
                   }
 
-                  this.minecraft.debugRenderer.caveRenderer.addTunnel(var35, var40, var7);
+                  this.minecraft.debugRenderer.structureRenderer.addBoundingBox(var36, var7, var8, var35);
+               } else if (ClientboundCustomPayloadPacket.DEBUG_WORLDGENATTEMPT_PACKET.equals(var2)) {
+                  ((WorldGenAttemptRenderer)this.minecraft.debugRenderer.worldGenAttemptRenderer).addPos(var3.readBlockPos(), var3.readFloat(), var3.readFloat(), var3.readFloat(), var3.readFloat(), var3.readFloat());
                } else {
-                  int var9;
-                  int var41;
-                  if (ClientboundCustomPayloadPacket.DEBUG_STRUCTURES_PACKET.equals(var2)) {
-                     DimensionType var36 = (DimensionType)this.registryAccess.dimensionTypes().get(var3.readResourceLocation());
-                     BoundingBox var38 = new BoundingBox(var3.readInt(), var3.readInt(), var3.readInt(), var3.readInt(), var3.readInt(), var3.readInt());
-                     var41 = var3.readInt();
-                     var7 = Lists.newArrayList();
-                     ArrayList var47 = Lists.newArrayList();
-
-                     for(var9 = 0; var9 < var41; ++var9) {
-                        var7.add(new BoundingBox(var3.readInt(), var3.readInt(), var3.readInt(), var3.readInt(), var3.readInt(), var3.readInt()));
-                        var47.add(var3.readBoolean());
-                     }
-
-                     this.minecraft.debugRenderer.structureRenderer.addBoundingBox(var38, var7, var47, var36);
-                  } else if (ClientboundCustomPayloadPacket.DEBUG_WORLDGENATTEMPT_PACKET.equals(var2)) {
-                     ((WorldGenAttemptRenderer)this.minecraft.debugRenderer.worldGenAttemptRenderer).addPos(var3.readBlockPos(), var3.readFloat(), var3.readFloat(), var3.readFloat(), var3.readFloat(), var3.readFloat());
-                  } else if (ClientboundCustomPayloadPacket.DEBUG_VILLAGE_SECTIONS.equals(var2)) {
+                  int var38;
+                  if (ClientboundCustomPayloadPacket.DEBUG_VILLAGE_SECTIONS.equals(var2)) {
                      var4 = var3.readInt();
 
-                     for(var37 = 0; var37 < var4; ++var37) {
+                     for(var38 = 0; var38 < var4; ++var38) {
                         this.minecraft.debugRenderer.villageSectionsDebugRenderer.setVillageSection(var3.readSectionPos());
                      }
 
-                     var37 = var3.readInt();
+                     var38 = var3.readInt();
 
-                     for(var41 = 0; var41 < var37; ++var41) {
+                     for(var40 = 0; var40 < var38; ++var40) {
                         this.minecraft.debugRenderer.villageSectionsDebugRenderer.setNotVillageSection(var3.readSectionPos());
                      }
                   } else {
-                     String var42;
+                     BlockPos var37;
+                     String var41;
                      if (ClientboundCustomPayloadPacket.DEBUG_POI_ADDED_PACKET.equals(var2)) {
-                        var35 = var3.readBlockPos();
-                        var42 = var3.readUtf();
-                        var41 = var3.readInt();
-                        BrainDebugRenderer.PoiInfo var44 = new BrainDebugRenderer.PoiInfo(var35, var42, var41);
-                        this.minecraft.debugRenderer.brainDebugRenderer.addPoi(var44);
+                        var37 = var3.readBlockPos();
+                        var41 = var3.readUtf();
+                        var40 = var3.readInt();
+                        BrainDebugRenderer.PoiInfo var43 = new BrainDebugRenderer.PoiInfo(var37, var41, var40);
+                        this.minecraft.debugRenderer.brainDebugRenderer.addPoi(var43);
                      } else if (ClientboundCustomPayloadPacket.DEBUG_POI_REMOVED_PACKET.equals(var2)) {
-                        var35 = var3.readBlockPos();
-                        this.minecraft.debugRenderer.brainDebugRenderer.removePoi(var35);
+                        var37 = var3.readBlockPos();
+                        this.minecraft.debugRenderer.brainDebugRenderer.removePoi(var37);
                      } else if (ClientboundCustomPayloadPacket.DEBUG_POI_TICKET_COUNT_PACKET.equals(var2)) {
-                        var35 = var3.readBlockPos();
-                        var37 = var3.readInt();
-                        this.minecraft.debugRenderer.brainDebugRenderer.setFreeTicketCount(var35, var37);
+                        var37 = var3.readBlockPos();
+                        var38 = var3.readInt();
+                        this.minecraft.debugRenderer.brainDebugRenderer.setFreeTicketCount(var37, var38);
                      } else if (ClientboundCustomPayloadPacket.DEBUG_GOAL_SELECTOR.equals(var2)) {
-                        var35 = var3.readBlockPos();
-                        var37 = var3.readInt();
-                        var41 = var3.readInt();
+                        var37 = var3.readBlockPos();
+                        var38 = var3.readInt();
+                        var40 = var3.readInt();
                         var7 = Lists.newArrayList();
 
-                        for(var8 = 0; var8 < var41; ++var8) {
+                        for(int var46 = 0; var46 < var40; ++var46) {
                            var9 = var3.readInt();
                            boolean var10 = var3.readBoolean();
                            String var11 = var3.readUtf(255);
-                           var7.add(new GoalSelectorDebugRenderer.DebugGoal(var35, var9, var11, var10));
+                           var7.add(new GoalSelectorDebugRenderer.DebugGoal(var37, var9, var11, var10));
                         }
 
-                        this.minecraft.debugRenderer.goalSelectorRenderer.addGoalSelector(var37, var7);
+                        this.minecraft.debugRenderer.goalSelectorRenderer.addGoalSelector(var38, var7);
                      } else if (ClientboundCustomPayloadPacket.DEBUG_RAIDS.equals(var2)) {
                         var4 = var3.readInt();
-                        ArrayList var45 = Lists.newArrayList();
+                        ArrayList var44 = Lists.newArrayList();
 
-                        for(var41 = 0; var41 < var4; ++var41) {
-                           var45.add(var3.readBlockPos());
+                        for(var40 = 0; var40 < var4; ++var40) {
+                           var44.add(var3.readBlockPos());
                         }
 
-                        this.minecraft.debugRenderer.raidDebugRenderer.setRaidCenters(var45);
+                        this.minecraft.debugRenderer.raidDebugRenderer.setRaidCenters(var44);
                      } else {
                         int var12;
                         int var23;
-                        double var43;
-                        double var48;
-                        double var49;
-                        PositionImpl var51;
-                        UUID var54;
+                        double var42;
+                        double var50;
+                        double var51;
+                        PositionImpl var56;
+                        UUID var57;
                         if (ClientboundCustomPayloadPacket.DEBUG_BRAIN.equals(var2)) {
-                           var43 = var3.readDouble();
-                           var48 = var3.readDouble();
-                           var49 = var3.readDouble();
-                           var51 = new PositionImpl(var43, var48, var49);
-                           var54 = var3.readUUID();
+                           var42 = var3.readDouble();
+                           var50 = var3.readDouble();
+                           var51 = var3.readDouble();
+                           var56 = new PositionImpl(var42, var50, var51);
+                           var57 = var3.readUUID();
                            var12 = var3.readInt();
                            String var13 = var3.readUtf();
                            String var14 = var3.readUtf();
                            int var15 = var3.readInt();
                            float var16 = var3.readFloat();
@@ -1839,120 +1737,131 @@
                            } else {
                               var20 = null;
                            }
 
                            boolean var21 = var3.readBoolean();
-                           BrainDebugRenderer.BrainDump var22 = new BrainDebugRenderer.BrainDump(var54, var12, var13, var14, var15, var16, var17, var51, var18, var20, var21);
-                           var23 = var3.readInt();
+                           BrainDebugRenderer.BrainDump var22 = new BrainDebugRenderer.BrainDump(var57, var12, var13, var14, var15, var16, var17, var56, var18, var20, var21);
+                           var23 = var3.readVarInt();
 
                            int var24;
                            for(var24 = 0; var24 < var23; ++var24) {
                               String var25 = var3.readUtf();
                               var22.activities.add(var25);
                            }
 
-                           var24 = var3.readInt();
+                           var24 = var3.readVarInt();
 
-                           int var67;
-                           for(var67 = 0; var67 < var24; ++var67) {
+                           int var70;
+                           for(var70 = 0; var70 < var24; ++var70) {
                               String var26 = var3.readUtf();
                               var22.behaviors.add(var26);
                            }
 
-                           var67 = var3.readInt();
+                           var70 = var3.readVarInt();
 
-                           int var68;
-                           for(var68 = 0; var68 < var67; ++var68) {
+                           int var71;
+                           for(var71 = 0; var71 < var70; ++var71) {
                               String var27 = var3.readUtf();
                               var22.memories.add(var27);
                            }
 
-                           var68 = var3.readInt();
+                           var71 = var3.readVarInt();
 
-                           int var69;
-                           for(var69 = 0; var69 < var68; ++var69) {
+                           int var72;
+                           for(var72 = 0; var72 < var71; ++var72) {
                               BlockPos var28 = var3.readBlockPos();
                               var22.pois.add(var28);
                            }
 
-                           var69 = var3.readInt();
+                           var72 = var3.readVarInt();
 
-                           int var70;
-                           for(var70 = 0; var70 < var69; ++var70) {
+                           int var73;
+                           for(var73 = 0; var73 < var72; ++var73) {
                               BlockPos var29 = var3.readBlockPos();
                               var22.potentialPois.add(var29);
                            }
 
-                           var70 = var3.readInt();
+                           var73 = var3.readVarInt();
 
-                           for(int var71 = 0; var71 < var70; ++var71) {
+                           for(int var74 = 0; var74 < var73; ++var74) {
                               String var30 = var3.readUtf();
                               var22.gossips.add(var30);
                            }
 
                            this.minecraft.debugRenderer.brainDebugRenderer.addOrUpdateBrainDump(var22);
                         } else if (ClientboundCustomPayloadPacket.DEBUG_BEE.equals(var2)) {
-                           var43 = var3.readDouble();
-                           var48 = var3.readDouble();
-                           var49 = var3.readDouble();
-                           var51 = new PositionImpl(var43, var48, var49);
-                           var54 = var3.readUUID();
+                           var42 = var3.readDouble();
+                           var50 = var3.readDouble();
+                           var51 = var3.readDouble();
+                           var56 = new PositionImpl(var42, var50, var51);
+                           var57 = var3.readUUID();
                            var12 = var3.readInt();
-                           boolean var55 = var3.readBoolean();
-                           BlockPos var56 = null;
-                           if (var55) {
-                              var56 = var3.readBlockPos();
+                           boolean var58 = var3.readBoolean();
+                           BlockPos var59 = null;
+                           if (var58) {
+                              var59 = var3.readBlockPos();
                            }
 
-                           boolean var57 = var3.readBoolean();
-                           BlockPos var58 = null;
-                           if (var57) {
-                              var58 = var3.readBlockPos();
-                           }
-
-                           int var59 = var3.readInt();
                            boolean var60 = var3.readBoolean();
-                           Path var61 = null;
+                           BlockPos var61 = null;
                            if (var60) {
-                              var61 = Path.createFromStream(var3);
+                              var61 = var3.readBlockPos();
                            }
 
-                           BeeDebugRenderer.BeeInfo var62 = new BeeDebugRenderer.BeeInfo(var54, var12, var51, var61, var56, var58, var59);
-                           int var63 = var3.readInt();
+                           int var62 = var3.readInt();
+                           boolean var63 = var3.readBoolean();
+                           Path var64 = null;
+                           if (var63) {
+                              var64 = Path.createFromStream(var3);
+                           }
 
-                           int var64;
-                           for(var64 = 0; var64 < var63; ++var64) {
-                              String var65 = var3.readUtf();
-                              var62.goals.add(var65);
+                           BeeDebugRenderer.BeeInfo var65 = new BeeDebugRenderer.BeeInfo(var57, var12, var56, var64, var59, var61, var62);
+                           int var66 = var3.readVarInt();
+
+                           int var67;
+                           for(var67 = 0; var67 < var66; ++var67) {
+                              String var68 = var3.readUtf();
+                              var65.goals.add(var68);
                            }
 
-                           var64 = var3.readInt();
+                           var67 = var3.readVarInt();
 
-                           for(var23 = 0; var23 < var64; ++var23) {
-                              BlockPos var66 = var3.readBlockPos();
-                              var62.blacklistedHives.add(var66);
+                           for(var23 = 0; var23 < var67; ++var23) {
+                              BlockPos var69 = var3.readBlockPos();
+                              var65.blacklistedHives.add(var69);
                            }
 
-                           this.minecraft.debugRenderer.beeDebugRenderer.addOrUpdateBeeInfo(var62);
+                           this.minecraft.debugRenderer.beeDebugRenderer.addOrUpdateBeeInfo(var65);
                         } else {
-                           int var46;
+                           int var45;
                            if (ClientboundCustomPayloadPacket.DEBUG_HIVE.equals(var2)) {
-                              var35 = var3.readBlockPos();
-                              var42 = var3.readUtf();
-                              var41 = var3.readInt();
-                              var46 = var3.readInt();
-                              boolean var52 = var3.readBoolean();
-                              BeeDebugRenderer.HiveInfo var50 = new BeeDebugRenderer.HiveInfo(var35, var42, var41, var46, var52, this.level.getGameTime());
-                              this.minecraft.debugRenderer.beeDebugRenderer.addOrUpdateHiveInfo(var50);
+                              var37 = var3.readBlockPos();
+                              var41 = var3.readUtf();
+                              var40 = var3.readInt();
+                              var45 = var3.readInt();
+                              boolean var53 = var3.readBoolean();
+                              BeeDebugRenderer.HiveInfo var54 = new BeeDebugRenderer.HiveInfo(var37, var41, var40, var45, var53, this.level.getGameTime());
+                              this.minecraft.debugRenderer.beeDebugRenderer.addOrUpdateHiveInfo(var54);
                            } else if (ClientboundCustomPayloadPacket.DEBUG_GAME_TEST_CLEAR.equals(var2)) {
                               this.minecraft.debugRenderer.gameTestDebugRenderer.clear();
                            } else if (ClientboundCustomPayloadPacket.DEBUG_GAME_TEST_ADD_MARKER.equals(var2)) {
-                              var35 = var3.readBlockPos();
-                              var37 = var3.readInt();
-                              String var53 = var3.readUtf();
-                              var46 = var3.readInt();
-                              this.minecraft.debugRenderer.gameTestDebugRenderer.addMarker(var35, var37, var53, var46);
+                              var37 = var3.readBlockPos();
+                              var38 = var3.readInt();
+                              String var55 = var3.readUtf();
+                              var45 = var3.readInt();
+                              this.minecraft.debugRenderer.gameTestDebugRenderer.addMarker(var37, var38, var55, var45);
+                           } else if (ClientboundCustomPayloadPacket.DEBUG_GAME_EVENT.equals(var2)) {
+                              GameEvent var47 = (GameEvent)Registry.GAME_EVENT.get(new ResourceLocation(var3.readUtf()));
+                              BlockPos var48 = var3.readBlockPos();
+                              this.minecraft.debugRenderer.gameEventListenerRenderer.trackGameEvent(var47, var48);
+                           } else if (ClientboundCustomPayloadPacket.DEBUG_GAME_EVENT_LISTENER.equals(var2)) {
+                              ResourceLocation var49 = var3.readResourceLocation();
+                              PositionSource var52 = ((PositionSourceType)Registry.POSITION_SOURCE_TYPE.getOptional(var49).orElseThrow(() -> {
+                                 return new IllegalArgumentException("Unknown position source type " + var49);
+                              })).read(var3);
+                              var40 = var3.readVarInt();
+                              this.minecraft.debugRenderer.gameEventListenerRenderer.trackListener(var52, var40);
                            } else {
                               LOGGER.warn("Unknown custom packed identifier: {}", var2);
                            }
                         }
                      }
@@ -2012,56 +1921,56 @@
    }
 
    public void handleSetPlayerTeamPacket(ClientboundSetPlayerTeamPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       Scoreboard var2 = this.level.getScoreboard();
+      ClientboundSetPlayerTeamPacket.Action var4 = var1.getTeamAction();
       PlayerTeam var3;
-      if (var1.getMethod() == 0) {
+      if (var4 == ClientboundSetPlayerTeamPacket.Action.ADD) {
          var3 = var2.addPlayerTeam(var1.getName());
       } else {
          var3 = var2.getPlayerTeam(var1.getName());
       }
 
-      if (var1.getMethod() == 0 || var1.getMethod() == 2) {
-         var3.setDisplayName(var1.getDisplayName());
-         var3.setColor(var1.getColor());
-         var3.unpackOptions(var1.getOptions());
-         Team.Visibility var4 = Team.Visibility.byName(var1.getNametagVisibility());
-         if (var4 != null) {
-            var3.setNameTagVisibility(var4);
+      Optional var5 = var1.getParameters();
+      var5.ifPresent((var1x) -> {
+         var3.setDisplayName(var1x.getDisplayName());
+         var3.setColor(var1x.getColor());
+         var3.unpackOptions(var1x.getOptions());
+         Team.Visibility var2 = Team.Visibility.byName(var1x.getNametagVisibility());
+         if (var2 != null) {
+            var3.setNameTagVisibility(var2);
          }
 
-         Team.CollisionRule var5 = Team.CollisionRule.byName(var1.getCollisionRule());
-         if (var5 != null) {
-            var3.setCollisionRule(var5);
+         Team.CollisionRule var3x = Team.CollisionRule.byName(var1x.getCollisionRule());
+         if (var3x != null) {
+            var3.setCollisionRule(var3x);
          }
 
-         var3.setPlayerPrefix(var1.getPlayerPrefix());
-         var3.setPlayerSuffix(var1.getPlayerSuffix());
-      }
+         var3.setPlayerPrefix(var1x.getPlayerPrefix());
+         var3.setPlayerSuffix(var1x.getPlayerSuffix());
+      });
+      ClientboundSetPlayerTeamPacket.Action var6 = var1.getPlayerAction();
+      Iterator var7;
+      String var8;
+      if (var6 == ClientboundSetPlayerTeamPacket.Action.ADD) {
+         var7 = var1.getPlayers().iterator();
 
-      Iterator var6;
-      String var7;
-      if (var1.getMethod() == 0 || var1.getMethod() == 3) {
-         var6 = var1.getPlayers().iterator();
-
-         while(var6.hasNext()) {
-            var7 = (String)var6.next();
-            var2.addPlayerToTeam(var7, var3);
+         while(var7.hasNext()) {
+            var8 = (String)var7.next();
+            var2.addPlayerToTeam(var8, var3);
          }
-      }
+      } else if (var6 == ClientboundSetPlayerTeamPacket.Action.REMOVE) {
+         var7 = var1.getPlayers().iterator();
 
-      if (var1.getMethod() == 4) {
-         var6 = var1.getPlayers().iterator();
-
-         while(var6.hasNext()) {
-            var7 = (String)var6.next();
-            var2.removePlayerFromTeam(var7, var3);
+         while(var7.hasNext()) {
+            var8 = (String)var7.next();
+            var2.removePlayerFromTeam(var8, var3);
          }
       }
 
-      if (var1.getMethod() == 1) {
+      if (var4 == ClientboundSetPlayerTeamPacket.Action.REMOVE) {
          var2.removePlayerTeam(var3);
       }
 
    }
 
@@ -2095,10 +2004,15 @@
          }
       }
 
    }
 
+   public void handlePing(ClientboundPingPacket var1) {
+      PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
+      this.send((Packet)(new ServerboundPongPacket(var1.getId())));
+   }
+
    public void handleUpdateAttributes(ClientboundUpdateAttributesPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       Entity var2 = this.level.getEntity(var1.getEntityId());
       if (var2 != null) {
          if (!(var2 instanceof LivingEntity)) {
@@ -2132,11 +2046,11 @@
    }
 
    public void handlePlaceRecipe(ClientboundPlaceGhostRecipePacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       AbstractContainerMenu var2 = this.minecraft.player.containerMenu;
-      if (var2.containerId == var1.getContainerId() && var2.isSynched(this.minecraft.player)) {
+      if (var2.containerId == var1.getContainerId()) {
          this.recipeManager.byKey(var1.getRecipe()).ifPresent((var2x) -> {
             if (this.minecraft.screen instanceof RecipeUpdateListener) {
                RecipeBookComponent var3 = ((RecipeUpdateListener)this.minecraft.screen).getRecipeBookComponent();
                var3.setupGhostRecipe(var2x, var2.slots);
             }
@@ -2148,29 +2062,30 @@
    public void handleLightUpdatePacked(ClientboundLightUpdatePacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       int var2 = var1.getX();
       int var3 = var1.getZ();
       LevelLightEngine var4 = this.level.getChunkSource().getLightEngine();
-      int var5 = var1.getSkyYMask();
-      int var6 = var1.getEmptySkyYMask();
+      BitSet var5 = var1.getSkyYMask();
+      BitSet var6 = var1.getEmptySkyYMask();
       Iterator var7 = var1.getSkyUpdates().iterator();
       this.readSectionList(var2, var3, var4, LightLayer.SKY, var5, var6, var7, var1.getTrustEdges());
-      int var8 = var1.getBlockYMask();
-      int var9 = var1.getEmptyBlockYMask();
+      BitSet var8 = var1.getBlockYMask();
+      BitSet var9 = var1.getEmptyBlockYMask();
       Iterator var10 = var1.getBlockUpdates().iterator();
       this.readSectionList(var2, var3, var4, LightLayer.BLOCK, var8, var9, var10, var1.getTrustEdges());
    }
 
    public void handleMerchantOffers(ClientboundMerchantOffersPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       AbstractContainerMenu var2 = this.minecraft.player.containerMenu;
       if (var1.getContainerId() == var2.containerId && var2 instanceof MerchantMenu) {
-         ((MerchantMenu)var2).setOffers(new MerchantOffers(var1.getOffers().createTag()));
-         ((MerchantMenu)var2).setXp(var1.getVillagerXp());
-         ((MerchantMenu)var2).setMerchantLevel(var1.getVillagerLevel());
-         ((MerchantMenu)var2).setShowProgressBar(var1.showProgress());
-         ((MerchantMenu)var2).setCanRestock(var1.canRestock());
+         MerchantMenu var3 = (MerchantMenu)var2;
+         var3.setOffers(new MerchantOffers(var1.getOffers().createTag()));
+         var3.setXp(var1.getVillagerXp());
+         var3.setMerchantLevel(var1.getVillagerLevel());
+         var3.setShowProgressBar(var1.showProgress());
+         var3.setCanRestock(var1.canRestock());
       }
 
    }
 
    public void handleSetChunkCacheRadius(ClientboundSetChunkCacheRadiusPacket var1) {
@@ -2187,15 +2102,15 @@
    public void handleBlockBreakAck(ClientboundBlockBreakAckPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       this.minecraft.gameMode.handleBlockBreakAck(this.level, var1.getPos(), var1.getState(), var1.action(), var1.allGood());
    }
 
-   private void readSectionList(int var1, int var2, LevelLightEngine var3, LightLayer var4, int var5, int var6, Iterator<byte[]> var7, boolean var8) {
-      for(int var9 = 0; var9 < 18; ++var9) {
-         int var10 = -1 + var9;
-         boolean var11 = (var5 & 1 << var9) != 0;
-         boolean var12 = (var6 & 1 << var9) != 0;
+   private void readSectionList(int var1, int var2, LevelLightEngine var3, LightLayer var4, BitSet var5, BitSet var6, Iterator<byte[]> var7, boolean var8) {
+      for(int var9 = 0; var9 < var3.getLightSectionCount(); ++var9) {
+         int var10 = var3.getMinLightSection() + var9;
+         boolean var11 = var5.get(var9);
+         boolean var12 = var6.get(var9);
          if (var11 || var12) {
             var3.queueSectionData(var4, SectionPos.of(var1, var10, var2), var11 ? new DataLayer((byte[])((byte[])var7.next()).clone()) : new DataLayer(), var8);
             this.level.setSectionDirtyWithNeighbors(var1, var10, var2);
          }
       }
