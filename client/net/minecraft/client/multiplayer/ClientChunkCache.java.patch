--- net/minecraft/client/multiplayer/ClientChunkCache.java
+++ net/minecraft/client/multiplayer/ClientChunkCache.java
@@ -1,17 +1,19 @@
 package net.minecraft.client.multiplayer;
 
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.nio.charset.StandardCharsets;
+import java.util.BitSet;
 import java.util.concurrent.atomic.AtomicReferenceArray;
 import java.util.function.BooleanSupplier;
 import javax.annotation.Nullable;
 import net.minecraft.client.Minecraft;
-import net.minecraft.core.BlockPos;
 import net.minecraft.core.SectionPos;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.FriendlyByteBuf;
-import net.minecraft.util.Mth;
-import net.minecraft.world.entity.Entity;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.LightLayer;
 import net.minecraft.world.level.chunk.ChunkBiomeContainer;
 import net.minecraft.world.level.chunk.ChunkSource;
@@ -22,15 +24,15 @@
 import net.minecraft.world.level.lighting.LevelLightEngine;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class ClientChunkCache extends ChunkSource {
-   private static final Logger LOGGER = LogManager.getLogger();
+   static final Logger LOGGER = LogManager.getLogger();
    private final LevelChunk emptyChunk;
    private final LevelLightEngine lightEngine;
-   private volatile ClientChunkCache.Storage storage;
-   private final ClientLevel level;
+   volatile ClientChunkCache.Storage storage;
+   final ClientLevel level;
 
    public ClientChunkCache(ClientLevel var1, int var2) {
       this.level = var1;
       this.emptyChunk = new EmptyLevelChunk(var1, new ChunkPos(0, 0));
       this.lightEngine = new LevelLightEngine(this, true, var1.dimensionType().hasSkyLight());
@@ -76,41 +78,38 @@
    public BlockGetter getLevel() {
       return this.level;
    }
 
    @Nullable
-   public LevelChunk replaceWithPacketData(int var1, int var2, @Nullable ChunkBiomeContainer var3, FriendlyByteBuf var4, CompoundTag var5, int var6, boolean var7) {
+   public LevelChunk replaceWithPacketData(int var1, int var2, ChunkBiomeContainer var3, FriendlyByteBuf var4, CompoundTag var5, BitSet var6) {
       if (!this.storage.inRange(var1, var2)) {
          LOGGER.warn("Ignoring chunk since it's not in the view range: {}, {}", var1, var2);
          return null;
       } else {
-         int var8 = this.storage.getIndex(var1, var2);
-         LevelChunk var9 = (LevelChunk)this.storage.chunks.get(var8);
-         if (!var7 && isValidChunk(var9, var1, var2)) {
-            var9.replaceWithPacketData(var3, var4, var5, var6);
+         int var7 = this.storage.getIndex(var1, var2);
+         LevelChunk var8 = (LevelChunk)this.storage.chunks.get(var7);
+         ChunkPos var9 = new ChunkPos(var1, var2);
+         if (!isValidChunk(var8, var1, var2)) {
+            var8 = new LevelChunk(this.level, var9, var3);
+            var8.replaceWithPacketData(var3, var4, var5, var6);
+            this.storage.replace(var7, var8);
          } else {
-            if (var3 == null) {
-               LOGGER.warn("Ignoring chunk since we don't have complete data: {}, {}", var1, var2);
-               return null;
-            }
-
-            var9 = new LevelChunk(this.level, new ChunkPos(var1, var2), var3);
-            var9.replaceWithPacketData(var3, var4, var5, var6);
-            this.storage.replace(var8, var9);
+            var8.replaceWithPacketData(var3, var4, var5, var6);
          }
 
-         LevelChunkSection[] var10 = var9.getSections();
+         LevelChunkSection[] var10 = var8.getSections();
          LevelLightEngine var11 = this.getLightEngine();
-         var11.enableLightSources(new ChunkPos(var1, var2), true);
+         var11.enableLightSources(var9, true);
 
          for(int var12 = 0; var12 < var10.length; ++var12) {
             LevelChunkSection var13 = var10[var12];
-            var11.updateSectionStatus(SectionPos.of(var1, var12, var2), LevelChunkSection.isEmpty(var13));
+            int var14 = this.level.getSectionYFromSectionIndex(var12);
+            var11.updateSectionStatus(SectionPos.of(var1, var14, var2), LevelChunkSection.isEmpty(var13));
          }
 
-         this.level.onChunkLoaded(var1, var2);
-         return var9;
+         this.level.onChunkLoaded(var9);
+         return var8;
       }
    }
 
    public void tick(BooleanSupplier var1) {
    }
@@ -146,48 +145,37 @@
    private static int calculateStorageRange(int var0) {
       return Math.max(2, var0) + 3;
    }
 
    public String gatherStats() {
-      return "Client Chunk Cache: " + this.storage.chunks.length() + ", " + this.getLoadedChunksCount();
+      int var10000 = this.storage.chunks.length();
+      return var10000 + ", " + this.getLoadedChunksCount();
    }
 
    public int getLoadedChunksCount() {
       return this.storage.chunkCount;
    }
 
    public void onLightUpdate(LightLayer var1, SectionPos var2) {
       Minecraft.getInstance().levelRenderer.setSectionDirty(var2.x(), var2.y(), var2.z());
    }
 
-   public boolean isTickingChunk(BlockPos var1) {
-      return this.hasChunk(var1.getX() >> 4, var1.getZ() >> 4);
-   }
-
-   public boolean isEntityTickingChunk(ChunkPos var1) {
-      return this.hasChunk(var1.x, var1.z);
-   }
-
-   public boolean isEntityTickingChunk(Entity var1) {
-      return this.hasChunk(Mth.floor(var1.getX()) >> 4, Mth.floor(var1.getZ()) >> 4);
-   }
-
-   final class Storage {
-      private final AtomicReferenceArray<LevelChunk> chunks;
-      private final int chunkRadius;
+   private final class Storage {
+      final AtomicReferenceArray<LevelChunk> chunks;
+      final int chunkRadius;
       private final int viewRange;
-      private volatile int viewCenterX;
-      private volatile int viewCenterZ;
-      private int chunkCount;
+      volatile int viewCenterX;
+      volatile int viewCenterZ;
+      int chunkCount;
 
-      private Storage(int var2) {
+      Storage(int var2) {
          this.chunkRadius = var2;
          this.viewRange = var2 * 2 + 1;
          this.chunks = new AtomicReferenceArray(this.viewRange * this.viewRange);
       }
 
-      private int getIndex(int var1, int var2) {
+      int getIndex(int var1, int var2) {
          return Math.floorMod(var2, this.viewRange) * this.viewRange + Math.floorMod(var1, this.viewRange);
       }
 
       protected void replace(int var1, @Nullable LevelChunk var2) {
          LevelChunk var3 = (LevelChunk)this.chunks.getAndSet(var1, var2);
@@ -209,15 +197,48 @@
 
          ClientChunkCache.this.level.unload(var2);
          return var2;
       }
 
-      private boolean inRange(int var1, int var2) {
+      boolean inRange(int var1, int var2) {
          return Math.abs(var1 - this.viewCenterX) <= this.chunkRadius && Math.abs(var2 - this.viewCenterZ) <= this.chunkRadius;
       }
 
       @Nullable
       protected LevelChunk getChunk(int var1) {
          return (LevelChunk)this.chunks.get(var1);
       }
+
+      private void dumpChunks(String var1) {
+         try {
+            FileOutputStream var2 = new FileOutputStream(new File(var1));
+
+            try {
+               int var3 = ClientChunkCache.this.storage.chunkRadius;
+
+               for(int var4 = this.viewCenterZ - var3; var4 <= this.viewCenterZ + var3; ++var4) {
+                  for(int var5 = this.viewCenterX - var3; var5 <= this.viewCenterX + var3; ++var5) {
+                     LevelChunk var6 = (LevelChunk)ClientChunkCache.this.storage.chunks.get(ClientChunkCache.this.storage.getIndex(var5, var4));
+                     if (var6 != null) {
+                        ChunkPos var7 = var6.getPos();
+                        var2.write((var7.x + "\t" + var7.z + "\t" + var6.isEmpty() + "\n").getBytes(StandardCharsets.UTF_8));
+                     }
+                  }
+               }
+            } catch (Throwable var9) {
+               try {
+                  var2.close();
+               } catch (Throwable var8) {
+                  var9.addSuppressed(var8);
+               }
+
+               throw var9;
+            }
+
+            var2.close();
+         } catch (IOException var10) {
+            ClientChunkCache.LOGGER.error(var10);
+         }
+
+      }
    }
 }
