--- net/minecraft/client/multiplayer/ClientChunkCache.java
+++ net/minecraft/client/multiplayer/ClientChunkCache.java
@@ -1,17 +1,20 @@
 package net.minecraft.client.multiplayer;
 
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.nio.charset.StandardCharsets;
+import java.util.BitSet;
 import java.util.concurrent.atomic.AtomicReferenceArray;
 import java.util.function.BooleanSupplier;
 import javax.annotation.Nullable;
 import net.minecraft.client.Minecraft;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.SectionPos;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.FriendlyByteBuf;
-import net.minecraft.util.Mth;
-import net.minecraft.world.entity.Entity;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.LightLayer;
 import net.minecraft.world.level.chunk.ChunkBiomeContainer;
 import net.minecraft.world.level.chunk.ChunkSource;
@@ -76,41 +79,38 @@
    public BlockGetter getLevel() {
       return this.level;
    }
 
    @Nullable
-   public LevelChunk replaceWithPacketData(int var1, int var2, @Nullable ChunkBiomeContainer var3, FriendlyByteBuf var4, CompoundTag var5, int var6, boolean var7) {
+   public LevelChunk replaceWithPacketData(int var1, int var2, ChunkBiomeContainer var3, FriendlyByteBuf var4, CompoundTag var5, BitSet var6) {
       if (!this.storage.inRange(var1, var2)) {
          LOGGER.warn("Ignoring chunk since it's not in the view range: {}, {}", var1, var2);
          return null;
       } else {
-         int var8 = this.storage.getIndex(var1, var2);
-         LevelChunk var9 = (LevelChunk)this.storage.chunks.get(var8);
-         if (!var7 && isValidChunk(var9, var1, var2)) {
-            var9.replaceWithPacketData(var3, var4, var5, var6);
+         int var7 = this.storage.getIndex(var1, var2);
+         LevelChunk var8 = (LevelChunk)this.storage.chunks.get(var7);
+         ChunkPos var9 = new ChunkPos(var1, var2);
+         if (!isValidChunk(var8, var1, var2)) {
+            var8 = new LevelChunk(this.level, var9, var3);
+            var8.replaceWithPacketData(var3, var4, var5, var6);
+            this.storage.replace(var7, var8);
          } else {
-            if (var3 == null) {
-               LOGGER.warn("Ignoring chunk since we don't have complete data: {}, {}", var1, var2);
-               return null;
-            }
-
-            var9 = new LevelChunk(this.level, new ChunkPos(var1, var2), var3);
-            var9.replaceWithPacketData(var3, var4, var5, var6);
-            this.storage.replace(var8, var9);
+            var8.replaceWithPacketData(var3, var4, var5, var6);
          }
 
-         LevelChunkSection[] var10 = var9.getSections();
+         LevelChunkSection[] var10 = var8.getSections();
          LevelLightEngine var11 = this.getLightEngine();
-         var11.enableLightSources(new ChunkPos(var1, var2), true);
+         var11.enableLightSources(var9, true);
 
          for(int var12 = 0; var12 < var10.length; ++var12) {
             LevelChunkSection var13 = var10[var12];
-            var11.updateSectionStatus(SectionPos.of(var1, var12, var2), LevelChunkSection.isEmpty(var13));
+            int var14 = this.level.getSectionYFromSectionIndex(var12);
+            var11.updateSectionStatus(SectionPos.of(var1, var14, var2), LevelChunkSection.isEmpty(var13));
          }
 
-         this.level.onChunkLoaded(var1, var2);
-         return var9;
+         this.level.onChunkLoaded(var9);
+         return var8;
       }
    }
 
    public void tick(BooleanSupplier var1) {
    }
@@ -146,11 +146,11 @@
    private static int calculateStorageRange(int var0) {
       return Math.max(2, var0) + 3;
    }
 
    public String gatherStats() {
-      return "Client Chunk Cache: " + this.storage.chunks.length() + ", " + this.getLoadedChunksCount();
+      return this.storage.chunks.length() + ", " + this.getLoadedChunksCount();
    }
 
    public int getLoadedChunksCount() {
       return this.storage.chunkCount;
    }
@@ -158,21 +158,17 @@
    public void onLightUpdate(LightLayer var1, SectionPos var2) {
       Minecraft.getInstance().levelRenderer.setSectionDirty(var2.x(), var2.y(), var2.z());
    }
 
    public boolean isTickingChunk(BlockPos var1) {
-      return this.hasChunk(var1.getX() >> 4, var1.getZ() >> 4);
+      return this.hasChunk(SectionPos.blockToSectionCoord(var1.getX()), SectionPos.blockToSectionCoord(var1.getZ()));
    }
 
    public boolean isEntityTickingChunk(ChunkPos var1) {
       return this.hasChunk(var1.x, var1.z);
    }
 
-   public boolean isEntityTickingChunk(Entity var1) {
-      return this.hasChunk(Mth.floor(var1.getX()) >> 4, Mth.floor(var1.getZ()) >> 4);
-   }
-
    final class Storage {
       private final AtomicReferenceArray<LevelChunk> chunks;
       private final int chunkRadius;
       private final int viewRange;
       private volatile int viewCenterX;
@@ -217,7 +213,47 @@
 
       @Nullable
       protected LevelChunk getChunk(int var1) {
          return (LevelChunk)this.chunks.get(var1);
       }
+
+      private void dumpChunks(String var1) {
+         try {
+            FileOutputStream var2 = new FileOutputStream(new File(var1));
+            Throwable var3 = null;
+
+            try {
+               int var4 = ClientChunkCache.this.storage.chunkRadius;
+
+               for(int var5 = this.viewCenterZ - var4; var5 <= this.viewCenterZ + var4; ++var5) {
+                  for(int var6 = this.viewCenterX - var4; var6 <= this.viewCenterX + var4; ++var6) {
+                     LevelChunk var7 = (LevelChunk)ClientChunkCache.this.storage.chunks.get(ClientChunkCache.this.storage.getIndex(var6, var5));
+                     if (var7 != null) {
+                        ChunkPos var8 = var7.getPos();
+                        var2.write((var8.x + "\t" + var8.z + "\t" + var7.isEmpty() + "\n").getBytes(StandardCharsets.UTF_8));
+                     }
+                  }
+               }
+            } catch (Throwable var17) {
+               var3 = var17;
+               throw var17;
+            } finally {
+               if (var2 != null) {
+                  if (var3 != null) {
+                     try {
+                        var2.close();
+                     } catch (Throwable var16) {
+                        var3.addSuppressed(var16);
+                     }
+                  } else {
+                     var2.close();
+                  }
+               }
+
+            }
+         } catch (IOException var19) {
+            ClientChunkCache.LOGGER.error(var19);
+         }
+
+      }
    }
 }
