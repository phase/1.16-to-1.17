--- net/minecraft/client/multiplayer/MultiPlayerGameMode.java
+++ net/minecraft/client/multiplayer/MultiPlayerGameMode.java
@@ -1,9 +1,10 @@
 package net.minecraft.client.multiplayer;
 
 import com.mojang.datafixers.util.Pair;
 import it.unimi.dsi.fastutil.objects.Object2ObjectLinkedOpenHashMap;
+import javax.annotation.Nullable;
 import net.minecraft.client.ClientRecipeBook;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.player.LocalPlayer;
 import net.minecraft.client.resources.sounds.SimpleSoundInstance;
 import net.minecraft.core.BlockPos;
@@ -33,14 +34,12 @@
 import net.minecraft.world.item.context.UseOnContext;
 import net.minecraft.world.item.crafting.Recipe;
 import net.minecraft.world.level.GameType;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Block;
-import net.minecraft.world.level.block.CommandBlock;
-import net.minecraft.world.level.block.JigsawBlock;
+import net.minecraft.world.level.block.GameMasterBlock;
 import net.minecraft.world.level.block.SoundType;
-import net.minecraft.world.level.block.StructureBlock;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.material.FluidState;
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.EntityHitResult;
 import net.minecraft.world.phys.Vec3;
@@ -56,38 +55,40 @@
    private float destroyProgress;
    private float destroyTicks;
    private int destroyDelay;
    private boolean isDestroying;
    private GameType localPlayerMode;
+   @Nullable
    private GameType previousLocalPlayerMode;
    private final Object2ObjectLinkedOpenHashMap<Pair<BlockPos, ServerboundPlayerActionPacket.Action>, Vec3> unAckedActions;
    private int carriedIndex;
 
    public MultiPlayerGameMode(Minecraft var1, ClientPacketListener var2) {
       this.destroyingItem = ItemStack.EMPTY;
-      this.localPlayerMode = GameType.SURVIVAL;
-      this.previousLocalPlayerMode = GameType.NOT_SET;
+      this.localPlayerMode = GameType.DEFAULT_MODE;
       this.unAckedActions = new Object2ObjectLinkedOpenHashMap();
       this.minecraft = var1;
       this.connection = var2;
    }
 
    public void adjustPlayer(Player var1) {
-      this.localPlayerMode.updatePlayerAbilities(var1.abilities);
+      this.localPlayerMode.updatePlayerAbilities(var1.getAbilities());
    }
 
-   public void setPreviousLocalMode(GameType var1) {
-      this.previousLocalPlayerMode = var1;
+   public void setLocalMode(GameType var1, @Nullable GameType var2) {
+      this.localPlayerMode = var1;
+      this.previousLocalPlayerMode = var2;
+      this.localPlayerMode.updatePlayerAbilities(this.minecraft.player.getAbilities());
    }
 
    public void setLocalMode(GameType var1) {
       if (var1 != this.localPlayerMode) {
          this.previousLocalPlayerMode = this.localPlayerMode;
       }
 
       this.localPlayerMode = var1;
-      this.localPlayerMode.updatePlayerAbilities(this.minecraft.player.abilities);
+      this.localPlayerMode.updatePlayerAbilities(this.minecraft.player.getAbilities());
    }
 
    public boolean canHurtPlayer() {
       return this.localPlayerMode.isSurvival();
    }
@@ -100,11 +101,11 @@
          BlockState var3 = var2.getBlockState(var1);
          if (!this.minecraft.player.getMainHandItem().getItem().canAttackBlock(var3, var2, var1, this.minecraft.player)) {
             return false;
          } else {
             Block var4 = var3.getBlock();
-            if ((var4 instanceof CommandBlock || var4 instanceof StructureBlock || var4 instanceof JigsawBlock) && !this.minecraft.player.canUseGameMasterBlocks()) {
+            if (var4 instanceof GameMasterBlock && !this.minecraft.player.canUseGameMasterBlocks()) {
                return false;
             } else if (var3.isAir()) {
                return false;
             } else {
                var4.playerWillDestroy(var2, var1, var3, this.minecraft.player);
@@ -237,18 +238,18 @@
 
    private boolean sameDestroyTarget(BlockPos var1) {
       ItemStack var2 = this.minecraft.player.getMainHandItem();
       boolean var3 = this.destroyingItem.isEmpty() && var2.isEmpty();
       if (!this.destroyingItem.isEmpty() && !var2.isEmpty()) {
-         var3 = var2.getItem() == this.destroyingItem.getItem() && ItemStack.tagMatches(var2, this.destroyingItem) && (var2.isDamageableItem() || var2.getDamageValue() == this.destroyingItem.getDamageValue());
+         var3 = var2.is(this.destroyingItem.getItem()) && ItemStack.tagMatches(var2, this.destroyingItem) && (var2.isDamageableItem() || var2.getDamageValue() == this.destroyingItem.getDamageValue());
       }
 
       return var1.equals(this.destroyBlockPos) && var3;
    }
 
    private void ensureHasSentCarriedItem() {
-      int var1 = this.minecraft.player.inventory.selected;
+      int var1 = this.minecraft.player.getInventory().selected;
       if (var1 != this.carriedIndex) {
          this.carriedIndex = var1;
          this.connection.send((Packet)(new ServerboundSetCarriedItemPacket(this.carriedIndex)));
       }
 
@@ -347,11 +348,11 @@
       this.connection.send((Packet)(new ServerboundInteractPacket(var2, var4, var5, var1.isShiftKeyDown())));
       return this.localPlayerMode == GameType.SPECTATOR ? InteractionResult.PASS : var2.interactAt(var1, var5, var4);
    }
 
    public ItemStack handleInventoryMouseClick(int var1, int var2, int var3, ClickType var4, Player var5) {
-      short var6 = var5.containerMenu.backup(var5.inventory);
+      short var6 = var5.containerMenu.backup(var5.getInventory());
       ItemStack var7 = var5.containerMenu.clicked(var2, var3, var4, var5);
       this.connection.send((Packet)(new ServerboundContainerClickPacket(var1, var2, var3, var4, var7, var6)));
       return var7;
    }
 
@@ -405,10 +406,11 @@
 
    public boolean isAlwaysFlying() {
       return this.localPlayerMode == GameType.SPECTATOR;
    }
 
+   @Nullable
    public GameType getPreviousPlayerMode() {
       return this.previousLocalPlayerMode;
    }
 
    public GameType getPlayerMode() {
@@ -441,10 +443,10 @@
       }
 
       while(this.unAckedActions.size() >= 50) {
          Pair var9 = (Pair)this.unAckedActions.firstKey();
          this.unAckedActions.removeFirst();
-         LOGGER.error("Too many unacked block actions, dropping " + var9);
+         LOGGER.error("Too many unacked block actions, dropping {}", var9);
       }
 
    }
 }
