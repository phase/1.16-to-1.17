--- net/minecraft/client/particle/ParticleEngine.java
+++ net/minecraft/client/particle/ParticleEngine.java
@@ -10,18 +10,21 @@
 import com.mojang.blaze3d.vertex.BufferBuilder;
 import com.mojang.blaze3d.vertex.PoseStack;
 import com.mojang.blaze3d.vertex.Tesselator;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
+import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
 import java.io.IOException;
 import java.io.InputStreamReader;
 import java.io.Reader;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
+import java.util.Optional;
 import java.util.Queue;
 import java.util.Random;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ConcurrentMap;
 import java.util.concurrent.Executor;
@@ -31,20 +34,22 @@
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
 import net.minecraft.client.Camera;
 import net.minecraft.client.multiplayer.ClientLevel;
+import net.minecraft.client.renderer.GameRenderer;
 import net.minecraft.client.renderer.LightTexture;
 import net.minecraft.client.renderer.MultiBufferSource;
 import net.minecraft.client.renderer.texture.AbstractTexture;
 import net.minecraft.client.renderer.texture.MissingTextureAtlasSprite;
 import net.minecraft.client.renderer.texture.TextureAtlas;
 import net.minecraft.client.renderer.texture.TextureAtlasSprite;
 import net.minecraft.client.renderer.texture.TextureManager;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.Registry;
+import net.minecraft.core.particles.ParticleGroup;
 import net.minecraft.core.particles.ParticleOptions;
 import net.minecraft.core.particles.ParticleType;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.packs.resources.PreparableReloadListener;
@@ -58,20 +63,22 @@
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.shapes.VoxelShape;
 
 public class ParticleEngine implements PreparableReloadListener {
+   private static final int MAX_PARTICLES_PER_LAYER = 16384;
    private static final List<ParticleRenderType> RENDER_ORDER;
    protected ClientLevel level;
    private final Map<ParticleRenderType, Queue<Particle>> particles = Maps.newIdentityHashMap();
    private final Queue<TrackingEmitter> trackingEmitters = Queues.newArrayDeque();
    private final TextureManager textureManager;
    private final Random random = new Random();
    private final Int2ObjectMap<ParticleProvider<?>> providers = new Int2ObjectOpenHashMap();
    private final Queue<Particle> particlesToAdd = Queues.newArrayDeque();
    private final Map<ResourceLocation, ParticleEngine.MutableSpriteSet> spriteSets = Maps.newHashMap();
    private final TextureAtlas textureAtlas;
+   private final Object2IntOpenHashMap<ParticleGroup> trackedParticleCounts = new Object2IntOpenHashMap();
 
    public ParticleEngine(ClientLevel var1, TextureManager var2) {
       this.textureAtlas = new TextureAtlas(TextureAtlas.LOCATION_PARTICLES);
       var2.register((ResourceLocation)this.textureAtlas.location(), (AbstractTexture)this.textureAtlas);
       this.level = var1;
@@ -80,11 +87,12 @@
    }
 
    private void registerProviders() {
       this.register(ParticleTypes.AMBIENT_ENTITY_EFFECT, (ParticleEngine.SpriteParticleRegistration)(SpellParticle.AmbientMobProvider::new));
       this.register(ParticleTypes.ANGRY_VILLAGER, (ParticleEngine.SpriteParticleRegistration)(HeartParticle.AngryVillagerProvider::new));
-      this.register(ParticleTypes.BARRIER, (ParticleProvider)(new BarrierParticle.Provider()));
+      this.register(ParticleTypes.BARRIER, (ParticleProvider)(new StationaryItemParticle.BarrierProvider()));
+      this.register(ParticleTypes.LIGHT, (ParticleProvider)(new StationaryItemParticle.LightProvider()));
       this.register(ParticleTypes.BLOCK, (ParticleProvider)(new TerrainParticle.Provider()));
       this.register(ParticleTypes.BUBBLE, (ParticleEngine.SpriteParticleRegistration)(BubbleParticle.Provider::new));
       this.register(ParticleTypes.BUBBLE_COLUMN_UP, (ParticleEngine.SpriteParticleRegistration)(BubbleColumnUpParticle.Provider::new));
       this.register(ParticleTypes.BUBBLE_POP, (ParticleEngine.SpriteParticleRegistration)(BubblePopParticle.Provider::new));
       this.register(ParticleTypes.CAMPFIRE_COSY_SMOKE, (ParticleEngine.SpriteParticleRegistration)(CampfireSmokeParticle.CosyProvider::new));
@@ -100,10 +108,11 @@
       this.register(ParticleTypes.FALLING_LAVA, (ParticleEngine.SpriteParticleRegistration)(DripParticle.LavaFallProvider::new));
       this.register(ParticleTypes.LANDING_LAVA, (ParticleEngine.SpriteParticleRegistration)(DripParticle.LavaLandProvider::new));
       this.register(ParticleTypes.DRIPPING_WATER, (ParticleEngine.SpriteParticleRegistration)(DripParticle.WaterHangProvider::new));
       this.register(ParticleTypes.FALLING_WATER, (ParticleEngine.SpriteParticleRegistration)(DripParticle.WaterFallProvider::new));
       this.register(ParticleTypes.DUST, DustParticle.Provider::new);
+      this.register(ParticleTypes.DUST_COLOR_TRANSITION, DustColorTransitionParticle.Provider::new);
       this.register(ParticleTypes.EFFECT, (ParticleEngine.SpriteParticleRegistration)(SpellParticle.Provider::new));
       this.register(ParticleTypes.ELDER_GUARDIAN, (ParticleProvider)(new MobAppearanceParticle.Provider()));
       this.register(ParticleTypes.ENCHANTED_HIT, (ParticleEngine.SpriteParticleRegistration)(CritParticle.MagicProvider::new));
       this.register(ParticleTypes.ENCHANT, (ParticleEngine.SpriteParticleRegistration)(EnchantmentTableParticle.Provider::new));
       this.register(ParticleTypes.END_ROD, (ParticleEngine.SpriteParticleRegistration)(EndRodParticle.Provider::new));
@@ -131,10 +140,11 @@
       this.register(ParticleTypes.POOF, (ParticleEngine.SpriteParticleRegistration)(ExplodeParticle.Provider::new));
       this.register(ParticleTypes.PORTAL, (ParticleEngine.SpriteParticleRegistration)(PortalParticle.Provider::new));
       this.register(ParticleTypes.RAIN, (ParticleEngine.SpriteParticleRegistration)(WaterDropParticle.Provider::new));
       this.register(ParticleTypes.SMOKE, (ParticleEngine.SpriteParticleRegistration)(SmokeParticle.Provider::new));
       this.register(ParticleTypes.SNEEZE, (ParticleEngine.SpriteParticleRegistration)(PlayerCloudParticle.SneezeProvider::new));
+      this.register(ParticleTypes.SNOWFLAKE, (ParticleEngine.SpriteParticleRegistration)(SnowflakeParticle.Provider::new));
       this.register(ParticleTypes.SPIT, (ParticleEngine.SpriteParticleRegistration)(SpitParticle.Provider::new));
       this.register(ParticleTypes.SWEEP_ATTACK, (ParticleEngine.SpriteParticleRegistration)(AttackSweepParticle.Provider::new));
       this.register(ParticleTypes.TOTEM_OF_UNDYING, (ParticleEngine.SpriteParticleRegistration)(TotemParticle.Provider::new));
       this.register(ParticleTypes.SQUID_INK, (ParticleEngine.SpriteParticleRegistration)(SquidInkParticle.Provider::new));
       this.register(ParticleTypes.UNDERWATER, (ParticleEngine.SpriteParticleRegistration)(SuspendedParticle.UnderwaterProvider::new));
@@ -142,18 +152,32 @@
       this.register(ParticleTypes.WITCH, (ParticleEngine.SpriteParticleRegistration)(SpellParticle.WitchProvider::new));
       this.register(ParticleTypes.DRIPPING_HONEY, (ParticleEngine.SpriteParticleRegistration)(DripParticle.HoneyHangProvider::new));
       this.register(ParticleTypes.FALLING_HONEY, (ParticleEngine.SpriteParticleRegistration)(DripParticle.HoneyFallProvider::new));
       this.register(ParticleTypes.LANDING_HONEY, (ParticleEngine.SpriteParticleRegistration)(DripParticle.HoneyLandProvider::new));
       this.register(ParticleTypes.FALLING_NECTAR, (ParticleEngine.SpriteParticleRegistration)(DripParticle.NectarFallProvider::new));
+      this.register(ParticleTypes.FALLING_SPORE_BLOSSOM, (ParticleEngine.SpriteParticleRegistration)(DripParticle.SporeBlossomFallProvider::new));
+      this.register(ParticleTypes.SPORE_BLOSSOM_AIR, (ParticleEngine.SpriteParticleRegistration)(SuspendedParticle.SporeBlossomAirProvider::new));
       this.register(ParticleTypes.ASH, (ParticleEngine.SpriteParticleRegistration)(AshParticle.Provider::new));
       this.register(ParticleTypes.CRIMSON_SPORE, (ParticleEngine.SpriteParticleRegistration)(SuspendedParticle.CrimsonSporeProvider::new));
       this.register(ParticleTypes.WARPED_SPORE, (ParticleEngine.SpriteParticleRegistration)(SuspendedParticle.WarpedSporeProvider::new));
       this.register(ParticleTypes.DRIPPING_OBSIDIAN_TEAR, (ParticleEngine.SpriteParticleRegistration)(DripParticle.ObsidianTearHangProvider::new));
       this.register(ParticleTypes.FALLING_OBSIDIAN_TEAR, (ParticleEngine.SpriteParticleRegistration)(DripParticle.ObsidianTearFallProvider::new));
       this.register(ParticleTypes.LANDING_OBSIDIAN_TEAR, (ParticleEngine.SpriteParticleRegistration)(DripParticle.ObsidianTearLandProvider::new));
       this.register(ParticleTypes.REVERSE_PORTAL, (ParticleEngine.SpriteParticleRegistration)(ReversePortalParticle.ReversePortalProvider::new));
       this.register(ParticleTypes.WHITE_ASH, (ParticleEngine.SpriteParticleRegistration)(WhiteAshParticle.Provider::new));
+      this.register(ParticleTypes.SMALL_FLAME, (ParticleEngine.SpriteParticleRegistration)(FlameParticle.SmallFlameProvider::new));
+      this.register(ParticleTypes.DRIPPING_DRIPSTONE_WATER, (ParticleEngine.SpriteParticleRegistration)(DripParticle.DripstoneWaterHangProvider::new));
+      this.register(ParticleTypes.FALLING_DRIPSTONE_WATER, (ParticleEngine.SpriteParticleRegistration)(DripParticle.DripstoneWaterFallProvider::new));
+      this.register(ParticleTypes.DRIPPING_DRIPSTONE_LAVA, (ParticleEngine.SpriteParticleRegistration)(DripParticle.DripstoneLavaHangProvider::new));
+      this.register(ParticleTypes.FALLING_DRIPSTONE_LAVA, (ParticleEngine.SpriteParticleRegistration)(DripParticle.DripstoneLavaFallProvider::new));
+      this.register(ParticleTypes.VIBRATION, VibrationSignalParticle.Provider::new);
+      this.register(ParticleTypes.GLOW_SQUID_INK, (ParticleEngine.SpriteParticleRegistration)(SquidInkParticle.GlowInkProvider::new));
+      this.register(ParticleTypes.GLOW, (ParticleEngine.SpriteParticleRegistration)(GlowParticle.GlowSquidProvider::new));
+      this.register(ParticleTypes.WAX_ON, (ParticleEngine.SpriteParticleRegistration)(GlowParticle.WaxOnProvider::new));
+      this.register(ParticleTypes.WAX_OFF, (ParticleEngine.SpriteParticleRegistration)(GlowParticle.WaxOffProvider::new));
+      this.register(ParticleTypes.ELECTRIC_SPARK, (ParticleEngine.SpriteParticleRegistration)(GlowParticle.ElectricSparkProvider::new));
+      this.register(ParticleTypes.SCRAPE, (ParticleEngine.SpriteParticleRegistration)(GlowParticle.ScrapeProvider::new));
    }
 
    private <T extends ParticleOptions> void register(ParticleType<T> var1, ParticleProvider<T> var2) {
       this.providers.put(Registry.PARTICLE_TYPE.getId(var1), var2);
    }
@@ -179,11 +203,11 @@
          TextureAtlas.Preparations var5 = this.textureAtlas.prepareToStitch(var2, var7.values().stream().flatMap(Collection::stream), var3, 0);
          var3.pop();
          var3.endTick();
          return var5;
       }, var5);
-      var1.getClass();
+      Objects.requireNonNull(var1);
       return var10000.thenCompose(var1::wait).thenAcceptAsync((var3x) -> {
          this.particles.clear();
          var4.startTick();
          var4.push("upload");
          this.textureAtlas.reload(var3x);
@@ -194,11 +218,11 @@
             if (var3.isEmpty()) {
                var10000 = ImmutableList.of(var4x);
             } else {
                Stream var5 = var3.stream();
                TextureAtlas var10001 = this.textureAtlas;
-               var10001.getClass();
+               Objects.requireNonNull(var10001);
                var10000 = (ImmutableList)var5.map(var10001::getSprite).collect(ImmutableList.toImmutableList());
             }
 
             ImmutableList var4 = var10000;
             ((ParticleEngine.MutableSpriteSet)this.spriteSets.get(var2)).rebind(var4);
@@ -215,70 +239,60 @@
    private void loadParticleDescription(ResourceManager var1, ResourceLocation var2, Map<ResourceLocation, List<ResourceLocation>> var3) {
       ResourceLocation var4 = new ResourceLocation(var2.getNamespace(), "particles/" + var2.getPath() + ".json");
 
       try {
          Resource var5 = var1.getResource(var4);
-         Throwable var6 = null;
 
          try {
-            InputStreamReader var7 = new InputStreamReader(var5.getInputStream(), Charsets.UTF_8);
-            Throwable var8 = null;
+            InputStreamReader var6 = new InputStreamReader(var5.getInputStream(), Charsets.UTF_8);
 
             try {
-               ParticleDescription var9 = ParticleDescription.fromJson(GsonHelper.parse((Reader)var7));
-               List var10 = var9.getTextures();
-               boolean var11 = this.spriteSets.containsKey(var2);
-               if (var10 == null) {
-                  if (var11) {
+               ParticleDescription var7 = ParticleDescription.fromJson(GsonHelper.parse((Reader)var6));
+               List var8 = var7.getTextures();
+               boolean var9 = this.spriteSets.containsKey(var2);
+               if (var8 == null) {
+                  if (var9) {
                      throw new IllegalStateException("Missing texture list for particle " + var2);
                   }
                } else {
-                  if (!var11) {
+                  if (!var9) {
                      throw new IllegalStateException("Redundant texture list for particle " + var2);
                   }
 
-                  var3.put(var2, var10.stream().map((var0) -> {
+                  var3.put(var2, (List)var8.stream().map((var0) -> {
                      return new ResourceLocation(var0.getNamespace(), "particle/" + var0.getPath());
                   }).collect(Collectors.toList()));
                }
-            } catch (Throwable var35) {
-               var8 = var35;
-               throw var35;
-            } finally {
-               if (var7 != null) {
-                  if (var8 != null) {
-                     try {
-                        var7.close();
-                     } catch (Throwable var34) {
-                        var8.addSuppressed(var34);
-                     }
-                  } else {
-                     var7.close();
-                  }
+            } catch (Throwable var12) {
+               try {
+                  var6.close();
+               } catch (Throwable var11) {
+                  var12.addSuppressed(var11);
                }
 
+               throw var12;
             }
-         } catch (Throwable var37) {
-            var6 = var37;
-            throw var37;
-         } finally {
+
+            var6.close();
+         } catch (Throwable var13) {
             if (var5 != null) {
-               if (var6 != null) {
-                  try {
-                     var5.close();
-                  } catch (Throwable var33) {
-                     var6.addSuppressed(var33);
-                  }
-               } else {
+               try {
                   var5.close();
+               } catch (Throwable var10) {
+                  var13.addSuppressed(var10);
                }
             }
 
+            throw var13;
          }
 
-      } catch (IOException var39) {
-         throw new IllegalStateException("Failed to load description for particle " + var2, var39);
+         if (var5 != null) {
+            var5.close();
+         }
+
+      } catch (IOException var14) {
+         throw new IllegalStateException("Failed to load description for particle " + var2, var14);
       }
    }
 
    public void createTrackingEmitter(Entity var1, ParticleOptions var2) {
       this.trackingEmitters.add(new TrackingEmitter(this.level, var1, var2));
@@ -304,11 +318,20 @@
       ParticleProvider var14 = (ParticleProvider)this.providers.get(Registry.PARTICLE_TYPE.getId(var1.getType()));
       return var14 == null ? null : var14.createParticle(var1, this.level, var2, var4, var6, var8, var10, var12);
    }
 
    public void add(Particle var1) {
-      this.particlesToAdd.add(var1);
+      Optional var2 = var1.getParticleGroup();
+      if (var2.isPresent()) {
+         if (this.hasSpaceInParticleLimit((ParticleGroup)var2.get())) {
+            this.particlesToAdd.add(var1);
+            this.updateCount((ParticleGroup)var2.get(), 1);
+         }
+      } else {
+         this.particlesToAdd.add(var1);
+      }
+
    }
 
    public void tick() {
       this.particles.forEach((var1x, var2x) -> {
          this.level.getProfiler().push(var1x.toString());
@@ -347,87 +370,97 @@
 
          while(var2.hasNext()) {
             Particle var3 = (Particle)var2.next();
             this.tickParticle(var3);
             if (!var3.isAlive()) {
+               var3.getParticleGroup().ifPresent((var1x) -> {
+                  this.updateCount(var1x, -1);
+               });
                var2.remove();
             }
          }
       }
 
    }
 
+   private void updateCount(ParticleGroup var1, int var2) {
+      this.trackedParticleCounts.addTo(var1, var2);
+   }
+
    private void tickParticle(Particle var1) {
       try {
          var1.tick();
       } catch (Throwable var5) {
          CrashReport var3 = CrashReport.forThrowable(var5, "Ticking Particle");
          CrashReportCategory var4 = var3.addCategory("Particle being ticked");
+         Objects.requireNonNull(var1);
          var4.setDetail("Particle", var1::toString);
          ParticleRenderType var10002 = var1.getRenderType();
+         Objects.requireNonNull(var10002);
          var4.setDetail("Particle Type", var10002::toString);
          throw new ReportedException(var3);
       }
    }
 
    public void render(PoseStack var1, MultiBufferSource.BufferSource var2, LightTexture var3, Camera var4, float var5) {
       var3.turnOnLightLayer();
-      RenderSystem.enableAlphaTest();
-      RenderSystem.defaultAlphaFunc();
       RenderSystem.enableDepthTest();
-      RenderSystem.enableFog();
-      RenderSystem.pushMatrix();
-      RenderSystem.multMatrix(var1.last().pose());
-      Iterator var6 = RENDER_ORDER.iterator();
+      PoseStack var6 = RenderSystem.getModelViewStack();
+      var6.pushPose();
+      var6.mulPoseMatrix(var1.last().pose());
+      RenderSystem.applyModelViewMatrix();
+      Iterator var7 = RENDER_ORDER.iterator();
 
       while(true) {
-         ParticleRenderType var7;
-         Iterable var8;
+         ParticleRenderType var8;
+         Iterable var9;
          do {
-            if (!var6.hasNext()) {
-               RenderSystem.popMatrix();
+            if (!var7.hasNext()) {
+               var6.popPose();
+               RenderSystem.applyModelViewMatrix();
                RenderSystem.depthMask(true);
-               RenderSystem.depthFunc(515);
                RenderSystem.disableBlend();
-               RenderSystem.defaultAlphaFunc();
                var3.turnOffLightLayer();
-               RenderSystem.disableFog();
                return;
             }
 
-            var7 = (ParticleRenderType)var6.next();
-            var8 = (Iterable)this.particles.get(var7);
-         } while(var8 == null);
+            var8 = (ParticleRenderType)var7.next();
+            var9 = (Iterable)this.particles.get(var8);
+         } while(var9 == null);
 
-         RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
-         Tesselator var9 = Tesselator.getInstance();
-         BufferBuilder var10 = var9.getBuilder();
-         var7.begin(var10, this.textureManager);
-         Iterator var11 = var8.iterator();
+         RenderSystem.setShader(GameRenderer::getParticleShader);
+         RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
+         Tesselator var10 = Tesselator.getInstance();
+         BufferBuilder var11 = var10.getBuilder();
+         var8.begin(var11, this.textureManager);
+         Iterator var12 = var9.iterator();
 
-         while(var11.hasNext()) {
-            Particle var12 = (Particle)var11.next();
+         while(var12.hasNext()) {
+            Particle var13 = (Particle)var12.next();
 
             try {
-               var12.render(var10, var4, var5);
-            } catch (Throwable var16) {
-               CrashReport var14 = CrashReport.forThrowable(var16, "Rendering Particle");
-               CrashReportCategory var15 = var14.addCategory("Particle being rendered");
-               var15.setDetail("Particle", var12::toString);
-               var15.setDetail("Particle Type", var7::toString);
-               throw new ReportedException(var14);
+               var13.render(var11, var4, var5);
+            } catch (Throwable var17) {
+               CrashReport var15 = CrashReport.forThrowable(var17, "Rendering Particle");
+               CrashReportCategory var16 = var15.addCategory("Particle being rendered");
+               Objects.requireNonNull(var13);
+               var16.setDetail("Particle", var13::toString);
+               Objects.requireNonNull(var8);
+               var16.setDetail("Particle Type", var8::toString);
+               throw new ReportedException(var15);
             }
          }
 
-         var7.end(var9);
+         var8.end(var10);
       }
    }
 
    public void setLevel(@Nullable ClientLevel var1) {
       this.level = var1;
       this.particles.clear();
       this.trackingEmitters.clear();
+      this.trackedParticleCounts.clear();
    }
 
    public void destroy(BlockPos var1, BlockState var2) {
       if (!var2.isAir()) {
          VoxelShape var3 = var2.getShape(this.level, var1);
@@ -447,11 +480,11 @@
                      double var29 = ((double)var25 + 0.5D) / (double)var22;
                      double var31 = ((double)var26 + 0.5D) / (double)var23;
                      double var33 = var27 * var15 + var3x;
                      double var35 = var29 * var17 + var5;
                      double var37 = var31 * var19 + var7;
-                     this.add((new TerrainParticle(this.level, (double)var1.getX() + var33, (double)var1.getY() + var35, (double)var1.getZ() + var37, var27 - 0.5D, var29 - 0.5D, var31 - 0.5D, var2)).init(var1));
+                     this.add(new TerrainParticle(this.level, (double)var1.getX() + var33, (double)var1.getY() + var35, (double)var1.getZ() + var37, var27 - 0.5D, var29 - 0.5D, var31 - 0.5D, var2, var1));
                   }
                }
             }
 
          });
@@ -491,26 +524,35 @@
 
          if (var2 == Direction.EAST) {
             var9 = (double)var4 + var8.maxX + 0.10000000149011612D;
          }
 
-         this.add((new TerrainParticle(this.level, var9, var11, var13, 0.0D, 0.0D, 0.0D, var3)).init(var1).setPower(0.2F).scale(0.6F));
+         this.add((new TerrainParticle(this.level, var9, var11, var13, 0.0D, 0.0D, 0.0D, var3, var1)).setPower(0.2F).scale(0.6F));
       }
    }
 
    public String countParticles() {
       return String.valueOf(this.particles.values().stream().mapToInt(Collection::size).sum());
    }
 
+   private boolean hasSpaceInParticleLimit(ParticleGroup var1) {
+      return this.trackedParticleCounts.getInt(var1) < var1.getLimit();
+   }
+
    static {
       RENDER_ORDER = ImmutableList.of(ParticleRenderType.TERRAIN_SHEET, ParticleRenderType.PARTICLE_SHEET_OPAQUE, ParticleRenderType.PARTICLE_SHEET_LIT, ParticleRenderType.PARTICLE_SHEET_TRANSLUCENT, ParticleRenderType.CUSTOM);
    }
 
-   class MutableSpriteSet implements SpriteSet {
+   @FunctionalInterface
+   interface SpriteParticleRegistration<T extends ParticleOptions> {
+      ParticleProvider<T> create(SpriteSet var1);
+   }
+
+   private class MutableSpriteSet implements SpriteSet {
       private List<TextureAtlasSprite> sprites;
 
-      private MutableSpriteSet() {
+      MutableSpriteSet() {
       }
 
       public TextureAtlasSprite get(int var1, int var2) {
          return (TextureAtlasSprite)this.sprites.get(var1 * (this.sprites.size() - 1) / var2);
       }
@@ -521,11 +563,6 @@
 
       public void rebind(List<TextureAtlasSprite> var1) {
          this.sprites = ImmutableList.copyOf(var1);
       }
    }
-
-   @FunctionalInterface
-   interface SpriteParticleRegistration<T extends ParticleOptions> {
-      ParticleProvider<T> create(SpriteSet var1);
-   }
 }
