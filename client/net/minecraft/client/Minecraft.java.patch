--- net/minecraft/client/Minecraft.java
+++ net/minecraft/client/Minecraft.java
@@ -1,10 +1,11 @@
 package net.minecraft.client;
 
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Queues;
 import com.google.common.collect.UnmodifiableIterator;
+import com.google.common.hash.Hashing;
 import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.GameProfileRepository;
 import com.mojang.authlib.exceptions.AuthenticationException;
 import com.mojang.authlib.minecraft.MinecraftSessionService;
 import com.mojang.authlib.minecraft.OfflineSocialInteractions;
@@ -16,24 +17,29 @@
 import com.mojang.blaze3d.platform.GlUtil;
 import com.mojang.blaze3d.platform.Window;
 import com.mojang.blaze3d.platform.WindowEventHandler;
 import com.mojang.blaze3d.systems.RenderSystem;
 import com.mojang.blaze3d.vertex.BufferBuilder;
+import com.mojang.blaze3d.vertex.BufferUploader;
 import com.mojang.blaze3d.vertex.DefaultVertexFormat;
 import com.mojang.blaze3d.vertex.PoseStack;
 import com.mojang.blaze3d.vertex.Tesselator;
+import com.mojang.blaze3d.vertex.VertexFormat;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.datafixers.util.Function4;
+import com.mojang.math.Matrix4f;
 import com.mojang.serialization.DataResult;
 import com.mojang.serialization.JsonOps;
 import com.mojang.serialization.Lifecycle;
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
 import java.net.Proxy;
 import java.net.SocketAddress;
+import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
+import java.nio.file.Path;
 import java.text.DecimalFormat;
 import java.text.DecimalFormatSymbols;
 import java.text.SimpleDateFormat;
 import java.util.Collections;
 import java.util.Date;
@@ -43,10 +49,11 @@
 import java.util.Queue;
 import java.util.UUID;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.atomic.AtomicReference;
+import java.util.function.Consumer;
 import java.util.function.Function;
 import java.util.function.Supplier;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
 import net.minecraft.ChatFormatting;
@@ -83,22 +90,27 @@
 import net.minecraft.client.gui.screens.TitleScreen;
 import net.minecraft.client.gui.screens.WinScreen;
 import net.minecraft.client.gui.screens.advancements.AdvancementsScreen;
 import net.minecraft.client.gui.screens.inventory.CreativeModeInventoryScreen;
 import net.minecraft.client.gui.screens.inventory.InventoryScreen;
-import net.minecraft.client.gui.screens.multiplayer.JoinMultiplayerScreen;
 import net.minecraft.client.gui.screens.social.PlayerSocialManager;
 import net.minecraft.client.gui.screens.social.SocialInteractionsScreen;
 import net.minecraft.client.gui.screens.worldselection.EditWorldScreen;
 import net.minecraft.client.main.GameConfig;
+import net.minecraft.client.model.geom.EntityModelSet;
 import net.minecraft.client.multiplayer.ClientHandshakePacketListenerImpl;
 import net.minecraft.client.multiplayer.ClientLevel;
 import net.minecraft.client.multiplayer.ClientPacketListener;
 import net.minecraft.client.multiplayer.MultiPlayerGameMode;
 import net.minecraft.client.multiplayer.ServerData;
 import net.minecraft.client.particle.ParticleEngine;
 import net.minecraft.client.player.LocalPlayer;
+import net.minecraft.client.profiling.ActiveClientMetricsLogger;
+import net.minecraft.client.profiling.ClientMetricsLogger;
+import net.minecraft.client.profiling.InactiveClientMetricsLogger;
+import net.minecraft.client.profiling.storage.MetricsPersister;
+import net.minecraft.client.renderer.BlockEntityWithoutLevelRenderer;
 import net.minecraft.client.renderer.FogRenderer;
 import net.minecraft.client.renderer.GameRenderer;
 import net.minecraft.client.renderer.GpuWarnlistManager;
 import net.minecraft.client.renderer.ItemInHandRenderer;
 import net.minecraft.client.renderer.LevelRenderer;
@@ -107,10 +119,11 @@
 import net.minecraft.client.renderer.block.BlockModelShaper;
 import net.minecraft.client.renderer.block.BlockRenderDispatcher;
 import net.minecraft.client.renderer.blockentity.BlockEntityRenderDispatcher;
 import net.minecraft.client.renderer.debug.DebugRenderer;
 import net.minecraft.client.renderer.entity.EntityRenderDispatcher;
+import net.minecraft.client.renderer.entity.EntityRenderers;
 import net.minecraft.client.renderer.entity.ItemRenderer;
 import net.minecraft.client.renderer.texture.TextureAtlas;
 import net.minecraft.client.renderer.texture.TextureAtlasSprite;
 import net.minecraft.client.renderer.texture.TextureManager;
 import net.minecraft.client.resources.ClientPackSource;
@@ -144,13 +157,15 @@
 import net.minecraft.nbt.ListTag;
 import net.minecraft.nbt.NbtOps;
 import net.minecraft.nbt.StringTag;
 import net.minecraft.network.Connection;
 import net.minecraft.network.ConnectionProtocol;
+import net.minecraft.network.chat.ClickEvent;
 import net.minecraft.network.chat.CommonComponents;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.KeybindComponent;
+import net.minecraft.network.chat.MutableComponent;
 import net.minecraft.network.chat.TextComponent;
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.game.ServerboundPlayerActionPacket;
 import net.minecraft.network.protocol.handshake.ClientIntentionPacket;
@@ -194,26 +209,17 @@
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.Snooper;
 import net.minecraft.world.SnooperPopulator;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
-import net.minecraft.world.entity.boss.enderdragon.EndCrystal;
-import net.minecraft.world.entity.decoration.ArmorStand;
-import net.minecraft.world.entity.decoration.ItemFrame;
-import net.minecraft.world.entity.decoration.LeashFenceKnotEntity;
-import net.minecraft.world.entity.decoration.Painting;
 import net.minecraft.world.entity.player.ChatVisiblity;
 import net.minecraft.world.entity.player.Inventory;
 import net.minecraft.world.entity.player.Player;
-import net.minecraft.world.entity.vehicle.AbstractMinecart;
-import net.minecraft.world.entity.vehicle.Boat;
 import net.minecraft.world.item.CreativeModeTab;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
-import net.minecraft.world.item.Items;
 import net.minecraft.world.item.PlayerHeadItem;
-import net.minecraft.world.item.SpawnEggItem;
 import net.minecraft.world.item.TooltipFlag;
 import net.minecraft.world.level.DataPackConfig;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelSettings;
 import net.minecraft.world.level.biome.Biome;
@@ -228,17 +234,19 @@
 import net.minecraft.world.level.storage.PrimaryLevelData;
 import net.minecraft.world.level.storage.WorldData;
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.EntityHitResult;
 import net.minecraft.world.phys.HitResult;
+import org.apache.commons.io.Charsets;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements SnooperPopulator, WindowEventHandler {
    private static Minecraft instance;
    private static final Logger LOGGER = LogManager.getLogger();
    public static final boolean ON_OSX;
+   private static final int MAX_TICKS_PER_UPDATE = 10;
    public static final ResourceLocation DEFAULT_FONT;
    public static final ResourceLocation UNIFORM_FONT;
    public static final ResourceLocation ALT_FONT;
    private static final CompletableFuture<Unit> RESOURCE_RELOAD_INITIAL_TASK;
    private static final Component SOCIAL_INTERACTIONS_NOT_AVAILABLE;
@@ -298,10 +306,12 @@
    private final MobEffectTextureManager mobEffectTextures;
    private final ToastComponent toast;
    private final Game game = new Game(this);
    private final Tutorial tutorial;
    private final PlayerSocialManager playerSocialManager;
+   private final EntityModelSet entityModels;
+   private final BlockEntityRenderDispatcher blockEntityRenderDispatcher;
    public static byte[] reserve;
    @Nullable
    public MultiPlayerGameMode gameMode;
    @Nullable
    public ClientLevel level;
@@ -329,18 +339,19 @@
    private int frames;
    public boolean noRender;
    @Nullable
    public Screen screen;
    @Nullable
-   public Overlay overlay;
+   private Overlay overlay;
    private boolean connectedToRealms;
    private Thread gameThread;
    private volatile boolean running = true;
    @Nullable
    private CrashReport delayedCrash;
    private static int fps;
    public String fpsString = "";
+   public boolean wireframe;
    public boolean chunkPath;
    public boolean chunkVisibility;
    public boolean smartCull = true;
    private boolean windowActive;
    private final Queue<Runnable> progressTasks = Queues.newConcurrentLinkedQueue();
@@ -351,18 +362,20 @@
    private ProfilerFiller profiler;
    private int fpsPieRenderTicks;
    private final ContinuousProfiler fpsPieProfiler;
    @Nullable
    private ProfileResults fpsPieResults;
+   private ClientMetricsLogger clientMetricsLogger;
    private String debugPath;
 
    public Minecraft(GameConfig var1) {
       super("Client");
       this.profiler = InactiveProfiler.INSTANCE;
       this.fpsPieProfiler = new ContinuousProfiler(Util.timeSource, () -> {
          return this.fpsPieRenderTicks;
       });
+      this.clientMetricsLogger = InactiveClientMetricsLogger.INSTANCE;
       this.debugPath = "root";
       instance = this;
       this.gameDirectory = var1.location.gameDirectory;
       File var2 = var1.location.assetDirectory;
       this.resourcePackDirectory = var1.location.resourcePackDirectory;
@@ -394,13 +407,13 @@
       }
 
       KeybindComponent.setKeyResolver(KeyMapping::createNameSupplier);
       this.fixerUpper = DataFixers.getDataFixer();
       this.toast = new ToastComponent(this);
-      this.tutorial = new Tutorial(this);
       this.gameThread = Thread.currentThread();
       this.options = new Options(this, this.gameDirectory);
+      this.tutorial = new Tutorial(this, this.options);
       this.hotbarManager = new HotbarManager(this.gameDirectory, this.fixerUpper);
       LOGGER.info("Backend library: {}", RenderSystem.getBackendDescription());
       DisplayData var6;
       if (this.options.overrideHeight > 0 && this.options.overrideWidth > 0) {
          var6 = new DisplayData(this.options.overrideWidth, this.options.overrideHeight, var1.display.fullscreenWidth, var1.display.fullscreenHeight, var1.display.isFullscreen);
@@ -454,19 +467,26 @@
       this.window.setErrorSection("Post startup");
       this.blockColors = BlockColors.createDefault();
       this.itemColors = ItemColors.createDefault(this.blockColors);
       this.modelManager = new ModelManager(this.textureManager, this.blockColors, this.options.mipmapLevels);
       this.resourceManager.registerReloadListener(this.modelManager);
-      this.itemRenderer = new ItemRenderer(this.textureManager, this.modelManager, this.itemColors);
-      this.entityRenderDispatcher = new EntityRenderDispatcher(this.textureManager, this.itemRenderer, this.resourceManager, this.font, this.options);
+      this.entityModels = new EntityModelSet();
+      this.resourceManager.registerReloadListener(this.entityModels);
+      this.blockEntityRenderDispatcher = new BlockEntityRenderDispatcher(this.font, this.entityModels, this::getBlockRenderer);
+      this.resourceManager.registerReloadListener(this.blockEntityRenderDispatcher);
+      BlockEntityWithoutLevelRenderer var10 = new BlockEntityWithoutLevelRenderer(this.blockEntityRenderDispatcher, this.entityModels);
+      this.resourceManager.registerReloadListener(var10);
+      this.itemRenderer = new ItemRenderer(this.textureManager, this.modelManager, this.itemColors, var10);
+      this.entityRenderDispatcher = new EntityRenderDispatcher(this.textureManager, this.itemRenderer, this.font, this.options, this.entityModels);
+      this.resourceManager.registerReloadListener(this.entityRenderDispatcher);
       this.itemInHandRenderer = new ItemInHandRenderer(this);
       this.resourceManager.registerReloadListener(this.itemRenderer);
       this.renderBuffers = new RenderBuffers();
       this.gameRenderer = new GameRenderer(this, this.resourceManager, this.renderBuffers);
       this.resourceManager.registerReloadListener(this.gameRenderer);
       this.playerSocialManager = new PlayerSocialManager(this, this.socialInteractionsService);
-      this.blockRenderer = new BlockRenderDispatcher(this.modelManager.getBlockModelShaper(), this.blockColors);
+      this.blockRenderer = new BlockRenderDispatcher(this.modelManager.getBlockModelShaper(), var10, this.blockColors);
       this.resourceManager.registerReloadListener(this.blockRenderer);
       this.levelRenderer = new LevelRenderer(this, this.renderBuffers);
       this.resourceManager.registerReloadListener(this.levelRenderer);
       this.createSearchTrees();
       this.resourceManager.registerReloadListener(this.searchRegistry);
@@ -494,13 +514,14 @@
          this.setScreen(new ConnectScreen(new TitleScreen(), this, var4, var5));
       } else {
          this.setScreen(new TitleScreen(true));
       }
 
+      this.gameRenderer.preloadUiShader(this.getClientPackSource().getVanillaPack());
       LoadingOverlay.registerTextures(this);
-      List var10 = this.resourcePackRepository.openAllSelected();
-      this.setOverlay(new LoadingOverlay(this, this.resourceManager.createFullReload(Util.backgroundExecutor(), this, RESOURCE_RELOAD_INITIAL_TASK, var10), (var1x) -> {
+      List var11 = this.resourcePackRepository.openAllSelected();
+      this.setOverlay(new LoadingOverlay(this, this.resourceManager.createReload(Util.backgroundExecutor(), this, RESOURCE_RELOAD_INITIAL_TASK, var11), (var1x) -> {
          Util.ifElse(var1x, this::rollbackResourcePacks, () -> {
             if (SharedConstants.IS_RUNNING_IN_IDE) {
                this.selfTest();
             }
 
@@ -591,13 +612,15 @@
             }
 
             try {
                SingleTickProfiler var7 = SingleTickProfiler.createTickProfiler("Renderer");
                boolean var3 = this.shouldRenderFpsPie();
-               this.startProfilers(var3, var7);
+               this.profiler = this.constructProfiler(var3, var7);
                this.profiler.startTick();
+               this.clientMetricsLogger.startTick();
                this.runTick(!var1);
+               this.clientMetricsLogger.endTick();
                this.profiler.endTick();
                this.finishProfilers(var3, var7);
             } catch (OutOfMemoryError var4) {
                if (var1) {
                   throw var4;
@@ -738,11 +761,11 @@
             this.pendingReload = var1;
             return var1;
          } else {
             this.resourcePackRepository.reload();
             List var2 = this.resourcePackRepository.openAllSelected();
-            this.setOverlay(new LoadingOverlay(this, this.resourceManager.createFullReload(Util.backgroundExecutor(), this, RESOURCE_RELOAD_INITIAL_TASK, var2), (var2x) -> {
+            this.setOverlay(new LoadingOverlay(this, this.resourceManager.createReload(Util.backgroundExecutor(), this, RESOURCE_RELOAD_INITIAL_TASK, var2), (var2x) -> {
                Util.ifElse(var2x, this::rollbackResourcePacks, () -> {
                   this.levelRenderer.allChanged();
                   var1.complete((Object)null);
                });
             }, true));
@@ -808,24 +831,24 @@
             }
          }
       }
 
       var1 |= MenuScreens.selfTest();
+      var1 |= EntityRenderers.validateRegistrations();
       if (var1) {
          throw new IllegalStateException("Your game data is foobar, fix the errors above!");
       }
    }
 
    public LevelStorageSource getLevelSource() {
       return this.levelSource;
    }
 
    private void openChatScreen(String var1) {
-      if (!this.isLocalServer() && !this.allowsChat()) {
-         if (this.player != null) {
-            this.player.sendMessage((new TranslatableComponent("chat.cannotSend")).withStyle(ChatFormatting.RED), Util.NIL_UUID);
-         }
+      Minecraft.ChatStatus var2 = this.getChatStatus();
+      if (!var2.isChatAllowed(this.isLocalServer())) {
+         this.gui.setOverlayMessage(var2.getMessage(), false);
       } else {
          this.setScreen(new ChatScreen(var1));
       }
 
    }
@@ -843,16 +866,12 @@
          } else {
             this.player.respawn();
          }
       }
 
-      if (var1 instanceof TitleScreen || var1 instanceof JoinMultiplayerScreen) {
-         this.options.renderDebug = false;
-         this.gui.getChat().clearMessages(true);
-      }
-
       this.screen = (Screen)var1;
+      BufferUploader.reset();
       if (var1 != null) {
          this.mouseHandler.releaseMouse();
          KeyMapping.releaseAll();
          ((Screen)var1).init(this, this.window.getGuiScaledWidth(), this.window.getGuiScaledHeight());
          this.noRender = false;
@@ -939,24 +958,24 @@
          this.reloadResourcePacks().thenRun(() -> {
             var4.complete((Object)null);
          });
       }
 
-      Runnable var9;
-      while((var9 = (Runnable)this.progressTasks.poll()) != null) {
-         var9.run();
+      Runnable var10;
+      while((var10 = (Runnable)this.progressTasks.poll()) != null) {
+         var10.run();
       }
 
-      int var5;
+      int var6;
       if (var1) {
-         var5 = this.timer.advanceTime(Util.getMillis());
+         int var5 = this.timer.advanceTime(Util.getMillis());
          this.profiler.push("scheduledExecutables");
          this.runAllTasks();
          this.profiler.pop();
          this.profiler.push("tick");
 
-         for(int var6 = 0; var6 < Math.min(10, var5); ++var6) {
+         for(var6 = 0; var6 < Math.min(10, var5); ++var6) {
             this.profiler.incrementCounter("clientTick");
             this.tick();
          }
 
          this.profiler.pop();
@@ -966,11 +985,13 @@
       this.window.setErrorSection("Render");
       this.profiler.push("sound");
       this.soundManager.updateSource(this.gameRenderer.getMainCamera());
       this.profiler.pop();
       this.profiler.push("render");
-      RenderSystem.pushMatrix();
+      PoseStack var11 = RenderSystem.getModelViewStack();
+      var11.pushPose();
+      RenderSystem.applyModelViewMatrix();
       RenderSystem.clear(16640, ON_OSX);
       this.mainRenderTarget.bindWrite(true);
       FogRenderer.setupNoFog();
       this.profiler.push("display");
       RenderSystem.enableTexture();
@@ -990,40 +1011,42 @@
          this.profiler.pop();
       }
 
       this.profiler.push("blit");
       this.mainRenderTarget.unbindWrite();
-      RenderSystem.popMatrix();
-      RenderSystem.pushMatrix();
+      var11.popPose();
+      var11.pushPose();
+      RenderSystem.applyModelViewMatrix();
       this.mainRenderTarget.blitToScreen(this.window.getWidth(), this.window.getHeight());
-      RenderSystem.popMatrix();
+      var11.popPose();
+      RenderSystem.applyModelViewMatrix();
       this.profiler.popPush("updateDisplay");
       this.window.updateDisplay();
-      var5 = this.getFramerateLimit();
-      if ((double)var5 < Option.FRAMERATE_LIMIT.getMaxValue()) {
-         RenderSystem.limitDisplayFPS(var5);
+      var6 = this.getFramerateLimit();
+      if ((double)var6 < Option.FRAMERATE_LIMIT.getMaxValue()) {
+         RenderSystem.limitDisplayFPS(var6);
       }
 
       this.profiler.popPush("yield");
       Thread.yield();
       this.profiler.pop();
       this.window.setErrorSection("Post render");
       ++this.frames;
-      boolean var10 = this.hasSingleplayerServer() && (this.screen != null && this.screen.isPauseScreen() || this.overlay != null && this.overlay.isPauseScreen()) && !this.singleplayerServer.isPublished();
-      if (this.pause != var10) {
+      boolean var7 = this.hasSingleplayerServer() && (this.screen != null && this.screen.isPauseScreen() || this.overlay != null && this.overlay.isPauseScreen()) && !this.singleplayerServer.isPublished();
+      if (this.pause != var7) {
          if (this.pause) {
             this.pausePartialTick = this.timer.partialTick;
          } else {
             this.timer.partialTick = this.pausePartialTick;
          }
 
-         this.pause = var10;
+         this.pause = var7;
       }
 
-      long var7 = Util.getNanos();
-      this.frameTimer.logFrameDuration(var7 - this.lastNanoTime);
-      this.lastNanoTime = var7;
+      long var8 = Util.getNanos();
+      this.frameTimer.logFrameDuration(var8 - this.lastNanoTime);
+      this.lastNanoTime = var8;
       this.profiler.push("fpsUpdate");
 
       while(Util.getMillis() >= this.lastTime + 1000L) {
          fps = this.frames;
          this.fpsString = String.format("%d fps T: %s%s%s%s B: %d", fps, (double)this.options.framerateLimit == Option.FRAMERATE_LIMIT.getMaxValue() ? "inf" : this.options.framerateLimit, this.options.enableVsync ? " vsync" : "", this.options.graphicsMode.toString(), this.options.renderClouds == CloudStatus.OFF ? "" : (this.options.renderClouds == CloudStatus.FAST ? " fast-clouds" : " fancy-clouds"), this.options.biomeBlendRadius);
@@ -1040,23 +1063,29 @@
 
    private boolean shouldRenderFpsPie() {
       return this.options.renderDebug && this.options.renderDebugCharts && !this.options.hideGui;
    }
 
-   private void startProfilers(boolean var1, @Nullable SingleTickProfiler var2) {
-      if (var1) {
+   private ProfilerFiller constructProfiler(boolean var1, @Nullable SingleTickProfiler var2) {
+      if (!var1 && !this.clientMetricsLogger.isRecording()) {
+         return (ProfilerFiller)(var2 == null ? InactiveProfiler.INSTANCE : var2.startTick());
+      } else if (var1) {
          if (!this.fpsPieProfiler.isEnabled()) {
             this.fpsPieRenderTicks = 0;
             this.fpsPieProfiler.enable();
          }
 
          ++this.fpsPieRenderTicks;
+         ProfilerFiller var3 = this.clientMetricsLogger.isRecording() ? ProfilerFiller.tee(this.fpsPieProfiler.getFiller(), this.clientMetricsLogger.getProfiler()) : this.fpsPieProfiler.getFiller();
+         return SingleTickProfiler.decorateFiller(var3, var2);
       } else {
-         this.fpsPieProfiler.disable();
-      }
+         if (this.fpsPieProfiler.isEnabled()) {
+            this.fpsPieProfiler.disable();
+         }
 
-      this.profiler = SingleTickProfiler.decorateFiller(this.fpsPieProfiler.getFiller(), var2);
+         return SingleTickProfiler.decorateFiller(this.clientMetricsLogger.getProfiler(), var2);
+      }
    }
 
    private void finishProfilers(boolean var1, @Nullable SingleTickProfiler var2) {
       if (var2 != null) {
          var2.endTick();
@@ -1110,10 +1139,22 @@
       }
 
       System.gc();
    }
 
+   void debugClientMetricsKeyPressed(Runnable var1, Consumer<Path> var2) {
+      if (this.clientMetricsLogger.isRecording()) {
+         this.clientMetricsLogger.end();
+      } else {
+         Runnable var3 = () -> {
+            this.clientMetricsLogger = InactiveClientMetricsLogger.INSTANCE;
+         };
+         this.clientMetricsLogger = ActiveClientMetricsLogger.createStarted(Util.timeSource, Util.ioPool(), new MetricsPersister(), var3, var2);
+         var1.run();
+      }
+   }
+
    void debugFpsMeterKeyPress(int var1) {
       if (this.fpsPieResults != null) {
          List var2 = this.fpsPieResults.getTimes(this.debugPath);
          if (!var2.isEmpty()) {
             ResultField var3 = (ResultField)var2.remove(0);
@@ -1141,107 +1182,108 @@
 
    private void renderFpsMeter(PoseStack var1, ProfileResults var2) {
       List var3 = var2.getTimes(this.debugPath);
       ResultField var4 = (ResultField)var3.remove(0);
       RenderSystem.clear(256, ON_OSX);
-      RenderSystem.matrixMode(5889);
-      RenderSystem.loadIdentity();
-      RenderSystem.ortho(0.0D, (double)this.window.getWidth(), (double)this.window.getHeight(), 0.0D, 1000.0D, 3000.0D);
-      RenderSystem.matrixMode(5888);
-      RenderSystem.loadIdentity();
-      RenderSystem.translatef(0.0F, 0.0F, -2000.0F);
+      RenderSystem.setShader(GameRenderer::getPositionColorShader);
+      Matrix4f var5 = Matrix4f.orthographic(0.0F, (float)this.window.getWidth(), 0.0F, (float)this.window.getHeight(), 1000.0F, 3000.0F);
+      RenderSystem.setProjectionMatrix(var5);
+      PoseStack var6 = RenderSystem.getModelViewStack();
+      var6.setIdentity();
+      var6.translate(0.0D, 0.0D, -2000.0D);
+      RenderSystem.applyModelViewMatrix();
       RenderSystem.lineWidth(1.0F);
       RenderSystem.disableTexture();
-      Tesselator var5 = Tesselator.getInstance();
-      BufferBuilder var6 = var5.getBuilder();
-      boolean var7 = true;
-      int var8 = this.window.getWidth() - 160 - 10;
-      int var9 = this.window.getHeight() - 320;
+      Tesselator var7 = Tesselator.getInstance();
+      BufferBuilder var8 = var7.getBuilder();
+      boolean var9 = true;
+      int var10 = this.window.getWidth() - 160 - 10;
+      int var11 = this.window.getHeight() - 320;
       RenderSystem.enableBlend();
-      var6.begin(7, DefaultVertexFormat.POSITION_COLOR);
-      var6.vertex((double)((float)var8 - 176.0F), (double)((float)var9 - 96.0F - 16.0F), 0.0D).color(200, 0, 0, 0).endVertex();
-      var6.vertex((double)((float)var8 - 176.0F), (double)(var9 + 320), 0.0D).color(200, 0, 0, 0).endVertex();
-      var6.vertex((double)((float)var8 + 176.0F), (double)(var9 + 320), 0.0D).color(200, 0, 0, 0).endVertex();
-      var6.vertex((double)((float)var8 + 176.0F), (double)((float)var9 - 96.0F - 16.0F), 0.0D).color(200, 0, 0, 0).endVertex();
-      var5.end();
+      var8.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION_COLOR);
+      var8.vertex((double)((float)var10 - 176.0F), (double)((float)var11 - 96.0F - 16.0F), 0.0D).color(200, 0, 0, 0).endVertex();
+      var8.vertex((double)((float)var10 - 176.0F), (double)(var11 + 320), 0.0D).color(200, 0, 0, 0).endVertex();
+      var8.vertex((double)((float)var10 + 176.0F), (double)(var11 + 320), 0.0D).color(200, 0, 0, 0).endVertex();
+      var8.vertex((double)((float)var10 + 176.0F), (double)((float)var11 - 96.0F - 16.0F), 0.0D).color(200, 0, 0, 0).endVertex();
+      var7.end();
       RenderSystem.disableBlend();
-      double var10 = 0.0D;
+      double var12 = 0.0D;
 
-      ResultField var13;
-      int var15;
-      for(Iterator var12 = var3.iterator(); var12.hasNext(); var10 += var13.percentage) {
-         var13 = (ResultField)var12.next();
-         int var14 = Mth.floor(var13.percentage / 4.0D) + 1;
-         var6.begin(6, DefaultVertexFormat.POSITION_COLOR);
-         var15 = var13.getColor();
-         int var16 = var15 >> 16 & 255;
-         int var17 = var15 >> 8 & 255;
-         int var18 = var15 & 255;
-         var6.vertex((double)var8, (double)var9, 0.0D).color(var16, var17, var18, 255).endVertex();
+      ResultField var15;
+      int var17;
+      for(Iterator var14 = var3.iterator(); var14.hasNext(); var12 += var15.percentage) {
+         var15 = (ResultField)var14.next();
+         int var16 = Mth.floor(var15.percentage / 4.0D) + 1;
+         var8.begin(VertexFormat.Mode.TRIANGLE_FAN, DefaultVertexFormat.POSITION_COLOR);
+         var17 = var15.getColor();
+         int var18 = var17 >> 16 & 255;
+         int var19 = var17 >> 8 & 255;
+         int var20 = var17 & 255;
+         var8.vertex((double)var10, (double)var11, 0.0D).color(var18, var19, var20, 255).endVertex();
 
-         int var19;
-         float var20;
-         float var21;
+         int var21;
          float var22;
-         for(var19 = var14; var19 >= 0; --var19) {
-            var20 = (float)((var10 + var13.percentage * (double)var19 / (double)var14) * 6.2831854820251465D / 100.0D);
-            var21 = Mth.sin(var20) * 160.0F;
-            var22 = Mth.cos(var20) * 160.0F * 0.5F;
-            var6.vertex((double)((float)var8 + var21), (double)((float)var9 - var22), 0.0D).color(var16, var17, var18, 255).endVertex();
+         float var23;
+         float var24;
+         for(var21 = var16; var21 >= 0; --var21) {
+            var22 = (float)((var12 + var15.percentage * (double)var21 / (double)var16) * 6.2831854820251465D / 100.0D);
+            var23 = Mth.sin(var22) * 160.0F;
+            var24 = Mth.cos(var22) * 160.0F * 0.5F;
+            var8.vertex((double)((float)var10 + var23), (double)((float)var11 - var24), 0.0D).color(var18, var19, var20, 255).endVertex();
          }
 
-         var5.end();
-         var6.begin(5, DefaultVertexFormat.POSITION_COLOR);
+         var7.end();
+         var8.begin(VertexFormat.Mode.TRIANGLE_STRIP, DefaultVertexFormat.POSITION_COLOR);
 
-         for(var19 = var14; var19 >= 0; --var19) {
-            var20 = (float)((var10 + var13.percentage * (double)var19 / (double)var14) * 6.2831854820251465D / 100.0D);
-            var21 = Mth.sin(var20) * 160.0F;
-            var22 = Mth.cos(var20) * 160.0F * 0.5F;
-            if (var22 <= 0.0F) {
-               var6.vertex((double)((float)var8 + var21), (double)((float)var9 - var22), 0.0D).color(var16 >> 1, var17 >> 1, var18 >> 1, 255).endVertex();
-               var6.vertex((double)((float)var8 + var21), (double)((float)var9 - var22 + 10.0F), 0.0D).color(var16 >> 1, var17 >> 1, var18 >> 1, 255).endVertex();
+         for(var21 = var16; var21 >= 0; --var21) {
+            var22 = (float)((var12 + var15.percentage * (double)var21 / (double)var16) * 6.2831854820251465D / 100.0D);
+            var23 = Mth.sin(var22) * 160.0F;
+            var24 = Mth.cos(var22) * 160.0F * 0.5F;
+            if (var24 <= 0.0F) {
+               var8.vertex((double)((float)var10 + var23), (double)((float)var11 - var24), 0.0D).color(var18 >> 1, var19 >> 1, var20 >> 1, 255).endVertex();
+               var8.vertex((double)((float)var10 + var23), (double)((float)var11 - var24 + 10.0F), 0.0D).color(var18 >> 1, var19 >> 1, var20 >> 1, 255).endVertex();
             }
          }
 
-         var5.end();
+         var7.end();
       }
 
-      DecimalFormat var23 = new DecimalFormat("##0.00");
-      var23.setDecimalFormatSymbols(DecimalFormatSymbols.getInstance(Locale.ROOT));
+      DecimalFormat var25 = new DecimalFormat("##0.00");
+      var25.setDecimalFormatSymbols(DecimalFormatSymbols.getInstance(Locale.ROOT));
       RenderSystem.enableTexture();
-      String var24 = ProfileResults.demanglePath(var4.name);
-      String var26 = "";
-      if (!"unspecified".equals(var24)) {
-         var26 = var26 + "[0] ";
+      String var26 = ProfileResults.demanglePath(var4.name);
+      String var28 = "";
+      if (!"unspecified".equals(var26)) {
+         var28 = var28 + "[0] ";
       }
 
-      if (var24.isEmpty()) {
-         var26 = var26 + "ROOT ";
+      if (var26.isEmpty()) {
+         var28 = var28 + "ROOT ";
       } else {
-         var26 = var26 + var24 + ' ';
+         var28 = var28 + var26 + ' ';
       }
 
-      var15 = 16777215;
-      this.font.drawShadow(var1, var26, (float)(var8 - 160), (float)(var9 - 80 - 16), 16777215);
-      var26 = var23.format(var4.globalPercentage) + "%";
-      this.font.drawShadow(var1, var26, (float)(var8 + 160 - this.font.width(var26)), (float)(var9 - 80 - 16), 16777215);
+      var17 = 16777215;
+      this.font.drawShadow(var1, var28, (float)(var10 - 160), (float)(var11 - 80 - 16), 16777215);
+      var28 = var25.format(var4.globalPercentage) + "%";
+      this.font.drawShadow(var1, var28, (float)(var10 + 160 - this.font.width(var28)), (float)(var11 - 80 - 16), 16777215);
 
-      for(int var25 = 0; var25 < var3.size(); ++var25) {
-         ResultField var29 = (ResultField)var3.get(var25);
-         StringBuilder var27 = new StringBuilder();
-         if ("unspecified".equals(var29.name)) {
-            var27.append("[?] ");
+      for(int var27 = 0; var27 < var3.size(); ++var27) {
+         ResultField var31 = (ResultField)var3.get(var27);
+         StringBuilder var29 = new StringBuilder();
+         if ("unspecified".equals(var31.name)) {
+            var29.append("[?] ");
          } else {
-            var27.append("[").append(var25 + 1).append("] ");
+            var29.append("[").append(var27 + 1).append("] ");
          }
 
-         String var28 = var27.append(var29.name).toString();
-         this.font.drawShadow(var1, var28, (float)(var8 - 160), (float)(var9 + 80 + var25 * 8 + 20), var29.getColor());
-         var28 = var23.format(var29.percentage) + "%";
-         this.font.drawShadow(var1, var28, (float)(var8 + 160 - 50 - this.font.width(var28)), (float)(var9 + 80 + var25 * 8 + 20), var29.getColor());
-         var28 = var23.format(var29.globalPercentage) + "%";
-         this.font.drawShadow(var1, var28, (float)(var8 + 160 - this.font.width(var28)), (float)(var9 + 80 + var25 * 8 + 20), var29.getColor());
+         String var30 = var29.append(var31.name).toString();
+         this.font.drawShadow(var1, var30, (float)(var10 - 160), (float)(var11 + 80 + var27 * 8 + 20), var31.getColor());
+         var30 = var25.format(var31.percentage) + "%";
+         this.font.drawShadow(var1, var30, (float)(var10 + 160 - 50 - this.font.width(var30)), (float)(var11 + 80 + var27 * 8 + 20), var31.getColor());
+         var30 = var25.format(var31.globalPercentage) + "%";
+         this.font.drawShadow(var1, var30, (float)(var10 + 160 - this.font.width(var30)), (float)(var11 + 80 + var27 * 8 + 20), var31.getColor());
       }
 
    }
 
    public void stop() {
@@ -1508,11 +1550,11 @@
             }
          }
 
          this.profiler.popPush("animateTick");
          if (!this.pause && this.level != null) {
-            this.level.animateTick(Mth.floor(this.player.getX()), Mth.floor(this.player.getY()), Mth.floor(this.player.getZ()));
+            this.level.animateTick(this.player.getBlockX(), this.player.getBlockY(), this.player.getBlockZ());
          }
 
          this.profiler.popPush("particles");
          if (!this.pause) {
             this.particleEngine.tick();
@@ -1549,11 +1591,11 @@
          boolean var3 = this.options.keyLoadHotbarActivator.isDown();
          if (this.options.keyHotbarSlots[var4].consumeClick()) {
             if (this.player.isSpectator()) {
                this.gui.getSpectatorGui().onHotbarSelected(var4);
             } else if (!this.player.isCreative() || this.screen != null || !var3 && !var2) {
-               this.player.inventory.selected = var4;
+               this.player.getInventory().selected = var4;
             } else {
                CreativeModeInventoryScreen.handleHotbarLoadOrSave(this, var4, var3, var2);
             }
          }
       }
@@ -1595,37 +1637,34 @@
          if (!this.player.isSpectator() && this.player.drop(Screen.hasControlDown())) {
             this.player.swing(InteractionHand.MAIN_HAND);
          }
       }
 
-      boolean var5 = this.options.chatVisibility != ChatVisiblity.HIDDEN;
-      if (var5) {
-         while(this.options.keyChat.consumeClick()) {
-            this.openChatScreen("");
-         }
+      while(this.options.keyChat.consumeClick()) {
+         this.openChatScreen("");
+      }
 
-         if (this.screen == null && this.overlay == null && this.options.keyCommand.consumeClick()) {
-            this.openChatScreen("/");
-         }
+      if (this.screen == null && this.overlay == null && this.options.keyCommand.consumeClick()) {
+         this.openChatScreen("/");
       }
 
       if (this.player.isUsingItem()) {
          if (!this.options.keyUse.isDown()) {
             this.gameMode.releaseUsingItem(this.player);
          }
 
-         label120:
+         label115:
          while(true) {
             if (!this.options.keyAttack.consumeClick()) {
                while(this.options.keyUse.consumeClick()) {
                }
 
                while(true) {
                   if (this.options.keyPickItem.consumeClick()) {
                      continue;
                   }
-                  break label120;
+                  break label115;
                }
             }
          }
       } else {
          while(this.options.keyAttack.consumeClick()) {
@@ -1735,15 +1774,14 @@
             SkullBlockEntity.setSessionService(var23);
             GameProfileCache.setUsesAuthentication(false);
             this.singleplayerServer = (IntegratedServer)MinecraftServer.spin((var8x) -> {
                return new IntegratedServer(var8x, this, var2, var7, var8.packRepository(), var8.serverResources(), var9, var23, var25, var15, (var1) -> {
                   StoringChunkProgressListener var2 = new StoringChunkProgressListener(var1 + 0);
-                  var2.start();
                   this.progressListener.set(var2);
-                  Queue var10003 = this.progressTasks;
-                  var10003.getClass();
-                  return new ProcessorChunkProgressListener(var2, var10003::add);
+                  Queue var10001 = this.progressTasks;
+                  var10001.getClass();
+                  return ProcessorChunkProgressListener.createStarted(var2, var10001::add);
                });
             });
             this.isLocalServer = true;
          } catch (Throwable var19) {
             CrashReport var13 = CrashReport.forThrowable(var19, "Starting integrated server");
@@ -1859,15 +1897,15 @@
 
    }
 
    public Minecraft.ServerStem makeServerStem(RegistryAccess.RegistryHolder var1, Function<LevelStorageSource.LevelStorageAccess, DataPackConfig> var2, Function4<LevelStorageSource.LevelStorageAccess, RegistryAccess.RegistryHolder, ResourceManager, DataPackConfig, WorldData> var3, boolean var4, LevelStorageSource.LevelStorageAccess var5) throws InterruptedException, ExecutionException {
       DataPackConfig var6 = (DataPackConfig)var2.apply(var5);
-      PackRepository var7 = new PackRepository(new RepositorySource[]{new ServerPacksSource(), new FolderRepositorySource(var5.getLevelPath(LevelResource.DATAPACK_DIR).toFile(), PackSource.WORLD)});
+      PackRepository var7 = new PackRepository(PackType.SERVER_DATA, new RepositorySource[]{new ServerPacksSource(), new FolderRepositorySource(var5.getLevelPath(LevelResource.DATAPACK_DIR).toFile(), PackSource.WORLD)});
 
       try {
          DataPackConfig var8 = MinecraftServer.configurePackRepository(var7, var6, var4);
-         CompletableFuture var9 = ServerResources.loadResources(var7.openAllSelected(), Commands.CommandSelection.INTEGRATED, 2, Util.backgroundExecutor(), this);
+         CompletableFuture var9 = ServerResources.loadResources(var7.openAllSelected(), var1, Commands.CommandSelection.INTEGRATED, 2, Util.backgroundExecutor(), this);
          this.managedBlock(var9::isDone);
          ServerResources var10 = (ServerResources)var9.get();
          WorldData var11 = (WorldData)var3.apply(var5, var1, var10.getResourceManager(), var8);
          return new Minecraft.ServerStem(var7, var10, var11);
       } catch (ExecutionException | InterruptedException var12) {
@@ -1952,28 +1990,38 @@
    }
 
    private void updateLevelInEngines(@Nullable ClientLevel var1) {
       this.levelRenderer.setLevel(var1);
       this.particleEngine.setLevel(var1);
-      BlockEntityRenderDispatcher.instance.setLevel(var1);
+      this.blockEntityRenderDispatcher.setLevel(var1);
       this.updateTitle();
    }
 
    public boolean allowsMultiplayer() {
       return this.allowsMultiplayer && this.socialInteractionsService.serversAllowed();
    }
 
+   public boolean allowsRealms() {
+      return this.socialInteractionsService.realmsAllowed();
+   }
+
    public boolean isBlocked(UUID var1) {
-      if (this.allowsChat()) {
+      if (this.getChatStatus().isChatAllowed(false)) {
          return this.playerSocialManager.shouldHideMessageFrom(var1);
       } else {
          return (this.player == null || !var1.equals(this.player.getUUID())) && !var1.equals(Util.NIL_UUID);
       }
    }
 
-   public boolean allowsChat() {
-      return this.allowsChat && this.socialInteractionsService.chatAllowed();
+   public Minecraft.ChatStatus getChatStatus() {
+      if (this.options.chatVisibility == ChatVisiblity.HIDDEN) {
+         return Minecraft.ChatStatus.DISABLED_BY_OPTIONS;
+      } else if (!this.allowsChat) {
+         return Minecraft.ChatStatus.DISABLED_BY_LAUNCHER;
+      } else {
+         return !this.socialInteractionsService.chatAllowed() ? Minecraft.ChatStatus.DISABLED_BY_PROFILE : Minecraft.ChatStatus.ENABLED;
+      }
    }
 
    public final boolean isDemo() {
       return this.demo;
    }
@@ -1990,94 +2038,48 @@
    public static boolean useFancyGraphics() {
       return instance.options.graphicsMode.getId() >= GraphicsStatus.FANCY.getId();
    }
 
    public static boolean useShaderTransparency() {
-      return instance.options.graphicsMode.getId() >= GraphicsStatus.FABULOUS.getId();
+      return !instance.gameRenderer.isPanoramicMode() && instance.options.graphicsMode.getId() >= GraphicsStatus.FABULOUS.getId();
    }
 
    public static boolean useAmbientOcclusion() {
       return instance.options.ambientOcclusion != AmbientOcclusionStatus.OFF;
    }
 
    private void pickBlock() {
       if (this.hitResult != null && this.hitResult.getType() != HitResult.Type.MISS) {
-         boolean var1 = this.player.abilities.instabuild;
+         boolean var1 = this.player.getAbilities().instabuild;
          BlockEntity var2 = null;
          HitResult.Type var4 = this.hitResult.getType();
          ItemStack var3;
          if (var4 == HitResult.Type.BLOCK) {
             BlockPos var8 = ((BlockHitResult)this.hitResult).getBlockPos();
-            BlockState var13 = this.level.getBlockState(var8);
-            Block var16 = var13.getBlock();
-            if (var13.isAir()) {
+            BlockState var6 = this.level.getBlockState(var8);
+            if (var6.isAir()) {
                return;
             }
 
-            var3 = var16.getCloneItemStack(this.level, var8, var13);
+            Block var7 = var6.getBlock();
+            var3 = var7.getCloneItemStack(this.level, var8, var6);
             if (var3.isEmpty()) {
                return;
             }
 
-            if (var1 && Screen.hasControlDown() && var16.isEntityBlock()) {
+            if (var1 && Screen.hasControlDown() && var6.hasBlockEntity()) {
                var2 = this.level.getBlockEntity(var8);
             }
          } else {
             if (var4 != HitResult.Type.ENTITY || !var1) {
                return;
             }
 
             Entity var5 = ((EntityHitResult)this.hitResult).getEntity();
-            if (var5 instanceof Painting) {
-               var3 = new ItemStack(Items.PAINTING);
-            } else if (var5 instanceof LeashFenceKnotEntity) {
-               var3 = new ItemStack(Items.LEAD);
-            } else if (var5 instanceof ItemFrame) {
-               ItemFrame var6 = (ItemFrame)var5;
-               ItemStack var7 = var6.getItem();
-               if (var7.isEmpty()) {
-                  var3 = new ItemStack(Items.ITEM_FRAME);
-               } else {
-                  var3 = var7.copy();
-               }
-            } else if (var5 instanceof AbstractMinecart) {
-               AbstractMinecart var11 = (AbstractMinecart)var5;
-               Item var15;
-               switch(var11.getMinecartType()) {
-               case FURNACE:
-                  var15 = Items.FURNACE_MINECART;
-                  break;
-               case CHEST:
-                  var15 = Items.CHEST_MINECART;
-                  break;
-               case TNT:
-                  var15 = Items.TNT_MINECART;
-                  break;
-               case HOPPER:
-                  var15 = Items.HOPPER_MINECART;
-                  break;
-               case COMMAND_BLOCK:
-                  var15 = Items.COMMAND_BLOCK_MINECART;
-                  break;
-               default:
-                  var15 = Items.MINECART;
-               }
-
-               var3 = new ItemStack(var15);
-            } else if (var5 instanceof Boat) {
-               var3 = new ItemStack(((Boat)var5).getDropItem());
-            } else if (var5 instanceof ArmorStand) {
-               var3 = new ItemStack(Items.ARMOR_STAND);
-            } else if (var5 instanceof EndCrystal) {
-               var3 = new ItemStack(Items.END_CRYSTAL);
-            } else {
-               SpawnEggItem var12 = SpawnEggItem.byId(var5.getType());
-               if (var12 == null) {
-                  return;
-               }
-
-               var3 = new ItemStack(var12);
+            var3 = var5.getPickResult();
+            if (var3 == null) {
+               return;
             }
          }
 
          if (var3.isEmpty()) {
             String var10 = "";
@@ -2087,24 +2089,24 @@
                var10 = Registry.ENTITY_TYPE.getKey(((EntityHitResult)this.hitResult).getEntity().getType()).toString();
             }
 
             LOGGER.warn("Picking on: [{}] {} gave null item", var4, var10);
          } else {
-            Inventory var9 = this.player.inventory;
+            Inventory var9 = this.player.getInventory();
             if (var2 != null) {
                this.addCustomNbtData(var3, var2);
             }
 
-            int var14 = var9.findSlotMatchingItem(var3);
+            int var11 = var9.findSlotMatchingItem(var3);
             if (var1) {
                var9.setPickedItem(var3);
                this.gameMode.handleCreativeModeItemAdd(this.player.getItemInHand(InteractionHand.MAIN_HAND), 36 + var9.selected);
-            } else if (var14 != -1) {
-               if (Inventory.isHotbarSlot(var14)) {
-                  var9.selected = var14;
+            } else if (var11 != -1) {
+               if (Inventory.isHotbarSlot(var11)) {
+                  var9.selected = var11;
                } else {
-                  this.gameMode.handlePickItem(var14);
+                  this.gameMode.handlePickItem(var11);
                }
             }
 
          }
       }
@@ -2242,10 +2244,30 @@
       } else {
          return "out_of_game";
       }
    }
 
+   public void populateSnooperInitial(Snooper var1) {
+      var1.setFixedData("client_brand", ClientBrandRetriever.getClientModName());
+      var1.setFixedData("launched_version", this.launchedVersion);
+      populateSnooperWithOpenGL(var1);
+      var1.setFixedData("gl_max_texture_size", RenderSystem.maxSupportedTextureSize());
+      GameProfile var2 = this.user.getGameProfile();
+      if (var2.getId() != null) {
+         var1.setFixedData("uuid", Hashing.sha1().hashBytes(var2.getId().toString().getBytes(Charsets.ISO_8859_1)).toString());
+      }
+
+   }
+
+   private static void populateSnooperWithOpenGL(Snooper var0) {
+      GlUtil.populateSnooperWithOpenGL(var0::setFixedData);
+   }
+
+   public boolean isSnooperEnabled() {
+      return this.options.snooperEnabled;
+   }
+
    public void setCurrentServer(@Nullable ServerData var1) {
       this.currentServer = var1;
    }
 
    @Nullable
@@ -2341,11 +2363,11 @@
          } else {
             Biome.BiomeCategory var1 = this.player.level.getBiome(this.player.blockPosition()).getBiomeCategory();
             if (this.musicManager.isPlayingMusic(Musics.UNDER_WATER) || this.player.isUnderWater() && (var1 == Biome.BiomeCategory.OCEAN || var1 == Biome.BiomeCategory.RIVER)) {
                return Musics.UNDER_WATER;
             } else {
-               return this.player.level.dimension() != Level.NETHER && this.player.abilities.instabuild && this.player.abilities.mayfly ? Musics.CREATIVE : (Music)this.level.getBiomeManager().getNoiseBiomeAtPosition(this.player.blockPosition()).getBackgroundMusic().orElse(Musics.GAME);
+               return this.player.level.dimension() != Level.NETHER && this.player.getAbilities().instabuild && this.player.getAbilities().mayfly ? Musics.CREATIVE : (Music)this.level.getBiomeManager().getNoiseBiomeAtPosition(this.player.blockPosition()).getBackgroundMusic().orElse(Musics.GAME);
             }
          }
       } else {
          return Musics.MENU;
       }
@@ -2391,10 +2413,14 @@
 
    public EntityRenderDispatcher getEntityRenderDispatcher() {
       return this.entityRenderDispatcher;
    }
 
+   public BlockEntityRenderDispatcher getBlockEntityRenderDispatcher() {
+      return this.blockEntityRenderDispatcher;
+   }
+
    public ItemRenderer getItemRenderer() {
       return this.itemRenderer;
    }
 
    public ItemInHandRenderer getItemInHandRenderer() {
@@ -2403,10 +2429,14 @@
 
    public <T> MutableSearchTree<T> getSearchTree(SearchRegistry.Key<T> var1) {
       return this.searchRegistry.getTree(var1);
    }
 
+   public static int getAverageFps() {
+      return fps;
+   }
+
    public FrameTimer getFrameTimer() {
       return this.frameTimer;
    }
 
    public boolean isConnectedToRealms() {
@@ -2467,18 +2497,143 @@
 
    public void setWindowActive(boolean var1) {
       this.windowActive = var1;
    }
 
+   public Component grabPanoramixScreenshot(File var1, int var2, int var3) {
+      int var4 = this.window.getWidth();
+      int var5 = this.window.getHeight();
+      RenderTarget var6 = new RenderTarget(var2, var3, true, ON_OSX);
+      float var7 = this.player.xRot;
+      float var8 = this.player.yRot;
+      float var9 = this.player.xRotO;
+      float var10 = this.player.yRotO;
+      this.gameRenderer.setRenderBlockOutline(false);
+
+      TranslatableComponent var12;
+      try {
+         this.gameRenderer.setPanoramicMode(true);
+         this.levelRenderer.graphicsChanged();
+         this.window.setWidth(var2);
+         this.window.setHeight(var3);
+
+         for(int var11 = 0; var11 < 6; ++var11) {
+            switch(var11) {
+            case 0:
+               this.player.yRotO = this.player.yRot = var8;
+               this.player.xRotO = this.player.xRot = 0.0F;
+               break;
+            case 1:
+               this.player.yRotO = this.player.yRot = (var8 + 90.0F) % 360.0F;
+               this.player.xRotO = this.player.xRot = 0.0F;
+               break;
+            case 2:
+               this.player.yRotO = this.player.yRot = (var8 + 180.0F) % 360.0F;
+               this.player.xRotO = this.player.xRot = 0.0F;
+               break;
+            case 3:
+               this.player.yRotO = this.player.yRot = (var8 - 90.0F) % 360.0F;
+               this.player.xRotO = this.player.xRot = 0.0F;
+               break;
+            case 4:
+               this.player.yRotO = this.player.yRot = var8;
+               this.player.xRotO = this.player.xRot = -90.0F;
+               break;
+            case 5:
+            default:
+               this.player.yRotO = this.player.yRot = var8;
+               this.player.xRotO = this.player.xRot = 90.0F;
+            }
+
+            var6.bindWrite(true);
+            this.gameRenderer.renderLevel(1.0F, 0L, new PoseStack());
+
+            try {
+               Thread.sleep(10L);
+            } catch (InterruptedException var17) {
+            }
+
+            Screenshot.grab(var1, "panorama_" + var11 + ".png", var2, var3, var6, (var0) -> {
+            });
+         }
+
+         MutableComponent var20 = (new TextComponent(var1.getName())).withStyle(ChatFormatting.UNDERLINE).withStyle((var1x) -> {
+            return var1x.withClickEvent(new ClickEvent(ClickEvent.Action.OPEN_FILE, var1.getAbsolutePath()));
+         });
+         var12 = new TranslatableComponent("screenshot.success", new Object[]{var20});
+         return var12;
+      } catch (Exception var18) {
+         LOGGER.error("Couldn't save image", var18);
+         var12 = new TranslatableComponent("screenshot.failure", new Object[]{var18.getMessage()});
+      } finally {
+         this.player.xRot = var7;
+         this.player.yRot = var8;
+         this.player.xRotO = var9;
+         this.player.yRotO = var10;
+         this.gameRenderer.setRenderBlockOutline(true);
+         this.window.setWidth(var4);
+         this.window.setHeight(var5);
+         var6.destroyBuffers();
+         this.gameRenderer.setPanoramicMode(false);
+         this.levelRenderer.graphicsChanged();
+         this.getMainRenderTarget().bindWrite(true);
+      }
+
+      return var12;
+   }
+
+   private Component grabHugeScreenshot(File var1, int var2, int var3, int var4, int var5) {
+      try {
+         ByteBuffer var6 = GlUtil.allocateMemory(var2 * var3 * 3);
+         Screenshot var7 = new Screenshot(var1, var4, var5, var3);
+         float var8 = (float)var4 / (float)var2;
+         float var9 = (float)var5 / (float)var3;
+         float var10 = var8 > var9 ? var8 : var9;
+
+         for(int var11 = (var5 - 1) / var3 * var3; var11 >= 0; var11 -= var3) {
+            for(int var12 = 0; var12 < var4; var12 += var2) {
+               RenderSystem.setShaderTexture(0, TextureAtlas.LOCATION_BLOCKS);
+               float var13 = (float)(var4 - var2) / 2.0F * 2.0F - (float)(var12 * 2);
+               float var14 = (float)(var5 - var3) / 2.0F * 2.0F - (float)(var11 * 2);
+               var13 /= (float)var2;
+               var14 /= (float)var3;
+               this.gameRenderer.renderZoomed(var10, var13, var14);
+               var6.clear();
+               RenderSystem.pixelStore(3333, 1);
+               RenderSystem.pixelStore(3317, 1);
+               RenderSystem.readPixels(0, 0, var2, var3, 32992, 5121, var6);
+               var7.addRegion(var6, var12, var11, var2, var3);
+            }
+
+            var7.saveRow();
+         }
+
+         File var16 = var7.close();
+         GlUtil.freeMemory(var6);
+         MutableComponent var17 = (new TextComponent(var16.getName())).withStyle(ChatFormatting.UNDERLINE).withStyle((var1x) -> {
+            return var1x.withClickEvent(new ClickEvent(ClickEvent.Action.OPEN_FILE, var16.getAbsolutePath()));
+         });
+         return new TranslatableComponent("screenshot.success", new Object[]{var17});
+      } catch (Exception var15) {
+         LOGGER.warn("Couldn't save screenshot", var15);
+         return new TranslatableComponent("screenshot.failure", new Object[]{var15.getMessage()});
+      }
+   }
+
    public ProfilerFiller getProfiler() {
       return this.profiler;
    }
 
    public Game getGame() {
       return this.game;
    }
 
+   @Nullable
+   public StoringChunkProgressListener getProgressListener() {
+      return (StoringChunkProgressListener)this.progressListener.get();
+   }
+
    public SplashManager getSplashManager() {
       return this.splashManager;
    }
 
    @Nullable
@@ -2500,22 +2655,22 @@
 
    public RenderBuffers renderBuffers() {
       return this.renderBuffers;
    }
 
-   private static Pack createClientPackAdapter(String var0, boolean var1, Supplier<PackResources> var2, PackResources var3, PackMetadataSection var4, Pack.Position var5, PackSource var6) {
+   private static Pack createClientPackAdapter(String var0, Component var1, boolean var2, Supplier<PackResources> var3, PackMetadataSection var4, Pack.Position var5, PackSource var6) {
       int var7 = var4.getPackFormat();
-      Supplier var8 = var2;
+      Supplier var8 = var3;
       if (var7 <= 3) {
-         var8 = adaptV3(var2);
+         var8 = adaptV3(var3);
       }
 
       if (var7 <= 4) {
          var8 = adaptV4(var8);
       }
 
-      return new Pack(var0, var1, var8, var3, var4, var5, var6);
+      return new Pack(var0, var1, var2, var8, var4, PackType.CLIENT_RESOURCES, var5, var6);
    }
 
    private static Supplier<PackResources> adaptV3(Supplier<PackResources> var0) {
       return () -> {
          return new LegacyPackResourcesAdapter((PackResources)var0.get(), LegacyPackResourcesAdapter.V3);
@@ -2530,20 +2685,63 @@
 
    public void updateMaxMipLevel(int var1) {
       this.modelManager.updateMaxMipLevel(var1);
    }
 
+   public EntityModelSet getEntityModels() {
+      return this.entityModels;
+   }
+
+   public boolean isTextFilteringEnabled() {
+      return true;
+   }
+
    static {
       ON_OSX = Util.getPlatform() == Util.OS.OSX;
       DEFAULT_FONT = new ResourceLocation("default");
       UNIFORM_FONT = new ResourceLocation("uniform");
       ALT_FONT = new ResourceLocation("alt");
       RESOURCE_RELOAD_INITIAL_TASK = CompletableFuture.completedFuture(Unit.INSTANCE);
       SOCIAL_INTERACTIONS_NOT_AVAILABLE = new TranslatableComponent("multiplayer.socialInteractions.not_available");
       reserve = new byte[10485760];
    }
 
+   public static enum ChatStatus {
+      ENABLED(TextComponent.EMPTY) {
+         public boolean isChatAllowed(boolean var1) {
+            return true;
+         }
+      },
+      DISABLED_BY_OPTIONS((new TranslatableComponent("chat.disabled.options")).withStyle(ChatFormatting.RED)) {
+         public boolean isChatAllowed(boolean var1) {
+            return false;
+         }
+      },
+      DISABLED_BY_LAUNCHER((new TranslatableComponent("chat.disabled.launcher")).withStyle(ChatFormatting.RED)) {
+         public boolean isChatAllowed(boolean var1) {
+            return var1;
+         }
+      },
+      DISABLED_BY_PROFILE((new TranslatableComponent("chat.disabled.profile")).withStyle(ChatFormatting.RED)) {
+         public boolean isChatAllowed(boolean var1) {
+            return var1;
+         }
+      };
+
+      private final Component message;
+
+      private ChatStatus(Component var3) {
+         this.message = var3;
+      }
+
+      public Component getMessage() {
+         return this.message;
+      }
+
+      public abstract boolean isChatAllowed(boolean var1);
+   }
+
    public static final class ServerStem implements AutoCloseable {
       private final PackRepository packRepository;
       private final ServerResources serverResources;
       private final WorldData worldData;
 
