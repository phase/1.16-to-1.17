--- net/minecraft/client/resources/model/ModelBakery.java
+++ net/minecraft/client/resources/model/ModelBakery.java
@@ -149,10 +149,11 @@
          this.loadTopLevel(new ModelResourceLocation(var14, "inventory"));
       }
 
       var3.popPush("special");
       this.loadTopLevel(new ModelResourceLocation("minecraft:trident_in_hand#inventory"));
+      this.loadTopLevel(new ModelResourceLocation("minecraft:spyglass_in_hand#inventory"));
       var3.popPush("textures");
       LinkedHashSet var13 = Sets.newLinkedHashSet();
       Set var15 = (Set)this.topLevelModels.values().stream().flatMap((var2x) -> {
          return var2x.getMaterials(this::getModel, var13).stream();
       }).collect(Collectors.toSet());
@@ -185,11 +186,11 @@
          Pair var4 = (Pair)var3.next();
          TextureAtlas var5 = (TextureAtlas)var4.getFirst();
          TextureAtlas.Preparations var6 = (TextureAtlas.Preparations)var4.getSecond();
          var5.reload(var6);
          var1.register((ResourceLocation)var5.location(), (AbstractTexture)var5);
-         var1.bind(var5.location());
+         var1.bindForSetup(var5.location());
          var5.updateFilter(var6);
       }
 
       this.atlasSet = new AtlasSet((Collection)this.atlasPreparations.values().stream().map(Pair::getFirst).collect(Collectors.toList()));
       var2.popPush("baking");
@@ -220,11 +221,11 @@
             Iterator var5;
             do {
                if (!var3.hasNext()) {
                   Block var10 = (Block)var0.getOwner();
                   return (var2x) -> {
-                     if (var2x != null && var10 == var2x.getBlock()) {
+                     if (var2x != null && var2x.is(var10)) {
                         Iterator var3 = var2.entrySet().iterator();
 
                         Entry var4;
                         do {
                            if (!var3.hasNext()) {
@@ -689,11 +690,11 @@
       BLOCK_ENTITY_MARKER = (BlockModel)Util.make(BlockModel.fromString("{\"gui_light\": \"side\"}"), (var0) -> {
          var0.name = "block entity marker";
       });
       ITEM_FRAME_FAKE_DEFINITION = (new StateDefinition.Builder(Blocks.AIR)).add(BooleanProperty.create("map")).create(Block::defaultBlockState, BlockState::new);
       ITEM_MODEL_GENERATOR = new ItemModelGenerator();
-      STATIC_DEFINITIONS = ImmutableMap.of(new ResourceLocation("item_frame"), ITEM_FRAME_FAKE_DEFINITION);
+      STATIC_DEFINITIONS = ImmutableMap.of(new ResourceLocation("item_frame"), ITEM_FRAME_FAKE_DEFINITION, new ResourceLocation("glow_item_frame"), ITEM_FRAME_FAKE_DEFINITION);
    }
 
    static class ModelGroupKey {
       private final List<UnbakedModel> models;
       private final List<Object> coloringValues;
