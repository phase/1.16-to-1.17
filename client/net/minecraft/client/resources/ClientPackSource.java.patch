--- net/minecraft/client/resources/ClientPackSource.java
+++ net/minecraft/client/resources/ClientPackSource.java
@@ -24,10 +24,11 @@
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.packs.FilePackResources;
 import net.minecraft.server.packs.FolderPackResources;
 import net.minecraft.server.packs.PackResources;
+import net.minecraft.server.packs.PackType;
 import net.minecraft.server.packs.VanillaPackResources;
 import net.minecraft.server.packs.metadata.pack.PackMetadataSection;
 import net.minecraft.server.packs.repository.Pack;
 import net.minecraft.server.packs.repository.PackCompatibility;
 import net.minecraft.server.packs.repository.PackSource;
@@ -40,12 +41,19 @@
 import org.apache.commons.io.filefilter.TrueFileFilter;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class ClientPackSource implements RepositorySource {
-   private static final Logger LOGGER = LogManager.getLogger();
-   private static final Pattern SHA1 = Pattern.compile("^[a-fA-F0-9]{40}$");
+   private static final PackMetadataSection BUILT_IN;
+   private static final Logger LOGGER;
+   private static final Pattern SHA1;
+   private static final int MAX_WEB_FILESIZE = 104857600;
+   private static final int MAX_KEPT_PACKS = 10;
+   private static final String VANILLA_ID = "vanilla";
+   private static final String SERVER_ID = "server";
+   private static final String PROGRAMMER_ART_ID = "programer_art";
+   private static final String PROGRAMMER_ART_NAME = "Programmer Art";
    private final VanillaPackResources vanillaPack;
    private final File serverPackDir;
    private final ReentrantLock downloadLock = new ReentrantLock();
    private final AssetIndex assetIndex;
    @Nullable
@@ -54,11 +62,11 @@
    private Pack serverPack;
 
    public ClientPackSource(File var1, AssetIndex var2) {
       this.serverPackDir = var1;
       this.assetIndex = var2;
-      this.vanillaPack = new DefaultClientPackResources(var2);
+      this.vanillaPack = new DefaultClientPackResources(BUILT_IN, var2);
    }
 
    public void loadPacks(Consumer<Pack> var1, Pack.PackConstructor var2) {
       Pack var3 = Pack.create("vanilla", true, () -> {
          return this.vanillaPack;
@@ -86,11 +94,11 @@
       HashMap var0 = Maps.newHashMap();
       var0.put("X-Minecraft-Username", Minecraft.getInstance().getUser().getName());
       var0.put("X-Minecraft-UUID", Minecraft.getInstance().getUser().getUuid());
       var0.put("X-Minecraft-Version", SharedConstants.getCurrentVersion().getName());
       var0.put("X-Minecraft-Version-ID", SharedConstants.getCurrentVersion().getId());
-      var0.put("X-Minecraft-Pack-Format", String.valueOf(SharedConstants.getCurrentVersion().getPackVersion()));
+      var0.put("X-Minecraft-Pack-Format", String.valueOf(PackType.CLIENT_RESOURCES.getVersion(SharedConstants.getCurrentVersion())));
       var0.put("User-Agent", "Minecraft Java/" + SharedConstants.getCurrentVersion().getName());
       return var0;
    }
 
    public CompletableFuture<?> downloadAndSelectResourcePack(String var1, String var2) {
@@ -255,11 +263,11 @@
       }
 
       LOGGER.info("Applying server pack {}", var1);
       this.serverPack = new Pack("server", true, () -> {
          return new FilePackResources(var1);
-      }, new TranslatableComponent("resourcePack.server.name"), var3.getDescription(), PackCompatibility.forFormat(var3.getPackFormat()), Pack.Position.TOP, true, var2);
+      }, new TranslatableComponent("resourcePack.server.name"), var3.getDescription(), PackCompatibility.forMetadata(var3, PackType.CLIENT_RESOURCES), Pack.Position.TOP, true, var2);
       return Minecraft.getInstance().delayTextureReload();
    }
 
    @Nullable
    private Pack createProgrammerArtPack(Pack.PackConstructor var1) {
@@ -301,6 +309,12 @@
          public String getName() {
             return "Programmer Art";
          }
       };
    }
+
+   static {
+      BUILT_IN = new PackMetadataSection(new TranslatableComponent("resourcePack.vanilla.description"), PackType.CLIENT_RESOURCES.getVersion(SharedConstants.getCurrentVersion()));
+      LOGGER = LogManager.getLogger();
+      SHA1 = Pattern.compile("^[a-fA-F0-9]{40}$");
+   }
 }
