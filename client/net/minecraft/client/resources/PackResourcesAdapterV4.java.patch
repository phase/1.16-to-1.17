--- net/minecraft/client/resources/PackResourcesAdapterV4.java
+++ net/minecraft/client/resources/PackResourcesAdapterV4.java
@@ -37,11 +37,15 @@
    private static final List<String> PATTERNS = Lists.newArrayList(new String[]{"base", "border", "bricks", "circle", "creeper", "cross", "curly_border", "diagonal_left", "diagonal_right", "diagonal_up_left", "diagonal_up_right", "flower", "globe", "gradient", "gradient_up", "half_horizontal", "half_horizontal_bottom", "half_vertical", "half_vertical_right", "mojang", "rhombus", "skull", "small_stripes", "square_bottom_left", "square_bottom_right", "square_top_left", "square_top_right", "straight_cross", "stripe_bottom", "stripe_center", "stripe_downleft", "stripe_downright", "stripe_left", "stripe_middle", "stripe_right", "stripe_top", "triangle_bottom", "triangle_top", "triangles_bottom", "triangles_top"});
    private static final Set<String> SHIELDS;
    private static final Set<String> BANNERS;
    public static final ResourceLocation SHIELD_BASE;
    public static final ResourceLocation BANNER_BASE;
+   public static final int DEFAULT_CHEST_SIZE = 64;
+   public static final int DEFAULT_SHIELD_SIZE = 64;
+   public static final int DEFAULT_BANNER_SIZE = 64;
    public static final ResourceLocation OLD_IRON_GOLEM_LOCATION;
+   public static final String NEW_IRON_GOLEM_PATH = "textures/entity/iron_golem/iron_golem.png";
    private final PackResources pack;
 
    public PackResourcesAdapterV4(PackResources var1) {
       this.pack = var1;
    }
@@ -80,77 +84,80 @@
       } else {
          String var3 = var2.getPath();
          if ("textures/entity/iron_golem/iron_golem.png".equals(var3)) {
             return this.pack.getResource(var1, OLD_IRON_GOLEM_LOCATION);
          } else {
-            InputStream var19;
+            InputStream var11;
             if (SHIELDS.contains(var3)) {
-               var19 = fixPattern(this.pack.getResource(var1, SHIELD_BASE), this.pack.getResource(var1, var2), 64, 2, 2, 12, 22);
-               if (var19 != null) {
-                  return var19;
+               var11 = fixPattern(this.pack.getResource(var1, SHIELD_BASE), this.pack.getResource(var1, var2), 64, 2, 2, 12, 22);
+               if (var11 != null) {
+                  return var11;
                }
             } else if (BANNERS.contains(var3)) {
-               var19 = fixPattern(this.pack.getResource(var1, BANNER_BASE), this.pack.getResource(var1, var2), 64, 0, 0, 42, 41);
-               if (var19 != null) {
-                  return var19;
+               var11 = fixPattern(this.pack.getResource(var1, BANNER_BASE), this.pack.getResource(var1, var2), 64, 0, 0, 42, 41);
+               if (var11 != null) {
+                  return var11;
                }
             } else {
-               if (!"textures/entity/enderdragon/dragon.png".equals(var3) && !"textures/entity/enderdragon/dragon_exploding.png".equals(var3)) {
-                  if (!"textures/entity/conduit/closed_eye.png".equals(var3) && !"textures/entity/conduit/open_eye.png".equals(var3)) {
-                     Pair var18 = (Pair)CHESTS.get(var3);
-                     if (var18 != null) {
-                        ChestType var20 = (ChestType)var18.getFirst();
-                        InputStream var21 = this.pack.getResource(var1, (ResourceLocation)var18.getSecond());
-                        if (var20 == ChestType.SINGLE) {
-                           return fixSingleChest(var21);
+               if ("textures/entity/enderdragon/dragon.png".equals(var3) || "textures/entity/enderdragon/dragon_exploding.png".equals(var3)) {
+                  NativeImage var10 = NativeImage.read(this.pack.getResource(var1, var2));
+
+                  ByteArrayInputStream var14;
+                  try {
+                     int var12 = var10.getWidth() / 256;
+                     int var13 = 88 * var12;
+
+                     while(true) {
+                        if (var13 >= 200 * var12) {
+                           var14 = new ByteArrayInputStream(var10.asByteArray());
+                           break;
                         }
 
-                        if (var20 == ChestType.LEFT) {
-                           return fixLeftChest(var21);
+                        for(int var7 = 56 * var12; var7 < 112 * var12; ++var7) {
+                           var10.setPixelRGBA(var7, var13, 0);
                         }
 
-                        if (var20 == ChestType.RIGHT) {
-                           return fixRightChest(var21);
+                        ++var13;
+                     }
+                  } catch (Throwable var9) {
+                     if (var10 != null) {
+                        try {
+                           var10.close();
+                        } catch (Throwable var8) {
+                           var9.addSuppressed(var8);
                         }
                      }
 
-                     return this.pack.getResource(var1, var2);
+                     throw var9;
                   }
 
+                  if (var10 != null) {
+                     var10.close();
+                  }
+
+                  return var14;
+               }
+
+               if ("textures/entity/conduit/closed_eye.png".equals(var3) || "textures/entity/conduit/open_eye.png".equals(var3)) {
                   return fixConduitEyeTexture(this.pack.getResource(var1, var2));
                }
 
-               NativeImage var4 = NativeImage.read(this.pack.getResource(var1, var2));
-               Throwable var5 = null;
-
-               try {
-                  int var6 = var4.getWidth() / 256;
-
-                  for(int var7 = 88 * var6; var7 < 200 * var6; ++var7) {
-                     for(int var8 = 56 * var6; var8 < 112 * var6; ++var8) {
-                        var4.setPixelRGBA(var8, var7, 0);
-                     }
+               Pair var4 = (Pair)CHESTS.get(var3);
+               if (var4 != null) {
+                  ChestType var5 = (ChestType)var4.getFirst();
+                  InputStream var6 = this.pack.getResource(var1, (ResourceLocation)var4.getSecond());
+                  if (var5 == ChestType.SINGLE) {
+                     return fixSingleChest(var6);
                   }
 
-                  ByteArrayInputStream var22 = new ByteArrayInputStream(var4.asByteArray());
-                  return var22;
-               } catch (Throwable var16) {
-                  var5 = var16;
-                  throw var16;
-               } finally {
-                  if (var4 != null) {
-                     if (var5 != null) {
-                        try {
-                           var4.close();
-                        } catch (Throwable var15) {
-                           var5.addSuppressed(var15);
-                        }
-                     } else {
-                        var4.close();
-                     }
+                  if (var5 == ChestType.LEFT) {
+                     return fixLeftChest(var6);
                   }
 
+                  if (var5 == ChestType.RIGHT) {
+                     return fixRightChest(var6);
+                  }
                }
             }
 
             return this.pack.getResource(var1, var2);
          }
@@ -158,347 +165,317 @@
    }
 
    @Nullable
    public static InputStream fixPattern(InputStream var0, InputStream var1, int var2, int var3, int var4, int var5, int var6) throws IOException {
       NativeImage var7 = NativeImage.read(var0);
-      Throwable var8 = null;
 
-      try {
-         NativeImage var9 = NativeImage.read(var1);
-         Throwable var10 = null;
-
+      ByteArrayInputStream var23;
+      label105: {
          try {
-            int var11 = var7.getWidth();
-            int var12 = var7.getHeight();
-            if (var11 != var9.getWidth() || var12 != var9.getHeight()) {
-               return null;
-            } else {
-               NativeImage var13 = new NativeImage(var11, var12, true);
-               Throwable var14 = null;
+            NativeImage var8;
+            label107: {
+               var8 = NativeImage.read(var1);
 
                try {
-                  int var15 = var11 / var2;
+                  int var9 = var7.getWidth();
+                  int var10 = var7.getHeight();
+                  if (var9 != var8.getWidth() || var10 != var8.getHeight()) {
+                     break label107;
+                  }
 
-                  for(int var16 = var4 * var15; var16 < var6 * var15; ++var16) {
-                     for(int var17 = var3 * var15; var17 < var5 * var15; ++var17) {
-                        int var18 = NativeImage.getR(var9.getPixelRGBA(var17, var16));
-                        int var19 = var7.getPixelRGBA(var17, var16);
-                        var13.setPixelRGBA(var17, var16, NativeImage.combine(var18, NativeImage.getB(var19), NativeImage.getG(var19), NativeImage.getR(var19)));
+                  NativeImage var11 = new NativeImage(var9, var10, true);
+
+                  try {
+                     int var12 = var9 / var2;
+                     int var13 = var4 * var12;
+
+                     while(true) {
+                        if (var13 >= var6 * var12) {
+                           var23 = new ByteArrayInputStream(var11.asByteArray());
+                           break;
+                        }
+
+                        for(int var14 = var3 * var12; var14 < var5 * var12; ++var14) {
+                           int var15 = NativeImage.getR(var8.getPixelRGBA(var14, var13));
+                           int var16 = var7.getPixelRGBA(var14, var13);
+                           var11.setPixelRGBA(var14, var13, NativeImage.combine(var15, NativeImage.getB(var16), NativeImage.getG(var16), NativeImage.getR(var16)));
+                        }
+
+                        ++var13;
                      }
+                  } catch (Throwable var20) {
+                     try {
+                        var11.close();
+                     } catch (Throwable var19) {
+                        var20.addSuppressed(var19);
+                     }
+
+                     throw var20;
                   }
 
-                  ByteArrayInputStream var71 = new ByteArrayInputStream(var13.asByteArray());
-                  return var71;
-               } catch (Throwable var65) {
-                  var14 = var65;
-                  throw var65;
-               } finally {
-                  if (var13 != null) {
-                     if (var14 != null) {
-                        try {
-                           var13.close();
-                        } catch (Throwable var64) {
-                           var14.addSuppressed(var64);
-                        }
-                     } else {
-                        var13.close();
+                  var11.close();
+               } catch (Throwable var21) {
+                  if (var8 != null) {
+                     try {
+                        var8.close();
+                     } catch (Throwable var18) {
+                        var21.addSuppressed(var18);
                      }
                   }
 
+                  throw var21;
                }
-            }
-         } catch (Throwable var67) {
-            var10 = var67;
-            throw var67;
-         } finally {
-            if (var9 != null) {
-               if (var10 != null) {
-                  try {
-                     var9.close();
-                  } catch (Throwable var63) {
-                     var10.addSuppressed(var63);
-                  }
-               } else {
-                  var9.close();
+
+               if (var8 != null) {
+                  var8.close();
                }
+               break label105;
             }
 
-         }
-      } catch (Throwable var69) {
-         var8 = var69;
-         throw var69;
-      } finally {
-         if (var7 != null) {
             if (var8 != null) {
+               var8.close();
+            }
+         } catch (Throwable var22) {
+            if (var7 != null) {
                try {
                   var7.close();
-               } catch (Throwable var62) {
-                  var8.addSuppressed(var62);
+               } catch (Throwable var17) {
+                  var22.addSuppressed(var17);
                }
-            } else {
-               var7.close();
             }
+
+            throw var22;
          }
 
+         if (var7 != null) {
+            var7.close();
+         }
+
+         return null;
       }
+
+      if (var7 != null) {
+         var7.close();
+      }
+
+      return var23;
    }
 
    public static InputStream fixConduitEyeTexture(InputStream var0) throws IOException {
       NativeImage var1 = NativeImage.read(var0);
-      Throwable var2 = null;
 
-      Object var7;
+      ByteArrayInputStream var5;
       try {
-         int var3 = var1.getWidth();
-         int var4 = var1.getHeight();
-         NativeImage var5 = new NativeImage(2 * var3, 2 * var4, true);
-         Throwable var6 = null;
+         int var2 = var1.getWidth();
+         int var3 = var1.getHeight();
+         NativeImage var4 = new NativeImage(2 * var2, 2 * var3, true);
 
          try {
-            copyRect(var1, var5, 0, 0, 0, 0, var3, var4, 1, false, false);
-            var7 = new ByteArrayInputStream(var5.asByteArray());
-         } catch (Throwable var30) {
-            var7 = var30;
-            var6 = var30;
-            throw var30;
-         } finally {
-            if (var5 != null) {
-               if (var6 != null) {
-                  try {
-                     var5.close();
-                  } catch (Throwable var29) {
-                     var6.addSuppressed(var29);
-                  }
-               } else {
-                  var5.close();
-               }
+            copyRect(var1, var4, 0, 0, 0, 0, var2, var3, 1, false, false);
+            var5 = new ByteArrayInputStream(var4.asByteArray());
+         } catch (Throwable var9) {
+            try {
+               var4.close();
+            } catch (Throwable var8) {
+               var9.addSuppressed(var8);
             }
 
+            throw var9;
          }
-      } catch (Throwable var32) {
-         var2 = var32;
-         throw var32;
-      } finally {
+
+         var4.close();
+      } catch (Throwable var10) {
          if (var1 != null) {
-            if (var2 != null) {
-               try {
-                  var1.close();
-               } catch (Throwable var28) {
-                  var2.addSuppressed(var28);
-               }
-            } else {
+            try {
                var1.close();
+            } catch (Throwable var7) {
+               var10.addSuppressed(var7);
             }
          }
 
+         throw var10;
       }
 
-      return (InputStream)var7;
+      if (var1 != null) {
+         var1.close();
+      }
+
+      return var5;
    }
 
    public static InputStream fixLeftChest(InputStream var0) throws IOException {
       NativeImage var1 = NativeImage.read(var0);
-      Throwable var2 = null;
 
-      ByteArrayInputStream var8;
+      ByteArrayInputStream var6;
       try {
-         int var3 = var1.getWidth();
-         int var4 = var1.getHeight();
-         NativeImage var5 = new NativeImage(var3 / 2, var4, true);
-         Throwable var6 = null;
+         int var2 = var1.getWidth();
+         int var3 = var1.getHeight();
+         NativeImage var4 = new NativeImage(var2 / 2, var3, true);
 
          try {
-            int var7 = var4 / 64;
-            copyRect(var1, var5, 29, 0, 29, 0, 15, 14, var7, false, true);
-            copyRect(var1, var5, 59, 0, 14, 0, 15, 14, var7, false, true);
-            copyRect(var1, var5, 29, 14, 43, 14, 15, 5, var7, true, true);
-            copyRect(var1, var5, 44, 14, 29, 14, 14, 5, var7, true, true);
-            copyRect(var1, var5, 58, 14, 14, 14, 15, 5, var7, true, true);
-            copyRect(var1, var5, 29, 19, 29, 19, 15, 14, var7, false, true);
-            copyRect(var1, var5, 59, 19, 14, 19, 15, 14, var7, false, true);
-            copyRect(var1, var5, 29, 33, 43, 33, 15, 10, var7, true, true);
-            copyRect(var1, var5, 44, 33, 29, 33, 14, 10, var7, true, true);
-            copyRect(var1, var5, 58, 33, 14, 33, 15, 10, var7, true, true);
-            copyRect(var1, var5, 2, 0, 2, 0, 1, 1, var7, false, true);
-            copyRect(var1, var5, 4, 0, 1, 0, 1, 1, var7, false, true);
-            copyRect(var1, var5, 2, 1, 3, 1, 1, 4, var7, true, true);
-            copyRect(var1, var5, 3, 1, 2, 1, 1, 4, var7, true, true);
-            copyRect(var1, var5, 4, 1, 1, 1, 1, 4, var7, true, true);
-            var8 = new ByteArrayInputStream(var5.asByteArray());
-         } catch (Throwable var31) {
-            var6 = var31;
-            throw var31;
-         } finally {
-            if (var5 != null) {
-               if (var6 != null) {
-                  try {
-                     var5.close();
-                  } catch (Throwable var30) {
-                     var6.addSuppressed(var30);
-                  }
-               } else {
-                  var5.close();
-               }
+            int var5 = var3 / 64;
+            copyRect(var1, var4, 29, 0, 29, 0, 15, 14, var5, false, true);
+            copyRect(var1, var4, 59, 0, 14, 0, 15, 14, var5, false, true);
+            copyRect(var1, var4, 29, 14, 43, 14, 15, 5, var5, true, true);
+            copyRect(var1, var4, 44, 14, 29, 14, 14, 5, var5, true, true);
+            copyRect(var1, var4, 58, 14, 14, 14, 15, 5, var5, true, true);
+            copyRect(var1, var4, 29, 19, 29, 19, 15, 14, var5, false, true);
+            copyRect(var1, var4, 59, 19, 14, 19, 15, 14, var5, false, true);
+            copyRect(var1, var4, 29, 33, 43, 33, 15, 10, var5, true, true);
+            copyRect(var1, var4, 44, 33, 29, 33, 14, 10, var5, true, true);
+            copyRect(var1, var4, 58, 33, 14, 33, 15, 10, var5, true, true);
+            copyRect(var1, var4, 2, 0, 2, 0, 1, 1, var5, false, true);
+            copyRect(var1, var4, 4, 0, 1, 0, 1, 1, var5, false, true);
+            copyRect(var1, var4, 2, 1, 3, 1, 1, 4, var5, true, true);
+            copyRect(var1, var4, 3, 1, 2, 1, 1, 4, var5, true, true);
+            copyRect(var1, var4, 4, 1, 1, 1, 1, 4, var5, true, true);
+            var6 = new ByteArrayInputStream(var4.asByteArray());
+         } catch (Throwable var9) {
+            try {
+               var4.close();
+            } catch (Throwable var8) {
+               var9.addSuppressed(var8);
             }
 
+            throw var9;
          }
-      } catch (Throwable var33) {
-         var2 = var33;
-         throw var33;
-      } finally {
+
+         var4.close();
+      } catch (Throwable var10) {
          if (var1 != null) {
-            if (var2 != null) {
-               try {
-                  var1.close();
-               } catch (Throwable var29) {
-                  var2.addSuppressed(var29);
-               }
-            } else {
+            try {
                var1.close();
+            } catch (Throwable var7) {
+               var10.addSuppressed(var7);
             }
          }
 
+         throw var10;
       }
 
-      return var8;
+      if (var1 != null) {
+         var1.close();
+      }
+
+      return var6;
    }
 
    public static InputStream fixRightChest(InputStream var0) throws IOException {
       NativeImage var1 = NativeImage.read(var0);
-      Throwable var2 = null;
 
-      ByteArrayInputStream var8;
+      ByteArrayInputStream var6;
       try {
-         int var3 = var1.getWidth();
-         int var4 = var1.getHeight();
-         NativeImage var5 = new NativeImage(var3 / 2, var4, true);
-         Throwable var6 = null;
+         int var2 = var1.getWidth();
+         int var3 = var1.getHeight();
+         NativeImage var4 = new NativeImage(var2 / 2, var3, true);
 
          try {
-            int var7 = var4 / 64;
-            copyRect(var1, var5, 14, 0, 29, 0, 15, 14, var7, false, true);
-            copyRect(var1, var5, 44, 0, 14, 0, 15, 14, var7, false, true);
-            copyRect(var1, var5, 0, 14, 0, 14, 14, 5, var7, true, true);
-            copyRect(var1, var5, 14, 14, 43, 14, 15, 5, var7, true, true);
-            copyRect(var1, var5, 73, 14, 14, 14, 15, 5, var7, true, true);
-            copyRect(var1, var5, 14, 19, 29, 19, 15, 14, var7, false, true);
-            copyRect(var1, var5, 44, 19, 14, 19, 15, 14, var7, false, true);
-            copyRect(var1, var5, 0, 33, 0, 33, 14, 10, var7, true, true);
-            copyRect(var1, var5, 14, 33, 43, 33, 15, 10, var7, true, true);
-            copyRect(var1, var5, 73, 33, 14, 33, 15, 10, var7, true, true);
-            copyRect(var1, var5, 1, 0, 2, 0, 1, 1, var7, false, true);
-            copyRect(var1, var5, 3, 0, 1, 0, 1, 1, var7, false, true);
-            copyRect(var1, var5, 0, 1, 0, 1, 1, 4, var7, true, true);
-            copyRect(var1, var5, 1, 1, 3, 1, 1, 4, var7, true, true);
-            copyRect(var1, var5, 5, 1, 1, 1, 1, 4, var7, true, true);
-            var8 = new ByteArrayInputStream(var5.asByteArray());
-         } catch (Throwable var31) {
-            var6 = var31;
-            throw var31;
-         } finally {
-            if (var5 != null) {
-               if (var6 != null) {
-                  try {
-                     var5.close();
-                  } catch (Throwable var30) {
-                     var6.addSuppressed(var30);
-                  }
-               } else {
-                  var5.close();
-               }
+            int var5 = var3 / 64;
+            copyRect(var1, var4, 14, 0, 29, 0, 15, 14, var5, false, true);
+            copyRect(var1, var4, 44, 0, 14, 0, 15, 14, var5, false, true);
+            copyRect(var1, var4, 0, 14, 0, 14, 14, 5, var5, true, true);
+            copyRect(var1, var4, 14, 14, 43, 14, 15, 5, var5, true, true);
+            copyRect(var1, var4, 73, 14, 14, 14, 15, 5, var5, true, true);
+            copyRect(var1, var4, 14, 19, 29, 19, 15, 14, var5, false, true);
+            copyRect(var1, var4, 44, 19, 14, 19, 15, 14, var5, false, true);
+            copyRect(var1, var4, 0, 33, 0, 33, 14, 10, var5, true, true);
+            copyRect(var1, var4, 14, 33, 43, 33, 15, 10, var5, true, true);
+            copyRect(var1, var4, 73, 33, 14, 33, 15, 10, var5, true, true);
+            copyRect(var1, var4, 1, 0, 2, 0, 1, 1, var5, false, true);
+            copyRect(var1, var4, 3, 0, 1, 0, 1, 1, var5, false, true);
+            copyRect(var1, var4, 0, 1, 0, 1, 1, 4, var5, true, true);
+            copyRect(var1, var4, 1, 1, 3, 1, 1, 4, var5, true, true);
+            copyRect(var1, var4, 5, 1, 1, 1, 1, 4, var5, true, true);
+            var6 = new ByteArrayInputStream(var4.asByteArray());
+         } catch (Throwable var9) {
+            try {
+               var4.close();
+            } catch (Throwable var8) {
+               var9.addSuppressed(var8);
             }
 
+            throw var9;
          }
-      } catch (Throwable var33) {
-         var2 = var33;
-         throw var33;
-      } finally {
+
+         var4.close();
+      } catch (Throwable var10) {
          if (var1 != null) {
-            if (var2 != null) {
-               try {
-                  var1.close();
-               } catch (Throwable var29) {
-                  var2.addSuppressed(var29);
-               }
-            } else {
+            try {
                var1.close();
+            } catch (Throwable var7) {
+               var10.addSuppressed(var7);
             }
          }
 
+         throw var10;
       }
 
-      return var8;
+      if (var1 != null) {
+         var1.close();
+      }
+
+      return var6;
    }
 
    public static InputStream fixSingleChest(InputStream var0) throws IOException {
       NativeImage var1 = NativeImage.read(var0);
-      Throwable var2 = null;
 
-      ByteArrayInputStream var8;
+      ByteArrayInputStream var6;
       try {
-         int var3 = var1.getWidth();
-         int var4 = var1.getHeight();
-         NativeImage var5 = new NativeImage(var3, var4, true);
-         Throwable var6 = null;
+         int var2 = var1.getWidth();
+         int var3 = var1.getHeight();
+         NativeImage var4 = new NativeImage(var2, var3, true);
 
          try {
-            int var7 = var4 / 64;
-            copyRect(var1, var5, 14, 0, 28, 0, 14, 14, var7, false, true);
-            copyRect(var1, var5, 28, 0, 14, 0, 14, 14, var7, false, true);
-            copyRect(var1, var5, 0, 14, 0, 14, 14, 5, var7, true, true);
-            copyRect(var1, var5, 14, 14, 42, 14, 14, 5, var7, true, true);
-            copyRect(var1, var5, 28, 14, 28, 14, 14, 5, var7, true, true);
-            copyRect(var1, var5, 42, 14, 14, 14, 14, 5, var7, true, true);
-            copyRect(var1, var5, 14, 19, 28, 19, 14, 14, var7, false, true);
-            copyRect(var1, var5, 28, 19, 14, 19, 14, 14, var7, false, true);
-            copyRect(var1, var5, 0, 33, 0, 33, 14, 10, var7, true, true);
-            copyRect(var1, var5, 14, 33, 42, 33, 14, 10, var7, true, true);
-            copyRect(var1, var5, 28, 33, 28, 33, 14, 10, var7, true, true);
-            copyRect(var1, var5, 42, 33, 14, 33, 14, 10, var7, true, true);
-            copyRect(var1, var5, 1, 0, 3, 0, 2, 1, var7, false, true);
-            copyRect(var1, var5, 3, 0, 1, 0, 2, 1, var7, false, true);
-            copyRect(var1, var5, 0, 1, 0, 1, 1, 4, var7, true, true);
-            copyRect(var1, var5, 1, 1, 4, 1, 2, 4, var7, true, true);
-            copyRect(var1, var5, 3, 1, 3, 1, 1, 4, var7, true, true);
-            copyRect(var1, var5, 4, 1, 1, 1, 2, 4, var7, true, true);
-            var8 = new ByteArrayInputStream(var5.asByteArray());
-         } catch (Throwable var31) {
-            var6 = var31;
-            throw var31;
-         } finally {
-            if (var5 != null) {
-               if (var6 != null) {
-                  try {
-                     var5.close();
-                  } catch (Throwable var30) {
-                     var6.addSuppressed(var30);
-                  }
-               } else {
-                  var5.close();
-               }
+            int var5 = var3 / 64;
+            copyRect(var1, var4, 14, 0, 28, 0, 14, 14, var5, false, true);
+            copyRect(var1, var4, 28, 0, 14, 0, 14, 14, var5, false, true);
+            copyRect(var1, var4, 0, 14, 0, 14, 14, 5, var5, true, true);
+            copyRect(var1, var4, 14, 14, 42, 14, 14, 5, var5, true, true);
+            copyRect(var1, var4, 28, 14, 28, 14, 14, 5, var5, true, true);
+            copyRect(var1, var4, 42, 14, 14, 14, 14, 5, var5, true, true);
+            copyRect(var1, var4, 14, 19, 28, 19, 14, 14, var5, false, true);
+            copyRect(var1, var4, 28, 19, 14, 19, 14, 14, var5, false, true);
+            copyRect(var1, var4, 0, 33, 0, 33, 14, 10, var5, true, true);
+            copyRect(var1, var4, 14, 33, 42, 33, 14, 10, var5, true, true);
+            copyRect(var1, var4, 28, 33, 28, 33, 14, 10, var5, true, true);
+            copyRect(var1, var4, 42, 33, 14, 33, 14, 10, var5, true, true);
+            copyRect(var1, var4, 1, 0, 3, 0, 2, 1, var5, false, true);
+            copyRect(var1, var4, 3, 0, 1, 0, 2, 1, var5, false, true);
+            copyRect(var1, var4, 0, 1, 0, 1, 1, 4, var5, true, true);
+            copyRect(var1, var4, 1, 1, 4, 1, 2, 4, var5, true, true);
+            copyRect(var1, var4, 3, 1, 3, 1, 1, 4, var5, true, true);
+            copyRect(var1, var4, 4, 1, 1, 1, 2, 4, var5, true, true);
+            var6 = new ByteArrayInputStream(var4.asByteArray());
+         } catch (Throwable var9) {
+            try {
+               var4.close();
+            } catch (Throwable var8) {
+               var9.addSuppressed(var8);
             }
 
+            throw var9;
          }
-      } catch (Throwable var33) {
-         var2 = var33;
-         throw var33;
-      } finally {
+
+         var4.close();
+      } catch (Throwable var10) {
          if (var1 != null) {
-            if (var2 != null) {
-               try {
-                  var1.close();
-               } catch (Throwable var29) {
-                  var2.addSuppressed(var29);
-               }
-            } else {
+            try {
                var1.close();
+            } catch (Throwable var7) {
+               var10.addSuppressed(var7);
             }
          }
 
+         throw var10;
       }
 
-      return var8;
+      if (var1 != null) {
+         var1.close();
+      }
+
+      return var6;
    }
 
    public Collection<ResourceLocation> getResources(PackType var1, String var2, String var3, int var4, Predicate<String> var5) {
       return this.pack.getResources(var1, var2, var3, var4, var5);
    }
