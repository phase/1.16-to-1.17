--- net/minecraft/client/color/block/BlockTintCache.java
+++ net/minecraft/client/color/block/BlockTintCache.java
@@ -3,25 +3,27 @@
 import it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap;
 import java.util.Arrays;
 import java.util.concurrent.locks.ReentrantReadWriteLock;
 import java.util.function.IntSupplier;
 import net.minecraft.core.BlockPos;
+import net.minecraft.core.SectionPos;
 import net.minecraft.world.level.ChunkPos;
 
 public class BlockTintCache {
+   private static final int MAX_CACHE_ENTRIES = 256;
    private final ThreadLocal<BlockTintCache.LatestCacheInfo> latestChunkOnThread = ThreadLocal.withInitial(() -> {
       return new BlockTintCache.LatestCacheInfo();
    });
    private final Long2ObjectLinkedOpenHashMap<int[]> cache = new Long2ObjectLinkedOpenHashMap(256, 0.25F);
    private final ReentrantReadWriteLock lock = new ReentrantReadWriteLock();
 
    public BlockTintCache() {
    }
 
    public int getColor(BlockPos var1, IntSupplier var2) {
-      int var3 = var1.getX() >> 4;
-      int var4 = var1.getZ() >> 4;
+      int var3 = SectionPos.blockToSectionCoord(var1.getX());
+      int var4 = SectionPos.blockToSectionCoord(var1.getZ());
       BlockTintCache.LatestCacheInfo var5 = (BlockTintCache.LatestCacheInfo)this.latestChunkOnThread.get();
       if (var5.x != var3 || var5.z != var4) {
          var5.x = var3;
          var5.z = var4;
          var5.cache = this.findOrCreateChunkCache(var3, var4);
