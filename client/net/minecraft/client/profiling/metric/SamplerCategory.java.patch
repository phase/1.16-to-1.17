--- net/minecraft/client/profiling/metric/SamplerCategory.java
+++ net/minecraft/client/profiling/metric/SamplerCategory.java
@@ -1,0 +1,60 @@
+package net.minecraft.client.profiling.metric;
+
+import com.google.common.collect.ImmutableList;
+import java.util.List;
+
+public class SamplerCategory {
+   private final String name;
+   private final MetricSampler[] metricSamplers;
+
+   public SamplerCategory(String var1, MetricSampler... var2) {
+      this.name = var1;
+      this.metricSamplers = var2;
+   }
+
+   public SamplerCategory(String var1, List<MetricSampler> var2) {
+      this.name = var1;
+      this.metricSamplers = (MetricSampler[])var2.toArray(new MetricSampler[0]);
+   }
+
+   public void onEndTick() {
+      MetricSampler[] var1 = this.metricSamplers;
+      int var2 = var1.length;
+
+      for(int var3 = 0; var3 < var2; ++var3) {
+         MetricSampler var4 = var1[var3];
+         var4.onEndTick();
+      }
+
+   }
+
+   public void onStartTick() {
+      MetricSampler[] var1 = this.metricSamplers;
+      int var2 = var1.length;
+
+      for(int var3 = 0; var3 < var2; ++var3) {
+         MetricSampler var4 = var1[var3];
+         var4.onStartTick();
+      }
+
+   }
+
+   public void onFinished() {
+      MetricSampler[] var1 = this.metricSamplers;
+      int var2 = var1.length;
+
+      for(int var3 = 0; var3 < var2; ++var3) {
+         MetricSampler var4 = var1[var3];
+         var4.onFinished();
+      }
+
+   }
+
+   public String getName() {
+      return this.name;
+   }
+
+   public List<MetricSampler> getMetricSamplers() {
+      return ImmutableList.copyOf(this.metricSamplers);
+   }
+}
