--- net/minecraft/client/gui/components/AbstractSelectionList.java
+++ net/minecraft/client/gui/components/AbstractSelectionList.java
@@ -5,23 +5,27 @@
 import com.mojang.blaze3d.systems.RenderSystem;
 import com.mojang.blaze3d.vertex.BufferBuilder;
 import com.mojang.blaze3d.vertex.DefaultVertexFormat;
 import com.mojang.blaze3d.vertex.PoseStack;
 import com.mojang.blaze3d.vertex.Tesselator;
+import com.mojang.blaze3d.vertex.VertexFormat;
 import java.util.AbstractList;
 import java.util.Collection;
 import java.util.List;
 import java.util.Objects;
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.GuiComponent;
 import net.minecraft.client.gui.components.events.AbstractContainerEventHandler;
 import net.minecraft.client.gui.components.events.GuiEventListener;
+import net.minecraft.client.renderer.GameRenderer;
+import net.minecraft.resources.ResourceLocation;
 import net.minecraft.util.Mth;
 
 public abstract class AbstractSelectionList<E extends AbstractSelectionList.Entry<E>> extends AbstractContainerEventHandler implements Widget {
+   public static final ResourceLocation WHITE_TEXTURE_LOCATION = new ResourceLocation("textures/misc/white.png");
    protected final Minecraft minecraft;
    protected final int itemHeight;
    private final List<E> children = new AbstractSelectionList.TrackedList();
    protected int width;
    protected int height;
@@ -164,15 +168,16 @@
       this.renderBackground(var1);
       int var5 = this.getScrollbarPosition();
       int var6 = var5 + 6;
       Tesselator var7 = Tesselator.getInstance();
       BufferBuilder var8 = var7.getBuilder();
+      RenderSystem.setShader(GameRenderer::getPositionTexColorShader);
       if (this.renderBackground) {
-         this.minecraft.getTextureManager().bind(GuiComponent.BACKGROUND_LOCATION);
-         RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
+         RenderSystem.setShaderTexture(0, GuiComponent.BACKGROUND_LOCATION);
+         RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
          float var9 = 32.0F;
-         var8.begin(7, DefaultVertexFormat.POSITION_TEX_COLOR);
+         var8.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION_TEX_COLOR);
          var8.vertex((double)this.x0, (double)this.y1, 0.0D).uv((float)this.x0 / 32.0F, (float)(this.y1 + (int)this.getScrollAmount()) / 32.0F).color(32, 32, 32, 255).endVertex();
          var8.vertex((double)this.x1, (double)this.y1, 0.0D).uv((float)this.x1 / 32.0F, (float)(this.y1 + (int)this.getScrollAmount()) / 32.0F).color(32, 32, 32, 255).endVertex();
          var8.vertex((double)this.x1, (double)this.y0, 0.0D).uv((float)this.x1 / 32.0F, (float)(this.y0 + (int)this.getScrollAmount()) / 32.0F).color(32, 32, 32, 255).endVertex();
          var8.vertex((double)this.x0, (double)this.y0, 0.0D).uv((float)this.x0 / 32.0F, (float)(this.y0 + (int)this.getScrollAmount()) / 32.0F).color(32, 32, 32, 255).endVertex();
          var7.end();
@@ -184,16 +189,17 @@
          this.renderHeader(var1, var14, var10, var7);
       }
 
       this.renderList(var1, var14, var10, var2, var3, var4);
       if (this.renderTopAndBottom) {
-         this.minecraft.getTextureManager().bind(GuiComponent.BACKGROUND_LOCATION);
+         RenderSystem.setShader(GameRenderer::getPositionTexColorShader);
+         RenderSystem.setShaderTexture(0, GuiComponent.BACKGROUND_LOCATION);
          RenderSystem.enableDepthTest();
          RenderSystem.depthFunc(519);
          float var11 = 32.0F;
          boolean var12 = true;
-         var8.begin(7, DefaultVertexFormat.POSITION_TEX_COLOR);
+         var8.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION_TEX_COLOR);
          var8.vertex((double)this.x0, (double)this.y0, -100.0D).uv(0.0F, (float)this.y0 / 32.0F).color(64, 64, 64, 255).endVertex();
          var8.vertex((double)(this.x0 + this.width), (double)this.y0, -100.0D).uv((float)this.width / 32.0F, (float)this.y0 / 32.0F).color(64, 64, 64, 255).endVertex();
          var8.vertex((double)(this.x0 + this.width), 0.0D, -100.0D).uv((float)this.width / 32.0F, 0.0F).color(64, 64, 64, 255).endVertex();
          var8.vertex((double)this.x0, 0.0D, -100.0D).uv(0.0F, 0.0F).color(64, 64, 64, 255).endVertex();
          var8.vertex((double)this.x0, (double)this.height, -100.0D).uv(0.0F, (float)this.height / 32.0F).color(64, 64, 64, 255).endVertex();
@@ -203,56 +209,54 @@
          var7.end();
          RenderSystem.depthFunc(515);
          RenderSystem.disableDepthTest();
          RenderSystem.enableBlend();
          RenderSystem.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ZERO, GlStateManager.DestFactor.ONE);
-         RenderSystem.disableAlphaTest();
-         RenderSystem.shadeModel(7425);
          RenderSystem.disableTexture();
+         RenderSystem.setShader(GameRenderer::getPositionColorShader);
          boolean var13 = true;
-         var8.begin(7, DefaultVertexFormat.POSITION_TEX_COLOR);
-         var8.vertex((double)this.x0, (double)(this.y0 + 4), 0.0D).uv(0.0F, 1.0F).color(0, 0, 0, 0).endVertex();
-         var8.vertex((double)this.x1, (double)(this.y0 + 4), 0.0D).uv(1.0F, 1.0F).color(0, 0, 0, 0).endVertex();
-         var8.vertex((double)this.x1, (double)this.y0, 0.0D).uv(1.0F, 0.0F).color(0, 0, 0, 255).endVertex();
-         var8.vertex((double)this.x0, (double)this.y0, 0.0D).uv(0.0F, 0.0F).color(0, 0, 0, 255).endVertex();
-         var8.vertex((double)this.x0, (double)this.y1, 0.0D).uv(0.0F, 1.0F).color(0, 0, 0, 255).endVertex();
-         var8.vertex((double)this.x1, (double)this.y1, 0.0D).uv(1.0F, 1.0F).color(0, 0, 0, 255).endVertex();
-         var8.vertex((double)this.x1, (double)(this.y1 - 4), 0.0D).uv(1.0F, 0.0F).color(0, 0, 0, 0).endVertex();
-         var8.vertex((double)this.x0, (double)(this.y1 - 4), 0.0D).uv(0.0F, 0.0F).color(0, 0, 0, 0).endVertex();
+         var8.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION_COLOR);
+         var8.vertex((double)this.x0, (double)(this.y0 + 4), 0.0D).color(0, 0, 0, 0).endVertex();
+         var8.vertex((double)this.x1, (double)(this.y0 + 4), 0.0D).color(0, 0, 0, 0).endVertex();
+         var8.vertex((double)this.x1, (double)this.y0, 0.0D).color(0, 0, 0, 255).endVertex();
+         var8.vertex((double)this.x0, (double)this.y0, 0.0D).color(0, 0, 0, 255).endVertex();
+         var8.vertex((double)this.x0, (double)this.y1, 0.0D).color(0, 0, 0, 255).endVertex();
+         var8.vertex((double)this.x1, (double)this.y1, 0.0D).color(0, 0, 0, 255).endVertex();
+         var8.vertex((double)this.x1, (double)(this.y1 - 4), 0.0D).color(0, 0, 0, 0).endVertex();
+         var8.vertex((double)this.x0, (double)(this.y1 - 4), 0.0D).color(0, 0, 0, 0).endVertex();
          var7.end();
       }
 
       int var15 = this.getMaxScroll();
       if (var15 > 0) {
          RenderSystem.disableTexture();
+         RenderSystem.setShader(GameRenderer::getPositionColorShader);
          int var16 = (int)((float)((this.y1 - this.y0) * (this.y1 - this.y0)) / (float)this.getMaxPosition());
-         var16 = Mth.clamp(var16, 32, this.y1 - this.y0 - 8);
+         var16 = Mth.clamp((int)var16, (int)32, (int)(this.y1 - this.y0 - 8));
          int var17 = (int)this.getScrollAmount() * (this.y1 - this.y0 - var16) / var15 + this.y0;
          if (var17 < this.y0) {
             var17 = this.y0;
          }
 
-         var8.begin(7, DefaultVertexFormat.POSITION_TEX_COLOR);
-         var8.vertex((double)var5, (double)this.y1, 0.0D).uv(0.0F, 1.0F).color(0, 0, 0, 255).endVertex();
-         var8.vertex((double)var6, (double)this.y1, 0.0D).uv(1.0F, 1.0F).color(0, 0, 0, 255).endVertex();
-         var8.vertex((double)var6, (double)this.y0, 0.0D).uv(1.0F, 0.0F).color(0, 0, 0, 255).endVertex();
-         var8.vertex((double)var5, (double)this.y0, 0.0D).uv(0.0F, 0.0F).color(0, 0, 0, 255).endVertex();
-         var8.vertex((double)var5, (double)(var17 + var16), 0.0D).uv(0.0F, 1.0F).color(128, 128, 128, 255).endVertex();
-         var8.vertex((double)var6, (double)(var17 + var16), 0.0D).uv(1.0F, 1.0F).color(128, 128, 128, 255).endVertex();
-         var8.vertex((double)var6, (double)var17, 0.0D).uv(1.0F, 0.0F).color(128, 128, 128, 255).endVertex();
-         var8.vertex((double)var5, (double)var17, 0.0D).uv(0.0F, 0.0F).color(128, 128, 128, 255).endVertex();
-         var8.vertex((double)var5, (double)(var17 + var16 - 1), 0.0D).uv(0.0F, 1.0F).color(192, 192, 192, 255).endVertex();
-         var8.vertex((double)(var6 - 1), (double)(var17 + var16 - 1), 0.0D).uv(1.0F, 1.0F).color(192, 192, 192, 255).endVertex();
-         var8.vertex((double)(var6 - 1), (double)var17, 0.0D).uv(1.0F, 0.0F).color(192, 192, 192, 255).endVertex();
-         var8.vertex((double)var5, (double)var17, 0.0D).uv(0.0F, 0.0F).color(192, 192, 192, 255).endVertex();
+         var8.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION_COLOR);
+         var8.vertex((double)var5, (double)this.y1, 0.0D).color(0, 0, 0, 255).endVertex();
+         var8.vertex((double)var6, (double)this.y1, 0.0D).color(0, 0, 0, 255).endVertex();
+         var8.vertex((double)var6, (double)this.y0, 0.0D).color(0, 0, 0, 255).endVertex();
+         var8.vertex((double)var5, (double)this.y0, 0.0D).color(0, 0, 0, 255).endVertex();
+         var8.vertex((double)var5, (double)(var17 + var16), 0.0D).color(128, 128, 128, 255).endVertex();
+         var8.vertex((double)var6, (double)(var17 + var16), 0.0D).color(128, 128, 128, 255).endVertex();
+         var8.vertex((double)var6, (double)var17, 0.0D).color(128, 128, 128, 255).endVertex();
+         var8.vertex((double)var5, (double)var17, 0.0D).color(128, 128, 128, 255).endVertex();
+         var8.vertex((double)var5, (double)(var17 + var16 - 1), 0.0D).color(192, 192, 192, 255).endVertex();
+         var8.vertex((double)(var6 - 1), (double)(var17 + var16 - 1), 0.0D).color(192, 192, 192, 255).endVertex();
+         var8.vertex((double)(var6 - 1), (double)var17, 0.0D).color(192, 192, 192, 255).endVertex();
+         var8.vertex((double)var5, (double)var17, 0.0D).color(192, 192, 192, 255).endVertex();
          var7.end();
       }
 
       this.renderDecorations(var1, var2, var3);
       RenderSystem.enableTexture();
-      RenderSystem.shadeModel(7424);
-      RenderSystem.enableAlphaTest();
       RenderSystem.disableBlend();
    }
 
    protected void centerScrollOn(E var1) {
       this.setScrollAmount((double)(this.children().indexOf(var1) * this.itemHeight + this.itemHeight / 2 - (this.y1 - this.y0) / 2));
@@ -286,10 +290,14 @@
 
    public int getMaxScroll() {
       return Math.max(0, this.getMaxPosition() - (this.y1 - this.y0 - 4));
    }
 
+   public int getScrollBottom() {
+      return (int)this.getScrollAmount() - this.height - this.headerHeight;
+   }
+
    protected void updateScrollingState(double var1, double var3, int var5) {
       this.scrolling = var5 == 0 && var1 >= (double)this.getScrollbarPosition() && var1 < (double)(this.getScrollbarPosition() + 6);
    }
 
    protected int getScrollbarPosition() {
@@ -334,11 +342,11 @@
          } else if (var3 > (double)this.y1) {
             this.setScrollAmount((double)this.getMaxScroll());
          } else {
             double var10 = (double)Math.max(1, this.getMaxScroll());
             int var12 = this.y1 - this.y0;
-            int var13 = Mth.clamp((int)((float)(var12 * var12) / (float)this.getMaxPosition()), 32, var12 - 8);
+            int var13 = Mth.clamp((int)((int)((float)(var12 * var12) / (float)this.getMaxPosition())), (int)32, (int)(var12 - 8));
             double var14 = Math.max(1.0D, var10 / (double)(var12 - var13));
             this.setScrollAmount(this.getScrollAmount() + var8 * var14);
          }
 
          return true;
@@ -385,11 +393,11 @@
       int var3 = var1 == AbstractSelectionList.SelectionDirection.UP ? -1 : 1;
       if (!this.children().isEmpty()) {
          int var4 = this.children().indexOf(this.getSelected());
 
          while(true) {
-            int var5 = Mth.clamp(var4 + var3, 0, this.getItemCount() - 1);
+            int var5 = Mth.clamp((int)(var4 + var3), (int)0, (int)(this.getItemCount() - 1));
             if (var4 == var5) {
                break;
             }
 
             AbstractSelectionList.Entry var6 = (AbstractSelectionList.Entry)this.children().get(var5);
@@ -425,20 +433,21 @@
             int var17;
             if (this.renderSelection && this.isSelectedItem(var10)) {
                var17 = this.x0 + this.width / 2 - var16 / 2;
                int var18 = this.x0 + this.width / 2 + var16 / 2;
                RenderSystem.disableTexture();
+               RenderSystem.setShader(GameRenderer::getPositionShader);
                float var19 = this.isFocused() ? 1.0F : 0.5F;
-               RenderSystem.color4f(var19, var19, var19, 1.0F);
-               var9.begin(7, DefaultVertexFormat.POSITION);
+               RenderSystem.setShaderColor(var19, var19, var19, 1.0F);
+               var9.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION);
                var9.vertex((double)var17, (double)(var13 + var14 + 2), 0.0D).endVertex();
                var9.vertex((double)var18, (double)(var13 + var14 + 2), 0.0D).endVertex();
                var9.vertex((double)var18, (double)(var13 - 2), 0.0D).endVertex();
                var9.vertex((double)var17, (double)(var13 - 2), 0.0D).endVertex();
                var8.end();
-               RenderSystem.color4f(0.0F, 0.0F, 0.0F, 1.0F);
-               var9.begin(7, DefaultVertexFormat.POSITION);
+               RenderSystem.setShaderColor(0.0F, 0.0F, 0.0F, 1.0F);
+               var9.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION);
                var9.vertex((double)(var17 + 1), (double)(var13 + var14 + 1), 0.0D).endVertex();
                var9.vertex((double)(var18 - 1), (double)(var13 + var14 + 1), 0.0D).endVertex();
                var9.vertex((double)(var18 - 1), (double)(var13 - 1), 0.0D).endVertex();
                var9.vertex((double)(var17 + 1), (double)(var13 - 1), 0.0D).endVertex();
                var8.end();
