--- net/minecraft/client/gui/components/CommandSuggestions.java
+++ net/minecraft/client/gui/components/CommandSuggestions.java
@@ -20,10 +20,11 @@
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Map.Entry;
 import java.util.concurrent.CompletableFuture;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 import java.util.stream.Stream;
@@ -33,11 +34,10 @@
 import net.minecraft.client.gui.Font;
 import net.minecraft.client.gui.GuiComponent;
 import net.minecraft.client.gui.chat.NarratorChatListener;
 import net.minecraft.client.gui.screens.Screen;
 import net.minecraft.client.renderer.Rect2i;
-import net.minecraft.client.resources.language.I18n;
 import net.minecraft.commands.Commands;
 import net.minecraft.commands.SharedSuggestionProvider;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.ComponentUtils;
 import net.minecraft.network.chat.Style;
@@ -49,28 +49,31 @@
 public class CommandSuggestions {
    private static final Pattern WHITESPACE_PATTERN = Pattern.compile("(\\s+)");
    private static final Style UNPARSED_STYLE;
    private static final Style LITERAL_STYLE;
    private static final List<Style> ARGUMENT_STYLES;
-   private final Minecraft minecraft;
-   private final Screen screen;
-   private final EditBox input;
-   private final Font font;
+   final Minecraft minecraft;
+   final Screen screen;
+   final EditBox input;
+   final Font font;
    private final boolean commandsOnly;
    private final boolean onlyShowIfCursorPastError;
-   private final int lineStartOffset;
-   private final int suggestionLineLimit;
-   private final boolean anchorToBottom;
-   private final int fillColor;
+   final int lineStartOffset;
+   final int suggestionLineLimit;
+   final boolean anchorToBottom;
+   final int fillColor;
    private final List<FormattedCharSequence> commandUsage = Lists.newArrayList();
    private int commandUsagePosition;
    private int commandUsageWidth;
+   @Nullable
    private ParseResults<SharedSuggestionProvider> currentParse;
+   @Nullable
    private CompletableFuture<Suggestions> pendingSuggestions;
-   private CommandSuggestions.SuggestionsList suggestions;
+   @Nullable
+   CommandSuggestions.SuggestionsList suggestions;
    private boolean allowSuggestions;
-   private boolean keepSuggestions;
+   boolean keepSuggestions;
 
    public CommandSuggestions(Minecraft var1, Screen var2, EditBox var3, Font var4, boolean var5, boolean var6, int var7, int var8, boolean var9, int var10) {
       this.minecraft = var1;
       this.screen = var2;
       this.input = var3;
@@ -120,11 +123,11 @@
             Suggestion var5;
             for(Iterator var4 = var2.getList().iterator(); var4.hasNext(); var3 = Math.max(var3, this.font.width(var5.getText()))) {
                var5 = (Suggestion)var4.next();
             }
 
-            int var6 = Mth.clamp(this.input.getScreenX(var2.getRange().getStart()), 0, this.input.getScreenX(0) + this.input.getInnerWidth() - var3);
+            int var6 = Mth.clamp((int)this.input.getScreenX(var2.getRange().getStart()), (int)0, (int)(this.input.getScreenX(0) + this.input.getInnerWidth() - var3));
             int var7 = this.anchorToBottom ? this.screen.height - 12 : 72;
             this.suggestions = new CommandSuggestions.SuggestionsList(var6, var7, var3, this.sortSuggestions(var2), var1);
          }
       }
 
@@ -271,22 +274,22 @@
          }
       }
 
       if (!var5.isEmpty()) {
          this.commandUsage.addAll(var5);
-         this.commandUsagePosition = Mth.clamp(this.input.getScreenX(var3.startPos), 0, this.input.getScreenX(0) + this.input.getInnerWidth() - var6);
+         this.commandUsagePosition = Mth.clamp((int)this.input.getScreenX(var3.startPos), (int)0, (int)(this.input.getScreenX(0) + this.input.getInnerWidth() - var6));
          this.commandUsageWidth = var6;
       }
 
    }
 
    private FormattedCharSequence formatChat(String var1, int var2) {
       return this.currentParse != null ? formatText(this.currentParse, var1, var2) : FormattedCharSequence.forward(var1, Style.EMPTY);
    }
 
    @Nullable
-   private static String calculateSuggestionSuffix(String var0, String var1) {
+   static String calculateSuggestionSuffix(String var0, String var1) {
       return var1.startsWith(var0) ? var1.substring(var0.length()) : null;
    }
 
    private static FormattedCharSequence formatText(ParseResults<SharedSuggestionProvider> var0, String var1, int var2) {
       ArrayList var3 = Lists.newArrayList();
@@ -324,11 +327,11 @@
             var4 = var12;
          }
       }
 
       var3.add(FormattedCharSequence.forward(var1.substring(var4), LITERAL_STYLE));
-      return FormattedCharSequence.composite(var3);
+      return FormattedCharSequence.composite((List)var3);
    }
 
    public void render(PoseStack var1, int var2, int var3) {
       if (this.suggestions != null) {
          this.suggestions.render(var1, var2, var3);
@@ -352,11 +355,11 @@
    static {
       UNPARSED_STYLE = Style.EMPTY.withColor(ChatFormatting.RED);
       LITERAL_STYLE = Style.EMPTY.withColor(ChatFormatting.GRAY);
       Stream var10000 = Stream.of(ChatFormatting.AQUA, ChatFormatting.YELLOW, ChatFormatting.GREEN, ChatFormatting.LIGHT_PURPLE, ChatFormatting.GOLD);
       Style var10001 = Style.EMPTY;
-      var10001.getClass();
+      Objects.requireNonNull(var10001);
       ARGUMENT_STYLES = (List)var10000.map(var10001::withColor).collect(ImmutableList.toImmutableList());
    }
 
    public class SuggestionsList {
       private final Rect2i rect;
@@ -366,11 +369,11 @@
       private int current;
       private Vec2 lastMouse;
       private boolean tabCycles;
       private int lastNarratedEntry;
 
-      private SuggestionsList(int var2, int var3, int var4, List<Suggestion> var5, boolean var6) {
+      SuggestionsList(int var2, int var3, int var4, List<Suggestion> var5, boolean var6) {
          this.lastMouse = Vec2.ZERO;
          int var7 = var2 - 1;
          int var8 = CommandSuggestions.this.anchorToBottom ? var3 - 3 - Math.min(var5.size(), CommandSuggestions.this.suggestionLineLimit) * 12 : var3;
          this.rect = new Rect2i(var7, var8, var4 + 1, Math.min(var5.size(), CommandSuggestions.this.suggestionLineLimit) * 12);
          this.originalContents = CommandSuggestions.this.input.getValue();
@@ -452,11 +455,11 @@
 
       public boolean mouseScrolled(double var1) {
          int var3 = (int)(CommandSuggestions.this.minecraft.mouseHandler.xpos() * (double)CommandSuggestions.this.minecraft.getWindow().getGuiScaledWidth() / (double)CommandSuggestions.this.minecraft.getWindow().getScreenWidth());
          int var4 = (int)(CommandSuggestions.this.minecraft.mouseHandler.ypos() * (double)CommandSuggestions.this.minecraft.getWindow().getGuiScaledHeight() / (double)CommandSuggestions.this.minecraft.getWindow().getScreenHeight());
          if (this.rect.contains(var3, var4)) {
-            this.offset = Mth.clamp((int)((double)this.offset - var1), 0, Math.max(this.suggestionList.size() - CommandSuggestions.this.suggestionLineLimit, 0));
+            this.offset = Mth.clamp((int)((int)((double)this.offset - var1)), (int)0, (int)Math.max(this.suggestionList.size() - CommandSuggestions.this.suggestionLineLimit, 0));
             return true;
          } else {
             return false;
          }
       }
@@ -488,13 +491,13 @@
       public void cycle(int var1) {
          this.select(this.current + var1);
          int var2 = this.offset;
          int var3 = this.offset + CommandSuggestions.this.suggestionLineLimit - 1;
          if (this.current < var2) {
-            this.offset = Mth.clamp(this.current, 0, Math.max(this.suggestionList.size() - CommandSuggestions.this.suggestionLineLimit, 0));
+            this.offset = Mth.clamp((int)this.current, (int)0, (int)Math.max(this.suggestionList.size() - CommandSuggestions.this.suggestionLineLimit, 0));
          } else if (this.current > var3) {
-            this.offset = Mth.clamp(this.current + CommandSuggestions.this.lineStartOffset - CommandSuggestions.this.suggestionLineLimit, 0, Math.max(this.suggestionList.size() - CommandSuggestions.this.suggestionLineLimit, 0));
+            this.offset = Mth.clamp((int)(this.current + CommandSuggestions.this.lineStartOffset - CommandSuggestions.this.suggestionLineLimit), (int)0, (int)Math.max(this.suggestionList.size() - CommandSuggestions.this.suggestionLineLimit, 0));
          }
 
       }
 
       public void select(int var1) {
@@ -507,11 +510,11 @@
             this.current -= this.suggestionList.size();
          }
 
          Suggestion var2 = (Suggestion)this.suggestionList.get(this.current);
          CommandSuggestions.this.input.setSuggestion(CommandSuggestions.calculateSuggestionSuffix(CommandSuggestions.this.input.getValue(), var2.apply(this.originalContents)));
-         if (NarratorChatListener.INSTANCE.isActive() && this.lastNarratedEntry != this.current) {
+         if (this.lastNarratedEntry != this.current) {
             NarratorChatListener.INSTANCE.sayNow(this.getNarrationMessage());
          }
 
       }
 
@@ -525,15 +528,15 @@
          this.select(this.current);
          CommandSuggestions.this.keepSuggestions = false;
          this.tabCycles = true;
       }
 
-      private String getNarrationMessage() {
+      Component getNarrationMessage() {
          this.lastNarratedEntry = this.current;
          Suggestion var1 = (Suggestion)this.suggestionList.get(this.current);
          Message var2 = var1.getTooltip();
-         return var2 != null ? I18n.get("narration.suggestion.tooltip", this.current + 1, this.suggestionList.size(), var1.getText(), var2.getString()) : I18n.get("narration.suggestion", this.current + 1, this.suggestionList.size(), var1.getText());
+         return var2 != null ? new TranslatableComponent("narration.suggestion.tooltip", new Object[]{this.current + 1, this.suggestionList.size(), var1.getText(), var2}) : new TranslatableComponent("narration.suggestion", new Object[]{this.current + 1, this.suggestionList.size(), var1.getText()});
       }
 
       public void hide() {
          CommandSuggestions.this.suggestions = null;
       }
