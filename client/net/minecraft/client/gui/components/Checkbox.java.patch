--- net/minecraft/client/gui/components/Checkbox.java
+++ net/minecraft/client/gui/components/Checkbox.java
@@ -3,16 +3,20 @@
 import com.mojang.blaze3d.platform.GlStateManager;
 import com.mojang.blaze3d.systems.RenderSystem;
 import com.mojang.blaze3d.vertex.PoseStack;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.Font;
+import net.minecraft.client.gui.narration.NarratedElementType;
+import net.minecraft.client.gui.narration.NarrationElementOutput;
 import net.minecraft.network.chat.Component;
+import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.util.Mth;
 
 public class Checkbox extends AbstractButton {
    private static final ResourceLocation TEXTURE = new ResourceLocation("textures/gui/checkbox.png");
+   private static final int TEXT_COLOR = 14737632;
    private boolean selected;
    private final boolean showLabel;
 
    public Checkbox(int var1, int var2, int var3, int var4, Component var5, boolean var6) {
       this(var1, var2, var3, var4, var5, var6, true);
@@ -30,16 +34,28 @@
 
    public boolean selected() {
       return this.selected;
    }
 
+   public void updateNarration(NarrationElementOutput var1) {
+      var1.add(NarratedElementType.TITLE, (Component)this.createNarrationMessage());
+      if (this.active) {
+         if (this.isFocused()) {
+            var1.add(NarratedElementType.USAGE, (Component)(new TranslatableComponent("narration.checkbox.usage.focused")));
+         } else {
+            var1.add(NarratedElementType.USAGE, (Component)(new TranslatableComponent("narration.checkbox.usage.hovered")));
+         }
+      }
+
+   }
+
    public void renderButton(PoseStack var1, int var2, int var3, float var4) {
       Minecraft var5 = Minecraft.getInstance();
-      var5.getTextureManager().bind(TEXTURE);
+      RenderSystem.setShaderTexture(0, TEXTURE);
       RenderSystem.enableDepthTest();
       Font var6 = var5.font;
-      RenderSystem.color4f(1.0F, 1.0F, 1.0F, this.alpha);
+      RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, this.alpha);
       RenderSystem.enableBlend();
       RenderSystem.defaultBlendFunc();
       RenderSystem.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
       blit(var1, this.x, this.y, this.isFocused() ? 20.0F : 0.0F, this.selected ? 20.0F : 0.0F, 20, this.height, 64, 64);
       this.renderBg(var1, var5, var2, var3);
