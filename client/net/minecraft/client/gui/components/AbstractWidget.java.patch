--- net/minecraft/client/gui/components/AbstractWidget.java
+++ net/minecraft/client/gui/components/AbstractWidget.java
@@ -1,38 +1,37 @@
 package net.minecraft.client.gui.components;
 
 import com.mojang.blaze3d.systems.RenderSystem;
 import com.mojang.blaze3d.vertex.PoseStack;
-import java.util.Objects;
-import net.minecraft.Util;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.Font;
 import net.minecraft.client.gui.GuiComponent;
-import net.minecraft.client.gui.chat.NarratorChatListener;
 import net.minecraft.client.gui.components.events.GuiEventListener;
+import net.minecraft.client.gui.narration.NarratableEntry;
+import net.minecraft.client.gui.narration.NarratedElementType;
+import net.minecraft.client.gui.narration.NarrationElementOutput;
+import net.minecraft.client.renderer.GameRenderer;
 import net.minecraft.client.resources.sounds.SimpleSoundInstance;
 import net.minecraft.client.sounds.SoundManager;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.MutableComponent;
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.util.Mth;
 
-public abstract class AbstractWidget extends GuiComponent implements Widget, GuiEventListener {
+public abstract class AbstractWidget extends GuiComponent implements Widget, GuiEventListener, NarratableEntry {
    public static final ResourceLocation WIDGETS_LOCATION = new ResourceLocation("textures/gui/widgets.png");
    protected int width;
    protected int height;
    public int x;
    public int y;
    private Component message;
-   private boolean wasHovered;
    protected boolean isHovered;
    public boolean active = true;
    public boolean visible = true;
    protected float alpha = 1.0F;
-   protected long nextNarration = Long.MAX_VALUE;
    private boolean focused;
 
    public AbstractWidget(int var1, int var2, int var3, int var4, Component var5) {
       this.x = var1;
       this.y = var2;
@@ -57,51 +56,28 @@
    }
 
    public void render(PoseStack var1, int var2, int var3, float var4) {
       if (this.visible) {
          this.isHovered = var2 >= this.x && var3 >= this.y && var2 < this.x + this.width && var3 < this.y + this.height;
-         if (this.wasHovered != this.isHovered()) {
-            if (this.isHovered()) {
-               if (this.focused) {
-                  this.queueNarration(200);
-               } else {
-                  this.queueNarration(750);
-               }
-            } else {
-               this.nextNarration = Long.MAX_VALUE;
-            }
-         }
-
-         if (this.visible) {
-            this.renderButton(var1, var2, var3, var4);
-         }
-
-         this.narrate();
-         this.wasHovered = this.isHovered();
+         this.renderButton(var1, var2, var3, var4);
       }
    }
 
-   protected void narrate() {
-      if (this.active && this.isHovered() && Util.getMillis() > this.nextNarration) {
-         String var1 = this.createNarrationMessage().getString();
-         if (!var1.isEmpty()) {
-            NarratorChatListener.INSTANCE.sayNow(var1);
-            this.nextNarration = Long.MAX_VALUE;
-         }
-      }
-
+   protected MutableComponent createNarrationMessage() {
+      return wrapDefaultNarrationMessage(this.getMessage());
    }
 
-   protected MutableComponent createNarrationMessage() {
-      return new TranslatableComponent("gui.narrate.button", new Object[]{this.getMessage()});
+   public static MutableComponent wrapDefaultNarrationMessage(Component var0) {
+      return new TranslatableComponent("gui.narrate.button", new Object[]{var0});
    }
 
    public void renderButton(PoseStack var1, int var2, int var3, float var4) {
       Minecraft var5 = Minecraft.getInstance();
       Font var6 = var5.font;
-      var5.getTextureManager().bind(WIDGETS_LOCATION);
-      RenderSystem.color4f(1.0F, 1.0F, 1.0F, this.alpha);
+      RenderSystem.setShader(GameRenderer::getPositionTexShader);
+      RenderSystem.setShaderTexture(0, WIDGETS_LOCATION);
+      RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, this.alpha);
       int var7 = this.getYImage(this.isHovered());
       RenderSystem.enableBlend();
       RenderSystem.defaultBlendFunc();
       RenderSystem.enableDepthTest();
       this.blit(var1, this.x, this.y, 0, 46 + var7 * 20, this.width / 2, this.height);
@@ -205,28 +181,44 @@
    public void setAlpha(float var1) {
       this.alpha = var1;
    }
 
    public void setMessage(Component var1) {
-      if (!Objects.equals(var1.getString(), this.message.getString())) {
-         this.queueNarration(250);
-      }
-
       this.message = var1;
    }
 
-   public void queueNarration(int var1) {
-      this.nextNarration = Util.getMillis() + (long)var1;
-   }
-
    public Component getMessage() {
       return this.message;
    }
 
    public boolean isFocused() {
       return this.focused;
    }
 
+   public boolean isActive() {
+      return this.visible && this.active;
+   }
+
    protected void setFocused(boolean var1) {
       this.focused = var1;
    }
+
+   public NarratableEntry.NarrationPriority narrationPriority() {
+      if (this.focused) {
+         return NarratableEntry.NarrationPriority.FOCUSED;
+      } else {
+         return this.isHovered ? NarratableEntry.NarrationPriority.HOVERED : NarratableEntry.NarrationPriority.NONE;
+      }
+   }
+
+   protected void defaultButtonNarrationText(NarrationElementOutput var1) {
+      var1.add(NarratedElementType.TITLE, (Component)this.createNarrationMessage());
+      if (this.active) {
+         if (this.isFocused()) {
+            var1.add(NarratedElementType.USAGE, (Component)(new TranslatableComponent("narration.button.usage.focused")));
+         } else {
+            var1.add(NarratedElementType.USAGE, (Component)(new TranslatableComponent("narration.button.usage.hovered")));
+         }
+      }
+
+   }
 }
