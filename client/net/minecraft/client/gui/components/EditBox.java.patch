--- net/minecraft/client/gui/components/EditBox.java
+++ net/minecraft/client/gui/components/EditBox.java
@@ -4,10 +4,11 @@
 import com.mojang.blaze3d.systems.RenderSystem;
 import com.mojang.blaze3d.vertex.BufferBuilder;
 import com.mojang.blaze3d.vertex.DefaultVertexFormat;
 import com.mojang.blaze3d.vertex.PoseStack;
 import com.mojang.blaze3d.vertex.Tesselator;
+import com.mojang.blaze3d.vertex.VertexFormat;
 import java.util.Objects;
 import java.util.function.BiFunction;
 import java.util.function.Consumer;
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
@@ -15,19 +16,31 @@
 import net.minecraft.Util;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.Font;
 import net.minecraft.client.gui.GuiComponent;
 import net.minecraft.client.gui.components.events.GuiEventListener;
+import net.minecraft.client.gui.narration.NarratedElementType;
+import net.minecraft.client.gui.narration.NarrationElementOutput;
 import net.minecraft.client.gui.screens.Screen;
+import net.minecraft.client.renderer.GameRenderer;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.MutableComponent;
 import net.minecraft.network.chat.Style;
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.util.FormattedCharSequence;
 import net.minecraft.util.Mth;
 
 public class EditBox extends AbstractWidget implements Widget, GuiEventListener {
+   public static final int BACKWARDS = -1;
+   public static final int FORWARDS = 1;
+   private static final int CURSOR_INSERT_WIDTH = 1;
+   private static final int CURSOR_INSERT_COLOR = -3092272;
+   private static final String CURSOR_APPEND_CHARACTER = "_";
+   public static final int DEFAULT_TEXT_COLOR = 14737632;
+   private static final int BORDER_COLOR_FOCUSED = -1;
+   private static final int BORDER_COLOR = -6250336;
+   private static final int BACKGROUND_COLOR = -16777216;
    private final Font font;
    private String value;
    private int maxLength;
    private int frame;
    private boolean bordered;
@@ -37,11 +50,13 @@
    private int displayPos;
    private int cursorPos;
    private int highlightPos;
    private int textColor;
    private int textColorUneditable;
+   @Nullable
    private String suggestion;
+   @Nullable
    private Consumer<String> responder;
    private Predicate<String> filter;
    private BiFunction<String, Integer, FormattedCharSequence> formatter;
 
    public EditBox(Font var1, int var2, int var3, int var4, int var5, Component var6) {
@@ -102,22 +117,22 @@
    public String getValue() {
       return this.value;
    }
 
    public String getHighlighted() {
-      int var1 = this.cursorPos < this.highlightPos ? this.cursorPos : this.highlightPos;
-      int var2 = this.cursorPos < this.highlightPos ? this.highlightPos : this.cursorPos;
+      int var1 = Math.min(this.cursorPos, this.highlightPos);
+      int var2 = Math.max(this.cursorPos, this.highlightPos);
       return this.value.substring(var1, var2);
    }
 
    public void setFilter(Predicate<String> var1) {
       this.filter = var1;
    }
 
    public void insertText(String var1) {
-      int var2 = this.cursorPos < this.highlightPos ? this.cursorPos : this.highlightPos;
-      int var3 = this.cursorPos < this.highlightPos ? this.highlightPos : this.cursorPos;
+      int var2 = Math.min(this.cursorPos, this.highlightPos);
+      int var3 = Math.max(this.cursorPos, this.highlightPos);
       int var4 = this.maxLength - this.value.length() - (var2 - var3);
       String var5 = SharedConstants.filterText(var1);
       int var6 = var5.length();
       if (var4 < var6) {
          var5 = var5.substring(0, var4);
@@ -136,11 +151,10 @@
    private void onValueChange(String var1) {
       if (this.responder != null) {
          this.responder.accept(var1);
       }
 
-      this.nextNarration = Util.getMillis() + 500L;
    }
 
    private void deleteText(int var1) {
       if (Screen.hasControlDown()) {
          this.deleteWords(var1);
@@ -233,11 +247,11 @@
 
       this.onValueChange(this.value);
    }
 
    public void setCursorPosition(int var1) {
-      this.cursorPos = Mth.clamp(var1, 0, this.value.length());
+      this.cursorPos = Mth.clamp((int)var1, (int)0, (int)this.value.length());
    }
 
    public void moveCursorToStart() {
       this.moveCursorTo(0);
    }
@@ -364,11 +378,11 @@
          }
       }
    }
 
    public void setFocus(boolean var1) {
-      super.setFocused(var1);
+      this.setFocused(var1);
    }
 
    public void renderButton(PoseStack var1, int var2, int var3, float var4) {
       if (this.isVisible()) {
          int var5;
@@ -419,11 +433,11 @@
          if (var10) {
             if (var17) {
                var10002 = var12 - 1;
                var10003 = var15 + 1;
                var10004 = var12 + 1;
-               this.font.getClass();
+               Objects.requireNonNull(this.font);
                GuiComponent.fill(var1, var15, var10002, var10003, var10004 + 9, -3092272);
             } else {
                this.font.drawShadow(var1, "_", (float)var15, (float)var12, var5);
             }
          }
@@ -431,11 +445,11 @@
          if (var7 != var6) {
             int var16 = var11 + this.font.width(var8.substring(0, var7));
             var10002 = var12 - 1;
             var10003 = var16 - 1;
             var10004 = var12 + 1;
-            this.font.getClass();
+            Objects.requireNonNull(this.font);
             this.renderHighlight(var15, var10002, var10003, var10004 + 9);
          }
 
       }
    }
@@ -462,20 +476,22 @@
          var1 = this.x + this.width;
       }
 
       Tesselator var7 = Tesselator.getInstance();
       BufferBuilder var6 = var7.getBuilder();
-      RenderSystem.color4f(0.0F, 0.0F, 255.0F, 255.0F);
+      RenderSystem.setShader(GameRenderer::getPositionShader);
+      RenderSystem.setShaderColor(0.0F, 0.0F, 1.0F, 1.0F);
       RenderSystem.disableTexture();
       RenderSystem.enableColorLogicOp();
       RenderSystem.logicOp(GlStateManager.LogicOp.OR_REVERSE);
-      var6.begin(7, DefaultVertexFormat.POSITION);
+      var6.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION);
       var6.vertex((double)var1, (double)var4, 0.0D).endVertex();
       var6.vertex((double)var3, (double)var4, 0.0D).endVertex();
       var6.vertex((double)var3, (double)var2, 0.0D).endVertex();
       var6.vertex((double)var1, (double)var2, 0.0D).endVertex();
       var7.end();
+      RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
       RenderSystem.disableColorLogicOp();
       RenderSystem.enableTexture();
    }
 
    public void setMaxLength(int var1) {
@@ -538,11 +554,11 @@
       return this.isBordered() ? this.width - 8 : this.width;
    }
 
    public void setHighlightPos(int var1) {
       int var2 = this.value.length();
-      this.highlightPos = Mth.clamp(var1, 0, var2);
+      this.highlightPos = Mth.clamp((int)var1, (int)0, (int)var2);
       if (this.font != null) {
          if (this.displayPos > var2) {
             this.displayPos = var2;
          }
 
@@ -557,11 +573,11 @@
             this.displayPos += this.highlightPos - var5;
          } else if (this.highlightPos <= this.displayPos) {
             this.displayPos -= this.displayPos - this.highlightPos;
          }
 
-         this.displayPos = Mth.clamp(this.displayPos, 0, var2);
+         this.displayPos = Mth.clamp((int)this.displayPos, (int)0, (int)var2);
       }
 
    }
 
    public void setCanLoseFocus(boolean var1) {
@@ -585,6 +601,10 @@
    }
 
    public void setX(int var1) {
       this.x = var1;
    }
+
+   public void updateNarration(NarrationElementOutput var1) {
+      var1.add(NarratedElementType.TITLE, (Component)(new TranslatableComponent("narration.edit_box", new Object[]{this.getValue()})));
+   }
 }
