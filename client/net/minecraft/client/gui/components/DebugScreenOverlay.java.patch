--- net/minecraft/client/gui/components/DebugScreenOverlay.java
+++ net/minecraft/client/gui/components/DebugScreenOverlay.java
@@ -8,10 +8,11 @@
 import com.mojang.blaze3d.vertex.BufferBuilder;
 import com.mojang.blaze3d.vertex.BufferUploader;
 import com.mojang.blaze3d.vertex.DefaultVertexFormat;
 import com.mojang.blaze3d.vertex.PoseStack;
 import com.mojang.blaze3d.vertex.Tesselator;
+import com.mojang.blaze3d.vertex.VertexFormat;
 import com.mojang.datafixers.DataFixUtils;
 import com.mojang.math.Matrix4f;
 import com.mojang.math.Transformation;
 import it.unimi.dsi.fastutil.longs.LongSet;
 import it.unimi.dsi.fastutil.longs.LongSets;
@@ -34,15 +35,17 @@
 import net.minecraft.Util;
 import net.minecraft.client.ClientBrandRetriever;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.Font;
 import net.minecraft.client.gui.GuiComponent;
+import net.minecraft.client.renderer.GameRenderer;
 import net.minecraft.client.renderer.PostChain;
 import net.minecraft.client.server.IntegratedServer;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.Registry;
+import net.minecraft.core.SectionPos;
 import net.minecraft.network.Connection;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.util.FrameTimer;
 import net.minecraft.util.Mth;
@@ -51,21 +54,25 @@
 import net.minecraft.world.entity.MobCategory;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LightLayer;
 import net.minecraft.world.level.NaturalSpawner;
+import net.minecraft.world.level.biome.Biome;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.properties.Property;
 import net.minecraft.world.level.chunk.ChunkStatus;
 import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.levelgen.Heightmap;
-import net.minecraft.world.level.lighting.LevelLightEngine;
 import net.minecraft.world.level.material.FluidState;
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.HitResult;
 
 public class DebugScreenOverlay extends GuiComponent {
+   private static final int COLOR_GREY = 14737632;
+   private static final int MARGIN_RIGHT = 2;
+   private static final int MARGIN_LEFT = 2;
+   private static final int MARGIN_TOP = 2;
    private static final Map<Heightmap.Types, String> HEIGHTMAP_NAMES = (Map)Util.make(new EnumMap(Heightmap.Types.class), (var0) -> {
       var0.put(Heightmap.Types.WORLD_SURFACE_WG, "SW");
       var0.put(Heightmap.Types.WORLD_SURFACE, "S");
       var0.put(Heightmap.Types.OCEAN_FLOOR_WG, "OW");
       var0.put(Heightmap.Types.OCEAN_FLOOR, "O");
@@ -80,10 +87,13 @@
    private ChunkPos lastPos;
    @Nullable
    private LevelChunk clientChunk;
    @Nullable
    private CompletableFuture<LevelChunk> serverChunk;
+   private static final int RED = -65536;
+   private static final int YELLOW = -256;
+   private static final int GREEN = -16711936;
 
    public DebugScreenOverlay(Minecraft var1) {
       this.minecraft = var1;
       this.font = var1.font;
    }
@@ -93,17 +103,15 @@
       this.clientChunk = null;
    }
 
    public void render(PoseStack var1) {
       this.minecraft.getProfiler().push("debug");
-      RenderSystem.pushMatrix();
       Entity var2 = this.minecraft.getCameraEntity();
       this.block = var2.pick(20.0D, 0.0F, false);
       this.liquid = var2.pick(20.0D, 0.0F, true);
       this.drawGameInformation(var1);
       this.drawSystemInformation(var1);
-      RenderSystem.popMatrix();
       if (this.minecraft.options.renderFpsChart) {
          int var3 = this.minecraft.getWindow().getGuiScaledWidth();
          this.drawChart(var1, this.minecraft.getFrameTimer(), 0, var3 / 2, true);
          IntegratedServer var4 = this.minecraft.getSingleplayerServer();
          if (var4 != null) {
@@ -116,17 +124,18 @@
 
    protected void drawGameInformation(PoseStack var1) {
       List var2 = this.getGameInformation();
       var2.add("");
       boolean var3 = this.minecraft.getSingleplayerServer() != null;
-      var2.add("Debug: Pie [shift]: " + (this.minecraft.options.renderDebugCharts ? "visible" : "hidden") + (var3 ? " FPS + TPS" : " FPS") + " [alt]: " + (this.minecraft.options.renderFpsChart ? "visible" : "hidden"));
+      String var10001 = this.minecraft.options.renderDebugCharts ? "visible" : "hidden";
+      var2.add("Debug: Pie [shift]: " + var10001 + (var3 ? " FPS + TPS" : " FPS") + " [alt]: " + (this.minecraft.options.renderFpsChart ? "visible" : "hidden"));
       var2.add("For help: press F3 + Q");
 
       for(int var4 = 0; var4 < var2.size(); ++var4) {
          String var5 = (String)var2.get(var4);
          if (!Strings.isNullOrEmpty(var5)) {
-            this.font.getClass();
+            Objects.requireNonNull(this.font);
             byte var6 = 9;
             int var7 = this.font.width(var5);
             boolean var8 = true;
             int var9 = 2 + var6 * var4;
             fill(var1, 1, var9 - 1, 2 + var7 + 1, var9 + var6 - 1, -1873784752);
@@ -140,11 +149,11 @@
       List var2 = this.getSystemInformation();
 
       for(int var3 = 0; var3 < var2.size(); ++var3) {
          String var4 = (String)var2.get(var3);
          if (!Strings.isNullOrEmpty(var4)) {
-            this.font.getClass();
+            Objects.requireNonNull(this.font);
             byte var5 = 9;
             int var6 = this.font.width(var4);
             int var7 = this.minecraft.getWindow().getGuiScaledWidth() - 2 - var6;
             int var8 = 2 + var5 * var3;
             fill(var1, var7 - 1, var8 - 1, var7 + var6 + 1, var8 + var5 - 1, -1873784752);
@@ -165,12 +174,26 @@
       } else {
          var1 = String.format("\"%s\" server, %.0f tx, %.0f rx", this.minecraft.player.getServerBrand(), var4, var5);
       }
 
       BlockPos var6 = this.minecraft.getCameraEntity().blockPosition();
+      String[] var10000;
+      String var10003;
       if (this.minecraft.showOnlyReducedInfo()) {
-         return Lists.newArrayList(new String[]{"Minecraft " + SharedConstants.getCurrentVersion().getName() + " (" + this.minecraft.getLaunchedVersion() + "/" + ClientBrandRetriever.getClientModName() + ")", this.minecraft.fpsString, var1, this.minecraft.levelRenderer.getChunkStatistics(), this.minecraft.levelRenderer.getEntityStatistics(), "P: " + this.minecraft.particleEngine.countParticles() + ". T: " + this.minecraft.level.getEntityCount(), this.minecraft.level.gatherChunkSourceStats(), "", String.format("Chunk-relative: %d %d %d", var6.getX() & 15, var6.getY() & 15, var6.getZ() & 15)});
+         var10000 = new String[9];
+         var10003 = SharedConstants.getCurrentVersion().getName();
+         var10000[0] = "Minecraft " + var10003 + " (" + this.minecraft.getLaunchedVersion() + "/" + ClientBrandRetriever.getClientModName() + ")";
+         var10000[1] = this.minecraft.fpsString;
+         var10000[2] = var1;
+         var10000[3] = this.minecraft.levelRenderer.getChunkStatistics();
+         var10000[4] = this.minecraft.levelRenderer.getEntityStatistics();
+         var10003 = this.minecraft.particleEngine.countParticles();
+         var10000[5] = "P: " + var10003 + ". T: " + this.minecraft.level.getEntityCount();
+         var10000[6] = this.minecraft.level.gatherChunkSourceStats();
+         var10000[7] = "";
+         var10000[8] = String.format("Chunk-relative: %d %d %d", var6.getX() & 15, var6.getY() & 15, var6.getZ() & 15);
+         return Lists.newArrayList(var10000);
       } else {
          Entity var7 = this.minecraft.getCameraEntity();
          Direction var8 = var7.getDirection();
          String var9;
          switch(var8) {
@@ -196,113 +219,112 @@
             this.clearChunkCache();
          }
 
          Level var11 = this.getLevel();
          Object var12 = var11 instanceof ServerLevel ? ((ServerLevel)var11).getForcedChunks() : LongSets.EMPTY_SET;
-         ArrayList var13 = Lists.newArrayList(new String[]{"Minecraft " + SharedConstants.getCurrentVersion().getName() + " (" + this.minecraft.getLaunchedVersion() + "/" + ClientBrandRetriever.getClientModName() + ("release".equalsIgnoreCase(this.minecraft.getVersionType()) ? "" : "/" + this.minecraft.getVersionType()) + ")", this.minecraft.fpsString, var1, this.minecraft.levelRenderer.getChunkStatistics(), this.minecraft.levelRenderer.getEntityStatistics(), "P: " + this.minecraft.particleEngine.countParticles() + ". T: " + this.minecraft.level.getEntityCount(), this.minecraft.level.gatherChunkSourceStats()});
+         var10000 = new String[7];
+         var10003 = SharedConstants.getCurrentVersion().getName();
+         var10000[0] = "Minecraft " + var10003 + " (" + this.minecraft.getLaunchedVersion() + "/" + ClientBrandRetriever.getClientModName() + ("release".equalsIgnoreCase(this.minecraft.getVersionType()) ? "" : "/" + this.minecraft.getVersionType()) + ")";
+         var10000[1] = this.minecraft.fpsString;
+         var10000[2] = var1;
+         var10000[3] = this.minecraft.levelRenderer.getChunkStatistics();
+         var10000[4] = this.minecraft.levelRenderer.getEntityStatistics();
+         var10003 = this.minecraft.particleEngine.countParticles();
+         var10000[5] = "P: " + var10003 + ". T: " + this.minecraft.level.getEntityCount();
+         var10000[6] = this.minecraft.level.gatherChunkSourceStats();
+         ArrayList var13 = Lists.newArrayList(var10000);
          String var14 = this.getServerChunkStats();
          if (var14 != null) {
             var13.add(var14);
          }
 
-         var13.add(this.minecraft.level.dimension().location() + " FC: " + ((LongSet)var12).size());
+         ResourceLocation var10001 = this.minecraft.level.dimension().location();
+         var13.add(var10001 + " FC: " + ((LongSet)var12).size());
          var13.add("");
          var13.add(String.format(Locale.ROOT, "XYZ: %.3f / %.5f / %.3f", this.minecraft.getCameraEntity().getX(), this.minecraft.getCameraEntity().getY(), this.minecraft.getCameraEntity().getZ()));
          var13.add(String.format("Block: %d %d %d", var6.getX(), var6.getY(), var6.getZ()));
-         var13.add(String.format("Chunk: %d %d %d in %d %d %d", var6.getX() & 15, var6.getY() & 15, var6.getZ() & 15, var6.getX() >> 4, var6.getY() >> 4, var6.getZ() >> 4));
-         var13.add(String.format(Locale.ROOT, "Facing: %s (%s) (%.1f / %.1f)", var8, var9, Mth.wrapDegrees(var7.yRot), Mth.wrapDegrees(var7.xRot)));
-         int var18;
-         if (this.minecraft.level != null) {
-            if (this.minecraft.level.hasChunkAt(var6)) {
-               LevelChunk var15 = this.getClientChunk();
-               if (var15.isEmpty()) {
-                  var13.add("Waiting for chunk...");
-               } else {
-                  int var16 = this.minecraft.level.getChunkSource().getLightEngine().getRawBrightness(var6, 0);
-                  int var17 = this.minecraft.level.getBrightness(LightLayer.SKY, var6);
-                  var18 = this.minecraft.level.getBrightness(LightLayer.BLOCK, var6);
-                  var13.add("Client Light: " + var16 + " (" + var17 + " sky, " + var18 + " block)");
-                  LevelChunk var19 = this.getServerChunk();
-                  if (var19 != null) {
-                     LevelLightEngine var20 = var11.getChunkSource().getLightEngine();
-                     var13.add("Server Light: (" + var20.getLayerListener(LightLayer.SKY).getLightValue(var6) + " sky, " + var20.getLayerListener(LightLayer.BLOCK).getLightValue(var6) + " block)");
-                  } else {
-                     var13.add("Server Light: (?? sky, ?? block)");
-                  }
+         var13.add(String.format("Chunk: %d %d %d in %d %d %d", var6.getX() & 15, var6.getY() & 15, var6.getZ() & 15, SectionPos.blockToSectionCoord(var6.getX()), SectionPos.blockToSectionCoord(var6.getY()), SectionPos.blockToSectionCoord(var6.getZ())));
+         var13.add(String.format(Locale.ROOT, "Facing: %s (%s) (%.1f / %.1f)", var8, var9, Mth.wrapDegrees(var7.getYRot()), Mth.wrapDegrees(var7.getXRot())));
+         LevelChunk var15 = this.getClientChunk();
+         if (var15.isEmpty()) {
+            var13.add("Waiting for chunk...");
+         } else {
+            int var16 = this.minecraft.level.getChunkSource().getLightEngine().getRawBrightness(var6, 0);
+            int var17 = this.minecraft.level.getBrightness(LightLayer.SKY, var6);
+            int var18 = this.minecraft.level.getBrightness(LightLayer.BLOCK, var6);
+            var13.add("Client Light: " + var16 + " (" + var17 + " sky, " + var18 + " block)");
+            LevelChunk var19 = this.getServerChunk();
+            StringBuilder var20 = new StringBuilder("CH");
+            Heightmap.Types[] var21 = Heightmap.Types.values();
+            int var22 = var21.length;
 
-                  StringBuilder var29 = new StringBuilder("CH");
-                  Heightmap.Types[] var21 = Heightmap.Types.values();
-                  int var22 = var21.length;
+            int var23;
+            Heightmap.Types var24;
+            for(var23 = 0; var23 < var22; ++var23) {
+               var24 = var21[var23];
+               if (var24.sendToClient()) {
+                  var20.append(" ").append((String)HEIGHTMAP_NAMES.get(var24)).append(": ").append(var15.getHeight(var24, var6.getX(), var6.getZ()));
+               }
+            }
 
-                  int var23;
-                  Heightmap.Types var24;
-                  for(var23 = 0; var23 < var22; ++var23) {
-                     var24 = var21[var23];
-                     if (var24.sendToClient()) {
-                        var29.append(" ").append((String)HEIGHTMAP_NAMES.get(var24)).append(": ").append(var15.getHeight(var24, var6.getX(), var6.getZ()));
-                     }
-                  }
+            var13.add(var20.toString());
+            var20.setLength(0);
+            var20.append("SH");
+            var21 = Heightmap.Types.values();
+            var22 = var21.length;
 
-                  var13.add(var29.toString());
-                  var29.setLength(0);
-                  var29.append("SH");
-                  var21 = Heightmap.Types.values();
-                  var22 = var21.length;
-
-                  for(var23 = 0; var23 < var22; ++var23) {
-                     var24 = var21[var23];
-                     if (var24.keepAfterWorldgen()) {
-                        var29.append(" ").append((String)HEIGHTMAP_NAMES.get(var24)).append(": ");
-                        if (var19 != null) {
-                           var29.append(var19.getHeight(var24, var6.getX(), var6.getZ()));
-                        } else {
-                           var29.append("??");
-                        }
-                     }
+            for(var23 = 0; var23 < var22; ++var23) {
+               var24 = var21[var23];
+               if (var24.keepAfterWorldgen()) {
+                  var20.append(" ").append((String)HEIGHTMAP_NAMES.get(var24)).append(": ");
+                  if (var19 != null) {
+                     var20.append(var19.getHeight(var24, var6.getX(), var6.getZ()));
+                  } else {
+                     var20.append("??");
                   }
+               }
+            }
 
-                  var13.add(var29.toString());
-                  if (var6.getY() >= 0 && var6.getY() < 256) {
-                     var13.add("Biome: " + this.minecraft.level.registryAccess().registryOrThrow(Registry.BIOME_REGISTRY).getKey(this.minecraft.level.getBiome(var6)));
-                     long var30 = 0L;
-                     float var31 = 0.0F;
-                     if (var19 != null) {
-                        var31 = var11.getMoonBrightness();
-                        var30 = var19.getInhabitedTime();
-                     }
-
-                     DifficultyInstance var32 = new DifficultyInstance(var11.getDifficulty(), var11.getDayTime(), var30, var31);
-                     var13.add(String.format(Locale.ROOT, "Local Difficulty: %.2f // %.2f (Day %d)", var32.getEffectiveDifficulty(), var32.getSpecialMultiplier(), this.minecraft.level.getDayTime() / 24000L));
-                  }
+            var13.add(var20.toString());
+            if (var6.getY() >= this.minecraft.level.getMinBuildHeight() && var6.getY() < this.minecraft.level.getMaxBuildHeight()) {
+               Registry var27 = this.minecraft.level.registryAccess().registryOrThrow(Registry.BIOME_REGISTRY);
+               Biome var10002 = this.minecraft.level.getBiome(var6);
+               var13.add("Biome: " + var27.getKey(var10002));
+               long var32 = 0L;
+               float var33 = 0.0F;
+               if (var19 != null) {
+                  var33 = var11.getMoonBrightness();
+                  var32 = var19.getInhabitedTime();
                }
-            } else {
-               var13.add("Outside of world...");
+
+               DifficultyInstance var34 = new DifficultyInstance(var11.getDifficulty(), var11.getDayTime(), var32, var33);
+               var13.add(String.format(Locale.ROOT, "Local Difficulty: %.2f // %.2f (Day %d)", var34.getEffectiveDifficulty(), var34.getSpecialMultiplier(), this.minecraft.level.getDayTime() / 24000L));
             }
-         } else {
-            var13.add("Outside of world...");
          }
 
          ServerLevel var25 = this.getServerLevel();
          if (var25 != null) {
             NaturalSpawner.SpawnState var26 = var25.getChunkSource().getLastSpawnState();
             if (var26 != null) {
-               Object2IntMap var28 = var26.getMobCategoryCounts();
-               var18 = var26.getSpawnableChunkCount();
-               var13.add("SC: " + var18 + ", " + (String)Stream.of(MobCategory.values()).map((var1x) -> {
-                  return Character.toUpperCase(var1x.getName().charAt(0)) + ": " + var28.getInt(var1x);
+               Object2IntMap var30 = var26.getMobCategoryCounts();
+               int var31 = var26.getSpawnableChunkCount();
+               var13.add("SC: " + var31 + ", " + (String)Stream.of(MobCategory.values()).map((var1x) -> {
+                  char var10000 = Character.toUpperCase(var1x.getName().charAt(0));
+                  return var10000 + ": " + var30.getInt(var1x);
                }).collect(Collectors.joining(", ")));
             } else {
                var13.add("SC: N/A");
             }
          }
 
-         PostChain var27 = this.minecraft.gameRenderer.currentEffect();
-         if (var27 != null) {
-            var13.add("Shader: " + var27.getName());
+         PostChain var28 = this.minecraft.gameRenderer.currentEffect();
+         if (var28 != null) {
+            var13.add("Shader: " + var28.getName());
          }
 
-         var13.add(this.minecraft.getSoundManager().getDebugString() + String.format(" (Mood %d%%)", Math.round(this.minecraft.player.getCurrentMood() * 100.0F)));
+         String var29 = this.minecraft.getSoundManager().getDebugString();
+         var13.add(var29 + String.format(" (Mood %d%%)", Math.round(this.minecraft.player.getCurrentMood() * 100.0F)));
          return var13;
       }
    }
 
    @Nullable
@@ -364,25 +386,27 @@
       } else {
          BlockPos var10;
          UnmodifiableIterator var12;
          Entry var13;
          Iterator var16;
+         ChatFormatting var10001;
          ResourceLocation var17;
          if (this.block.getType() == HitResult.Type.BLOCK) {
             var10 = ((BlockHitResult)this.block).getBlockPos();
             BlockState var11 = this.minecraft.level.getBlockState(var10);
             var9.add("");
-            var9.add(ChatFormatting.UNDERLINE + "Targeted Block: " + var10.getX() + ", " + var10.getY() + ", " + var10.getZ());
+            var10001 = ChatFormatting.UNDERLINE;
+            var9.add(var10001 + "Targeted Block: " + var10.getX() + ", " + var10.getY() + ", " + var10.getZ());
             var9.add(String.valueOf(Registry.BLOCK.getKey(var11.getBlock())));
             var12 = var11.getValues().entrySet().iterator();
 
             while(var12.hasNext()) {
                var13 = (Entry)var12.next();
                var9.add(this.getPropertyValueString(var13));
             }
 
-            var16 = this.minecraft.getConnection().getTags().getBlocks().getMatchingTags(var11.getBlock()).iterator();
+            var16 = this.minecraft.getConnection().getTags().getOrEmpty(Registry.BLOCK_REGISTRY).getMatchingTags(var11.getBlock()).iterator();
 
             while(var16.hasNext()) {
                var17 = (ResourceLocation)var16.next();
                var9.add("#" + var17);
             }
@@ -390,20 +414,21 @@
 
          if (this.liquid.getType() == HitResult.Type.BLOCK) {
             var10 = ((BlockHitResult)this.liquid).getBlockPos();
             FluidState var15 = this.minecraft.level.getFluidState(var10);
             var9.add("");
-            var9.add(ChatFormatting.UNDERLINE + "Targeted Fluid: " + var10.getX() + ", " + var10.getY() + ", " + var10.getZ());
+            var10001 = ChatFormatting.UNDERLINE;
+            var9.add(var10001 + "Targeted Fluid: " + var10.getX() + ", " + var10.getY() + ", " + var10.getZ());
             var9.add(String.valueOf(Registry.FLUID.getKey(var15.getType())));
             var12 = var15.getValues().entrySet().iterator();
 
             while(var12.hasNext()) {
                var13 = (Entry)var12.next();
                var9.add(this.getPropertyValueString(var13));
             }
 
-            var16 = this.minecraft.getConnection().getTags().getFluids().getMatchingTags(var15.getType()).iterator();
+            var16 = this.minecraft.getConnection().getTags().getOrEmpty(Registry.FLUID_REGISTRY).getMatchingTags(var15.getType()).iterator();
 
             while(var16.hasNext()) {
                var17 = (ResourceLocation)var16.next();
                var9.add("#" + var17);
             }
@@ -428,11 +453,12 @@
          var4 = ChatFormatting.GREEN + var4;
       } else if (Boolean.FALSE.equals(var3)) {
          var4 = ChatFormatting.RED + var4;
       }
 
-      return var2.getName() + ": " + var4;
+      String var10000 = var2.getName();
+      return var10000 + ": " + var4;
    }
 
    private void drawChart(PoseStack var1, FrameTimer var2, int var3, int var4, boolean var5) {
       RenderSystem.disableDepthTest();
       int var6 = var2.getLogStart();
@@ -454,20 +480,21 @@
          var13 += (long)var18;
       }
 
       var17 = this.minecraft.getWindow().getGuiScaledHeight();
       fill(var1, var3, var17 - 60, var3 + var12, var17, -1873784752);
+      RenderSystem.setShader(GameRenderer::getPositionColorShader);
       BufferBuilder var27 = Tesselator.getInstance().getBuilder();
       RenderSystem.enableBlend();
       RenderSystem.disableTexture();
       RenderSystem.defaultBlendFunc();
-      var27.begin(7, DefaultVertexFormat.POSITION_COLOR);
+      var27.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION_COLOR);
 
       for(Matrix4f var19 = Transformation.identity().getMatrix(); var9 != var7; var9 = var2.wrapIndex(var9 + 1)) {
          int var20 = var2.scaleSampleTo(var8[var9], var5 ? 30 : 60, var5 ? 60 : 20);
          int var21 = var5 ? 100 : 60;
-         int var22 = this.getSampleColor(Mth.clamp(var20, 0, var21), 0, var21 / 2, var21);
+         int var22 = this.getSampleColor(Mth.clamp((int)var20, (int)0, (int)var21), 0, var21 / 2, var21);
          int var23 = var22 >> 24 & 255;
          int var24 = var22 >> 16 & 255;
          int var25 = var22 >> 8 & 255;
          int var26 = var22 & 255;
          var27.vertex(var19, (float)(var10 + 1), (float)var17, 0.0F).color(var24, var25, var26, var23).endVertex();
@@ -505,21 +532,21 @@
       String var29 = var13 / (long)var12 + " ms avg";
       String var30 = var16 + " ms max";
       Font var10000 = this.font;
       float var10003 = (float)(var3 + 2);
       int var10004 = var17 - 60;
-      this.font.getClass();
+      Objects.requireNonNull(this.font);
       var10000.drawShadow(var1, var28, var10003, (float)(var10004 - 9), 14737632);
       var10000 = this.font;
       var10003 = (float)(var3 + var12 / 2 - this.font.width(var29) / 2);
       var10004 = var17 - 60;
-      this.font.getClass();
+      Objects.requireNonNull(this.font);
       var10000.drawShadow(var1, var29, var10003, (float)(var10004 - 9), 14737632);
       var10000 = this.font;
       var10003 = (float)(var3 + var12 - this.font.width(var30));
       var10004 = var17 - 60;
-      this.font.getClass();
+      Objects.requireNonNull(this.font);
       var10000.drawShadow(var1, var30, var10003, (float)(var10004 - 9), 14737632);
       RenderSystem.enableDepthTest();
    }
 
    private int getSampleColor(int var1, int var2, int var3, int var4) {
@@ -533,14 +560,14 @@
       int var7 = var1 & 255;
       int var8 = var2 >> 24 & 255;
       int var9 = var2 >> 16 & 255;
       int var10 = var2 >> 8 & 255;
       int var11 = var2 & 255;
-      int var12 = Mth.clamp((int)Mth.lerp(var3, (float)var4, (float)var8), 0, 255);
-      int var13 = Mth.clamp((int)Mth.lerp(var3, (float)var5, (float)var9), 0, 255);
-      int var14 = Mth.clamp((int)Mth.lerp(var3, (float)var6, (float)var10), 0, 255);
-      int var15 = Mth.clamp((int)Mth.lerp(var3, (float)var7, (float)var11), 0, 255);
+      int var12 = Mth.clamp((int)((int)Mth.lerp(var3, (float)var4, (float)var8)), (int)0, (int)255);
+      int var13 = Mth.clamp((int)((int)Mth.lerp(var3, (float)var5, (float)var9)), (int)0, (int)255);
+      int var14 = Mth.clamp((int)((int)Mth.lerp(var3, (float)var6, (float)var10)), (int)0, (int)255);
+      int var15 = Mth.clamp((int)((int)Mth.lerp(var3, (float)var7, (float)var11)), (int)0, (int)255);
       return var12 << 24 | var13 << 16 | var14 << 8 | var15;
    }
 
    private static long bytesToMegabytes(long var0) {
       return var0 / 1024L / 1024L;
