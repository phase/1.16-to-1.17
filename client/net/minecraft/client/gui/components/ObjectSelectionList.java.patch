--- net/minecraft/client/gui/components/ObjectSelectionList.java
+++ net/minecraft/client/gui/components/ObjectSelectionList.java
@@ -1,10 +1,16 @@
 package net.minecraft.client.gui.components;
 
 import net.minecraft.client.Minecraft;
+import net.minecraft.client.gui.narration.NarratedElementType;
+import net.minecraft.client.gui.narration.NarrationElementOutput;
+import net.minecraft.client.gui.narration.NarrationSupplier;
+import net.minecraft.network.chat.Component;
+import net.minecraft.network.chat.TranslatableComponent;
 
-public abstract class ObjectSelectionList<E extends AbstractSelectionList.Entry<E>> extends AbstractSelectionList<E> {
+public abstract class ObjectSelectionList<E extends ObjectSelectionList.Entry<E>> extends AbstractSelectionList<E> {
+   private static final Component USAGE_NARRATION = new TranslatableComponent("narration.selection.usage");
    private boolean inFocus;
 
    public ObjectSelectionList(Minecraft var1, int var2, int var3, int var4, int var5, int var6) {
       super(var1, var2, var3, var4, var5, var6);
    }
@@ -22,14 +28,39 @@
 
          return this.inFocus;
       }
    }
 
-   public abstract static class Entry<E extends ObjectSelectionList.Entry<E>> extends AbstractSelectionList.Entry<E> {
+   public void updateNarration(NarrationElementOutput var1) {
+      ObjectSelectionList.Entry var2 = (ObjectSelectionList.Entry)this.getHovered();
+      if (var2 != null) {
+         this.narrateListElementPosition(var1.nest(), var2);
+         var2.updateNarration(var1);
+      } else {
+         ObjectSelectionList.Entry var3 = (ObjectSelectionList.Entry)this.getSelected();
+         if (var3 != null) {
+            this.narrateListElementPosition(var1.nest(), var3);
+            var3.updateNarration(var1);
+         }
+      }
+
+      if (this.isFocused()) {
+         var1.add(NarratedElementType.USAGE, USAGE_NARRATION);
+      }
+
+   }
+
+   public abstract static class Entry<E extends ObjectSelectionList.Entry<E>> extends AbstractSelectionList.Entry<E> implements NarrationSupplier {
       public Entry() {
       }
 
       public boolean changeFocus(boolean var1) {
          return false;
       }
+
+      public abstract Component getNarration();
+
+      public void updateNarration(NarrationElementOutput var1) {
+         var1.add(NarratedElementType.TITLE, this.getNarration());
+      }
    }
 }
