--- net/minecraft/client/gui/screens/inventory/tooltip/ClientBundleTooltip.java
+++ net/minecraft/client/gui/screens/inventory/tooltip/ClientBundleTooltip.java
@@ -1,0 +1,119 @@
+package net.minecraft.client.gui.screens.inventory.tooltip;
+
+import com.mojang.blaze3d.systems.RenderSystem;
+import com.mojang.blaze3d.vertex.PoseStack;
+import net.minecraft.client.gui.Font;
+import net.minecraft.client.gui.GuiComponent;
+import net.minecraft.client.gui.screens.inventory.AbstractContainerScreen;
+import net.minecraft.client.renderer.entity.ItemRenderer;
+import net.minecraft.client.renderer.texture.TextureManager;
+import net.minecraft.core.NonNullList;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.world.inventory.tooltip.BundleTooltip;
+import net.minecraft.world.item.ItemStack;
+
+public class ClientBundleTooltip implements ClientTooltipComponent {
+   public static final ResourceLocation TEXTURE_LOCATION = new ResourceLocation("textures/gui/container/bundle.png");
+   private final NonNullList<ItemStack> items;
+   private final int weight;
+
+   public ClientBundleTooltip(BundleTooltip var1) {
+      this.items = var1.getItems();
+      this.weight = var1.getWeight();
+   }
+
+   public int getHeight() {
+      return this.gridSizeY() * 20 + 2 + 4;
+   }
+
+   public int getWidth(Font var1) {
+      return this.gridSizeX() * 18 + 2;
+   }
+
+   public void renderImage(Font var1, int var2, int var3, PoseStack var4, ItemRenderer var5, int var6, TextureManager var7) {
+      int var8 = this.gridSizeX();
+      int var9 = this.gridSizeY();
+      boolean var10 = this.weight >= 64;
+      int var11 = 0;
+
+      for(int var12 = 0; var12 < var9; ++var12) {
+         for(int var13 = 0; var13 < var8; ++var13) {
+            int var14 = var2 + var13 * 18 + 1;
+            int var15 = var3 + var12 * 20 + 1;
+            this.renderSlot(var14, var15, var11++, var10, var1, var4, var5, var6, var7);
+         }
+      }
+
+      this.drawBorder(var2, var3, var8, var9, var4, var6, var7);
+   }
+
+   private void renderSlot(int var1, int var2, int var3, boolean var4, Font var5, PoseStack var6, ItemRenderer var7, int var8, TextureManager var9) {
+      if (var3 >= this.items.size()) {
+         this.blit(var6, var1, var2, var8, var9, var4 ? ClientBundleTooltip.Texture.BLOCKED_SLOT : ClientBundleTooltip.Texture.SLOT);
+      } else {
+         ItemStack var10 = (ItemStack)this.items.get(var3);
+         this.blit(var6, var1, var2, var8, var9, ClientBundleTooltip.Texture.SLOT);
+         var7.renderAndDecorateItem(var10, var1 + 1, var2 + 1, var3);
+         var7.renderGuiItemDecorations(var5, var10, var1 + 1, var2 + 1);
+         if (var3 == 0) {
+            AbstractContainerScreen.renderSlotHighlight(var6, var1 + 1, var2 + 1, var8);
+         }
+
+      }
+   }
+
+   private void drawBorder(int var1, int var2, int var3, int var4, PoseStack var5, int var6, TextureManager var7) {
+      this.blit(var5, var1, var2, var6, var7, ClientBundleTooltip.Texture.BORDER_CORNER_TOP);
+      this.blit(var5, var1 + var3 * 18 + 1, var2, var6, var7, ClientBundleTooltip.Texture.BORDER_CORNER_TOP);
+
+      int var8;
+      for(var8 = 0; var8 < var3; ++var8) {
+         this.blit(var5, var1 + 1 + var8 * 18, var2, var6, var7, ClientBundleTooltip.Texture.BORDER_HORIZONTAL_TOP);
+         this.blit(var5, var1 + 1 + var8 * 18, var2 + var4 * 20, var6, var7, ClientBundleTooltip.Texture.BORDER_HORIZONTAL_BOTTOM);
+      }
+
+      for(var8 = 0; var8 < var4; ++var8) {
+         this.blit(var5, var1, var2 + var8 * 20 + 1, var6, var7, ClientBundleTooltip.Texture.BORDER_VERTICAL);
+         this.blit(var5, var1 + var3 * 18 + 1, var2 + var8 * 20 + 1, var6, var7, ClientBundleTooltip.Texture.BORDER_VERTICAL);
+      }
+
+      this.blit(var5, var1, var2 + var4 * 20, var6, var7, ClientBundleTooltip.Texture.BORDER_CORNER_BOTTOM);
+      this.blit(var5, var1 + var3 * 18 + 1, var2 + var4 * 20, var6, var7, ClientBundleTooltip.Texture.BORDER_CORNER_BOTTOM);
+   }
+
+   private void blit(PoseStack var1, int var2, int var3, int var4, TextureManager var5, ClientBundleTooltip.Texture var6) {
+      RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
+      RenderSystem.setShaderTexture(0, TEXTURE_LOCATION);
+      GuiComponent.blit(var1, var2, var3, var4, (float)var6.x, (float)var6.y, var6.w, var6.h, 128, 128);
+   }
+
+   private int gridSizeX() {
+      return Math.max(2, (int)Math.ceil(Math.sqrt((double)this.items.size() + 1.0D)));
+   }
+
+   private int gridSizeY() {
+      return (int)Math.ceil(((double)this.items.size() + 1.0D) / (double)this.gridSizeX());
+   }
+
+   static enum Texture {
+      SLOT(0, 0, 18, 20),
+      BLOCKED_SLOT(0, 40, 18, 20),
+      BORDER_VERTICAL(0, 18, 1, 20),
+      BORDER_HORIZONTAL_TOP(0, 20, 18, 1),
+      BORDER_HORIZONTAL_BOTTOM(0, 60, 18, 1),
+      BORDER_CORNER_TOP(0, 20, 1, 1),
+      BORDER_CORNER_BOTTOM(0, 60, 1, 1);
+
+      public final int x;
+      public final int y;
+      public final int w;
+      public final int h;
+
+      private Texture(int var3, int var4, int var5, int var6) {
+         this.x = var3;
+         this.y = var4;
+         this.w = var5;
+         this.h = var6;
+      }
+   }
+}
