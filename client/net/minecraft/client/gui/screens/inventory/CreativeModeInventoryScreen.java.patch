--- net/minecraft/client/gui/screens/inventory/CreativeModeInventoryScreen.java
+++ net/minecraft/client/gui/screens/inventory/CreativeModeInventoryScreen.java
@@ -67,11 +67,11 @@
    private boolean ignoreTextInput;
    private boolean hasClickedOutside;
    private final Map<ResourceLocation, Tag<Item>> visibleTags = Maps.newTreeMap();
 
    public CreativeModeInventoryScreen(Player var1) {
-      super(new CreativeModeInventoryScreen.ItemPickerMenu(var1), var1.inventory, TextComponent.EMPTY);
+      super(new CreativeModeInventoryScreen.ItemPickerMenu(var1), var1.getInventory(), TextComponent.EMPTY);
       var1.containerMenu = this.menu;
       this.passEvents = true;
       this.imageHeight = 136;
       this.imageWidth = 195;
    }
@@ -94,11 +94,11 @@
       boolean var5 = var4 == ClickType.QUICK_MOVE;
       var4 = var2 == -999 && var4 == ClickType.PICKUP ? ClickType.THROW : var4;
       ItemStack var7;
       Inventory var10;
       if (var1 == null && selectedTab != CreativeModeTab.TAB_INVENTORY.getId() && var4 != ClickType.QUICK_CRAFT) {
-         var10 = this.minecraft.player.inventory;
+         var10 = this.minecraft.player.getInventory();
          if (!var10.getCarried().isEmpty() && this.hasClickedOutside) {
             if (var3 == 0) {
                this.minecraft.player.drop(var10.getCarried(), true);
                this.minecraft.gameMode.handleCreativeModeItemDrop(var10.getCarried());
                var10.setCarried(ItemStack.EMPTY);
@@ -121,36 +121,36 @@
             }
          } else {
             ItemStack var6;
             if (selectedTab == CreativeModeTab.TAB_INVENTORY.getId()) {
                if (var1 == this.destroyItemSlot) {
-                  this.minecraft.player.inventory.setCarried(ItemStack.EMPTY);
+                  this.minecraft.player.getInventory().setCarried(ItemStack.EMPTY);
                } else if (var4 == ClickType.THROW && var1 != null && var1.hasItem()) {
                   var6 = var1.remove(var3 == 0 ? 1 : var1.getItem().getMaxStackSize());
                   var7 = var1.getItem();
                   this.minecraft.player.drop(var6, true);
                   this.minecraft.gameMode.handleCreativeModeItemDrop(var6);
                   this.minecraft.gameMode.handleCreativeModeItemAdd(var7, ((CreativeModeInventoryScreen.SlotWrapper)var1).target.index);
-               } else if (var4 == ClickType.THROW && !this.minecraft.player.inventory.getCarried().isEmpty()) {
-                  this.minecraft.player.drop(this.minecraft.player.inventory.getCarried(), true);
-                  this.minecraft.gameMode.handleCreativeModeItemDrop(this.minecraft.player.inventory.getCarried());
-                  this.minecraft.player.inventory.setCarried(ItemStack.EMPTY);
+               } else if (var4 == ClickType.THROW && !this.minecraft.player.getInventory().getCarried().isEmpty()) {
+                  this.minecraft.player.drop(this.minecraft.player.getInventory().getCarried(), true);
+                  this.minecraft.gameMode.handleCreativeModeItemDrop(this.minecraft.player.getInventory().getCarried());
+                  this.minecraft.player.getInventory().setCarried(ItemStack.EMPTY);
                } else {
                   this.minecraft.player.inventoryMenu.clicked(var1 == null ? var2 : ((CreativeModeInventoryScreen.SlotWrapper)var1).target.index, var3, var4, this.minecraft.player);
                   this.minecraft.player.inventoryMenu.broadcastChanges();
                }
             } else {
                ItemStack var9;
                if (var4 != ClickType.QUICK_CRAFT && var1.container == CONTAINER) {
-                  var10 = this.minecraft.player.inventory;
+                  var10 = this.minecraft.player.getInventory();
                   var7 = var10.getCarried();
                   ItemStack var13 = var1.getItem();
                   if (var4 == ClickType.SWAP) {
                      if (!var13.isEmpty()) {
                         var9 = var13.copy();
                         var9.setCount(var9.getMaxStackSize());
-                        this.minecraft.player.inventory.setItem(var3, var9);
+                        this.minecraft.player.getInventory().setItem(var3, var9);
                         this.minecraft.player.inventoryMenu.broadcastChanges();
                      }
 
                      return;
                   }
@@ -275,11 +275,11 @@
 
    }
 
    public void removed() {
       super.removed();
-      if (this.minecraft.player != null && this.minecraft.player.inventory != null) {
+      if (this.minecraft.player != null && this.minecraft.player.getInventory() != null) {
          this.minecraft.player.inventoryMenu.removeSlotListener(this.listener);
       }
 
       this.minecraft.keyboardHandler.setSendRepeatsToGui(false);
    }
@@ -614,11 +614,11 @@
       if (selectedTab == CreativeModeTab.TAB_SEARCH.getId()) {
          List var5 = var2.getTooltipLines(this.minecraft.player, this.minecraft.options.advancedItemTooltips ? TooltipFlag.Default.ADVANCED : TooltipFlag.Default.NORMAL);
          ArrayList var6 = Lists.newArrayList(var5);
          Item var7 = var2.getItem();
          CreativeModeTab var8 = var7.getItemCategory();
-         if (var8 == null && var7 == Items.ENCHANTED_BOOK) {
+         if (var8 == null && var2.is(Items.ENCHANTED_BOOK)) {
             Map var9 = EnchantmentHelper.getEnchantments(var2);
             if (var9.size() == 1) {
                Enchantment var10 = (Enchantment)var9.keySet().iterator().next();
                CreativeModeTab[] var11 = CreativeModeTab.TABS;
                int var12 = var11.length;
@@ -632,11 +632,11 @@
                }
             }
          }
 
          this.visibleTags.forEach((var2x, var3x) -> {
-            if (var3x.contains(var7)) {
+            if (var2.is(var3x)) {
                var6.add(1, (new TextComponent("#" + var2x)).withStyle(ChatFormatting.DARK_PURPLE));
             }
 
          });
          if (var8 != null) {
@@ -776,18 +776,18 @@
       Hotbar var6 = var5.get(var1);
       int var7;
       if (var2) {
          for(var7 = 0; var7 < Inventory.getSelectionSize(); ++var7) {
             ItemStack var8 = ((ItemStack)var6.get(var7)).copy();
-            var4.inventory.setItem(var7, var8);
+            var4.getInventory().setItem(var7, var8);
             var0.gameMode.handleCreativeModeItemAdd(var8, 36 + var7);
          }
 
          var4.inventoryMenu.broadcastChanges();
       } else if (var3) {
          for(var7 = 0; var7 < Inventory.getSelectionSize(); ++var7) {
-            var6.set(var7, var4.inventory.getItem(var7).copy());
+            var6.set(var7, var4.getInventory().getItem(var7).copy());
          }
 
          Component var9 = var0.options.keyHotbarSlots[var1].getTranslatedKeyMessage();
          Component var10 = var0.options.keyLoadHotbarActivator.getTranslatedKeyMessage();
          var0.gui.setOverlayMessage(new TranslatableComponent("inventory.hotbarSaved", new Object[]{var10, var9}), false);
@@ -875,11 +875,11 @@
    public static class ItemPickerMenu extends AbstractContainerMenu {
       public final NonNullList<ItemStack> items = NonNullList.create();
 
       public ItemPickerMenu(Player var1) {
          super((MenuType)null, 0);
-         Inventory var2 = var1.inventory;
+         Inventory var2 = var1.getInventory();
 
          int var3;
          for(var3 = 0; var3 < 5; ++var3) {
             for(int var4 = 0; var4 < 9; ++var4) {
                this.addSlot(new CreativeModeInventoryScreen.CustomCreativeSlot(CreativeModeInventoryScreen.CONTAINER, var3 * 9 + var4, 9 + var4 * 18, 18 + var3 * 18));
