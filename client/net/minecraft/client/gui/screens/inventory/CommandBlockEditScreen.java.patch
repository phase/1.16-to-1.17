--- net/minecraft/client/gui/screens/inventory/CommandBlockEditScreen.java
+++ net/minecraft/client/gui/screens/inventory/CommandBlockEditScreen.java
@@ -1,21 +1,21 @@
 package net.minecraft.client.gui.screens.inventory;
 
 import net.minecraft.client.Minecraft;
-import net.minecraft.client.gui.components.Button;
+import net.minecraft.client.gui.components.CycleButton;
 import net.minecraft.core.BlockPos;
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.game.ServerboundSetCommandBlockPacket;
 import net.minecraft.world.level.BaseCommandBlock;
 import net.minecraft.world.level.block.entity.CommandBlockEntity;
 
 public class CommandBlockEditScreen extends AbstractCommandBlockEditScreen {
    private final CommandBlockEntity autoCommandBlock;
-   private Button modeButton;
-   private Button conditionalButton;
-   private Button autoexecButton;
+   private CycleButton<CommandBlockEntity.Mode> modeButton;
+   private CycleButton<Boolean> conditionalButton;
+   private CycleButton<Boolean> autoexecButton;
    private CommandBlockEntity.Mode mode;
    private boolean conditional;
    private boolean autoexec;
 
    public CommandBlockEditScreen(CommandBlockEntity var1) {
@@ -31,105 +31,59 @@
       return 135;
    }
 
    protected void init() {
       super.init();
-      this.modeButton = (Button)this.addButton(new Button(this.width / 2 - 50 - 100 - 4, 165, 100, 20, new TranslatableComponent("advMode.mode.sequence"), (var1) -> {
-         this.nextMode();
-         this.updateMode();
+      this.modeButton = (CycleButton)this.addRenderableWidget(CycleButton.builder((var0) -> {
+         switch(var0) {
+         case SEQUENCE:
+            return new TranslatableComponent("advMode.mode.sequence");
+         case AUTO:
+            return new TranslatableComponent("advMode.mode.auto");
+         case REDSTONE:
+         default:
+            return new TranslatableComponent("advMode.mode.redstone");
+         }
+      }).withValues((Object[])CommandBlockEntity.Mode.values()).displayOnlyValue().withInitialValue(this.mode).create(this.width / 2 - 50 - 100 - 4, 165, 100, 20, new TranslatableComponent("advMode.mode"), (var1, var2) -> {
+         this.mode = var2;
       }));
-      this.conditionalButton = (Button)this.addButton(new Button(this.width / 2 - 50, 165, 100, 20, new TranslatableComponent("advMode.mode.unconditional"), (var1) -> {
-         this.conditional = !this.conditional;
-         this.updateConditional();
+      this.conditionalButton = (CycleButton)this.addRenderableWidget(CycleButton.booleanBuilder(new TranslatableComponent("advMode.mode.conditional"), new TranslatableComponent("advMode.mode.unconditional")).displayOnlyValue().withInitialValue(this.conditional).create(this.width / 2 - 50, 165, 100, 20, new TranslatableComponent("advMode.type"), (var1, var2) -> {
+         this.conditional = var2;
       }));
-      this.autoexecButton = (Button)this.addButton(new Button(this.width / 2 + 50 + 4, 165, 100, 20, new TranslatableComponent("advMode.mode.redstoneTriggered"), (var1) -> {
-         this.autoexec = !this.autoexec;
-         this.updateAutoexec();
+      this.autoexecButton = (CycleButton)this.addRenderableWidget(CycleButton.booleanBuilder(new TranslatableComponent("advMode.mode.autoexec.bat"), new TranslatableComponent("advMode.mode.redstoneTriggered")).displayOnlyValue().withInitialValue(this.autoexec).create(this.width / 2 + 50 + 4, 165, 100, 20, new TranslatableComponent("advMode.triggering"), (var1, var2) -> {
+         this.autoexec = var2;
       }));
-      this.doneButton.active = false;
-      this.outputButton.active = false;
-      this.modeButton.active = false;
-      this.conditionalButton.active = false;
-      this.autoexecButton.active = false;
+      this.enableControls(false);
    }
 
+   private void enableControls(boolean var1) {
+      this.doneButton.active = var1;
+      this.outputButton.active = var1;
+      this.modeButton.active = var1;
+      this.conditionalButton.active = var1;
+      this.autoexecButton.active = var1;
+   }
+
    public void updateGui() {
       BaseCommandBlock var1 = this.autoCommandBlock.getCommandBlock();
       this.commandEdit.setValue(var1.getCommand());
-      this.trackOutput = var1.isTrackOutput();
+      boolean var2 = var1.isTrackOutput();
       this.mode = this.autoCommandBlock.getMode();
       this.conditional = this.autoCommandBlock.isConditional();
       this.autoexec = this.autoCommandBlock.isAutomatic();
-      this.updateCommandOutput();
-      this.updateMode();
-      this.updateConditional();
-      this.updateAutoexec();
-      this.doneButton.active = true;
-      this.outputButton.active = true;
-      this.modeButton.active = true;
-      this.conditionalButton.active = true;
-      this.autoexecButton.active = true;
+      this.outputButton.setValue(var2);
+      this.modeButton.setValue(this.mode);
+      this.conditionalButton.setValue(this.conditional);
+      this.autoexecButton.setValue(this.autoexec);
+      this.updatePreviousOutput(var2);
+      this.enableControls(true);
    }
 
    public void resize(Minecraft var1, int var2, int var3) {
       super.resize(var1, var2, var3);
-      this.updateCommandOutput();
-      this.updateMode();
-      this.updateConditional();
-      this.updateAutoexec();
-      this.doneButton.active = true;
-      this.outputButton.active = true;
-      this.modeButton.active = true;
-      this.conditionalButton.active = true;
-      this.autoexecButton.active = true;
+      this.enableControls(true);
    }
 
    protected void populateAndSendPacket(BaseCommandBlock var1) {
       this.minecraft.getConnection().send((Packet)(new ServerboundSetCommandBlockPacket(new BlockPos(var1.getPosition()), this.commandEdit.getValue(), this.mode, var1.isTrackOutput(), this.conditional, this.autoexec)));
    }
-
-   private void updateMode() {
-      switch(this.mode) {
-      case SEQUENCE:
-         this.modeButton.setMessage(new TranslatableComponent("advMode.mode.sequence"));
-         break;
-      case AUTO:
-         this.modeButton.setMessage(new TranslatableComponent("advMode.mode.auto"));
-         break;
-      case REDSTONE:
-         this.modeButton.setMessage(new TranslatableComponent("advMode.mode.redstone"));
-      }
-
-   }
-
-   private void nextMode() {
-      switch(this.mode) {
-      case SEQUENCE:
-         this.mode = CommandBlockEntity.Mode.AUTO;
-         break;
-      case AUTO:
-         this.mode = CommandBlockEntity.Mode.REDSTONE;
-         break;
-      case REDSTONE:
-         this.mode = CommandBlockEntity.Mode.SEQUENCE;
-      }
-
-   }
-
-   private void updateConditional() {
-      if (this.conditional) {
-         this.conditionalButton.setMessage(new TranslatableComponent("advMode.mode.conditional"));
-      } else {
-         this.conditionalButton.setMessage(new TranslatableComponent("advMode.mode.unconditional"));
-      }
-
-   }
-
-   private void updateAutoexec() {
-      if (this.autoexec) {
-         this.autoexecButton.setMessage(new TranslatableComponent("advMode.mode.autoexec.bat"));
-      } else {
-         this.autoexecButton.setMessage(new TranslatableComponent("advMode.mode.redstoneTriggered"));
-      }
-
-   }
 }
