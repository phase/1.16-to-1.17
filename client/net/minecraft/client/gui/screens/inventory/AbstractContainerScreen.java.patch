--- net/minecraft/client/gui/screens/inventory/AbstractContainerScreen.java
+++ net/minecraft/client/gui/screens/inventory/AbstractContainerScreen.java
@@ -118,11 +118,11 @@
             RenderSystem.enableDepthTest();
          }
       }
 
       this.renderLabels(var1, var2, var3);
-      Inventory var16 = this.minecraft.player.inventory;
+      Inventory var16 = this.minecraft.player.getInventory();
       ItemStack var17 = this.draggingItem.isEmpty() ? var16.getCarried() : this.draggingItem;
       if (!var17.isEmpty()) {
          boolean var18 = true;
          var12 = this.draggingItem.isEmpty() ? 8 : 16;
          String var13 = null;
@@ -157,11 +157,11 @@
       RenderSystem.popMatrix();
       RenderSystem.enableDepthTest();
    }
 
    protected void renderTooltip(PoseStack var1, int var2, int var3) {
-      if (this.minecraft.player.inventory.getCarried().isEmpty() && this.hoveredSlot != null && this.hoveredSlot.hasItem()) {
+      if (this.minecraft.player.getInventory().getCarried().isEmpty() && this.hoveredSlot != null && this.hoveredSlot.hasItem()) {
          this.renderTooltip(var1, this.hoveredSlot.getItem(), var2, var3);
       }
 
    }
 
@@ -186,11 +186,11 @@
       int var3 = var2.x;
       int var4 = var2.y;
       ItemStack var5 = var2.getItem();
       boolean var6 = false;
       boolean var7 = var2 == this.clickedSlot && !this.draggingItem.isEmpty() && !this.isSplittingStack;
-      ItemStack var8 = this.minecraft.player.inventory.getCarried();
+      ItemStack var8 = this.minecraft.player.getInventory().getCarried();
       String var9 = null;
       if (var2 == this.clickedSlot && !this.draggingItem.isEmpty() && this.isSplittingStack && !var5.isEmpty()) {
          var5 = var5.copy();
          var5.setCount(var5.getCount() / 2);
       } else if (this.isQuickCrafting && this.quickCraftSlots.contains(var2) && !var8.isEmpty()) {
@@ -238,11 +238,11 @@
       this.itemRenderer.blitOffset = 0.0F;
       this.setBlitOffset(0);
    }
 
    private void recalculateQuickCraftRemaining() {
-      ItemStack var1 = this.minecraft.player.inventory.getCarried();
+      ItemStack var1 = this.minecraft.player.getInventory().getCarried();
       if (!var1.isEmpty() && this.isQuickCrafting) {
          if (this.quickCraftingType == 2) {
             this.quickCraftingRemainder = var1.getMaxStackSize();
          } else {
             this.quickCraftingRemainder = var1.getCount();
@@ -299,11 +299,11 @@
 
             if (var12) {
                var13 = -999;
             }
 
-            if (this.minecraft.options.touchscreen && var12 && this.minecraft.player.inventory.getCarried().isEmpty()) {
+            if (this.minecraft.options.touchscreen && var12 && this.minecraft.player.getInventory().getCarried().isEmpty()) {
                this.minecraft.setScreen((Screen)null);
                return true;
             }
 
             if (var13 != -1) {
@@ -314,11 +314,11 @@
                      this.isSplittingStack = var5 == 1;
                   } else {
                      this.clickedSlot = null;
                   }
                } else if (!this.isQuickCrafting) {
-                  if (this.minecraft.player.inventory.getCarried().isEmpty()) {
+                  if (this.minecraft.player.getInventory().getCarried().isEmpty()) {
                      if (this.minecraft.options.keyPickItem.matchesMouse(var5)) {
                         this.slotClicked(var7, var13, var5, ClickType.CLONE);
                      } else {
                         boolean var14 = var13 != -999 && (InputConstants.isKeyDown(Minecraft.getInstance().getWindow().getWindow(), 340) || InputConstants.isKeyDown(Minecraft.getInstance().getWindow().getWindow(), 344));
                         ClickType var15 = ClickType.PICKUP;
@@ -355,11 +355,11 @@
          return true;
       }
    }
 
    private void checkHotbarMouseClicked(int var1) {
-      if (this.hoveredSlot != null && this.minecraft.player.inventory.getCarried().isEmpty()) {
+      if (this.hoveredSlot != null && this.minecraft.player.getInventory().getCarried().isEmpty()) {
          if (this.minecraft.options.keySwapOffhand.matchesMouse(var1)) {
             this.slotClicked(this.hoveredSlot, this.hoveredSlot.index, 40, ClickType.SWAP);
             return;
          }
 
@@ -376,11 +376,11 @@
       return var1 < (double)var5 || var3 < (double)var6 || var1 >= (double)(var5 + this.imageWidth) || var3 >= (double)(var6 + this.imageHeight);
    }
 
    public boolean mouseDragged(double var1, double var3, int var5, double var6, double var8) {
       Slot var10 = this.findSlot(var1, var3);
-      ItemStack var11 = this.minecraft.player.inventory.getCarried();
+      ItemStack var11 = this.minecraft.player.getInventory().getCarried();
       if (this.clickedSlot != null && this.minecraft.options.touchscreen) {
          if (var5 == 0 || var5 == 1) {
             if (this.draggingItem.isEmpty()) {
                if (var10 != this.clickedSlot && !this.clickedSlot.getItem().isEmpty()) {
                   this.draggingItem = this.clickedSlot.getItem().copy();
@@ -465,11 +465,11 @@
 
                var11 = AbstractContainerMenu.canItemQuickReplace(var6, this.draggingItem, false);
                if (var10 != -1 && !this.draggingItem.isEmpty() && var11) {
                   this.slotClicked(this.clickedSlot, this.clickedSlot.index, var5, ClickType.PICKUP);
                   this.slotClicked(var6, var10, 0, ClickType.PICKUP);
-                  if (this.minecraft.player.inventory.getCarried().isEmpty()) {
+                  if (this.minecraft.player.getInventory().getCarried().isEmpty()) {
                      this.snapbackItem = ItemStack.EMPTY;
                   } else {
                      this.slotClicked(this.clickedSlot, this.clickedSlot.index, var5, ClickType.PICKUP);
                      this.snapbackStartX = Mth.floor(var1 - (double)var7);
                      this.snapbackStartY = Mth.floor(var3 - (double)var8);
@@ -496,11 +496,11 @@
                var12 = (Slot)var13.next();
                this.slotClicked(var12, var12.index, AbstractContainerMenu.getQuickcraftMask(1, this.quickCraftingType), ClickType.QUICK_CRAFT);
             }
 
             this.slotClicked((Slot)null, -999, AbstractContainerMenu.getQuickcraftMask(2, this.quickCraftingType), ClickType.QUICK_CRAFT);
-         } else if (!this.minecraft.player.inventory.getCarried().isEmpty()) {
+         } else if (!this.minecraft.player.getInventory().getCarried().isEmpty()) {
             if (this.minecraft.options.keyPickItem.matchesMouse(var5)) {
                this.slotClicked(var6, var10, var5, ClickType.CLONE);
             } else {
                var11 = var10 != -999 && (InputConstants.isKeyDown(Minecraft.getInstance().getWindow().getWindow(), 340) || InputConstants.isKeyDown(Minecraft.getInstance().getWindow().getWindow(), 344));
                if (var11) {
@@ -510,11 +510,11 @@
                this.slotClicked(var6, var10, var5, var11 ? ClickType.QUICK_MOVE : ClickType.PICKUP);
             }
          }
       }
 
-      if (this.minecraft.player.inventory.getCarried().isEmpty()) {
+      if (this.minecraft.player.getInventory().getCarried().isEmpty()) {
          this.lastClickTime = 0L;
       }
 
       this.isQuickCrafting = false;
       return true;
@@ -559,11 +559,11 @@
          return true;
       }
    }
 
    protected boolean checkHotbarKeyPressed(int var1, int var2) {
-      if (this.minecraft.player.inventory.getCarried().isEmpty() && this.hoveredSlot != null) {
+      if (this.minecraft.player.getInventory().getCarried().isEmpty() && this.hoveredSlot != null) {
          if (this.minecraft.options.keySwapOffhand.matches(var1, var2)) {
             this.slotClicked(this.hoveredSlot, this.hoveredSlot.index, 40, ClickType.SWAP);
             return true;
          }
 
@@ -588,11 +588,11 @@
       return false;
    }
 
    public void tick() {
       super.tick();
-      if (!this.minecraft.player.isAlive() || this.minecraft.player.removed) {
+      if (!this.minecraft.player.isAlive() || this.minecraft.player.isRemoved()) {
          this.minecraft.player.closeContainer();
       }
 
    }
 
