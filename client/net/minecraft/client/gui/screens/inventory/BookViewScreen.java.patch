--- net/minecraft/client/gui/screens/inventory/BookViewScreen.java
+++ net/minecraft/client/gui/screens/inventory/BookViewScreen.java
@@ -4,12 +4,15 @@
 import com.google.common.collect.ImmutableList.Builder;
 import com.mojang.blaze3d.systems.RenderSystem;
 import com.mojang.blaze3d.vertex.PoseStack;
 import java.util.Collections;
 import java.util.List;
+import java.util.function.Consumer;
+import java.util.function.IntFunction;
 import javax.annotation.Nullable;
 import net.minecraft.ChatFormatting;
+import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.Font;
 import net.minecraft.client.gui.chat.NarratorChatListener;
 import net.minecraft.client.gui.components.Button;
 import net.minecraft.client.gui.screens.Screen;
 import net.minecraft.nbt.CompoundTag;
@@ -23,11 +26,10 @@
 import net.minecraft.network.chat.TextComponent;
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.util.FormattedCharSequence;
 import net.minecraft.util.Mth;
-import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.WrittenBookItem;
 
 public class BookViewScreen extends Screen {
@@ -253,19 +255,33 @@
             return null;
          }
       }
    }
 
-   public static List<String> convertPages(CompoundTag var0) {
-      ListTag var1 = var0.getList("pages", 8).copy();
-      Builder var2 = ImmutableList.builder();
+   private static List<String> loadPages(CompoundTag var0) {
+      Builder var1 = ImmutableList.builder();
+      loadPages(var0, var1::add);
+      return var1.build();
+   }
 
-      for(int var3 = 0; var3 < var1.size(); ++var3) {
-         var2.add(var1.getString(var3));
+   public static void loadPages(CompoundTag var0, Consumer<String> var1) {
+      ListTag var3 = var0.getList("pages", 8).copy();
+      IntFunction var2;
+      if (Minecraft.getInstance().isTextFilteringEnabled() && var0.contains("filtered_pages", 10)) {
+         CompoundTag var4 = var0.getCompound("filtered_pages");
+         var2 = (var2x) -> {
+            String var3x = String.valueOf(var2x);
+            return var4.contains(var3x) ? var4.getString(var3x) : var3.getString(var2x);
+         };
+      } else {
+         var2 = var3::getString;
       }
 
-      return var2.build();
+      for(int var5 = 0; var5 < var3.size(); ++var5) {
+         var1.accept(var2.apply(var5));
+      }
+
    }
 
    public static class WritableBookAccess implements BookViewScreen.BookAccess {
       private final List<String> pages;
 
@@ -273,11 +289,11 @@
          this.pages = readPages(var1);
       }
 
       private static List<String> readPages(ItemStack var0) {
          CompoundTag var1 = var0.getTag();
-         return (List)(var1 != null ? BookViewScreen.convertPages(var1) : ImmutableList.of());
+         return (List)(var1 != null ? BookViewScreen.loadPages(var1) : ImmutableList.of());
       }
 
       public int getPageCount() {
          return this.pages.size();
       }
@@ -294,11 +310,11 @@
          this.pages = readPages(var1);
       }
 
       private static List<String> readPages(ItemStack var0) {
          CompoundTag var1 = var0.getTag();
-         return (List)(var1 != null && WrittenBookItem.makeSureTagIsValid(var1) ? BookViewScreen.convertPages(var1) : ImmutableList.of(Component.Serializer.toJson((new TranslatableComponent("book.invalid.tag")).withStyle(ChatFormatting.DARK_RED))));
+         return (List)(var1 != null && WrittenBookItem.makeSureTagIsValid(var1) ? BookViewScreen.loadPages(var1) : ImmutableList.of(Component.Serializer.toJson((new TranslatableComponent("book.invalid.tag")).withStyle(ChatFormatting.DARK_RED))));
       }
 
       public int getPageCount() {
          return this.pages.size();
       }
@@ -326,14 +342,13 @@
       default FormattedText getPage(int var1) {
          return var1 >= 0 && var1 < this.getPageCount() ? this.getPageRaw(var1) : FormattedText.EMPTY;
       }
 
       static BookViewScreen.BookAccess fromItem(ItemStack var0) {
-         Item var1 = var0.getItem();
-         if (var1 == Items.WRITTEN_BOOK) {
+         if (var0.is(Items.WRITTEN_BOOK)) {
             return new BookViewScreen.WrittenBookAccess(var0);
          } else {
-            return (BookViewScreen.BookAccess)(var1 == Items.WRITABLE_BOOK ? new BookViewScreen.WritableBookAccess(var0) : BookViewScreen.EMPTY_ACCESS);
+            return (BookViewScreen.BookAccess)(var0.is(Items.WRITABLE_BOOK) ? new BookViewScreen.WritableBookAccess(var0) : BookViewScreen.EMPTY_ACCESS);
          }
       }
    }
 }
