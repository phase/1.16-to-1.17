--- net/minecraft/client/gui/screens/inventory/BookViewScreen.java
+++ net/minecraft/client/gui/screens/inventory/BookViewScreen.java
@@ -4,16 +4,21 @@
 import com.google.common.collect.ImmutableList.Builder;
 import com.mojang.blaze3d.systems.RenderSystem;
 import com.mojang.blaze3d.vertex.PoseStack;
 import java.util.Collections;
 import java.util.List;
+import java.util.Objects;
+import java.util.function.Consumer;
+import java.util.function.IntFunction;
 import javax.annotation.Nullable;
 import net.minecraft.ChatFormatting;
+import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.Font;
 import net.minecraft.client.gui.chat.NarratorChatListener;
 import net.minecraft.client.gui.components.Button;
 import net.minecraft.client.gui.screens.Screen;
+import net.minecraft.client.renderer.GameRenderer;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.network.chat.ClickEvent;
 import net.minecraft.network.chat.CommonComponents;
 import net.minecraft.network.chat.Component;
@@ -23,26 +28,32 @@
 import net.minecraft.network.chat.TextComponent;
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.util.FormattedCharSequence;
 import net.minecraft.util.Mth;
-import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.WrittenBookItem;
 
 public class BookViewScreen extends Screen {
+   public static final int PAGE_INDICATOR_TEXT_Y_OFFSET = 16;
+   public static final int PAGE_TEXT_X_OFFSET = 36;
+   public static final int PAGE_TEXT_Y_OFFSET = 30;
    public static final BookViewScreen.BookAccess EMPTY_ACCESS = new BookViewScreen.BookAccess() {
       public int getPageCount() {
          return 0;
       }
 
       public FormattedText getPageRaw(int var1) {
          return FormattedText.EMPTY;
       }
    };
    public static final ResourceLocation BOOK_LOCATION = new ResourceLocation("textures/gui/book.png");
+   protected static final int TEXT_WIDTH = 114;
+   protected static final int TEXT_HEIGHT = 128;
+   protected static final int IMAGE_WIDTH = 192;
+   protected static final int IMAGE_HEIGHT = 192;
    private BookViewScreen.BookAccess bookAccess;
    private int currentPage;
    private List<FormattedCharSequence> cachedPageComponents;
    private int cachedPage;
    private Component pageMsg;
@@ -67,17 +78,17 @@
       this.playTurnSound = var2;
    }
 
    public void setBookAccess(BookViewScreen.BookAccess var1) {
       this.bookAccess = var1;
-      this.currentPage = Mth.clamp(this.currentPage, 0, var1.getPageCount());
+      this.currentPage = Mth.clamp((int)this.currentPage, (int)0, (int)var1.getPageCount());
       this.updateButtonVisibility();
       this.cachedPage = -1;
    }
 
    public boolean setPage(int var1) {
-      int var2 = Mth.clamp(var1, 0, this.bookAccess.getPageCount() - 1);
+      int var2 = Mth.clamp((int)var1, (int)0, (int)(this.bookAccess.getPageCount() - 1));
       if (var2 != this.currentPage) {
          this.currentPage = var2;
          this.updateButtonVisibility();
          this.cachedPage = -1;
          return true;
@@ -94,22 +105,22 @@
       this.createMenuControls();
       this.createPageControlButtons();
    }
 
    protected void createMenuControls() {
-      this.addButton(new Button(this.width / 2 - 100, 196, 200, 20, CommonComponents.GUI_DONE, (var1) -> {
+      this.addRenderableWidget(new Button(this.width / 2 - 100, 196, 200, 20, CommonComponents.GUI_DONE, (var1) -> {
          this.minecraft.setScreen((Screen)null);
       }));
    }
 
    protected void createPageControlButtons() {
       int var1 = (this.width - 192) / 2;
       boolean var2 = true;
-      this.forwardButton = (PageButton)this.addButton(new PageButton(var1 + 116, 159, true, (var1x) -> {
+      this.forwardButton = (PageButton)this.addRenderableWidget(new PageButton(var1 + 116, 159, true, (var1x) -> {
          this.pageForward();
       }, this.playTurnSound));
-      this.backButton = (PageButton)this.addButton(new PageButton(var1 + 43, 159, false, (var1x) -> {
+      this.backButton = (PageButton)this.addRenderableWidget(new PageButton(var1 + 43, 159, false, (var1x) -> {
          this.pageBack();
       }, this.playTurnSound));
       this.updateButtonVisibility();
    }
 
@@ -155,12 +166,13 @@
       }
    }
 
    public void render(PoseStack var1, int var2, int var3, float var4) {
       this.renderBackground(var1);
-      RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
-      this.minecraft.getTextureManager().bind(BOOK_LOCATION);
+      RenderSystem.setShader(GameRenderer::getPositionTexShader);
+      RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
+      RenderSystem.setShaderTexture(0, BOOK_LOCATION);
       int var5 = (this.width - 192) / 2;
       boolean var6 = true;
       this.blit(var1, var5, 2, 0, 0, 192, 192);
       if (this.cachedPage != this.currentPage) {
          FormattedText var7 = this.bookAccess.getPage(this.currentPage);
@@ -169,18 +181,18 @@
       }
 
       this.cachedPage = this.currentPage;
       int var11 = this.font.width((FormattedText)this.pageMsg);
       this.font.draw(var1, (Component)this.pageMsg, (float)(var5 - var11 + 192 - 44), 18.0F, 0);
-      this.font.getClass();
+      Objects.requireNonNull(this.font);
       int var8 = Math.min(128 / 9, this.cachedPageComponents.size());
 
       for(int var9 = 0; var9 < var8; ++var9) {
          FormattedCharSequence var10 = (FormattedCharSequence)this.cachedPageComponents.get(var9);
          Font var10000 = this.font;
          float var10003 = (float)(var5 + 36);
-         this.font.getClass();
+         Objects.requireNonNull(this.font);
          var10000.draw(var1, (FormattedCharSequence)var10, var10003, (float)(32 + var9 * 9), 0);
       }
 
       Style var12 = this.getClickedComponentStyleAt((double)var2, (double)var3);
       if (var12 != null) {
@@ -215,31 +227,35 @@
             return false;
          }
       } else {
          boolean var3 = super.handleComponentClicked(var1);
          if (var3 && var2.getAction() == ClickEvent.Action.RUN_COMMAND) {
-            this.minecraft.setScreen((Screen)null);
+            this.closeScreen();
          }
 
          return var3;
       }
    }
 
+   protected void closeScreen() {
+      this.minecraft.setScreen((Screen)null);
+   }
+
    @Nullable
    public Style getClickedComponentStyleAt(double var1, double var3) {
       if (this.cachedPageComponents.isEmpty()) {
          return null;
       } else {
          int var5 = Mth.floor(var1 - (double)((this.width - 192) / 2) - 36.0D);
          int var6 = Mth.floor(var3 - 2.0D - 30.0D);
          if (var5 >= 0 && var6 >= 0) {
-            this.font.getClass();
+            Objects.requireNonNull(this.font);
             int var7 = Math.min(128 / 9, this.cachedPageComponents.size());
             if (var5 <= 114) {
-               this.minecraft.font.getClass();
+               Objects.requireNonNull(this.minecraft.font);
                if (var6 < 9 * var7 + var7) {
-                  this.minecraft.font.getClass();
+                  Objects.requireNonNull(this.minecraft.font);
                   int var8 = var6 / 9;
                   if (var8 >= 0 && var8 < this.cachedPageComponents.size()) {
                      FormattedCharSequence var9 = (FormattedCharSequence)this.cachedPageComponents.get(var8);
                      return this.minecraft.font.getSplitter().componentStyleAtWidth(var9, var5);
                   }
@@ -253,31 +269,65 @@
             return null;
          }
       }
    }
 
-   public static List<String> convertPages(CompoundTag var0) {
-      ListTag var1 = var0.getList("pages", 8).copy();
-      Builder var2 = ImmutableList.builder();
+   static List<String> loadPages(CompoundTag var0) {
+      Builder var1 = ImmutableList.builder();
+      Objects.requireNonNull(var1);
+      loadPages(var0, var1::add);
+      return var1.build();
+   }
 
-      for(int var3 = 0; var3 < var1.size(); ++var3) {
-         var2.add(var1.getString(var3));
+   public static void loadPages(CompoundTag var0, Consumer<String> var1) {
+      ListTag var3 = var0.getList("pages", 8).copy();
+      IntFunction var2;
+      if (Minecraft.getInstance().isTextFilteringEnabled() && var0.contains("filtered_pages", 10)) {
+         CompoundTag var4 = var0.getCompound("filtered_pages");
+         var2 = (var2x) -> {
+            String var3x = String.valueOf(var2x);
+            return var4.contains(var3x) ? var4.getString(var3x) : var3.getString(var2x);
+         };
+      } else {
+         Objects.requireNonNull(var3);
+         var2 = var3::getString;
       }
 
-      return var2.build();
+      for(int var5 = 0; var5 < var3.size(); ++var5) {
+         var1.accept((String)var2.apply(var5));
+      }
+
    }
 
+   public interface BookAccess {
+      int getPageCount();
+
+      FormattedText getPageRaw(int var1);
+
+      default FormattedText getPage(int var1) {
+         return var1 >= 0 && var1 < this.getPageCount() ? this.getPageRaw(var1) : FormattedText.EMPTY;
+      }
+
+      static BookViewScreen.BookAccess fromItem(ItemStack var0) {
+         if (var0.is(Items.WRITTEN_BOOK)) {
+            return new BookViewScreen.WrittenBookAccess(var0);
+         } else {
+            return (BookViewScreen.BookAccess)(var0.is(Items.WRITABLE_BOOK) ? new BookViewScreen.WritableBookAccess(var0) : BookViewScreen.EMPTY_ACCESS);
+         }
+      }
+   }
+
    public static class WritableBookAccess implements BookViewScreen.BookAccess {
       private final List<String> pages;
 
       public WritableBookAccess(ItemStack var1) {
          this.pages = readPages(var1);
       }
 
       private static List<String> readPages(ItemStack var0) {
          CompoundTag var1 = var0.getTag();
-         return (List)(var1 != null ? BookViewScreen.convertPages(var1) : ImmutableList.of());
+         return (List)(var1 != null ? BookViewScreen.loadPages(var1) : ImmutableList.of());
       }
 
       public int getPageCount() {
          return this.pages.size();
       }
@@ -294,11 +344,11 @@
          this.pages = readPages(var1);
       }
 
       private static List<String> readPages(ItemStack var0) {
          CompoundTag var1 = var0.getTag();
-         return (List)(var1 != null && WrittenBookItem.makeSureTagIsValid(var1) ? BookViewScreen.convertPages(var1) : ImmutableList.of(Component.Serializer.toJson((new TranslatableComponent("book.invalid.tag")).withStyle(ChatFormatting.DARK_RED))));
+         return (List)(var1 != null && WrittenBookItem.makeSureTagIsValid(var1) ? BookViewScreen.loadPages(var1) : ImmutableList.of(Component.Serializer.toJson((new TranslatableComponent("book.invalid.tag")).withStyle(ChatFormatting.DARK_RED))));
       }
 
       public int getPageCount() {
          return this.pages.size();
       }
@@ -315,25 +365,6 @@
          }
 
          return FormattedText.of(var2);
       }
    }
-
-   public interface BookAccess {
-      int getPageCount();
-
-      FormattedText getPageRaw(int var1);
-
-      default FormattedText getPage(int var1) {
-         return var1 >= 0 && var1 < this.getPageCount() ? this.getPageRaw(var1) : FormattedText.EMPTY;
-      }
-
-      static BookViewScreen.BookAccess fromItem(ItemStack var0) {
-         Item var1 = var0.getItem();
-         if (var1 == Items.WRITTEN_BOOK) {
-            return new BookViewScreen.WrittenBookAccess(var0);
-         } else {
-            return (BookViewScreen.BookAccess)(var1 == Items.WRITABLE_BOOK ? new BookViewScreen.WritableBookAccess(var0) : BookViewScreen.EMPTY_ACCESS);
-         }
-      }
-   }
 }
