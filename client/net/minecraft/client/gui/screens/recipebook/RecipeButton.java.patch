--- net/minecraft/client/gui/screens/recipebook/RecipeButton.java
+++ net/minecraft/client/gui/screens/recipebook/RecipeButton.java
@@ -7,10 +7,11 @@
 import java.util.Iterator;
 import java.util.List;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.components.AbstractWidget;
 import net.minecraft.client.gui.screens.Screen;
+import net.minecraft.client.renderer.GameRenderer;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.TextComponent;
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.stats.RecipeBook;
@@ -64,11 +65,12 @@
       if (!Screen.hasControlDown()) {
          this.time += var4;
       }
 
       Minecraft var5 = Minecraft.getInstance();
-      var5.getTextureManager().bind(RECIPE_BOOK_LOCATION);
+      RenderSystem.setShader(GameRenderer::getPositionTexShader);
+      RenderSystem.setShaderTexture(0, RECIPE_BOOK_LOCATION);
       int var6 = 29;
       if (!this.collection.hasCraftable()) {
          var6 += 25;
       }
 
@@ -76,32 +78,35 @@
       if (this.collection.getRecipes(this.book.isFiltering(this.menu)).size() > 1) {
          var7 += 25;
       }
 
       boolean var8 = this.animationTime > 0.0F;
+      PoseStack var9 = RenderSystem.getModelViewStack();
       if (var8) {
-         float var9 = 1.0F + 0.1F * (float)Math.sin((double)(this.animationTime / 15.0F * 3.1415927F));
-         RenderSystem.pushMatrix();
-         RenderSystem.translatef((float)(this.x + 8), (float)(this.y + 12), 0.0F);
-         RenderSystem.scalef(var9, var9, 1.0F);
-         RenderSystem.translatef((float)(-(this.x + 8)), (float)(-(this.y + 12)), 0.0F);
+         float var10 = 1.0F + 0.1F * (float)Math.sin((double)(this.animationTime / 15.0F * 3.1415927F));
+         var9.pushPose();
+         var9.translate((double)(this.x + 8), (double)(this.y + 12), 0.0D);
+         var9.scale(var10, var10, 1.0F);
+         var9.translate((double)(-(this.x + 8)), (double)(-(this.y + 12)), 0.0D);
+         RenderSystem.applyModelViewMatrix();
          this.animationTime -= var4;
       }
 
       this.blit(var1, this.x, this.y, var6, var7, this.width, this.height);
-      List var12 = this.getOrderedRecipes();
-      this.currentIndex = Mth.floor(this.time / 30.0F) % var12.size();
-      ItemStack var10 = ((Recipe)var12.get(this.currentIndex)).getResultItem();
-      int var11 = 4;
+      List var13 = this.getOrderedRecipes();
+      this.currentIndex = Mth.floor(this.time / 30.0F) % var13.size();
+      ItemStack var11 = ((Recipe)var13.get(this.currentIndex)).getResultItem();
+      int var12 = 4;
       if (this.collection.hasSingleResultItem() && this.getOrderedRecipes().size() > 1) {
-         var5.getItemRenderer().renderAndDecorateItem(var10, this.x + var11 + 1, this.y + var11 + 1);
-         --var11;
+         var5.getItemRenderer().renderAndDecorateItem(var11, this.x + var12 + 1, this.y + var12 + 1);
+         --var12;
       }
 
-      var5.getItemRenderer().renderAndDecorateFakeItem(var10, this.x + var11, this.y + var11);
+      var5.getItemRenderer().renderAndDecorateFakeItem(var11, this.x + var12, this.y + var12);
       if (var8) {
-         RenderSystem.popMatrix();
+         var9.popPose();
+         RenderSystem.applyModelViewMatrix();
       }
 
    }
 
    private List<Recipe<?>> getOrderedRecipes() {
