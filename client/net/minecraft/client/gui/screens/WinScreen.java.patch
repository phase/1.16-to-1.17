--- net/minecraft/client/gui/screens/WinScreen.java
+++ net/minecraft/client/gui/screens/WinScreen.java
@@ -1,14 +1,18 @@
 package net.minecraft.client.gui.screens;
 
 import com.google.common.collect.Lists;
+import com.google.gson.JsonArray;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
 import com.mojang.blaze3d.platform.GlStateManager;
 import com.mojang.blaze3d.systems.RenderSystem;
 import com.mojang.blaze3d.vertex.BufferBuilder;
 import com.mojang.blaze3d.vertex.DefaultVertexFormat;
 import com.mojang.blaze3d.vertex.PoseStack;
 import com.mojang.blaze3d.vertex.Tesselator;
+import com.mojang.blaze3d.vertex.VertexFormat;
 import it.unimi.dsi.fastutil.ints.IntOpenHashSet;
 import it.unimi.dsi.fastutil.ints.IntSet;
 import java.io.BufferedReader;
 import java.io.InputStream;
 import java.io.InputStreamReader;
@@ -17,52 +21,79 @@
 import java.util.List;
 import java.util.Random;
 import net.minecraft.ChatFormatting;
 import net.minecraft.client.gui.GuiComponent;
 import net.minecraft.client.gui.chat.NarratorChatListener;
+import net.minecraft.client.renderer.GameRenderer;
+import net.minecraft.network.chat.FormattedText;
 import net.minecraft.network.chat.TextComponent;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.packs.resources.Resource;
 import net.minecraft.util.FormattedCharSequence;
+import net.minecraft.util.GsonHelper;
 import org.apache.commons.io.IOUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class WinScreen extends Screen {
    private static final Logger LOGGER = LogManager.getLogger();
    private static final ResourceLocation LOGO_LOCATION = new ResourceLocation("textures/gui/title/minecraft.png");
    private static final ResourceLocation EDITION_LOCATION = new ResourceLocation("textures/gui/title/edition.png");
    private static final ResourceLocation VIGNETTE_LOCATION = new ResourceLocation("textures/misc/vignette.png");
+   private static final FormattedText SECTION_HEADING;
+   private static final String NAME_PREFIX = "           ";
    private static final String OBFUSCATE_TOKEN;
+   private static final int LOGO_WIDTH = 274;
+   private static final float SPEEDUP_FACTOR = 5.0F;
    private final boolean poem;
    private final Runnable onFinished;
-   private float time;
+   private float scroll;
    private List<FormattedCharSequence> lines;
    private IntSet centeredLines;
    private int totalScrollLength;
-   private float scrollSpeed = 0.5F;
+   private float scrollSpeed;
+   private final float unmodifiedScrollSpeed;
 
    public WinScreen(boolean var1, Runnable var2) {
       super(NarratorChatListener.NO_TITLE);
       this.poem = var1;
       this.onFinished = var2;
       if (!var1) {
-         this.scrollSpeed = 0.75F;
+         this.unmodifiedScrollSpeed = 0.75F;
+      } else {
+         this.unmodifiedScrollSpeed = 0.5F;
       }
 
+      this.scrollSpeed = this.unmodifiedScrollSpeed;
    }
 
    public void tick() {
       this.minecraft.getMusicManager().tick();
       this.minecraft.getSoundManager().tick(false);
-      float var1 = (float)(this.totalScrollLength + this.height + this.height + 24) / this.scrollSpeed;
-      if (this.time > var1) {
+      float var1 = (float)(this.totalScrollLength + this.height + this.height + 24);
+      if (this.scroll > var1) {
          this.respawn();
       }
 
    }
 
+   public boolean keyPressed(int var1, int var2, int var3) {
+      if (var1 == 32) {
+         this.scrollSpeed = this.unmodifiedScrollSpeed * 5.0F;
+      }
+
+      return super.keyPressed(var1, var2, var3);
+   }
+
+   public boolean keyReleased(int var1, int var2, int var3) {
+      if (var1 == 32) {
+         this.scrollSpeed = this.unmodifiedScrollSpeed;
+      }
+
+      return super.keyReleased(var1, var2, var3);
+   }
+
    public void onClose() {
       this.respawn();
    }
 
    private void respawn() {
@@ -75,179 +106,209 @@
          this.lines = Lists.newArrayList();
          this.centeredLines = new IntOpenHashSet();
          Resource var1 = null;
 
          try {
-            boolean var2 = true;
-            InputStream var3;
-            BufferedReader var4;
+            String var7;
             if (this.poem) {
                var1 = this.minecraft.getResourceManager().getResource(new ResourceLocation("texts/end.txt"));
-               var3 = var1.getInputStream();
-               var4 = new BufferedReader(new InputStreamReader(var3, StandardCharsets.UTF_8));
-               Random var5 = new Random(8124371L);
+               InputStream var2 = var1.getInputStream();
+               BufferedReader var3 = new BufferedReader(new InputStreamReader(var2, StandardCharsets.UTF_8));
+               Random var4 = new Random(8124371L);
 
-               label152:
+               label147:
                while(true) {
-                  String var6;
-                  int var7;
-                  if ((var6 = var4.readLine()) == null) {
-                     var3.close();
-                     var7 = 0;
+                  String var5;
+                  int var6;
+                  if ((var5 = var3.readLine()) == null) {
+                     var2.close();
+                     var6 = 0;
 
                      while(true) {
-                        if (var7 >= 8) {
-                           break label152;
+                        if (var6 >= 8) {
+                           break label147;
                         }
 
-                        this.lines.add(FormattedCharSequence.EMPTY);
-                        ++var7;
+                        this.addEmptyLine();
+                        ++var6;
                      }
                   }
 
                   String var8;
-                  String var9;
-                  for(var6 = var6.replaceAll("PLAYERNAME", this.minecraft.getUser().getName()); (var7 = var6.indexOf(OBFUSCATE_TOKEN)) != -1; var6 = var8 + ChatFormatting.WHITE + ChatFormatting.OBFUSCATED + "XXXXXXXX".substring(0, var5.nextInt(4) + 3) + var9) {
-                     var8 = var6.substring(0, var7);
-                     var9 = var6.substring(var7 + OBFUSCATE_TOKEN.length());
+                  for(var5 = var5.replaceAll("PLAYERNAME", this.minecraft.getUser().getName()); (var6 = var5.indexOf(OBFUSCATE_TOKEN)) != -1; var5 = var7 + ChatFormatting.WHITE + ChatFormatting.OBFUSCATED + "XXXXXXXX".substring(0, var4.nextInt(4) + 3) + var8) {
+                     var7 = var5.substring(0, var6);
+                     var8 = var5.substring(var6 + OBFUSCATE_TOKEN.length());
                   }
 
-                  this.lines.addAll(this.minecraft.font.split(new TextComponent(var6), 274));
-                  this.lines.add(FormattedCharSequence.EMPTY);
+                  this.addLines(var5, false);
+                  this.addEmptyLine();
                }
             }
 
-            var3 = this.minecraft.getResourceManager().getResource(new ResourceLocation("texts/credits.txt")).getInputStream();
-            var4 = new BufferedReader(new InputStreamReader(var3, StandardCharsets.UTF_8));
+            var1 = this.minecraft.getResourceManager().getResource(new ResourceLocation("texts/credits.json"));
+            JsonArray var22 = GsonHelper.parseArray(new InputStreamReader(var1.getInputStream(), StandardCharsets.UTF_8));
+            JsonArray var23 = var22.getAsJsonArray();
+            Iterator var24 = var23.iterator();
 
-            String var15;
-            while((var15 = var4.readLine()) != null) {
-               var15 = var15.replaceAll("PLAYERNAME", this.minecraft.getUser().getName());
-               var15 = var15.replaceAll("\t", "    ");
-               boolean var16;
-               if (var15.startsWith("[C]")) {
-                  var15 = var15.substring(3);
-                  var16 = true;
-               } else {
-                  var16 = false;
-               }
+            while(var24.hasNext()) {
+               JsonElement var25 = (JsonElement)var24.next();
+               JsonObject var26 = var25.getAsJsonObject();
+               var7 = var26.get("section").getAsString();
+               this.addLines(SECTION_HEADING, true);
+               this.addEmptyLine();
+               this.addLines((FormattedText)(new TextComponent(var7)).withStyle(ChatFormatting.YELLOW), true);
+               this.addEmptyLine();
+               this.addLines(SECTION_HEADING, true);
+               this.addEmptyLine();
+               this.addEmptyLine();
+               this.addEmptyLine();
+               JsonArray var27 = var26.getAsJsonArray("titles");
+               Iterator var9 = var27.iterator();
 
-               List var17 = this.minecraft.font.split(new TextComponent(var15), 274);
+               while(var9.hasNext()) {
+                  JsonElement var10 = (JsonElement)var9.next();
+                  JsonObject var11 = var10.getAsJsonObject();
+                  String var12 = var11.get("title").getAsString();
+                  JsonArray var13 = var11.getAsJsonArray("names");
+                  this.addLines((FormattedText)(new TextComponent(var12)).withStyle(ChatFormatting.GRAY), false);
+                  this.addEmptyLine();
+                  Iterator var14 = var13.iterator();
 
-               FormattedCharSequence var19;
-               for(Iterator var18 = var17.iterator(); var18.hasNext(); this.lines.add(var19)) {
-                  var19 = (FormattedCharSequence)var18.next();
-                  if (var16) {
-                     this.centeredLines.add(this.lines.size());
+                  while(var14.hasNext()) {
+                     JsonElement var15 = (JsonElement)var14.next();
+                     String var16 = var15.getAsString();
+                     this.addLines((FormattedText)(new TextComponent("           ")).append(new TextComponent(var16)).withStyle(ChatFormatting.WHITE), false);
+                     this.addEmptyLine();
                   }
-               }
 
-               this.lines.add(FormattedCharSequence.EMPTY);
+                  this.addEmptyLine();
+                  this.addEmptyLine();
+               }
             }
 
-            var3.close();
             this.totalScrollLength = this.lines.size() * 12;
-         } catch (Exception var13) {
-            LOGGER.error("Couldn't load credits", var13);
+         } catch (Exception var20) {
+            LOGGER.error("Couldn't load credits", var20);
          } finally {
             IOUtils.closeQuietly(var1);
          }
 
       }
    }
 
-   private void renderBg(int var1, int var2, float var3) {
-      this.minecraft.getTextureManager().bind(GuiComponent.BACKGROUND_LOCATION);
-      int var4 = this.width;
-      float var5 = -this.time * 0.5F * this.scrollSpeed;
-      float var6 = (float)this.height - this.time * 0.5F * this.scrollSpeed;
-      float var7 = 0.015625F;
-      float var8 = this.time * 0.02F;
-      float var9 = (float)(this.totalScrollLength + this.height + this.height + 24) / this.scrollSpeed;
-      float var10 = (var9 - 20.0F - this.time) * 0.005F;
-      if (var10 < var8) {
-         var8 = var10;
+   private void addEmptyLine() {
+      this.lines.add(FormattedCharSequence.EMPTY);
+   }
+
+   private void addLines(String var1, boolean var2) {
+      this.addLines((FormattedText)(new TextComponent(var1)), var2);
+   }
+
+   private void addLines(FormattedText var1, boolean var2) {
+      List var3 = this.minecraft.font.split(var1, 274);
+
+      FormattedCharSequence var5;
+      for(Iterator var4 = var3.iterator(); var4.hasNext(); this.lines.add(var5)) {
+         var5 = (FormattedCharSequence)var4.next();
+         if (var2) {
+            this.centeredLines.add(this.lines.size());
+         }
       }
 
-      if (var8 > 1.0F) {
-         var8 = 1.0F;
+   }
+
+   private void renderBg() {
+      RenderSystem.setShader(GameRenderer::getPositionTexColorShader);
+      RenderSystem.setShaderTexture(0, GuiComponent.BACKGROUND_LOCATION);
+      int var1 = this.width;
+      float var2 = -this.scroll * 0.5F;
+      float var3 = (float)this.height - 0.5F * this.scroll;
+      float var4 = 0.015625F;
+      float var5 = this.scroll / this.unmodifiedScrollSpeed;
+      float var6 = var5 * 0.02F;
+      float var7 = (float)(this.totalScrollLength + this.height + this.height + 24) / this.unmodifiedScrollSpeed;
+      float var8 = (var7 - 20.0F - var5) * 0.005F;
+      if (var8 < var6) {
+         var6 = var8;
       }
 
-      var8 *= var8;
-      var8 = var8 * 96.0F / 255.0F;
-      Tesselator var11 = Tesselator.getInstance();
-      BufferBuilder var12 = var11.getBuilder();
-      var12.begin(7, DefaultVertexFormat.POSITION_TEX_COLOR);
-      var12.vertex(0.0D, (double)this.height, (double)this.getBlitOffset()).uv(0.0F, var5 * 0.015625F).color(var8, var8, var8, 1.0F).endVertex();
-      var12.vertex((double)var4, (double)this.height, (double)this.getBlitOffset()).uv((float)var4 * 0.015625F, var5 * 0.015625F).color(var8, var8, var8, 1.0F).endVertex();
-      var12.vertex((double)var4, 0.0D, (double)this.getBlitOffset()).uv((float)var4 * 0.015625F, var6 * 0.015625F).color(var8, var8, var8, 1.0F).endVertex();
-      var12.vertex(0.0D, 0.0D, (double)this.getBlitOffset()).uv(0.0F, var6 * 0.015625F).color(var8, var8, var8, 1.0F).endVertex();
-      var11.end();
+      if (var6 > 1.0F) {
+         var6 = 1.0F;
+      }
+
+      var6 *= var6;
+      var6 = var6 * 96.0F / 255.0F;
+      Tesselator var9 = Tesselator.getInstance();
+      BufferBuilder var10 = var9.getBuilder();
+      var10.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION_TEX_COLOR);
+      var10.vertex(0.0D, (double)this.height, (double)this.getBlitOffset()).uv(0.0F, var2 * 0.015625F).color(var6, var6, var6, 1.0F).endVertex();
+      var10.vertex((double)var1, (double)this.height, (double)this.getBlitOffset()).uv((float)var1 * 0.015625F, var2 * 0.015625F).color(var6, var6, var6, 1.0F).endVertex();
+      var10.vertex((double)var1, 0.0D, (double)this.getBlitOffset()).uv((float)var1 * 0.015625F, var3 * 0.015625F).color(var6, var6, var6, 1.0F).endVertex();
+      var10.vertex(0.0D, 0.0D, (double)this.getBlitOffset()).uv(0.0F, var3 * 0.015625F).color(var6, var6, var6, 1.0F).endVertex();
+      var9.end();
    }
 
    public void render(PoseStack var1, int var2, int var3, float var4) {
-      this.renderBg(var2, var3, var4);
-      boolean var5 = true;
-      int var6 = this.width / 2 - 137;
-      int var7 = this.height + 50;
-      this.time += var4;
-      float var8 = -this.time * this.scrollSpeed;
-      RenderSystem.pushMatrix();
-      RenderSystem.translatef(0.0F, var8, 0.0F);
-      this.minecraft.getTextureManager().bind(LOGO_LOCATION);
-      RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
-      RenderSystem.enableAlphaTest();
+      this.scroll += var4 * this.scrollSpeed;
+      this.renderBg();
+      int var5 = this.width / 2 - 137;
+      int var6 = this.height + 50;
+      float var7 = -this.scroll;
+      var1.pushPose();
+      var1.translate(0.0D, (double)var7, 0.0D);
+      RenderSystem.setShaderTexture(0, LOGO_LOCATION);
+      RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
       RenderSystem.enableBlend();
-      this.blitOutlineBlack(var6, var7, (var2x, var3x) -> {
+      this.blitOutlineBlack(var5, var6, (var2x, var3x) -> {
          this.blit(var1, var2x + 0, var3x, 0, 0, 155, 44);
          this.blit(var1, var2x + 155, var3x, 0, 45, 155, 44);
       });
       RenderSystem.disableBlend();
-      this.minecraft.getTextureManager().bind(EDITION_LOCATION);
-      blit(var1, var6 + 88, var7 + 37, 0.0F, 0.0F, 98, 14, 128, 16);
-      RenderSystem.disableAlphaTest();
-      int var9 = var7 + 100;
+      RenderSystem.setShaderTexture(0, EDITION_LOCATION);
+      blit(var1, var5 + 88, var6 + 37, 0.0F, 0.0F, 98, 14, 128, 16);
+      int var8 = var6 + 100;
 
-      int var10;
-      for(var10 = 0; var10 < this.lines.size(); ++var10) {
-         if (var10 == this.lines.size() - 1) {
-            float var11 = (float)var9 + var8 - (float)(this.height / 2 - 6);
-            if (var11 < 0.0F) {
-               RenderSystem.translatef(0.0F, -var11, 0.0F);
+      int var9;
+      for(var9 = 0; var9 < this.lines.size(); ++var9) {
+         if (var9 == this.lines.size() - 1) {
+            float var10 = (float)var8 + var7 - (float)(this.height / 2 - 6);
+            if (var10 < 0.0F) {
+               var1.translate(0.0D, (double)(-var10), 0.0D);
             }
          }
 
-         if ((float)var9 + var8 + 12.0F + 8.0F > 0.0F && (float)var9 + var8 < (float)this.height) {
-            FormattedCharSequence var14 = (FormattedCharSequence)this.lines.get(var10);
-            if (this.centeredLines.contains(var10)) {
-               this.font.drawShadow(var1, var14, (float)(var6 + (274 - this.font.width(var14)) / 2), (float)var9, 16777215);
+         if ((float)var8 + var7 + 12.0F + 8.0F > 0.0F && (float)var8 + var7 < (float)this.height) {
+            FormattedCharSequence var13 = (FormattedCharSequence)this.lines.get(var9);
+            if (this.centeredLines.contains(var9)) {
+               this.font.drawShadow(var1, var13, (float)(var5 + (274 - this.font.width(var13)) / 2), (float)var8, 16777215);
             } else {
-               this.font.random.setSeed((long)((float)((long)var10 * 4238972211L) + this.time / 4.0F));
-               this.font.drawShadow(var1, var14, (float)var6, (float)var9, 16777215);
+               this.font.drawShadow(var1, var13, (float)var5, (float)var8, 16777215);
             }
          }
 
-         var9 += 12;
+         var8 += 12;
       }
 
-      RenderSystem.popMatrix();
-      this.minecraft.getTextureManager().bind(VIGNETTE_LOCATION);
+      var1.popPose();
+      RenderSystem.setShader(GameRenderer::getPositionTexColorShader);
+      RenderSystem.setShaderTexture(0, VIGNETTE_LOCATION);
       RenderSystem.enableBlend();
       RenderSystem.blendFunc(GlStateManager.SourceFactor.ZERO, GlStateManager.DestFactor.ONE_MINUS_SRC_COLOR);
-      var10 = this.width;
-      int var15 = this.height;
-      Tesselator var12 = Tesselator.getInstance();
-      BufferBuilder var13 = var12.getBuilder();
-      var13.begin(7, DefaultVertexFormat.POSITION_TEX_COLOR);
-      var13.vertex(0.0D, (double)var15, (double)this.getBlitOffset()).uv(0.0F, 1.0F).color(1.0F, 1.0F, 1.0F, 1.0F).endVertex();
-      var13.vertex((double)var10, (double)var15, (double)this.getBlitOffset()).uv(1.0F, 1.0F).color(1.0F, 1.0F, 1.0F, 1.0F).endVertex();
-      var13.vertex((double)var10, 0.0D, (double)this.getBlitOffset()).uv(1.0F, 0.0F).color(1.0F, 1.0F, 1.0F, 1.0F).endVertex();
-      var13.vertex(0.0D, 0.0D, (double)this.getBlitOffset()).uv(0.0F, 0.0F).color(1.0F, 1.0F, 1.0F, 1.0F).endVertex();
-      var12.end();
+      var9 = this.width;
+      int var14 = this.height;
+      Tesselator var11 = Tesselator.getInstance();
+      BufferBuilder var12 = var11.getBuilder();
+      var12.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION_TEX_COLOR);
+      var12.vertex(0.0D, (double)var14, (double)this.getBlitOffset()).uv(0.0F, 1.0F).color(1.0F, 1.0F, 1.0F, 1.0F).endVertex();
+      var12.vertex((double)var9, (double)var14, (double)this.getBlitOffset()).uv(1.0F, 1.0F).color(1.0F, 1.0F, 1.0F, 1.0F).endVertex();
+      var12.vertex((double)var9, 0.0D, (double)this.getBlitOffset()).uv(1.0F, 0.0F).color(1.0F, 1.0F, 1.0F, 1.0F).endVertex();
+      var12.vertex(0.0D, 0.0D, (double)this.getBlitOffset()).uv(0.0F, 0.0F).color(1.0F, 1.0F, 1.0F, 1.0F).endVertex();
+      var11.end();
       RenderSystem.disableBlend();
       super.render(var1, var2, var3, var4);
    }
 
    static {
-      OBFUSCATE_TOKEN = "" + ChatFormatting.WHITE + ChatFormatting.OBFUSCATED + ChatFormatting.GREEN + ChatFormatting.AQUA;
+      SECTION_HEADING = (new TextComponent("============")).withStyle(ChatFormatting.WHITE);
+      OBFUSCATE_TOKEN = ChatFormatting.WHITE + ChatFormatting.OBFUSCATED + ChatFormatting.GREEN + ChatFormatting.AQUA;
    }
 }
