--- net/minecraft/client/gui/screens/PopupScreen.java
+++ net/minecraft/client/gui/screens/PopupScreen.java
@@ -2,81 +2,87 @@
 
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.UnmodifiableIterator;
 import com.mojang.blaze3d.vertex.PoseStack;
 import java.util.List;
-import net.minecraft.client.Minecraft;
+import java.util.Objects;
 import net.minecraft.client.gui.Font;
 import net.minecraft.client.gui.components.Button;
 import net.minecraft.client.gui.components.MultiLineLabel;
+import net.minecraft.network.chat.CommonComponents;
 import net.minecraft.network.chat.Component;
+import net.minecraft.network.chat.ComponentUtils;
 import net.minecraft.network.chat.FormattedText;
+import net.minecraft.network.chat.TextComponent;
 
 public class PopupScreen extends Screen {
+   private static final int BUTTON_PADDING = 20;
+   private static final int BUTTON_MARGIN = 5;
+   private static final int BUTTON_HEIGHT = 20;
+   private final Component narrationMessage;
    private final FormattedText message;
    private final ImmutableList<PopupScreen.ButtonOption> buttonOptions;
    private MultiLineLabel messageLines;
    private int contentTop;
    private int buttonWidth;
 
-   protected PopupScreen(Component var1, List<FormattedText> var2, ImmutableList<PopupScreen.ButtonOption> var3) {
+   protected PopupScreen(Component var1, List<Component> var2, ImmutableList<PopupScreen.ButtonOption> var3) {
       super(var1);
       this.messageLines = MultiLineLabel.EMPTY;
       this.message = FormattedText.composite(var2);
+      this.narrationMessage = CommonComponents.joinForNarration(var1, ComponentUtils.formatList(var2, (Component)TextComponent.EMPTY));
       this.buttonOptions = var3;
    }
 
-   public String getNarrationMessage() {
-      return super.getNarrationMessage() + ". " + this.message.getString();
+   public Component getNarrationMessage() {
+      return this.narrationMessage;
    }
 
-   public void init(Minecraft var1, int var2, int var3) {
-      super.init(var1, var2, var3);
-
-      PopupScreen.ButtonOption var5;
-      for(UnmodifiableIterator var4 = this.buttonOptions.iterator(); var4.hasNext(); this.buttonWidth = Math.max(this.buttonWidth, 20 + this.font.width((FormattedText)var5.message) + 20)) {
-         var5 = (PopupScreen.ButtonOption)var4.next();
+   public void init() {
+      PopupScreen.ButtonOption var2;
+      for(UnmodifiableIterator var1 = this.buttonOptions.iterator(); var1.hasNext(); this.buttonWidth = Math.max(this.buttonWidth, 20 + this.font.width((FormattedText)var2.message) + 20)) {
+         var2 = (PopupScreen.ButtonOption)var1.next();
       }
 
-      int var11 = 5 + this.buttonWidth + 5;
-      int var12 = var11 * this.buttonOptions.size();
-      this.messageLines = MultiLineLabel.create(this.font, this.message, var12);
+      int var8 = 5 + this.buttonWidth + 5;
+      int var9 = var8 * this.buttonOptions.size();
+      this.messageLines = MultiLineLabel.create(this.font, this.message, var9);
       int var10000 = this.messageLines.getLineCount();
-      this.font.getClass();
-      int var6 = var10000 * 9;
-      this.contentTop = (int)((double)var3 / 2.0D - (double)var6 / 2.0D);
-      var10000 = this.contentTop + var6;
-      this.font.getClass();
-      int var7 = var10000 + 9 * 2;
-      int var8 = (int)((double)var2 / 2.0D - (double)var12 / 2.0D);
+      Objects.requireNonNull(this.font);
+      int var3 = var10000 * 9;
+      this.contentTop = (int)((double)this.height / 2.0D - (double)var3 / 2.0D);
+      var10000 = this.contentTop + var3;
+      Objects.requireNonNull(this.font);
+      int var4 = var10000 + 9 * 2;
+      int var5 = (int)((double)this.width / 2.0D - (double)var9 / 2.0D);
 
-      for(UnmodifiableIterator var9 = this.buttonOptions.iterator(); var9.hasNext(); var8 += var11) {
-         PopupScreen.ButtonOption var10 = (PopupScreen.ButtonOption)var9.next();
-         this.addButton(new Button(var8, var7, this.buttonWidth, 20, var10.message, var10.onPress));
+      for(UnmodifiableIterator var6 = this.buttonOptions.iterator(); var6.hasNext(); var5 += var8) {
+         PopupScreen.ButtonOption var7 = (PopupScreen.ButtonOption)var6.next();
+         this.addRenderableWidget(new Button(var5, var4, this.buttonWidth, 20, var7.message, var7.onPress));
       }
 
    }
 
    public void render(PoseStack var1, int var2, int var3, float var4) {
       this.renderDirtBackground(0);
       Font var10001 = this.font;
       Component var10002 = this.title;
       int var10003 = this.width / 2;
       int var10004 = this.contentTop;
-      this.font.getClass();
+      Objects.requireNonNull(this.font);
       drawCenteredString(var1, var10001, var10002, var10003, var10004 - 9 * 2, -1);
       this.messageLines.renderCentered(var1, this.width / 2, this.contentTop);
       super.render(var1, var2, var3, var4);
    }
 
    public boolean shouldCloseOnEsc() {
       return false;
    }
 
    public static final class ButtonOption {
-      private final Component message;
-      private final Button.OnPress onPress;
+      final Component message;
+      final Button.OnPress onPress;
 
       public ButtonOption(Component var1, Button.OnPress var2) {
          this.message = var1;
          this.onPress = var2;
       }
