--- net/minecraft/client/gui/screens/worldselection/WorldGenSettingsComponent.java
+++ net/minecraft/client/gui/screens/worldselection/WorldGenSettingsComponent.java
@@ -12,37 +12,38 @@
 import it.unimi.dsi.fastutil.booleans.BooleanConsumer;
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.nio.file.Files;
 import java.nio.file.Paths;
-import java.util.Objects;
+import java.util.List;
 import java.util.Optional;
 import java.util.OptionalLong;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ExecutionException;
+import java.util.stream.Collectors;
 import net.minecraft.Util;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.Font;
 import net.minecraft.client.gui.components.Button;
+import net.minecraft.client.gui.components.CycleButton;
 import net.minecraft.client.gui.components.EditBox;
 import net.minecraft.client.gui.components.MultiLineLabel;
 import net.minecraft.client.gui.components.TickableWidget;
 import net.minecraft.client.gui.components.Widget;
 import net.minecraft.client.gui.components.toasts.SystemToast;
 import net.minecraft.client.gui.screens.ConfirmScreen;
-import net.minecraft.client.gui.screens.Screen;
 import net.minecraft.commands.Commands;
 import net.minecraft.core.RegistryAccess;
 import net.minecraft.network.chat.CommonComponents;
 import net.minecraft.network.chat.Component;
-import net.minecraft.network.chat.MutableComponent;
 import net.minecraft.network.chat.TextComponent;
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.resources.RegistryReadOps;
 import net.minecraft.resources.RegistryWriteOps;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.ServerResources;
+import net.minecraft.server.packs.PackType;
 import net.minecraft.server.packs.repository.FolderRepositorySource;
 import net.minecraft.server.packs.repository.PackRepository;
 import net.minecraft.server.packs.repository.PackSource;
 import net.minecraft.server.packs.repository.RepositorySource;
 import net.minecraft.server.packs.repository.ServerPacksSource;
@@ -57,17 +58,19 @@
 public class WorldGenSettingsComponent implements TickableWidget, Widget {
    private static final Logger LOGGER = LogManager.getLogger();
    private static final Component CUSTOM_WORLD_DESCRIPTION = new TranslatableComponent("generator.custom");
    private static final Component AMPLIFIED_HELP_TEXT = new TranslatableComponent("generator.amplified.info");
    private static final Component MAP_FEATURES_INFO = new TranslatableComponent("selectWorld.mapFeatures.info");
+   private static final Component SELECT_FILE_PROMPT = new TranslatableComponent("selectWorld.import_worldgen_settings.select_file");
    private MultiLineLabel amplifiedWorldInfo;
    private Font font;
    private int width;
    private EditBox seedEdit;
-   private Button featuresButton;
-   public Button bonusItemsButton;
-   private Button typeButton;
+   private CycleButton<Boolean> featuresButton;
+   private CycleButton<Boolean> bonusItemsButton;
+   private CycleButton<WorldPreset> typeButton;
+   private Button customWorldDummyButton;
    private Button customizeTypeButton;
    private Button importSettingsButton;
    private RegistryAccess.RegistryHolder registryHolder;
    private WorldGenSettings settings;
    private Optional<WorldPreset> preset;
@@ -79,162 +82,132 @@
       this.settings = var2;
       this.preset = var3;
       this.seed = var4;
    }
 
-   public void init(final CreateWorldScreen var1, Minecraft var2, Font var3) {
+   public void init(CreateWorldScreen var1, Minecraft var2, Font var3) {
       this.font = var3;
       this.width = var1.width;
       this.seedEdit = new EditBox(this.font, this.width / 2 - 100, 60, 200, 20, new TranslatableComponent("selectWorld.enterSeed"));
       this.seedEdit.setValue(toString(this.seed));
       this.seedEdit.setResponder((var1x) -> {
          this.seed = this.parseSeed();
       });
       var1.addWidget(this.seedEdit);
       int var4 = this.width / 2 - 155;
       int var5 = this.width / 2 + 5;
-      this.featuresButton = (Button)var1.addButton(new Button(var4, 100, 150, 20, new TranslatableComponent("selectWorld.mapFeatures"), (var1x) -> {
+      this.featuresButton = (CycleButton)var1.addButton(CycleButton.onOffBuilder(this.settings.generateFeatures()).withCustomNarration((var0) -> {
+         return var0.createDefaultNarrationMessage().append(". ").append((Component)(new TranslatableComponent("selectWorld.mapFeatures.info")));
+      }).create(var4, 100, 150, 20, new TranslatableComponent("selectWorld.mapFeatures"), (var1x, var2x) -> {
          this.settings = this.settings.withFeaturesToggled();
-         var1x.queueNarration(250);
-      }) {
-         public Component getMessage() {
-            return CommonComponents.optionStatus(super.getMessage(), WorldGenSettingsComponent.this.settings.generateFeatures());
-         }
-
-         protected MutableComponent createNarrationMessage() {
-            return super.createNarrationMessage().append(". ").append((Component)(new TranslatableComponent("selectWorld.mapFeatures.info")));
-         }
-      });
+      }));
       this.featuresButton.visible = false;
-      this.typeButton = (Button)var1.addButton(new Button(var5, 100, 150, 20, new TranslatableComponent("selectWorld.mapType"), (var2x) -> {
-         while(true) {
-            if (this.preset.isPresent()) {
-               int var3 = WorldPreset.PRESETS.indexOf(this.preset.get()) + 1;
-               if (var3 >= WorldPreset.PRESETS.size()) {
-                  var3 = 0;
-               }
-
-               WorldPreset var4 = (WorldPreset)WorldPreset.PRESETS.get(var3);
-               this.preset = Optional.of(var4);
-               this.settings = var4.create(this.registryHolder, this.settings.seed(), this.settings.generateFeatures(), this.settings.generateBonusChest());
-               if (this.settings.isDebug() && !Screen.hasShiftDown()) {
-                  continue;
-               }
-            }
-
-            var1.updateDisplayOptions();
-            var2x.queueNarration(250);
-            return;
-         }
-      }) {
-         public Component getMessage() {
-            return super.getMessage().copy().append(" ").append((Component)WorldGenSettingsComponent.this.preset.map(WorldPreset::description).orElse(WorldGenSettingsComponent.CUSTOM_WORLD_DESCRIPTION));
-         }
-
-         protected MutableComponent createNarrationMessage() {
-            return Objects.equals(WorldGenSettingsComponent.this.preset, Optional.of(WorldPreset.AMPLIFIED)) ? super.createNarrationMessage().append(". ").append(WorldGenSettingsComponent.AMPLIFIED_HELP_TEXT) : super.createNarrationMessage();
-         }
-      });
+      this.typeButton = (CycleButton)var1.addButton(CycleButton.builder(WorldPreset::description).withValues((List)WorldPreset.PRESETS.stream().filter(WorldPreset::isVisibleByDefault).collect(Collectors.toList()), WorldPreset.PRESETS).withCustomNarration((var0) -> {
+         return var0.getValue() == WorldPreset.AMPLIFIED ? var0.createDefaultNarrationMessage().append(". ").append(AMPLIFIED_HELP_TEXT) : var0.createDefaultNarrationMessage();
+      }).create(var5, 100, 150, 20, new TranslatableComponent("selectWorld.mapType"), (var2x, var3x) -> {
+         this.preset = Optional.of(var3x);
+         this.settings = var3x.create(this.registryHolder, this.settings.seed(), this.settings.generateFeatures(), this.settings.generateBonusChest());
+         var1.refreshWorldGenSettingsVisibility();
+      }));
+      CycleButton var10001 = this.typeButton;
+      this.preset.ifPresent(var10001::setValue);
       this.typeButton.visible = false;
-      this.typeButton.active = this.preset.isPresent();
+      this.customWorldDummyButton = (Button)var1.addButton(new Button(var5, 100, 150, 20, CommonComponents.optionNameValue(new TranslatableComponent("selectWorld.mapType"), CUSTOM_WORLD_DESCRIPTION), (var0) -> {
+      }));
+      this.customWorldDummyButton.active = false;
+      this.customWorldDummyButton.visible = false;
       this.customizeTypeButton = (Button)var1.addButton(new Button(var5, 120, 150, 20, new TranslatableComponent("selectWorld.customizeType"), (var3x) -> {
          WorldPreset.PresetEditor var4 = (WorldPreset.PresetEditor)WorldPreset.EDITORS.get(this.preset);
          if (var4 != null) {
             var2.setScreen(var4.createEditScreen(var1, this.settings));
          }
 
       }));
       this.customizeTypeButton.visible = false;
-      this.bonusItemsButton = (Button)var1.addButton(new Button(var4, 151, 150, 20, new TranslatableComponent("selectWorld.bonusItems"), (var1x) -> {
+      this.bonusItemsButton = (CycleButton)var1.addButton(CycleButton.onOffBuilder(this.settings.generateBonusChest() && !var1.hardCore).create(var4, 151, 150, 20, new TranslatableComponent("selectWorld.bonusItems"), (var1x, var2x) -> {
          this.settings = this.settings.withBonusChestToggled();
-         var1x.queueNarration(250);
-      }) {
-         public Component getMessage() {
-            return CommonComponents.optionStatus(super.getMessage(), WorldGenSettingsComponent.this.settings.generateBonusChest() && !var1.hardCore);
-         }
-      });
+      }));
       this.bonusItemsButton.visible = false;
       this.importSettingsButton = (Button)var1.addButton(new Button(var4, 185, 150, 20, new TranslatableComponent("selectWorld.import_worldgen_settings"), (var3x) -> {
-         TranslatableComponent var4 = new TranslatableComponent("selectWorld.import_worldgen_settings.select_file");
-         String var5 = TinyFileDialogs.tinyfd_openFileDialog(var4.getString(), (CharSequence)null, (PointerBuffer)null, (CharSequence)null, false);
-         if (var5 != null) {
-            RegistryAccess.RegistryHolder var6 = RegistryAccess.builtin();
-            PackRepository var7 = new PackRepository(new RepositorySource[]{new ServerPacksSource(), new FolderRepositorySource(var1.getTempDataPackDir().toFile(), PackSource.WORLD)});
+         String var4 = TinyFileDialogs.tinyfd_openFileDialog(SELECT_FILE_PROMPT.getString(), (CharSequence)null, (PointerBuffer)null, (CharSequence)null, false);
+         if (var4 != null) {
+            RegistryAccess.RegistryHolder var5 = RegistryAccess.builtin();
+            PackRepository var6 = new PackRepository(PackType.SERVER_DATA, new RepositorySource[]{new ServerPacksSource(), new FolderRepositorySource(var1.getTempDataPackDir().toFile(), PackSource.WORLD)});
 
-            ServerResources var8;
+            ServerResources var7;
             try {
-               MinecraftServer.configurePackRepository(var7, var1.dataPacks, false);
-               CompletableFuture var9 = ServerResources.loadResources(var7.openAllSelected(), Commands.CommandSelection.INTEGRATED, 2, Util.backgroundExecutor(), var2);
-               var2.managedBlock(var9::isDone);
-               var8 = (ServerResources)var9.get();
-            } catch (ExecutionException | InterruptedException var25) {
-               LOGGER.error("Error loading data packs when importing world settings", var25);
-               TranslatableComponent var10 = new TranslatableComponent("selectWorld.import_worldgen_settings.failure");
-               TextComponent var11 = new TextComponent(var25.getMessage());
-               var2.getToasts().addToast(SystemToast.multiline(var2, SystemToast.SystemToastIds.WORLD_GEN_SETTINGS_TRANSFER, var10, var11));
-               var7.close();
+               MinecraftServer.configurePackRepository(var6, var1.dataPacks, false);
+               CompletableFuture var8 = ServerResources.loadResources(var6.openAllSelected(), var5, Commands.CommandSelection.INTEGRATED, 2, Util.backgroundExecutor(), var2);
+               var2.managedBlock(var8::isDone);
+               var7 = (ServerResources)var8.get();
+            } catch (ExecutionException | InterruptedException var24) {
+               LOGGER.error("Error loading data packs when importing world settings", var24);
+               TranslatableComponent var9 = new TranslatableComponent("selectWorld.import_worldgen_settings.failure");
+               TextComponent var10 = new TextComponent(var24.getMessage());
+               var2.getToasts().addToast(SystemToast.multiline(var2, SystemToast.SystemToastIds.WORLD_GEN_SETTINGS_TRANSFER, var9, var10));
+               var6.close();
                return;
             }
 
-            RegistryReadOps var28 = RegistryReadOps.create(JsonOps.INSTANCE, (ResourceManager)var8.getResourceManager(), var6);
-            JsonParser var29 = new JsonParser();
+            RegistryReadOps var27 = RegistryReadOps.create(JsonOps.INSTANCE, (ResourceManager)var7.getResourceManager(), var5);
+            JsonParser var28 = new JsonParser();
 
-            DataResult var30;
+            DataResult var29;
             try {
-               BufferedReader var12 = Files.newBufferedReader(Paths.get(var5));
-               Throwable var13 = null;
+               BufferedReader var11 = Files.newBufferedReader(Paths.get(var4));
+               Throwable var12 = null;
 
                try {
-                  JsonElement var14 = var29.parse(var12);
-                  var30 = WorldGenSettings.CODEC.parse(var28, var14);
-               } catch (Throwable var24) {
-                  var13 = var24;
-                  throw var24;
+                  JsonElement var13 = var28.parse(var11);
+                  var29 = WorldGenSettings.CODEC.parse(var27, var13);
+               } catch (Throwable var23) {
+                  var12 = var23;
+                  throw var23;
                } finally {
-                  if (var12 != null) {
-                     if (var13 != null) {
+                  if (var11 != null) {
+                     if (var12 != null) {
                         try {
-                           var12.close();
-                        } catch (Throwable var23) {
-                           var13.addSuppressed(var23);
+                           var11.close();
+                        } catch (Throwable var22) {
+                           var12.addSuppressed(var22);
                         }
                      } else {
-                        var12.close();
+                        var11.close();
                      }
                   }
 
                }
-            } catch (JsonIOException | JsonSyntaxException | IOException var27) {
-               var30 = DataResult.error("Failed to parse file: " + var27.getMessage());
+            } catch (JsonIOException | JsonSyntaxException | IOException var26) {
+               var29 = DataResult.error("Failed to parse file: " + var26.getMessage());
             }
 
-            if (var30.error().isPresent()) {
-               TranslatableComponent var31 = new TranslatableComponent("selectWorld.import_worldgen_settings.failure");
-               String var33 = ((PartialResult)var30.error().get()).message();
-               LOGGER.error("Error parsing world settings: {}", var33);
-               TextComponent var34 = new TextComponent(var33);
-               var2.getToasts().addToast(SystemToast.multiline(var2, SystemToast.SystemToastIds.WORLD_GEN_SETTINGS_TRANSFER, var31, var34));
+            if (var29.error().isPresent()) {
+               TranslatableComponent var30 = new TranslatableComponent("selectWorld.import_worldgen_settings.failure");
+               String var32 = ((PartialResult)var29.error().get()).message();
+               LOGGER.error("Error parsing world settings: {}", var32);
+               TextComponent var33 = new TextComponent(var32);
+               var2.getToasts().addToast(SystemToast.multiline(var2, SystemToast.SystemToastIds.WORLD_GEN_SETTINGS_TRANSFER, var30, var33));
             }
 
-            var8.close();
-            Lifecycle var32 = var30.lifecycle();
+            var7.close();
+            Lifecycle var31 = var29.lifecycle();
             Logger var10001 = LOGGER;
             var10001.getClass();
-            var30.resultOrPartial(var10001::error).ifPresent((var5x) -> {
-               BooleanConsumer var6x = (var5) -> {
+            var29.resultOrPartial(var10001::error).ifPresent((var5x) -> {
+               BooleanConsumer var6 = (var5xx) -> {
                   var2.setScreen(var1);
-                  if (var5) {
-                     this.importSettings(var6, var5x);
+                  if (var5xx) {
+                     this.importSettings(var5, var5x);
                   }
 
                };
-               if (var32 == Lifecycle.stable()) {
-                  this.importSettings(var6, var5x);
-               } else if (var32 == Lifecycle.experimental()) {
-                  var2.setScreen(new ConfirmScreen(var6x, new TranslatableComponent("selectWorld.import_worldgen_settings.experimental.title"), new TranslatableComponent("selectWorld.import_worldgen_settings.experimental.question")));
+               if (var31 == Lifecycle.stable()) {
+                  this.importSettings(var5, var5x);
+               } else if (var31 == Lifecycle.experimental()) {
+                  var2.setScreen(new ConfirmScreen(var6, new TranslatableComponent("selectWorld.import_worldgen_settings.experimental.title"), new TranslatableComponent("selectWorld.import_worldgen_settings.experimental.question")));
                } else {
-                  var2.setScreen(new ConfirmScreen(var6x, new TranslatableComponent("selectWorld.import_worldgen_settings.deprecated.title"), new TranslatableComponent("selectWorld.import_worldgen_settings.deprecated.question")));
+                  var2.setScreen(new ConfirmScreen(var6, new TranslatableComponent("selectWorld.import_worldgen_settings.deprecated.title"), new TranslatableComponent("selectWorld.import_worldgen_settings.deprecated.question")));
                }
 
             });
          }
       }));
@@ -244,13 +217,13 @@
 
    private void importSettings(RegistryAccess.RegistryHolder var1, WorldGenSettings var2) {
       this.registryHolder = var1;
       this.settings = var2;
       this.preset = WorldPreset.of(var2);
+      this.selectWorldTypeButton(true);
       this.seed = OptionalLong.of(var2.seed());
       this.seedEdit.setValue(toString(this.seed));
-      this.typeButton.active = this.preset.isPresent();
    }
 
    public void tick() {
       this.seedEdit.tick();
    }
@@ -311,12 +284,12 @@
 
    public boolean isDebug() {
       return this.settings.isDebug();
    }
 
-   public void setDisplayOptions(boolean var1) {
-      this.typeButton.visible = var1;
+   public void setVisibility(boolean var1) {
+      this.selectWorldTypeButton(var1);
       if (this.settings.isDebug()) {
          this.featuresButton.visible = false;
          this.bonusItemsButton.visible = false;
          this.customizeTypeButton.visible = false;
          this.importSettingsButton.visible = false;
@@ -328,10 +301,21 @@
       }
 
       this.seedEdit.setVisible(var1);
    }
 
+   private void selectWorldTypeButton(boolean var1) {
+      if (this.preset.isPresent()) {
+         this.typeButton.visible = var1;
+         this.customWorldDummyButton.visible = false;
+      } else {
+         this.typeButton.visible = false;
+         this.customWorldDummyButton.visible = var1;
+      }
+
+   }
+
    public RegistryAccess.RegistryHolder registryHolder() {
       return this.registryHolder;
    }
 
    void updateDataPacks(ServerResources var1) {
@@ -346,6 +330,16 @@
       var5.resultOrPartial(Util.prefix("Error parsing worldgen settings after loading data packs: ", var10002::error)).ifPresent((var2x) -> {
          this.settings = var2x;
          this.registryHolder = var2;
       });
    }
+
+   public void switchToHardcore() {
+      this.bonusItemsButton.active = false;
+      this.bonusItemsButton.setValue(false);
+   }
+
+   public void switchOutOfHardcode() {
+      this.bonusItemsButton.active = true;
+      this.bonusItemsButton.setValue(this.settings.generateBonusChest());
+   }
 }
