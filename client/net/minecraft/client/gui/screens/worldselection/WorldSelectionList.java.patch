--- net/minecraft/client/gui/screens/worldselection/WorldSelectionList.java
+++ net/minecraft/client/gui/screens/worldselection/WorldSelectionList.java
@@ -68,10 +68,11 @@
    private static final Component FROM_NEWER_TOOLTIP_1;
    private static final Component FROM_NEWER_TOOLTIP_2;
    private static final Component SNAPSHOT_TOOLTIP_1;
    private static final Component SNAPSHOT_TOOLTIP_2;
    private static final Component WORLD_LOCKED_TOOLTIP;
+   private static final Component WORLD_PRE_WORLDHEIGHT_TOOLTIP;
    private final SelectWorldScreen screen;
    @Nullable
    private List<LevelSummary> cachedList;
 
    public WorldSelectionList(SelectWorldScreen var1, Minecraft var2, int var3, int var4, int var5, int var6, int var7, Supplier<String> var8, @Nullable WorldSelectionList var9) {
@@ -137,16 +138,16 @@
       if (var1 != null) {
          LevelSummary var2 = var1.summary;
          NarratorChatListener.INSTANCE.sayNow((new TranslatableComponent("narrator.select", new Object[]{new TranslatableComponent("narrator.select.world", new Object[]{var2.getLevelName(), new Date(var2.getLastPlayed()), var2.isHardcore() ? new TranslatableComponent("gameMode.hardcore") : new TranslatableComponent("gameMode." + var2.getGameMode().getName()), var2.hasCheats() ? new TranslatableComponent("selectWorld.cheats") : TextComponent.EMPTY, var2.getWorldVersionName()})})).getString());
       }
 
-      this.screen.updateButtonStatus(var1 != null && !var1.summary.isLocked());
+      this.screen.updateButtonStatus(var1 != null && !var1.summary.isDisabled());
    }
 
    protected void moveSelection(AbstractSelectionList.SelectionDirection var1) {
       this.moveSelection(var1, (var0) -> {
-         return !var0.summary.isLocked();
+         return !var0.summary.isDisabled();
       });
    }
 
    public Optional<WorldSelectionList.WorldListEntry> getSelectedOpt() {
       return Optional.ofNullable(this.getSelected());
@@ -160,10 +161,11 @@
       FROM_NEWER_TOOLTIP_1 = (new TranslatableComponent("selectWorld.tooltip.fromNewerVersion1")).withStyle(ChatFormatting.RED);
       FROM_NEWER_TOOLTIP_2 = (new TranslatableComponent("selectWorld.tooltip.fromNewerVersion2")).withStyle(ChatFormatting.RED);
       SNAPSHOT_TOOLTIP_1 = (new TranslatableComponent("selectWorld.tooltip.snapshot1")).withStyle(ChatFormatting.GOLD);
       SNAPSHOT_TOOLTIP_2 = (new TranslatableComponent("selectWorld.tooltip.snapshot2")).withStyle(ChatFormatting.GOLD);
       WORLD_LOCKED_TOOLTIP = (new TranslatableComponent("selectWorld.locked")).withStyle(ChatFormatting.RED);
+      WORLD_PRE_WORLDHEIGHT_TOOLTIP = (new TranslatableComponent("selectWorld.pre_worldheight")).withStyle(ChatFormatting.RED);
    }
 
    public final class WorldListEntry extends ObjectSelectionList.Entry<WorldSelectionList.WorldListEntry> implements AutoCloseable {
       private final Minecraft minecraft;
       private final SelectWorldScreen screen;
@@ -222,10 +224,15 @@
             if (this.summary.isLocked()) {
                GuiComponent.blit(var1, var4, var3, 96.0F, (float)var16, 32, 32, 256, 256);
                if (var15) {
                   this.screen.setToolTip(this.minecraft.font.split(WorldSelectionList.WORLD_LOCKED_TOOLTIP, 175));
                }
+            } else if (this.summary.isPreWorldheight()) {
+               GuiComponent.blit(var1, var4, var3, 96.0F, 32.0F, 32, 32, 256, 256);
+               if (var15) {
+                  this.screen.setToolTip(this.minecraft.font.split(WorldSelectionList.WORLD_PRE_WORLDHEIGHT_TOOLTIP, 175));
+               }
             } else if (this.summary.markVersionInList()) {
                GuiComponent.blit(var1, var4, var3, 32.0F, (float)var16, 32, 32, 256, 256);
                if (this.summary.askToOpenWorld()) {
                   GuiComponent.blit(var1, var4, var3, 96.0F, (float)var16, 32, 32, 256, 256);
                   if (var15) {
@@ -243,11 +250,11 @@
          }
 
       }
 
       public boolean mouseClicked(double var1, double var3, int var5) {
-         if (this.summary.isLocked()) {
+         if (this.summary.isDisabled()) {
             return true;
          } else {
             WorldSelectionList.this.setSelected(this);
             this.screen.updateButtonStatus(WorldSelectionList.this.getSelectedOpt().isPresent());
             if (var1 - (double)WorldSelectionList.this.getRowLeft() <= 32.0D) {
@@ -262,14 +269,21 @@
             }
          }
       }
 
       public void joinWorld() {
-         if (!this.summary.isLocked()) {
-            if (this.summary.shouldBackup()) {
-               TranslatableComponent var1 = new TranslatableComponent("selectWorld.backupQuestion");
-               TranslatableComponent var2 = new TranslatableComponent("selectWorld.backupWarning", new Object[]{this.summary.getWorldVersionName(), SharedConstants.getCurrentVersion().getName()});
+         if (!this.summary.isDisabled()) {
+            LevelSummary.BackupStatus var1 = this.summary.backupStatus();
+            if (var1.shouldBackup()) {
+               String var2 = "selectWorld.backupQuestion." + var1.getTranslationKey();
+               String var3 = "selectWorld.backupWarning." + var1.getTranslationKey();
+               TranslatableComponent var4 = new TranslatableComponent(var2);
+               if (var1.isSevere()) {
+                  var4.withStyle(ChatFormatting.BOLD, ChatFormatting.RED);
+               }
+
+               TranslatableComponent var5 = new TranslatableComponent(var3, new Object[]{this.summary.getWorldVersionName(), SharedConstants.getCurrentVersion().getName()});
                this.minecraft.setScreen(new BackupConfirmScreen(this.screen, (var1x, var2x) -> {
                   if (var1x) {
                      String var3 = this.summary.getLevelId();
 
                      try {
@@ -300,11 +314,11 @@
                         WorldSelectionList.LOGGER.error("Failed to backup level {}", var3, var17);
                      }
                   }
 
                   this.loadWorld();
-               }, var1, var2, false));
+               }, var4, var5, false));
             } else if (this.summary.askToOpenWorld()) {
                this.minecraft.setScreen(new ConfirmScreen((var1x) -> {
                   if (var1x) {
                      try {
                         this.loadWorld();
@@ -316,11 +330,11 @@
                      }
                   } else {
                      this.minecraft.setScreen(this.screen);
                   }
 
-               }, new TranslatableComponent("selectWorld.versionQuestion"), new TranslatableComponent("selectWorld.versionWarning", new Object[]{this.summary.getWorldVersionName(), new TranslatableComponent("selectWorld.versionJoinButton"), CommonComponents.GUI_CANCEL})));
+               }, new TranslatableComponent("selectWorld.versionQuestion"), new TranslatableComponent("selectWorld.versionWarning", new Object[]{this.summary.getWorldVersionName()}), new TranslatableComponent("selectWorld.versionJoinButton"), CommonComponents.GUI_CANCEL));
             } else {
                this.loadWorld();
             }
 
          }
@@ -328,48 +342,52 @@
 
       public void deleteWorld() {
          this.minecraft.setScreen(new ConfirmScreen((var1) -> {
             if (var1) {
                this.minecraft.setScreen(new ProgressScreen());
-               LevelStorageSource var2 = this.minecraft.getLevelSource();
-               String var3 = this.summary.getLevelId();
+               this.doDeleteWorld();
+            }
 
-               try {
-                  LevelStorageSource.LevelStorageAccess var4 = var2.createAccess(var3);
-                  Throwable var5 = null;
+            this.minecraft.setScreen(this.screen);
+         }, new TranslatableComponent("selectWorld.deleteQuestion"), new TranslatableComponent("selectWorld.deleteWarning", new Object[]{this.summary.getLevelName()}), new TranslatableComponent("selectWorld.deleteButton"), CommonComponents.GUI_CANCEL));
+      }
 
-                  try {
-                     var4.deleteLevel();
-                  } catch (Throwable var15) {
-                     var5 = var15;
-                     throw var15;
-                  } finally {
-                     if (var4 != null) {
-                        if (var5 != null) {
-                           try {
-                              var4.close();
-                           } catch (Throwable var14) {
-                              var5.addSuppressed(var14);
-                           }
-                        } else {
-                           var4.close();
-                        }
-                     }
+      public void doDeleteWorld() {
+         LevelStorageSource var1 = this.minecraft.getLevelSource();
+         String var2 = this.summary.getLevelId();
 
+         try {
+            LevelStorageSource.LevelStorageAccess var3 = var1.createAccess(var2);
+            Throwable var4 = null;
+
+            try {
+               var3.deleteLevel();
+            } catch (Throwable var14) {
+               var4 = var14;
+               throw var14;
+            } finally {
+               if (var3 != null) {
+                  if (var4 != null) {
+                     try {
+                        var3.close();
+                     } catch (Throwable var13) {
+                        var4.addSuppressed(var13);
+                     }
+                  } else {
+                     var3.close();
                   }
-               } catch (IOException var17) {
-                  SystemToast.onWorldDeleteFailure(this.minecraft, var3);
-                  WorldSelectionList.LOGGER.error("Failed to delete world {}", var3, var17);
                }
 
-               WorldSelectionList.this.refreshList(() -> {
-                  return this.screen.searchBox.getValue();
-               }, true);
             }
+         } catch (IOException var16) {
+            SystemToast.onWorldDeleteFailure(this.minecraft, var2);
+            WorldSelectionList.LOGGER.error("Failed to delete world {}", var2, var16);
+         }
 
-            this.minecraft.setScreen(this.screen);
-         }, new TranslatableComponent("selectWorld.deleteQuestion"), new TranslatableComponent("selectWorld.deleteWarning", new Object[]{this.summary.getLevelName()}), new TranslatableComponent("selectWorld.deleteButton"), CommonComponents.GUI_CANCEL));
+         WorldSelectionList.this.refreshList(() -> {
+            return this.screen.searchBox.getValue();
+         }, true);
       }
 
       public void editWorld() {
          String var1 = this.summary.getLevelId();
 
