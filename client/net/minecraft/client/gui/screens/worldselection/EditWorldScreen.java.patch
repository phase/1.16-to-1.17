--- net/minecraft/client/gui/screens/worldselection/EditWorldScreen.java
+++ net/minecraft/client/gui/screens/worldselection/EditWorldScreen.java
@@ -57,22 +57,22 @@
       this.nameEdit.tick();
    }
 
    protected void init() {
       this.minecraft.keyboardHandler.setSendRepeatsToGui(true);
-      Button var1 = (Button)this.addButton(new Button(this.width / 2 - 100, this.height / 4 + 0 + 5, 200, 20, new TranslatableComponent("selectWorld.edit.resetIcon"), (var1x) -> {
+      Button var1 = (Button)this.addRenderableWidget(new Button(this.width / 2 - 100, this.height / 4 + 0 + 5, 200, 20, new TranslatableComponent("selectWorld.edit.resetIcon"), (var1x) -> {
          FileUtils.deleteQuietly(this.levelAccess.getIconFile());
          var1x.active = false;
       }));
-      this.addButton(new Button(this.width / 2 - 100, this.height / 4 + 24 + 5, 200, 20, new TranslatableComponent("selectWorld.edit.openFolder"), (var1x) -> {
+      this.addRenderableWidget(new Button(this.width / 2 - 100, this.height / 4 + 24 + 5, 200, 20, new TranslatableComponent("selectWorld.edit.openFolder"), (var1x) -> {
          Util.getPlatform().openFile(this.levelAccess.getLevelPath(LevelResource.ROOT).toFile());
       }));
-      this.addButton(new Button(this.width / 2 - 100, this.height / 4 + 48 + 5, 200, 20, new TranslatableComponent("selectWorld.edit.backup"), (var1x) -> {
+      this.addRenderableWidget(new Button(this.width / 2 - 100, this.height / 4 + 48 + 5, 200, 20, new TranslatableComponent("selectWorld.edit.backup"), (var1x) -> {
          boolean var2 = makeBackupAndShowToast(this.levelAccess);
          this.callback.accept(!var2);
       }));
-      this.addButton(new Button(this.width / 2 - 100, this.height / 4 + 72 + 5, 200, 20, new TranslatableComponent("selectWorld.edit.backupFolder"), (var1x) -> {
+      this.addRenderableWidget(new Button(this.width / 2 - 100, this.height / 4 + 72 + 5, 200, 20, new TranslatableComponent("selectWorld.edit.backupFolder"), (var1x) -> {
          LevelStorageSource var2 = this.minecraft.getLevelSource();
          Path var3 = var2.getBackupPath();
 
          try {
             Files.createDirectories(Files.exists(var3, new LinkOption[0]) ? var3.toRealPath() : var3);
@@ -80,105 +80,99 @@
             throw new RuntimeException(var5);
          }
 
          Util.getPlatform().openFile(var3.toFile());
       }));
-      this.addButton(new Button(this.width / 2 - 100, this.height / 4 + 96 + 5, 200, 20, new TranslatableComponent("selectWorld.edit.optimize"), (var1x) -> {
+      this.addRenderableWidget(new Button(this.width / 2 - 100, this.height / 4 + 96 + 5, 200, 20, new TranslatableComponent("selectWorld.edit.optimize"), (var1x) -> {
          this.minecraft.setScreen(new BackupConfirmScreen(this, (var1, var2) -> {
             if (var1) {
                makeBackupAndShowToast(this.levelAccess);
             }
 
             this.minecraft.setScreen(OptimizeWorldScreen.create(this.minecraft, this.callback, this.minecraft.getFixerUpper(), this.levelAccess, var2));
          }, new TranslatableComponent("optimizeWorld.confirm.title"), new TranslatableComponent("optimizeWorld.confirm.description"), true));
       }));
-      this.addButton(new Button(this.width / 2 - 100, this.height / 4 + 120 + 5, 200, 20, new TranslatableComponent("selectWorld.edit.export_worldgen_settings"), (var1x) -> {
+      this.addRenderableWidget(new Button(this.width / 2 - 100, this.height / 4 + 120 + 5, 200, 20, new TranslatableComponent("selectWorld.edit.export_worldgen_settings"), (var1x) -> {
          RegistryAccess.RegistryHolder var3 = RegistryAccess.builtin();
 
          DataResult var2;
          try {
             Minecraft.ServerStem var4 = this.minecraft.makeServerStem(var3, Minecraft::loadDataPacks, Minecraft::loadWorldData, false, this.levelAccess);
-            Throwable var5 = null;
 
             try {
-               RegistryWriteOps var6 = RegistryWriteOps.create(JsonOps.INSTANCE, var3);
-               DataResult var7 = WorldGenSettings.CODEC.encodeStart(var6, var4.worldData().worldGenSettings());
-               var2 = var7.flatMap((var1) -> {
+               RegistryWriteOps var5 = RegistryWriteOps.create(JsonOps.INSTANCE, var3);
+               DataResult var6 = WorldGenSettings.CODEC.encodeStart(var5, var4.worldData().worldGenSettings());
+               var2 = var6.flatMap((var1) -> {
                   Path var2 = this.levelAccess.getLevelPath(LevelResource.ROOT).resolve("worldgen_settings_export.json");
 
                   try {
                      JsonWriter var3 = WORLD_GEN_SETTINGS_GSON.newJsonWriter(Files.newBufferedWriter(var2, StandardCharsets.UTF_8));
-                     Throwable var4 = null;
 
                      try {
                         WORLD_GEN_SETTINGS_GSON.toJson(var1, var3);
-                     } catch (Throwable var14) {
-                        var4 = var14;
-                        throw var14;
-                     } finally {
+                     } catch (Throwable var7) {
                         if (var3 != null) {
-                           if (var4 != null) {
-                              try {
-                                 var3.close();
-                              } catch (Throwable var13) {
-                                 var4.addSuppressed(var13);
-                              }
-                           } else {
+                           try {
                               var3.close();
+                           } catch (Throwable var6) {
+                              var7.addSuppressed(var6);
                            }
                         }
 
+                        throw var7;
                      }
-                  } catch (JsonIOException | IOException var16) {
-                     return DataResult.error("Error writing file: " + var16.getMessage());
+
+                     if (var3 != null) {
+                        var3.close();
+                     }
+                  } catch (JsonIOException | IOException var8) {
+                     return DataResult.error("Error writing file: " + var8.getMessage());
                   }
 
                   return DataResult.success(var2.toString());
                });
-            } catch (Throwable var16) {
-               var5 = var16;
-               throw var16;
-            } finally {
+            } catch (Throwable var8) {
                if (var4 != null) {
-                  if (var5 != null) {
-                     try {
-                        var4.close();
-                     } catch (Throwable var15) {
-                        var5.addSuppressed(var15);
-                     }
-                  } else {
+                  try {
                      var4.close();
+                  } catch (Throwable var7) {
+                     var8.addSuppressed(var7);
                   }
                }
 
+               throw var8;
             }
-         } catch (ExecutionException | InterruptedException var18) {
+
+            if (var4 != null) {
+               var4.close();
+            }
+         } catch (ExecutionException | InterruptedException var9) {
             var2 = DataResult.error("Could not parse level data!");
          }
 
-         TextComponent var19 = new TextComponent((String)var2.get().map(Function.identity(), PartialResult::message));
-         TranslatableComponent var20 = new TranslatableComponent(var2.result().isPresent() ? "selectWorld.edit.export_worldgen_settings.success" : "selectWorld.edit.export_worldgen_settings.failure");
+         TextComponent var10 = new TextComponent((String)var2.get().map(Function.identity(), PartialResult::message));
+         TranslatableComponent var11 = new TranslatableComponent(var2.result().isPresent() ? "selectWorld.edit.export_worldgen_settings.success" : "selectWorld.edit.export_worldgen_settings.failure");
          var2.error().ifPresent((var0) -> {
             LOGGER.error("Error exporting world settings: {}", var0);
          });
-         this.minecraft.getToasts().addToast(SystemToast.multiline(this.minecraft, SystemToast.SystemToastIds.WORLD_GEN_SETTINGS_TRANSFER, var20, var19));
+         this.minecraft.getToasts().addToast(SystemToast.multiline(this.minecraft, SystemToast.SystemToastIds.WORLD_GEN_SETTINGS_TRANSFER, var11, var10));
       }));
-      this.renameButton = (Button)this.addButton(new Button(this.width / 2 - 100, this.height / 4 + 144 + 5, 98, 20, new TranslatableComponent("selectWorld.edit.save"), (var1x) -> {
+      this.renameButton = (Button)this.addRenderableWidget(new Button(this.width / 2 - 100, this.height / 4 + 144 + 5, 98, 20, new TranslatableComponent("selectWorld.edit.save"), (var1x) -> {
          this.onRename();
       }));
-      this.addButton(new Button(this.width / 2 + 2, this.height / 4 + 144 + 5, 98, 20, CommonComponents.GUI_CANCEL, (var1x) -> {
+      this.addRenderableWidget(new Button(this.width / 2 + 2, this.height / 4 + 144 + 5, 98, 20, CommonComponents.GUI_CANCEL, (var1x) -> {
          this.callback.accept(false);
       }));
       var1.active = this.levelAccess.getIconFile().isFile();
       LevelSummary var2 = this.levelAccess.getSummary();
       String var3 = var2 == null ? "" : var2.getLevelName();
       this.nameEdit = new EditBox(this.font, this.width / 2 - 100, 38, 200, 20, new TranslatableComponent("selectWorld.enterName"));
       this.nameEdit.setValue(var3);
       this.nameEdit.setResponder((var1x) -> {
          this.renameButton.active = !var1x.trim().isEmpty();
       });
-      this.children.add(this.nameEdit);
+      this.addWidget(this.nameEdit);
       this.setInitialFocus(this.nameEdit);
    }
 
    public void resize(Minecraft var1, int var2, int var3) {
       String var4 = this.nameEdit.getValue();
@@ -209,38 +203,35 @@
    public static void makeBackupAndShowToast(LevelStorageSource var0, String var1) {
       boolean var2 = false;
 
       try {
          LevelStorageSource.LevelStorageAccess var3 = var0.createAccess(var1);
-         Throwable var4 = null;
 
          try {
             var2 = true;
             makeBackupAndShowToast(var3);
-         } catch (Throwable var14) {
-            var4 = var14;
-            throw var14;
-         } finally {
+         } catch (Throwable var7) {
             if (var3 != null) {
-               if (var4 != null) {
-                  try {
-                     var3.close();
-                  } catch (Throwable var13) {
-                     var4.addSuppressed(var13);
-                  }
-               } else {
+               try {
                   var3.close();
+               } catch (Throwable var6) {
+                  var7.addSuppressed(var6);
                }
             }
 
+            throw var7;
          }
-      } catch (IOException var16) {
+
+         if (var3 != null) {
+            var3.close();
+         }
+      } catch (IOException var8) {
          if (!var2) {
             SystemToast.onWorldAccessFailure(Minecraft.getInstance(), var1);
          }
 
-         LOGGER.warn("Failed to create backup of level {}", var1, var16);
+         LOGGER.warn("Failed to create backup of level {}", var1, var8);
       }
 
    }
 
    public static boolean makeBackupAndShowToast(LevelStorageSource.LevelStorageAccess var0) {
