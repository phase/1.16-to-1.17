--- net/minecraft/client/gui/screens/LevelLoadingScreen.java
+++ net/minecraft/client/gui/screens/LevelLoadingScreen.java
@@ -1,21 +1,27 @@
 package net.minecraft.client.gui.screens;
 
 import com.mojang.blaze3d.vertex.PoseStack;
 import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
+import java.util.Objects;
 import net.minecraft.Util;
 import net.minecraft.client.gui.Font;
 import net.minecraft.client.gui.chat.NarratorChatListener;
+import net.minecraft.client.gui.narration.NarratedElementType;
+import net.minecraft.client.gui.narration.NarrationElementOutput;
+import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.server.level.progress.StoringChunkProgressListener;
 import net.minecraft.util.Mth;
 import net.minecraft.world.level.chunk.ChunkStatus;
 
 public class LevelLoadingScreen extends Screen {
+   private static final long NARRATION_DELAY_MS = 2000L;
    private final StoringChunkProgressListener progressListener;
    private long lastNarration = -1L;
+   private boolean done;
    private static final Object2IntMap<ChunkStatus> COLORS = (Object2IntMap)Util.make(new Object2IntOpenHashMap(), (var0) -> {
       var0.defaultReturnValue(0);
       var0.put(ChunkStatus.EMPTY, 5526612);
       var0.put(ChunkStatus.STRUCTURE_STARTS, 10066329);
       var0.put(ChunkStatus.STRUCTURE_REFERENCES, 6250897);
@@ -39,29 +45,45 @@
    public boolean shouldCloseOnEsc() {
       return false;
    }
 
    public void removed() {
-      NarratorChatListener.INSTANCE.sayNow((new TranslatableComponent("narrator.loading.done")).getString());
+      this.done = true;
+      this.triggerImmediateNarration(true);
    }
 
+   protected void updateNarratedWidget(NarrationElementOutput var1) {
+      if (this.done) {
+         var1.add(NarratedElementType.TITLE, (Component)(new TranslatableComponent("narrator.loading.done")));
+      } else {
+         String var2 = this.getFormattedProgress();
+         var1.add(NarratedElementType.TITLE, var2);
+      }
+
+   }
+
+   private String getFormattedProgress() {
+      int var10000 = this.progressListener.getProgress();
+      return Mth.clamp((int)var10000, (int)0, (int)100) + "%";
+   }
+
    public void render(PoseStack var1, int var2, int var3, float var4) {
       this.renderBackground(var1);
-      String var5 = Mth.clamp(this.progressListener.getProgress(), 0, 100) + "%";
-      long var6 = Util.getMillis();
-      if (var6 - this.lastNarration > 2000L) {
-         this.lastNarration = var6;
-         NarratorChatListener.INSTANCE.sayNow((new TranslatableComponent("narrator.loading", new Object[]{var5})).getString());
+      long var5 = Util.getMillis();
+      if (var5 - this.lastNarration > 2000L) {
+         this.lastNarration = var5;
+         this.triggerImmediateNarration(true);
       }
 
-      int var8 = this.width / 2;
-      int var9 = this.height / 2;
-      boolean var10 = true;
-      renderChunks(var1, this.progressListener, var8, var9 + 30, 2, 0);
+      int var7 = this.width / 2;
+      int var8 = this.height / 2;
+      boolean var9 = true;
+      renderChunks(var1, this.progressListener, var7, var8 + 30, 2, 0);
       Font var10001 = this.font;
-      this.font.getClass();
-      drawCenteredString(var1, var10001, var5, var8, var9 - 9 / 2 - 30, 16777215);
+      String var10002 = this.getFormattedProgress();
+      Objects.requireNonNull(this.font);
+      drawCenteredString(var1, var10001, var10002, var7, var8 - 9 / 2 - 30, 16777215);
    }
 
    public static void renderChunks(PoseStack var0, StoringChunkProgressListener var1, int var2, int var3, int var4, int var5) {
       int var6 = var4 + var5;
       int var7 = var1.getFullDiameter();
