--- net/minecraft/client/gui/screens/ConnectScreen.java
+++ net/minecraft/client/gui/screens/ConnectScreen.java
@@ -1,19 +1,22 @@
 package net.minecraft.client.gui.screens;
 
 import com.mojang.blaze3d.vertex.PoseStack;
-import java.net.InetAddress;
-import java.net.UnknownHostException;
+import java.net.InetSocketAddress;
+import java.util.Optional;
 import java.util.concurrent.atomic.AtomicInteger;
+import javax.annotation.Nullable;
 import net.minecraft.DefaultUncaughtExceptionHandler;
 import net.minecraft.Util;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.chat.NarratorChatListener;
 import net.minecraft.client.gui.components.Button;
 import net.minecraft.client.multiplayer.ClientHandshakePacketListenerImpl;
-import net.minecraft.client.multiplayer.ServerAddress;
 import net.minecraft.client.multiplayer.ServerData;
+import net.minecraft.client.multiplayer.resolver.ResolvedServerAddress;
+import net.minecraft.client.multiplayer.resolver.ServerAddress;
+import net.minecraft.client.multiplayer.resolver.ServerNameResolver;
 import net.minecraft.network.Connection;
 import net.minecraft.network.ConnectionProtocol;
 import net.minecraft.network.chat.CommonComponents;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.TranslatableComponent;
@@ -22,71 +25,70 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class ConnectScreen extends Screen {
    private static final AtomicInteger UNIQUE_THREAD_ID = new AtomicInteger(0);
-   private static final Logger LOGGER = LogManager.getLogger();
-   private Connection connection;
-   private boolean aborted;
-   private final Screen parent;
+   static final Logger LOGGER = LogManager.getLogger();
+   private static final long NARRATION_DELAY_MS = 2000L;
+   public static final Component UNKNOWN_HOST_MESSAGE = new TranslatableComponent("disconnect.genericReason", new Object[]{new TranslatableComponent("disconnect.unknownHost")});
+   @Nullable
+   volatile Connection connection;
+   volatile boolean aborted;
+   final Screen parent;
    private Component status = new TranslatableComponent("connect.connecting");
    private long lastNarration = -1L;
 
-   public ConnectScreen(Screen var1, Minecraft var2, ServerData var3) {
+   private ConnectScreen(Screen var1) {
       super(NarratorChatListener.NO_TITLE);
-      this.minecraft = var2;
       this.parent = var1;
-      ServerAddress var4 = ServerAddress.parseString(var3.ip);
-      var2.clearLevel();
-      var2.setCurrentServer(var3);
-      this.connect(var4.getHost(), var4.getPort());
    }
 
-   public ConnectScreen(Screen var1, Minecraft var2, String var3, int var4) {
-      super(NarratorChatListener.NO_TITLE);
-      this.minecraft = var2;
-      this.parent = var1;
-      var2.clearLevel();
-      this.connect(var3, var4);
+   public static void startConnecting(Screen var0, Minecraft var1, ServerAddress var2, @Nullable ServerData var3) {
+      ConnectScreen var4 = new ConnectScreen(var0);
+      var1.clearLevel();
+      var1.setCurrentServer(var3);
+      var1.setScreen(var4);
+      var4.connect(var1, var2);
    }
 
-   private void connect(final String var1, final int var2) {
-      LOGGER.info("Connecting to {}, {}", var1, var2);
+   private void connect(final Minecraft var1, final ServerAddress var2) {
+      LOGGER.info("Connecting to {}, {}", var2.getHost(), var2.getPort());
       Thread var3 = new Thread("Server Connector #" + UNIQUE_THREAD_ID.incrementAndGet()) {
          public void run() {
-            InetAddress var1x = null;
+            InetSocketAddress var1x = null;
 
             try {
                if (ConnectScreen.this.aborted) {
                   return;
                }
 
-               var1x = InetAddress.getByName(var1);
-               ConnectScreen.this.connection = Connection.connectToServer(var1x, var2, ConnectScreen.this.minecraft.options.useNativeTransport());
-               ConnectScreen.this.connection.setListener(new ClientHandshakePacketListenerImpl(ConnectScreen.this.connection, ConnectScreen.this.minecraft, ConnectScreen.this.parent, (var1xx) -> {
-                  ConnectScreen.this.updateStatus(var1xx);
-               }));
-               ConnectScreen.this.connection.send(new ClientIntentionPacket(var1, var2, ConnectionProtocol.LOGIN));
-               ConnectScreen.this.connection.send(new ServerboundHelloPacket(ConnectScreen.this.minecraft.getUser().getGameProfile()));
-            } catch (UnknownHostException var4) {
+               Optional var2x = ServerNameResolver.DEFAULT.resolveAddress(var2).map(ResolvedServerAddress::asInetSocketAddress);
                if (ConnectScreen.this.aborted) {
                   return;
                }
 
-               ConnectScreen.LOGGER.error("Couldn't connect to server", var4);
-               ConnectScreen.this.minecraft.execute(() -> {
-                  ConnectScreen.this.minecraft.setScreen(new DisconnectedScreen(ConnectScreen.this.parent, CommonComponents.CONNECT_FAILED, new TranslatableComponent("disconnect.genericReason", new Object[]{"Unknown host"})));
-               });
-            } catch (Exception var5) {
+               if (!var2x.isPresent()) {
+                  var1.execute(() -> {
+                     var1.setScreen(new DisconnectedScreen(ConnectScreen.this.parent, CommonComponents.CONNECT_FAILED, ConnectScreen.UNKNOWN_HOST_MESSAGE));
+                  });
+                  return;
+               }
+
+               var1x = (InetSocketAddress)var2x.get();
+               ConnectScreen.this.connection = Connection.connectToServer(var1x, var1.options.useNativeTransport());
+               ConnectScreen.this.connection.setListener(new ClientHandshakePacketListenerImpl(ConnectScreen.this.connection, var1, ConnectScreen.this.parent, ConnectScreen.this::updateStatus));
+               ConnectScreen.this.connection.send(new ClientIntentionPacket(var2.getHost(), var2.getPort(), ConnectionProtocol.LOGIN));
+               ConnectScreen.this.connection.send(new ServerboundHelloPacket(var1.getUser().getGameProfile()));
+            } catch (Exception var4) {
                if (ConnectScreen.this.aborted) {
                   return;
                }
 
-               ConnectScreen.LOGGER.error("Couldn't connect to server", var5);
-               String var3 = var1x == null ? var5.toString() : var5.toString().replaceAll(var1x + ":" + var2, "");
-               ConnectScreen.this.minecraft.execute(() -> {
-                  ConnectScreen.this.minecraft.setScreen(new DisconnectedScreen(ConnectScreen.this.parent, CommonComponents.CONNECT_FAILED, new TranslatableComponent("disconnect.genericReason", new Object[]{var3})));
+               ConnectScreen.LOGGER.error("Couldn't connect to server", var4);
+               String var3 = var1x == null ? var4.toString() : var4.toString().replaceAll(var1x.getHostName() + ":" + var1x.getPort(), "");
+               var1.execute(() -> {
+                  var1.setScreen(new DisconnectedScreen(ConnectScreen.this.parent, CommonComponents.CONNECT_FAILED, new TranslatableComponent("disconnect.genericReason", new Object[]{var3})));
                });
             }
 
          }
       };
@@ -112,11 +114,11 @@
    public boolean shouldCloseOnEsc() {
       return false;
    }
 
    protected void init() {
-      this.addButton(new Button(this.width / 2 - 100, this.height / 4 + 120 + 12, 200, 20, CommonComponents.GUI_CANCEL, (var1) -> {
+      this.addRenderableWidget(new Button(this.width / 2 - 100, this.height / 4 + 120 + 12, 200, 20, CommonComponents.GUI_CANCEL, (var1) -> {
          this.aborted = true;
          if (this.connection != null) {
             this.connection.disconnect(new TranslatableComponent("connect.aborted"));
          }
 
@@ -127,11 +129,11 @@
    public void render(PoseStack var1, int var2, int var3, float var4) {
       this.renderBackground(var1);
       long var5 = Util.getMillis();
       if (var5 - this.lastNarration > 2000L) {
          this.lastNarration = var5;
-         NarratorChatListener.INSTANCE.sayNow((new TranslatableComponent("narrator.joining")).getString());
+         NarratorChatListener.INSTANCE.sayNow((Component)(new TranslatableComponent("narrator.joining")));
       }
 
       drawCenteredString(var1, this.font, this.status, this.width / 2, this.height / 2 - 50, 16777215);
       super.render(var1, var2, var3, var4);
    }
