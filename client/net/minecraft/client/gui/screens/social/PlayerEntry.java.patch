--- net/minecraft/client/gui/screens/social/PlayerEntry.java
+++ net/minecraft/client/gui/screens/social/PlayerEntry.java
@@ -2,90 +2,119 @@
 
 import com.google.common.collect.ImmutableList;
 import com.mojang.blaze3d.systems.RenderSystem;
 import com.mojang.blaze3d.vertex.PoseStack;
 import java.util.List;
+import java.util.Objects;
 import java.util.UUID;
+import java.util.function.Consumer;
 import java.util.function.Supplier;
 import javax.annotation.Nullable;
 import net.minecraft.ChatFormatting;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.GuiComponent;
 import net.minecraft.client.gui.chat.NarratorChatListener;
+import net.minecraft.client.gui.components.AbstractWidget;
 import net.minecraft.client.gui.components.Button;
 import net.minecraft.client.gui.components.ContainerObjectSelectionList;
 import net.minecraft.client.gui.components.ImageButton;
 import net.minecraft.client.gui.components.events.GuiEventListener;
+import net.minecraft.client.gui.narration.NarratableEntry;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.MutableComponent;
 import net.minecraft.network.chat.TextComponent;
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.util.FastColor;
 import net.minecraft.util.FormattedCharSequence;
 
 public class PlayerEntry extends ContainerObjectSelectionList.Entry<PlayerEntry> {
+   private static final int TOOLTIP_DELAY = 10;
+   private static final int TOOLTIP_MAX_WIDTH = 150;
    private final Minecraft minecraft;
-   private final List<GuiEventListener> children;
+   private final List<AbstractWidget> children;
    private final UUID id;
    private final String playerName;
    private final Supplier<ResourceLocation> skinGetter;
    private boolean isRemoved;
    @Nullable
    private Button hideButton;
    @Nullable
    private Button showButton;
-   private final List<FormattedCharSequence> hideTooltip;
-   private final List<FormattedCharSequence> showTooltip;
-   private float tooltipHoverTime;
+   final Component hideText;
+   final Component showText;
+   final List<FormattedCharSequence> hideTooltip;
+   final List<FormattedCharSequence> showTooltip;
+   float tooltipHoverTime;
    private static final Component HIDDEN;
    private static final Component BLOCKED;
    private static final Component OFFLINE;
    private static final Component HIDDEN_OFFLINE;
    private static final Component BLOCKED_OFFLINE;
+   private static final int SKIN_SIZE = 24;
+   private static final int PADDING = 4;
+   private static final int CHAT_TOGGLE_ICON_SIZE = 20;
+   private static final int CHAT_TOGGLE_ICON_X = 0;
+   private static final int CHAT_TOGGLE_ICON_Y = 38;
    public static final int SKIN_SHADE;
    public static final int BG_FILL;
    public static final int BG_FILL_REMOVED;
    public static final int PLAYERNAME_COLOR;
    public static final int PLAYER_STATUS_COLOR;
 
-   public PlayerEntry(Minecraft var1, SocialInteractionsScreen var2, UUID var3, String var4, Supplier<ResourceLocation> var5) {
+   public PlayerEntry(final Minecraft var1, final SocialInteractionsScreen var2, UUID var3, String var4, Supplier<ResourceLocation> var5) {
       this.minecraft = var1;
       this.id = var3;
       this.playerName = var4;
       this.skinGetter = var5;
-      this.hideTooltip = var1.font.split(new TranslatableComponent("gui.socialInteractions.tooltip.hide", new Object[]{var4}), 150);
-      this.showTooltip = var1.font.split(new TranslatableComponent("gui.socialInteractions.tooltip.show", new Object[]{var4}), 150);
+      this.hideText = new TranslatableComponent("gui.socialInteractions.tooltip.hide", new Object[]{var4});
+      this.showText = new TranslatableComponent("gui.socialInteractions.tooltip.show", new Object[]{var4});
+      this.hideTooltip = var1.font.split(this.hideText, 150);
+      this.showTooltip = var1.font.split(this.showText, 150);
       PlayerSocialManager var6 = var1.getPlayerSocialManager();
       if (!var1.player.getGameProfile().getId().equals(var3) && !var6.isBlocked(var3)) {
          this.hideButton = new ImageButton(0, 0, 20, 20, 0, 38, 20, SocialInteractionsScreen.SOCIAL_INTERACTIONS_LOCATION, 256, 256, (var4x) -> {
             var6.hidePlayer(var3);
             this.onHiddenOrShown(true, new TranslatableComponent("gui.socialInteractions.hidden_in_chat", new Object[]{var4}));
-         }, (var3x, var4x, var5x, var6x) -> {
-            this.tooltipHoverTime += var1.getDeltaFrameTime();
-            if (this.tooltipHoverTime >= 10.0F) {
-               var2.setPostRenderRunnable(() -> {
-                  postRenderTooltip(var2, var4x, this.hideTooltip, var5x, var6x);
-               });
+         }, new Button.OnTooltip() {
+            public void onTooltip(Button var1x, PoseStack var2x, int var3, int var4) {
+               PlayerEntry var10000 = PlayerEntry.this;
+               var10000.tooltipHoverTime += var1.getDeltaFrameTime();
+               if (PlayerEntry.this.tooltipHoverTime >= 10.0F) {
+                  var2.setPostRenderRunnable(() -> {
+                     PlayerEntry.postRenderTooltip(var2, var2x, PlayerEntry.this.hideTooltip, var3, var4);
+                  });
+               }
+
             }
 
+            public void narrateTooltip(Consumer<Component> var1x) {
+               var1x.accept(PlayerEntry.this.hideText);
+            }
          }, new TranslatableComponent("gui.socialInteractions.hide")) {
             protected MutableComponent createNarrationMessage() {
                return PlayerEntry.this.getEntryNarationMessage(super.createNarrationMessage());
             }
          };
          this.showButton = new ImageButton(0, 0, 20, 20, 20, 38, 20, SocialInteractionsScreen.SOCIAL_INTERACTIONS_LOCATION, 256, 256, (var4x) -> {
             var6.showPlayer(var3);
             this.onHiddenOrShown(false, new TranslatableComponent("gui.socialInteractions.shown_in_chat", new Object[]{var4}));
-         }, (var3x, var4x, var5x, var6x) -> {
-            this.tooltipHoverTime += var1.getDeltaFrameTime();
-            if (this.tooltipHoverTime >= 10.0F) {
-               var2.setPostRenderRunnable(() -> {
-                  postRenderTooltip(var2, var4x, this.showTooltip, var5x, var6x);
-               });
+         }, new Button.OnTooltip() {
+            public void onTooltip(Button var1x, PoseStack var2x, int var3, int var4) {
+               PlayerEntry var10000 = PlayerEntry.this;
+               var10000.tooltipHoverTime += var1.getDeltaFrameTime();
+               if (PlayerEntry.this.tooltipHoverTime >= 10.0F) {
+                  var2.setPostRenderRunnable(() -> {
+                     PlayerEntry.postRenderTooltip(var2, var2x, PlayerEntry.this.showTooltip, var3, var4);
+                  });
+               }
+
             }
 
+            public void narrateTooltip(Consumer<Component> var1x) {
+               var1x.accept(PlayerEntry.this.showText);
+            }
          }, new TranslatableComponent("gui.socialInteractions.show")) {
             protected MutableComponent createNarrationMessage() {
                return PlayerEntry.this.getEntryNarationMessage(super.createNarrationMessage());
             }
          };
@@ -104,21 +133,21 @@
       int var13 = var11 + 24 + 4;
       Component var15 = this.getStatusComponent();
       int var14;
       if (var15 == TextComponent.EMPTY) {
          GuiComponent.fill(var1, var4, var3, var4 + var5, var3 + var6, BG_FILL);
-         this.minecraft.font.getClass();
+         Objects.requireNonNull(this.minecraft.font);
          var14 = var3 + (var6 - 9) / 2;
       } else {
          GuiComponent.fill(var1, var4, var3, var4 + var5, var3 + var6, BG_FILL_REMOVED);
-         this.minecraft.font.getClass();
-         this.minecraft.font.getClass();
+         Objects.requireNonNull(this.minecraft.font);
+         Objects.requireNonNull(this.minecraft.font);
          var14 = var3 + (var6 - (9 + 9)) / 2;
          this.minecraft.font.draw(var1, var15, (float)var13, (float)(var14 + 12), PLAYER_STATUS_COLOR);
       }
 
-      this.minecraft.getTextureManager().bind((ResourceLocation)this.skinGetter.get());
+      RenderSystem.setShaderTexture(0, (ResourceLocation)this.skinGetter.get());
       GuiComponent.blit(var1, var11, var12, 24, 24, 8.0F, 8.0F, 8, 8, 64, 64);
       RenderSystem.enableBlend();
       GuiComponent.blit(var1, var11, var12, 24, 24, 40.0F, 8.0F, 8, 8, 64, 64);
       RenderSystem.disableBlend();
       this.minecraft.font.draw(var1, this.playerName, (float)var13, (float)var14, PLAYERNAME_COLOR);
@@ -143,10 +172,14 @@
 
    public List<? extends GuiEventListener> children() {
       return this.children;
    }
 
+   public List<? extends NarratableEntry> narratables() {
+      return this.children;
+   }
+
    public String getPlayerName() {
       return this.playerName;
    }
 
    public UUID getPlayerId() {
@@ -159,14 +192,14 @@
 
    private void onHiddenOrShown(boolean var1, Component var2) {
       this.showButton.visible = var1;
       this.hideButton.visible = !var1;
       this.minecraft.gui.getChat().addMessage(var2);
-      NarratorChatListener.INSTANCE.sayNow(var2.getString());
+      NarratorChatListener.INSTANCE.sayNow(var2);
    }
 
-   private MutableComponent getEntryNarationMessage(MutableComponent var1) {
+   MutableComponent getEntryNarationMessage(MutableComponent var1) {
       Component var2 = this.getStatusComponent();
       return var2 == TextComponent.EMPTY ? (new TextComponent(this.playerName)).append(", ").append((Component)var1) : (new TextComponent(this.playerName)).append(", ").append(var2).append(", ").append((Component)var1);
    }
 
    private Component getStatusComponent() {
@@ -183,11 +216,11 @@
       } else {
          return this.isRemoved ? OFFLINE : TextComponent.EMPTY;
       }
    }
 
-   private static void postRenderTooltip(SocialInteractionsScreen var0, PoseStack var1, List<FormattedCharSequence> var2, int var3, int var4) {
+   static void postRenderTooltip(SocialInteractionsScreen var0, PoseStack var1, List<FormattedCharSequence> var2, int var3, int var4) {
       var0.renderTooltip(var1, var2, var3, var4);
       var0.setPostRenderRunnable((Runnable)null);
    }
 
    static {
