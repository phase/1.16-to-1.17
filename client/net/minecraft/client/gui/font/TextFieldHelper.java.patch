--- net/minecraft/client/gui/font/TextFieldHelper.java
+++ net/minecraft/client/gui/font/TextFieldHelper.java
@@ -111,19 +111,19 @@
          return false;
       }
    }
 
    private int clampToMsgLength(int var1) {
-      return Mth.clamp(var1, 0, ((String)this.getMessageFn.get()).length());
+      return Mth.clamp((int)var1, (int)0, (int)((String)this.getMessageFn.get()).length());
    }
 
    private void insertText(String var1, String var2) {
       if (this.selectionPos != this.cursorPos) {
          var1 = this.deleteSelection(var1);
       }
 
-      this.cursorPos = Mth.clamp(this.cursorPos, 0, var1.length());
+      this.cursorPos = Mth.clamp((int)this.cursorPos, (int)0, (int)var1.length());
       String var3 = (new StringBuilder(var1)).insert(this.cursorPos, var2).toString();
       if (this.stringValidator.test(var3)) {
          this.setMessageFn.accept(var3);
          this.selectionPos = this.cursorPos = Math.min(var3.length(), this.cursorPos + var2.length());
       }
@@ -139,15 +139,23 @@
          this.selectionPos = this.cursorPos;
       }
 
    }
 
+   public void moveByChars(int var1) {
+      this.moveByChars(var1, false);
+   }
+
    public void moveByChars(int var1, boolean var2) {
       this.cursorPos = Util.offsetByCodepoints((String)this.getMessageFn.get(), this.cursorPos, var1);
       this.resetSelectionIfNeeded(var2);
    }
 
+   public void moveByWords(int var1) {
+      this.moveByWords(var1, false);
+   }
+
    public void moveByWords(int var1, boolean var2) {
       this.cursorPos = StringSplitter.getWordPosition((String)this.getMessageFn.get(), var1, this.cursorPos, true);
       this.resetSelectionIfNeeded(var2);
    }
 
@@ -202,16 +210,21 @@
       if (this.selectionPos == this.cursorPos) {
          return var1;
       } else {
          int var2 = Math.min(this.cursorPos, this.selectionPos);
          int var3 = Math.max(this.cursorPos, this.selectionPos);
-         String var4 = var1.substring(0, var2) + var1.substring(var3);
+         String var10000 = var1.substring(0, var2);
+         String var4 = var10000 + var1.substring(var3);
          this.selectionPos = this.cursorPos = var2;
          return var4;
       }
    }
 
+   public void setCursorToStart() {
+      this.setCursorToStart(false);
+   }
+
    private void setCursorToStart(boolean var1) {
       this.cursorPos = 0;
       this.resetSelectionIfNeeded(var1);
    }
 
@@ -226,23 +239,31 @@
 
    public int getCursorPos() {
       return this.cursorPos;
    }
 
+   public void setCursorPos(int var1) {
+      this.setCursorPos(var1, true);
+   }
+
    public void setCursorPos(int var1, boolean var2) {
       this.cursorPos = this.clampToMsgLength(var1);
       this.resetSelectionIfNeeded(var2);
    }
 
    public int getSelectionPos() {
       return this.selectionPos;
    }
 
+   public void setSelectionPos(int var1) {
+      this.selectionPos = this.clampToMsgLength(var1);
+   }
+
    public void setSelectionRange(int var1, int var2) {
       int var3 = ((String)this.getMessageFn.get()).length();
-      this.cursorPos = Mth.clamp(var1, 0, var3);
-      this.selectionPos = Mth.clamp(var2, 0, var3);
+      this.cursorPos = Mth.clamp((int)var1, (int)0, (int)var3);
+      this.selectionPos = Mth.clamp((int)var2, (int)0, (int)var3);
    }
 
    public boolean isSelecting() {
       return this.cursorPos != this.selectionPos;
    }
