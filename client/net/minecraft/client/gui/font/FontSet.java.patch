--- net/minecraft/client/gui/font/FontSet.java
+++ net/minecraft/client/gui/font/FontSet.java
@@ -11,10 +11,11 @@
 import it.unimi.dsi.fastutil.ints.IntList;
 import it.unimi.dsi.fastutil.ints.IntOpenHashSet;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Objects;
 import java.util.Random;
 import java.util.stream.Stream;
 import net.minecraft.client.gui.font.glyphs.BakedGlyph;
 import net.minecraft.client.gui.font.glyphs.EmptyGlyph;
 import net.minecraft.client.gui.font.glyphs.MissingGlyph;
@@ -79,13 +80,14 @@
             }
          }
 
       });
       Stream var10000 = var1.stream();
-      var5.getClass();
+      Objects.requireNonNull(var5);
       var10000 = var10000.filter(var5::contains);
       List var10001 = this.providers;
+      Objects.requireNonNull(var10001);
       var10000.forEach(var10001::add);
    }
 
    public void close() {
       this.closeProviders();
@@ -146,11 +148,13 @@
       Iterator var2 = this.textures.iterator();
 
       BakedGlyph var4;
       do {
          if (!var2.hasNext()) {
-            FontTexture var5 = new FontTexture(new ResourceLocation(this.name.getNamespace(), this.name.getPath() + "/" + this.textures.size()), var1.isColored());
+            String var10004 = this.name.getNamespace();
+            String var10005 = this.name.getPath();
+            FontTexture var5 = new FontTexture(new ResourceLocation(var10004, var10005 + "/" + this.textures.size()), var1.isColored());
             this.textures.add(var5);
             this.textureManager.register((ResourceLocation)var5.getName(), (AbstractTexture)var5);
             BakedGlyph var6 = var5.add(var1);
             return var6 == null ? this.missingGlyph : var6;
          }
