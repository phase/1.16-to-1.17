--- net/minecraft/client/gui/font/providers/LegacyUnicodeBitmapsProvider.java
+++ net/minecraft/client/gui/font/providers/LegacyUnicodeBitmapsProvider.java
@@ -18,86 +18,93 @@
 import net.minecraft.util.GsonHelper;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class LegacyUnicodeBitmapsProvider implements GlyphProvider {
-   private static final Logger LOGGER = LogManager.getLogger();
+   static final Logger LOGGER = LogManager.getLogger();
+   private static final int UNICODE_SHEETS = 256;
+   private static final int CHARS_PER_SHEET = 256;
+   private static final int TEXTURE_SIZE = 256;
    private final ResourceManager resourceManager;
    private final byte[] sizes;
    private final String texturePattern;
    private final Map<ResourceLocation, NativeImage> textures = Maps.newHashMap();
 
    public LegacyUnicodeBitmapsProvider(ResourceManager var1, byte[] var2, String var3) {
       this.resourceManager = var1;
       this.sizes = var2;
       this.texturePattern = var3;
 
-      label324:
       for(int var4 = 0; var4 < 256; ++var4) {
          int var5 = var4 * 256;
          ResourceLocation var6 = this.getSheetLocation(var5);
 
          try {
             Resource var7 = this.resourceManager.getResource(var6);
-            Throwable var8 = null;
 
-            try {
-               NativeImage var9 = NativeImage.read(NativeImage.Format.RGBA, var7.getInputStream());
-               Throwable var10 = null;
-
+            label92: {
                try {
-                  if (var9.getWidth() == 256 && var9.getHeight() == 256) {
-                     int var11 = 0;
+                  label105: {
+                     NativeImage var8 = NativeImage.read(NativeImage.Format.RGBA, var7.getInputStream());
 
-                     while(true) {
-                        if (var11 >= 256) {
-                           continue label324;
+                     label106: {
+                        try {
+                           if (var8.getWidth() != 256 || var8.getHeight() != 256) {
+                              break label106;
+                           }
+
+                           for(int var9 = 0; var9 < 256; ++var9) {
+                              byte var10 = var2[var5 + var9];
+                              if (var10 != 0 && getLeft(var10) > getRight(var10)) {
+                                 var2[var5 + var9] = 0;
+                              }
+                           }
+                        } catch (Throwable var13) {
+                           if (var8 != null) {
+                              try {
+                                 var8.close();
+                              } catch (Throwable var12) {
+                                 var13.addSuppressed(var12);
+                              }
+                           }
+
+                           throw var13;
                         }
 
-                        byte var12 = var2[var5 + var11];
-                        if (var12 != 0 && getLeft(var12) > getRight(var12)) {
-                           var2[var5 + var11] = 0;
+                        if (var8 != null) {
+                           var8.close();
                         }
+                        break label105;
+                     }
 
-                        ++var11;
+                     if (var8 != null) {
+                        var8.close();
                      }
+                     break label92;
                   }
-               } catch (Throwable var39) {
-                  var10 = var39;
-                  throw var39;
-               } finally {
-                  if (var9 != null) {
-                     if (var10 != null) {
-                        try {
-                           var9.close();
-                        } catch (Throwable var38) {
-                           var10.addSuppressed(var38);
-                        }
-                     } else {
-                        var9.close();
+               } catch (Throwable var14) {
+                  if (var7 != null) {
+                     try {
+                        var7.close();
+                     } catch (Throwable var11) {
+                        var14.addSuppressed(var11);
                      }
                   }
 
+                  throw var14;
                }
-            } catch (Throwable var41) {
-               var8 = var41;
-               throw var41;
-            } finally {
+
                if (var7 != null) {
-                  if (var8 != null) {
-                     try {
-                        var7.close();
-                     } catch (Throwable var37) {
-                        var8.addSuppressed(var37);
-                     }
-                  } else {
-                     var7.close();
-                  }
+                  var7.close();
                }
+               continue;
+            }
 
+            if (var7 != null) {
+               var7.close();
             }
-         } catch (IOException var43) {
+         } catch (IOException var15) {
          }
 
          Arrays.fill(var2, var5, var5 + 256, (byte)0);
       }
 
@@ -144,36 +151,33 @@
 
    @Nullable
    private NativeImage loadTexture(ResourceLocation var1) {
       try {
          Resource var2 = this.resourceManager.getResource(var1);
-         Throwable var3 = null;
 
-         NativeImage var4;
+         NativeImage var3;
          try {
-            var4 = NativeImage.read(NativeImage.Format.RGBA, var2.getInputStream());
-         } catch (Throwable var14) {
-            var3 = var14;
-            throw var14;
-         } finally {
+            var3 = NativeImage.read(NativeImage.Format.RGBA, var2.getInputStream());
+         } catch (Throwable var6) {
             if (var2 != null) {
-               if (var3 != null) {
-                  try {
-                     var2.close();
-                  } catch (Throwable var13) {
-                     var3.addSuppressed(var13);
-                  }
-               } else {
+               try {
                   var2.close();
+               } catch (Throwable var5) {
+                  var6.addSuppressed(var5);
                }
             }
 
+            throw var6;
          }
 
-         return var4;
-      } catch (IOException var16) {
-         LOGGER.error("Couldn't load texture {}", var1, var16);
+         if (var2 != null) {
+            var2.close();
+         }
+
+         return var3;
+      } catch (IOException var7) {
+         LOGGER.error("Couldn't load texture {}", var1, var7);
          return null;
       }
    }
 
    private static int getLeft(byte var0) {
@@ -189,11 +193,11 @@
       private final int height;
       private final int sourceX;
       private final int sourceY;
       private final NativeImage source;
 
-      private Glyph(int var1, int var2, int var3, int var4, NativeImage var5) {
+      Glyph(int var1, int var2, int var3, int var4, NativeImage var5) {
          this.width = var3;
          this.height = var4;
          this.sourceX = var1;
          this.sourceY = var2;
          this.source = var5;
@@ -247,37 +251,34 @@
 
       @Nullable
       public GlyphProvider create(ResourceManager var1) {
          try {
             Resource var2 = Minecraft.getInstance().getResourceManager().getResource(this.metadata);
-            Throwable var3 = null;
 
-            LegacyUnicodeBitmapsProvider var5;
+            LegacyUnicodeBitmapsProvider var4;
             try {
-               byte[] var4 = new byte[65536];
-               var2.getInputStream().read(var4);
-               var5 = new LegacyUnicodeBitmapsProvider(var1, var4, this.texturePattern);
-            } catch (Throwable var15) {
-               var3 = var15;
-               throw var15;
-            } finally {
+               byte[] var3 = new byte[65536];
+               var2.getInputStream().read(var3);
+               var4 = new LegacyUnicodeBitmapsProvider(var1, var3, this.texturePattern);
+            } catch (Throwable var6) {
                if (var2 != null) {
-                  if (var3 != null) {
-                     try {
-                        var2.close();
-                     } catch (Throwable var14) {
-                        var3.addSuppressed(var14);
-                     }
-                  } else {
+                  try {
                      var2.close();
+                  } catch (Throwable var5) {
+                     var6.addSuppressed(var5);
                   }
                }
 
+               throw var6;
             }
 
-            return var5;
-         } catch (IOException var17) {
+            if (var2 != null) {
+               var2.close();
+            }
+
+            return var4;
+         } catch (IOException var7) {
             LegacyUnicodeBitmapsProvider.LOGGER.error("Cannot load {}, unicode glyphs will not render correctly", this.metadata);
             return null;
          }
       }
    }
