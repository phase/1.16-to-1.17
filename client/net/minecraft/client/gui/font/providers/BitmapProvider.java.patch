--- net/minecraft/client/gui/font/providers/BitmapProvider.java
+++ net/minecraft/client/gui/font/providers/BitmapProvider.java
@@ -21,15 +21,15 @@
 import net.minecraft.util.GsonHelper;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class BitmapProvider implements GlyphProvider {
-   private static final Logger LOGGER = LogManager.getLogger();
+   static final Logger LOGGER = LogManager.getLogger();
    private final NativeImage image;
    private final Int2ObjectMap<BitmapProvider.Glyph> glyphs;
 
-   private BitmapProvider(NativeImage var1, Int2ObjectMap<BitmapProvider.Glyph> var2) {
+   BitmapProvider(NativeImage var1, Int2ObjectMap<BitmapProvider.Glyph> var2) {
       this.image = var1;
       this.glyphs = var2;
    }
 
    public void close() {
@@ -53,11 +53,11 @@
       private final int width;
       private final int height;
       private final int advance;
       private final int ascent;
 
-      private Glyph(float var1, NativeImage var2, int var3, int var4, int var5, int var6, int var7, int var8) {
+      Glyph(float var1, NativeImage var2, int var3, int var4, int var5, int var6, int var7, int var8) {
          this.scale = var1;
          this.image = var2;
          this.offsetX = var3;
          this.offsetY = var4;
          this.width = var5;
@@ -140,60 +140,65 @@
 
       @Nullable
       public GlyphProvider create(ResourceManager var1) {
          try {
             Resource var2 = var1.getResource(this.texture);
-            Throwable var3 = null;
 
+            BitmapProvider var22;
             try {
-               NativeImage var4 = NativeImage.read(NativeImage.Format.RGBA, var2.getInputStream());
-               int var5 = var4.getWidth();
-               int var6 = var4.getHeight();
-               int var7 = var5 / ((int[])this.chars.get(0)).length;
-               int var8 = var6 / this.chars.size();
-               float var9 = (float)this.height / (float)var8;
-               Int2ObjectOpenHashMap var10 = new Int2ObjectOpenHashMap();
+               NativeImage var3 = NativeImage.read(NativeImage.Format.RGBA, var2.getInputStream());
+               int var4 = var3.getWidth();
+               int var5 = var3.getHeight();
+               int var6 = var4 / ((int[])this.chars.get(0)).length;
+               int var7 = var5 / this.chars.size();
+               float var8 = (float)this.height / (float)var7;
+               Int2ObjectOpenHashMap var9 = new Int2ObjectOpenHashMap();
+               int var10 = 0;
 
-               for(int var11 = 0; var11 < this.chars.size(); ++var11) {
-                  int var12 = 0;
-                  int[] var13 = (int[])this.chars.get(var11);
-                  int var14 = var13.length;
+               while(true) {
+                  if (var10 >= this.chars.size()) {
+                     var22 = new BitmapProvider(var3, var9);
+                     break;
+                  }
 
-                  for(int var15 = 0; var15 < var14; ++var15) {
-                     int var16 = var13[var15];
-                     int var17 = var12++;
-                     if (var16 != 0 && var16 != 32) {
-                        int var18 = this.getActualGlyphWidth(var4, var7, var8, var17, var11);
-                        BitmapProvider.Glyph var19 = (BitmapProvider.Glyph)var10.put(var16, new BitmapProvider.Glyph(var9, var4, var17 * var7, var11 * var8, var7, var8, (int)(0.5D + (double)((float)var18 * var9)) + 1, this.ascent));
-                        if (var19 != null) {
-                           BitmapProvider.LOGGER.warn("Codepoint '{}' declared multiple times in {}", Integer.toHexString(var16), this.texture);
+                  int var11 = 0;
+                  int[] var12 = (int[])this.chars.get(var10);
+                  int var13 = var12.length;
+
+                  for(int var14 = 0; var14 < var13; ++var14) {
+                     int var15 = var12[var14];
+                     int var16 = var11++;
+                     if (var15 != 0 && var15 != 32) {
+                        int var17 = this.getActualGlyphWidth(var3, var6, var7, var16, var10);
+                        BitmapProvider.Glyph var18 = (BitmapProvider.Glyph)var9.put(var15, new BitmapProvider.Glyph(var8, var3, var16 * var6, var10 * var7, var6, var7, (int)(0.5D + (double)((float)var17 * var8)) + 1, this.ascent));
+                        if (var18 != null) {
+                           BitmapProvider.LOGGER.warn("Codepoint '{}' declared multiple times in {}", Integer.toHexString(var15), this.texture);
                         }
                      }
                   }
-               }
 
-               BitmapProvider var31 = new BitmapProvider(var4, var10);
-               return var31;
-            } catch (Throwable var28) {
-               var3 = var28;
-               throw var28;
-            } finally {
+                  ++var10;
+               }
+            } catch (Throwable var20) {
                if (var2 != null) {
-                  if (var3 != null) {
-                     try {
-                        var2.close();
-                     } catch (Throwable var27) {
-                        var3.addSuppressed(var27);
-                     }
-                  } else {
+                  try {
                      var2.close();
+                  } catch (Throwable var19) {
+                     var20.addSuppressed(var19);
                   }
                }
 
+               throw var20;
             }
-         } catch (IOException var30) {
-            throw new RuntimeException(var30.getMessage());
+
+            if (var2 != null) {
+               var2.close();
+            }
+
+            return var22;
+         } catch (IOException var21) {
+            throw new RuntimeException(var21.getMessage());
          }
       }
 
       private int getActualGlyphWidth(NativeImage var1, int var2, int var3, int var4, int var5) {
          int var6;
