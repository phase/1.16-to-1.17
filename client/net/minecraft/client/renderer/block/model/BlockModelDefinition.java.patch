--- net/minecraft/client/renderer/block/model/BlockModelDefinition.java
+++ net/minecraft/client/renderer/block/model/BlockModelDefinition.java
@@ -1,8 +1,10 @@
 package net.minecraft.client.renderer.block.model;
 
+import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.Maps;
+import com.google.common.collect.Sets;
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
 import com.google.gson.JsonArray;
 import com.google.gson.JsonDeserializationContext;
 import com.google.gson.JsonDeserializer;
@@ -10,13 +12,15 @@
 import com.google.gson.JsonObject;
 import com.google.gson.JsonParseException;
 import java.io.Reader;
 import java.lang.reflect.Type;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
 import java.util.Map.Entry;
 import javax.annotation.Nullable;
 import net.minecraft.client.renderer.block.model.multipart.MultiPart;
 import net.minecraft.client.renderer.block.model.multipart.Selector;
 import net.minecraft.util.GsonHelper;
@@ -53,10 +57,25 @@
          this.multiPart = var2.multiPart;
       }
 
    }
 
+   @VisibleForTesting
+   public boolean hasVariant(String var1) {
+      return this.variants.get(var1) != null;
+   }
+
+   @VisibleForTesting
+   public MultiVariant getVariant(String var1) {
+      MultiVariant var2 = (MultiVariant)this.variants.get(var1);
+      if (var2 == null) {
+         throw new BlockModelDefinition.MissingVariantException();
+      } else {
+         return var2;
+      }
+   }
+
    public boolean equals(Object var1) {
       if (this == var1) {
          return true;
       } else {
          if (var1 instanceof BlockModelDefinition) {
@@ -76,18 +95,49 @@
 
    public Map<String, MultiVariant> getVariants() {
       return this.variants;
    }
 
+   @VisibleForTesting
+   public Set<MultiVariant> getMultiVariants() {
+      HashSet var1 = Sets.newHashSet(this.variants.values());
+      if (this.isMultiPart()) {
+         var1.addAll(this.multiPart.getMultiVariants());
+      }
+
+      return var1;
+   }
+
    public boolean isMultiPart() {
       return this.multiPart != null;
    }
 
    public MultiPart getMultiPart() {
       return this.multiPart;
    }
 
+   public static final class Context {
+      protected final Gson gson = (new GsonBuilder()).registerTypeAdapter(BlockModelDefinition.class, new BlockModelDefinition.Deserializer()).registerTypeAdapter(Variant.class, new Variant.Deserializer()).registerTypeAdapter(MultiVariant.class, new MultiVariant.Deserializer()).registerTypeAdapter(MultiPart.class, new MultiPart.Deserializer(this)).registerTypeAdapter(Selector.class, new Selector.Deserializer()).create();
+      private StateDefinition<Block, BlockState> definition;
+
+      public Context() {
+      }
+
+      public StateDefinition<Block, BlockState> getDefinition() {
+         return this.definition;
+      }
+
+      public void setDefinition(StateDefinition<Block, BlockState> var1) {
+         this.definition = var1;
+      }
+   }
+
+   protected class MissingVariantException extends RuntimeException {
+      protected MissingVariantException() {
+      }
+   }
+
    public static class Deserializer implements JsonDeserializer<BlockModelDefinition> {
       public Deserializer() {
       }
 
       public BlockModelDefinition deserialize(JsonElement var1, Type var2, JsonDeserializationContext var3) throws JsonParseException {
@@ -107,11 +157,11 @@
             JsonObject var4 = GsonHelper.getAsJsonObject(var2, "variants");
             Iterator var5 = var4.entrySet().iterator();
 
             while(var5.hasNext()) {
                Entry var6 = (Entry)var5.next();
-               var3.put(var6.getKey(), var1.deserialize((JsonElement)var6.getValue(), MultiVariant.class));
+               var3.put((String)var6.getKey(), (MultiVariant)var1.deserialize((JsonElement)var6.getValue(), MultiVariant.class));
             }
          }
 
          return var3;
       }
@@ -124,22 +174,6 @@
             JsonArray var3 = GsonHelper.getAsJsonArray(var2, "multipart");
             return (MultiPart)var1.deserialize(var3, MultiPart.class);
          }
       }
    }
-
-   public static final class Context {
-      protected final Gson gson = (new GsonBuilder()).registerTypeAdapter(BlockModelDefinition.class, new BlockModelDefinition.Deserializer()).registerTypeAdapter(Variant.class, new Variant.Deserializer()).registerTypeAdapter(MultiVariant.class, new MultiVariant.Deserializer()).registerTypeAdapter(MultiPart.class, new MultiPart.Deserializer(this)).registerTypeAdapter(Selector.class, new Selector.Deserializer()).create();
-      private StateDefinition<Block, BlockState> definition;
-
-      public Context() {
-      }
-
-      public StateDefinition<Block, BlockState> getDefinition() {
-         return this.definition;
-      }
-
-      public void setDefinition(StateDefinition<Block, BlockState> var1) {
-         this.definition = var1;
-      }
-   }
 }
