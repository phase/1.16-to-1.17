--- net/minecraft/client/renderer/block/model/BlockModelDefinition.java
+++ net/minecraft/client/renderer/block/model/BlockModelDefinition.java
@@ -1,8 +1,10 @@
 package net.minecraft.client.renderer.block.model;
 
+import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.Maps;
+import com.google.common.collect.Sets;
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
 import com.google.gson.JsonArray;
 import com.google.gson.JsonDeserializationContext;
 import com.google.gson.JsonDeserializer;
@@ -10,13 +12,15 @@
 import com.google.gson.JsonObject;
 import com.google.gson.JsonParseException;
 import java.io.Reader;
 import java.lang.reflect.Type;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
 import java.util.Map.Entry;
 import javax.annotation.Nullable;
 import net.minecraft.client.renderer.block.model.multipart.MultiPart;
 import net.minecraft.client.renderer.block.model.multipart.Selector;
 import net.minecraft.util.GsonHelper;
@@ -53,10 +57,25 @@
          this.multiPart = var2.multiPart;
       }
 
    }
 
+   @VisibleForTesting
+   public boolean hasVariant(String var1) {
+      return this.variants.get(var1) != null;
+   }
+
+   @VisibleForTesting
+   public MultiVariant getVariant(String var1) {
+      MultiVariant var2 = (MultiVariant)this.variants.get(var1);
+      if (var2 == null) {
+         throw new BlockModelDefinition.MissingVariantException();
+      } else {
+         return var2;
+      }
+   }
+
    public boolean equals(Object var1) {
       if (this == var1) {
          return true;
       } else {
          if (var1 instanceof BlockModelDefinition) {
@@ -76,18 +95,33 @@
 
    public Map<String, MultiVariant> getVariants() {
       return this.variants;
    }
 
+   @VisibleForTesting
+   public Set<MultiVariant> getMultiVariants() {
+      HashSet var1 = Sets.newHashSet(this.variants.values());
+      if (this.isMultiPart()) {
+         var1.addAll(this.multiPart.getMultiVariants());
+      }
+
+      return var1;
+   }
+
    public boolean isMultiPart() {
       return this.multiPart != null;
    }
 
    public MultiPart getMultiPart() {
       return this.multiPart;
    }
 
+   public class MissingVariantException extends RuntimeException {
+      protected MissingVariantException() {
+      }
+   }
+
    public static class Deserializer implements JsonDeserializer<BlockModelDefinition> {
       public Deserializer() {
       }
 
       public BlockModelDefinition deserialize(JsonElement var1, Type var2, JsonDeserializationContext var3) throws JsonParseException {
