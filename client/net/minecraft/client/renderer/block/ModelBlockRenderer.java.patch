--- net/minecraft/client/renderer/block/ModelBlockRenderer.java
+++ net/minecraft/client/renderer/block/ModelBlockRenderer.java
@@ -25,14 +25,16 @@
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.phys.Vec3;
 
 public class ModelBlockRenderer {
+   private static final int FACE_CUBIC = 0;
+   private static final int FACE_PARTIAL = 1;
+   static final Direction[] DIRECTIONS = Direction.values();
    private final BlockColors blockColors;
-   private static final ThreadLocal<ModelBlockRenderer.Cache> CACHE = ThreadLocal.withInitial(() -> {
-      return new ModelBlockRenderer.Cache();
-   });
+   private static final int CACHE_SIZE = 100;
+   static final ThreadLocal<ModelBlockRenderer.Cache> CACHE = ThreadLocal.withInitial(ModelBlockRenderer.Cache::new);
 
    public ModelBlockRenderer(BlockColors var1) {
       this.blockColors = var1;
    }
 
@@ -44,65 +46,73 @@
       try {
          return var12 ? this.tesselateWithAO(var1, var2, var3, var4, var5, var6, var7, var8, var9, var11) : this.tesselateWithoutAO(var1, var2, var3, var4, var5, var6, var7, var8, var9, var11);
       } catch (Throwable var17) {
          CrashReport var15 = CrashReport.forThrowable(var17, "Tesselating block model");
          CrashReportCategory var16 = var15.addCategory("Block model being tesselated");
-         CrashReportCategory.populateBlockDetails(var16, var4, var3);
+         CrashReportCategory.populateBlockDetails(var16, var1, var4, var3);
          var16.setDetail("Using AO", (Object)var12);
          throw new ReportedException(var15);
       }
    }
 
    public boolean tesselateWithAO(BlockAndTintGetter var1, BakedModel var2, BlockState var3, BlockPos var4, PoseStack var5, VertexConsumer var6, boolean var7, Random var8, long var9, int var11) {
       boolean var12 = false;
-      float[] var13 = new float[Direction.values().length * 2];
+      float[] var13 = new float[DIRECTIONS.length * 2];
       BitSet var14 = new BitSet(3);
       ModelBlockRenderer.AmbientOcclusionFace var15 = new ModelBlockRenderer.AmbientOcclusionFace();
-      Direction[] var16 = Direction.values();
-      int var17 = var16.length;
+      BlockPos.MutableBlockPos var16 = var4.mutable();
+      Direction[] var17 = DIRECTIONS;
+      int var18 = var17.length;
 
-      for(int var18 = 0; var18 < var17; ++var18) {
-         Direction var19 = var16[var18];
+      for(int var19 = 0; var19 < var18; ++var19) {
+         Direction var20 = var17[var19];
          var8.setSeed(var9);
-         List var20 = var2.getQuads(var3, var19, var8);
-         if (!var20.isEmpty() && (!var7 || Block.shouldRenderFace(var3, var1, var4, var19))) {
-            this.renderModelFaceAO(var1, var3, var4, var5, var6, var20, var13, var14, var15, var11);
-            var12 = true;
+         List var21 = var2.getQuads(var3, var20, var8);
+         if (!var21.isEmpty()) {
+            var16.setWithOffset(var4, (Direction)var20);
+            if (!var7 || Block.shouldRenderFace(var3, var1, var4, var20, var16)) {
+               this.renderModelFaceAO(var1, var3, var4, var5, var6, var21, var13, var14, var15, var11);
+               var12 = true;
+            }
          }
       }
 
       var8.setSeed(var9);
-      List var21 = var2.getQuads(var3, (Direction)null, var8);
-      if (!var21.isEmpty()) {
-         this.renderModelFaceAO(var1, var3, var4, var5, var6, var21, var13, var14, var15, var11);
+      List var22 = var2.getQuads(var3, (Direction)null, var8);
+      if (!var22.isEmpty()) {
+         this.renderModelFaceAO(var1, var3, var4, var5, var6, var22, var13, var14, var15, var11);
          var12 = true;
       }
 
       return var12;
    }
 
    public boolean tesselateWithoutAO(BlockAndTintGetter var1, BakedModel var2, BlockState var3, BlockPos var4, PoseStack var5, VertexConsumer var6, boolean var7, Random var8, long var9, int var11) {
       boolean var12 = false;
       BitSet var13 = new BitSet(3);
-      Direction[] var14 = Direction.values();
-      int var15 = var14.length;
+      BlockPos.MutableBlockPos var14 = var4.mutable();
+      Direction[] var15 = DIRECTIONS;
+      int var16 = var15.length;
 
-      for(int var16 = 0; var16 < var15; ++var16) {
-         Direction var17 = var14[var16];
+      for(int var17 = 0; var17 < var16; ++var17) {
+         Direction var18 = var15[var17];
          var8.setSeed(var9);
-         List var18 = var2.getQuads(var3, var17, var8);
-         if (!var18.isEmpty() && (!var7 || Block.shouldRenderFace(var3, var1, var4, var17))) {
-            int var19 = LevelRenderer.getLightColor(var1, var3, var4.relative(var17));
-            this.renderModelFaceFlat(var1, var3, var4, var19, var11, false, var5, var6, var18, var13);
-            var12 = true;
+         List var19 = var2.getQuads(var3, var18, var8);
+         if (!var19.isEmpty()) {
+            var14.setWithOffset(var4, (Direction)var18);
+            if (!var7 || Block.shouldRenderFace(var3, var1, var4, var18, var14)) {
+               int var20 = LevelRenderer.getLightColor(var1, var3, var14);
+               this.renderModelFaceFlat(var1, var3, var4, var20, var11, false, var5, var6, var19, var13);
+               var12 = true;
+            }
          }
       }
 
       var8.setSeed(var9);
-      List var20 = var2.getQuads(var3, (Direction)null, var8);
-      if (!var20.isEmpty()) {
-         this.renderModelFaceFlat(var1, var3, var4, -1, var11, true, var5, var6, var20, var13);
+      List var21 = var2.getQuads(var3, (Direction)null, var8);
+      if (!var21.isEmpty()) {
+         this.renderModelFaceFlat(var1, var3, var4, -1, var11, true, var5, var6, var21, var13);
          var12 = true;
       }
 
       return var12;
    }
@@ -164,11 +174,11 @@
          var6[Direction.EAST.get3DDataValue()] = var11;
          var6[Direction.DOWN.get3DDataValue()] = var9;
          var6[Direction.UP.get3DDataValue()] = var12;
          var6[Direction.NORTH.get3DDataValue()] = var10;
          var6[Direction.SOUTH.get3DDataValue()] = var13;
-         var14 = Direction.values().length;
+         var14 = DIRECTIONS.length;
          var6[Direction.WEST.get3DDataValue() + var14] = 1.0F - var8;
          var6[Direction.EAST.get3DDataValue() + var14] = 1.0F - var11;
          var6[Direction.DOWN.get3DDataValue() + var14] = 1.0F - var9;
          var6[Direction.UP.get3DDataValue() + var14] = 1.0F - var12;
          var6[Direction.NORTH.get3DDataValue() + var14] = 1.0F - var10;
@@ -223,11 +233,11 @@
    }
 
    public void renderModel(PoseStack.Pose var1, VertexConsumer var2, @Nullable BlockState var3, BakedModel var4, float var5, float var6, float var7, int var8, int var9) {
       Random var10 = new Random();
       long var11 = 42L;
-      Direction[] var13 = Direction.values();
+      Direction[] var13 = DIRECTIONS;
       int var14 = var13.length;
 
       for(int var15 = 0; var15 < var14; ++var15) {
          Direction var16 = var13[var15];
          var10.setSeed(42L);
@@ -264,112 +274,54 @@
 
    public static void clearCache() {
       ((ModelBlockRenderer.Cache)CACHE.get()).disable();
    }
 
-   public static enum AdjacencyInfo {
-      DOWN(new Direction[]{Direction.WEST, Direction.EAST, Direction.NORTH, Direction.SOUTH}, 0.5F, true, new ModelBlockRenderer.SizeInfo[]{ModelBlockRenderer.SizeInfo.FLIP_WEST, ModelBlockRenderer.SizeInfo.SOUTH, ModelBlockRenderer.SizeInfo.FLIP_WEST, ModelBlockRenderer.SizeInfo.FLIP_SOUTH, ModelBlockRenderer.SizeInfo.WEST, ModelBlockRenderer.SizeInfo.FLIP_SOUTH, ModelBlockRenderer.SizeInfo.WEST, ModelBlockRenderer.SizeInfo.SOUTH}, new ModelBlockRenderer.SizeInfo[]{ModelBlockRenderer.SizeInfo.FLIP_WEST, ModelBlockRenderer.SizeInfo.NORTH, ModelBlockRenderer.SizeInfo.FLIP_WEST, ModelBlockRenderer.SizeInfo.FLIP_NORTH, ModelBlockRenderer.SizeInfo.WEST, ModelBlockRenderer.SizeInfo.FLIP_NORTH, ModelBlockRenderer.SizeInfo.WEST, ModelBlockRenderer.SizeInfo.NORTH}, new ModelBlockRenderer.SizeInfo[]{ModelBlockRenderer.SizeInfo.FLIP_EAST, ModelBlockRenderer.SizeInfo.NORTH, ModelBlockRenderer.SizeInfo.FLIP_EAST, ModelBlockRenderer.SizeInfo.FLIP_NORTH, ModelBlockRenderer.SizeInfo.EAST, ModelBlockRenderer.SizeInfo.FLIP_NORTH, ModelBlockRenderer.SizeInfo.EAST, ModelBlockRenderer.SizeInfo.NORTH}, new ModelBlockRenderer.SizeInfo[]{ModelBlockRenderer.SizeInfo.FLIP_EAST, ModelBlockRenderer.SizeInfo.SOUTH, ModelBlockRenderer.SizeInfo.FLIP_EAST, ModelBlockRenderer.SizeInfo.FLIP_SOUTH, ModelBlockRenderer.SizeInfo.EAST, ModelBlockRenderer.SizeInfo.FLIP_SOUTH, ModelBlockRenderer.SizeInfo.EAST, ModelBlockRenderer.SizeInfo.SOUTH}),
-      UP(new Direction[]{Direction.EAST, Direction.WEST, Direction.NORTH, Direction.SOUTH}, 1.0F, true, new ModelBlockRenderer.SizeInfo[]{ModelBlockRenderer.SizeInfo.EAST, ModelBlockRenderer.SizeInfo.SOUTH, ModelBlockRenderer.SizeInfo.EAST, ModelBlockRenderer.SizeInfo.FLIP_SOUTH, ModelBlockRenderer.SizeInfo.FLIP_EAST, ModelBlockRenderer.SizeInfo.FLIP_SOUTH, ModelBlockRenderer.SizeInfo.FLIP_EAST, ModelBlockRenderer.SizeInfo.SOUTH}, new ModelBlockRenderer.SizeInfo[]{ModelBlockRenderer.SizeInfo.EAST, ModelBlockRenderer.SizeInfo.NORTH, ModelBlockRenderer.SizeInfo.EAST, ModelBlockRenderer.SizeInfo.FLIP_NORTH, ModelBlockRenderer.SizeInfo.FLIP_EAST, ModelBlockRenderer.SizeInfo.FLIP_NORTH, ModelBlockRenderer.SizeInfo.FLIP_EAST, ModelBlockRenderer.SizeInfo.NORTH}, new ModelBlockRenderer.SizeInfo[]{ModelBlockRenderer.SizeInfo.WEST, ModelBlockRenderer.SizeInfo.NORTH, ModelBlockRenderer.SizeInfo.WEST, ModelBlockRenderer.SizeInfo.FLIP_NORTH, ModelBlockRenderer.SizeInfo.FLIP_WEST, ModelBlockRenderer.SizeInfo.FLIP_NORTH, ModelBlockRenderer.SizeInfo.FLIP_WEST, ModelBlockRenderer.SizeInfo.NORTH}, new ModelBlockRenderer.SizeInfo[]{ModelBlockRenderer.SizeInfo.WEST, ModelBlockRenderer.SizeInfo.SOUTH, ModelBlockRenderer.SizeInfo.WEST, ModelBlockRenderer.SizeInfo.FLIP_SOUTH, ModelBlockRenderer.SizeInfo.FLIP_WEST, ModelBlockRenderer.SizeInfo.FLIP_SOUTH, ModelBlockRenderer.SizeInfo.FLIP_WEST, ModelBlockRenderer.SizeInfo.SOUTH}),
-      NORTH(new Direction[]{Direction.UP, Direction.DOWN, Direction.EAST, Direction.WEST}, 0.8F, true, new ModelBlockRenderer.SizeInfo[]{ModelBlockRenderer.SizeInfo.UP, ModelBlockRenderer.SizeInfo.FLIP_WEST, ModelBlockRenderer.SizeInfo.UP, ModelBlockRenderer.SizeInfo.WEST, ModelBlockRenderer.SizeInfo.FLIP_UP, ModelBlockRenderer.SizeInfo.WEST, ModelBlockRenderer.SizeInfo.FLIP_UP, ModelBlockRenderer.SizeInfo.FLIP_WEST}, new ModelBlockRenderer.SizeInfo[]{ModelBlockRenderer.SizeInfo.UP, ModelBlockRenderer.SizeInfo.FLIP_EAST, ModelBlockRenderer.SizeInfo.UP, ModelBlockRenderer.SizeInfo.EAST, ModelBlockRenderer.SizeInfo.FLIP_UP, ModelBlockRenderer.SizeInfo.EAST, ModelBlockRenderer.SizeInfo.FLIP_UP, ModelBlockRenderer.SizeInfo.FLIP_EAST}, new ModelBlockRenderer.SizeInfo[]{ModelBlockRenderer.SizeInfo.DOWN, ModelBlockRenderer.SizeInfo.FLIP_EAST, ModelBlockRenderer.SizeInfo.DOWN, ModelBlockRenderer.SizeInfo.EAST, ModelBlockRenderer.SizeInfo.FLIP_DOWN, ModelBlockRenderer.SizeInfo.EAST, ModelBlockRenderer.SizeInfo.FLIP_DOWN, ModelBlockRenderer.SizeInfo.FLIP_EAST}, new ModelBlockRenderer.SizeInfo[]{ModelBlockRenderer.SizeInfo.DOWN, ModelBlockRenderer.SizeInfo.FLIP_WEST, ModelBlockRenderer.SizeInfo.DOWN, ModelBlockRenderer.SizeInfo.WEST, ModelBlockRenderer.SizeInfo.FLIP_DOWN, ModelBlockRenderer.SizeInfo.WEST, ModelBlockRenderer.SizeInfo.FLIP_DOWN, ModelBlockRenderer.SizeInfo.FLIP_WEST}),
-      SOUTH(new Direction[]{Direction.WEST, Direction.EAST, Direction.DOWN, Direction.UP}, 0.8F, true, new ModelBlockRenderer.SizeInfo[]{ModelBlockRenderer.SizeInfo.UP, ModelBlockRenderer.SizeInfo.FLIP_WEST, ModelBlockRenderer.SizeInfo.FLIP_UP, ModelBlockRenderer.SizeInfo.FLIP_WEST, ModelBlockRenderer.SizeInfo.FLIP_UP, ModelBlockRenderer.SizeInfo.WEST, ModelBlockRenderer.SizeInfo.UP, ModelBlockRenderer.SizeInfo.WEST}, new ModelBlockRenderer.SizeInfo[]{ModelBlockRenderer.SizeInfo.DOWN, ModelBlockRenderer.SizeInfo.FLIP_WEST, ModelBlockRenderer.SizeInfo.FLIP_DOWN, ModelBlockRenderer.SizeInfo.FLIP_WEST, ModelBlockRenderer.SizeInfo.FLIP_DOWN, ModelBlockRenderer.SizeInfo.WEST, ModelBlockRenderer.SizeInfo.DOWN, ModelBlockRenderer.SizeInfo.WEST}, new ModelBlockRenderer.SizeInfo[]{ModelBlockRenderer.SizeInfo.DOWN, ModelBlockRenderer.SizeInfo.FLIP_EAST, ModelBlockRenderer.SizeInfo.FLIP_DOWN, ModelBlockRenderer.SizeInfo.FLIP_EAST, ModelBlockRenderer.SizeInfo.FLIP_DOWN, ModelBlockRenderer.SizeInfo.EAST, ModelBlockRenderer.SizeInfo.DOWN, ModelBlockRenderer.SizeInfo.EAST}, new ModelBlockRenderer.SizeInfo[]{ModelBlockRenderer.SizeInfo.UP, ModelBlockRenderer.SizeInfo.FLIP_EAST, ModelBlockRenderer.SizeInfo.FLIP_UP, ModelBlockRenderer.SizeInfo.FLIP_EAST, ModelBlockRenderer.SizeInfo.FLIP_UP, ModelBlockRenderer.SizeInfo.EAST, ModelBlockRenderer.SizeInfo.UP, ModelBlockRenderer.SizeInfo.EAST}),
-      WEST(new Direction[]{Direction.UP, Direction.DOWN, Direction.NORTH, Direction.SOUTH}, 0.6F, true, new ModelBlockRenderer.SizeInfo[]{ModelBlockRenderer.SizeInfo.UP, ModelBlockRenderer.SizeInfo.SOUTH, ModelBlockRenderer.SizeInfo.UP, ModelBlockRenderer.SizeInfo.FLIP_SOUTH, ModelBlockRenderer.SizeInfo.FLIP_UP, ModelBlockRenderer.SizeInfo.FLIP_SOUTH, ModelBlockRenderer.SizeInfo.FLIP_UP, ModelBlockRenderer.SizeInfo.SOUTH}, new ModelBlockRenderer.SizeInfo[]{ModelBlockRenderer.SizeInfo.UP, ModelBlockRenderer.SizeInfo.NORTH, ModelBlockRenderer.SizeInfo.UP, ModelBlockRenderer.SizeInfo.FLIP_NORTH, ModelBlockRenderer.SizeInfo.FLIP_UP, ModelBlockRenderer.SizeInfo.FLIP_NORTH, ModelBlockRenderer.SizeInfo.FLIP_UP, ModelBlockRenderer.SizeInfo.NORTH}, new ModelBlockRenderer.SizeInfo[]{ModelBlockRenderer.SizeInfo.DOWN, ModelBlockRenderer.SizeInfo.NORTH, ModelBlockRenderer.SizeInfo.DOWN, ModelBlockRenderer.SizeInfo.FLIP_NORTH, ModelBlockRenderer.SizeInfo.FLIP_DOWN, ModelBlockRenderer.SizeInfo.FLIP_NORTH, ModelBlockRenderer.SizeInfo.FLIP_DOWN, ModelBlockRenderer.SizeInfo.NORTH}, new ModelBlockRenderer.SizeInfo[]{ModelBlockRenderer.SizeInfo.DOWN, ModelBlockRenderer.SizeInfo.SOUTH, ModelBlockRenderer.SizeInfo.DOWN, ModelBlockRenderer.SizeInfo.FLIP_SOUTH, ModelBlockRenderer.SizeInfo.FLIP_DOWN, ModelBlockRenderer.SizeInfo.FLIP_SOUTH, ModelBlockRenderer.SizeInfo.FLIP_DOWN, ModelBlockRenderer.SizeInfo.SOUTH}),
-      EAST(new Direction[]{Direction.DOWN, Direction.UP, Direction.NORTH, Direction.SOUTH}, 0.6F, true, new ModelBlockRenderer.SizeInfo[]{ModelBlockRenderer.SizeInfo.FLIP_DOWN, ModelBlockRenderer.SizeInfo.SOUTH, ModelBlockRenderer.SizeInfo.FLIP_DOWN, ModelBlockRenderer.SizeInfo.FLIP_SOUTH, ModelBlockRenderer.SizeInfo.DOWN, ModelBlockRenderer.SizeInfo.FLIP_SOUTH, ModelBlockRenderer.SizeInfo.DOWN, ModelBlockRenderer.SizeInfo.SOUTH}, new ModelBlockRenderer.SizeInfo[]{ModelBlockRenderer.SizeInfo.FLIP_DOWN, ModelBlockRenderer.SizeInfo.NORTH, ModelBlockRenderer.SizeInfo.FLIP_DOWN, ModelBlockRenderer.SizeInfo.FLIP_NORTH, ModelBlockRenderer.SizeInfo.DOWN, ModelBlockRenderer.SizeInfo.FLIP_NORTH, ModelBlockRenderer.SizeInfo.DOWN, ModelBlockRenderer.SizeInfo.NORTH}, new ModelBlockRenderer.SizeInfo[]{ModelBlockRenderer.SizeInfo.FLIP_UP, ModelBlockRenderer.SizeInfo.NORTH, ModelBlockRenderer.SizeInfo.FLIP_UP, ModelBlockRenderer.SizeInfo.FLIP_NORTH, ModelBlockRenderer.SizeInfo.UP, ModelBlockRenderer.SizeInfo.FLIP_NORTH, ModelBlockRenderer.SizeInfo.UP, ModelBlockRenderer.SizeInfo.NORTH}, new ModelBlockRenderer.SizeInfo[]{ModelBlockRenderer.SizeInfo.FLIP_UP, ModelBlockRenderer.SizeInfo.SOUTH, ModelBlockRenderer.SizeInfo.FLIP_UP, ModelBlockRenderer.SizeInfo.FLIP_SOUTH, ModelBlockRenderer.SizeInfo.UP, ModelBlockRenderer.SizeInfo.FLIP_SOUTH, ModelBlockRenderer.SizeInfo.UP, ModelBlockRenderer.SizeInfo.SOUTH});
+   private class AmbientOcclusionFace {
+      final float[] brightness = new float[4];
+      final int[] lightmap = new int[4];
 
-      private final Direction[] corners;
-      private final boolean doNonCubicWeight;
-      private final ModelBlockRenderer.SizeInfo[] vert0Weights;
-      private final ModelBlockRenderer.SizeInfo[] vert1Weights;
-      private final ModelBlockRenderer.SizeInfo[] vert2Weights;
-      private final ModelBlockRenderer.SizeInfo[] vert3Weights;
-      private static final ModelBlockRenderer.AdjacencyInfo[] BY_FACING = (ModelBlockRenderer.AdjacencyInfo[])Util.make(new ModelBlockRenderer.AdjacencyInfo[6], (var0) -> {
-         var0[Direction.DOWN.get3DDataValue()] = DOWN;
-         var0[Direction.UP.get3DDataValue()] = UP;
-         var0[Direction.NORTH.get3DDataValue()] = NORTH;
-         var0[Direction.SOUTH.get3DDataValue()] = SOUTH;
-         var0[Direction.WEST.get3DDataValue()] = WEST;
-         var0[Direction.EAST.get3DDataValue()] = EAST;
-      });
-
-      private AdjacencyInfo(Direction[] var3, float var4, boolean var5, ModelBlockRenderer.SizeInfo[] var6, ModelBlockRenderer.SizeInfo[] var7, ModelBlockRenderer.SizeInfo[] var8, ModelBlockRenderer.SizeInfo[] var9) {
-         this.corners = var3;
-         this.doNonCubicWeight = var5;
-         this.vert0Weights = var6;
-         this.vert1Weights = var7;
-         this.vert2Weights = var8;
-         this.vert3Weights = var9;
-      }
-
-      public static ModelBlockRenderer.AdjacencyInfo fromFacing(Direction var0) {
-         return BY_FACING[var0.get3DDataValue()];
-      }
-   }
-
-   public static enum SizeInfo {
-      DOWN(Direction.DOWN, false),
-      UP(Direction.UP, false),
-      NORTH(Direction.NORTH, false),
-      SOUTH(Direction.SOUTH, false),
-      WEST(Direction.WEST, false),
-      EAST(Direction.EAST, false),
-      FLIP_DOWN(Direction.DOWN, true),
-      FLIP_UP(Direction.UP, true),
-      FLIP_NORTH(Direction.NORTH, true),
-      FLIP_SOUTH(Direction.SOUTH, true),
-      FLIP_WEST(Direction.WEST, true),
-      FLIP_EAST(Direction.EAST, true);
-
-      private final int shape;
-
-      private SizeInfo(Direction var3, boolean var4) {
-         this.shape = var3.get3DDataValue() + (var4 ? Direction.values().length : 0);
-      }
-   }
-
-   class AmbientOcclusionFace {
-      private final float[] brightness = new float[4];
-      private final int[] lightmap = new int[4];
-
       public AmbientOcclusionFace() {
       }
 
       public void calculate(BlockAndTintGetter var1, BlockState var2, BlockPos var3, Direction var4, float[] var5, BitSet var6, boolean var7) {
          BlockPos var8 = var6.get(0) ? var3.relative(var4) : var3;
          ModelBlockRenderer.AdjacencyInfo var9 = ModelBlockRenderer.AdjacencyInfo.fromFacing(var4);
          BlockPos.MutableBlockPos var10 = new BlockPos.MutableBlockPos();
          ModelBlockRenderer.Cache var11 = (ModelBlockRenderer.Cache)ModelBlockRenderer.CACHE.get();
-         var10.setWithOffset(var8, var9.corners[0]);
+         var10.setWithOffset(var8, (Direction)var9.corners[0]);
          BlockState var12 = var1.getBlockState(var10);
          int var13 = var11.getLightColor(var12, var1, var10);
          float var14 = var11.getShadeBrightness(var12, var1, var10);
-         var10.setWithOffset(var8, var9.corners[1]);
+         var10.setWithOffset(var8, (Direction)var9.corners[1]);
          BlockState var15 = var1.getBlockState(var10);
          int var16 = var11.getLightColor(var15, var1, var10);
          float var17 = var11.getShadeBrightness(var15, var1, var10);
-         var10.setWithOffset(var8, var9.corners[2]);
+         var10.setWithOffset(var8, (Direction)var9.corners[2]);
          BlockState var18 = var1.getBlockState(var10);
          int var19 = var11.getLightColor(var18, var1, var10);
          float var20 = var11.getShadeBrightness(var18, var1, var10);
-         var10.setWithOffset(var8, var9.corners[3]);
+         var10.setWithOffset(var8, (Direction)var9.corners[3]);
          BlockState var21 = var1.getBlockState(var10);
          int var22 = var11.getLightColor(var21, var1, var10);
          float var23 = var11.getShadeBrightness(var21, var1, var10);
-         var10.setWithOffset(var8, var9.corners[0]).move(var4);
+         var10.setWithOffset(var8, (Direction)var9.corners[0]).move(var4);
          boolean var24 = var1.getBlockState(var10).getLightBlock(var1, var10) == 0;
-         var10.setWithOffset(var8, var9.corners[1]).move(var4);
+         var10.setWithOffset(var8, (Direction)var9.corners[1]).move(var4);
          boolean var25 = var1.getBlockState(var10).getLightBlock(var1, var10) == 0;
-         var10.setWithOffset(var8, var9.corners[2]).move(var4);
+         var10.setWithOffset(var8, (Direction)var9.corners[2]).move(var4);
          boolean var26 = var1.getBlockState(var10).getLightBlock(var1, var10) == 0;
-         var10.setWithOffset(var8, var9.corners[3]).move(var4);
+         var10.setWithOffset(var8, (Direction)var9.corners[3]).move(var4);
          boolean var27 = var1.getBlockState(var10).getLightBlock(var1, var10) == 0;
          float var28;
          int var32;
          BlockState var36;
          if (!var26 && !var24) {
             var28 = var14;
             var32 = var13;
          } else {
-            var10.setWithOffset(var8, var9.corners[0]).move(var9.corners[2]);
+            var10.setWithOffset(var8, (Direction)var9.corners[0]).move(var9.corners[2]);
             var36 = var1.getBlockState(var10);
             var28 = var11.getShadeBrightness(var36, var1, var10);
             var32 = var11.getLightColor(var36, var1, var10);
          }
 
@@ -377,11 +329,11 @@
          int var33;
          if (!var27 && !var24) {
             var29 = var14;
             var33 = var13;
          } else {
-            var10.setWithOffset(var8, var9.corners[0]).move(var9.corners[3]);
+            var10.setWithOffset(var8, (Direction)var9.corners[0]).move(var9.corners[3]);
             var36 = var1.getBlockState(var10);
             var29 = var11.getShadeBrightness(var36, var1, var10);
             var33 = var11.getLightColor(var36, var1, var10);
          }
 
@@ -389,11 +341,11 @@
          int var34;
          if (!var26 && !var25) {
             var30 = var14;
             var34 = var13;
          } else {
-            var10.setWithOffset(var8, var9.corners[1]).move(var9.corners[2]);
+            var10.setWithOffset(var8, (Direction)var9.corners[1]).move(var9.corners[2]);
             var36 = var1.getBlockState(var10);
             var30 = var11.getShadeBrightness(var36, var1, var10);
             var34 = var11.getLightColor(var36, var1, var10);
          }
 
@@ -401,18 +353,18 @@
          int var35;
          if (!var27 && !var25) {
             var31 = var14;
             var35 = var13;
          } else {
-            var10.setWithOffset(var8, var9.corners[1]).move(var9.corners[3]);
+            var10.setWithOffset(var8, (Direction)var9.corners[1]).move(var9.corners[3]);
             var36 = var1.getBlockState(var10);
             var31 = var11.getShadeBrightness(var36, var1, var10);
             var35 = var11.getLightColor(var36, var1, var10);
          }
 
          int var64 = var11.getLightColor(var2, var1, var3);
-         var10.setWithOffset(var3, var4);
+         var10.setWithOffset(var3, (Direction)var4);
          BlockState var37 = var1.getBlockState(var10);
          if (var6.get(0) || !var37.isSolidRender(var1, var10)) {
             var64 = var11.getLightColor(var37, var1, var10);
          }
 
@@ -500,32 +452,30 @@
          int var10 = (int)((float)(var1 & 255) * var5 + (float)(var2 & 255) * var6 + (float)(var3 & 255) * var7 + (float)(var4 & 255) * var8) & 255;
          return var9 << 16 | var10;
       }
    }
 
-   static class Cache {
+   private static class Cache {
       private boolean enabled;
-      private final Long2IntLinkedOpenHashMap colorCache;
-      private final Long2FloatLinkedOpenHashMap brightnessCache;
+      private final Long2IntLinkedOpenHashMap colorCache = (Long2IntLinkedOpenHashMap)Util.make(() -> {
+         Long2IntLinkedOpenHashMap var1 = new Long2IntLinkedOpenHashMap(100, 0.25F) {
+            protected void rehash(int var1) {
+            }
+         };
+         var1.defaultReturnValue(Integer.MAX_VALUE);
+         return var1;
+      });
+      private final Long2FloatLinkedOpenHashMap brightnessCache = (Long2FloatLinkedOpenHashMap)Util.make(() -> {
+         Long2FloatLinkedOpenHashMap var1 = new Long2FloatLinkedOpenHashMap(100, 0.25F) {
+            protected void rehash(int var1) {
+            }
+         };
+         var1.defaultReturnValue(Float.NaN);
+         return var1;
+      });
 
       private Cache() {
-         this.colorCache = (Long2IntLinkedOpenHashMap)Util.make(() -> {
-            Long2IntLinkedOpenHashMap var1 = new Long2IntLinkedOpenHashMap(100, 0.25F) {
-               protected void rehash(int var1) {
-               }
-            };
-            var1.defaultReturnValue(Integer.MAX_VALUE);
-            return var1;
-         });
-         this.brightnessCache = (Long2FloatLinkedOpenHashMap)Util.make(() -> {
-            Long2FloatLinkedOpenHashMap var1 = new Long2FloatLinkedOpenHashMap(100, 0.25F) {
-               protected void rehash(int var1) {
-               }
-            };
-            var1.defaultReturnValue(Float.NaN);
-            return var1;
-         });
       }
 
       public void enable() {
          this.enabled = true;
       }
@@ -579,22 +529,80 @@
 
          return var6;
       }
    }
 
-   static enum AmbientVertexRemap {
+   protected static enum AdjacencyInfo {
+      DOWN(new Direction[]{Direction.WEST, Direction.EAST, Direction.NORTH, Direction.SOUTH}, 0.5F, true, new ModelBlockRenderer.SizeInfo[]{ModelBlockRenderer.SizeInfo.FLIP_WEST, ModelBlockRenderer.SizeInfo.SOUTH, ModelBlockRenderer.SizeInfo.FLIP_WEST, ModelBlockRenderer.SizeInfo.FLIP_SOUTH, ModelBlockRenderer.SizeInfo.WEST, ModelBlockRenderer.SizeInfo.FLIP_SOUTH, ModelBlockRenderer.SizeInfo.WEST, ModelBlockRenderer.SizeInfo.SOUTH}, new ModelBlockRenderer.SizeInfo[]{ModelBlockRenderer.SizeInfo.FLIP_WEST, ModelBlockRenderer.SizeInfo.NORTH, ModelBlockRenderer.SizeInfo.FLIP_WEST, ModelBlockRenderer.SizeInfo.FLIP_NORTH, ModelBlockRenderer.SizeInfo.WEST, ModelBlockRenderer.SizeInfo.FLIP_NORTH, ModelBlockRenderer.SizeInfo.WEST, ModelBlockRenderer.SizeInfo.NORTH}, new ModelBlockRenderer.SizeInfo[]{ModelBlockRenderer.SizeInfo.FLIP_EAST, ModelBlockRenderer.SizeInfo.NORTH, ModelBlockRenderer.SizeInfo.FLIP_EAST, ModelBlockRenderer.SizeInfo.FLIP_NORTH, ModelBlockRenderer.SizeInfo.EAST, ModelBlockRenderer.SizeInfo.FLIP_NORTH, ModelBlockRenderer.SizeInfo.EAST, ModelBlockRenderer.SizeInfo.NORTH}, new ModelBlockRenderer.SizeInfo[]{ModelBlockRenderer.SizeInfo.FLIP_EAST, ModelBlockRenderer.SizeInfo.SOUTH, ModelBlockRenderer.SizeInfo.FLIP_EAST, ModelBlockRenderer.SizeInfo.FLIP_SOUTH, ModelBlockRenderer.SizeInfo.EAST, ModelBlockRenderer.SizeInfo.FLIP_SOUTH, ModelBlockRenderer.SizeInfo.EAST, ModelBlockRenderer.SizeInfo.SOUTH}),
+      UP(new Direction[]{Direction.EAST, Direction.WEST, Direction.NORTH, Direction.SOUTH}, 1.0F, true, new ModelBlockRenderer.SizeInfo[]{ModelBlockRenderer.SizeInfo.EAST, ModelBlockRenderer.SizeInfo.SOUTH, ModelBlockRenderer.SizeInfo.EAST, ModelBlockRenderer.SizeInfo.FLIP_SOUTH, ModelBlockRenderer.SizeInfo.FLIP_EAST, ModelBlockRenderer.SizeInfo.FLIP_SOUTH, ModelBlockRenderer.SizeInfo.FLIP_EAST, ModelBlockRenderer.SizeInfo.SOUTH}, new ModelBlockRenderer.SizeInfo[]{ModelBlockRenderer.SizeInfo.EAST, ModelBlockRenderer.SizeInfo.NORTH, ModelBlockRenderer.SizeInfo.EAST, ModelBlockRenderer.SizeInfo.FLIP_NORTH, ModelBlockRenderer.SizeInfo.FLIP_EAST, ModelBlockRenderer.SizeInfo.FLIP_NORTH, ModelBlockRenderer.SizeInfo.FLIP_EAST, ModelBlockRenderer.SizeInfo.NORTH}, new ModelBlockRenderer.SizeInfo[]{ModelBlockRenderer.SizeInfo.WEST, ModelBlockRenderer.SizeInfo.NORTH, ModelBlockRenderer.SizeInfo.WEST, ModelBlockRenderer.SizeInfo.FLIP_NORTH, ModelBlockRenderer.SizeInfo.FLIP_WEST, ModelBlockRenderer.SizeInfo.FLIP_NORTH, ModelBlockRenderer.SizeInfo.FLIP_WEST, ModelBlockRenderer.SizeInfo.NORTH}, new ModelBlockRenderer.SizeInfo[]{ModelBlockRenderer.SizeInfo.WEST, ModelBlockRenderer.SizeInfo.SOUTH, ModelBlockRenderer.SizeInfo.WEST, ModelBlockRenderer.SizeInfo.FLIP_SOUTH, ModelBlockRenderer.SizeInfo.FLIP_WEST, ModelBlockRenderer.SizeInfo.FLIP_SOUTH, ModelBlockRenderer.SizeInfo.FLIP_WEST, ModelBlockRenderer.SizeInfo.SOUTH}),
+      NORTH(new Direction[]{Direction.UP, Direction.DOWN, Direction.EAST, Direction.WEST}, 0.8F, true, new ModelBlockRenderer.SizeInfo[]{ModelBlockRenderer.SizeInfo.UP, ModelBlockRenderer.SizeInfo.FLIP_WEST, ModelBlockRenderer.SizeInfo.UP, ModelBlockRenderer.SizeInfo.WEST, ModelBlockRenderer.SizeInfo.FLIP_UP, ModelBlockRenderer.SizeInfo.WEST, ModelBlockRenderer.SizeInfo.FLIP_UP, ModelBlockRenderer.SizeInfo.FLIP_WEST}, new ModelBlockRenderer.SizeInfo[]{ModelBlockRenderer.SizeInfo.UP, ModelBlockRenderer.SizeInfo.FLIP_EAST, ModelBlockRenderer.SizeInfo.UP, ModelBlockRenderer.SizeInfo.EAST, ModelBlockRenderer.SizeInfo.FLIP_UP, ModelBlockRenderer.SizeInfo.EAST, ModelBlockRenderer.SizeInfo.FLIP_UP, ModelBlockRenderer.SizeInfo.FLIP_EAST}, new ModelBlockRenderer.SizeInfo[]{ModelBlockRenderer.SizeInfo.DOWN, ModelBlockRenderer.SizeInfo.FLIP_EAST, ModelBlockRenderer.SizeInfo.DOWN, ModelBlockRenderer.SizeInfo.EAST, ModelBlockRenderer.SizeInfo.FLIP_DOWN, ModelBlockRenderer.SizeInfo.EAST, ModelBlockRenderer.SizeInfo.FLIP_DOWN, ModelBlockRenderer.SizeInfo.FLIP_EAST}, new ModelBlockRenderer.SizeInfo[]{ModelBlockRenderer.SizeInfo.DOWN, ModelBlockRenderer.SizeInfo.FLIP_WEST, ModelBlockRenderer.SizeInfo.DOWN, ModelBlockRenderer.SizeInfo.WEST, ModelBlockRenderer.SizeInfo.FLIP_DOWN, ModelBlockRenderer.SizeInfo.WEST, ModelBlockRenderer.SizeInfo.FLIP_DOWN, ModelBlockRenderer.SizeInfo.FLIP_WEST}),
+      SOUTH(new Direction[]{Direction.WEST, Direction.EAST, Direction.DOWN, Direction.UP}, 0.8F, true, new ModelBlockRenderer.SizeInfo[]{ModelBlockRenderer.SizeInfo.UP, ModelBlockRenderer.SizeInfo.FLIP_WEST, ModelBlockRenderer.SizeInfo.FLIP_UP, ModelBlockRenderer.SizeInfo.FLIP_WEST, ModelBlockRenderer.SizeInfo.FLIP_UP, ModelBlockRenderer.SizeInfo.WEST, ModelBlockRenderer.SizeInfo.UP, ModelBlockRenderer.SizeInfo.WEST}, new ModelBlockRenderer.SizeInfo[]{ModelBlockRenderer.SizeInfo.DOWN, ModelBlockRenderer.SizeInfo.FLIP_WEST, ModelBlockRenderer.SizeInfo.FLIP_DOWN, ModelBlockRenderer.SizeInfo.FLIP_WEST, ModelBlockRenderer.SizeInfo.FLIP_DOWN, ModelBlockRenderer.SizeInfo.WEST, ModelBlockRenderer.SizeInfo.DOWN, ModelBlockRenderer.SizeInfo.WEST}, new ModelBlockRenderer.SizeInfo[]{ModelBlockRenderer.SizeInfo.DOWN, ModelBlockRenderer.SizeInfo.FLIP_EAST, ModelBlockRenderer.SizeInfo.FLIP_DOWN, ModelBlockRenderer.SizeInfo.FLIP_EAST, ModelBlockRenderer.SizeInfo.FLIP_DOWN, ModelBlockRenderer.SizeInfo.EAST, ModelBlockRenderer.SizeInfo.DOWN, ModelBlockRenderer.SizeInfo.EAST}, new ModelBlockRenderer.SizeInfo[]{ModelBlockRenderer.SizeInfo.UP, ModelBlockRenderer.SizeInfo.FLIP_EAST, ModelBlockRenderer.SizeInfo.FLIP_UP, ModelBlockRenderer.SizeInfo.FLIP_EAST, ModelBlockRenderer.SizeInfo.FLIP_UP, ModelBlockRenderer.SizeInfo.EAST, ModelBlockRenderer.SizeInfo.UP, ModelBlockRenderer.SizeInfo.EAST}),
+      WEST(new Direction[]{Direction.UP, Direction.DOWN, Direction.NORTH, Direction.SOUTH}, 0.6F, true, new ModelBlockRenderer.SizeInfo[]{ModelBlockRenderer.SizeInfo.UP, ModelBlockRenderer.SizeInfo.SOUTH, ModelBlockRenderer.SizeInfo.UP, ModelBlockRenderer.SizeInfo.FLIP_SOUTH, ModelBlockRenderer.SizeInfo.FLIP_UP, ModelBlockRenderer.SizeInfo.FLIP_SOUTH, ModelBlockRenderer.SizeInfo.FLIP_UP, ModelBlockRenderer.SizeInfo.SOUTH}, new ModelBlockRenderer.SizeInfo[]{ModelBlockRenderer.SizeInfo.UP, ModelBlockRenderer.SizeInfo.NORTH, ModelBlockRenderer.SizeInfo.UP, ModelBlockRenderer.SizeInfo.FLIP_NORTH, ModelBlockRenderer.SizeInfo.FLIP_UP, ModelBlockRenderer.SizeInfo.FLIP_NORTH, ModelBlockRenderer.SizeInfo.FLIP_UP, ModelBlockRenderer.SizeInfo.NORTH}, new ModelBlockRenderer.SizeInfo[]{ModelBlockRenderer.SizeInfo.DOWN, ModelBlockRenderer.SizeInfo.NORTH, ModelBlockRenderer.SizeInfo.DOWN, ModelBlockRenderer.SizeInfo.FLIP_NORTH, ModelBlockRenderer.SizeInfo.FLIP_DOWN, ModelBlockRenderer.SizeInfo.FLIP_NORTH, ModelBlockRenderer.SizeInfo.FLIP_DOWN, ModelBlockRenderer.SizeInfo.NORTH}, new ModelBlockRenderer.SizeInfo[]{ModelBlockRenderer.SizeInfo.DOWN, ModelBlockRenderer.SizeInfo.SOUTH, ModelBlockRenderer.SizeInfo.DOWN, ModelBlockRenderer.SizeInfo.FLIP_SOUTH, ModelBlockRenderer.SizeInfo.FLIP_DOWN, ModelBlockRenderer.SizeInfo.FLIP_SOUTH, ModelBlockRenderer.SizeInfo.FLIP_DOWN, ModelBlockRenderer.SizeInfo.SOUTH}),
+      EAST(new Direction[]{Direction.DOWN, Direction.UP, Direction.NORTH, Direction.SOUTH}, 0.6F, true, new ModelBlockRenderer.SizeInfo[]{ModelBlockRenderer.SizeInfo.FLIP_DOWN, ModelBlockRenderer.SizeInfo.SOUTH, ModelBlockRenderer.SizeInfo.FLIP_DOWN, ModelBlockRenderer.SizeInfo.FLIP_SOUTH, ModelBlockRenderer.SizeInfo.DOWN, ModelBlockRenderer.SizeInfo.FLIP_SOUTH, ModelBlockRenderer.SizeInfo.DOWN, ModelBlockRenderer.SizeInfo.SOUTH}, new ModelBlockRenderer.SizeInfo[]{ModelBlockRenderer.SizeInfo.FLIP_DOWN, ModelBlockRenderer.SizeInfo.NORTH, ModelBlockRenderer.SizeInfo.FLIP_DOWN, ModelBlockRenderer.SizeInfo.FLIP_NORTH, ModelBlockRenderer.SizeInfo.DOWN, ModelBlockRenderer.SizeInfo.FLIP_NORTH, ModelBlockRenderer.SizeInfo.DOWN, ModelBlockRenderer.SizeInfo.NORTH}, new ModelBlockRenderer.SizeInfo[]{ModelBlockRenderer.SizeInfo.FLIP_UP, ModelBlockRenderer.SizeInfo.NORTH, ModelBlockRenderer.SizeInfo.FLIP_UP, ModelBlockRenderer.SizeInfo.FLIP_NORTH, ModelBlockRenderer.SizeInfo.UP, ModelBlockRenderer.SizeInfo.FLIP_NORTH, ModelBlockRenderer.SizeInfo.UP, ModelBlockRenderer.SizeInfo.NORTH}, new ModelBlockRenderer.SizeInfo[]{ModelBlockRenderer.SizeInfo.FLIP_UP, ModelBlockRenderer.SizeInfo.SOUTH, ModelBlockRenderer.SizeInfo.FLIP_UP, ModelBlockRenderer.SizeInfo.FLIP_SOUTH, ModelBlockRenderer.SizeInfo.UP, ModelBlockRenderer.SizeInfo.FLIP_SOUTH, ModelBlockRenderer.SizeInfo.UP, ModelBlockRenderer.SizeInfo.SOUTH});
+
+      final Direction[] corners;
+      final boolean doNonCubicWeight;
+      final ModelBlockRenderer.SizeInfo[] vert0Weights;
+      final ModelBlockRenderer.SizeInfo[] vert1Weights;
+      final ModelBlockRenderer.SizeInfo[] vert2Weights;
+      final ModelBlockRenderer.SizeInfo[] vert3Weights;
+      private static final ModelBlockRenderer.AdjacencyInfo[] BY_FACING = (ModelBlockRenderer.AdjacencyInfo[])Util.make(new ModelBlockRenderer.AdjacencyInfo[6], (var0) -> {
+         var0[Direction.DOWN.get3DDataValue()] = DOWN;
+         var0[Direction.UP.get3DDataValue()] = UP;
+         var0[Direction.NORTH.get3DDataValue()] = NORTH;
+         var0[Direction.SOUTH.get3DDataValue()] = SOUTH;
+         var0[Direction.WEST.get3DDataValue()] = WEST;
+         var0[Direction.EAST.get3DDataValue()] = EAST;
+      });
+
+      private AdjacencyInfo(Direction[] var3, float var4, boolean var5, ModelBlockRenderer.SizeInfo[] var6, ModelBlockRenderer.SizeInfo[] var7, ModelBlockRenderer.SizeInfo[] var8, ModelBlockRenderer.SizeInfo[] var9) {
+         this.corners = var3;
+         this.doNonCubicWeight = var5;
+         this.vert0Weights = var6;
+         this.vert1Weights = var7;
+         this.vert2Weights = var8;
+         this.vert3Weights = var9;
+      }
+
+      public static ModelBlockRenderer.AdjacencyInfo fromFacing(Direction var0) {
+         return BY_FACING[var0.get3DDataValue()];
+      }
+   }
+
+   protected static enum SizeInfo {
+      DOWN(Direction.DOWN, false),
+      UP(Direction.UP, false),
+      NORTH(Direction.NORTH, false),
+      SOUTH(Direction.SOUTH, false),
+      WEST(Direction.WEST, false),
+      EAST(Direction.EAST, false),
+      FLIP_DOWN(Direction.DOWN, true),
+      FLIP_UP(Direction.UP, true),
+      FLIP_NORTH(Direction.NORTH, true),
+      FLIP_SOUTH(Direction.SOUTH, true),
+      FLIP_WEST(Direction.WEST, true),
+      FLIP_EAST(Direction.EAST, true);
+
+      final int shape;
+
+      private SizeInfo(Direction var3, boolean var4) {
+         this.shape = var3.get3DDataValue() + (var4 ? ModelBlockRenderer.DIRECTIONS.length : 0);
+      }
+   }
+
+   private static enum AmbientVertexRemap {
       DOWN(0, 1, 2, 3),
       UP(2, 3, 0, 1),
       NORTH(3, 0, 1, 2),
       SOUTH(0, 1, 2, 3),
       WEST(3, 0, 1, 2),
       EAST(1, 2, 3, 0);
 
-      private final int vert0;
-      private final int vert1;
-      private final int vert2;
-      private final int vert3;
+      final int vert0;
+      final int vert1;
+      final int vert2;
+      final int vert3;
       private static final ModelBlockRenderer.AmbientVertexRemap[] BY_FACING = (ModelBlockRenderer.AmbientVertexRemap[])Util.make(new ModelBlockRenderer.AmbientVertexRemap[6], (var0) -> {
          var0[Direction.DOWN.get3DDataValue()] = DOWN;
          var0[Direction.UP.get3DDataValue()] = UP;
          var0[Direction.NORTH.get3DDataValue()] = NORTH;
          var0[Direction.SOUTH.get3DDataValue()] = SOUTH;
