--- net/minecraft/client/renderer/block/BlockRenderDispatcher.java
+++ net/minecraft/client/renderer/block/BlockRenderDispatcher.java
@@ -23,17 +23,19 @@
 import net.minecraft.world.level.material.FluidState;
 
 public class BlockRenderDispatcher implements ResourceManagerReloadListener {
    private final BlockModelShaper blockModelShaper;
    private final ModelBlockRenderer modelRenderer;
+   private final BlockEntityWithoutLevelRenderer blockEntityRenderer;
    private final LiquidBlockRenderer liquidBlockRenderer;
    private final Random random = new Random();
    private final BlockColors blockColors;
 
-   public BlockRenderDispatcher(BlockModelShaper var1, BlockColors var2) {
+   public BlockRenderDispatcher(BlockModelShaper var1, BlockEntityWithoutLevelRenderer var2, BlockColors var3) {
       this.blockModelShaper = var1;
-      this.blockColors = var2;
+      this.blockEntityRenderer = var2;
+      this.blockColors = var3;
       this.modelRenderer = new ModelBlockRenderer(this.blockColors);
       this.liquidBlockRenderer = new LiquidBlockRenderer();
    }
 
    public BlockModelShaper getBlockModelShaper() {
@@ -53,22 +55,22 @@
          RenderShape var8 = var1.getRenderShape();
          return var8 != RenderShape.MODEL ? false : this.modelRenderer.tesselateBlock(var3, this.getBlockModel(var1), var1, var2, var4, var5, var6, var7, var1.getSeed(var2), OverlayTexture.NO_OVERLAY);
       } catch (Throwable var11) {
          CrashReport var9 = CrashReport.forThrowable(var11, "Tesselating block in world");
          CrashReportCategory var10 = var9.addCategory("Block being tesselated");
-         CrashReportCategory.populateBlockDetails(var10, var2, var1);
+         CrashReportCategory.populateBlockDetails(var10, var3, var2, var1);
          throw new ReportedException(var9);
       }
    }
 
    public boolean renderLiquid(BlockPos var1, BlockAndTintGetter var2, VertexConsumer var3, FluidState var4) {
       try {
          return this.liquidBlockRenderer.tesselate(var2, var1, var3, var4);
       } catch (Throwable var8) {
          CrashReport var6 = CrashReport.forThrowable(var8, "Tesselating liquid in world");
          CrashReportCategory var7 = var6.addCategory("Block being tesselated");
-         CrashReportCategory.populateBlockDetails(var7, var1, (BlockState)null);
+         CrashReportCategory.populateBlockDetails(var7, var2, var1, (BlockState)null);
          throw new ReportedException(var6);
       }
    }
 
    public ModelBlockRenderer getModelRenderer() {
@@ -90,11 +92,11 @@
             float var10 = (float)(var8 >> 8 & 255) / 255.0F;
             float var11 = (float)(var8 & 255) / 255.0F;
             this.modelRenderer.renderModel(var2.last(), var3.getBuffer(ItemBlockRenderTypes.getRenderType(var1, false)), var1, var7, var9, var10, var11, var4, var5);
             break;
          case ENTITYBLOCK_ANIMATED:
-            BlockEntityWithoutLevelRenderer.instance.renderByItem(new ItemStack(var1.getBlock()), ItemTransforms.TransformType.NONE, var2, var3, var4, var5);
+            this.blockEntityRenderer.renderByItem(new ItemStack(var1.getBlock()), ItemTransforms.TransformType.NONE, var2, var3, var4, var5);
          }
 
       }
    }
 
