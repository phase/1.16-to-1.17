--- net/minecraft/client/renderer/entity/ItemRenderer.java
+++ net/minecraft/client/renderer/entity/ItemRenderer.java
@@ -3,15 +3,17 @@
 import com.google.common.collect.Sets;
 import com.mojang.blaze3d.platform.GlStateManager;
 import com.mojang.blaze3d.platform.Lighting;
 import com.mojang.blaze3d.systems.RenderSystem;
 import com.mojang.blaze3d.vertex.BufferBuilder;
+import com.mojang.blaze3d.vertex.BufferUploader;
 import com.mojang.blaze3d.vertex.DefaultVertexFormat;
 import com.mojang.blaze3d.vertex.PoseStack;
 import com.mojang.blaze3d.vertex.SheetedDecalTextureGenerator;
 import com.mojang.blaze3d.vertex.Tesselator;
 import com.mojang.blaze3d.vertex.VertexConsumer;
+import com.mojang.blaze3d.vertex.VertexFormat;
 import com.mojang.blaze3d.vertex.VertexMultiConsumer;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
 import java.util.Set;
@@ -23,10 +25,11 @@
 import net.minecraft.client.color.item.ItemColors;
 import net.minecraft.client.gui.Font;
 import net.minecraft.client.multiplayer.ClientLevel;
 import net.minecraft.client.player.LocalPlayer;
 import net.minecraft.client.renderer.BlockEntityWithoutLevelRenderer;
+import net.minecraft.client.renderer.GameRenderer;
 import net.minecraft.client.renderer.ItemBlockRenderTypes;
 import net.minecraft.client.renderer.ItemModelShaper;
 import net.minecraft.client.renderer.MultiBufferSource;
 import net.minecraft.client.renderer.RenderType;
 import net.minecraft.client.renderer.Sheets;
@@ -60,20 +63,22 @@
    private static final Set<Item> IGNORED;
    public float blitOffset;
    private final ItemModelShaper itemModelShaper;
    private final TextureManager textureManager;
    private final ItemColors itemColors;
+   private final BlockEntityWithoutLevelRenderer blockEntityRenderer;
 
-   public ItemRenderer(TextureManager var1, ModelManager var2, ItemColors var3) {
+   public ItemRenderer(TextureManager var1, ModelManager var2, ItemColors var3, BlockEntityWithoutLevelRenderer var4) {
       this.textureManager = var1;
       this.itemModelShaper = new ItemModelShaper(var2);
-      Iterator var4 = Registry.ITEM.iterator();
+      this.blockEntityRenderer = var4;
+      Iterator var5 = Registry.ITEM.iterator();
 
-      while(var4.hasNext()) {
-         Item var5 = (Item)var4.next();
-         if (!IGNORED.contains(var5)) {
-            this.itemModelShaper.register(var5, new ModelResourceLocation(Registry.ITEM.getKey(var5), "inventory"));
+      while(var5.hasNext()) {
+         Item var6 = (Item)var5.next();
+         if (!IGNORED.contains(var6)) {
+            this.itemModelShaper.register(var6, new ModelResourceLocation(Registry.ITEM.getKey(var6), "inventory"));
          }
       }
 
       this.itemColors = var3;
    }
@@ -100,30 +105,32 @@
 
    public void render(ItemStack var1, ItemTransforms.TransformType var2, boolean var3, PoseStack var4, MultiBufferSource var5, int var6, int var7, BakedModel var8) {
       if (!var1.isEmpty()) {
          var4.pushPose();
          boolean var9 = var2 == ItemTransforms.TransformType.GUI || var2 == ItemTransforms.TransformType.GROUND || var2 == ItemTransforms.TransformType.FIXED;
-         if (var1.getItem() == Items.TRIDENT && var9) {
-            var8 = this.itemModelShaper.getModelManager().getModel(new ModelResourceLocation("minecraft:trident#inventory"));
+         if (var9) {
+            if (var1.is(Items.TRIDENT)) {
+               var8 = this.itemModelShaper.getModelManager().getModel(new ModelResourceLocation("minecraft:trident#inventory"));
+            } else if (var1.is(Items.SPYGLASS)) {
+               var8 = this.itemModelShaper.getModelManager().getModel(new ModelResourceLocation("minecraft:spyglass#inventory"));
+            }
          }
 
          var8.getTransforms().getTransform(var2).apply(var3, var4);
          var4.translate(-0.5D, -0.5D, -0.5D);
-         if (var8.isCustomRenderer() || var1.getItem() == Items.TRIDENT && !var9) {
-            BlockEntityWithoutLevelRenderer.instance.renderByItem(var1, var2, var4, var5, var6, var7);
-         } else {
+         if (!var8.isCustomRenderer() && (!var1.is(Items.TRIDENT) || var9)) {
             boolean var10;
             if (var2 != ItemTransforms.TransformType.GUI && !var2.firstPerson() && var1.getItem() instanceof BlockItem) {
                Block var11 = ((BlockItem)var1.getItem()).getBlock();
                var10 = !(var11 instanceof HalfTransparentBlock) && !(var11 instanceof StainedGlassPaneBlock);
             } else {
                var10 = true;
             }
 
             RenderType var14 = ItemBlockRenderTypes.getRenderType(var1, var10);
             VertexConsumer var12;
-            if (var1.getItem() == Items.COMPASS && var1.hasFoil()) {
+            if (var1.is(Items.COMPASS) && var1.hasFoil()) {
                var4.pushPose();
                PoseStack.Pose var13 = var4.last();
                if (var2 == ItemTransforms.TransformType.GUI) {
                   var13.pose().multiply(0.5F);
                } else if (var2.firstPerson()) {
@@ -142,10 +149,12 @@
             } else {
                var12 = getFoilBuffer(var5, var14, true, var1.hasFoil());
             }
 
             this.renderModelLists(var8, var1, var6, var7, var4, var12);
+         } else {
+            this.blockEntityRenderer.renderByItem(var1, var2, var4, var5, var6, var7);
          }
 
          var4.popPose();
       }
    }
@@ -192,106 +201,109 @@
          var2.putBulkData(var8, var10, var12, var13, var14, var5, var6);
       }
 
    }
 
-   public BakedModel getModel(ItemStack var1, @Nullable Level var2, @Nullable LivingEntity var3) {
-      Item var5 = var1.getItem();
-      BakedModel var4;
-      if (var5 == Items.TRIDENT) {
-         var4 = this.itemModelShaper.getModelManager().getModel(new ModelResourceLocation("minecraft:trident_in_hand#inventory"));
+   public BakedModel getModel(ItemStack var1, @Nullable Level var2, @Nullable LivingEntity var3, int var4) {
+      BakedModel var5;
+      if (var1.is(Items.TRIDENT)) {
+         var5 = this.itemModelShaper.getModelManager().getModel(new ModelResourceLocation("minecraft:trident_in_hand#inventory"));
+      } else if (var1.is(Items.SPYGLASS)) {
+         var5 = this.itemModelShaper.getModelManager().getModel(new ModelResourceLocation("minecraft:spyglass_in_hand#inventory"));
       } else {
-         var4 = this.itemModelShaper.getItemModel(var1);
+         var5 = this.itemModelShaper.getItemModel(var1);
       }
 
       ClientLevel var6 = var2 instanceof ClientLevel ? (ClientLevel)var2 : null;
-      BakedModel var7 = var4.getOverrides().resolve(var4, var1, var6, var3);
+      BakedModel var7 = var5.getOverrides().resolve(var5, var1, var6, var3, var4);
       return var7 == null ? this.itemModelShaper.getModelManager().getMissingModel() : var7;
    }
 
-   public void renderStatic(ItemStack var1, ItemTransforms.TransformType var2, int var3, int var4, PoseStack var5, MultiBufferSource var6) {
-      this.renderStatic((LivingEntity)null, var1, var2, false, var5, var6, (Level)null, var3, var4);
+   public void renderStatic(ItemStack var1, ItemTransforms.TransformType var2, int var3, int var4, PoseStack var5, MultiBufferSource var6, int var7) {
+      this.renderStatic((LivingEntity)null, var1, var2, false, var5, var6, (Level)null, var3, var4, var7);
    }
 
-   public void renderStatic(@Nullable LivingEntity var1, ItemStack var2, ItemTransforms.TransformType var3, boolean var4, PoseStack var5, MultiBufferSource var6, @Nullable Level var7, int var8, int var9) {
+   public void renderStatic(@Nullable LivingEntity var1, ItemStack var2, ItemTransforms.TransformType var3, boolean var4, PoseStack var5, MultiBufferSource var6, @Nullable Level var7, int var8, int var9, int var10) {
       if (!var2.isEmpty()) {
-         BakedModel var10 = this.getModel(var2, var7, var1);
-         this.render(var2, var3, var4, var5, var6, var8, var9, var10);
+         BakedModel var11 = this.getModel(var2, var7, var1, var10);
+         this.render(var2, var3, var4, var5, var6, var8, var9, var11);
       }
    }
 
    public void renderGuiItem(ItemStack var1, int var2, int var3) {
-      this.renderGuiItem(var1, var2, var3, this.getModel(var1, (Level)null, (LivingEntity)null));
+      this.renderGuiItem(var1, var2, var3, this.getModel(var1, (Level)null, (LivingEntity)null, 0));
    }
 
    protected void renderGuiItem(ItemStack var1, int var2, int var3, BakedModel var4) {
-      RenderSystem.pushMatrix();
-      this.textureManager.bind(TextureAtlas.LOCATION_BLOCKS);
       this.textureManager.getTexture(TextureAtlas.LOCATION_BLOCKS).setFilter(false, false);
-      RenderSystem.enableRescaleNormal();
-      RenderSystem.enableAlphaTest();
-      RenderSystem.defaultAlphaFunc();
+      RenderSystem.setShaderTexture(0, TextureAtlas.LOCATION_BLOCKS);
       RenderSystem.enableBlend();
       RenderSystem.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
-      RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
-      RenderSystem.translatef((float)var2, (float)var3, 100.0F + this.blitOffset);
-      RenderSystem.translatef(8.0F, 8.0F, 0.0F);
-      RenderSystem.scalef(1.0F, -1.0F, 1.0F);
-      RenderSystem.scalef(16.0F, 16.0F, 16.0F);
-      PoseStack var5 = new PoseStack();
-      MultiBufferSource.BufferSource var6 = Minecraft.getInstance().renderBuffers().bufferSource();
-      boolean var7 = !var4.usesBlockLight();
-      if (var7) {
+      RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
+      PoseStack var5 = RenderSystem.getModelViewStack();
+      var5.pushPose();
+      var5.translate((double)var2, (double)var3, (double)(100.0F + this.blitOffset));
+      var5.translate(8.0D, 8.0D, 0.0D);
+      var5.scale(1.0F, -1.0F, 1.0F);
+      var5.scale(16.0F, 16.0F, 16.0F);
+      RenderSystem.applyModelViewMatrix();
+      PoseStack var6 = new PoseStack();
+      MultiBufferSource.BufferSource var7 = Minecraft.getInstance().renderBuffers().bufferSource();
+      boolean var8 = !var4.usesBlockLight();
+      if (var8) {
          Lighting.setupForFlatItems();
       }
 
-      this.render(var1, ItemTransforms.TransformType.GUI, false, var5, var6, 15728880, OverlayTexture.NO_OVERLAY, var4);
-      var6.endBatch();
+      this.render(var1, ItemTransforms.TransformType.GUI, false, var6, var7, 15728880, OverlayTexture.NO_OVERLAY, var4);
+      var7.endBatch();
       RenderSystem.enableDepthTest();
-      if (var7) {
+      if (var8) {
          Lighting.setupFor3DItems();
       }
 
-      RenderSystem.disableAlphaTest();
-      RenderSystem.disableRescaleNormal();
-      RenderSystem.popMatrix();
+      var5.popPose();
+      RenderSystem.applyModelViewMatrix();
    }
 
    public void renderAndDecorateItem(ItemStack var1, int var2, int var3) {
-      this.tryRenderGuiItem(Minecraft.getInstance().player, var1, var2, var3);
+      this.tryRenderGuiItem(Minecraft.getInstance().player, var1, var2, var3, 0);
    }
 
+   public void renderAndDecorateItem(ItemStack var1, int var2, int var3, int var4) {
+      this.tryRenderGuiItem(Minecraft.getInstance().player, var1, var2, var3, var4);
+   }
+
    public void renderAndDecorateFakeItem(ItemStack var1, int var2, int var3) {
-      this.tryRenderGuiItem((LivingEntity)null, var1, var2, var3);
+      this.tryRenderGuiItem((LivingEntity)null, var1, var2, var3, 0);
    }
 
-   public void renderAndDecorateItem(LivingEntity var1, ItemStack var2, int var3, int var4) {
-      this.tryRenderGuiItem(var1, var2, var3, var4);
+   public void renderAndDecorateItem(LivingEntity var1, ItemStack var2, int var3, int var4, int var5) {
+      this.tryRenderGuiItem(var1, var2, var3, var4, var5);
    }
 
-   private void tryRenderGuiItem(@Nullable LivingEntity var1, ItemStack var2, int var3, int var4) {
+   private void tryRenderGuiItem(@Nullable LivingEntity var1, ItemStack var2, int var3, int var4, int var5) {
       if (!var2.isEmpty()) {
          this.blitOffset += 50.0F;
 
          try {
-            this.renderGuiItem(var2, var3, var4, this.getModel(var2, (Level)null, var1));
-         } catch (Throwable var8) {
-            CrashReport var6 = CrashReport.forThrowable(var8, "Rendering item");
-            CrashReportCategory var7 = var6.addCategory("Item being rendered");
-            var7.setDetail("Item Type", () -> {
+            this.renderGuiItem(var2, var3, var4, this.getModel(var2, (Level)null, var1, var5));
+         } catch (Throwable var9) {
+            CrashReport var7 = CrashReport.forThrowable(var9, "Rendering item");
+            CrashReportCategory var8 = var7.addCategory("Item being rendered");
+            var8.setDetail("Item Type", () -> {
                return String.valueOf(var2.getItem());
             });
-            var7.setDetail("Item Damage", () -> {
+            var8.setDetail("Item Damage", () -> {
                return String.valueOf(var2.getDamageValue());
             });
-            var7.setDetail("Item NBT", () -> {
+            var8.setDetail("Item NBT", () -> {
                return String.valueOf(var2.getTag());
             });
-            var7.setDetail("Item Foil", () -> {
+            var8.setDetail("Item Foil", () -> {
                return String.valueOf(var2.hasFoil());
             });
-            throw new ReportedException(var6);
+            throw new ReportedException(var7);
          }
 
          this.blitOffset -= 50.0F;
       }
    }
@@ -309,54 +321,51 @@
             MultiBufferSource.BufferSource var8 = MultiBufferSource.immediate(Tesselator.getInstance().getBuilder());
             var1.drawInBatch((String)var7, (float)(var3 + 19 - 2 - var1.width(var7)), (float)(var4 + 6 + 3), 16777215, true, var6.last().pose(), var8, false, 0, 15728880);
             var8.endBatch();
          }
 
-         if (var2.isDamaged()) {
+         if (var2.isBarVisible()) {
             RenderSystem.disableDepthTest();
             RenderSystem.disableTexture();
-            RenderSystem.disableAlphaTest();
             RenderSystem.disableBlend();
-            Tesselator var14 = Tesselator.getInstance();
-            BufferBuilder var16 = var14.getBuilder();
-            float var9 = (float)var2.getDamageValue();
-            float var10 = (float)var2.getMaxDamage();
-            float var11 = Math.max(0.0F, (var10 - var9) / var10);
-            int var12 = Math.round(13.0F - var9 * 13.0F / var10);
-            int var13 = Mth.hsvToRgb(var11 / 3.0F, 1.0F, 1.0F);
-            this.fillRect(var16, var3 + 2, var4 + 13, 13, 2, 0, 0, 0, 255);
-            this.fillRect(var16, var3 + 2, var4 + 13, var12, 1, var13 >> 16 & 255, var13 >> 8 & 255, var13 & 255, 255);
+            Tesselator var11 = Tesselator.getInstance();
+            BufferBuilder var13 = var11.getBuilder();
+            int var9 = var2.getBarWidth();
+            int var10 = var2.getBarColor();
+            this.fillRect(var13, var3 + 2, var4 + 13, 13, 2, 0, 0, 0, 255);
+            this.fillRect(var13, var3 + 2, var4 + 13, var9, 1, var10 >> 16 & 255, var10 >> 8 & 255, var10 & 255, 255);
             RenderSystem.enableBlend();
-            RenderSystem.enableAlphaTest();
             RenderSystem.enableTexture();
             RenderSystem.enableDepthTest();
          }
 
-         LocalPlayer var15 = Minecraft.getInstance().player;
-         float var17 = var15 == null ? 0.0F : var15.getCooldowns().getCooldownPercent(var2.getItem(), Minecraft.getInstance().getFrameTime());
-         if (var17 > 0.0F) {
+         LocalPlayer var12 = Minecraft.getInstance().player;
+         float var14 = var12 == null ? 0.0F : var12.getCooldowns().getCooldownPercent(var2.getItem(), Minecraft.getInstance().getFrameTime());
+         if (var14 > 0.0F) {
             RenderSystem.disableDepthTest();
             RenderSystem.disableTexture();
             RenderSystem.enableBlend();
             RenderSystem.defaultBlendFunc();
-            Tesselator var18 = Tesselator.getInstance();
-            BufferBuilder var19 = var18.getBuilder();
-            this.fillRect(var19, var3, var4 + Mth.floor(16.0F * (1.0F - var17)), 16, Mth.ceil(16.0F * var17), 255, 255, 255, 127);
+            Tesselator var15 = Tesselator.getInstance();
+            BufferBuilder var16 = var15.getBuilder();
+            this.fillRect(var16, var3, var4 + Mth.floor(16.0F * (1.0F - var14)), 16, Mth.ceil(16.0F * var14), 255, 255, 255, 127);
             RenderSystem.enableTexture();
             RenderSystem.enableDepthTest();
          }
 
       }
    }
 
    private void fillRect(BufferBuilder var1, int var2, int var3, int var4, int var5, int var6, int var7, int var8, int var9) {
-      var1.begin(7, DefaultVertexFormat.POSITION_COLOR);
+      RenderSystem.setShader(GameRenderer::getPositionColorShader);
+      var1.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION_COLOR);
       var1.vertex((double)(var2 + 0), (double)(var3 + 0), 0.0D).color(var6, var7, var8, var9).endVertex();
       var1.vertex((double)(var2 + 0), (double)(var3 + var5), 0.0D).color(var6, var7, var8, var9).endVertex();
       var1.vertex((double)(var2 + var4), (double)(var3 + var5), 0.0D).color(var6, var7, var8, var9).endVertex();
       var1.vertex((double)(var2 + var4), (double)(var3 + 0), 0.0D).color(var6, var7, var8, var9).endVertex();
-      Tesselator.getInstance().end();
+      var1.end();
+      BufferUploader.end(var1);
    }
 
    public void onResourceManagerReload(ResourceManager var1) {
       this.itemModelShaper.rebuildCache();
    }
