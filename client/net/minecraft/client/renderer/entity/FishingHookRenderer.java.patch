--- net/minecraft/client/renderer/entity/FishingHookRenderer.java
+++ net/minecraft/client/renderer/entity/FishingHookRenderer.java
@@ -20,11 +20,11 @@
 
 public class FishingHookRenderer extends EntityRenderer<FishingHook> {
    private static final ResourceLocation TEXTURE_LOCATION = new ResourceLocation("textures/entity/fishing_hook.png");
    private static final RenderType RENDER_TYPE;
 
-   public FishingHookRenderer(EntityRenderDispatcher var1) {
+   public FishingHookRenderer(EntityRendererProvider.Context var1) {
       super(var1);
    }
 
    public void render(FishingHook var1, float var2, float var3, PoseStack var4, MultiBufferSource var5, int var6) {
       Player var7 = var1.getPlayerOwner();
@@ -43,11 +43,11 @@
          vertex(var11, var9, var10, var6, 1.0F, 1, 1, 0);
          vertex(var11, var9, var10, var6, 0.0F, 1, 0, 0);
          var4.popPose();
          int var12 = var7.getMainArm() == HumanoidArm.RIGHT ? 1 : -1;
          ItemStack var13 = var7.getMainHandItem();
-         if (var13.getItem() != Items.FISHING_ROD) {
+         if (!var13.is(Items.FISHING_ROD)) {
             var12 = -var12;
          }
 
          float var14 = var7.getAttackAnim(var3);
          float var15 = Mth.sin(Mth.sqrt(var14) * 3.1415927F);
@@ -84,17 +84,16 @@
          double var45 = Mth.lerp((double)var3, var1.yo, var1.getY()) + 0.25D;
          double var36 = Mth.lerp((double)var3, var1.zo, var1.getZ());
          float var38 = (float)(var25 - var32);
          float var39 = (float)(var27 - var45) + var31;
          float var40 = (float)(var29 - var36);
-         VertexConsumer var41 = var5.getBuffer(RenderType.lines());
-         Matrix4f var42 = var4.last().pose();
+         VertexConsumer var41 = var5.getBuffer(RenderType.lineStrip());
+         PoseStack.Pose var42 = var4.last();
          boolean var43 = true;
 
-         for(int var44 = 0; var44 < 16; ++var44) {
-            stringVertex(var38, var39, var40, var41, var42, fraction(var44, 16));
-            stringVertex(var38, var39, var40, var41, var42, fraction(var44 + 1, 16));
+         for(int var44 = 0; var44 <= 16; ++var44) {
+            stringVertex(var38, var39, var40, var41, var42, fraction(var44, 16), fraction(var44 + 1, 17));
          }
 
          var4.popPose();
          super.render(var1, var2, var3, var4, var5, var6);
       }
@@ -106,12 +105,22 @@
 
    private static void vertex(VertexConsumer var0, Matrix4f var1, Matrix3f var2, int var3, float var4, int var5, int var6, int var7) {
       var0.vertex(var1, var4 - 0.5F, (float)var5 - 0.5F, 0.0F).color(255, 255, 255, 255).uv((float)var6, (float)var7).overlayCoords(OverlayTexture.NO_OVERLAY).uv2(var3).normal(var2, 0.0F, 1.0F, 0.0F).endVertex();
    }
 
-   private static void stringVertex(float var0, float var1, float var2, VertexConsumer var3, Matrix4f var4, float var5) {
-      var3.vertex(var4, var0 * var5, var1 * (var5 * var5 + var5) * 0.5F + 0.25F, var2 * var5).color(0, 0, 0, 255).endVertex();
+   private static void stringVertex(float var0, float var1, float var2, VertexConsumer var3, PoseStack.Pose var4, float var5, float var6) {
+      float var7 = var0 * var5;
+      float var8 = var1 * (var5 * var5 + var5) * 0.5F + 0.25F;
+      float var9 = var2 * var5;
+      float var10 = var0 * var6 - var7;
+      float var11 = var1 * (var6 * var6 + var6) * 0.5F + 0.25F - var8;
+      float var12 = var2 * var6 - var9;
+      float var13 = Mth.sqrt(var10 * var10 + var11 * var11 + var12 * var12);
+      var10 /= var13;
+      var11 /= var13;
+      var12 /= var13;
+      var3.vertex(var4.pose(), var7, var8, var9).color(0, 0, 0, 255).normal(var4.normal(), var10, var11, var12).endVertex();
    }
 
    public ResourceLocation getTextureLocation(FishingHook var1) {
       return TEXTURE_LOCATION;
    }
