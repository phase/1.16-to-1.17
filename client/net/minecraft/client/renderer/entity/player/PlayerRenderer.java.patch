--- net/minecraft/client/renderer/entity/player/PlayerRenderer.java
+++ net/minecraft/client/renderer/entity/player/PlayerRenderer.java
@@ -2,25 +2,26 @@
 
 import com.mojang.blaze3d.vertex.PoseStack;
 import com.mojang.math.Vector3f;
 import net.minecraft.client.model.HumanoidModel;
 import net.minecraft.client.model.PlayerModel;
+import net.minecraft.client.model.geom.ModelLayers;
 import net.minecraft.client.model.geom.ModelPart;
 import net.minecraft.client.player.AbstractClientPlayer;
 import net.minecraft.client.renderer.MultiBufferSource;
 import net.minecraft.client.renderer.RenderType;
-import net.minecraft.client.renderer.entity.EntityRenderDispatcher;
+import net.minecraft.client.renderer.entity.EntityRendererProvider;
 import net.minecraft.client.renderer.entity.LivingEntityRenderer;
 import net.minecraft.client.renderer.entity.layers.ArrowLayer;
 import net.minecraft.client.renderer.entity.layers.BeeStingerLayer;
 import net.minecraft.client.renderer.entity.layers.CapeLayer;
 import net.minecraft.client.renderer.entity.layers.CustomHeadLayer;
 import net.minecraft.client.renderer.entity.layers.Deadmau5EarsLayer;
 import net.minecraft.client.renderer.entity.layers.ElytraLayer;
 import net.minecraft.client.renderer.entity.layers.HumanoidArmorLayer;
-import net.minecraft.client.renderer.entity.layers.ItemInHandLayer;
 import net.minecraft.client.renderer.entity.layers.ParrotOnShoulderLayer;
+import net.minecraft.client.renderer.entity.layers.PlayerItemInHandLayer;
 import net.minecraft.client.renderer.entity.layers.SpinAttackEffectLayer;
 import net.minecraft.client.renderer.texture.OverlayTexture;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.TextComponent;
 import net.minecraft.resources.ResourceLocation;
@@ -38,25 +39,21 @@
 import net.minecraft.world.scores.Objective;
 import net.minecraft.world.scores.Score;
 import net.minecraft.world.scores.Scoreboard;
 
 public class PlayerRenderer extends LivingEntityRenderer<AbstractClientPlayer, PlayerModel<AbstractClientPlayer>> {
-   public PlayerRenderer(EntityRenderDispatcher var1) {
-      this(var1, false);
-   }
-
-   public PlayerRenderer(EntityRenderDispatcher var1, boolean var2) {
-      super(var1, new PlayerModel(0.0F, var2), 0.5F);
-      this.addLayer(new HumanoidArmorLayer(this, new HumanoidModel(0.5F), new HumanoidModel(1.0F)));
-      this.addLayer(new ItemInHandLayer(this));
-      this.addLayer(new ArrowLayer(this));
+   public PlayerRenderer(EntityRendererProvider.Context var1, boolean var2) {
+      super(var1, new PlayerModel(var1.bakeLayer(var2 ? ModelLayers.PLAYER_SLIM : ModelLayers.PLAYER), var2), 0.5F);
+      this.addLayer(new HumanoidArmorLayer(this, new HumanoidModel(var1.bakeLayer(var2 ? ModelLayers.PLAYER_SLIM_INNER_ARMOR : ModelLayers.PLAYER_INNER_ARMOR)), new HumanoidModel(var1.bakeLayer(var2 ? ModelLayers.PLAYER_SLIM_OUTER_ARMOR : ModelLayers.PLAYER_OUTER_ARMOR))));
+      this.addLayer(new PlayerItemInHandLayer(this));
+      this.addLayer(new ArrowLayer(var1, this));
       this.addLayer(new Deadmau5EarsLayer(this));
       this.addLayer(new CapeLayer(this));
-      this.addLayer(new CustomHeadLayer(this));
-      this.addLayer(new ElytraLayer(this));
-      this.addLayer(new ParrotOnShoulderLayer(this));
-      this.addLayer(new SpinAttackEffectLayer(this));
+      this.addLayer(new CustomHeadLayer(this, var1.getModelSet()));
+      this.addLayer(new ElytraLayer(this, var1.getModelSet()));
+      this.addLayer(new ParrotOnShoulderLayer(this, var1.getModelSet()));
+      this.addLayer(new SpinAttackEffectLayer(this, var1.getModelSet()));
       this.addLayer(new BeeStingerLayer(this));
    }
 
    public void render(AbstractClientPlayer var1, float var2, float var3, PoseStack var4, MultiBufferSource var5, int var6) {
       this.setModelProperties(var1);
@@ -119,11 +116,15 @@
             }
 
             if (var3 == UseAnim.CROSSBOW && var1 == var0.getUsedItemHand()) {
                return HumanoidModel.ArmPose.CROSSBOW_CHARGE;
             }
-         } else if (!var0.swinging && var2.getItem() == Items.CROSSBOW && CrossbowItem.isCharged(var2)) {
+
+            if (var3 == UseAnim.SPYGLASS) {
+               return HumanoidModel.ArmPose.SPYGLASS;
+            }
+         } else if (!var0.swinging && var2.is(Items.CROSSBOW) && CrossbowItem.isCharged(var2)) {
             return HumanoidModel.ArmPose.CROSSBOW_HOLD;
          }
 
          return HumanoidModel.ArmPose.ITEM;
       }
