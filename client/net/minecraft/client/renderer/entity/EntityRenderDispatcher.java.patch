--- net/minecraft/client/renderer/entity/EntityRenderDispatcher.java
+++ net/minecraft/client/renderer/entity/EntityRenderDispatcher.java
@@ -1,8 +1,8 @@
 package net.minecraft.client.renderer.entity;
 
-import com.google.common.collect.Maps;
+import com.google.common.collect.ImmutableMap;
 import com.mojang.blaze3d.vertex.PoseStack;
 import com.mojang.blaze3d.vertex.VertexConsumer;
 import com.mojang.math.Matrix4f;
 import com.mojang.math.Quaternion;
 import com.mojang.math.Vector3f;
@@ -14,200 +14,74 @@
 import net.minecraft.ReportedException;
 import net.minecraft.client.Camera;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.Options;
 import net.minecraft.client.gui.Font;
+import net.minecraft.client.model.geom.EntityModelSet;
 import net.minecraft.client.player.AbstractClientPlayer;
 import net.minecraft.client.renderer.LevelRenderer;
 import net.minecraft.client.renderer.MultiBufferSource;
 import net.minecraft.client.renderer.RenderType;
 import net.minecraft.client.renderer.Sheets;
 import net.minecraft.client.renderer.culling.Frustum;
-import net.minecraft.client.renderer.entity.player.PlayerRenderer;
 import net.minecraft.client.renderer.texture.OverlayTexture;
 import net.minecraft.client.renderer.texture.TextureAtlasSprite;
 import net.minecraft.client.renderer.texture.TextureManager;
 import net.minecraft.client.resources.model.ModelBakery;
 import net.minecraft.core.BlockPos;
-import net.minecraft.core.Registry;
 import net.minecraft.resources.ResourceLocation;
-import net.minecraft.server.packs.resources.ReloadableResourceManager;
+import net.minecraft.server.packs.resources.ResourceManager;
+import net.minecraft.server.packs.resources.ResourceManagerReloadListener;
 import net.minecraft.util.Mth;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.boss.EnderDragonPart;
 import net.minecraft.world.entity.boss.enderdragon.EnderDragon;
+import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.block.RenderShape;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.phys.shapes.VoxelShape;
 
-public class EntityRenderDispatcher {
+public class EntityRenderDispatcher implements ResourceManagerReloadListener {
    private static final RenderType SHADOW_RENDER_TYPE = RenderType.entityShadow(new ResourceLocation("textures/misc/shadow.png"));
-   private final Map<EntityType<?>, EntityRenderer<?>> renderers = Maps.newHashMap();
-   private final Map<String, PlayerRenderer> playerRenderers = Maps.newHashMap();
-   private final PlayerRenderer defaultPlayerRenderer;
-   private final Font font;
+   private Map<EntityType<?>, EntityRenderer<?>> renderers = ImmutableMap.of();
+   private Map<String, EntityRenderer<? extends Player>> playerRenderers = ImmutableMap.of();
    public final TextureManager textureManager;
    private Level level;
    public Camera camera;
    private Quaternion cameraOrientation;
    public Entity crosshairPickEntity;
+   private final ItemRenderer itemRenderer;
+   private final Font font;
    public final Options options;
+   private final EntityModelSet entityModels;
    private boolean shouldRenderShadow = true;
    private boolean renderHitBoxes;
 
    public <E extends Entity> int getPackedLightCoords(E var1, float var2) {
       return this.getRenderer(var1).getPackedLightCoords(var1, var2);
    }
 
-   private <T extends Entity> void register(EntityType<T> var1, EntityRenderer<? super T> var2) {
-      this.renderers.put(var1, var2);
-   }
-
-   private void registerRenderers(ItemRenderer var1, ReloadableResourceManager var2) {
-      this.register(EntityType.AREA_EFFECT_CLOUD, new AreaEffectCloudRenderer(this));
-      this.register(EntityType.ARMOR_STAND, new ArmorStandRenderer(this));
-      this.register(EntityType.ARROW, new TippableArrowRenderer(this));
-      this.register(EntityType.BAT, new BatRenderer(this));
-      this.register(EntityType.BEE, new BeeRenderer(this));
-      this.register(EntityType.BLAZE, new BlazeRenderer(this));
-      this.register(EntityType.BOAT, new BoatRenderer(this));
-      this.register(EntityType.CAT, new CatRenderer(this));
-      this.register(EntityType.CAVE_SPIDER, new CaveSpiderRenderer(this));
-      this.register(EntityType.CHEST_MINECART, new MinecartRenderer(this));
-      this.register(EntityType.CHICKEN, new ChickenRenderer(this));
-      this.register(EntityType.COD, new CodRenderer(this));
-      this.register(EntityType.COMMAND_BLOCK_MINECART, new MinecartRenderer(this));
-      this.register(EntityType.COW, new CowRenderer(this));
-      this.register(EntityType.CREEPER, new CreeperRenderer(this));
-      this.register(EntityType.DOLPHIN, new DolphinRenderer(this));
-      this.register(EntityType.DONKEY, new ChestedHorseRenderer(this, 0.87F));
-      this.register(EntityType.DRAGON_FIREBALL, new DragonFireballRenderer(this));
-      this.register(EntityType.DROWNED, new DrownedRenderer(this));
-      this.register(EntityType.EGG, new ThrownItemRenderer(this, var1));
-      this.register(EntityType.ELDER_GUARDIAN, new ElderGuardianRenderer(this));
-      this.register(EntityType.END_CRYSTAL, new EndCrystalRenderer(this));
-      this.register(EntityType.ENDER_DRAGON, new EnderDragonRenderer(this));
-      this.register(EntityType.ENDERMAN, new EndermanRenderer(this));
-      this.register(EntityType.ENDERMITE, new EndermiteRenderer(this));
-      this.register(EntityType.ENDER_PEARL, new ThrownItemRenderer(this, var1));
-      this.register(EntityType.EVOKER_FANGS, new EvokerFangsRenderer(this));
-      this.register(EntityType.EVOKER, new EvokerRenderer(this));
-      this.register(EntityType.EXPERIENCE_BOTTLE, new ThrownItemRenderer(this, var1));
-      this.register(EntityType.EXPERIENCE_ORB, new ExperienceOrbRenderer(this));
-      this.register(EntityType.EYE_OF_ENDER, new ThrownItemRenderer(this, var1, 1.0F, true));
-      this.register(EntityType.FALLING_BLOCK, new FallingBlockRenderer(this));
-      this.register(EntityType.FIREBALL, new ThrownItemRenderer(this, var1, 3.0F, true));
-      this.register(EntityType.FIREWORK_ROCKET, new FireworkEntityRenderer(this, var1));
-      this.register(EntityType.FISHING_BOBBER, new FishingHookRenderer(this));
-      this.register(EntityType.FOX, new FoxRenderer(this));
-      this.register(EntityType.FURNACE_MINECART, new MinecartRenderer(this));
-      this.register(EntityType.GHAST, new GhastRenderer(this));
-      this.register(EntityType.GIANT, new GiantMobRenderer(this, 6.0F));
-      this.register(EntityType.GUARDIAN, new GuardianRenderer(this));
-      this.register(EntityType.HOGLIN, new HoglinRenderer(this));
-      this.register(EntityType.HOPPER_MINECART, new MinecartRenderer(this));
-      this.register(EntityType.HORSE, new HorseRenderer(this));
-      this.register(EntityType.HUSK, new HuskRenderer(this));
-      this.register(EntityType.ILLUSIONER, new IllusionerRenderer(this));
-      this.register(EntityType.IRON_GOLEM, new IronGolemRenderer(this));
-      this.register(EntityType.ITEM, new ItemEntityRenderer(this, var1));
-      this.register(EntityType.ITEM_FRAME, new ItemFrameRenderer(this, var1));
-      this.register(EntityType.LEASH_KNOT, new LeashKnotRenderer(this));
-      this.register(EntityType.LIGHTNING_BOLT, new LightningBoltRenderer(this));
-      this.register(EntityType.LLAMA, new LlamaRenderer(this));
-      this.register(EntityType.LLAMA_SPIT, new LlamaSpitRenderer(this));
-      this.register(EntityType.MAGMA_CUBE, new MagmaCubeRenderer(this));
-      this.register(EntityType.MINECART, new MinecartRenderer(this));
-      this.register(EntityType.MOOSHROOM, new MushroomCowRenderer(this));
-      this.register(EntityType.MULE, new ChestedHorseRenderer(this, 0.92F));
-      this.register(EntityType.OCELOT, new OcelotRenderer(this));
-      this.register(EntityType.PAINTING, new PaintingRenderer(this));
-      this.register(EntityType.PANDA, new PandaRenderer(this));
-      this.register(EntityType.PARROT, new ParrotRenderer(this));
-      this.register(EntityType.PHANTOM, new PhantomRenderer(this));
-      this.register(EntityType.PIG, new PigRenderer(this));
-      this.register(EntityType.PIGLIN, new PiglinRenderer(this, false));
-      this.register(EntityType.PIGLIN_BRUTE, new PiglinRenderer(this, false));
-      this.register(EntityType.PILLAGER, new PillagerRenderer(this));
-      this.register(EntityType.POLAR_BEAR, new PolarBearRenderer(this));
-      this.register(EntityType.POTION, new ThrownItemRenderer(this, var1));
-      this.register(EntityType.PUFFERFISH, new PufferfishRenderer(this));
-      this.register(EntityType.RABBIT, new RabbitRenderer(this));
-      this.register(EntityType.RAVAGER, new RavagerRenderer(this));
-      this.register(EntityType.SALMON, new SalmonRenderer(this));
-      this.register(EntityType.SHEEP, new SheepRenderer(this));
-      this.register(EntityType.SHULKER_BULLET, new ShulkerBulletRenderer(this));
-      this.register(EntityType.SHULKER, new ShulkerRenderer(this));
-      this.register(EntityType.SILVERFISH, new SilverfishRenderer(this));
-      this.register(EntityType.SKELETON_HORSE, new UndeadHorseRenderer(this));
-      this.register(EntityType.SKELETON, new SkeletonRenderer(this));
-      this.register(EntityType.SLIME, new SlimeRenderer(this));
-      this.register(EntityType.SMALL_FIREBALL, new ThrownItemRenderer(this, var1, 0.75F, true));
-      this.register(EntityType.SNOWBALL, new ThrownItemRenderer(this, var1));
-      this.register(EntityType.SNOW_GOLEM, new SnowGolemRenderer(this));
-      this.register(EntityType.SPAWNER_MINECART, new MinecartRenderer(this));
-      this.register(EntityType.SPECTRAL_ARROW, new SpectralArrowRenderer(this));
-      this.register(EntityType.SPIDER, new SpiderRenderer(this));
-      this.register(EntityType.SQUID, new SquidRenderer(this));
-      this.register(EntityType.STRAY, new StrayRenderer(this));
-      this.register(EntityType.TNT_MINECART, new TntMinecartRenderer(this));
-      this.register(EntityType.TNT, new TntRenderer(this));
-      this.register(EntityType.TRADER_LLAMA, new LlamaRenderer(this));
-      this.register(EntityType.TRIDENT, new ThrownTridentRenderer(this));
-      this.register(EntityType.TROPICAL_FISH, new TropicalFishRenderer(this));
-      this.register(EntityType.TURTLE, new TurtleRenderer(this));
-      this.register(EntityType.VEX, new VexRenderer(this));
-      this.register(EntityType.VILLAGER, new VillagerRenderer(this, var2));
-      this.register(EntityType.VINDICATOR, new VindicatorRenderer(this));
-      this.register(EntityType.WANDERING_TRADER, new WanderingTraderRenderer(this));
-      this.register(EntityType.WITCH, new WitchRenderer(this));
-      this.register(EntityType.WITHER, new WitherBossRenderer(this));
-      this.register(EntityType.WITHER_SKELETON, new WitherSkeletonRenderer(this));
-      this.register(EntityType.WITHER_SKULL, new WitherSkullRenderer(this));
-      this.register(EntityType.WOLF, new WolfRenderer(this));
-      this.register(EntityType.ZOGLIN, new ZoglinRenderer(this));
-      this.register(EntityType.ZOMBIE_HORSE, new UndeadHorseRenderer(this));
-      this.register(EntityType.ZOMBIE, new ZombieRenderer(this));
-      this.register(EntityType.ZOMBIFIED_PIGLIN, new PiglinRenderer(this, true));
-      this.register(EntityType.ZOMBIE_VILLAGER, new ZombieVillagerRenderer(this, var2));
-      this.register(EntityType.STRIDER, new StriderRenderer(this));
-   }
-
-   public EntityRenderDispatcher(TextureManager var1, ItemRenderer var2, ReloadableResourceManager var3, Font var4, Options var5) {
+   public EntityRenderDispatcher(TextureManager var1, ItemRenderer var2, Font var3, Options var4, EntityModelSet var5) {
       this.textureManager = var1;
-      this.font = var4;
-      this.options = var5;
-      this.registerRenderers(var2, var3);
-      this.defaultPlayerRenderer = new PlayerRenderer(this);
-      this.playerRenderers.put("default", this.defaultPlayerRenderer);
-      this.playerRenderers.put("slim", new PlayerRenderer(this, true));
-      Iterator var6 = Registry.ENTITY_TYPE.iterator();
-
-      EntityType var7;
-      do {
-         if (!var6.hasNext()) {
-            return;
-         }
-
-         var7 = (EntityType)var6.next();
-      } while(var7 == EntityType.PLAYER || this.renderers.containsKey(var7));
-
-      throw new IllegalStateException("No renderer registered for " + Registry.ENTITY_TYPE.getKey(var7));
+      this.itemRenderer = var2;
+      this.font = var3;
+      this.options = var4;
+      this.entityModels = var5;
    }
 
    public <T extends Entity> EntityRenderer<? super T> getRenderer(T var1) {
       if (var1 instanceof AbstractClientPlayer) {
          String var2 = ((AbstractClientPlayer)var1).getModelName();
-         PlayerRenderer var3 = (PlayerRenderer)this.playerRenderers.get(var2);
-         return var3 != null ? var3 : this.defaultPlayerRenderer;
+         EntityRenderer var3 = (EntityRenderer)this.playerRenderers.get(var2);
+         return var3 != null ? var3 : (EntityRenderer)this.playerRenderers.get("default");
       } else {
          return (EntityRenderer)this.renderers.get(var1.getType());
       }
    }
 
@@ -272,11 +146,11 @@
          CrashReport var15 = CrashReport.forThrowable(var24, "Rendering entity in world");
          CrashReportCategory var16 = var15.addCategory("Entity being rendered");
          var1.fillCrashReportCategory(var16);
          CrashReportCategory var17 = var15.addCategory("Renderer details");
          var17.setDetail("Assigned renderer", (Object)var13);
-         var17.setDetail("Location", (Object)CrashReportCategory.formatLocation(var2, var4, var6));
+         var17.setDetail("Location", (Object)CrashReportCategory.formatLocation(this.level, var2, var4, var6));
          var17.setDetail("Rotation", (Object)var8);
          var17.setDetail("Delta", (Object)var9);
          throw new ReportedException(var15);
       }
    }
@@ -454,9 +328,11 @@
 
    public Quaternion cameraOrientation() {
       return this.cameraOrientation;
    }
 
-   public Font getFont() {
-      return this.font;
+   public void onResourceManagerReload(ResourceManager var1) {
+      EntityRendererProvider.Context var2 = new EntityRendererProvider.Context(this, this.itemRenderer, var1, this.entityModels, this.font);
+      this.renderers = EntityRenderers.createEntityRenderers(var2);
+      this.playerRenderers = EntityRenderers.createPlayerRenderers(var2);
    }
 }
