--- net/minecraft/client/renderer/ViewArea.java
+++ net/minecraft/client/renderer/ViewArea.java
@@ -27,11 +27,11 @@
 
       for(int var3 = 0; var3 < this.chunkGridSizeX; ++var3) {
          for(int var4 = 0; var4 < this.chunkGridSizeY; ++var4) {
             for(int var5 = 0; var5 < this.chunkGridSizeZ; ++var5) {
                int var6 = this.getChunkIndex(var3, var4, var5);
-               this.chunks[var6] = var1.new RenderChunk();
+               this.chunks[var6] = var1.new RenderChunk(var6);
                this.chunks[var6].setOrigin(var3 * 16, var4 * 16, var5 * 16);
             }
          }
       }
 
@@ -53,11 +53,11 @@
    }
 
    protected void setViewDistance(int var1) {
       int var2 = var1 * 2 + 1;
       this.chunkGridSizeX = var2;
-      this.chunkGridSizeY = 16;
+      this.chunkGridSizeY = this.level.getSectionsCount();
       this.chunkGridSizeZ = var2;
    }
 
    public void repositionCamera(double var1, double var3) {
       int var5 = Mth.floor(var1);
@@ -72,31 +72,31 @@
             int var12 = this.chunkGridSizeZ * 16;
             int var13 = var6 - 8 - var12 / 2;
             int var14 = var13 + Math.floorMod(var11 * 16 - var13, var12);
 
             for(int var15 = 0; var15 < this.chunkGridSizeY; ++var15) {
-               int var16 = var15 * 16;
+               int var16 = this.level.getMinBuildHeight() + var15 * 16;
                ChunkRenderDispatcher.RenderChunk var17 = this.chunks[this.getChunkIndex(var7, var15, var11)];
                var17.setOrigin(var10, var16, var14);
             }
          }
       }
 
    }
 
    public void setDirty(int var1, int var2, int var3, boolean var4) {
       int var5 = Math.floorMod(var1, this.chunkGridSizeX);
-      int var6 = Math.floorMod(var2, this.chunkGridSizeY);
+      int var6 = Math.floorMod(var2 - this.level.getMinSection(), this.chunkGridSizeY);
       int var7 = Math.floorMod(var3, this.chunkGridSizeZ);
       ChunkRenderDispatcher.RenderChunk var8 = this.chunks[this.getChunkIndex(var5, var6, var7)];
       var8.setDirty(var4);
    }
 
    @Nullable
    protected ChunkRenderDispatcher.RenderChunk getRenderChunkAt(BlockPos var1) {
       int var2 = Mth.intFloorDiv(var1.getX(), 16);
-      int var3 = Mth.intFloorDiv(var1.getY(), 16);
+      int var3 = Mth.intFloorDiv(var1.getY() - this.level.getMinBuildHeight(), 16);
       int var4 = Mth.intFloorDiv(var1.getZ(), 16);
       if (var3 >= 0 && var3 < this.chunkGridSizeY) {
          var2 = Mth.positiveModulo(var2, this.chunkGridSizeX);
          var4 = Mth.positiveModulo(var4, this.chunkGridSizeZ);
          return this.chunks[this.getChunkIndex(var2, var3, var4)];
