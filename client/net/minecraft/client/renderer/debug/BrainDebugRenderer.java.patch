--- net/minecraft/client/renderer/debug/BrainDebugRenderer.java
+++ net/minecraft/client/renderer/debug/BrainDebugRenderer.java
@@ -28,10 +28,42 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class BrainDebugRenderer implements DebugRenderer.SimpleDebugRenderer {
    private static final Logger LOGGER = LogManager.getLogger();
+   private static final boolean SHOW_NAME_FOR_ALL = true;
+   private static final boolean SHOW_PROFESSION_FOR_ALL = false;
+   private static final boolean SHOW_BEHAVIORS_FOR_ALL = false;
+   private static final boolean SHOW_ACTIVITIES_FOR_ALL = false;
+   private static final boolean SHOW_INVENTORY_FOR_ALL = false;
+   private static final boolean SHOW_GOSSIPS_FOR_ALL = false;
+   private static final boolean SHOW_PATH_FOR_ALL = false;
+   private static final boolean SHOW_HEALTH_FOR_ALL = false;
+   private static final boolean SHOW_WANTS_GOLEM_FOR_ALL = true;
+   private static final boolean SHOW_NAME_FOR_SELECTED = true;
+   private static final boolean SHOW_PROFESSION_FOR_SELECTED = true;
+   private static final boolean SHOW_BEHAVIORS_FOR_SELECTED = true;
+   private static final boolean SHOW_ACTIVITIES_FOR_SELECTED = true;
+   private static final boolean SHOW_MEMORIES_FOR_SELECTED = true;
+   private static final boolean SHOW_INVENTORY_FOR_SELECTED = true;
+   private static final boolean SHOW_GOSSIPS_FOR_SELECTED = true;
+   private static final boolean SHOW_PATH_FOR_SELECTED = true;
+   private static final boolean SHOW_HEALTH_FOR_SELECTED = true;
+   private static final boolean SHOW_WANTS_GOLEM_FOR_SELECTED = true;
+   private static final boolean SHOW_POI_INFO = true;
+   private static final int MAX_RENDER_DIST_FOR_BRAIN_INFO = 30;
+   private static final int MAX_RENDER_DIST_FOR_POI_INFO = 30;
+   private static final int MAX_TARGETING_DIST = 8;
+   private static final float TEXT_SCALE = 0.02F;
+   private static final int WHITE = -1;
+   private static final int YELLOW = -256;
+   private static final int CYAN = -16711681;
+   private static final int GREEN = -16711936;
+   private static final int GRAY = -3355444;
+   private static final int PINK = -98404;
+   private static final int RED = -65536;
+   private static final int ORANGE = -23296;
    private final Minecraft minecraft;
    private final Map<BlockPos, BrainDebugRenderer.PoiInfo> pois = Maps.newHashMap();
    private final Map<UUID, BrainDebugRenderer.BrainDump> brainDumpsPerEntity = Maps.newHashMap();
    @Nullable
    private UUID lastLookedAtUuid;
@@ -55,40 +87,44 @@
    }
 
    public void setFreeTicketCount(BlockPos var1, int var2) {
       BrainDebugRenderer.PoiInfo var3 = (BrainDebugRenderer.PoiInfo)this.pois.get(var1);
       if (var3 == null) {
-         LOGGER.warn("Strange, setFreeTicketCount was called for an unknown POI: " + var1);
+         LOGGER.warn("Strange, setFreeTicketCount was called for an unknown POI: {}", var1);
       } else {
          var3.freeTicketCount = var2;
       }
    }
 
    public void addOrUpdateBrainDump(BrainDebugRenderer.BrainDump var1) {
       this.brainDumpsPerEntity.put(var1.uuid, var1);
    }
 
+   public void removeBrainDump(int var1) {
+      this.brainDumpsPerEntity.values().removeIf((var1x) -> {
+         return var1x.id == var1;
+      });
+   }
+
    public void render(PoseStack var1, MultiBufferSource var2, double var3, double var5, double var7) {
-      RenderSystem.pushMatrix();
       RenderSystem.enableBlend();
       RenderSystem.defaultBlendFunc();
       RenderSystem.disableTexture();
       this.clearRemovedEntities();
       this.doRender(var3, var5, var7);
       RenderSystem.enableTexture();
       RenderSystem.disableBlend();
-      RenderSystem.popMatrix();
       if (!this.minecraft.player.isSpectator()) {
          this.updateLastLookedAtUuid();
       }
 
    }
 
    private void clearRemovedEntities() {
       this.brainDumpsPerEntity.entrySet().removeIf((var1) -> {
          Entity var2 = this.minecraft.level.getEntity(((BrainDebugRenderer.BrainDump)var1.getValue()).id);
-         return var2 == null || var2.removed;
+         return var2 == null || var2.isRemoved();
       });
    }
 
    private void doRender(double var1, double var3, double var5) {
       BlockPos var7 = new BlockPos(var1, var3, var5);
