--- net/minecraft/client/renderer/debug/DebugRenderer.java
+++ net/minecraft/client/renderer/debug/DebugRenderer.java
@@ -3,10 +3,11 @@
 import com.mojang.blaze3d.systems.RenderSystem;
 import com.mojang.blaze3d.vertex.BufferBuilder;
 import com.mojang.blaze3d.vertex.DefaultVertexFormat;
 import com.mojang.blaze3d.vertex.PoseStack;
 import com.mojang.blaze3d.vertex.Tesselator;
+import com.mojang.blaze3d.vertex.VertexFormat;
 import com.mojang.math.Matrix4f;
 import com.mojang.math.Transformation;
 import java.util.Optional;
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
@@ -27,11 +28,10 @@
    public final DebugRenderer.SimpleDebugRenderer waterDebugRenderer;
    public final DebugRenderer.SimpleDebugRenderer chunkBorderRenderer;
    public final DebugRenderer.SimpleDebugRenderer heightMapRenderer;
    public final DebugRenderer.SimpleDebugRenderer collisionBoxRenderer;
    public final DebugRenderer.SimpleDebugRenderer neighborsUpdateRenderer;
-   public final CaveDebugRenderer caveRenderer;
    public final StructureRenderer structureRenderer;
    public final DebugRenderer.SimpleDebugRenderer lightDebugRenderer;
    public final DebugRenderer.SimpleDebugRenderer worldGenAttemptRenderer;
    public final DebugRenderer.SimpleDebugRenderer solidFaceRenderer;
    public final DebugRenderer.SimpleDebugRenderer chunkRenderer;
@@ -39,19 +39,19 @@
    public final VillageSectionsDebugRenderer villageSectionsDebugRenderer;
    public final BeeDebugRenderer beeDebugRenderer;
    public final RaidDebugRenderer raidDebugRenderer;
    public final GoalSelectorDebugRenderer goalSelectorRenderer;
    public final GameTestDebugRenderer gameTestDebugRenderer;
+   public final GameEventListenerRenderer gameEventListenerRenderer;
    private boolean renderChunkborder;
 
    public DebugRenderer(Minecraft var1) {
       this.waterDebugRenderer = new WaterDebugRenderer(var1);
       this.chunkBorderRenderer = new ChunkBorderRenderer(var1);
       this.heightMapRenderer = new HeightMapRenderer(var1);
       this.collisionBoxRenderer = new CollisionBoxRenderer(var1);
       this.neighborsUpdateRenderer = new NeighborsUpdateRenderer(var1);
-      this.caveRenderer = new CaveDebugRenderer();
       this.structureRenderer = new StructureRenderer(var1);
       this.lightDebugRenderer = new LightDebugRenderer(var1);
       this.worldGenAttemptRenderer = new WorldGenAttemptRenderer();
       this.solidFaceRenderer = new SolidFaceRenderer(var1);
       this.chunkRenderer = new ChunkDebugRenderer(var1);
@@ -59,20 +59,20 @@
       this.villageSectionsDebugRenderer = new VillageSectionsDebugRenderer();
       this.beeDebugRenderer = new BeeDebugRenderer(var1);
       this.raidDebugRenderer = new RaidDebugRenderer(var1);
       this.goalSelectorRenderer = new GoalSelectorDebugRenderer(var1);
       this.gameTestDebugRenderer = new GameTestDebugRenderer();
+      this.gameEventListenerRenderer = new GameEventListenerRenderer(var1);
    }
 
    public void clear() {
       this.pathfindingRenderer.clear();
       this.waterDebugRenderer.clear();
       this.chunkBorderRenderer.clear();
       this.heightMapRenderer.clear();
       this.collisionBoxRenderer.clear();
       this.neighborsUpdateRenderer.clear();
-      this.caveRenderer.clear();
       this.structureRenderer.clear();
       this.lightDebugRenderer.clear();
       this.worldGenAttemptRenderer.clear();
       this.solidFaceRenderer.clear();
       this.chunkRenderer.clear();
@@ -80,10 +80,11 @@
       this.villageSectionsDebugRenderer.clear();
       this.beeDebugRenderer.clear();
       this.raidDebugRenderer.clear();
       this.goalSelectorRenderer.clear();
       this.gameTestDebugRenderer.clear();
+      this.gameEventListenerRenderer.clear();
    }
 
    public boolean switchRenderChunkborder() {
       this.renderChunkborder = !this.renderChunkborder;
       return this.renderChunkborder;
@@ -99,11 +100,11 @@
 
    public static Optional<Entity> getTargetedEntity(@Nullable Entity var0, int var1) {
       if (var0 == null) {
          return Optional.empty();
       } else {
-         Vec3 var2 = var0.getEyePosition(1.0F);
+         Vec3 var2 = var0.getEyePosition();
          Vec3 var3 = var0.getViewVector(1.0F).scale((double)var1);
          Vec3 var4 = var2.add(var3);
          AABB var5 = var0.getBoundingBox().expandTowards(var3).inflate(1.0D);
          int var6 = var1 * var1;
          Predicate var7 = (var0x) -> {
@@ -141,11 +142,11 @@
    }
 
    public static void renderFilledBox(double var0, double var2, double var4, double var6, double var8, double var10, float var12, float var13, float var14, float var15) {
       Tesselator var16 = Tesselator.getInstance();
       BufferBuilder var17 = var16.getBuilder();
-      var17.begin(5, DefaultVertexFormat.POSITION_COLOR);
+      var17.begin(VertexFormat.Mode.TRIANGLE_STRIP, DefaultVertexFormat.POSITION_COLOR);
       LevelRenderer.addChainedFilledBoxVertices(var17, var0, var2, var4, var6, var8, var10, var12, var13, var14, var15);
       var16.end();
    }
 
    public static void renderFloatingText(String var0, int var1, int var2, int var3, int var4) {
@@ -166,33 +167,34 @@
       if (var13.isInitialized() && var12.getEntityRenderDispatcher().options != null) {
          Font var14 = var12.font;
          double var15 = var13.getPosition().x;
          double var17 = var13.getPosition().y;
          double var19 = var13.getPosition().z;
-         RenderSystem.pushMatrix();
-         RenderSystem.translatef((float)(var1 - var15), (float)(var3 - var17) + 0.07F, (float)(var5 - var19));
-         RenderSystem.normal3f(0.0F, 1.0F, 0.0F);
-         RenderSystem.multMatrix(new Matrix4f(var13.rotation()));
-         RenderSystem.scalef(var8, -var8, var8);
+         PoseStack var21 = RenderSystem.getModelViewStack();
+         var21.pushPose();
+         var21.translate((double)((float)(var1 - var15)), (double)((float)(var3 - var17) + 0.07F), (double)((float)(var5 - var19)));
+         var21.mulPoseMatrix(new Matrix4f(var13.rotation()));
+         var21.scale(var8, -var8, var8);
          RenderSystem.enableTexture();
          if (var11) {
             RenderSystem.disableDepthTest();
          } else {
             RenderSystem.enableDepthTest();
          }
 
          RenderSystem.depthMask(true);
-         RenderSystem.scalef(-1.0F, 1.0F, 1.0F);
-         float var21 = var9 ? (float)(-var14.width(var0)) / 2.0F : 0.0F;
-         var21 -= var10 / var8;
-         RenderSystem.enableAlphaTest();
-         MultiBufferSource.BufferSource var22 = MultiBufferSource.immediate(Tesselator.getInstance().getBuilder());
-         var14.drawInBatch((String)var0, var21, 0.0F, var7, false, Transformation.identity().getMatrix(), var22, var11, 0, 15728880);
-         var22.endBatch();
-         RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
+         var21.scale(-1.0F, 1.0F, 1.0F);
+         RenderSystem.applyModelViewMatrix();
+         float var22 = var9 ? (float)(-var14.width(var0)) / 2.0F : 0.0F;
+         var22 -= var10 / var8;
+         MultiBufferSource.BufferSource var23 = MultiBufferSource.immediate(Tesselator.getInstance().getBuilder());
+         var14.drawInBatch((String)var0, var22, 0.0F, var7, false, Transformation.identity().getMatrix(), var23, var11, 0, 15728880);
+         var23.endBatch();
+         RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
          RenderSystem.enableDepthTest();
-         RenderSystem.popMatrix();
+         var21.popPose();
+         RenderSystem.applyModelViewMatrix();
       }
    }
 
    public interface SimpleDebugRenderer {
       void render(PoseStack var1, MultiBufferSource var2, double var3, double var5, double var7);
