--- net/minecraft/client/renderer/debug/PathfindingRenderer.java
+++ net/minecraft/client/renderer/debug/PathfindingRenderer.java
@@ -4,14 +4,16 @@
 import com.mojang.blaze3d.systems.RenderSystem;
 import com.mojang.blaze3d.vertex.BufferBuilder;
 import com.mojang.blaze3d.vertex.DefaultVertexFormat;
 import com.mojang.blaze3d.vertex.PoseStack;
 import com.mojang.blaze3d.vertex.Tesselator;
+import com.mojang.blaze3d.vertex.VertexFormat;
 import java.util.Iterator;
 import java.util.Locale;
 import java.util.Map;
 import net.minecraft.Util;
+import net.minecraft.client.renderer.GameRenderer;
 import net.minecraft.client.renderer.MultiBufferSource;
 import net.minecraft.core.BlockPos;
 import net.minecraft.util.Mth;
 import net.minecraft.world.level.pathfinder.Node;
 import net.minecraft.world.level.pathfinder.Path;
@@ -19,10 +21,18 @@
 
 public class PathfindingRenderer implements DebugRenderer.SimpleDebugRenderer {
    private final Map<Integer, Path> pathMap = Maps.newHashMap();
    private final Map<Integer, Float> pathMaxDist = Maps.newHashMap();
    private final Map<Integer, Long> creationMap = Maps.newHashMap();
+   private static final long TIMEOUT = 5000L;
+   private static final float MAX_RENDER_DIST = 80.0F;
+   private static final boolean SHOW_OPEN_CLOSED = true;
+   private static final boolean SHOW_OPEN_CLOSED_COST_MALUS = false;
+   private static final boolean SHOW_OPEN_CLOSED_NODE_TYPE_WITH_TEXT = false;
+   private static final boolean SHOW_OPEN_CLOSED_NODE_TYPE_WITH_BOX = true;
+   private static final boolean SHOW_GROUND_LABELS = true;
+   private static final float TEXT_SCALE = 0.02F;
 
    public PathfindingRenderer() {
    }
 
    public void addPath(int var1, Path var2, float var3) {
@@ -56,20 +66,18 @@
 
       }
    }
 
    public static void renderPath(Path var0, float var1, boolean var2, boolean var3, double var4, double var6, double var8) {
-      RenderSystem.pushMatrix();
       RenderSystem.enableBlend();
       RenderSystem.defaultBlendFunc();
-      RenderSystem.color4f(0.0F, 1.0F, 0.0F, 0.75F);
+      RenderSystem.setShaderColor(0.0F, 1.0F, 0.0F, 0.75F);
       RenderSystem.disableTexture();
       RenderSystem.lineWidth(6.0F);
       doRenderPath(var0, var1, var2, var3, var4, var6, var8);
       RenderSystem.enableTexture();
       RenderSystem.disableBlend();
-      RenderSystem.popMatrix();
    }
 
    private static void doRenderPath(Path var0, float var1, boolean var2, boolean var3, double var4, double var6, double var8) {
       renderPathLine(var0, var4, var6, var8);
       BlockPos var10 = var0.getTarget();
@@ -125,11 +133,12 @@
    }
 
    public static void renderPathLine(Path var0, double var1, double var3, double var5) {
       Tesselator var7 = Tesselator.getInstance();
       BufferBuilder var8 = var7.getBuilder();
-      var8.begin(3, DefaultVertexFormat.POSITION_COLOR);
+      RenderSystem.setShader(GameRenderer::getPositionColorShader);
+      var8.begin(VertexFormat.Mode.LINE_STRIP, DefaultVertexFormat.POSITION_COLOR);
 
       for(int var9 = 0; var9 < var0.getNodeCount(); ++var9) {
          Node var10 = var0.getNode(var9);
          if (distanceToCamera(var10.asBlockPos(), var1, var3, var5) <= 80.0F) {
             float var11 = (float)var9 / (float)var0.getNodeCount() * 0.33F;
