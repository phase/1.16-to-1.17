--- net/minecraft/client/renderer/chunk/ChunkRenderDispatcher.java
+++ net/minecraft/client/renderer/chunk/ChunkRenderDispatcher.java
@@ -6,16 +6,18 @@
 import com.google.common.primitives.Doubles;
 import com.mojang.blaze3d.vertex.BufferBuilder;
 import com.mojang.blaze3d.vertex.DefaultVertexFormat;
 import com.mojang.blaze3d.vertex.PoseStack;
 import com.mojang.blaze3d.vertex.VertexBuffer;
+import com.mojang.blaze3d.vertex.VertexFormat;
 import it.unimi.dsi.fastutil.objects.ObjectArraySet;
 import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 import java.util.PriorityQueue;
 import java.util.Queue;
 import java.util.Random;
 import java.util.Set;
 import java.util.concurrent.CancellationException;
@@ -34,17 +36,16 @@
 import net.minecraft.client.renderer.ItemBlockRenderTypes;
 import net.minecraft.client.renderer.LevelRenderer;
 import net.minecraft.client.renderer.RenderType;
 import net.minecraft.client.renderer.block.BlockRenderDispatcher;
 import net.minecraft.client.renderer.block.ModelBlockRenderer;
-import net.minecraft.client.renderer.blockentity.BlockEntityRenderDispatcher;
 import net.minecraft.client.renderer.blockentity.BlockEntityRenderer;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
+import net.minecraft.core.SectionPos;
 import net.minecraft.util.thread.ProcessorMailbox;
 import net.minecraft.world.level.Level;
-import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.RenderShape;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.chunk.ChunkStatus;
 import net.minecraft.world.level.chunk.LevelChunk;
@@ -54,20 +55,22 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class ChunkRenderDispatcher {
    private static final Logger LOGGER = LogManager.getLogger();
+   private static final int MAX_WORKERS_32_BIT = 4;
+   private static final VertexFormat VERTEX_FORMAT;
    private final PriorityQueue<ChunkRenderDispatcher.RenderChunk.ChunkCompileTask> toBatch = Queues.newPriorityQueue();
    private final Queue<ChunkBufferBuilderPack> freeBuffers;
    private final Queue<Runnable> toUpload = Queues.newConcurrentLinkedQueue();
    private volatile int toBatchCount;
    private volatile int freeBufferCount;
-   private final ChunkBufferBuilderPack fixedBuffers;
+   final ChunkBufferBuilderPack fixedBuffers;
    private final ProcessorMailbox<Runnable> mailbox;
    private final Executor executor;
-   private Level level;
-   private final LevelRenderer renderer;
+   Level level;
+   final LevelRenderer renderer;
    private Vec3 camera;
 
    public ChunkRenderDispatcher(Level var1, LevelRenderer var2, Executor var3, boolean var4, ChunkBufferBuilderPack var5) {
       this.camera = Vec3.ZERO;
       this.level = var1;
@@ -139,10 +142,22 @@
 
    public String getStats() {
       return String.format("pC: %03d, pU: %02d, aB: %02d", this.toBatchCount, this.toUpload.size(), this.freeBufferCount);
    }
 
+   public int getToBatchCount() {
+      return this.toBatchCount;
+   }
+
+   public int getToUpload() {
+      return this.toUpload.size();
+   }
+
+   public int getFreeBufferCount() {
+      return this.freeBufferCount;
+   }
+
    public void setCamera(Vec3 var1) {
       this.camera = var1;
    }
 
    public Vec3 getCameraPosition() {
@@ -177,11 +192,11 @@
 
    public CompletableFuture<Void> uploadChunkLayer(BufferBuilder var1, VertexBuffer var2) {
       Runnable var10000 = () -> {
       };
       Queue var10001 = this.toUpload;
-      var10001.getClass();
+      Objects.requireNonNull(var10001);
       return CompletableFuture.runAsync(var10000, var10001::add).thenCompose((var3) -> {
          return this.doUploadChunkLayer(var1, var2);
       });
    }
 
@@ -208,88 +223,53 @@
       this.clearBatchQueue();
       this.mailbox.close();
       this.freeBuffers.clear();
    }
 
-   public static class CompiledChunk {
-      public static final ChunkRenderDispatcher.CompiledChunk UNCOMPILED = new ChunkRenderDispatcher.CompiledChunk() {
-         public boolean facesCanSeeEachother(Direction var1, Direction var2) {
-            return false;
-         }
-      };
-      private final Set<RenderType> hasBlocks = new ObjectArraySet();
-      private final Set<RenderType> hasLayer = new ObjectArraySet();
-      private boolean isCompletelyEmpty = true;
-      private final List<BlockEntity> renderableBlockEntities = Lists.newArrayList();
-      private VisibilitySet visibilitySet = new VisibilitySet();
-      @Nullable
-      private BufferBuilder.State transparencyState;
-
-      public CompiledChunk() {
-      }
-
-      public boolean hasNoRenderableLayers() {
-         return this.isCompletelyEmpty;
-      }
-
-      public boolean isEmpty(RenderType var1) {
-         return !this.hasBlocks.contains(var1);
-      }
-
-      public List<BlockEntity> getRenderableBlockEntities() {
-         return this.renderableBlockEntities;
-      }
-
-      public boolean facesCanSeeEachother(Direction var1, Direction var2) {
-         return this.visibilitySet.visibilityBetween(var1, var2);
-      }
+   static {
+      VERTEX_FORMAT = DefaultVertexFormat.BLOCK;
    }
 
-   static enum ChunkTaskResult {
-      SUCCESSFUL,
-      CANCELLED;
-
-      private ChunkTaskResult() {
-      }
-   }
-
    public class RenderChunk {
+      public static final int SIZE = 16;
+      public final int index;
       public final AtomicReference<ChunkRenderDispatcher.CompiledChunk> compiled;
       @Nullable
       private ChunkRenderDispatcher.RenderChunk.RebuildTask lastRebuildTask;
       @Nullable
       private ChunkRenderDispatcher.RenderChunk.ResortTransparencyTask lastResortTransparencyTask;
       private final Set<BlockEntity> globalBlockEntities;
       private final Map<RenderType, VertexBuffer> buffers;
       public AABB bb;
       private int lastFrame;
       private boolean dirty;
-      private final BlockPos.MutableBlockPos origin;
+      final BlockPos.MutableBlockPos origin;
       private final BlockPos.MutableBlockPos[] relativeOrigins;
       private boolean playerChanged;
 
-      public RenderChunk() {
+      public RenderChunk(int var2) {
          this.compiled = new AtomicReference(ChunkRenderDispatcher.CompiledChunk.UNCOMPILED);
          this.globalBlockEntities = Sets.newHashSet();
          this.buffers = (Map)RenderType.chunkBufferLayers().stream().collect(Collectors.toMap((var0) -> {
             return var0;
          }, (var0) -> {
-            return new VertexBuffer(DefaultVertexFormat.BLOCK);
+            return new VertexBuffer();
          }));
          this.lastFrame = -1;
          this.dirty = true;
          this.origin = new BlockPos.MutableBlockPos(-1, -1, -1);
          this.relativeOrigins = (BlockPos.MutableBlockPos[])Util.make(new BlockPos.MutableBlockPos[6], (var0) -> {
             for(int var1 = 0; var1 < var0.length; ++var1) {
                var0[var1] = new BlockPos.MutableBlockPos();
             }
 
          });
+         this.index = var2;
       }
 
       private boolean doesChunkExistAt(BlockPos var1) {
-         return ChunkRenderDispatcher.this.level.getChunk(var1.getX() >> 4, var1.getZ() >> 4, ChunkStatus.FULL, false) != null;
+         return ChunkRenderDispatcher.this.level.getChunk(SectionPos.blockToSectionCoord(var1.getX()), SectionPos.blockToSectionCoord(var1.getZ()), ChunkStatus.FULL, false) != null;
       }
 
       public boolean hasAllNeighbors() {
          boolean var1 = true;
          if (this.getDistToPlayerSqr() <= 576.0D) {
@@ -334,12 +314,12 @@
          double var4 = this.bb.minY + 8.0D - var1.getPosition().y;
          double var6 = this.bb.minZ + 8.0D - var1.getPosition().z;
          return var2 * var2 + var4 * var4 + var6 * var6;
       }
 
-      private void beginLayer(BufferBuilder var1) {
-         var1.begin(7, DefaultVertexFormat.BLOCK);
+      void beginLayer(BufferBuilder var1) {
+         var1.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.BLOCK);
       }
 
       public ChunkRenderDispatcher.CompiledChunk getCompiledChunk() {
          return (ChunkRenderDispatcher.CompiledChunk)this.compiled.get();
       }
@@ -422,11 +402,11 @@
       public void rebuildChunkAsync(ChunkRenderDispatcher var1) {
          ChunkRenderDispatcher.RenderChunk.ChunkCompileTask var2 = this.createCompileTask();
          var1.schedule(var2);
       }
 
-      private void updateGlobalBlockEntities(Set<BlockEntity> var1) {
+      void updateGlobalBlockEntities(Set<BlockEntity> var1) {
          HashSet var2 = Sets.newHashSet(var1);
          HashSet var3 = Sets.newHashSet(this.globalBlockEntities);
          var2.removeAll(this.globalBlockEntities);
          var3.removeAll(var1);
          this.globalBlockEntities.clear();
@@ -437,28 +417,11 @@
       public void compileSync() {
          ChunkRenderDispatcher.RenderChunk.ChunkCompileTask var1 = this.createCompileTask();
          var1.doTask(ChunkRenderDispatcher.this.fixedBuffers);
       }
 
-      abstract class ChunkCompileTask implements Comparable<ChunkRenderDispatcher.RenderChunk.ChunkCompileTask> {
-         protected final double distAtCreation;
-         protected final AtomicBoolean isCancelled = new AtomicBoolean(false);
-
-         public ChunkCompileTask(double var2) {
-            this.distAtCreation = var2;
-         }
-
-         public abstract CompletableFuture<ChunkRenderDispatcher.ChunkTaskResult> doTask(ChunkBufferBuilderPack var1);
-
-         public abstract void cancel();
-
-         public int compareTo(ChunkRenderDispatcher.RenderChunk.ChunkCompileTask var1) {
-            return Doubles.compare(this.distAtCreation, var1.distAtCreation);
-         }
-      }
-
-      class ResortTransparencyTask extends ChunkRenderDispatcher.RenderChunk.ChunkCompileTask {
+      private class ResortTransparencyTask extends ChunkRenderDispatcher.RenderChunk.ChunkCompileTask {
          private final ChunkRenderDispatcher.CompiledChunk compiledChunk;
 
          public ResortTransparencyTask(double var2, ChunkRenderDispatcher.CompiledChunk var4) {
             super(var2);
             this.compiledChunk = var4;
@@ -475,17 +438,17 @@
             } else {
                Vec3 var2 = ChunkRenderDispatcher.this.getCameraPosition();
                float var3 = (float)var2.x;
                float var4 = (float)var2.y;
                float var5 = (float)var2.z;
-               BufferBuilder.State var6 = this.compiledChunk.transparencyState;
+               BufferBuilder.SortState var6 = this.compiledChunk.transparencyState;
                if (var6 != null && this.compiledChunk.hasBlocks.contains(RenderType.translucent())) {
                   BufferBuilder var7 = var1.builder(RenderType.translucent());
                   RenderChunk.this.beginLayer(var7);
-                  var7.restoreState(var6);
-                  var7.sortQuads(var3 - (float)RenderChunk.this.origin.getX(), var4 - (float)RenderChunk.this.origin.getY(), var5 - (float)RenderChunk.this.origin.getZ());
-                  this.compiledChunk.transparencyState = var7.getState();
+                  var7.restoreSortState(var6);
+                  var7.setQuadSortOrigin(var3 - (float)RenderChunk.this.origin.getX(), var4 - (float)RenderChunk.this.origin.getY(), var5 - (float)RenderChunk.this.origin.getZ());
+                  this.compiledChunk.transparencyState = var7.getSortState();
                   var7.end();
                   if (this.isCancelled.get()) {
                      return CompletableFuture.completedFuture(ChunkRenderDispatcher.ChunkTaskResult.CANCELLED);
                   } else {
                      CompletableFuture var8 = ChunkRenderDispatcher.this.uploadChunkLayer(var1.builder(RenderType.translucent()), RenderChunk.this.getBuffer(RenderType.translucent())).thenApply((var0) -> {
@@ -508,15 +471,32 @@
          public void cancel() {
             this.isCancelled.set(true);
          }
       }
 
+      private abstract class ChunkCompileTask implements Comparable<ChunkRenderDispatcher.RenderChunk.ChunkCompileTask> {
+         protected final double distAtCreation;
+         protected final AtomicBoolean isCancelled = new AtomicBoolean(false);
+
+         public ChunkCompileTask(double var2) {
+            this.distAtCreation = var2;
+         }
+
+         public abstract CompletableFuture<ChunkRenderDispatcher.ChunkTaskResult> doTask(ChunkBufferBuilderPack var1);
+
+         public abstract void cancel();
+
+         public int compareTo(ChunkRenderDispatcher.RenderChunk.ChunkCompileTask var1) {
+            return Doubles.compare(this.distAtCreation, var1.distAtCreation);
+         }
+      }
+
       class RebuildTask extends ChunkRenderDispatcher.RenderChunk.ChunkCompileTask {
          @Nullable
          protected RenderChunkRegion region;
 
-         public RebuildTask(double var2, RenderChunkRegion var4) {
+         public RebuildTask(double var2, @Nullable RenderChunkRegion var4) {
             super(var2);
             this.region = var4;
          }
 
          public CompletableFuture<ChunkRenderDispatcher.ChunkTaskResult> doTask(ChunkBufferBuilderPack var1) {
@@ -542,11 +522,11 @@
                } else {
                   ArrayList var8 = Lists.newArrayList();
                   var6.hasLayer.forEach((var3x) -> {
                      var8.add(ChunkRenderDispatcher.this.uploadChunkLayer(var1.builder(var3x), RenderChunk.this.getBuffer(var3x)));
                   });
-                  return Util.sequence(var8).handle((var2x, var3x) -> {
+                  return Util.sequenceFailFast(var8).handle((var2x, var3x) -> {
                      if (var3x != null && !(var3x instanceof CancellationException) && !(var3x instanceof InterruptedException)) {
                         Minecraft.getInstance().delayCrash(CrashReport.forThrowable(var3x, "Rendering chunk"));
                      }
 
                      if (this.isCancelled.get()) {
@@ -576,74 +556,73 @@
                Iterator var15 = BlockPos.betweenClosed(var7, var8).iterator();
 
                while(var15.hasNext()) {
                   BlockPos var16 = (BlockPos)var15.next();
                   BlockState var17 = var11.getBlockState(var16);
-                  Block var18 = var17.getBlock();
                   if (var17.isSolidRender(var11, var16)) {
                      var9.setOpaque(var16);
                   }
 
-                  if (var18.isEntityBlock()) {
-                     BlockEntity var19 = var11.getBlockEntity(var16, LevelChunk.EntityCreationType.CHECK);
-                     if (var19 != null) {
-                        this.handleBlockEntity(var4, var10, var19);
+                  if (var17.hasBlockEntity()) {
+                     BlockEntity var18 = var11.getBlockEntity(var16, LevelChunk.EntityCreationType.CHECK);
+                     if (var18 != null) {
+                        this.handleBlockEntity(var4, var10, var18);
                      }
                   }
 
-                  FluidState var23 = var11.getFluidState(var16);
-                  RenderType var20;
-                  BufferBuilder var21;
-                  if (!var23.isEmpty()) {
-                     var20 = ItemBlockRenderTypes.getRenderLayer(var23);
-                     var21 = var5.builder(var20);
-                     if (var4.hasLayer.add(var20)) {
-                        RenderChunk.this.beginLayer(var21);
+                  FluidState var22 = var11.getFluidState(var16);
+                  RenderType var19;
+                  BufferBuilder var20;
+                  if (!var22.isEmpty()) {
+                     var19 = ItemBlockRenderTypes.getRenderLayer(var22);
+                     var20 = var5.builder(var19);
+                     if (var4.hasLayer.add(var19)) {
+                        RenderChunk.this.beginLayer(var20);
                      }
 
-                     if (var14.renderLiquid(var16, var11, var21, var23)) {
+                     if (var14.renderLiquid(var16, var11, var20, var22)) {
                         var4.isCompletelyEmpty = false;
-                        var4.hasBlocks.add(var20);
+                        var4.hasBlocks.add(var19);
                      }
                   }
 
                   if (var17.getRenderShape() != RenderShape.INVISIBLE) {
-                     var20 = ItemBlockRenderTypes.getChunkRenderType(var17);
-                     var21 = var5.builder(var20);
-                     if (var4.hasLayer.add(var20)) {
-                        RenderChunk.this.beginLayer(var21);
+                     var19 = ItemBlockRenderTypes.getChunkRenderType(var17);
+                     var20 = var5.builder(var19);
+                     if (var4.hasLayer.add(var19)) {
+                        RenderChunk.this.beginLayer(var20);
                      }
 
                      var12.pushPose();
                      var12.translate((double)(var16.getX() & 15), (double)(var16.getY() & 15), (double)(var16.getZ() & 15));
-                     if (var14.renderBatched(var17, var16, var11, var12, var21, true, var13)) {
+                     if (var14.renderBatched(var17, var16, var11, var12, var20, true, var13)) {
                         var4.isCompletelyEmpty = false;
-                        var4.hasBlocks.add(var20);
+                        var4.hasBlocks.add(var19);
                      }
 
                      var12.popPose();
                   }
                }
 
                if (var4.hasBlocks.contains(RenderType.translucent())) {
-                  BufferBuilder var22 = var5.builder(RenderType.translucent());
-                  var22.sortQuads(var1 - (float)var7.getX(), var2 - (float)var7.getY(), var3 - (float)var7.getZ());
-                  var4.transparencyState = var22.getState();
+                  BufferBuilder var21 = var5.builder(RenderType.translucent());
+                  var21.setQuadSortOrigin(var1 - (float)var7.getX(), var2 - (float)var7.getY(), var3 - (float)var7.getZ());
+                  var4.transparencyState = var21.getSortState();
                }
 
                Stream var10000 = var4.hasLayer.stream();
-               var5.getClass();
+               Objects.requireNonNull(var5);
                var10000.map(var5::builder).forEach(BufferBuilder::end);
                ModelBlockRenderer.clearCache();
             }
 
             var4.visibilitySet = var9.resolve();
             return var10;
          }
 
          private <E extends BlockEntity> void handleBlockEntity(ChunkRenderDispatcher.CompiledChunk var1, Set<BlockEntity> var2, E var3) {
-            BlockEntityRenderer var4 = BlockEntityRenderDispatcher.instance.getRenderer(var3);
+            BlockEntityRenderer var4 = Minecraft.getInstance().getBlockEntityRenderDispatcher().getRenderer(var3);
             if (var4 != null) {
                var1.renderableBlockEntities.add(var3);
                if (var4.shouldRenderOffScreen(var3)) {
                   var2.add(var3);
                }
@@ -658,6 +637,48 @@
             }
 
          }
       }
    }
+
+   static enum ChunkTaskResult {
+      SUCCESSFUL,
+      CANCELLED;
+
+      private ChunkTaskResult() {
+      }
+   }
+
+   public static class CompiledChunk {
+      public static final ChunkRenderDispatcher.CompiledChunk UNCOMPILED = new ChunkRenderDispatcher.CompiledChunk() {
+         public boolean facesCanSeeEachother(Direction var1, Direction var2) {
+            return false;
+         }
+      };
+      final Set<RenderType> hasBlocks = new ObjectArraySet();
+      final Set<RenderType> hasLayer = new ObjectArraySet();
+      boolean isCompletelyEmpty = true;
+      final List<BlockEntity> renderableBlockEntities = Lists.newArrayList();
+      VisibilitySet visibilitySet = new VisibilitySet();
+      @Nullable
+      BufferBuilder.SortState transparencyState;
+
+      public CompiledChunk() {
+      }
+
+      public boolean hasNoRenderableLayers() {
+         return this.isCompletelyEmpty;
+      }
+
+      public boolean isEmpty(RenderType var1) {
+         return !this.hasBlocks.contains(var1);
+      }
+
+      public List<BlockEntity> getRenderableBlockEntities() {
+         return this.renderableBlockEntities;
+      }
+
+      public boolean facesCanSeeEachother(Direction var1, Direction var2) {
+         return this.visibilitySet.visibilityBetween(var1, var2);
+      }
+   }
 }
