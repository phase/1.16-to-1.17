--- net/minecraft/client/renderer/LevelRenderer.java
+++ net/minecraft/client/renderer/LevelRenderer.java
@@ -28,11 +28,10 @@
 import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
 import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.longs.Long2ObjectMap.Entry;
 import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 import it.unimi.dsi.fastutil.objects.ObjectIterator;
-import it.unimi.dsi.fastutil.objects.ObjectList;
 import it.unimi.dsi.fastutil.objects.ObjectListIterator;
 import java.io.IOException;
 import java.util.ArrayDeque;
 import java.util.ArrayList;
 import java.util.Collection;
@@ -67,10 +66,11 @@
 import net.minecraft.client.resources.sounds.SimpleSoundInstance;
 import net.minecraft.client.resources.sounds.SoundInstance;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.Registry;
+import net.minecraft.core.SectionPos;
 import net.minecraft.core.particles.ItemParticleOption;
 import net.minecraft.core.particles.ParticleOptions;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.core.particles.SimpleParticleType;
 import net.minecraft.network.chat.TextComponent;
@@ -99,10 +99,11 @@
 import net.minecraft.world.level.biome.Biome;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.CampfireBlock;
 import net.minecraft.world.level.block.ComposterBlock;
+import net.minecraft.world.level.block.PointedDripstoneBlock;
 import net.minecraft.world.level.block.SoundType;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.border.WorldBorder;
 import net.minecraft.world.level.levelgen.Heightmap;
@@ -128,14 +129,15 @@
    private static final ResourceLocation SNOW_LOCATION = new ResourceLocation("textures/environment/snow.png");
    public static final Direction[] DIRECTIONS = Direction.values();
    private final Minecraft minecraft;
    private final TextureManager textureManager;
    private final EntityRenderDispatcher entityRenderDispatcher;
+   private final BlockEntityRenderDispatcher blockEntityRenderDispatcher;
    private final RenderBuffers renderBuffers;
    private ClientLevel level;
    private Set<ChunkRenderDispatcher.RenderChunk> chunksToCompile = Sets.newLinkedHashSet();
-   private final ObjectList<LevelRenderer.RenderChunkInfo> renderChunks = new ObjectArrayList(69696);
+   private final ObjectArrayList<LevelRenderer.RenderChunkInfo> renderChunks = new ObjectArrayList();
    private final Set<BlockEntity> globalBlockEntities = Sets.newHashSet();
    private ViewArea viewArea;
    private final VertexFormat skyFormat;
    @Nullable
    private VertexBuffer starBuffer;
@@ -186,10 +188,11 @@
    private ChunkRenderDispatcher chunkRenderDispatcher;
    private final VertexFormat format;
    private int lastViewDistance;
    private int renderedEntities;
    private int culledEntities;
+   private Frustum cullingFrustum;
    private boolean captureFrustum;
    @Nullable
    private Frustum capturedFrustum;
    private final Vector4f[] frustumPoints;
    private final Vector3d frustumPos;
@@ -231,10 +234,11 @@
       this.needsUpdate = true;
       this.rainSizeX = new float[1024];
       this.rainSizeZ = new float[1024];
       this.minecraft = var1;
       this.entityRenderDispatcher = var1.getEntityRenderDispatcher();
+      this.blockEntityRenderDispatcher = var1.getBlockEntityRenderDispatcher();
       this.renderBuffers = var2;
       this.textureManager = var1.getTextureManager();
 
       for(int var3 = 0; var3 < 32; ++var3) {
          for(int var4 = 0; var4 < 32; ++var4) {
@@ -315,11 +319,11 @@
                               var14.end();
                            }
 
                            var17 = 0;
                            this.minecraft.getTextureManager().bind(RAIN_LOCATION);
-                           var15.begin(7, DefaultVertexFormat.PARTICLE);
+                           var15.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.PARTICLE);
                         }
 
                         int var34 = this.ticks + var21 * var21 * 3121 + var21 * 45238971 + var20 * var20 * 418711 + var20 * 13761 & 31;
                         var35 = -((float)var34 + var2) / 32.0F * (3.0F + var32.nextFloat());
                         double var36 = (double)((float)var21 + 0.5F) - var3;
@@ -338,11 +342,11 @@
                               var14.end();
                            }
 
                            var17 = 1;
                            this.minecraft.getTextureManager().bind(SNOW_LOCATION);
-                           var15.begin(7, DefaultVertexFormat.PARTICLE);
+                           var15.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.PARTICLE);
                         }
 
                         float var49 = -((float)(this.ticks & 511) + var2) / 512.0F;
                         var35 = (float)(var32.nextDouble() + (double)var18 * 0.01D * (double)((float)var32.nextGaussian()));
                         float var50 = (float)(var32.nextDouble() + (double)(var18 * (float)var32.nextGaussian()) * 0.001D);
@@ -390,11 +394,11 @@
          for(int var8 = 0; var8 < var7; ++var8) {
             int var9 = var3.nextInt(21) - 10;
             int var10 = var3.nextInt(21) - 10;
             BlockPos var11 = var4.getHeightmapPos(Heightmap.Types.MOTION_BLOCKING, var5.offset(var9, 0, var10)).below();
             Biome var12 = var4.getBiome(var11);
-            if (var11.getY() > 0 && var11.getY() <= var5.getY() + 10 && var11.getY() >= var5.getY() - 10 && var12.getPrecipitation() == Biome.Precipitation.RAIN && var12.getTemperature(var11) >= 0.15F) {
+            if (var11.getY() > var4.getMinBuildHeight() && var11.getY() <= var5.getY() + 10 && var11.getY() >= var5.getY() - 10 && var12.getPrecipitation() == Biome.Precipitation.RAIN && var12.getTemperature(var11) >= 0.15F) {
                var6 = var11;
                if (this.minecraft.options.particles == ParticleStatus.MINIMAL) {
                   break;
                }
 
@@ -550,11 +554,11 @@
       BufferBuilder var2 = var1.getBuilder();
       if (this.darkBuffer != null) {
          this.darkBuffer.close();
       }
 
-      this.darkBuffer = new VertexBuffer(this.skyFormat);
+      this.darkBuffer = new VertexBuffer();
       this.drawSkyHemisphere(var2, -16.0F, true);
       var2.end();
       this.darkBuffer.upload(var2);
    }
 
@@ -563,20 +567,20 @@
       BufferBuilder var2 = var1.getBuilder();
       if (this.skyBuffer != null) {
          this.skyBuffer.close();
       }
 
-      this.skyBuffer = new VertexBuffer(this.skyFormat);
+      this.skyBuffer = new VertexBuffer();
       this.drawSkyHemisphere(var2, 16.0F, false);
       var2.end();
       this.skyBuffer.upload(var2);
    }
 
    private void drawSkyHemisphere(BufferBuilder var1, float var2, boolean var3) {
       boolean var4 = true;
       boolean var5 = true;
-      var1.begin(7, DefaultVertexFormat.POSITION);
+      var1.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION);
 
       for(int var6 = -384; var6 <= 384; var6 += 64) {
          for(int var7 = -384; var7 <= 384; var7 += 64) {
             float var8 = (float)var6;
             float var9 = (float)(var6 + 64);
@@ -599,19 +603,19 @@
       BufferBuilder var2 = var1.getBuilder();
       if (this.starBuffer != null) {
          this.starBuffer.close();
       }
 
-      this.starBuffer = new VertexBuffer(this.skyFormat);
+      this.starBuffer = new VertexBuffer();
       this.drawStars(var2);
       var2.end();
       this.starBuffer.upload(var2);
    }
 
    private void drawStars(BufferBuilder var1) {
       Random var2 = new Random(10842L);
-      var1.begin(7, DefaultVertexFormat.POSITION);
+      var1.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION);
 
       for(int var3 = 0; var3 < 1500; ++var3) {
          double var4 = (double)(var2.nextFloat() * 2.0F - 1.0F);
          double var6 = (double)(var2.nextFloat() * 2.0F - 1.0F);
          double var8 = (double)(var2.nextFloat() * 2.0F - 1.0F);
@@ -661,10 +665,11 @@
       this.lastCameraChunkY = Integer.MIN_VALUE;
       this.lastCameraChunkZ = Integer.MIN_VALUE;
       this.entityRenderDispatcher.setLevel(var1);
       this.level = var1;
       if (var1 != null) {
+         this.renderChunks.ensureCapacity(4356 * var1.getSectionsCount());
          this.allChanged();
       } else {
          this.chunksToCompile.clear();
          this.renderChunks.clear();
          if (this.viewArea != null) {
@@ -767,135 +772,141 @@
       if (this.minecraft.options.renderDistance != this.lastViewDistance) {
          this.allChanged();
       }
 
       this.level.getProfiler().push("camera");
-      double var7 = this.minecraft.player.getX() - this.lastCameraX;
-      double var9 = this.minecraft.player.getY() - this.lastCameraY;
-      double var11 = this.minecraft.player.getZ() - this.lastCameraZ;
-      if (this.lastCameraChunkX != this.minecraft.player.xChunk || this.lastCameraChunkY != this.minecraft.player.yChunk || this.lastCameraChunkZ != this.minecraft.player.zChunk || var7 * var7 + var9 * var9 + var11 * var11 > 16.0D) {
-         this.lastCameraX = this.minecraft.player.getX();
-         this.lastCameraY = this.minecraft.player.getY();
-         this.lastCameraZ = this.minecraft.player.getZ();
-         this.lastCameraChunkX = this.minecraft.player.xChunk;
-         this.lastCameraChunkY = this.minecraft.player.yChunk;
-         this.lastCameraChunkZ = this.minecraft.player.zChunk;
-         this.viewArea.repositionCamera(this.minecraft.player.getX(), this.minecraft.player.getZ());
+      double var7 = this.minecraft.player.getX();
+      double var9 = this.minecraft.player.getY();
+      double var11 = this.minecraft.player.getZ();
+      double var13 = var7 - this.lastCameraX;
+      double var15 = var9 - this.lastCameraY;
+      double var17 = var11 - this.lastCameraZ;
+      int var19 = SectionPos.posToSectionCoord(var7);
+      int var20 = SectionPos.posToSectionCoord(var9);
+      int var21 = SectionPos.posToSectionCoord(var11);
+      if (this.lastCameraChunkX != var19 || this.lastCameraChunkY != var20 || this.lastCameraChunkZ != var21 || var13 * var13 + var15 * var15 + var17 * var17 > 16.0D) {
+         this.lastCameraX = var7;
+         this.lastCameraY = var9;
+         this.lastCameraZ = var11;
+         this.lastCameraChunkX = var19;
+         this.lastCameraChunkY = var20;
+         this.lastCameraChunkZ = var21;
+         this.viewArea.repositionCamera(var7, var11);
       }
 
       this.chunkRenderDispatcher.setCamera(var6);
       this.level.getProfiler().popPush("cull");
       this.minecraft.getProfiler().popPush("culling");
-      BlockPos var13 = var1.getBlockPosition();
-      ChunkRenderDispatcher.RenderChunk var14 = this.viewArea.getRenderChunkAt(var13);
-      boolean var15 = true;
-      BlockPos var16 = new BlockPos(Mth.floor(var6.x / 16.0D) * 16, Mth.floor(var6.y / 16.0D) * 16, Mth.floor(var6.z / 16.0D) * 16);
-      float var17 = var1.getXRot();
-      float var18 = var1.getYRot();
-      this.needsUpdate = this.needsUpdate || !this.chunksToCompile.isEmpty() || var6.x != this.prevCamX || var6.y != this.prevCamY || var6.z != this.prevCamZ || (double)var17 != this.prevCamRotX || (double)var18 != this.prevCamRotY;
+      BlockPos var22 = var1.getBlockPosition();
+      ChunkRenderDispatcher.RenderChunk var23 = this.viewArea.getRenderChunkAt(var22);
+      boolean var24 = true;
+      BlockPos var25 = new BlockPos(Mth.floor(var6.x / 16.0D) * 16, Mth.floor(var6.y / 16.0D) * 16, Mth.floor(var6.z / 16.0D) * 16);
+      float var26 = var1.getXRot();
+      float var27 = var1.getYRot();
+      this.needsUpdate = this.needsUpdate || !this.chunksToCompile.isEmpty() || var6.x != this.prevCamX || var6.y != this.prevCamY || var6.z != this.prevCamZ || (double)var26 != this.prevCamRotX || (double)var27 != this.prevCamRotY;
       this.prevCamX = var6.x;
       this.prevCamY = var6.y;
       this.prevCamZ = var6.z;
-      this.prevCamRotX = (double)var17;
-      this.prevCamRotY = (double)var18;
+      this.prevCamRotX = (double)var26;
+      this.prevCamRotY = (double)var27;
       this.minecraft.getProfiler().popPush("update");
-      LevelRenderer.RenderChunkInfo var32;
-      ChunkRenderDispatcher.RenderChunk var33;
+      LevelRenderer.RenderChunkInfo var41;
+      ChunkRenderDispatcher.RenderChunk var42;
       if (!var3 && this.needsUpdate) {
          this.needsUpdate = false;
          this.renderChunks.clear();
-         ArrayDeque var19 = Queues.newArrayDeque();
+         ArrayDeque var28 = Queues.newArrayDeque();
          Entity.setViewScale(Mth.clamp((double)this.minecraft.options.renderDistance / 8.0D, 1.0D, 2.5D) * (double)this.minecraft.options.entityDistanceScaling);
-         boolean var20 = this.minecraft.smartCull;
-         int var25;
-         int var26;
-         if (var14 != null) {
-            if (var5 && this.level.getBlockState(var13).isSolidRender(this.level, var13)) {
-               var20 = false;
+         boolean var29 = this.minecraft.smartCull;
+         int var34;
+         int var35;
+         if (var23 != null) {
+            if (var5 && this.level.getBlockState(var22).isSolidRender(this.level, var22)) {
+               var29 = false;
             }
 
-            var14.setFrame(var4);
-            var19.add(new LevelRenderer.RenderChunkInfo(var14, (Direction)null, 0));
+            var23.setFrame(var4);
+            var28.add(new LevelRenderer.RenderChunkInfo(var23, (Direction)null, 0));
          } else {
-            int var21 = var13.getY() > 0 ? 248 : 8;
-            int var22 = Mth.floor(var6.x / 16.0D) * 16;
-            int var23 = Mth.floor(var6.z / 16.0D) * 16;
-            ArrayList var24 = Lists.newArrayList();
-            var25 = -this.lastViewDistance;
+            int var30 = var22.getY() > this.level.getMinBuildHeight() ? this.level.getMaxBuildHeight() - 8 : this.level.getMinBuildHeight() + 8;
+            int var31 = Mth.floor(var6.x / 16.0D) * 16;
+            int var32 = Mth.floor(var6.z / 16.0D) * 16;
+            ArrayList var33 = Lists.newArrayList();
+            var34 = -this.lastViewDistance;
 
             while(true) {
-               if (var25 > this.lastViewDistance) {
-                  var24.sort(Comparator.comparingDouble((var1x) -> {
-                     return var13.distSqr(var1x.chunk.getOrigin().offset(8, 8, 8));
+               if (var34 > this.lastViewDistance) {
+                  var33.sort(Comparator.comparingDouble((var1x) -> {
+                     return var22.distSqr(var1x.chunk.getOrigin().offset(8, 8, 8));
                   }));
-                  var19.addAll(var24);
+                  var28.addAll(var33);
                   break;
                }
 
-               for(var26 = -this.lastViewDistance; var26 <= this.lastViewDistance; ++var26) {
-                  ChunkRenderDispatcher.RenderChunk var27 = this.viewArea.getRenderChunkAt(new BlockPos(var22 + (var25 << 4) + 8, var21, var23 + (var26 << 4) + 8));
-                  if (var27 != null && var2.isVisible(var27.bb)) {
-                     var27.setFrame(var4);
-                     var24.add(new LevelRenderer.RenderChunkInfo(var27, (Direction)null, 0));
+               for(var35 = -this.lastViewDistance; var35 <= this.lastViewDistance; ++var35) {
+                  ChunkRenderDispatcher.RenderChunk var36 = this.viewArea.getRenderChunkAt(new BlockPos(var31 + SectionPos.sectionToBlockCoord(var34, 8), var30, var32 + SectionPos.sectionToBlockCoord(var35, 8)));
+                  if (var36 != null && var2.isVisible(var36.bb)) {
+                     var36.setFrame(var4);
+                     var33.add(new LevelRenderer.RenderChunkInfo(var36, (Direction)null, 0));
                   }
                }
 
-               ++var25;
+               ++var34;
             }
          }
 
          this.minecraft.getProfiler().push("iteration");
 
-         while(!var19.isEmpty()) {
-            var32 = (LevelRenderer.RenderChunkInfo)var19.poll();
-            var33 = var32.chunk;
-            Direction var34 = var32.sourceDirection;
-            this.renderChunks.add(var32);
-            Direction[] var36 = DIRECTIONS;
-            var25 = var36.length;
+         while(!var28.isEmpty()) {
+            var41 = (LevelRenderer.RenderChunkInfo)var28.poll();
+            var42 = var41.chunk;
+            Direction var43 = var41.sourceDirection;
+            this.renderChunks.add(var41);
+            Direction[] var45 = DIRECTIONS;
+            var34 = var45.length;
 
-            for(var26 = 0; var26 < var25; ++var26) {
-               Direction var38 = var36[var26];
-               ChunkRenderDispatcher.RenderChunk var28 = this.getRelativeFrom(var16, var33, var38);
-               if ((!var20 || !var32.hasDirection(var38.getOpposite())) && (!var20 || var34 == null || var33.getCompiledChunk().facesCanSeeEachother(var34.getOpposite(), var38)) && var28 != null && var28.hasAllNeighbors() && var28.setFrame(var4) && var2.isVisible(var28.bb)) {
-                  LevelRenderer.RenderChunkInfo var29 = new LevelRenderer.RenderChunkInfo(var28, var38, var32.step + 1);
-                  var29.setDirections(var32.directions, var38);
-                  var19.add(var29);
+            for(var35 = 0; var35 < var34; ++var35) {
+               Direction var47 = var45[var35];
+               ChunkRenderDispatcher.RenderChunk var37 = this.getRelativeFrom(var25, var42, var47);
+               if ((!var29 || !var41.hasDirection(var47.getOpposite())) && (!var29 || var43 == null || var42.getCompiledChunk().facesCanSeeEachother(var43.getOpposite(), var47)) && var37 != null && var37.hasAllNeighbors() && var37.setFrame(var4) && var2.isVisible(var37.bb)) {
+                  LevelRenderer.RenderChunkInfo var38 = new LevelRenderer.RenderChunkInfo(var37, var47, var41.step + 1);
+                  var38.setDirections(var41.directions, var47);
+                  var28.add(var38);
                }
             }
          }
 
          this.minecraft.getProfiler().pop();
       }
 
       this.minecraft.getProfiler().popPush("rebuildNear");
-      Set var30 = this.chunksToCompile;
+      Set var39 = this.chunksToCompile;
       this.chunksToCompile = Sets.newLinkedHashSet();
-      ObjectListIterator var31 = this.renderChunks.iterator();
+      ObjectListIterator var40 = this.renderChunks.iterator();
 
       while(true) {
          while(true) {
             do {
-               if (!var31.hasNext()) {
-                  this.chunksToCompile.addAll(var30);
+               if (!var40.hasNext()) {
+                  this.chunksToCompile.addAll(var39);
                   this.minecraft.getProfiler().pop();
                   return;
                }
 
-               var32 = (LevelRenderer.RenderChunkInfo)var31.next();
-               var33 = var32.chunk;
-            } while(!var33.isDirty() && !var30.contains(var33));
+               var41 = (LevelRenderer.RenderChunkInfo)var40.next();
+               var42 = var41.chunk;
+            } while(!var42.isDirty() && !var39.contains(var42));
 
             this.needsUpdate = true;
-            BlockPos var35 = var33.getOrigin().offset(8, 8, 8);
-            boolean var37 = var35.distSqr(var13) < 768.0D;
-            if (!var33.isDirtyFromPlayer() && !var37) {
-               this.chunksToCompile.add(var33);
+            BlockPos var44 = var42.getOrigin().offset(8, 8, 8);
+            boolean var46 = var44.distSqr(var22) < 768.0D;
+            if (!var42.isDirtyFromPlayer() && !var46) {
+               this.chunksToCompile.add(var42);
             } else {
                this.minecraft.getProfiler().push("build near");
-               this.chunkRenderDispatcher.rebuildChunkSync(var33);
-               var33.setNotDirty();
+               this.chunkRenderDispatcher.rebuildChunkSync(var42);
+               var42.setNotDirty();
                this.minecraft.getProfiler().pop();
             }
          }
       }
    }
@@ -903,11 +914,11 @@
    @Nullable
    private ChunkRenderDispatcher.RenderChunk getRelativeFrom(BlockPos var1, ChunkRenderDispatcher.RenderChunk var2, Direction var3) {
       BlockPos var4 = var2.getRelativeOrigin(var3);
       if (Mth.abs(var1.getX() - var4.getX()) > this.lastViewDistance * 16) {
          return null;
-      } else if (var4.getY() >= 0 && var4.getY() < 256) {
+      } else if (var4.getY() >= this.level.getMinBuildHeight() && var4.getY() < this.level.getMaxBuildHeight()) {
          return Mth.abs(var1.getZ() - var4.getZ()) > this.lastViewDistance * 16 ? null : this.viewArea.getRenderChunkAt(var4);
       } else {
          return null;
       }
    }
@@ -934,12 +945,21 @@
          this.frustumPoints[var11].perspectiveDivide();
       }
 
    }
 
+   public void prepareCullFrustum(PoseStack var1, Vec3 var2, Matrix4f var3) {
+      Matrix4f var4 = var1.last().pose();
+      double var5 = var2.x();
+      double var7 = var2.y();
+      double var9 = var2.z();
+      this.cullingFrustum = new Frustum(var4, var3);
+      this.cullingFrustum.prepare(var5, var7, var9);
+   }
+
    public void renderLevel(PoseStack var1, float var2, long var3, boolean var5, Camera var6, GameRenderer var7, LightTexture var8, Matrix4f var9) {
-      BlockEntityRenderDispatcher.instance.prepare(this.level, this.minecraft.getTextureManager(), this.minecraft.font, var6, this.minecraft.hitResult);
+      this.blockEntityRenderDispatcher.prepare(this.level, var6, this.minecraft.hitResult);
       this.entityRenderDispatcher.prepare(this.level, var6, this.minecraft.crosshairPickEntity);
       ProfilerFiller var10 = this.level.getProfiler();
       var10.popPush("light_updates");
       this.minecraft.level.getChunkSource().getLightEngine().runUpdates(Integer.MAX_VALUE, true, true);
       Vec3 var11 = var6.getPosition();
@@ -952,12 +972,11 @@
       Frustum var20;
       if (var19) {
          var20 = this.capturedFrustum;
          var20.prepare(this.frustumPos.x, this.frustumPos.y, this.frustumPos.z);
       } else {
-         var20 = new Frustum(var18, var9);
-         var20.prepare(var12, var14, var16);
+         var20 = this.cullingFrustum;
       }
 
       this.minecraft.getProfiler().popPush("captureFrustum");
       if (this.captureFrustum) {
          this.captureFrustum(var18, var9, var11.x, var11.y, var11.z, var19 ? new Frustum(var18, var9) : var20);
@@ -1056,11 +1075,11 @@
 
                                     BlockEntity var62 = (BlockEntity)var57.next();
                                     BlockPos var63 = var62.getBlockPos();
                                     var1.pushPose();
                                     var1.translate((double)var63.getX() - var12, (double)var63.getY() - var14, (double)var63.getZ() - var16);
-                                    BlockEntityRenderDispatcher.instance.render(var62, var2, var1, var38);
+                                    this.blockEntityRenderDispatcher.render(var62, var2, var1, var38);
                                     var1.popPose();
                                  }
                               }
 
                               this.checkPoseStack(var1);
@@ -1171,19 +1190,19 @@
 
                               if (this.transparencyChain != null) {
                                  RenderStateShard.WEATHER_TARGET.setupRenderState();
                                  var10.popPush("weather");
                                  this.renderSnowAndRain(var8, var2, var12, var14, var16);
-                                 this.renderWorldBounds(var6);
+                                 this.renderWorldBorder(var6);
                                  RenderStateShard.WEATHER_TARGET.clearRenderState();
                                  this.transparencyChain.process(var2);
                                  this.minecraft.getMainRenderTarget().bindWrite(false);
                               } else {
                                  RenderSystem.depthMask(false);
                                  var10.popPush("weather");
                                  this.renderSnowAndRain(var8, var2, var12, var14, var16);
-                                 this.renderWorldBounds(var6);
+                                 this.renderWorldBorder(var6);
                                  RenderSystem.depthMask(true);
                               }
 
                               this.renderDebug(var6);
                               RenderSystem.shadeModel(7424);
@@ -1217,11 +1236,11 @@
                                     return var2x.affectsCrumbling() ? VertexMultiConsumer.create(var49, var3) : var3;
                                  };
                               }
                            }
 
-                           BlockEntityRenderDispatcher.instance.render(var67, var2, var1, (MultiBufferSource)var71);
+                           this.blockEntityRenderDispatcher.render(var67, var2, var1, (MultiBufferSource)var71);
                            var1.popPose();
                         }
                      }
                   }
 
@@ -1318,11 +1337,11 @@
             var2.pushPose();
             BlockPos var14 = var12.getOrigin();
             var2.translate((double)var14.getX() - var3, (double)var14.getY() - var5, (double)var14.getZ() - var7);
             var20.bind();
             this.format.setupBufferState(0L);
-            var20.draw(var2.last().pose(), 7);
+            var20.draw(var2.last().pose());
             var2.popPose();
          }
       }
 
       VertexBuffer.unbind();
@@ -1354,11 +1373,11 @@
             int var14;
             int var16;
             int var17;
             Direction var18;
             if (this.minecraft.chunkPath) {
-               var3.begin(1, DefaultVertexFormat.POSITION_COLOR);
+               var3.begin(VertexFormat.Mode.LINES, DefaultVertexFormat.POSITION_COLOR);
                RenderSystem.lineWidth(10.0F);
                var14 = var11.step == 0 ? 0 : Mth.hsvToRgb((float)var11.step / 50.0F, 0.9F, 0.9F);
                int var15 = var14 >> 16 & 255;
                var16 = var14 >> 8 & 255;
                var17 = var14 & 255;
@@ -1371,11 +1390,11 @@
                var2.end();
                RenderSystem.lineWidth(1.0F);
             }
 
             if (this.minecraft.chunkVisibility && !var12.getCompiledChunk().hasNoRenderableLayers()) {
-               var3.begin(1, DefaultVertexFormat.POSITION_COLOR);
+               var3.begin(VertexFormat.Mode.LINES, DefaultVertexFormat.POSITION_COLOR);
                RenderSystem.lineWidth(10.0F);
                var14 = 0;
                Direction[] var24 = DIRECTIONS;
                var16 = var24.length;
 
@@ -1396,11 +1415,11 @@
                }
 
                var2.end();
                RenderSystem.lineWidth(1.0F);
                if (var14 > 0) {
-                  var3.begin(7, DefaultVertexFormat.POSITION_COLOR);
+                  var3.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION_COLOR);
                   float var25 = 0.5F;
                   float var26 = 0.2F;
                   var3.vertex(0.5D, 15.5D, 0.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
                   var3.vertex(15.5D, 15.5D, 0.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
                   var3.vertex(15.5D, 15.5D, 15.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
@@ -1443,20 +1462,20 @@
          RenderSystem.defaultBlendFunc();
          RenderSystem.lineWidth(10.0F);
          RenderSystem.pushMatrix();
          RenderSystem.translatef((float)(this.frustumPos.x - var1.getPosition().x), (float)(this.frustumPos.y - var1.getPosition().y), (float)(this.frustumPos.z - var1.getPosition().z));
          RenderSystem.depthMask(true);
-         var3.begin(7, DefaultVertexFormat.POSITION_COLOR);
+         var3.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION_COLOR);
          this.addFrustumQuad(var3, 0, 1, 2, 3, 0, 1, 1);
          this.addFrustumQuad(var3, 4, 5, 6, 7, 1, 0, 0);
          this.addFrustumQuad(var3, 0, 1, 5, 4, 1, 1, 0);
          this.addFrustumQuad(var3, 2, 3, 7, 6, 0, 0, 1);
          this.addFrustumQuad(var3, 0, 4, 7, 3, 0, 1, 0);
          this.addFrustumQuad(var3, 1, 5, 6, 2, 1, 0, 1);
          var2.end();
          RenderSystem.depthMask(false);
-         var3.begin(1, DefaultVertexFormat.POSITION);
+         var3.begin(VertexFormat.Mode.LINES, DefaultVertexFormat.POSITION);
          RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
          this.addFrustumVertex(var3, 0);
          this.addFrustumVertex(var3, 1);
          this.addFrustumVertex(var3, 1);
          this.addFrustumVertex(var3, 2);
@@ -1560,11 +1579,11 @@
          if (var4 == 5) {
             var1.mulPose(Vector3f.ZP.rotationDegrees(-90.0F));
          }
 
          Matrix4f var5 = var1.last().pose();
-         var3.begin(7, DefaultVertexFormat.POSITION_TEX_COLOR);
+         var3.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION_TEX_COLOR);
          var3.vertex(var5, -100.0F, -100.0F, -100.0F).uv(0.0F, 0.0F).color(40, 40, 40, 255).endVertex();
          var3.vertex(var5, -100.0F, -100.0F, 100.0F).uv(0.0F, 16.0F).color(40, 40, 40, 255).endVertex();
          var3.vertex(var5, 100.0F, -100.0F, 100.0F).uv(16.0F, 16.0F).color(40, 40, 40, 255).endVertex();
          var3.vertex(var5, 100.0F, -100.0F, -100.0F).uv(16.0F, 0.0F).color(40, 40, 40, 255).endVertex();
          var2.end();
@@ -1580,22 +1599,22 @@
    public void renderSky(PoseStack var1, float var2) {
       if (this.minecraft.level.effects().skyType() == DimensionSpecialEffects.SkyType.END) {
          this.renderEndSky(var1);
       } else if (this.minecraft.level.effects().skyType() == DimensionSpecialEffects.SkyType.NORMAL) {
          RenderSystem.disableTexture();
-         Vec3 var3 = this.level.getSkyColor(this.minecraft.gameRenderer.getMainCamera().getBlockPosition(), var2);
+         Vec3 var3 = this.level.getSkyColor(this.minecraft.gameRenderer.getMainCamera().getPosition(), var2);
          float var4 = (float)var3.x;
          float var5 = (float)var3.y;
          float var6 = (float)var3.z;
          FogRenderer.levelFogColor();
          BufferBuilder var7 = Tesselator.getInstance().getBuilder();
          RenderSystem.depthMask(false);
          RenderSystem.enableFog();
          RenderSystem.color3f(var4, var5, var6);
          this.skyBuffer.bind();
          this.skyFormat.setupBufferState(0L);
-         this.skyBuffer.draw(var1.last().pose(), 7);
+         this.skyBuffer.draw(var1.last().pose());
          VertexBuffer.unbind();
          this.skyFormat.clearBufferState();
          RenderSystem.disableFog();
          RenderSystem.disableAlphaTest();
          RenderSystem.enableBlend();
@@ -1616,11 +1635,11 @@
             var1.mulPose(Vector3f.ZP.rotationDegrees(90.0F));
             float var10 = var8[0];
             var11 = var8[1];
             float var12 = var8[2];
             Matrix4f var13 = var1.last().pose();
-            var7.begin(6, DefaultVertexFormat.POSITION_COLOR);
+            var7.begin(VertexFormat.Mode.TRIANGLE_FAN, DefaultVertexFormat.POSITION_COLOR);
             var7.vertex(var13, 0.0F, 100.0F, 0.0F).color(var10, var11, var12, var8[3]).endVertex();
             boolean var14 = true;
 
             for(int var15 = 0; var15 <= 16; ++var15) {
                var16 = (float)var15 * 6.2831855F / 16.0F;
@@ -1643,11 +1662,11 @@
          var1.mulPose(Vector3f.YP.rotationDegrees(-90.0F));
          var1.mulPose(Vector3f.XP.rotationDegrees(this.level.getTimeOfDay(var2) * 360.0F));
          Matrix4f var21 = var1.last().pose();
          var11 = 30.0F;
          this.textureManager.bind(SUN_LOCATION);
-         var7.begin(7, DefaultVertexFormat.POSITION_TEX);
+         var7.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION_TEX);
          var7.vertex(var21, -var11, 100.0F, -var11).uv(0.0F, 0.0F).endVertex();
          var7.vertex(var21, var11, 100.0F, -var11).uv(1.0F, 0.0F).endVertex();
          var7.vertex(var21, var11, 100.0F, var11).uv(1.0F, 1.0F).endVertex();
          var7.vertex(var21, -var11, 100.0F, var11).uv(0.0F, 1.0F).endVertex();
          var7.end();
@@ -1659,11 +1678,11 @@
          int var24 = var22 / 4 % 2;
          float var25 = (float)(var23 + 0) / 4.0F;
          var16 = (float)(var24 + 0) / 2.0F;
          var17 = (float)(var23 + 1) / 4.0F;
          var18 = (float)(var24 + 1) / 2.0F;
-         var7.begin(7, DefaultVertexFormat.POSITION_TEX);
+         var7.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION_TEX);
          var7.vertex(var21, -var11, -100.0F, var11).uv(var17, var18).endVertex();
          var7.vertex(var21, var11, -100.0F, var11).uv(var25, var18).endVertex();
          var7.vertex(var21, var11, -100.0F, -var11).uv(var25, var16).endVertex();
          var7.vertex(var21, -var11, -100.0F, -var11).uv(var17, var16).endVertex();
          var7.end();
@@ -1672,11 +1691,11 @@
          float var19 = this.level.getStarBrightness(var2) * var9;
          if (var19 > 0.0F) {
             RenderSystem.color4f(var19, var19, var19, var19);
             this.starBuffer.bind();
             this.skyFormat.setupBufferState(0L);
-            this.starBuffer.draw(var1.last().pose(), 7);
+            this.starBuffer.draw(var1.last().pose());
             VertexBuffer.unbind();
             this.skyFormat.clearBufferState();
          }
 
          RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
@@ -1690,11 +1709,11 @@
          if (var20 < 0.0D) {
             var1.pushPose();
             var1.translate(0.0D, 12.0D, 0.0D);
             this.darkBuffer.bind();
             this.skyFormat.setupBufferState(0L);
-            this.darkBuffer.draw(var1.last().pose(), 7);
+            this.darkBuffer.draw(var1.last().pose());
             VertexBuffer.unbind();
             this.skyFormat.clearBufferState();
             var1.popPose();
          }
 
@@ -1751,11 +1770,11 @@
             BufferBuilder var29 = Tesselator.getInstance().getBuilder();
             if (this.cloudBuffer != null) {
                this.cloudBuffer.close();
             }
 
-            this.cloudBuffer = new VertexBuffer(DefaultVertexFormat.POSITION_TEX_COLOR_NORMAL);
+            this.cloudBuffer = new VertexBuffer();
             this.buildClouds(var29, var16, var18, var20, var25);
             var29.end();
             this.cloudBuffer.upload(var29);
          }
 
@@ -1773,11 +1792,11 @@
                   RenderSystem.colorMask(false, false, false, false);
                } else {
                   RenderSystem.colorMask(true, true, true, true);
                }
 
-               this.cloudBuffer.draw(var1.last().pose(), 7);
+               this.cloudBuffer.draw(var1.last().pose());
             }
 
             VertexBuffer.unbind();
             DefaultVertexFormat.POSITION_TEX_COLOR_NORMAL.clearBufferState();
          }
@@ -1809,11 +1828,11 @@
       float var23 = var17 * 0.7F;
       float var24 = var18 * 0.7F;
       float var25 = var16 * 0.8F;
       float var26 = var17 * 0.8F;
       float var27 = var18 * 0.8F;
-      var1.begin(7, DefaultVertexFormat.POSITION_TEX_COLOR_NORMAL);
+      var1.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION_TEX_COLOR_NORMAL);
       float var28 = (float)Math.floor(var4 / 4.0D) * 4.0F;
       if (this.prevCloudsType == CloudStatus.FANCY) {
          for(int var29 = -3; var29 <= 4; ++var29) {
             for(int var30 = -3; var30 <= 4; ++var30) {
                float var31 = (float)(var29 * 8);
@@ -1914,20 +1933,20 @@
          }
       }
 
    }
 
-   private void renderWorldBounds(Camera var1) {
+   private void renderWorldBorder(Camera var1) {
       BufferBuilder var2 = Tesselator.getInstance().getBuilder();
       WorldBorder var3 = this.level.getWorldBorder();
       double var4 = (double)(this.minecraft.options.renderDistance * 16);
       if (var1.getPosition().x >= var3.getMaxX() - var4 || var1.getPosition().x <= var3.getMinX() + var4 || var1.getPosition().z >= var3.getMaxZ() - var4 || var1.getPosition().z <= var3.getMinZ() + var4) {
          double var6 = 1.0D - var3.getDistanceToBorder(var1.getPosition().x, var1.getPosition().z) / var4;
          var6 = Math.pow(var6, 4.0D);
          double var8 = var1.getPosition().x;
-         double var10 = var1.getPosition().y;
-         double var12 = var1.getPosition().z;
+         double var10 = var1.getPosition().z;
+         double var12 = (double)this.minecraft.gameRenderer.getDepthFar();
          RenderSystem.enableBlend();
          RenderSystem.enableDepthTest();
          RenderSystem.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
          this.textureManager.bind(FORCEFIELD_LOCATION);
          RenderSystem.depthMask(Minecraft.useShaderTransparency());
@@ -1943,72 +1962,72 @@
          RenderSystem.enableAlphaTest();
          RenderSystem.disableCull();
          float var18 = (float)(Util.getMillis() % 3000L) / 3000.0F;
          float var19 = 0.0F;
          float var20 = 0.0F;
-         float var21 = 128.0F;
-         var2.begin(7, DefaultVertexFormat.POSITION_TEX);
-         double var22 = Math.max((double)Mth.floor(var12 - var4), var3.getMinZ());
-         double var24 = Math.min((double)Mth.ceil(var12 + var4), var3.getMaxZ());
+         float var21 = (float)var12;
+         var2.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION_TEX);
+         double var22 = Math.max((double)Mth.floor(var10 - var4), var3.getMinZ());
+         double var24 = Math.min((double)Mth.ceil(var10 + var4), var3.getMaxZ());
          float var26;
          double var27;
          double var29;
          float var31;
          if (var8 > var3.getMaxX() - var4) {
             var26 = 0.0F;
 
             for(var27 = var22; var27 < var24; var26 += 0.5F) {
                var29 = Math.min(1.0D, var24 - var27);
                var31 = (float)var29 * 0.5F;
-               this.vertex(var2, var8, var10, var12, var3.getMaxX(), 256, var27, var18 + var26, var18 + 0.0F);
-               this.vertex(var2, var8, var10, var12, var3.getMaxX(), 256, var27 + var29, var18 + var31 + var26, var18 + 0.0F);
-               this.vertex(var2, var8, var10, var12, var3.getMaxX(), 0, var27 + var29, var18 + var31 + var26, var18 + 128.0F);
-               this.vertex(var2, var8, var10, var12, var3.getMaxX(), 0, var27, var18 + var26, var18 + 128.0F);
+               var2.vertex(var3.getMaxX() - var8, -var12, var27 - var10).uv(var18 + var26, var18 + 0.0F).endVertex();
+               var2.vertex(var3.getMaxX() - var8, -var12, var27 + var29 - var10).uv(var18 + var31 + var26, var18 + 0.0F).endVertex();
+               var2.vertex(var3.getMaxX() - var8, var12, var27 + var29 - var10).uv(var18 + var31 + var26, var18 + var21).endVertex();
+               var2.vertex(var3.getMaxX() - var8, var12, var27 - var10).uv(var18 + var26, var18 + var21).endVertex();
                ++var27;
             }
          }
 
          if (var8 < var3.getMinX() + var4) {
             var26 = 0.0F;
 
             for(var27 = var22; var27 < var24; var26 += 0.5F) {
                var29 = Math.min(1.0D, var24 - var27);
                var31 = (float)var29 * 0.5F;
-               this.vertex(var2, var8, var10, var12, var3.getMinX(), 256, var27, var18 + var26, var18 + 0.0F);
-               this.vertex(var2, var8, var10, var12, var3.getMinX(), 256, var27 + var29, var18 + var31 + var26, var18 + 0.0F);
-               this.vertex(var2, var8, var10, var12, var3.getMinX(), 0, var27 + var29, var18 + var31 + var26, var18 + 128.0F);
-               this.vertex(var2, var8, var10, var12, var3.getMinX(), 0, var27, var18 + var26, var18 + 128.0F);
+               var2.vertex(var3.getMinX() - var8, -var12, var27 - var10).uv(var18 + var26, var18 + 0.0F).endVertex();
+               var2.vertex(var3.getMinX() - var8, -var12, var27 + var29 - var10).uv(var18 + var31 + var26, var18 + 0.0F).endVertex();
+               var2.vertex(var3.getMinX() - var8, var12, var27 + var29 - var10).uv(var18 + var31 + var26, var18 + var21).endVertex();
+               var2.vertex(var3.getMinX() - var8, var12, var27 - var10).uv(var18 + var26, var18 + var21).endVertex();
                ++var27;
             }
          }
 
          var22 = Math.max((double)Mth.floor(var8 - var4), var3.getMinX());
          var24 = Math.min((double)Mth.ceil(var8 + var4), var3.getMaxX());
-         if (var12 > var3.getMaxZ() - var4) {
+         if (var10 > var3.getMaxZ() - var4) {
             var26 = 0.0F;
 
             for(var27 = var22; var27 < var24; var26 += 0.5F) {
                var29 = Math.min(1.0D, var24 - var27);
                var31 = (float)var29 * 0.5F;
-               this.vertex(var2, var8, var10, var12, var27, 256, var3.getMaxZ(), var18 + var26, var18 + 0.0F);
-               this.vertex(var2, var8, var10, var12, var27 + var29, 256, var3.getMaxZ(), var18 + var31 + var26, var18 + 0.0F);
-               this.vertex(var2, var8, var10, var12, var27 + var29, 0, var3.getMaxZ(), var18 + var31 + var26, var18 + 128.0F);
-               this.vertex(var2, var8, var10, var12, var27, 0, var3.getMaxZ(), var18 + var26, var18 + 128.0F);
+               var2.vertex(var27 - var8, -var12, var3.getMaxZ() - var10).uv(var18 + var26, var18 + 0.0F).endVertex();
+               var2.vertex(var27 + var29 - var8, -var12, var3.getMaxZ() - var10).uv(var18 + var31 + var26, var18 + 0.0F).endVertex();
+               var2.vertex(var27 + var29 - var8, var12, var3.getMaxZ() - var10).uv(var18 + var31 + var26, var18 + var21).endVertex();
+               var2.vertex(var27 - var8, var12, var3.getMaxZ() - var10).uv(var18 + var26, var18 + var21).endVertex();
                ++var27;
             }
          }
 
-         if (var12 < var3.getMinZ() + var4) {
+         if (var10 < var3.getMinZ() + var4) {
             var26 = 0.0F;
 
             for(var27 = var22; var27 < var24; var26 += 0.5F) {
                var29 = Math.min(1.0D, var24 - var27);
                var31 = (float)var29 * 0.5F;
-               this.vertex(var2, var8, var10, var12, var27, 256, var3.getMinZ(), var18 + var26, var18 + 0.0F);
-               this.vertex(var2, var8, var10, var12, var27 + var29, 256, var3.getMinZ(), var18 + var31 + var26, var18 + 0.0F);
-               this.vertex(var2, var8, var10, var12, var27 + var29, 0, var3.getMinZ(), var18 + var31 + var26, var18 + 128.0F);
-               this.vertex(var2, var8, var10, var12, var27, 0, var3.getMinZ(), var18 + var26, var18 + 128.0F);
+               var2.vertex(var27 - var8, -var12, var3.getMinZ() - var10).uv(var18 + var26, var18 + 0.0F).endVertex();
+               var2.vertex(var27 + var29 - var8, -var12, var3.getMinZ() - var10).uv(var18 + var31 + var26, var18 + 0.0F).endVertex();
+               var2.vertex(var27 + var29 - var8, var12, var3.getMinZ() - var10).uv(var18 + var31 + var26, var18 + var21).endVertex();
+               var2.vertex(var27 - var8, var12, var3.getMinZ() - var10).uv(var18 + var26, var18 + var21).endVertex();
                ++var27;
             }
          }
 
          var2.end();
@@ -2022,14 +2041,10 @@
          RenderSystem.popMatrix();
          RenderSystem.depthMask(true);
       }
    }
 
-   private void vertex(BufferBuilder var1, double var2, double var4, double var6, double var8, int var10, double var11, float var13, float var14) {
-      var1.vertex(var8 - var2, (double)var10 - var4, var11 - var6).uv(var13, var14).endVertex();
-   }
-
    private void renderHitOutline(PoseStack var1, VertexConsumer var2, Entity var3, double var4, double var6, double var8, BlockPos var10, BlockState var11) {
       renderShape(var1, var2, var11.getShape(this.level, var10, CollisionContext.of(var3)), (double)var10.getX() - var4, (double)var10.getY() - var6, (double)var10.getZ() - var8, 0.0F, 0.0F, 0.0F, 0.4F);
    }
 
    public static void renderVoxelShape(PoseStack var0, VertexConsumer var1, VoxelShape var2, double var3, double var5, double var7, float var9, float var10, float var11, float var12) {
@@ -2137,22 +2152,22 @@
 
    private void setBlockDirty(BlockPos var1, boolean var2) {
       for(int var3 = var1.getZ() - 1; var3 <= var1.getZ() + 1; ++var3) {
          for(int var4 = var1.getX() - 1; var4 <= var1.getX() + 1; ++var4) {
             for(int var5 = var1.getY() - 1; var5 <= var1.getY() + 1; ++var5) {
-               this.setSectionDirty(var4 >> 4, var5 >> 4, var3 >> 4, var2);
+               this.setSectionDirty(SectionPos.blockToSectionCoord(var4), SectionPos.blockToSectionCoord(var5), SectionPos.blockToSectionCoord(var3), var2);
             }
          }
       }
 
    }
 
    public void setBlocksDirty(int var1, int var2, int var3, int var4, int var5, int var6) {
       for(int var7 = var3 - 1; var7 <= var6 + 1; ++var7) {
          for(int var8 = var1 - 1; var8 <= var4 + 1; ++var8) {
             for(int var9 = var2 - 1; var9 <= var5 + 1; ++var9) {
-               this.setSectionDirty(var8 >> 4, var9 >> 4, var7 >> 4);
+               this.setSectionDirty(SectionPos.blockToSectionCoord(var8), SectionPos.blockToSectionCoord(var9), SectionPos.blockToSectionCoord(var7));
             }
          }
       }
 
    }
@@ -2226,11 +2241,11 @@
          CrashReport var17 = CrashReport.forThrowable(var19, "Exception while adding particle");
          CrashReportCategory var18 = var17.addCategory("Particle being added");
          var18.setDetail("ID", (Object)Registry.PARTICLE_TYPE.getKey(var1.getType()));
          var18.setDetail("Parameters", (Object)var1.writeToString());
          var18.setDetail("Position", () -> {
-            return CrashReportCategory.formatLocation(var4, var6, var8);
+            return CrashReportCategory.formatLocation(this.level, var4, var6, var8);
          });
          throw new ReportedException(var17);
       }
    }
 
@@ -2446,10 +2461,19 @@
          this.level.playLocalSound(var3, SoundEvents.BOOK_PAGE_TURN, SoundSource.BLOCKS, 1.0F, this.level.random.nextFloat() * 0.1F + 0.9F, false);
          break;
       case 1044:
          this.level.playLocalSound(var3, SoundEvents.SMITHING_TABLE_USE, SoundSource.BLOCKS, 1.0F, this.level.random.nextFloat() * 0.1F + 0.9F, false);
          break;
+      case 1045:
+         this.level.playLocalSound(var3, SoundEvents.POINTED_DRIPSTONE_LAND, SoundSource.BLOCKS, 2.0F, this.level.random.nextFloat() * 0.1F + 0.9F, false);
+         break;
+      case 1046:
+         this.level.playLocalSound(var3, SoundEvents.POINTED_DRIPSTONE_DRIP_LAVA_INTO_CAULDRON, SoundSource.BLOCKS, 2.0F, this.level.random.nextFloat() * 0.1F + 0.9F, false);
+         break;
+      case 1047:
+         this.level.playLocalSound(var3, SoundEvents.POINTED_DRIPSTONE_DRIP_WATER_INTO_CAULDRON, SoundSource.BLOCKS, 2.0F, this.level.random.nextFloat() * 0.1F + 0.9F, false);
+         break;
       case 1500:
          ComposterBlock.handleFill(this.level, var3, var4 > 0);
          break;
       case 1501:
          this.level.playLocalSound(var3, SoundEvents.LAVA_EXTINGUISH, SoundSource.BLOCKS, 0.5F, 2.6F + (var5.nextFloat() - var5.nextFloat()) * 0.8F, false);
@@ -2479,10 +2503,13 @@
             var12 = (double)var3.getZ() + (5.0D + var5.nextDouble() * 6.0D) / 16.0D;
             this.level.addParticle(ParticleTypes.SMOKE, var34, var10, var12, 0.0D, 0.0D, 0.0D);
          }
 
          return;
+      case 1504:
+         PointedDripstoneBlock.spawnDripParticle(this.level, var3, this.level.getBlockState(var3));
+         break;
       case 2000:
          Direction var33 = Direction.from3DDataValue(var4);
          var7 = var33.getStepX();
          int var35 = var33.getStepY();
          int var36 = var33.getStepZ();
@@ -2507,11 +2534,11 @@
          if (!var32.isAir()) {
             SoundType var38 = var32.getSoundType();
             this.level.playLocalSound(var3, var38.getBreakSound(), SoundSource.BLOCKS, (var38.getVolume() + 1.0F) / 2.0F, var38.getPitch() * 0.8F, false);
          }
 
-         this.minecraft.particleEngine.destroy(var3, var32);
+         this.level.addDestroyBlockEffect(var3, var32);
          break;
       case 2002:
       case 2007:
          Vec3 var31 = Vec3.atBottomCenterOf(var3);
 
