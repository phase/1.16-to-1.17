--- net/minecraft/client/renderer/LevelRenderer.java
+++ net/minecraft/client/renderer/LevelRenderer.java
@@ -6,10 +6,11 @@
 import com.google.common.collect.Sets;
 import com.google.gson.JsonSyntaxException;
 import com.mojang.blaze3d.pipeline.RenderTarget;
 import com.mojang.blaze3d.platform.GlStateManager;
 import com.mojang.blaze3d.platform.Lighting;
+import com.mojang.blaze3d.shaders.Uniform;
 import com.mojang.blaze3d.systems.RenderSystem;
 import com.mojang.blaze3d.vertex.BufferBuilder;
 import com.mojang.blaze3d.vertex.BufferUploader;
 import com.mojang.blaze3d.vertex.DefaultVertexFormat;
 import com.mojang.blaze3d.vertex.PoseStack;
@@ -17,10 +18,11 @@
 import com.mojang.blaze3d.vertex.Tesselator;
 import com.mojang.blaze3d.vertex.VertexBuffer;
 import com.mojang.blaze3d.vertex.VertexConsumer;
 import com.mojang.blaze3d.vertex.VertexFormat;
 import com.mojang.blaze3d.vertex.VertexMultiConsumer;
+import com.mojang.math.Matrix3f;
 import com.mojang.math.Matrix4f;
 import com.mojang.math.Vector3d;
 import com.mojang.math.Vector3f;
 import com.mojang.math.Vector4f;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
@@ -28,11 +30,10 @@
 import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
 import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.longs.Long2ObjectMap.Entry;
 import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 import it.unimi.dsi.fastutil.objects.ObjectIterator;
-import it.unimi.dsi.fastutil.objects.ObjectList;
 import it.unimi.dsi.fastutil.objects.ObjectListIterator;
 import java.io.IOException;
 import java.util.ArrayDeque;
 import java.util.ArrayList;
 import java.util.Collection;
@@ -67,10 +68,11 @@
 import net.minecraft.client.resources.sounds.SimpleSoundInstance;
 import net.minecraft.client.resources.sounds.SoundInstance;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.Registry;
+import net.minecraft.core.SectionPos;
 import net.minecraft.core.particles.ItemParticleOption;
 import net.minecraft.core.particles.ParticleOptions;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.core.particles.SimpleParticleType;
 import net.minecraft.network.chat.TextComponent;
@@ -81,11 +83,13 @@
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.tags.FluidTags;
 import net.minecraft.util.Mth;
+import net.minecraft.util.ParticleUtils;
 import net.minecraft.util.profiling.ProfilerFiller;
+import net.minecraft.util.valueproviders.UniformInt;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.BoneMealItem;
 import net.minecraft.world.item.Item;
@@ -99,10 +103,11 @@
 import net.minecraft.world.level.biome.Biome;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.CampfireBlock;
 import net.minecraft.world.level.block.ComposterBlock;
+import net.minecraft.world.level.block.PointedDripstoneBlock;
 import net.minecraft.world.level.block.SoundType;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.border.WorldBorder;
 import net.minecraft.world.level.levelgen.Heightmap;
@@ -117,10 +122,18 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class LevelRenderer implements ResourceManagerReloadListener, AutoCloseable {
    private static final Logger LOGGER = LogManager.getLogger();
+   public static final int CHUNK_SIZE = 16;
+   public static final int MAX_CHUNKS_WIDTH = 66;
+   public static final int MAX_CHUNKS_AREA = 4356;
+   private static final float SKY_DISC_RADIUS = 512.0F;
+   private static final int MIN_FOG_DISTANCE = 32;
+   private static final int RAIN_RADIUS = 10;
+   private static final int RAIN_DIAMETER = 21;
+   private static final int TRANSPARENT_SORT_COUNT = 15;
    private static final ResourceLocation MOON_LOCATION = new ResourceLocation("textures/environment/moon_phases.png");
    private static final ResourceLocation SUN_LOCATION = new ResourceLocation("textures/environment/sun.png");
    private static final ResourceLocation CLOUDS_LOCATION = new ResourceLocation("textures/environment/clouds.png");
    private static final ResourceLocation END_SKY_LOCATION = new ResourceLocation("textures/environment/end_sky.png");
    private static final ResourceLocation FORCEFIELD_LOCATION = new ResourceLocation("textures/misc/forcefield.png");
@@ -128,31 +141,32 @@
    private static final ResourceLocation SNOW_LOCATION = new ResourceLocation("textures/environment/snow.png");
    public static final Direction[] DIRECTIONS = Direction.values();
    private final Minecraft minecraft;
    private final TextureManager textureManager;
    private final EntityRenderDispatcher entityRenderDispatcher;
+   private final BlockEntityRenderDispatcher blockEntityRenderDispatcher;
    private final RenderBuffers renderBuffers;
    private ClientLevel level;
    private Set<ChunkRenderDispatcher.RenderChunk> chunksToCompile = Sets.newLinkedHashSet();
-   private final ObjectList<LevelRenderer.RenderChunkInfo> renderChunks = new ObjectArrayList(69696);
+   private final ObjectArrayList<LevelRenderer.RenderChunkInfo> renderChunks = new ObjectArrayList();
    private final Set<BlockEntity> globalBlockEntities = Sets.newHashSet();
    private ViewArea viewArea;
-   private final VertexFormat skyFormat;
+   private LevelRenderer.RenderInfoMap renderInfoMap;
    @Nullable
    private VertexBuffer starBuffer;
    @Nullable
    private VertexBuffer skyBuffer;
    @Nullable
    private VertexBuffer darkBuffer;
-   private boolean generateClouds;
+   private boolean generateClouds = true;
    @Nullable
    private VertexBuffer cloudBuffer;
-   private final RunningTrimmedMean frameTimes;
+   private final RunningTrimmedMean frameTimes = new RunningTrimmedMean(100);
    private int ticks;
-   private final Int2ObjectMap<BlockDestructionProgress> destroyingBlocks;
-   private final Long2ObjectMap<SortedSet<BlockDestructionProgress>> destructionProgress;
-   private final Map<BlockPos, SoundInstance> playingRecords;
+   private final Int2ObjectMap<BlockDestructionProgress> destroyingBlocks = new Int2ObjectOpenHashMap();
+   private final Long2ObjectMap<SortedSet<BlockDestructionProgress>> destructionProgress = new Long2ObjectOpenHashMap();
+   private final Map<BlockPos, SoundInstance> playingRecords = Maps.newHashMap();
    @Nullable
    private RenderTarget entityTarget;
    @Nullable
    private PostChain entityEffect;
    @Nullable
@@ -165,31 +179,31 @@
    private RenderTarget weatherTarget;
    @Nullable
    private RenderTarget cloudsTarget;
    @Nullable
    private PostChain transparencyChain;
-   private double lastCameraX;
-   private double lastCameraY;
-   private double lastCameraZ;
-   private int lastCameraChunkX;
-   private int lastCameraChunkY;
-   private int lastCameraChunkZ;
-   private double prevCamX;
-   private double prevCamY;
-   private double prevCamZ;
-   private double prevCamRotX;
-   private double prevCamRotY;
-   private int prevCloudX;
-   private int prevCloudY;
-   private int prevCloudZ;
+   private double lastCameraX = Double.MIN_VALUE;
+   private double lastCameraY = Double.MIN_VALUE;
+   private double lastCameraZ = Double.MIN_VALUE;
+   private int lastCameraChunkX = Integer.MIN_VALUE;
+   private int lastCameraChunkY = Integer.MIN_VALUE;
+   private int lastCameraChunkZ = Integer.MIN_VALUE;
+   private double prevCamX = Double.MIN_VALUE;
+   private double prevCamY = Double.MIN_VALUE;
+   private double prevCamZ = Double.MIN_VALUE;
+   private double prevCamRotX = Double.MIN_VALUE;
+   private double prevCamRotY = Double.MIN_VALUE;
+   private int prevCloudX = Integer.MIN_VALUE;
+   private int prevCloudY = Integer.MIN_VALUE;
+   private int prevCloudZ = Integer.MIN_VALUE;
    private Vec3 prevCloudColor;
    private CloudStatus prevCloudsType;
    private ChunkRenderDispatcher chunkRenderDispatcher;
-   private final VertexFormat format;
    private int lastViewDistance;
    private int renderedEntities;
    private int culledEntities;
+   private Frustum cullingFrustum;
    private boolean captureFrustum;
    @Nullable
    private Frustum capturedFrustum;
    private final Vector4f[] frustumPoints;
    private final Vector3d frustumPos;
@@ -201,40 +215,20 @@
    private int rainSoundTime;
    private final float[] rainSizeX;
    private final float[] rainSizeZ;
 
    public LevelRenderer(Minecraft var1, RenderBuffers var2) {
-      this.skyFormat = DefaultVertexFormat.POSITION;
-      this.generateClouds = true;
-      this.frameTimes = new RunningTrimmedMean(100);
-      this.destroyingBlocks = new Int2ObjectOpenHashMap();
-      this.destructionProgress = new Long2ObjectOpenHashMap();
-      this.playingRecords = Maps.newHashMap();
-      this.lastCameraX = Double.MIN_VALUE;
-      this.lastCameraY = Double.MIN_VALUE;
-      this.lastCameraZ = Double.MIN_VALUE;
-      this.lastCameraChunkX = Integer.MIN_VALUE;
-      this.lastCameraChunkY = Integer.MIN_VALUE;
-      this.lastCameraChunkZ = Integer.MIN_VALUE;
-      this.prevCamX = Double.MIN_VALUE;
-      this.prevCamY = Double.MIN_VALUE;
-      this.prevCamZ = Double.MIN_VALUE;
-      this.prevCamRotX = Double.MIN_VALUE;
-      this.prevCamRotY = Double.MIN_VALUE;
-      this.prevCloudX = Integer.MIN_VALUE;
-      this.prevCloudY = Integer.MIN_VALUE;
-      this.prevCloudZ = Integer.MIN_VALUE;
       this.prevCloudColor = Vec3.ZERO;
-      this.format = DefaultVertexFormat.BLOCK;
       this.lastViewDistance = -1;
       this.frustumPoints = new Vector4f[8];
       this.frustumPos = new Vector3d(0.0D, 0.0D, 0.0D);
       this.needsUpdate = true;
       this.rainSizeX = new float[1024];
       this.rainSizeZ = new float[1024];
       this.minecraft = var1;
       this.entityRenderDispatcher = var1.getEntityRenderDispatcher();
+      this.blockEntityRenderDispatcher = var1.getBlockEntityRenderDispatcher();
       this.renderBuffers = var2;
       this.textureManager = var1.getTextureManager();
 
       for(int var3 = 0; var3 < 32; ++var3) {
          for(int var4 = 0; var4 < 32; ++var4) {
@@ -259,26 +253,24 @@
          int var11 = Mth.floor(var3);
          int var12 = Mth.floor(var5);
          int var13 = Mth.floor(var7);
          Tesselator var14 = Tesselator.getInstance();
          BufferBuilder var15 = var14.getBuilder();
-         RenderSystem.enableAlphaTest();
          RenderSystem.disableCull();
-         RenderSystem.normal3f(0.0F, 1.0F, 0.0F);
          RenderSystem.enableBlend();
          RenderSystem.defaultBlendFunc();
-         RenderSystem.defaultAlphaFunc();
          RenderSystem.enableDepthTest();
          byte var16 = 5;
          if (Minecraft.useFancyGraphics()) {
             var16 = 10;
          }
 
          RenderSystem.depthMask(Minecraft.useShaderTransparency());
          byte var17 = -1;
          float var18 = (float)this.ticks + var2;
-         RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
+         RenderSystem.setShader(GameRenderer::getParticleShader);
+         RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
          BlockPos.MutableBlockPos var19 = new BlockPos.MutableBlockPos();
 
          for(int var20 = var13 - var16; var20 <= var13 + var16; ++var20) {
             for(int var21 = var11 - var16; var21 <= var11 + var16; ++var21) {
                int var22 = (var20 - var13 + 16) * 32 + var21 - var11 + 16;
@@ -314,12 +306,12 @@
                            if (var17 >= 0) {
                               var14.end();
                            }
 
                            var17 = 0;
-                           this.minecraft.getTextureManager().bind(RAIN_LOCATION);
-                           var15.begin(7, DefaultVertexFormat.PARTICLE);
+                           RenderSystem.setShaderTexture(0, RAIN_LOCATION);
+                           var15.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.PARTICLE);
                         }
 
                         int var34 = this.ticks + var21 * var21 * 3121 + var21 * 45238971 + var20 * var20 * 418711 + var20 * 13761 & 31;
                         var35 = -((float)var34 + var2) / 32.0F * (3.0F + var32.nextFloat());
                         double var36 = (double)((float)var21 + 0.5F) - var3;
@@ -337,12 +329,12 @@
                            if (var17 >= 0) {
                               var14.end();
                            }
 
                            var17 = 1;
-                           this.minecraft.getTextureManager().bind(SNOW_LOCATION);
-                           var15.begin(7, DefaultVertexFormat.PARTICLE);
+                           RenderSystem.setShaderTexture(0, SNOW_LOCATION);
+                           var15.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.PARTICLE);
                         }
 
                         float var49 = -((float)(this.ticks & 511) + var2) / 512.0F;
                         var35 = (float)(var32.nextDouble() + (double)var18 * 0.01D * (double)((float)var32.nextGaussian()));
                         float var50 = (float)(var32.nextDouble() + (double)(var18 * (float)var32.nextGaussian()) * 0.001D);
@@ -370,12 +362,10 @@
             var14.end();
          }
 
          RenderSystem.enableCull();
          RenderSystem.disableBlend();
-         RenderSystem.defaultAlphaFunc();
-         RenderSystem.disableAlphaTest();
          var1.turnOffLightLayer();
       }
    }
 
    public void tickRain(Camera var1) {
@@ -390,11 +380,11 @@
          for(int var8 = 0; var8 < var7; ++var8) {
             int var9 = var3.nextInt(21) - 10;
             int var10 = var3.nextInt(21) - 10;
             BlockPos var11 = var4.getHeightmapPos(Heightmap.Types.MOTION_BLOCKING, var5.offset(var9, 0, var10)).below();
             Biome var12 = var4.getBiome(var11);
-            if (var11.getY() > 0 && var11.getY() <= var5.getY() + 10 && var11.getY() >= var5.getY() - 10 && var12.getPrecipitation() == Biome.Precipitation.RAIN && var12.getTemperature(var11) >= 0.15F) {
+            if (var11.getY() > var4.getMinBuildHeight() && var11.getY() <= var5.getY() + 10 && var11.getY() >= var5.getY() - 10 && var12.getPrecipitation() == Biome.Precipitation.RAIN && var12.getTemperature(var11) >= 0.15F) {
                var6 = var11;
                if (this.minecraft.options.particles == ParticleStatus.MINIMAL) {
                   break;
                }
 
@@ -433,14 +423,10 @@
       }
 
    }
 
    public void onResourceManagerReload(ResourceManager var1) {
-      this.textureManager.bind(FORCEFIELD_LOCATION);
-      RenderSystem.texParameter(3553, 10242, 10497);
-      RenderSystem.texParameter(3553, 10243, 10497);
-      RenderSystem.bindTexture(0);
       this.initOutline();
       if (Minecraft.useShaderTransparency()) {
          this.initTransparency();
       }
 
@@ -540,78 +526,68 @@
       }
 
    }
 
    protected boolean shouldShowEntityOutlines() {
-      return this.entityTarget != null && this.entityEffect != null && this.minecraft.player != null;
+      return !this.minecraft.gameRenderer.isPanoramicMode() && this.entityTarget != null && this.entityEffect != null && this.minecraft.player != null;
    }
 
    private void createDarkSky() {
       Tesselator var1 = Tesselator.getInstance();
       BufferBuilder var2 = var1.getBuilder();
       if (this.darkBuffer != null) {
          this.darkBuffer.close();
       }
 
-      this.darkBuffer = new VertexBuffer(this.skyFormat);
-      this.drawSkyHemisphere(var2, -16.0F, true);
-      var2.end();
+      this.darkBuffer = new VertexBuffer();
+      buildSkyDisc(var2, -16.0F);
       this.darkBuffer.upload(var2);
    }
 
    private void createLightSky() {
       Tesselator var1 = Tesselator.getInstance();
       BufferBuilder var2 = var1.getBuilder();
       if (this.skyBuffer != null) {
          this.skyBuffer.close();
       }
 
-      this.skyBuffer = new VertexBuffer(this.skyFormat);
-      this.drawSkyHemisphere(var2, 16.0F, false);
-      var2.end();
+      this.skyBuffer = new VertexBuffer();
+      buildSkyDisc(var2, 16.0F);
       this.skyBuffer.upload(var2);
    }
 
-   private void drawSkyHemisphere(BufferBuilder var1, float var2, boolean var3) {
-      boolean var4 = true;
-      boolean var5 = true;
-      var1.begin(7, DefaultVertexFormat.POSITION);
+   private static void buildSkyDisc(BufferBuilder var0, float var1) {
+      float var2 = Math.signum(var1) * 512.0F;
+      float var3 = 512.0F;
+      RenderSystem.setShader(GameRenderer::getPositionShader);
+      var0.begin(VertexFormat.Mode.TRIANGLE_FAN, DefaultVertexFormat.POSITION);
+      var0.vertex(0.0D, (double)var1, 0.0D).endVertex();
 
-      for(int var6 = -384; var6 <= 384; var6 += 64) {
-         for(int var7 = -384; var7 <= 384; var7 += 64) {
-            float var8 = (float)var6;
-            float var9 = (float)(var6 + 64);
-            if (var3) {
-               var9 = (float)var6;
-               var8 = (float)(var6 + 64);
-            }
-
-            var1.vertex((double)var8, (double)var2, (double)var7).endVertex();
-            var1.vertex((double)var9, (double)var2, (double)var7).endVertex();
-            var1.vertex((double)var9, (double)var2, (double)(var7 + 64)).endVertex();
-            var1.vertex((double)var8, (double)var2, (double)(var7 + 64)).endVertex();
-         }
+      for(int var4 = -180; var4 <= 180; var4 += 45) {
+         var0.vertex((double)(var2 * Mth.cos((float)var4 * 0.017453292F)), (double)var1, (double)(512.0F * Mth.sin((float)var4 * 0.017453292F))).endVertex();
       }
 
+      var0.end();
    }
 
    private void createStars() {
       Tesselator var1 = Tesselator.getInstance();
       BufferBuilder var2 = var1.getBuilder();
+      RenderSystem.setShader(GameRenderer::getPositionShader);
       if (this.starBuffer != null) {
          this.starBuffer.close();
       }
 
-      this.starBuffer = new VertexBuffer(this.skyFormat);
+      this.starBuffer = new VertexBuffer();
       this.drawStars(var2);
       var2.end();
       this.starBuffer.upload(var2);
    }
 
    private void drawStars(BufferBuilder var1) {
       Random var2 = new Random(10842L);
-      var1.begin(7, DefaultVertexFormat.POSITION);
+      var1.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION);
 
       for(int var3 = 0; var3 < 1500; ++var3) {
          double var4 = (double)(var2.nextFloat() * 2.0F - 1.0F);
          double var6 = (double)(var2.nextFloat() * 2.0F - 1.0F);
          double var8 = (double)(var2.nextFloat() * 2.0F - 1.0F);
@@ -661,10 +637,11 @@
       this.lastCameraChunkY = Integer.MIN_VALUE;
       this.lastCameraChunkZ = Integer.MIN_VALUE;
       this.entityRenderDispatcher.setLevel(var1);
       this.level = var1;
       if (var1 != null) {
+         this.renderChunks.ensureCapacity(4356 * var1.getSectionsCount());
          this.allChanged();
       } else {
          this.chunksToCompile.clear();
          this.renderChunks.clear();
          if (this.viewArea != null) {
@@ -680,18 +657,22 @@
          this.globalBlockEntities.clear();
       }
 
    }
 
+   public void graphicsChanged() {
+      if (Minecraft.useShaderTransparency()) {
+         this.initTransparency();
+      } else {
+         this.deinitTransparency();
+      }
+
+   }
+
    public void allChanged() {
       if (this.level != null) {
-         if (Minecraft.useShaderTransparency()) {
-            this.initTransparency();
-         } else {
-            this.deinitTransparency();
-         }
-
+         this.graphicsChanged();
          this.level.clearTintCaches();
          if (this.chunkRenderDispatcher == null) {
             this.chunkRenderDispatcher = new ChunkRenderDispatcher(this.level, this, Util.backgroundExecutor(), this.minecraft.is64Bit(), this.renderBuffers.fixedBufferPack());
          } else {
             this.chunkRenderDispatcher.setLevel(this.level);
@@ -709,10 +690,11 @@
          synchronized(this.globalBlockEntities) {
             this.globalBlockEntities.clear();
          }
 
          this.viewArea = new ViewArea(this.chunkRenderDispatcher, this.level, this.minecraft.options.renderDistance, this);
+         this.renderInfoMap = new LevelRenderer.RenderInfoMap(this.viewArea.chunks.length);
          if (this.level != null) {
             Entity var1 = this.minecraft.getCameraEntity();
             if (var1 != null) {
                this.viewArea.repositionCamera(var1.getX(), var1.getZ());
             }
@@ -742,11 +724,23 @@
       int var1 = this.viewArea.chunks.length;
       int var2 = this.countRenderedChunks();
       return String.format("C: %d/%d %sD: %d, %s", var2, var1, this.minecraft.smartCull ? "(s) " : "", this.lastViewDistance, this.chunkRenderDispatcher == null ? "null" : this.chunkRenderDispatcher.getStats());
    }
 
-   protected int countRenderedChunks() {
+   public ChunkRenderDispatcher getChunkRenderDispatcher() {
+      return this.chunkRenderDispatcher;
+   }
+
+   public double getTotalChunks() {
+      return (double)this.viewArea.chunks.length;
+   }
+
+   public double getLastViewDistance() {
+      return (double)this.lastViewDistance;
+   }
+
+   public int countRenderedChunks() {
       int var1 = 0;
       ObjectListIterator var2 = this.renderChunks.iterator();
 
       while(var2.hasNext()) {
          LevelRenderer.RenderChunkInfo var3 = (LevelRenderer.RenderChunkInfo)var2.next();
@@ -767,147 +761,179 @@
       if (this.minecraft.options.renderDistance != this.lastViewDistance) {
          this.allChanged();
       }
 
       this.level.getProfiler().push("camera");
-      double var7 = this.minecraft.player.getX() - this.lastCameraX;
-      double var9 = this.minecraft.player.getY() - this.lastCameraY;
-      double var11 = this.minecraft.player.getZ() - this.lastCameraZ;
-      if (this.lastCameraChunkX != this.minecraft.player.xChunk || this.lastCameraChunkY != this.minecraft.player.yChunk || this.lastCameraChunkZ != this.minecraft.player.zChunk || var7 * var7 + var9 * var9 + var11 * var11 > 16.0D) {
-         this.lastCameraX = this.minecraft.player.getX();
-         this.lastCameraY = this.minecraft.player.getY();
-         this.lastCameraZ = this.minecraft.player.getZ();
-         this.lastCameraChunkX = this.minecraft.player.xChunk;
-         this.lastCameraChunkY = this.minecraft.player.yChunk;
-         this.lastCameraChunkZ = this.minecraft.player.zChunk;
-         this.viewArea.repositionCamera(this.minecraft.player.getX(), this.minecraft.player.getZ());
+      double var7 = this.minecraft.player.getX();
+      double var9 = this.minecraft.player.getY();
+      double var11 = this.minecraft.player.getZ();
+      double var13 = var7 - this.lastCameraX;
+      double var15 = var9 - this.lastCameraY;
+      double var17 = var11 - this.lastCameraZ;
+      int var19 = SectionPos.posToSectionCoord(var7);
+      int var20 = SectionPos.posToSectionCoord(var9);
+      int var21 = SectionPos.posToSectionCoord(var11);
+      if (this.lastCameraChunkX != var19 || this.lastCameraChunkY != var20 || this.lastCameraChunkZ != var21 || var13 * var13 + var15 * var15 + var17 * var17 > 16.0D) {
+         this.lastCameraX = var7;
+         this.lastCameraY = var9;
+         this.lastCameraZ = var11;
+         this.lastCameraChunkX = var19;
+         this.lastCameraChunkY = var20;
+         this.lastCameraChunkZ = var21;
+         this.viewArea.repositionCamera(var7, var11);
       }
 
       this.chunkRenderDispatcher.setCamera(var6);
       this.level.getProfiler().popPush("cull");
       this.minecraft.getProfiler().popPush("culling");
-      BlockPos var13 = var1.getBlockPosition();
-      ChunkRenderDispatcher.RenderChunk var14 = this.viewArea.getRenderChunkAt(var13);
-      boolean var15 = true;
-      BlockPos var16 = new BlockPos(Mth.floor(var6.x / 16.0D) * 16, Mth.floor(var6.y / 16.0D) * 16, Mth.floor(var6.z / 16.0D) * 16);
-      float var17 = var1.getXRot();
-      float var18 = var1.getYRot();
-      this.needsUpdate = this.needsUpdate || !this.chunksToCompile.isEmpty() || var6.x != this.prevCamX || var6.y != this.prevCamY || var6.z != this.prevCamZ || (double)var17 != this.prevCamRotX || (double)var18 != this.prevCamRotY;
+      BlockPos var22 = var1.getBlockPosition();
+      ChunkRenderDispatcher.RenderChunk var23 = this.viewArea.getRenderChunkAt(var22);
+      boolean var24 = true;
+      BlockPos var25 = new BlockPos(Mth.floor(var6.x / 16.0D) * 16, Mth.floor(var6.y / 16.0D) * 16, Mth.floor(var6.z / 16.0D) * 16);
+      float var26 = var1.getXRot();
+      float var27 = var1.getYRot();
+      this.needsUpdate = this.needsUpdate || !this.chunksToCompile.isEmpty() || var6.x != this.prevCamX || var6.y != this.prevCamY || var6.z != this.prevCamZ || (double)var26 != this.prevCamRotX || (double)var27 != this.prevCamRotY;
       this.prevCamX = var6.x;
       this.prevCamY = var6.y;
       this.prevCamZ = var6.z;
-      this.prevCamRotX = (double)var17;
-      this.prevCamRotY = (double)var18;
+      this.prevCamRotX = (double)var26;
+      this.prevCamRotY = (double)var27;
       this.minecraft.getProfiler().popPush("update");
-      LevelRenderer.RenderChunkInfo var32;
-      ChunkRenderDispatcher.RenderChunk var33;
       if (!var3 && this.needsUpdate) {
          this.needsUpdate = false;
-         this.renderChunks.clear();
-         ArrayDeque var19 = Queues.newArrayDeque();
-         Entity.setViewScale(Mth.clamp((double)this.minecraft.options.renderDistance / 8.0D, 1.0D, 2.5D) * (double)this.minecraft.options.entityDistanceScaling);
-         boolean var20 = this.minecraft.smartCull;
-         int var25;
-         int var26;
-         if (var14 != null) {
-            if (var5 && this.level.getBlockState(var13).isSolidRender(this.level, var13)) {
-               var20 = false;
-            }
+         this.updateRenderChunks(var2, var4, var5, var6, var22, var23, 16, var25);
+      }
 
-            var14.setFrame(var4);
-            var19.add(new LevelRenderer.RenderChunkInfo(var14, (Direction)null, 0));
-         } else {
-            int var21 = var13.getY() > 0 ? 248 : 8;
-            int var22 = Mth.floor(var6.x / 16.0D) * 16;
-            int var23 = Mth.floor(var6.z / 16.0D) * 16;
-            ArrayList var24 = Lists.newArrayList();
-            var25 = -this.lastViewDistance;
+      this.minecraft.getProfiler().popPush("rebuildNear");
+      Set var28 = this.chunksToCompile;
+      this.chunksToCompile = Sets.newLinkedHashSet();
+      ObjectListIterator var29 = this.renderChunks.iterator();
 
-            while(true) {
-               if (var25 > this.lastViewDistance) {
-                  var24.sort(Comparator.comparingDouble((var1x) -> {
-                     return var13.distSqr(var1x.chunk.getOrigin().offset(8, 8, 8));
-                  }));
-                  var19.addAll(var24);
-                  break;
+      while(true) {
+         while(true) {
+            ChunkRenderDispatcher.RenderChunk var31;
+            do {
+               if (!var29.hasNext()) {
+                  this.chunksToCompile.addAll(var28);
+                  this.minecraft.getProfiler().pop();
+                  return;
                }
 
-               for(var26 = -this.lastViewDistance; var26 <= this.lastViewDistance; ++var26) {
-                  ChunkRenderDispatcher.RenderChunk var27 = this.viewArea.getRenderChunkAt(new BlockPos(var22 + (var25 << 4) + 8, var21, var23 + (var26 << 4) + 8));
-                  if (var27 != null && var2.isVisible(var27.bb)) {
-                     var27.setFrame(var4);
-                     var24.add(new LevelRenderer.RenderChunkInfo(var27, (Direction)null, 0));
-                  }
-               }
+               LevelRenderer.RenderChunkInfo var30 = (LevelRenderer.RenderChunkInfo)var29.next();
+               var31 = var30.chunk;
+            } while(!var31.isDirty() && !var28.contains(var31));
 
-               ++var25;
+            this.needsUpdate = true;
+            BlockPos var32 = var31.getOrigin().offset(8, 8, 8);
+            boolean var33 = var32.distSqr(var22) < 768.0D;
+            if (!var31.isDirtyFromPlayer() && !var33) {
+               this.chunksToCompile.add(var31);
+            } else {
+               this.minecraft.getProfiler().push("build near");
+               this.chunkRenderDispatcher.rebuildChunkSync(var31);
+               var31.setNotDirty();
+               this.minecraft.getProfiler().pop();
             }
          }
+      }
+   }
 
-         this.minecraft.getProfiler().push("iteration");
+   private void updateRenderChunks(Frustum var1, int var2, boolean var3, Vec3 var4, BlockPos var5, ChunkRenderDispatcher.RenderChunk var6, int var7, BlockPos var8) {
+      this.renderChunks.clear();
+      ArrayDeque var9 = Queues.newArrayDeque();
+      Entity.setViewScale(Mth.clamp((double)this.minecraft.options.renderDistance / 8.0D, 1.0D, 2.5D) * (double)this.minecraft.options.entityDistanceScaling);
+      boolean var10 = this.minecraft.smartCull;
+      int var11;
+      int var15;
+      int var16;
+      if (var6 == null) {
+         var11 = var5.getY() > this.level.getMinBuildHeight() ? this.level.getMaxBuildHeight() - 8 : this.level.getMinBuildHeight() + 8;
+         int var12 = Mth.floor(var4.x / (double)var7) * var7;
+         int var13 = Mth.floor(var4.z / (double)var7) * var7;
+         ArrayList var14 = Lists.newArrayList();
 
-         while(!var19.isEmpty()) {
-            var32 = (LevelRenderer.RenderChunkInfo)var19.poll();
-            var33 = var32.chunk;
-            Direction var34 = var32.sourceDirection;
-            this.renderChunks.add(var32);
-            Direction[] var36 = DIRECTIONS;
-            var25 = var36.length;
-
-            for(var26 = 0; var26 < var25; ++var26) {
-               Direction var38 = var36[var26];
-               ChunkRenderDispatcher.RenderChunk var28 = this.getRelativeFrom(var16, var33, var38);
-               if ((!var20 || !var32.hasDirection(var38.getOpposite())) && (!var20 || var34 == null || var33.getCompiledChunk().facesCanSeeEachother(var34.getOpposite(), var38)) && var28 != null && var28.hasAllNeighbors() && var28.setFrame(var4) && var2.isVisible(var28.bb)) {
-                  LevelRenderer.RenderChunkInfo var29 = new LevelRenderer.RenderChunkInfo(var28, var38, var32.step + 1);
-                  var29.setDirections(var32.directions, var38);
-                  var19.add(var29);
+         for(var15 = -this.lastViewDistance; var15 <= this.lastViewDistance; ++var15) {
+            for(var16 = -this.lastViewDistance; var16 <= this.lastViewDistance; ++var16) {
+               ChunkRenderDispatcher.RenderChunk var17 = this.viewArea.getRenderChunkAt(new BlockPos(var12 + SectionPos.sectionToBlockCoord(var15, 8), var11, var13 + SectionPos.sectionToBlockCoord(var16, 8)));
+               if (var17 != null && var1.isVisible(var17.bb)) {
+                  var17.setFrame(var2);
+                  var14.add(new LevelRenderer.RenderChunkInfo(var17, (Direction)null, 0));
                }
             }
          }
 
-         this.minecraft.getProfiler().pop();
+         var14.sort(Comparator.comparingDouble((var1x) -> {
+            return var5.distSqr(var1x.chunk.getOrigin().offset(8, 8, 8));
+         }));
+         var9.addAll(var14);
+      } else {
+         if (var3 && this.level.getBlockState(var5).isSolidRender(this.level, var5)) {
+            var10 = false;
+         }
+
+         var6.setFrame(var2);
+         var9.add(new LevelRenderer.RenderChunkInfo(var6, (Direction)null, 0));
       }
 
-      this.minecraft.getProfiler().popPush("rebuildNear");
-      Set var30 = this.chunksToCompile;
-      this.chunksToCompile = Sets.newLinkedHashSet();
-      ObjectListIterator var31 = this.renderChunks.iterator();
+      this.minecraft.getProfiler().push("iteration");
+      var11 = this.minecraft.options.renderDistance;
+      this.renderInfoMap.clear();
 
-      while(true) {
-         while(true) {
-            do {
-               if (!var31.hasNext()) {
-                  this.chunksToCompile.addAll(var30);
-                  this.minecraft.getProfiler().pop();
-                  return;
-               }
+      while(!var9.isEmpty()) {
+         LevelRenderer.RenderChunkInfo var22 = (LevelRenderer.RenderChunkInfo)var9.poll();
+         ChunkRenderDispatcher.RenderChunk var23 = var22.chunk;
+         this.renderChunks.add(var22);
+         Direction[] var24 = DIRECTIONS;
+         var15 = var24.length;
 
-               var32 = (LevelRenderer.RenderChunkInfo)var31.next();
-               var33 = var32.chunk;
-            } while(!var33.isDirty() && !var30.contains(var33));
+         for(var16 = 0; var16 < var15; ++var16) {
+            Direction var25 = var24[var16];
+            ChunkRenderDispatcher.RenderChunk var18 = this.getRelativeFrom(var8, var23, var25);
+            if (!var10 || !var22.hasDirection(var25.getOpposite())) {
+               if (var10 && var22.hasSourceDirections()) {
+                  ChunkRenderDispatcher.CompiledChunk var19 = var23.getCompiledChunk();
+                  boolean var20 = false;
 
-            this.needsUpdate = true;
-            BlockPos var35 = var33.getOrigin().offset(8, 8, 8);
-            boolean var37 = var35.distSqr(var13) < 768.0D;
-            if (!var33.isDirtyFromPlayer() && !var37) {
-               this.chunksToCompile.add(var33);
-            } else {
-               this.minecraft.getProfiler().push("build near");
-               this.chunkRenderDispatcher.rebuildChunkSync(var33);
-               var33.setNotDirty();
-               this.minecraft.getProfiler().pop();
+                  for(int var21 = 0; var21 < DIRECTIONS.length; ++var21) {
+                     if (var22.hasSourceDirection(var21) && var19.facesCanSeeEachother(DIRECTIONS[var21].getOpposite(), var25)) {
+                        var20 = true;
+                        break;
+                     }
+                  }
+
+                  if (!var20) {
+                     continue;
+                  }
+               }
+
+               if (var18 != null && var18.hasAllNeighbors()) {
+                  LevelRenderer.RenderChunkInfo var26;
+                  if (!var18.setFrame(var2)) {
+                     var26 = this.renderInfoMap.get(var18);
+                     if (var26 != null) {
+                        var26.addSourceDirection(var25);
+                     }
+                  } else if (var1.isVisible(var18.bb)) {
+                     var26 = new LevelRenderer.RenderChunkInfo(var18, var25, var22.step + 1);
+                     var26.setDirections(var22.directions, var25);
+                     var9.add(var26);
+                     this.renderInfoMap.put(var18, var26);
+                  }
+               }
             }
          }
       }
+
+      this.minecraft.getProfiler().pop();
    }
 
    @Nullable
    private ChunkRenderDispatcher.RenderChunk getRelativeFrom(BlockPos var1, ChunkRenderDispatcher.RenderChunk var2, Direction var3) {
       BlockPos var4 = var2.getRelativeOrigin(var3);
       if (Mth.abs(var1.getX() - var4.getX()) > this.lastViewDistance * 16) {
          return null;
-      } else if (var4.getY() >= 0 && var4.getY() < 256) {
+      } else if (var4.getY() >= this.level.getMinBuildHeight() && var4.getY() < this.level.getMaxBuildHeight()) {
          return Mth.abs(var1.getZ() - var4.getZ()) > this.lastViewDistance * 16 ? null : this.viewArea.getRenderChunkAt(var4);
       } else {
          return null;
       }
    }
@@ -934,12 +960,22 @@
          this.frustumPoints[var11].perspectiveDivide();
       }
 
    }
 
+   public void prepareCullFrustum(PoseStack var1, Vec3 var2, Matrix4f var3) {
+      Matrix4f var4 = var1.last().pose();
+      double var5 = var2.x();
+      double var7 = var2.y();
+      double var9 = var2.z();
+      this.cullingFrustum = new Frustum(var4, var3);
+      this.cullingFrustum.prepare(var5, var7, var9);
+   }
+
    public void renderLevel(PoseStack var1, float var2, long var3, boolean var5, Camera var6, GameRenderer var7, LightTexture var8, Matrix4f var9) {
-      BlockEntityRenderDispatcher.instance.prepare(this.level, this.minecraft.getTextureManager(), this.minecraft.font, var6, this.minecraft.hitResult);
+      RenderSystem.setShaderGameTime(this.level.getGameTime(), var2);
+      this.blockEntityRenderDispatcher.prepare(this.level, var6, this.minecraft.hitResult);
       this.entityRenderDispatcher.prepare(this.level, var6, this.minecraft.crosshairPickEntity);
       ProfilerFiller var10 = this.level.getProfiler();
       var10.popPush("light_updates");
       this.minecraft.level.getChunkSource().getLightEngine().runUpdates(Integer.MAX_VALUE, true, true);
       Vec3 var11 = var6.getPosition();
@@ -952,29 +988,30 @@
       Frustum var20;
       if (var19) {
          var20 = this.capturedFrustum;
          var20.prepare(this.frustumPos.x, this.frustumPos.y, this.frustumPos.z);
       } else {
-         var20 = new Frustum(var18, var9);
-         var20.prepare(var12, var14, var16);
+         var20 = this.cullingFrustum;
       }
 
       this.minecraft.getProfiler().popPush("captureFrustum");
       if (this.captureFrustum) {
          this.captureFrustum(var18, var9, var11.x, var11.y, var11.z, var19 ? new Frustum(var18, var9) : var20);
          this.captureFrustum = false;
       }
 
       var10.popPush("clear");
       FogRenderer.setupColor(var6, var2, this.minecraft.level, this.minecraft.options.renderDistance, var7.getDarkenWorldAmount(var2));
+      FogRenderer.levelFogColor();
       RenderSystem.clear(16640, Minecraft.ON_OSX);
       float var21 = var7.getRenderDistance();
       boolean var22 = this.minecraft.level.effects().isFoggyAt(Mth.floor(var12), Mth.floor(var14)) || this.minecraft.gui.getBossOverlay().shouldCreateWorldFog();
       if (this.minecraft.options.renderDistance >= 4) {
          FogRenderer.setupFog(var6, FogRenderer.FogMode.FOG_SKY, var21, var22);
          var10.popPush("sky");
-         this.renderSky(var1, var2);
+         RenderSystem.setShader(GameRenderer::getPositionShader);
+         this.renderSky(var1, var9, var2);
       }
 
       var10.popPush("fog");
       FogRenderer.setupFog(var6, FogRenderer.FogMode.FOG_TERRAIN, Math.max(var21 - 16.0F, 32.0F), var22);
       var10.popPush("terrain_setup");
@@ -994,13 +1031,13 @@
       long var31 = this.frameTimes.registerValueAndGetMean(var29);
       long var33 = var31 * 3L / 2L;
       long var35 = Mth.clamp(var33, var27, 33333333L);
       this.compileChunksUntil(var3 + var35);
       var10.popPush("terrain");
-      this.renderChunkLayer(RenderType.solid(), var1, var12, var14, var16);
-      this.renderChunkLayer(RenderType.cutoutMipped(), var1, var12, var14, var16);
-      this.renderChunkLayer(RenderType.cutout(), var1, var12, var14, var16);
+      this.renderChunkLayer(RenderType.solid(), var1, var12, var14, var16, var9);
+      this.renderChunkLayer(RenderType.cutoutMipped(), var1, var12, var14, var16, var9);
+      this.renderChunkLayer(RenderType.cutout(), var1, var12, var14, var16, var9);
       if (this.level.effects().constantAmbientLight()) {
          Lighting.setupNetherLevel(var1.last().pose());
       } else {
          Lighting.setupLevel(var1.last().pose());
       }
@@ -1041,32 +1078,34 @@
                      var38.endBatch(RenderType.entitySmoothCutout(TextureAtlas.LOCATION_BLOCKS));
                      var10.popPush("blockentities");
                      ObjectListIterator var53 = this.renderChunks.iterator();
 
                      while(true) {
-                        List var60;
+                        List var61;
                         do {
                            if (!var53.hasNext()) {
                               synchronized(this.globalBlockEntities) {
                                  Iterator var57 = this.globalBlockEntities.iterator();
 
                                  while(true) {
                                     if (!var57.hasNext()) {
                                        break;
                                     }
 
-                                    BlockEntity var62 = (BlockEntity)var57.next();
-                                    BlockPos var63 = var62.getBlockPos();
+                                    BlockEntity var63 = (BlockEntity)var57.next();
+                                    BlockPos var64 = var63.getBlockPos();
                                     var1.pushPose();
-                                    var1.translate((double)var63.getX() - var12, (double)var63.getY() - var14, (double)var63.getZ() - var16);
-                                    BlockEntityRenderDispatcher.instance.render(var62, var2, var1, var38);
+                                    var1.translate((double)var64.getX() - var12, (double)var64.getY() - var14, (double)var64.getZ() - var16);
+                                    this.blockEntityRenderDispatcher.render(var63, var2, var1, var38);
                                     var1.popPose();
                                  }
                               }
 
                               this.checkPoseStack(var1);
                               var38.endBatch(RenderType.solid());
+                              var38.endBatch(RenderType.endPortal());
+                              var38.endBatch(RenderType.endGateway());
                               var38.endBatch(Sheets.solidBlockSheet());
                               var38.endBatch(Sheets.cutoutBlockSheet());
                               var38.endBatch(Sheets.bedSheet());
                               var38.endBatch(Sheets.shulkerBoxSheet());
                               var38.endBatch(Sheets.signSheet());
@@ -1080,44 +1119,47 @@
                               var10.popPush("destroyProgress");
                               ObjectIterator var54 = this.destructionProgress.long2ObjectEntrySet().iterator();
 
                               while(var54.hasNext()) {
                                  Entry var58 = (Entry)var54.next();
-                                 BlockPos var64 = BlockPos.of(var58.getLongKey());
-                                 double var65 = (double)var64.getX() - var12;
-                                 double var70 = (double)var64.getY() - var14;
-                                 double var73 = (double)var64.getZ() - var16;
-                                 if (var65 * var65 + var70 * var70 + var73 * var73 <= 1024.0D) {
-                                    SortedSet var74 = (SortedSet)var58.getValue();
-                                    if (var74 != null && !var74.isEmpty()) {
-                                       int var75 = ((BlockDestructionProgress)var74.last()).getProgress();
+                                 BlockPos var65 = BlockPos.of(var58.getLongKey());
+                                 double var66 = (double)var65.getX() - var12;
+                                 double var71 = (double)var65.getY() - var14;
+                                 double var74 = (double)var65.getZ() - var16;
+                                 if (var66 * var66 + var71 * var71 + var74 * var74 <= 1024.0D) {
+                                    SortedSet var75 = (SortedSet)var58.getValue();
+                                    if (var75 != null && !var75.isEmpty()) {
+                                       int var76 = ((BlockDestructionProgress)var75.last()).getProgress();
                                        var1.pushPose();
-                                       var1.translate((double)var64.getX() - var12, (double)var64.getY() - var14, (double)var64.getZ() - var16);
+                                       var1.translate((double)var65.getX() - var12, (double)var65.getY() - var14, (double)var65.getZ() - var16);
                                        PoseStack.Pose var50 = var1.last();
-                                       SheetedDecalTextureGenerator var51 = new SheetedDecalTextureGenerator(this.renderBuffers.crumblingBufferSource().getBuffer((RenderType)ModelBakery.DESTROY_TYPES.get(var75)), var50.pose(), var50.normal());
-                                       this.minecraft.getBlockRenderer().renderBreakingTexture(this.level.getBlockState(var64), var64, this.level, var1, var51);
+                                       SheetedDecalTextureGenerator var51 = new SheetedDecalTextureGenerator(this.renderBuffers.crumblingBufferSource().getBuffer((RenderType)ModelBakery.DESTROY_TYPES.get(var76)), var50.pose(), var50.normal());
+                                       this.minecraft.getBlockRenderer().renderBreakingTexture(this.level.getBlockState(var65), var65, this.level, var1, var51);
                                        var1.popPose();
                                     }
                                  }
                               }
 
                               this.checkPoseStack(var1);
                               HitResult var55 = this.minecraft.hitResult;
                               if (var5 && var55 != null && var55.getType() == HitResult.Type.BLOCK) {
                                  var10.popPush("outline");
                                  BlockPos var59 = ((BlockHitResult)var55).getBlockPos();
-                                 BlockState var66 = this.level.getBlockState(var59);
-                                 if (!var66.isAir() && this.level.getWorldBorder().isWithinBounds(var59)) {
-                                    VertexConsumer var68 = var38.getBuffer(RenderType.lines());
-                                    this.renderHitOutline(var1, var68, var6.getEntity(), var12, var14, var16, var59, var66);
+                                 BlockState var67 = this.level.getBlockState(var59);
+                                 if (!var67.isAir() && this.level.getWorldBorder().isWithinBounds(var59)) {
+                                    VertexConsumer var69 = var38.getBuffer(RenderType.lines());
+                                    this.renderHitOutline(var1, var69, var6.getEntity(), var12, var14, var16, var59, var67);
                                  }
                               }
 
-                              RenderSystem.pushMatrix();
-                              RenderSystem.multMatrix(var1.last().pose());
+                              PoseStack var60 = RenderSystem.getModelViewStack();
+                              var60.pushPose();
+                              var60.mulPoseMatrix(var1.last().pose());
+                              RenderSystem.applyModelViewMatrix();
                               this.minecraft.debugRenderer.render(var1, var38, var12, var14, var16);
-                              RenderSystem.popMatrix();
+                              var60.popPose();
+                              RenderSystem.applyModelViewMatrix();
                               var38.endBatch(Sheets.translucentCullBlockSheet());
                               var38.endBatch(Sheets.bannerSheet());
                               var38.endBatch(Sheets.shieldSheet());
                               var38.endBatch(RenderType.armorGlint());
                               var38.endBatch(RenderType.armorEntityGlint());
@@ -1132,96 +1174,102 @@
                                  var38.endBatch(RenderType.lines());
                                  var38.endBatch();
                                  this.translucentTarget.clear(Minecraft.ON_OSX);
                                  this.translucentTarget.copyDepthFrom(this.minecraft.getMainRenderTarget());
                                  var10.popPush("translucent");
-                                 this.renderChunkLayer(RenderType.translucent(), var1, var12, var14, var16);
+                                 this.renderChunkLayer(RenderType.translucent(), var1, var12, var14, var16, var9);
                                  var10.popPush("string");
-                                 this.renderChunkLayer(RenderType.tripwire(), var1, var12, var14, var16);
+                                 this.renderChunkLayer(RenderType.tripwire(), var1, var12, var14, var16, var9);
                                  this.particlesTarget.clear(Minecraft.ON_OSX);
                                  this.particlesTarget.copyDepthFrom(this.minecraft.getMainRenderTarget());
                                  RenderStateShard.PARTICLES_TARGET.setupRenderState();
                                  var10.popPush("particles");
                                  this.minecraft.particleEngine.render(var1, var38, var8, var6, var2);
                                  RenderStateShard.PARTICLES_TARGET.clearRenderState();
                               } else {
                                  var10.popPush("translucent");
-                                 this.renderChunkLayer(RenderType.translucent(), var1, var12, var14, var16);
+                                 if (this.translucentTarget != null) {
+                                    this.translucentTarget.clear(Minecraft.ON_OSX);
+                                 }
+
+                                 this.renderChunkLayer(RenderType.translucent(), var1, var12, var14, var16, var9);
                                  var38.endBatch(RenderType.lines());
                                  var38.endBatch();
                                  var10.popPush("string");
-                                 this.renderChunkLayer(RenderType.tripwire(), var1, var12, var14, var16);
+                                 this.renderChunkLayer(RenderType.tripwire(), var1, var12, var14, var16, var9);
                                  var10.popPush("particles");
                                  this.minecraft.particleEngine.render(var1, var38, var8, var6, var2);
                               }
 
-                              RenderSystem.pushMatrix();
-                              RenderSystem.multMatrix(var1.last().pose());
+                              var60.pushPose();
+                              var60.mulPoseMatrix(var1.last().pose());
+                              RenderSystem.applyModelViewMatrix();
                               if (this.minecraft.options.getCloudsType() != CloudStatus.OFF) {
                                  if (this.transparencyChain != null) {
                                     this.cloudsTarget.clear(Minecraft.ON_OSX);
                                     RenderStateShard.CLOUDS_TARGET.setupRenderState();
                                     var10.popPush("clouds");
-                                    this.renderClouds(var1, var2, var12, var14, var16);
+                                    this.renderClouds(var1, var9, var2, var12, var14, var16);
                                     RenderStateShard.CLOUDS_TARGET.clearRenderState();
                                  } else {
                                     var10.popPush("clouds");
-                                    this.renderClouds(var1, var2, var12, var14, var16);
+                                    RenderSystem.setShader(GameRenderer::getPositionTexColorNormalShader);
+                                    this.renderClouds(var1, var9, var2, var12, var14, var16);
                                  }
                               }
 
                               if (this.transparencyChain != null) {
                                  RenderStateShard.WEATHER_TARGET.setupRenderState();
                                  var10.popPush("weather");
                                  this.renderSnowAndRain(var8, var2, var12, var14, var16);
-                                 this.renderWorldBounds(var6);
+                                 this.renderWorldBorder(var6);
                                  RenderStateShard.WEATHER_TARGET.clearRenderState();
                                  this.transparencyChain.process(var2);
                                  this.minecraft.getMainRenderTarget().bindWrite(false);
                               } else {
                                  RenderSystem.depthMask(false);
                                  var10.popPush("weather");
                                  this.renderSnowAndRain(var8, var2, var12, var14, var16);
-                                 this.renderWorldBounds(var6);
+                                 this.renderWorldBorder(var6);
                                  RenderSystem.depthMask(true);
                               }
 
                               this.renderDebug(var6);
-                              RenderSystem.shadeModel(7424);
                               RenderSystem.depthMask(true);
                               RenderSystem.disableBlend();
-                              RenderSystem.popMatrix();
+                              var60.popPose();
+                              RenderSystem.applyModelViewMatrix();
                               FogRenderer.setupNoFog();
                               return;
                            }
 
                            LevelRenderer.RenderChunkInfo var56 = (LevelRenderer.RenderChunkInfo)var53.next();
-                           var60 = var56.chunk.getCompiledChunk().getRenderableBlockEntities();
-                        } while(var60.isEmpty());
+                           var61 = var56.chunk.getCompiledChunk().getRenderableBlockEntities();
+                        } while(var61.isEmpty());
 
-                        Iterator var61 = var60.iterator();
+                        Iterator var62 = var61.iterator();
 
-                        while(var61.hasNext()) {
-                           BlockEntity var67 = (BlockEntity)var61.next();
-                           BlockPos var69 = var67.getBlockPos();
-                           Object var71 = var38;
+                        while(var62.hasNext()) {
+                           BlockEntity var68 = (BlockEntity)var62.next();
+                           BlockPos var70 = var68.getBlockPos();
+                           Object var72 = var38;
                            var1.pushPose();
-                           var1.translate((double)var69.getX() - var12, (double)var69.getY() - var14, (double)var69.getZ() - var16);
-                           SortedSet var72 = (SortedSet)this.destructionProgress.get(var69.asLong());
-                           if (var72 != null && !var72.isEmpty()) {
-                              var47 = ((BlockDestructionProgress)var72.last()).getProgress();
+                           var1.translate((double)var70.getX() - var12, (double)var70.getY() - var14, (double)var70.getZ() - var16);
+                           SortedSet var73 = (SortedSet)this.destructionProgress.get(var70.asLong());
+                           if (var73 != null && !var73.isEmpty()) {
+                              var47 = ((BlockDestructionProgress)var73.last()).getProgress();
                               if (var47 >= 0) {
                                  PoseStack.Pose var48 = var1.last();
                                  SheetedDecalTextureGenerator var49 = new SheetedDecalTextureGenerator(this.renderBuffers.crumblingBufferSource().getBuffer((RenderType)ModelBakery.DESTROY_TYPES.get(var47)), var48.pose(), var48.normal());
-                                 var71 = (var2x) -> {
+                                 var72 = (var2x) -> {
                                     VertexConsumer var3 = var38.getBuffer(var2x);
                                     return var2x.affectsCrumbling() ? VertexMultiConsumer.create(var49, var3) : var3;
                                  };
                               }
                            }
 
-                           BlockEntityRenderDispatcher.instance.render(var67, var2, var1, (MultiBufferSource)var71);
+                           this.blockEntityRenderDispatcher.render(var68, var2, var1, (MultiBufferSource)var72);
                            var1.popPose();
                         }
                      }
                   }
 
@@ -1268,28 +1316,29 @@
       double var15 = Mth.lerp((double)var8, var1.zOld, var1.getZ());
       float var17 = Mth.lerp(var8, var1.yRotO, var1.yRot);
       this.entityRenderDispatcher.render(var1, var11 - var2, var13 - var4, var15 - var6, var17, var8, var9, var10, this.entityRenderDispatcher.getPackedLightCoords(var1, var8));
    }
 
-   private void renderChunkLayer(RenderType var1, PoseStack var2, double var3, double var5, double var7) {
+   private void renderChunkLayer(RenderType var1, PoseStack var2, double var3, double var5, double var7, Matrix4f var9) {
+      RenderSystem.assertThread(RenderSystem::isOnRenderThread);
       var1.setupRenderState();
       if (var1 == RenderType.translucent()) {
          this.minecraft.getProfiler().push("translucent_sort");
-         double var9 = var3 - this.xTransparentOld;
-         double var11 = var5 - this.yTransparentOld;
-         double var13 = var7 - this.zTransparentOld;
-         if (var9 * var9 + var11 * var11 + var13 * var13 > 1.0D) {
+         double var10 = var3 - this.xTransparentOld;
+         double var12 = var5 - this.yTransparentOld;
+         double var14 = var7 - this.zTransparentOld;
+         if (var10 * var10 + var12 * var12 + var14 * var14 > 1.0D) {
             this.xTransparentOld = var3;
             this.yTransparentOld = var5;
             this.zTransparentOld = var7;
-            int var15 = 0;
-            ObjectListIterator var16 = this.renderChunks.iterator();
+            int var16 = 0;
+            ObjectListIterator var17 = this.renderChunks.iterator();
 
-            while(var16.hasNext()) {
-               LevelRenderer.RenderChunkInfo var17 = (LevelRenderer.RenderChunkInfo)var16.next();
-               if (var15 < 15 && var17.chunk.resortTransparency(var1, this.chunkRenderDispatcher)) {
-                  ++var15;
+            while(var17.hasNext()) {
+               LevelRenderer.RenderChunkInfo var18 = (LevelRenderer.RenderChunkInfo)var17.next();
+               if (var16 < 15 && var18.chunk.resortTransparency(var1, this.chunkRenderDispatcher)) {
+                  ++var16;
                }
             }
          }
 
          this.minecraft.getProfiler().pop();
@@ -1297,139 +1346,208 @@
 
       this.minecraft.getProfiler().push("filterempty");
       this.minecraft.getProfiler().popPush(() -> {
          return "render_" + var1;
       });
-      boolean var18 = var1 != RenderType.translucent();
-      ObjectListIterator var10 = this.renderChunks.listIterator(var18 ? 0 : this.renderChunks.size());
+      boolean var20 = var1 != RenderType.translucent();
+      ObjectListIterator var11 = this.renderChunks.listIterator(var20 ? 0 : this.renderChunks.size());
+      VertexFormat var21 = var1.format();
+      ShaderInstance var13 = RenderSystem.getShader();
+      BufferUploader.reset();
 
+      for(int var22 = 0; var22 < 12; ++var22) {
+         int var15 = RenderSystem.getShaderTexture(var22);
+         var13.setSampler("Sampler" + var22, var15);
+      }
+
+      if (var13.MODEL_VIEW_MATRIX != null) {
+         var13.MODEL_VIEW_MATRIX.set(var2.last().pose());
+      }
+
+      if (var13.PROJECTION_MATRIX != null) {
+         var13.PROJECTION_MATRIX.set(var9);
+      }
+
+      if (var13.COLOR_MODULATOR != null) {
+         var13.COLOR_MODULATOR.set(RenderSystem.getShaderColor());
+      }
+
+      if (var13.FOG_START != null) {
+         var13.FOG_START.set(RenderSystem.getShaderFogStart());
+      }
+
+      if (var13.FOG_END != null) {
+         var13.FOG_END.set(RenderSystem.getShaderFogEnd());
+      }
+
+      if (var13.FOG_COLOR != null) {
+         var13.FOG_COLOR.set(RenderSystem.getShaderFogColor());
+      }
+
+      if (var13.TEXTURE_MATRIX != null) {
+         var13.TEXTURE_MATRIX.set(RenderSystem.getTextureMatrix());
+      }
+
+      if (var13.GAME_TIME != null) {
+         var13.GAME_TIME.set(RenderSystem.getShaderGameTime());
+      }
+
+      RenderSystem.setupShaderLights(var13);
+      var13.apply();
+      Uniform var23 = var13.CHUNK_OFFSET;
+      boolean var24 = false;
+
       while(true) {
-         if (var18) {
-            if (!var10.hasNext()) {
+         if (var20) {
+            if (!var11.hasNext()) {
                break;
             }
-         } else if (!var10.hasPrevious()) {
+         } else if (!var11.hasPrevious()) {
             break;
          }
 
-         LevelRenderer.RenderChunkInfo var19 = var18 ? (LevelRenderer.RenderChunkInfo)var10.next() : (LevelRenderer.RenderChunkInfo)var10.previous();
-         ChunkRenderDispatcher.RenderChunk var12 = var19.chunk;
-         if (!var12.getCompiledChunk().isEmpty(var1)) {
-            VertexBuffer var20 = var12.getBuffer(var1);
-            var2.pushPose();
-            BlockPos var14 = var12.getOrigin();
-            var2.translate((double)var14.getX() - var3, (double)var14.getY() - var5, (double)var14.getZ() - var7);
-            var20.bind();
-            this.format.setupBufferState(0L);
-            var20.draw(var2.last().pose(), 7);
-            var2.popPose();
+         LevelRenderer.RenderChunkInfo var25 = var20 ? (LevelRenderer.RenderChunkInfo)var11.next() : (LevelRenderer.RenderChunkInfo)var11.previous();
+         ChunkRenderDispatcher.RenderChunk var26 = var25.chunk;
+         if (!var26.getCompiledChunk().isEmpty(var1)) {
+            VertexBuffer var27 = var26.getBuffer(var1);
+            BlockPos var19 = var26.getOrigin();
+            if (var23 != null) {
+               var23.set((float)((double)var19.getX() - var3), (float)((double)var19.getY() - var5), (float)((double)var19.getZ() - var7));
+               var23.upload();
+            }
+
+            var27.drawChunkLayer();
+            var24 = true;
          }
       }
 
+      if (var23 != null) {
+         var23.set(Vector3f.ZERO);
+      }
+
+      var13.clear();
+      if (var24) {
+         var21.clearBufferState();
+      }
+
       VertexBuffer.unbind();
-      RenderSystem.clearCurrentColor();
-      this.format.clearBufferState();
+      VertexBuffer.unbindVertexArray();
       this.minecraft.getProfiler().pop();
       var1.clearRenderState();
    }
 
    private void renderDebug(Camera var1) {
       Tesselator var2 = Tesselator.getInstance();
       BufferBuilder var3 = var2.getBuilder();
+      RenderSystem.setShader(GameRenderer::getPositionColorShader);
       if (this.minecraft.chunkPath || this.minecraft.chunkVisibility) {
          double var4 = var1.getPosition().x();
          double var6 = var1.getPosition().y();
          double var8 = var1.getPosition().z();
          RenderSystem.depthMask(true);
          RenderSystem.disableCull();
          RenderSystem.enableBlend();
          RenderSystem.defaultBlendFunc();
          RenderSystem.disableTexture();
+         ObjectListIterator var10 = this.renderChunks.iterator();
 
-         for(ObjectListIterator var10 = this.renderChunks.iterator(); var10.hasNext(); RenderSystem.popMatrix()) {
+         while(var10.hasNext()) {
             LevelRenderer.RenderChunkInfo var11 = (LevelRenderer.RenderChunkInfo)var10.next();
             ChunkRenderDispatcher.RenderChunk var12 = var11.chunk;
-            RenderSystem.pushMatrix();
             BlockPos var13 = var12.getOrigin();
-            RenderSystem.translated((double)var13.getX() - var4, (double)var13.getY() - var6, (double)var13.getZ() - var8);
-            int var14;
-            int var16;
+            PoseStack var14 = RenderSystem.getModelViewStack();
+            var14.pushPose();
+            var14.translate((double)var13.getX() - var4, (double)var13.getY() - var6, (double)var13.getZ() - var8);
+            RenderSystem.applyModelViewMatrix();
+            int var15;
             int var17;
-            Direction var18;
+            int var18;
             if (this.minecraft.chunkPath) {
-               var3.begin(1, DefaultVertexFormat.POSITION_COLOR);
+               var3.begin(VertexFormat.Mode.LINES, DefaultVertexFormat.POSITION_COLOR);
                RenderSystem.lineWidth(10.0F);
-               var14 = var11.step == 0 ? 0 : Mth.hsvToRgb((float)var11.step / 50.0F, 0.9F, 0.9F);
-               int var15 = var14 >> 16 & 255;
-               var16 = var14 >> 8 & 255;
-               var17 = var14 & 255;
-               var18 = var11.sourceDirection;
-               if (var18 != null) {
-                  var3.vertex(8.0D, 8.0D, 8.0D).color(var15, var16, var17, 255).endVertex();
-                  var3.vertex((double)(8 - 16 * var18.getStepX()), (double)(8 - 16 * var18.getStepY()), (double)(8 - 16 * var18.getStepZ())).color(var15, var16, var17, 255).endVertex();
+               var15 = var11.step == 0 ? 0 : Mth.hsvToRgb((float)var11.step / 50.0F, 0.9F, 0.9F);
+               int var16 = var15 >> 16 & 255;
+               var17 = var15 >> 8 & 255;
+               var18 = var15 & 255;
+
+               for(int var19 = 0; var19 < DIRECTIONS.length; ++var19) {
+                  if (var11.hasSourceDirection(var19)) {
+                     Direction var20 = DIRECTIONS[var19];
+                     var3.vertex(8.0D, 8.0D, 8.0D).color(var16, var17, var18, 255).endVertex();
+                     var3.vertex((double)(8 - 16 * var20.getStepX()), (double)(8 - 16 * var20.getStepY()), (double)(8 - 16 * var20.getStepZ())).color(var16, var17, var18, 255).endVertex();
+                  }
                }
 
                var2.end();
                RenderSystem.lineWidth(1.0F);
             }
 
             if (this.minecraft.chunkVisibility && !var12.getCompiledChunk().hasNoRenderableLayers()) {
-               var3.begin(1, DefaultVertexFormat.POSITION_COLOR);
+               var3.begin(VertexFormat.Mode.LINES, DefaultVertexFormat.POSITION_COLOR);
                RenderSystem.lineWidth(10.0F);
-               var14 = 0;
-               Direction[] var24 = DIRECTIONS;
-               var16 = var24.length;
+               var15 = 0;
+               Direction[] var26 = DIRECTIONS;
+               var17 = var26.length;
+               var18 = 0;
 
-               for(var17 = 0; var17 < var16; ++var17) {
-                  var18 = var24[var17];
-                  Direction[] var19 = DIRECTIONS;
-                  int var20 = var19.length;
+               while(true) {
+                  if (var18 >= var17) {
+                     var2.end();
+                     RenderSystem.lineWidth(1.0F);
+                     if (var15 > 0) {
+                        var3.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION_COLOR);
+                        float var27 = 0.5F;
+                        float var28 = 0.2F;
+                        var3.vertex(0.5D, 15.5D, 0.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
+                        var3.vertex(15.5D, 15.5D, 0.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
+                        var3.vertex(15.5D, 15.5D, 15.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
+                        var3.vertex(0.5D, 15.5D, 15.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
+                        var3.vertex(0.5D, 0.5D, 15.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
+                        var3.vertex(15.5D, 0.5D, 15.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
+                        var3.vertex(15.5D, 0.5D, 0.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
+                        var3.vertex(0.5D, 0.5D, 0.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
+                        var3.vertex(0.5D, 15.5D, 0.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
+                        var3.vertex(0.5D, 15.5D, 15.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
+                        var3.vertex(0.5D, 0.5D, 15.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
+                        var3.vertex(0.5D, 0.5D, 0.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
+                        var3.vertex(15.5D, 0.5D, 0.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
+                        var3.vertex(15.5D, 0.5D, 15.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
+                        var3.vertex(15.5D, 15.5D, 15.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
+                        var3.vertex(15.5D, 15.5D, 0.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
+                        var3.vertex(0.5D, 0.5D, 0.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
+                        var3.vertex(15.5D, 0.5D, 0.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
+                        var3.vertex(15.5D, 15.5D, 0.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
+                        var3.vertex(0.5D, 15.5D, 0.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
+                        var3.vertex(0.5D, 15.5D, 15.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
+                        var3.vertex(15.5D, 15.5D, 15.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
+                        var3.vertex(15.5D, 0.5D, 15.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
+                        var3.vertex(0.5D, 0.5D, 15.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
+                        var2.end();
+                     }
+                     break;
+                  }
 
-                  for(int var21 = 0; var21 < var20; ++var21) {
-                     Direction var22 = var19[var21];
-                     boolean var23 = var12.getCompiledChunk().facesCanSeeEachother(var18, var22);
-                     if (!var23) {
-                        ++var14;
-                        var3.vertex((double)(8 + 8 * var18.getStepX()), (double)(8 + 8 * var18.getStepY()), (double)(8 + 8 * var18.getStepZ())).color(1, 0, 0, 1).endVertex();
-                        var3.vertex((double)(8 + 8 * var22.getStepX()), (double)(8 + 8 * var22.getStepY()), (double)(8 + 8 * var22.getStepZ())).color(1, 0, 0, 1).endVertex();
+                  Direction var29 = var26[var18];
+                  Direction[] var30 = DIRECTIONS;
+                  int var21 = var30.length;
+
+                  for(int var22 = 0; var22 < var21; ++var22) {
+                     Direction var23 = var30[var22];
+                     boolean var24 = var12.getCompiledChunk().facesCanSeeEachother(var29, var23);
+                     if (!var24) {
+                        ++var15;
+                        var3.vertex((double)(8 + 8 * var29.getStepX()), (double)(8 + 8 * var29.getStepY()), (double)(8 + 8 * var29.getStepZ())).color(1, 0, 0, 1).endVertex();
+                        var3.vertex((double)(8 + 8 * var23.getStepX()), (double)(8 + 8 * var23.getStepY()), (double)(8 + 8 * var23.getStepZ())).color(1, 0, 0, 1).endVertex();
                      }
                   }
-               }
 
-               var2.end();
-               RenderSystem.lineWidth(1.0F);
-               if (var14 > 0) {
-                  var3.begin(7, DefaultVertexFormat.POSITION_COLOR);
-                  float var25 = 0.5F;
-                  float var26 = 0.2F;
-                  var3.vertex(0.5D, 15.5D, 0.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
-                  var3.vertex(15.5D, 15.5D, 0.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
-                  var3.vertex(15.5D, 15.5D, 15.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
-                  var3.vertex(0.5D, 15.5D, 15.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
-                  var3.vertex(0.5D, 0.5D, 15.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
-                  var3.vertex(15.5D, 0.5D, 15.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
-                  var3.vertex(15.5D, 0.5D, 0.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
-                  var3.vertex(0.5D, 0.5D, 0.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
-                  var3.vertex(0.5D, 15.5D, 0.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
-                  var3.vertex(0.5D, 15.5D, 15.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
-                  var3.vertex(0.5D, 0.5D, 15.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
-                  var3.vertex(0.5D, 0.5D, 0.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
-                  var3.vertex(15.5D, 0.5D, 0.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
-                  var3.vertex(15.5D, 0.5D, 15.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
-                  var3.vertex(15.5D, 15.5D, 15.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
-                  var3.vertex(15.5D, 15.5D, 0.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
-                  var3.vertex(0.5D, 0.5D, 0.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
-                  var3.vertex(15.5D, 0.5D, 0.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
-                  var3.vertex(15.5D, 15.5D, 0.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
-                  var3.vertex(0.5D, 15.5D, 0.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
-                  var3.vertex(0.5D, 15.5D, 15.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
-                  var3.vertex(15.5D, 15.5D, 15.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
-                  var3.vertex(15.5D, 0.5D, 15.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
-                  var3.vertex(0.5D, 0.5D, 15.5D).color(0.9F, 0.9F, 0.0F, 0.2F).endVertex();
-                  var2.end();
+                  ++var18;
                }
             }
+
+            var14.popPose();
+            RenderSystem.applyModelViewMatrix();
          }
 
          RenderSystem.depthMask(true);
          RenderSystem.disableBlend();
          RenderSystem.enableCull();
@@ -1440,24 +1558,27 @@
          RenderSystem.disableCull();
          RenderSystem.disableTexture();
          RenderSystem.enableBlend();
          RenderSystem.defaultBlendFunc();
          RenderSystem.lineWidth(10.0F);
-         RenderSystem.pushMatrix();
-         RenderSystem.translatef((float)(this.frustumPos.x - var1.getPosition().x), (float)(this.frustumPos.y - var1.getPosition().y), (float)(this.frustumPos.z - var1.getPosition().z));
+         PoseStack var25 = RenderSystem.getModelViewStack();
+         var25.pushPose();
+         var25.translate((double)((float)(this.frustumPos.x - var1.getPosition().x)), (double)((float)(this.frustumPos.y - var1.getPosition().y)), (double)((float)(this.frustumPos.z - var1.getPosition().z)));
+         RenderSystem.applyModelViewMatrix();
          RenderSystem.depthMask(true);
-         var3.begin(7, DefaultVertexFormat.POSITION_COLOR);
+         var3.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION_COLOR);
          this.addFrustumQuad(var3, 0, 1, 2, 3, 0, 1, 1);
          this.addFrustumQuad(var3, 4, 5, 6, 7, 1, 0, 0);
          this.addFrustumQuad(var3, 0, 1, 5, 4, 1, 1, 0);
          this.addFrustumQuad(var3, 2, 3, 7, 6, 0, 0, 1);
          this.addFrustumQuad(var3, 0, 4, 7, 3, 0, 1, 0);
          this.addFrustumQuad(var3, 1, 5, 6, 2, 1, 0, 1);
          var2.end();
          RenderSystem.depthMask(false);
-         var3.begin(1, DefaultVertexFormat.POSITION);
-         RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
+         RenderSystem.setShader(GameRenderer::getPositionShader);
+         var3.begin(VertexFormat.Mode.LINES, DefaultVertexFormat.POSITION);
+         RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
          this.addFrustumVertex(var3, 0);
          this.addFrustumVertex(var3, 1);
          this.addFrustumVertex(var3, 1);
          this.addFrustumVertex(var3, 2);
          this.addFrustumVertex(var3, 2);
@@ -1479,11 +1600,12 @@
          this.addFrustumVertex(var3, 2);
          this.addFrustumVertex(var3, 6);
          this.addFrustumVertex(var3, 3);
          this.addFrustumVertex(var3, 7);
          var2.end();
-         RenderSystem.popMatrix();
+         var25.popPose();
+         RenderSystem.applyModelViewMatrix();
          RenderSystem.depthMask(true);
          RenderSystem.disableBlend();
          RenderSystem.enableCull();
          RenderSystem.enableTexture();
          RenderSystem.lineWidth(1.0F);
@@ -1501,10 +1623,18 @@
       var1.vertex((double)this.frustumPoints[var3].x(), (double)this.frustumPoints[var3].y(), (double)this.frustumPoints[var3].z()).color((float)var6, (float)var7, (float)var8, 0.25F).endVertex();
       var1.vertex((double)this.frustumPoints[var4].x(), (double)this.frustumPoints[var4].y(), (double)this.frustumPoints[var4].z()).color((float)var6, (float)var7, (float)var8, 0.25F).endVertex();
       var1.vertex((double)this.frustumPoints[var5].x(), (double)this.frustumPoints[var5].y(), (double)this.frustumPoints[var5].z()).color((float)var6, (float)var7, (float)var8, 0.25F).endVertex();
    }
 
+   public void captureFrustum() {
+      this.captureFrustum = true;
+   }
+
+   public void killFrustum() {
+      this.capturedFrustum = null;
+   }
+
    public void tick() {
       ++this.ticks;
       if (this.ticks % 20 == 0) {
          ObjectIterator var1 = this.destroyingBlocks.values().iterator();
 
@@ -1529,15 +1659,15 @@
       }
 
    }
 
    private void renderEndSky(PoseStack var1) {
-      RenderSystem.disableAlphaTest();
       RenderSystem.enableBlend();
       RenderSystem.defaultBlendFunc();
       RenderSystem.depthMask(false);
-      this.textureManager.bind(END_SKY_LOCATION);
+      RenderSystem.setShader(GameRenderer::getPositionTexColorShader);
+      RenderSystem.setShaderTexture(0, END_SKY_LOCATION);
       Tesselator var2 = Tesselator.getInstance();
       BufferBuilder var3 = var2.getBuilder();
 
       for(int var4 = 0; var4 < 6; ++var4) {
          var1.pushPose();
@@ -1560,11 +1690,11 @@
          if (var4 == 5) {
             var1.mulPose(Vector3f.ZP.rotationDegrees(-90.0F));
          }
 
          Matrix4f var5 = var1.last().pose();
-         var3.begin(7, DefaultVertexFormat.POSITION_TEX_COLOR);
+         var3.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION_TEX_COLOR);
          var3.vertex(var5, -100.0F, -100.0F, -100.0F).uv(0.0F, 0.0F).color(40, 40, 40, 255).endVertex();
          var3.vertex(var5, -100.0F, -100.0F, 100.0F).uv(0.0F, 16.0F).color(40, 40, 40, 255).endVertex();
          var3.vertex(var5, 100.0F, -100.0F, 100.0F).uv(16.0F, 16.0F).color(40, 40, 40, 255).endVertex();
          var3.vertex(var5, 100.0F, -100.0F, -100.0F).uv(16.0F, 0.0F).color(40, 40, 40, 255).endVertex();
          var2.end();
@@ -1572,224 +1702,200 @@
       }
 
       RenderSystem.depthMask(true);
       RenderSystem.enableTexture();
       RenderSystem.disableBlend();
-      RenderSystem.enableAlphaTest();
    }
 
-   public void renderSky(PoseStack var1, float var2) {
+   public void renderSky(PoseStack var1, Matrix4f var2, float var3) {
       if (this.minecraft.level.effects().skyType() == DimensionSpecialEffects.SkyType.END) {
          this.renderEndSky(var1);
       } else if (this.minecraft.level.effects().skyType() == DimensionSpecialEffects.SkyType.NORMAL) {
          RenderSystem.disableTexture();
-         Vec3 var3 = this.level.getSkyColor(this.minecraft.gameRenderer.getMainCamera().getBlockPosition(), var2);
-         float var4 = (float)var3.x;
-         float var5 = (float)var3.y;
-         float var6 = (float)var3.z;
+         Vec3 var4 = this.level.getSkyColor(this.minecraft.gameRenderer.getMainCamera().getPosition(), var3);
+         float var5 = (float)var4.x;
+         float var6 = (float)var4.y;
+         float var7 = (float)var4.z;
          FogRenderer.levelFogColor();
-         BufferBuilder var7 = Tesselator.getInstance().getBuilder();
+         BufferBuilder var8 = Tesselator.getInstance().getBuilder();
          RenderSystem.depthMask(false);
-         RenderSystem.enableFog();
-         RenderSystem.color3f(var4, var5, var6);
-         this.skyBuffer.bind();
-         this.skyFormat.setupBufferState(0L);
-         this.skyBuffer.draw(var1.last().pose(), 7);
-         VertexBuffer.unbind();
-         this.skyFormat.clearBufferState();
-         RenderSystem.disableFog();
-         RenderSystem.disableAlphaTest();
+         RenderSystem.setShaderColor(var5, var6, var7, 1.0F);
+         ShaderInstance var9 = RenderSystem.getShader();
+         this.skyBuffer.drawWithShader(var1.last().pose(), var2, var9);
          RenderSystem.enableBlend();
          RenderSystem.defaultBlendFunc();
-         float[] var8 = this.level.effects().getSunriseColor(this.level.getTimeOfDay(var2), var2);
-         float var9;
+         float[] var10 = this.level.effects().getSunriseColor(this.level.getTimeOfDay(var3), var3);
          float var11;
-         float var16;
-         float var17;
+         float var13;
          float var18;
-         if (var8 != null) {
+         float var19;
+         float var20;
+         if (var10 != null) {
+            RenderSystem.setShader(GameRenderer::getPositionColorShader);
             RenderSystem.disableTexture();
-            RenderSystem.shadeModel(7425);
+            RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
             var1.pushPose();
             var1.mulPose(Vector3f.XP.rotationDegrees(90.0F));
-            var9 = Mth.sin(this.level.getSunAngle(var2)) < 0.0F ? 180.0F : 0.0F;
-            var1.mulPose(Vector3f.ZP.rotationDegrees(var9));
+            var11 = Mth.sin(this.level.getSunAngle(var3)) < 0.0F ? 180.0F : 0.0F;
+            var1.mulPose(Vector3f.ZP.rotationDegrees(var11));
             var1.mulPose(Vector3f.ZP.rotationDegrees(90.0F));
-            float var10 = var8[0];
-            var11 = var8[1];
-            float var12 = var8[2];
-            Matrix4f var13 = var1.last().pose();
-            var7.begin(6, DefaultVertexFormat.POSITION_COLOR);
-            var7.vertex(var13, 0.0F, 100.0F, 0.0F).color(var10, var11, var12, var8[3]).endVertex();
-            boolean var14 = true;
+            float var12 = var10[0];
+            var13 = var10[1];
+            float var14 = var10[2];
+            Matrix4f var15 = var1.last().pose();
+            var8.begin(VertexFormat.Mode.TRIANGLE_FAN, DefaultVertexFormat.POSITION_COLOR);
+            var8.vertex(var15, 0.0F, 100.0F, 0.0F).color(var12, var13, var14, var10[3]).endVertex();
+            boolean var16 = true;
 
-            for(int var15 = 0; var15 <= 16; ++var15) {
-               var16 = (float)var15 * 6.2831855F / 16.0F;
-               var17 = Mth.sin(var16);
-               var18 = Mth.cos(var16);
-               var7.vertex(var13, var17 * 120.0F, var18 * 120.0F, -var18 * 40.0F * var8[3]).color(var8[0], var8[1], var8[2], 0.0F).endVertex();
+            for(int var17 = 0; var17 <= 16; ++var17) {
+               var18 = (float)var17 * 6.2831855F / 16.0F;
+               var19 = Mth.sin(var18);
+               var20 = Mth.cos(var18);
+               var8.vertex(var15, var19 * 120.0F, var20 * 120.0F, -var20 * 40.0F * var10[3]).color(var10[0], var10[1], var10[2], 0.0F).endVertex();
             }
 
-            var7.end();
-            BufferUploader.end(var7);
+            var8.end();
+            BufferUploader.end(var8);
             var1.popPose();
-            RenderSystem.shadeModel(7424);
          }
 
          RenderSystem.enableTexture();
          RenderSystem.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
          var1.pushPose();
-         var9 = 1.0F - this.level.getRainLevel(var2);
-         RenderSystem.color4f(1.0F, 1.0F, 1.0F, var9);
+         var11 = 1.0F - this.level.getRainLevel(var3);
+         RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, var11);
          var1.mulPose(Vector3f.YP.rotationDegrees(-90.0F));
-         var1.mulPose(Vector3f.XP.rotationDegrees(this.level.getTimeOfDay(var2) * 360.0F));
-         Matrix4f var21 = var1.last().pose();
-         var11 = 30.0F;
-         this.textureManager.bind(SUN_LOCATION);
-         var7.begin(7, DefaultVertexFormat.POSITION_TEX);
-         var7.vertex(var21, -var11, 100.0F, -var11).uv(0.0F, 0.0F).endVertex();
-         var7.vertex(var21, var11, 100.0F, -var11).uv(1.0F, 0.0F).endVertex();
-         var7.vertex(var21, var11, 100.0F, var11).uv(1.0F, 1.0F).endVertex();
-         var7.vertex(var21, -var11, 100.0F, var11).uv(0.0F, 1.0F).endVertex();
-         var7.end();
-         BufferUploader.end(var7);
-         var11 = 20.0F;
-         this.textureManager.bind(MOON_LOCATION);
-         int var22 = this.level.getMoonPhase();
-         int var23 = var22 % 4;
-         int var24 = var22 / 4 % 2;
-         float var25 = (float)(var23 + 0) / 4.0F;
-         var16 = (float)(var24 + 0) / 2.0F;
-         var17 = (float)(var23 + 1) / 4.0F;
-         var18 = (float)(var24 + 1) / 2.0F;
-         var7.begin(7, DefaultVertexFormat.POSITION_TEX);
-         var7.vertex(var21, -var11, -100.0F, var11).uv(var17, var18).endVertex();
-         var7.vertex(var21, var11, -100.0F, var11).uv(var25, var18).endVertex();
-         var7.vertex(var21, var11, -100.0F, -var11).uv(var25, var16).endVertex();
-         var7.vertex(var21, -var11, -100.0F, -var11).uv(var17, var16).endVertex();
-         var7.end();
-         BufferUploader.end(var7);
+         var1.mulPose(Vector3f.XP.rotationDegrees(this.level.getTimeOfDay(var3) * 360.0F));
+         Matrix4f var23 = var1.last().pose();
+         var13 = 30.0F;
+         RenderSystem.setShader(GameRenderer::getPositionTexShader);
+         RenderSystem.setShaderTexture(0, SUN_LOCATION);
+         var8.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION_TEX);
+         var8.vertex(var23, -var13, 100.0F, -var13).uv(0.0F, 0.0F).endVertex();
+         var8.vertex(var23, var13, 100.0F, -var13).uv(1.0F, 0.0F).endVertex();
+         var8.vertex(var23, var13, 100.0F, var13).uv(1.0F, 1.0F).endVertex();
+         var8.vertex(var23, -var13, 100.0F, var13).uv(0.0F, 1.0F).endVertex();
+         var8.end();
+         BufferUploader.end(var8);
+         var13 = 20.0F;
+         RenderSystem.setShaderTexture(0, MOON_LOCATION);
+         int var24 = this.level.getMoonPhase();
+         int var25 = var24 % 4;
+         int var26 = var24 / 4 % 2;
+         float var27 = (float)(var25 + 0) / 4.0F;
+         var18 = (float)(var26 + 0) / 2.0F;
+         var19 = (float)(var25 + 1) / 4.0F;
+         var20 = (float)(var26 + 1) / 2.0F;
+         var8.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION_TEX);
+         var8.vertex(var23, -var13, -100.0F, var13).uv(var19, var20).endVertex();
+         var8.vertex(var23, var13, -100.0F, var13).uv(var27, var20).endVertex();
+         var8.vertex(var23, var13, -100.0F, -var13).uv(var27, var18).endVertex();
+         var8.vertex(var23, -var13, -100.0F, -var13).uv(var19, var18).endVertex();
+         var8.end();
+         BufferUploader.end(var8);
          RenderSystem.disableTexture();
-         float var19 = this.level.getStarBrightness(var2) * var9;
-         if (var19 > 0.0F) {
-            RenderSystem.color4f(var19, var19, var19, var19);
-            this.starBuffer.bind();
-            this.skyFormat.setupBufferState(0L);
-            this.starBuffer.draw(var1.last().pose(), 7);
-            VertexBuffer.unbind();
-            this.skyFormat.clearBufferState();
+         float var21 = this.level.getStarBrightness(var3) * var11;
+         if (var21 > 0.0F) {
+            RenderSystem.setShaderColor(var21, var21, var21, var21);
+            this.starBuffer.drawWithShader(var1.last().pose(), var2, GameRenderer.getPositionShader());
          }
 
-         RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
+         RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
          RenderSystem.disableBlend();
-         RenderSystem.enableAlphaTest();
-         RenderSystem.enableFog();
          var1.popPose();
          RenderSystem.disableTexture();
-         RenderSystem.color3f(0.0F, 0.0F, 0.0F);
-         double var20 = this.minecraft.player.getEyePosition(var2).y - this.level.getLevelData().getHorizonHeight();
-         if (var20 < 0.0D) {
+         RenderSystem.setShaderColor(0.0F, 0.0F, 0.0F, 1.0F);
+         double var22 = this.minecraft.player.getEyePosition(var3).y - this.level.getLevelData().getHorizonHeight(this.level);
+         if (var22 < 0.0D) {
             var1.pushPose();
             var1.translate(0.0D, 12.0D, 0.0D);
-            this.darkBuffer.bind();
-            this.skyFormat.setupBufferState(0L);
-            this.darkBuffer.draw(var1.last().pose(), 7);
-            VertexBuffer.unbind();
-            this.skyFormat.clearBufferState();
+            this.darkBuffer.drawWithShader(var1.last().pose(), var2, var9);
             var1.popPose();
          }
 
          if (this.level.effects().hasGround()) {
-            RenderSystem.color3f(var4 * 0.2F + 0.04F, var5 * 0.2F + 0.04F, var6 * 0.6F + 0.1F);
+            RenderSystem.setShaderColor(var5 * 0.2F + 0.04F, var6 * 0.2F + 0.04F, var7 * 0.6F + 0.1F, 1.0F);
          } else {
-            RenderSystem.color3f(var4, var5, var6);
+            RenderSystem.setShaderColor(var5, var6, var7, 1.0F);
          }
 
          RenderSystem.enableTexture();
          RenderSystem.depthMask(true);
-         RenderSystem.disableFog();
       }
    }
 
-   public void renderClouds(PoseStack var1, float var2, double var3, double var5, double var7) {
-      float var9 = this.level.effects().getCloudHeight();
-      if (!Float.isNaN(var9)) {
+   public void renderClouds(PoseStack var1, Matrix4f var2, float var3, double var4, double var6, double var8) {
+      float var10 = this.level.effects().getCloudHeight();
+      if (!Float.isNaN(var10)) {
          RenderSystem.disableCull();
          RenderSystem.enableBlend();
-         RenderSystem.enableAlphaTest();
          RenderSystem.enableDepthTest();
-         RenderSystem.defaultAlphaFunc();
          RenderSystem.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
-         RenderSystem.enableFog();
          RenderSystem.depthMask(true);
-         float var10 = 12.0F;
-         float var11 = 4.0F;
-         double var12 = 2.0E-4D;
-         double var14 = (double)(((float)this.ticks + var2) * 0.03F);
-         double var16 = (var3 + var14) / 12.0D;
-         double var18 = (double)(var9 - (float)var5 + 0.33F);
-         double var20 = var7 / 12.0D + 0.33000001311302185D;
-         var16 -= (double)(Mth.floor(var16 / 2048.0D) * 2048);
-         var20 -= (double)(Mth.floor(var20 / 2048.0D) * 2048);
-         float var22 = (float)(var16 - (double)Mth.floor(var16));
-         float var23 = (float)(var18 / 4.0D - (double)Mth.floor(var18 / 4.0D)) * 4.0F;
-         float var24 = (float)(var20 - (double)Mth.floor(var20));
-         Vec3 var25 = this.level.getCloudColor(var2);
-         int var26 = (int)Math.floor(var16);
-         int var27 = (int)Math.floor(var18 / 4.0D);
-         int var28 = (int)Math.floor(var20);
-         if (var26 != this.prevCloudX || var27 != this.prevCloudY || var28 != this.prevCloudZ || this.minecraft.options.getCloudsType() != this.prevCloudsType || this.prevCloudColor.distanceToSqr(var25) > 2.0E-4D) {
-            this.prevCloudX = var26;
-            this.prevCloudY = var27;
-            this.prevCloudZ = var28;
-            this.prevCloudColor = var25;
+         float var11 = 12.0F;
+         float var12 = 4.0F;
+         double var13 = 2.0E-4D;
+         double var15 = (double)(((float)this.ticks + var3) * 0.03F);
+         double var17 = (var4 + var15) / 12.0D;
+         double var19 = (double)(var10 - (float)var6 + 0.33F);
+         double var21 = var8 / 12.0D + 0.33000001311302185D;
+         var17 -= (double)(Mth.floor(var17 / 2048.0D) * 2048);
+         var21 -= (double)(Mth.floor(var21 / 2048.0D) * 2048);
+         float var23 = (float)(var17 - (double)Mth.floor(var17));
+         float var24 = (float)(var19 / 4.0D - (double)Mth.floor(var19 / 4.0D)) * 4.0F;
+         float var25 = (float)(var21 - (double)Mth.floor(var21));
+         Vec3 var26 = this.level.getCloudColor(var3);
+         int var27 = (int)Math.floor(var17);
+         int var28 = (int)Math.floor(var19 / 4.0D);
+         int var29 = (int)Math.floor(var21);
+         if (var27 != this.prevCloudX || var28 != this.prevCloudY || var29 != this.prevCloudZ || this.minecraft.options.getCloudsType() != this.prevCloudsType || this.prevCloudColor.distanceToSqr(var26) > 2.0E-4D) {
+            this.prevCloudX = var27;
+            this.prevCloudY = var28;
+            this.prevCloudZ = var29;
+            this.prevCloudColor = var26;
             this.prevCloudsType = this.minecraft.options.getCloudsType();
             this.generateClouds = true;
          }
 
          if (this.generateClouds) {
             this.generateClouds = false;
-            BufferBuilder var29 = Tesselator.getInstance().getBuilder();
+            BufferBuilder var30 = Tesselator.getInstance().getBuilder();
             if (this.cloudBuffer != null) {
                this.cloudBuffer.close();
             }
 
-            this.cloudBuffer = new VertexBuffer(DefaultVertexFormat.POSITION_TEX_COLOR_NORMAL);
-            this.buildClouds(var29, var16, var18, var20, var25);
-            var29.end();
-            this.cloudBuffer.upload(var29);
+            this.cloudBuffer = new VertexBuffer();
+            this.buildClouds(var30, var17, var19, var21, var26);
+            var30.end();
+            this.cloudBuffer.upload(var30);
          }
 
-         this.textureManager.bind(CLOUDS_LOCATION);
+         RenderSystem.setShader(GameRenderer::getPositionTexColorNormalShader);
+         RenderSystem.setShaderTexture(0, CLOUDS_LOCATION);
+         FogRenderer.levelFogColor();
          var1.pushPose();
          var1.scale(12.0F, 1.0F, 12.0F);
-         var1.translate((double)(-var22), (double)var23, (double)(-var24));
+         var1.translate((double)(-var23), (double)var24, (double)(-var25));
          if (this.cloudBuffer != null) {
-            this.cloudBuffer.bind();
-            DefaultVertexFormat.POSITION_TEX_COLOR_NORMAL.setupBufferState(0L);
-            int var31 = this.prevCloudsType == CloudStatus.FANCY ? 0 : 1;
+            int var33 = this.prevCloudsType == CloudStatus.FANCY ? 0 : 1;
 
-            for(int var30 = var31; var30 < 2; ++var30) {
-               if (var30 == 0) {
+            for(int var31 = var33; var31 < 2; ++var31) {
+               if (var31 == 0) {
                   RenderSystem.colorMask(false, false, false, false);
                } else {
                   RenderSystem.colorMask(true, true, true, true);
                }
 
-               this.cloudBuffer.draw(var1.last().pose(), 7);
+               ShaderInstance var32 = RenderSystem.getShader();
+               this.cloudBuffer.drawWithShader(var1.last().pose(), var2, var32);
             }
-
-            VertexBuffer.unbind();
-            DefaultVertexFormat.POSITION_TEX_COLOR_NORMAL.clearBufferState();
          }
 
          var1.popPose();
-         RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
-         RenderSystem.disableAlphaTest();
+         RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
          RenderSystem.enableCull();
          RenderSystem.disableBlend();
-         RenderSystem.disableFog();
       }
    }
 
    private void buildClouds(BufferBuilder var1, double var2, double var4, double var6, Vec3 var8) {
       float var9 = 4.0F;
@@ -1809,11 +1915,12 @@
       float var23 = var17 * 0.7F;
       float var24 = var18 * 0.7F;
       float var25 = var16 * 0.8F;
       float var26 = var17 * 0.8F;
       float var27 = var18 * 0.8F;
-      var1.begin(7, DefaultVertexFormat.POSITION_TEX_COLOR_NORMAL);
+      RenderSystem.setShader(GameRenderer::getPositionTexColorNormalShader);
+      var1.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION_TEX_COLOR_NORMAL);
       float var28 = (float)Math.floor(var4 / 4.0D) * 4.0F;
       if (this.prevCloudsType == CloudStatus.FANCY) {
          for(int var29 = -3; var29 <= 4; ++var29) {
             for(int var30 = -3; var30 <= 4; ++var30) {
                float var31 = (float)(var29 * 8);
@@ -1914,122 +2021,119 @@
          }
       }
 
    }
 
-   private void renderWorldBounds(Camera var1) {
+   private void renderWorldBorder(Camera var1) {
       BufferBuilder var2 = Tesselator.getInstance().getBuilder();
       WorldBorder var3 = this.level.getWorldBorder();
       double var4 = (double)(this.minecraft.options.renderDistance * 16);
       if (var1.getPosition().x >= var3.getMaxX() - var4 || var1.getPosition().x <= var3.getMinX() + var4 || var1.getPosition().z >= var3.getMaxZ() - var4 || var1.getPosition().z <= var3.getMinZ() + var4) {
          double var6 = 1.0D - var3.getDistanceToBorder(var1.getPosition().x, var1.getPosition().z) / var4;
          var6 = Math.pow(var6, 4.0D);
+         var6 = Mth.clamp(var6, 0.0D, 1.0D);
          double var8 = var1.getPosition().x;
-         double var10 = var1.getPosition().y;
-         double var12 = var1.getPosition().z;
+         double var10 = var1.getPosition().z;
+         double var12 = (double)this.minecraft.gameRenderer.getDepthFar();
          RenderSystem.enableBlend();
          RenderSystem.enableDepthTest();
          RenderSystem.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
-         this.textureManager.bind(FORCEFIELD_LOCATION);
+         RenderSystem.setShaderTexture(0, FORCEFIELD_LOCATION);
          RenderSystem.depthMask(Minecraft.useShaderTransparency());
-         RenderSystem.pushMatrix();
-         int var14 = var3.getStatus().getColor();
-         float var15 = (float)(var14 >> 16 & 255) / 255.0F;
-         float var16 = (float)(var14 >> 8 & 255) / 255.0F;
-         float var17 = (float)(var14 & 255) / 255.0F;
-         RenderSystem.color4f(var15, var16, var17, (float)var6);
+         PoseStack var14 = RenderSystem.getModelViewStack();
+         var14.pushPose();
+         RenderSystem.applyModelViewMatrix();
+         int var15 = var3.getStatus().getColor();
+         float var16 = (float)(var15 >> 16 & 255) / 255.0F;
+         float var17 = (float)(var15 >> 8 & 255) / 255.0F;
+         float var18 = (float)(var15 & 255) / 255.0F;
+         RenderSystem.setShaderColor(var16, var17, var18, (float)var6);
+         RenderSystem.setShader(GameRenderer::getPositionTexShader);
          RenderSystem.polygonOffset(-3.0F, -3.0F);
          RenderSystem.enablePolygonOffset();
-         RenderSystem.defaultAlphaFunc();
-         RenderSystem.enableAlphaTest();
          RenderSystem.disableCull();
-         float var18 = (float)(Util.getMillis() % 3000L) / 3000.0F;
-         float var19 = 0.0F;
+         float var19 = (float)(Util.getMillis() % 3000L) / 3000.0F;
          float var20 = 0.0F;
-         float var21 = 128.0F;
-         var2.begin(7, DefaultVertexFormat.POSITION_TEX);
-         double var22 = Math.max((double)Mth.floor(var12 - var4), var3.getMinZ());
-         double var24 = Math.min((double)Mth.ceil(var12 + var4), var3.getMaxZ());
-         float var26;
-         double var27;
-         double var29;
-         float var31;
+         float var21 = 0.0F;
+         float var22 = (float)(var12 - Mth.frac(var1.getPosition().y));
+         var2.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION_TEX);
+         double var23 = Math.max((double)Mth.floor(var10 - var4), var3.getMinZ());
+         double var25 = Math.min((double)Mth.ceil(var10 + var4), var3.getMaxZ());
+         float var32;
+         float var27;
+         double var28;
+         double var30;
          if (var8 > var3.getMaxX() - var4) {
-            var26 = 0.0F;
+            var27 = 0.0F;
 
-            for(var27 = var22; var27 < var24; var26 += 0.5F) {
-               var29 = Math.min(1.0D, var24 - var27);
-               var31 = (float)var29 * 0.5F;
-               this.vertex(var2, var8, var10, var12, var3.getMaxX(), 256, var27, var18 + var26, var18 + 0.0F);
-               this.vertex(var2, var8, var10, var12, var3.getMaxX(), 256, var27 + var29, var18 + var31 + var26, var18 + 0.0F);
-               this.vertex(var2, var8, var10, var12, var3.getMaxX(), 0, var27 + var29, var18 + var31 + var26, var18 + 128.0F);
-               this.vertex(var2, var8, var10, var12, var3.getMaxX(), 0, var27, var18 + var26, var18 + 128.0F);
-               ++var27;
+            for(var28 = var23; var28 < var25; var27 += 0.5F) {
+               var30 = Math.min(1.0D, var25 - var28);
+               var32 = (float)var30 * 0.5F;
+               var2.vertex(var3.getMaxX() - var8, -var12, var28 - var10).uv(var19 - var27, var19 + var22).endVertex();
+               var2.vertex(var3.getMaxX() - var8, -var12, var28 + var30 - var10).uv(var19 - (var32 + var27), var19 + var22).endVertex();
+               var2.vertex(var3.getMaxX() - var8, var12, var28 + var30 - var10).uv(var19 - (var32 + var27), var19 + 0.0F).endVertex();
+               var2.vertex(var3.getMaxX() - var8, var12, var28 - var10).uv(var19 - var27, var19 + 0.0F).endVertex();
+               ++var28;
             }
          }
 
          if (var8 < var3.getMinX() + var4) {
-            var26 = 0.0F;
+            var27 = 0.0F;
 
-            for(var27 = var22; var27 < var24; var26 += 0.5F) {
-               var29 = Math.min(1.0D, var24 - var27);
-               var31 = (float)var29 * 0.5F;
-               this.vertex(var2, var8, var10, var12, var3.getMinX(), 256, var27, var18 + var26, var18 + 0.0F);
-               this.vertex(var2, var8, var10, var12, var3.getMinX(), 256, var27 + var29, var18 + var31 + var26, var18 + 0.0F);
-               this.vertex(var2, var8, var10, var12, var3.getMinX(), 0, var27 + var29, var18 + var31 + var26, var18 + 128.0F);
-               this.vertex(var2, var8, var10, var12, var3.getMinX(), 0, var27, var18 + var26, var18 + 128.0F);
-               ++var27;
+            for(var28 = var23; var28 < var25; var27 += 0.5F) {
+               var30 = Math.min(1.0D, var25 - var28);
+               var32 = (float)var30 * 0.5F;
+               var2.vertex(var3.getMinX() - var8, -var12, var28 - var10).uv(var19 + var27, var19 + var22).endVertex();
+               var2.vertex(var3.getMinX() - var8, -var12, var28 + var30 - var10).uv(var19 + var32 + var27, var19 + var22).endVertex();
+               var2.vertex(var3.getMinX() - var8, var12, var28 + var30 - var10).uv(var19 + var32 + var27, var19 + 0.0F).endVertex();
+               var2.vertex(var3.getMinX() - var8, var12, var28 - var10).uv(var19 + var27, var19 + 0.0F).endVertex();
+               ++var28;
             }
          }
 
-         var22 = Math.max((double)Mth.floor(var8 - var4), var3.getMinX());
-         var24 = Math.min((double)Mth.ceil(var8 + var4), var3.getMaxX());
-         if (var12 > var3.getMaxZ() - var4) {
-            var26 = 0.0F;
+         var23 = Math.max((double)Mth.floor(var8 - var4), var3.getMinX());
+         var25 = Math.min((double)Mth.ceil(var8 + var4), var3.getMaxX());
+         if (var10 > var3.getMaxZ() - var4) {
+            var27 = 0.0F;
 
-            for(var27 = var22; var27 < var24; var26 += 0.5F) {
-               var29 = Math.min(1.0D, var24 - var27);
-               var31 = (float)var29 * 0.5F;
-               this.vertex(var2, var8, var10, var12, var27, 256, var3.getMaxZ(), var18 + var26, var18 + 0.0F);
-               this.vertex(var2, var8, var10, var12, var27 + var29, 256, var3.getMaxZ(), var18 + var31 + var26, var18 + 0.0F);
-               this.vertex(var2, var8, var10, var12, var27 + var29, 0, var3.getMaxZ(), var18 + var31 + var26, var18 + 128.0F);
-               this.vertex(var2, var8, var10, var12, var27, 0, var3.getMaxZ(), var18 + var26, var18 + 128.0F);
-               ++var27;
+            for(var28 = var23; var28 < var25; var27 += 0.5F) {
+               var30 = Math.min(1.0D, var25 - var28);
+               var32 = (float)var30 * 0.5F;
+               var2.vertex(var28 - var8, -var12, var3.getMaxZ() - var10).uv(var19 + var27, var19 + var22).endVertex();
+               var2.vertex(var28 + var30 - var8, -var12, var3.getMaxZ() - var10).uv(var19 + var32 + var27, var19 + var22).endVertex();
+               var2.vertex(var28 + var30 - var8, var12, var3.getMaxZ() - var10).uv(var19 + var32 + var27, var19 + 0.0F).endVertex();
+               var2.vertex(var28 - var8, var12, var3.getMaxZ() - var10).uv(var19 + var27, var19 + 0.0F).endVertex();
+               ++var28;
             }
          }
 
-         if (var12 < var3.getMinZ() + var4) {
-            var26 = 0.0F;
+         if (var10 < var3.getMinZ() + var4) {
+            var27 = 0.0F;
 
-            for(var27 = var22; var27 < var24; var26 += 0.5F) {
-               var29 = Math.min(1.0D, var24 - var27);
-               var31 = (float)var29 * 0.5F;
-               this.vertex(var2, var8, var10, var12, var27, 256, var3.getMinZ(), var18 + var26, var18 + 0.0F);
-               this.vertex(var2, var8, var10, var12, var27 + var29, 256, var3.getMinZ(), var18 + var31 + var26, var18 + 0.0F);
-               this.vertex(var2, var8, var10, var12, var27 + var29, 0, var3.getMinZ(), var18 + var31 + var26, var18 + 128.0F);
-               this.vertex(var2, var8, var10, var12, var27, 0, var3.getMinZ(), var18 + var26, var18 + 128.0F);
-               ++var27;
+            for(var28 = var23; var28 < var25; var27 += 0.5F) {
+               var30 = Math.min(1.0D, var25 - var28);
+               var32 = (float)var30 * 0.5F;
+               var2.vertex(var28 - var8, -var12, var3.getMinZ() - var10).uv(var19 - var27, var19 + var22).endVertex();
+               var2.vertex(var28 + var30 - var8, -var12, var3.getMinZ() - var10).uv(var19 - (var32 + var27), var19 + var22).endVertex();
+               var2.vertex(var28 + var30 - var8, var12, var3.getMinZ() - var10).uv(var19 - (var32 + var27), var19 + 0.0F).endVertex();
+               var2.vertex(var28 - var8, var12, var3.getMinZ() - var10).uv(var19 - var27, var19 + 0.0F).endVertex();
+               ++var28;
             }
          }
 
          var2.end();
          BufferUploader.end(var2);
          RenderSystem.enableCull();
-         RenderSystem.disableAlphaTest();
          RenderSystem.polygonOffset(0.0F, 0.0F);
          RenderSystem.disablePolygonOffset();
-         RenderSystem.enableAlphaTest();
          RenderSystem.disableBlend();
-         RenderSystem.popMatrix();
+         var14.popPose();
+         RenderSystem.applyModelViewMatrix();
          RenderSystem.depthMask(true);
       }
    }
 
-   private void vertex(BufferBuilder var1, double var2, double var4, double var6, double var8, int var10, double var11, float var13, float var14) {
-      var1.vertex(var8 - var2, (double)var10 - var4, var11 - var6).uv(var13, var14).endVertex();
-   }
-
    private void renderHitOutline(PoseStack var1, VertexConsumer var2, Entity var3, double var4, double var6, double var8, BlockPos var10, BlockState var11) {
       renderShape(var1, var2, var11.getShape(this.level, var10, CollisionContext.of(var3)), (double)var10.getX() - var4, (double)var10.getY() - var6, (double)var10.getZ() - var8, 0.0F, 0.0F, 0.0F, 0.4F);
    }
 
    public static void renderVoxelShape(PoseStack var0, VertexConsumer var1, VoxelShape var2, double var3, double var5, double var7, float var9, float var10, float var11, float var12) {
@@ -2047,57 +2151,69 @@
       }
 
    }
 
    private static void renderShape(PoseStack var0, VertexConsumer var1, VoxelShape var2, double var3, double var5, double var7, float var9, float var10, float var11, float var12) {
-      Matrix4f var13 = var0.last().pose();
+      PoseStack.Pose var13 = var0.last();
       var2.forAllEdges((var12x, var14, var16, var18, var20, var22) -> {
-         var1.vertex(var13, (float)(var12x + var3), (float)(var14 + var5), (float)(var16 + var7)).color(var9, var10, var11, var12).endVertex();
-         var1.vertex(var13, (float)(var18 + var3), (float)(var20 + var5), (float)(var22 + var7)).color(var9, var10, var11, var12).endVertex();
+         float var24 = (float)(var18 - var12x);
+         float var25 = (float)(var20 - var14);
+         float var26 = (float)(var22 - var16);
+         float var27 = Mth.sqrt(var24 * var24 + var25 * var25 + var26 * var26);
+         var24 /= var27;
+         var25 /= var27;
+         var26 /= var27;
+         var1.vertex(var13.pose(), (float)(var12x + var3), (float)(var14 + var5), (float)(var16 + var7)).color(var9, var10, var11, var12).normal(var13.normal(), var24, var25, var26).endVertex();
+         var1.vertex(var13.pose(), (float)(var18 + var3), (float)(var20 + var5), (float)(var22 + var7)).color(var9, var10, var11, var12).normal(var13.normal(), var24, var25, var26).endVertex();
       });
    }
 
+   public static void renderLineBox(VertexConsumer var0, double var1, double var3, double var5, double var7, double var9, double var11, float var13, float var14, float var15, float var16) {
+      renderLineBox(new PoseStack(), var0, var1, var3, var5, var7, var9, var11, var13, var14, var15, var16, var13, var14, var15);
+   }
+
    public static void renderLineBox(PoseStack var0, VertexConsumer var1, AABB var2, float var3, float var4, float var5, float var6) {
       renderLineBox(var0, var1, var2.minX, var2.minY, var2.minZ, var2.maxX, var2.maxY, var2.maxZ, var3, var4, var5, var6, var3, var4, var5);
    }
 
    public static void renderLineBox(PoseStack var0, VertexConsumer var1, double var2, double var4, double var6, double var8, double var10, double var12, float var14, float var15, float var16, float var17) {
       renderLineBox(var0, var1, var2, var4, var6, var8, var10, var12, var14, var15, var16, var17, var14, var15, var16);
    }
 
    public static void renderLineBox(PoseStack var0, VertexConsumer var1, double var2, double var4, double var6, double var8, double var10, double var12, float var14, float var15, float var16, float var17, float var18, float var19, float var20) {
       Matrix4f var21 = var0.last().pose();
-      float var22 = (float)var2;
-      float var23 = (float)var4;
-      float var24 = (float)var6;
-      float var25 = (float)var8;
-      float var26 = (float)var10;
-      float var27 = (float)var12;
-      var1.vertex(var21, var22, var23, var24).color(var14, var19, var20, var17).endVertex();
-      var1.vertex(var21, var25, var23, var24).color(var14, var19, var20, var17).endVertex();
-      var1.vertex(var21, var22, var23, var24).color(var18, var15, var20, var17).endVertex();
-      var1.vertex(var21, var22, var26, var24).color(var18, var15, var20, var17).endVertex();
-      var1.vertex(var21, var22, var23, var24).color(var18, var19, var16, var17).endVertex();
-      var1.vertex(var21, var22, var23, var27).color(var18, var19, var16, var17).endVertex();
-      var1.vertex(var21, var25, var23, var24).color(var14, var15, var16, var17).endVertex();
-      var1.vertex(var21, var25, var26, var24).color(var14, var15, var16, var17).endVertex();
-      var1.vertex(var21, var25, var26, var24).color(var14, var15, var16, var17).endVertex();
-      var1.vertex(var21, var22, var26, var24).color(var14, var15, var16, var17).endVertex();
-      var1.vertex(var21, var22, var26, var24).color(var14, var15, var16, var17).endVertex();
-      var1.vertex(var21, var22, var26, var27).color(var14, var15, var16, var17).endVertex();
-      var1.vertex(var21, var22, var26, var27).color(var14, var15, var16, var17).endVertex();
-      var1.vertex(var21, var22, var23, var27).color(var14, var15, var16, var17).endVertex();
-      var1.vertex(var21, var22, var23, var27).color(var14, var15, var16, var17).endVertex();
-      var1.vertex(var21, var25, var23, var27).color(var14, var15, var16, var17).endVertex();
-      var1.vertex(var21, var25, var23, var27).color(var14, var15, var16, var17).endVertex();
-      var1.vertex(var21, var25, var23, var24).color(var14, var15, var16, var17).endVertex();
-      var1.vertex(var21, var22, var26, var27).color(var14, var15, var16, var17).endVertex();
-      var1.vertex(var21, var25, var26, var27).color(var14, var15, var16, var17).endVertex();
-      var1.vertex(var21, var25, var23, var27).color(var14, var15, var16, var17).endVertex();
-      var1.vertex(var21, var25, var26, var27).color(var14, var15, var16, var17).endVertex();
-      var1.vertex(var21, var25, var26, var24).color(var14, var15, var16, var17).endVertex();
-      var1.vertex(var21, var25, var26, var27).color(var14, var15, var16, var17).endVertex();
+      Matrix3f var22 = var0.last().normal();
+      float var23 = (float)var2;
+      float var24 = (float)var4;
+      float var25 = (float)var6;
+      float var26 = (float)var8;
+      float var27 = (float)var10;
+      float var28 = (float)var12;
+      var1.vertex(var21, var23, var24, var25).color(var14, var19, var20, var17).normal(var22, 1.0F, 0.0F, 0.0F).endVertex();
+      var1.vertex(var21, var26, var24, var25).color(var14, var19, var20, var17).normal(var22, 1.0F, 0.0F, 0.0F).endVertex();
+      var1.vertex(var21, var23, var24, var25).color(var18, var15, var20, var17).normal(var22, 0.0F, 1.0F, 0.0F).endVertex();
+      var1.vertex(var21, var23, var27, var25).color(var18, var15, var20, var17).normal(var22, 0.0F, 1.0F, 0.0F).endVertex();
+      var1.vertex(var21, var23, var24, var25).color(var18, var19, var16, var17).normal(var22, 0.0F, 0.0F, 1.0F).endVertex();
+      var1.vertex(var21, var23, var24, var28).color(var18, var19, var16, var17).normal(var22, 0.0F, 0.0F, 1.0F).endVertex();
+      var1.vertex(var21, var26, var24, var25).color(var14, var15, var16, var17).normal(var22, 0.0F, 1.0F, 0.0F).endVertex();
+      var1.vertex(var21, var26, var27, var25).color(var14, var15, var16, var17).normal(var22, 0.0F, 1.0F, 0.0F).endVertex();
+      var1.vertex(var21, var26, var27, var25).color(var14, var15, var16, var17).normal(var22, -1.0F, 0.0F, 0.0F).endVertex();
+      var1.vertex(var21, var23, var27, var25).color(var14, var15, var16, var17).normal(var22, -1.0F, 0.0F, 0.0F).endVertex();
+      var1.vertex(var21, var23, var27, var25).color(var14, var15, var16, var17).normal(var22, 0.0F, 0.0F, 1.0F).endVertex();
+      var1.vertex(var21, var23, var27, var28).color(var14, var15, var16, var17).normal(var22, 0.0F, 0.0F, 1.0F).endVertex();
+      var1.vertex(var21, var23, var27, var28).color(var14, var15, var16, var17).normal(var22, 0.0F, -1.0F, 0.0F).endVertex();
+      var1.vertex(var21, var23, var24, var28).color(var14, var15, var16, var17).normal(var22, 0.0F, -1.0F, 0.0F).endVertex();
+      var1.vertex(var21, var23, var24, var28).color(var14, var15, var16, var17).normal(var22, 1.0F, 0.0F, 0.0F).endVertex();
+      var1.vertex(var21, var26, var24, var28).color(var14, var15, var16, var17).normal(var22, 1.0F, 0.0F, 0.0F).endVertex();
+      var1.vertex(var21, var26, var24, var28).color(var14, var15, var16, var17).normal(var22, 0.0F, 0.0F, -1.0F).endVertex();
+      var1.vertex(var21, var26, var24, var25).color(var14, var15, var16, var17).normal(var22, 0.0F, 0.0F, -1.0F).endVertex();
+      var1.vertex(var21, var23, var27, var28).color(var14, var15, var16, var17).normal(var22, 1.0F, 0.0F, 0.0F).endVertex();
+      var1.vertex(var21, var26, var27, var28).color(var14, var15, var16, var17).normal(var22, 1.0F, 0.0F, 0.0F).endVertex();
+      var1.vertex(var21, var26, var24, var28).color(var14, var15, var16, var17).normal(var22, 0.0F, 1.0F, 0.0F).endVertex();
+      var1.vertex(var21, var26, var27, var28).color(var14, var15, var16, var17).normal(var22, 0.0F, 1.0F, 0.0F).endVertex();
+      var1.vertex(var21, var26, var27, var25).color(var14, var15, var16, var17).normal(var22, 0.0F, 0.0F, 1.0F).endVertex();
+      var1.vertex(var21, var26, var27, var28).color(var14, var15, var16, var17).normal(var22, 0.0F, 0.0F, 1.0F).endVertex();
    }
 
    public static void addChainedFilledBoxVertices(BufferBuilder var0, double var1, double var3, double var5, double var7, double var9, double var11, float var13, float var14, float var15, float var16) {
       var0.vertex(var1, var3, var5).color(var13, var14, var15, var16).endVertex();
       var0.vertex(var1, var3, var5).color(var13, var14, var15, var16).endVertex();
@@ -2137,22 +2253,22 @@
 
    private void setBlockDirty(BlockPos var1, boolean var2) {
       for(int var3 = var1.getZ() - 1; var3 <= var1.getZ() + 1; ++var3) {
          for(int var4 = var1.getX() - 1; var4 <= var1.getX() + 1; ++var4) {
             for(int var5 = var1.getY() - 1; var5 <= var1.getY() + 1; ++var5) {
-               this.setSectionDirty(var4 >> 4, var5 >> 4, var3 >> 4, var2);
+               this.setSectionDirty(SectionPos.blockToSectionCoord(var4), SectionPos.blockToSectionCoord(var5), SectionPos.blockToSectionCoord(var3), var2);
             }
          }
       }
 
    }
 
    public void setBlocksDirty(int var1, int var2, int var3, int var4, int var5, int var6) {
       for(int var7 = var3 - 1; var7 <= var6 + 1; ++var7) {
          for(int var8 = var1 - 1; var8 <= var4 + 1; ++var8) {
             for(int var9 = var2 - 1; var9 <= var5 + 1; ++var9) {
-               this.setSectionDirty(var8 >> 4, var9 >> 4, var7 >> 4);
+               this.setSectionDirty(SectionPos.blockToSectionCoord(var8), SectionPos.blockToSectionCoord(var9), SectionPos.blockToSectionCoord(var7));
             }
          }
       }
 
    }
@@ -2226,11 +2342,11 @@
          CrashReport var17 = CrashReport.forThrowable(var19, "Exception while adding particle");
          CrashReportCategory var18 = var17.addCategory("Particle being added");
          var18.setDetail("ID", (Object)Registry.PARTICLE_TYPE.getKey(var1.getType()));
          var18.setDetail("Parameters", (Object)var1.writeToString());
          var18.setDetail("Position", () -> {
-            return CrashReportCategory.formatLocation(var4, var6, var8);
+            return CrashReportCategory.formatLocation(this.level, var4, var6, var8);
          });
          throw new ReportedException(var17);
       }
    }
 
@@ -2344,11 +2460,15 @@
          break;
       case 1008:
          this.level.playLocalSound(var3, SoundEvents.FENCE_GATE_OPEN, SoundSource.BLOCKS, 1.0F, var5.nextFloat() * 0.1F + 0.9F, false);
          break;
       case 1009:
-         this.level.playLocalSound(var3, SoundEvents.FIRE_EXTINGUISH, SoundSource.BLOCKS, 0.5F, 2.6F + (var5.nextFloat() - var5.nextFloat()) * 0.8F, false);
+         if (var4 == 0) {
+            this.level.playLocalSound(var3, SoundEvents.FIRE_EXTINGUISH, SoundSource.BLOCKS, 0.5F, 2.6F + (var5.nextFloat() - var5.nextFloat()) * 0.8F, false);
+         } else if (var4 == 1) {
+            this.level.playLocalSound(var3, SoundEvents.GENERIC_EXTINGUISH_FIRE, SoundSource.BLOCKS, 0.7F, 1.6F + (var5.nextFloat() - var5.nextFloat()) * 0.4F, false);
+         }
          break;
       case 1010:
          if (Item.byId(var4) instanceof RecordItem) {
             this.playStreamingMusic(((RecordItem)Item.byId(var4)).getSound(), var3);
          } else {
@@ -2446,10 +2566,22 @@
          this.level.playLocalSound(var3, SoundEvents.BOOK_PAGE_TURN, SoundSource.BLOCKS, 1.0F, this.level.random.nextFloat() * 0.1F + 0.9F, false);
          break;
       case 1044:
          this.level.playLocalSound(var3, SoundEvents.SMITHING_TABLE_USE, SoundSource.BLOCKS, 1.0F, this.level.random.nextFloat() * 0.1F + 0.9F, false);
          break;
+      case 1045:
+         this.level.playLocalSound(var3, SoundEvents.POINTED_DRIPSTONE_LAND, SoundSource.BLOCKS, 2.0F, this.level.random.nextFloat() * 0.1F + 0.9F, false);
+         break;
+      case 1046:
+         this.level.playLocalSound(var3, SoundEvents.POINTED_DRIPSTONE_DRIP_LAVA_INTO_CAULDRON, SoundSource.BLOCKS, 2.0F, this.level.random.nextFloat() * 0.1F + 0.9F, false);
+         break;
+      case 1047:
+         this.level.playLocalSound(var3, SoundEvents.POINTED_DRIPSTONE_DRIP_WATER_INTO_CAULDRON, SoundSource.BLOCKS, 2.0F, this.level.random.nextFloat() * 0.1F + 0.9F, false);
+         break;
+      case 1048:
+         this.level.playLocalSound(var3, SoundEvents.SKELETON_CONVERTED_TO_STRAY, SoundSource.NEUTRAL, 2.0F, (var5.nextFloat() - var5.nextFloat()) * 0.2F + 1.0F, false);
+         break;
       case 1500:
          ComposterBlock.handleFill(this.level, var3, var4 > 0);
          break;
       case 1501:
          this.level.playLocalSound(var3, SoundEvents.LAVA_EXTINGUISH, SoundSource.BLOCKS, 0.5F, 2.6F + (var5.nextFloat() - var5.nextFloat()) * 0.8F, false);
@@ -2479,10 +2611,13 @@
             var12 = (double)var3.getZ() + (5.0D + var5.nextDouble() * 6.0D) / 16.0D;
             this.level.addParticle(ParticleTypes.SMOKE, var34, var10, var12, 0.0D, 0.0D, 0.0D);
          }
 
          return;
+      case 1504:
+         PointedDripstoneBlock.spawnDripParticle(this.level, var3, this.level.getBlockState(var3));
+         break;
       case 2000:
          Direction var33 = Direction.from3DDataValue(var4);
          var7 = var33.getStepX();
          int var35 = var33.getStepY();
          int var36 = var33.getStepZ();
@@ -2507,11 +2642,11 @@
          if (!var32.isAir()) {
             SoundType var38 = var32.getSoundType();
             this.level.playLocalSound(var3, var38.getBreakSound(), SoundSource.BLOCKS, (var38.getVolume() + 1.0F) / 2.0F, var38.getPitch() * 0.8F, false);
          }
 
-         this.minecraft.particleEngine.destroy(var3, var32);
+         this.level.addDestroyBlockEffect(var3, var32);
          break;
       case 2002:
       case 2007:
          Vec3 var31 = Vec3.atBottomCenterOf(var3);
 
@@ -2598,10 +2733,27 @@
          this.level.addParticle(ParticleTypes.EXPLOSION_EMITTER, true, (double)var3.getX() + 0.5D, (double)var3.getY() + 0.5D, (double)var3.getZ() + 0.5D, 0.0D, 0.0D, 0.0D);
          this.level.playLocalSound(var3, SoundEvents.END_GATEWAY_SPAWN, SoundSource.BLOCKS, 10.0F, (1.0F + (this.level.random.nextFloat() - this.level.random.nextFloat()) * 0.2F) * 0.7F, false);
          break;
       case 3001:
          this.level.playLocalSound(var3, SoundEvents.ENDER_DRAGON_GROWL, SoundSource.HOSTILE, 64.0F, 0.8F + this.level.random.nextFloat() * 0.3F, false);
+         break;
+      case 3002:
+         if (var4 >= 0 && var4 < Direction.Axis.VALUES.length) {
+            ParticleUtils.spawnParticlesAlongAxis(Direction.Axis.VALUES[var4], this.level, var3, 0.125D, ParticleTypes.ELECTRIC_SPARK, UniformInt.of(10, 19));
+         } else {
+            ParticleUtils.spawnParticlesOnBlockFaces(this.level, var3, ParticleTypes.ELECTRIC_SPARK, UniformInt.of(3, 5));
+         }
+         break;
+      case 3003:
+         ParticleUtils.spawnParticlesOnBlockFaces(this.level, var3, ParticleTypes.WAX_ON, UniformInt.of(3, 5));
+         this.level.playLocalSound(var3, SoundEvents.HONEYCOMB_WAX_ON, SoundSource.BLOCKS, 1.0F, 1.0F, false);
+         break;
+      case 3004:
+         ParticleUtils.spawnParticlesOnBlockFaces(this.level, var3, ParticleTypes.WAX_OFF, UniformInt.of(3, 5));
+         break;
+      case 3005:
+         ParticleUtils.spawnParticlesOnBlockFaces(this.level, var3, ParticleTypes.SCRAPE, UniformInt.of(3, 5));
       }
 
    }
 
    public void destroyBlockProgress(int var1, BlockPos var2, int var3) {
@@ -2700,26 +2852,63 @@
       public TransparencyShaderException(String var1, Throwable var2) {
          super(var1, var2);
       }
    }
 
-   class RenderChunkInfo {
+   static class RenderInfoMap {
+      private final LevelRenderer.RenderChunkInfo[] infos;
+      private final LevelRenderer.RenderChunkInfo[] blank;
+
+      private RenderInfoMap(int var1) {
+         this.infos = new LevelRenderer.RenderChunkInfo[var1];
+         this.blank = new LevelRenderer.RenderChunkInfo[var1];
+      }
+
+      private void clear() {
+         System.arraycopy(this.blank, 0, this.infos, 0, this.infos.length);
+      }
+
+      public void put(ChunkRenderDispatcher.RenderChunk var1, LevelRenderer.RenderChunkInfo var2) {
+         this.infos[var1.index] = var2;
+      }
+
+      public LevelRenderer.RenderChunkInfo get(ChunkRenderDispatcher.RenderChunk var1) {
+         return this.infos[var1.index];
+      }
+   }
+
+   static class RenderChunkInfo {
       private final ChunkRenderDispatcher.RenderChunk chunk;
-      private final Direction sourceDirection;
+      private byte sourceDirections;
       private byte directions;
       private final int step;
 
-      private RenderChunkInfo(ChunkRenderDispatcher.RenderChunk var2, Direction var3, @Nullable int var4) {
-         this.chunk = var2;
-         this.sourceDirection = var3;
-         this.step = var4;
+      private RenderChunkInfo(ChunkRenderDispatcher.RenderChunk var1, @Nullable Direction var2, int var3) {
+         this.chunk = var1;
+         if (var2 != null) {
+            this.addSourceDirection(var2);
+         }
+
+         this.step = var3;
       }
 
       public void setDirections(byte var1, Direction var2) {
          this.directions = (byte)(this.directions | var1 | 1 << var2.ordinal());
       }
 
       public boolean hasDirection(Direction var1) {
          return (this.directions & 1 << var1.ordinal()) > 0;
       }
+
+      public void addSourceDirection(Direction var1) {
+         this.sourceDirections = (byte)(this.sourceDirections | this.sourceDirections | 1 << var1.ordinal());
+      }
+
+      public boolean hasSourceDirection(int var1) {
+         return (this.sourceDirections & 1 << var1) > 0;
+      }
+
+      public boolean hasSourceDirections() {
+         return this.sourceDirections != 0;
+      }
    }
 }
