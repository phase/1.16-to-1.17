--- net/minecraft/client/renderer/texture/TextureAtlasSprite.java
+++ net/minecraft/client/renderer/texture/TextureAtlasSprite.java
@@ -1,157 +1,164 @@
 package net.minecraft.client.renderer.texture;
 
+import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Lists;
 import com.mojang.blaze3d.platform.NativeImage;
 import com.mojang.blaze3d.systems.RenderSystem;
 import com.mojang.blaze3d.vertex.VertexConsumer;
+import it.unimi.dsi.fastutil.ints.IntOpenHashSet;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Iterator;
+import java.util.List;
+import java.util.stream.IntStream;
 import javax.annotation.Nullable;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
 import net.minecraft.client.renderer.SpriteCoordinateExpander;
-import net.minecraft.client.resources.metadata.animation.AnimationFrame;
 import net.minecraft.client.resources.metadata.animation.AnimationMetadataSection;
 import net.minecraft.resources.ResourceLocation;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
 
 public class TextureAtlasSprite implements AutoCloseable {
+   private static final Logger LOGGER = LogManager.getLogger();
    private final TextureAtlas atlas;
-   private final TextureAtlasSprite.Info info;
-   private final AnimationMetadataSection metadata;
+   private final ResourceLocation name;
+   private final int width;
+   private final int height;
    protected final NativeImage[] mainImage;
-   private final int[] framesX;
-   private final int[] framesY;
    @Nullable
-   private final TextureAtlasSprite.InterpolationData interpolationData;
+   private final TextureAtlasSprite.AnimatedTexture animatedTexture;
    private final int x;
    private final int y;
    private final float u0;
    private final float u1;
    private final float v0;
    private final float v1;
-   private int frame;
-   private int subFrame;
 
    protected TextureAtlasSprite(TextureAtlas var1, TextureAtlasSprite.Info var2, int var3, int var4, int var5, int var6, int var7, NativeImage var8) {
       this.atlas = var1;
-      AnimationMetadataSection var9 = var2.metadata;
-      int var10 = var2.width;
-      int var11 = var2.height;
+      this.width = var2.width;
+      this.height = var2.height;
+      this.name = var2.name;
       this.x = var6;
       this.y = var7;
       this.u0 = (float)var6 / (float)var4;
-      this.u1 = (float)(var6 + var10) / (float)var4;
+      this.u1 = (float)(var6 + this.width) / (float)var4;
       this.v0 = (float)var7 / (float)var5;
-      this.v1 = (float)(var7 + var11) / (float)var5;
-      int var12 = var8.getWidth() / var9.getFrameWidth(var10);
-      int var13 = var8.getHeight() / var9.getFrameHeight(var11);
-      int var16;
-      int var17;
-      int var18;
-      if (var9.getFrameCount() > 0) {
-         int var14 = (Integer)var9.getUniqueFrameIndices().stream().max(Integer::compareTo).get() + 1;
-         this.framesX = new int[var14];
-         this.framesY = new int[var14];
-         Arrays.fill(this.framesX, -1);
-         Arrays.fill(this.framesY, -1);
+      this.v1 = (float)(var7 + this.height) / (float)var5;
+      this.animatedTexture = this.createTicker(var2, var8.getWidth(), var8.getHeight(), var3);
 
-         for(Iterator var15 = var9.getUniqueFrameIndices().iterator(); var15.hasNext(); this.framesY[var16] = var17) {
-            var16 = (Integer)var15.next();
-            if (var16 >= var12 * var13) {
-               throw new RuntimeException("invalid frameindex " + var16);
-            }
-
-            var17 = var16 / var12;
-            var18 = var16 % var12;
-            this.framesX[var16] = var18;
-         }
-      } else {
-         ArrayList var21 = Lists.newArrayList();
-         int var22 = var12 * var13;
-         this.framesX = new int[var22];
-         this.framesY = new int[var22];
-
-         for(var16 = 0; var16 < var13; ++var16) {
-            for(var17 = 0; var17 < var12; ++var17) {
-               var18 = var16 * var12 + var17;
-               this.framesX[var18] = var17;
-               this.framesY[var18] = var16;
-               var21.add(new AnimationFrame(var18, -1));
-            }
-         }
-
-         var9 = new AnimationMetadataSection(var21, var10, var11, var9.getDefaultFrameTime(), var9.isInterpolatedFrames());
-      }
-
-      this.info = new TextureAtlasSprite.Info(var2.name, var10, var11, var9);
-      this.metadata = var9;
-
-      CrashReport var23;
-      CrashReportCategory var24;
+      CrashReport var10;
+      CrashReportCategory var11;
       try {
          try {
             this.mainImage = MipmapGenerator.generateMipLevels(var8, var3);
-         } catch (Throwable var19) {
-            var23 = CrashReport.forThrowable(var19, "Generating mipmaps for frame");
-            var24 = var23.addCategory("Frame being iterated");
-            var24.setDetail("First frame", () -> {
+         } catch (Throwable var12) {
+            var10 = CrashReport.forThrowable(var12, "Generating mipmaps for frame");
+            var11 = var10.addCategory("Frame being iterated");
+            var11.setDetail("First frame", () -> {
                StringBuilder var1 = new StringBuilder();
                if (var1.length() > 0) {
                   var1.append(", ");
                }
 
                var1.append(var8.getWidth()).append("x").append(var8.getHeight());
                return var1.toString();
             });
-            throw new ReportedException(var23);
+            throw new ReportedException(var10);
          }
-      } catch (Throwable var20) {
-         var23 = CrashReport.forThrowable(var20, "Applying mipmap");
-         var24 = var23.addCategory("Sprite being mipmapped");
-         var24.setDetail("Sprite name", () -> {
-            return this.getName().toString();
+      } catch (Throwable var13) {
+         var10 = CrashReport.forThrowable(var13, "Applying mipmap");
+         var11 = var10.addCategory("Sprite being mipmapped");
+         ResourceLocation var10002 = this.name;
+         var11.setDetail("Sprite name", var10002::toString);
+         var11.setDetail("Sprite size", () -> {
+            return this.width + " x " + this.height;
          });
-         var24.setDetail("Sprite size", () -> {
-            return this.getWidth() + " x " + this.getHeight();
-         });
-         var24.setDetail("Sprite frames", () -> {
+         var11.setDetail("Sprite frames", () -> {
             return this.getFrameCount() + " frames";
          });
-         var24.setDetail("Mipmap levels", (Object)var3);
-         throw new ReportedException(var23);
+         var11.setDetail("Mipmap levels", (Object)var3);
+         throw new ReportedException(var10);
       }
+   }
 
-      if (var9.isInterpolatedFrames()) {
-         this.interpolationData = new TextureAtlasSprite.InterpolationData(var2, var3);
+   private int getFrameCount() {
+      return this.animatedTexture != null ? this.animatedTexture.frames.size() : 1;
+   }
+
+   @Nullable
+   private TextureAtlasSprite.AnimatedTexture createTicker(TextureAtlasSprite.Info var1, int var2, int var3, int var4) {
+      AnimationMetadataSection var5 = var1.metadata;
+      int var6 = var2 / var5.getFrameWidth(var1.width);
+      int var7 = var3 / var5.getFrameHeight(var1.height);
+      int var8 = var6 * var7;
+      ArrayList var9 = Lists.newArrayList();
+      var5.forEachFrame((var1x, var2x) -> {
+         var9.add(new TextureAtlasSprite.FrameInfo(var1x, var2x));
+      });
+      int var10;
+      if (var9.isEmpty()) {
+         for(var10 = 0; var10 < var8; ++var10) {
+            var9.add(new TextureAtlasSprite.FrameInfo(var10, var5.getDefaultFrameTime()));
+         }
       } else {
-         this.interpolationData = null;
+         var10 = 0;
+         IntOpenHashSet var11 = new IntOpenHashSet();
+
+         for(Iterator var12 = var9.iterator(); var12.hasNext(); ++var10) {
+            TextureAtlasSprite.FrameInfo var13 = (TextureAtlasSprite.FrameInfo)var12.next();
+            boolean var14 = true;
+            if (var13.time <= 0) {
+               LOGGER.warn("Invalid frame duration on sprite {} frame {}: {}", this.name, var10, var13.time);
+               var14 = false;
+            }
+
+            if (var13.index < 0 || var13.index >= var8) {
+               LOGGER.warn("Invalid frame index on sprite {} frame {}: {}", this.name, var10, var13.index);
+               var14 = false;
+            }
+
+            if (var14) {
+               var11.add(var13.index);
+            } else {
+               var12.remove();
+            }
+         }
+
+         int[] var16 = IntStream.range(0, var8).filter((var1x) -> {
+            return !var11.contains(var1x);
+         }).toArray();
+         if (var16.length > 0) {
+            LOGGER.warn("Unused frames in sprite {}: {}", this.name, Arrays.toString(var16));
+         }
       }
 
+      if (var9.size() <= 1) {
+         return null;
+      } else {
+         TextureAtlasSprite.InterpolationData var15 = var5.isInterpolatedFrames() ? new TextureAtlasSprite.InterpolationData(var1, var4) : null;
+         return new TextureAtlasSprite.AnimatedTexture(ImmutableList.copyOf(var9), var6, var15);
+      }
    }
 
-   private void upload(int var1) {
-      int var2 = this.framesX[var1] * this.info.width;
-      int var3 = this.framesY[var1] * this.info.height;
-      this.upload(var2, var3, this.mainImage);
-   }
-
    private void upload(int var1, int var2, NativeImage[] var3) {
       for(int var4 = 0; var4 < this.mainImage.length; ++var4) {
-         var3[var4].upload(var4, this.x >> var4, this.y >> var4, var1 >> var4, var2 >> var4, this.info.width >> var4, this.info.height >> var4, this.mainImage.length > 1, false);
+         var3[var4].upload(var4, this.x >> var4, this.y >> var4, var1 >> var4, var2 >> var4, this.width >> var4, this.height >> var4, this.mainImage.length > 1, false);
       }
 
    }
 
    public int getWidth() {
-      return this.info.width;
+      return this.width;
    }
 
    public int getHeight() {
-      return this.info.height;
+      return this.height;
    }
 
    public float getU0() {
       return this.u0;
    }
@@ -177,19 +184,19 @@
       float var3 = this.v1 - this.v0;
       return this.v0 + var3 * (float)var1 / 16.0F;
    }
 
    public ResourceLocation getName() {
-      return this.info.name;
+      return this.name;
    }
 
    public TextureAtlas atlas() {
       return this.atlas;
    }
 
-   public int getFrameCount() {
-      return this.framesX.length;
+   public IntStream getUniqueFrames() {
+      return this.animatedTexture != null ? this.animatedTexture.getUniqueFrames() : IntStream.of(1);
    }
 
    public void close() {
       NativeImage[] var1 = this.mainImage;
       int var2 = var1.length;
@@ -199,68 +206,136 @@
          if (var4 != null) {
             var4.close();
          }
       }
 
-      if (this.interpolationData != null) {
-         this.interpolationData.close();
+      if (this.animatedTexture != null) {
+         this.animatedTexture.close();
       }
 
    }
 
    public String toString() {
-      int var1 = this.framesX.length;
-      return "TextureAtlasSprite{name='" + this.info.name + '\'' + ", frameCount=" + var1 + ", x=" + this.x + ", y=" + this.y + ", height=" + this.info.height + ", width=" + this.info.width + ", u0=" + this.u0 + ", u1=" + this.u1 + ", v0=" + this.v0 + ", v1=" + this.v1 + '}';
+      return "TextureAtlasSprite{name='" + this.name + '\'' + ", frameCount=" + this.getFrameCount() + ", x=" + this.x + ", y=" + this.y + ", height=" + this.height + ", width=" + this.width + ", u0=" + this.u0 + ", u1=" + this.u1 + ", v0=" + this.v0 + ", v1=" + this.v1 + '}';
    }
 
    public boolean isTransparent(int var1, int var2, int var3) {
-      return (this.mainImage[0].getPixelRGBA(var2 + this.framesX[var1] * this.info.width, var3 + this.framesY[var1] * this.info.height) >> 24 & 255) == 0;
+      int var4 = var2;
+      int var5 = var3;
+      if (this.animatedTexture != null) {
+         var4 = var2 + this.animatedTexture.getFrameX(var1) * this.width;
+         var5 = var3 + this.animatedTexture.getFrameY(var1) * this.height;
+      }
+
+      return (this.mainImage[0].getPixelRGBA(var4, var5) >> 24 & 255) == 0;
    }
 
    public void uploadFirstFrame() {
-      this.upload(0);
+      if (this.animatedTexture != null) {
+         this.animatedTexture.uploadFirstFrame();
+      } else {
+         this.upload(0, 0, this.mainImage);
+      }
+
    }
 
    private float atlasSize() {
-      float var1 = (float)this.info.width / (this.u1 - this.u0);
-      float var2 = (float)this.info.height / (this.v1 - this.v0);
+      float var1 = (float)this.width / (this.u1 - this.u0);
+      float var2 = (float)this.height / (this.v1 - this.v0);
       return Math.max(var2, var1);
    }
 
    public float uvShrinkRatio() {
       return 4.0F / this.atlasSize();
    }
 
-   public void cycleFrames() {
-      ++this.subFrame;
-      if (this.subFrame >= this.metadata.getFrameTime(this.frame)) {
-         int var1 = this.metadata.getFrameIndex(this.frame);
-         int var2 = this.metadata.getFrameCount() == 0 ? this.getFrameCount() : this.metadata.getFrameCount();
-         this.frame = (this.frame + 1) % var2;
-         this.subFrame = 0;
-         int var3 = this.metadata.getFrameIndex(this.frame);
-         if (var1 != var3 && var3 >= 0 && var3 < this.getFrameCount()) {
-            this.upload(var3);
+   @Nullable
+   public Tickable getAnimationTicker() {
+      return this.animatedTexture;
+   }
+
+   public VertexConsumer wrap(VertexConsumer var1) {
+      return new SpriteCoordinateExpander(var1, this);
+   }
+
+   class AnimatedTexture implements Tickable, AutoCloseable {
+      private int frame;
+      private int subFrame;
+      private final List<TextureAtlasSprite.FrameInfo> frames;
+      private final int frameRowSize;
+      @Nullable
+      private final TextureAtlasSprite.InterpolationData interpolationData;
+
+      private AnimatedTexture(List<TextureAtlasSprite.FrameInfo> var2, int var3, TextureAtlasSprite.InterpolationData var4) {
+         this.frames = var2;
+         this.frameRowSize = var3;
+         this.interpolationData = var4;
+      }
+
+      private int getFrameX(int var1) {
+         return var1 % this.frameRowSize;
+      }
+
+      private int getFrameY(int var1) {
+         return var1 / this.frameRowSize;
+      }
+
+      private void uploadFrame(int var1) {
+         int var2 = this.getFrameX(var1) * TextureAtlasSprite.this.width;
+         int var3 = this.getFrameY(var1) * TextureAtlasSprite.this.height;
+         TextureAtlasSprite.this.upload(var2, var3, TextureAtlasSprite.this.mainImage);
+      }
+
+      public void close() {
+         if (this.interpolationData != null) {
+            this.interpolationData.close();
          }
-      } else if (this.interpolationData != null) {
-         if (!RenderSystem.isOnRenderThread()) {
-            RenderSystem.recordRenderCall(() -> {
-               var0.uploadInterpolatedFrame();
-            });
-         } else {
-            this.interpolationData.uploadInterpolatedFrame();
+
+      }
+
+      public void tick() {
+         ++this.subFrame;
+         TextureAtlasSprite.FrameInfo var1 = (TextureAtlasSprite.FrameInfo)this.frames.get(this.frame);
+         if (this.subFrame >= var1.time) {
+            int var2 = var1.index;
+            this.frame = (this.frame + 1) % this.frames.size();
+            this.subFrame = 0;
+            int var3 = ((TextureAtlasSprite.FrameInfo)this.frames.get(this.frame)).index;
+            if (var2 != var3) {
+               this.uploadFrame(var3);
+            }
+         } else if (this.interpolationData != null) {
+            if (!RenderSystem.isOnRenderThread()) {
+               RenderSystem.recordRenderCall(() -> {
+                  this.interpolationData.uploadInterpolatedFrame(this);
+               });
+            } else {
+               this.interpolationData.uploadInterpolatedFrame(this);
+            }
          }
+
       }
 
-   }
+      public void uploadFirstFrame() {
+         this.uploadFrame(((TextureAtlasSprite.FrameInfo)this.frames.get(0)).index);
+      }
 
-   public boolean isAnimation() {
-      return this.metadata.getFrameCount() > 1;
+      public IntStream getUniqueFrames() {
+         return this.frames.stream().mapToInt((var0) -> {
+            return var0.index;
+         }).distinct();
+      }
    }
 
-   public VertexConsumer wrap(VertexConsumer var1) {
-      return new SpriteCoordinateExpander(var1, this);
+   static class FrameInfo {
+      private final int index;
+      private final int time;
+
+      private FrameInfo(int var1, int var2) {
+         this.index = var1;
+         this.time = var2;
+      }
    }
 
    final class InterpolationData implements AutoCloseable {
       private final NativeImage[] activeFrame;
 
@@ -275,39 +350,39 @@
             }
          }
 
       }
 
-      private void uploadInterpolatedFrame() {
-         double var1 = 1.0D - (double)TextureAtlasSprite.this.subFrame / (double)TextureAtlasSprite.this.metadata.getFrameTime(TextureAtlasSprite.this.frame);
-         int var3 = TextureAtlasSprite.this.metadata.getFrameIndex(TextureAtlasSprite.this.frame);
-         int var4 = TextureAtlasSprite.this.metadata.getFrameCount() == 0 ? TextureAtlasSprite.this.getFrameCount() : TextureAtlasSprite.this.metadata.getFrameCount();
-         int var5 = TextureAtlasSprite.this.metadata.getFrameIndex((TextureAtlasSprite.this.frame + 1) % var4);
-         if (var3 != var5 && var5 >= 0 && var5 < TextureAtlasSprite.this.getFrameCount()) {
-            for(int var6 = 0; var6 < this.activeFrame.length; ++var6) {
-               int var7 = TextureAtlasSprite.this.info.width >> var6;
-               int var8 = TextureAtlasSprite.this.info.height >> var6;
+      private void uploadInterpolatedFrame(TextureAtlasSprite.AnimatedTexture var1) {
+         TextureAtlasSprite.FrameInfo var2 = (TextureAtlasSprite.FrameInfo)var1.frames.get(var1.frame);
+         double var3 = 1.0D - (double)var1.subFrame / (double)var2.time;
+         int var5 = var2.index;
+         int var6 = ((TextureAtlasSprite.FrameInfo)var1.frames.get((var1.frame + 1) % var1.frames.size())).index;
+         if (var5 != var6) {
+            for(int var7 = 0; var7 < this.activeFrame.length; ++var7) {
+               int var8 = TextureAtlasSprite.this.width >> var7;
+               int var9 = TextureAtlasSprite.this.height >> var7;
 
-               for(int var9 = 0; var9 < var8; ++var9) {
-                  for(int var10 = 0; var10 < var7; ++var10) {
-                     int var11 = this.getPixel(var3, var6, var10, var9);
-                     int var12 = this.getPixel(var5, var6, var10, var9);
-                     int var13 = this.mix(var1, var11 >> 16 & 255, var12 >> 16 & 255);
-                     int var14 = this.mix(var1, var11 >> 8 & 255, var12 >> 8 & 255);
-                     int var15 = this.mix(var1, var11 & 255, var12 & 255);
-                     this.activeFrame[var6].setPixelRGBA(var10, var9, var11 & -16777216 | var13 << 16 | var14 << 8 | var15);
+               for(int var10 = 0; var10 < var9; ++var10) {
+                  for(int var11 = 0; var11 < var8; ++var11) {
+                     int var12 = this.getPixel(var1, var5, var7, var11, var10);
+                     int var13 = this.getPixel(var1, var6, var7, var11, var10);
+                     int var14 = this.mix(var3, var12 >> 16 & 255, var13 >> 16 & 255);
+                     int var15 = this.mix(var3, var12 >> 8 & 255, var13 >> 8 & 255);
+                     int var16 = this.mix(var3, var12 & 255, var13 & 255);
+                     this.activeFrame[var7].setPixelRGBA(var11, var10, var12 & -16777216 | var14 << 16 | var15 << 8 | var16);
                   }
                }
             }
 
             TextureAtlasSprite.this.upload(0, 0, this.activeFrame);
          }
 
       }
 
-      private int getPixel(int var1, int var2, int var3, int var4) {
-         return TextureAtlasSprite.this.mainImage[var2].getPixelRGBA(var3 + (TextureAtlasSprite.this.framesX[var1] * TextureAtlasSprite.this.info.width >> var2), var4 + (TextureAtlasSprite.this.framesY[var1] * TextureAtlasSprite.this.info.height >> var2));
+      private int getPixel(TextureAtlasSprite.AnimatedTexture var1, int var2, int var3, int var4, int var5) {
+         return TextureAtlasSprite.this.mainImage[var3].getPixelRGBA(var4 + (var1.getFrameX(var2) * TextureAtlasSprite.this.width >> var3), var5 + (var1.getFrameY(var2) * TextureAtlasSprite.this.height >> var3));
       }
 
       private int mix(double var1, int var3, int var4) {
          return (int)(var1 * (double)var3 + (1.0D - var1) * (double)var4);
       }
