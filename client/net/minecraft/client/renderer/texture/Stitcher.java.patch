--- net/minecraft/client/renderer/texture/Stitcher.java
+++ net/minecraft/client/renderer/texture/Stitcher.java
@@ -80,11 +80,11 @@
          });
       }
 
    }
 
-   private static int smallestFittingMinTexel(int var0, int var1) {
+   static int smallestFittingMinTexel(int var0, int var1) {
       return (var0 >> var1) + ((var0 & (1 << var1) - 1) == 0 ? 0 : 1) << var1;
    }
 
    private boolean addToStorage(Stitcher.Holder var1) {
       Iterator var2 = this.storage.iterator();
@@ -137,10 +137,26 @@
          this.storage.add(var11);
          return true;
       }
    }
 
+   private static class Holder {
+      public final TextureAtlasSprite.Info spriteInfo;
+      public final int width;
+      public final int height;
+
+      public Holder(TextureAtlasSprite.Info var1, int var2) {
+         this.spriteInfo = var1;
+         this.width = Stitcher.smallestFittingMinTexel(var1.width(), var2);
+         this.height = Stitcher.smallestFittingMinTexel(var1.height(), var2);
+      }
+
+      public String toString() {
+         return "Holder{width=" + this.width + ", height=" + this.height + "}";
+      }
+   }
+
    public static class Region {
       private final int originX;
       private final int originY;
       private final int width;
       private final int height;
@@ -231,29 +247,13 @@
          }
 
       }
 
       public String toString() {
-         return "Slot{originX=" + this.originX + ", originY=" + this.originY + ", width=" + this.width + ", height=" + this.height + ", texture=" + this.holder + ", subSlots=" + this.subSlots + '}';
+         return "Slot{originX=" + this.originX + ", originY=" + this.originY + ", width=" + this.width + ", height=" + this.height + ", texture=" + this.holder + ", subSlots=" + this.subSlots + "}";
       }
    }
 
-   static class Holder {
-      public final TextureAtlasSprite.Info spriteInfo;
-      public final int width;
-      public final int height;
-
-      public Holder(TextureAtlasSprite.Info var1, int var2) {
-         this.spriteInfo = var1;
-         this.width = Stitcher.smallestFittingMinTexel(var1.width(), var2);
-         this.height = Stitcher.smallestFittingMinTexel(var1.height(), var2);
-      }
-
-      public String toString() {
-         return "Holder{width=" + this.width + ", height=" + this.height + '}';
-      }
-   }
-
    public interface SpriteLoader {
       void load(TextureAtlasSprite.Info var1, int var2, int var3, int var4, int var5);
    }
 }
