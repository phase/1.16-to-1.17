--- net/minecraft/client/renderer/texture/TextureAtlas.java
+++ net/minecraft/client/renderer/texture/TextureAtlas.java
@@ -38,22 +38,23 @@
    private static final Logger LOGGER = LogManager.getLogger();
    @Deprecated
    public static final ResourceLocation LOCATION_BLOCKS;
    @Deprecated
    public static final ResourceLocation LOCATION_PARTICLES;
-   private final List<TextureAtlasSprite> animatedTextures = Lists.newArrayList();
+   private static final String FILE_EXTENSION = ".png";
+   private final List<Tickable> animatedTextures = Lists.newArrayList();
    private final Set<ResourceLocation> sprites = Sets.newHashSet();
    private final Map<ResourceLocation, TextureAtlasSprite> texturesByName = Maps.newHashMap();
    private final ResourceLocation location;
    private final int maxSupportedTextureSize;
 
    public TextureAtlas(ResourceLocation var1) {
       this.location = var1;
       this.maxSupportedTextureSize = RenderSystem.maxSupportedTextureSize();
    }
 
-   public void load(ResourceManager var1) throws IOException {
+   public void load(ResourceManager var1) {
    }
 
    public void reload(TextureAtlas.Preparations var1) {
       this.sprites.clear();
       this.sprites.addAll(var1.sprites);
@@ -74,12 +75,13 @@
             var6.setDetail("Atlas path", (Object)this.location);
             var6.setDetail("Sprite", (Object)var3);
             throw new ReportedException(var5);
          }
 
-         if (var3.isAnimation()) {
-            this.animatedTextures.add(var3);
+         Tickable var4 = var3.getAnimationTicker();
+         if (var4 != null) {
+            this.animatedTextures.add(var4);
          }
       }
 
    }
 
@@ -151,43 +153,40 @@
                ResourceLocation var4x = this.getResourceLocation(var6);
 
                TextureAtlasSprite.Info var5;
                try {
                   Resource var6x = var1.getResource(var4x);
-                  Throwable var7 = null;
 
                   try {
-                     PngInfo var8 = new PngInfo(var6x.toString(), var6x.getInputStream());
-                     AnimationMetadataSection var9 = (AnimationMetadataSection)var6x.getMetadata(AnimationMetadataSection.SERIALIZER);
-                     if (var9 == null) {
-                        var9 = AnimationMetadataSection.EMPTY;
+                     PngInfo var7 = new PngInfo(var6x.toString(), var6x.getInputStream());
+                     AnimationMetadataSection var8 = (AnimationMetadataSection)var6x.getMetadata(AnimationMetadataSection.SERIALIZER);
+                     if (var8 == null) {
+                        var8 = AnimationMetadataSection.EMPTY;
                      }
 
-                     Pair var10 = var9.getFrameSize(var8.width, var8.height);
-                     var5 = new TextureAtlasSprite.Info(var6, (Integer)var10.getFirst(), (Integer)var10.getSecond(), var9);
-                  } catch (Throwable var20) {
-                     var7 = var20;
-                     throw var20;
-                  } finally {
+                     Pair var9 = var8.getFrameSize(var7.width, var7.height);
+                     var5 = new TextureAtlasSprite.Info(var6, (Integer)var9.getFirst(), (Integer)var9.getSecond(), var8);
+                  } catch (Throwable var11) {
                      if (var6x != null) {
-                        if (var7 != null) {
-                           try {
-                              var6x.close();
-                           } catch (Throwable var19) {
-                              var7.addSuppressed(var19);
-                           }
-                        } else {
+                        try {
                            var6x.close();
+                        } catch (Throwable var10) {
+                           var11.addSuppressed(var10);
                         }
                      }
 
+                     throw var11;
                   }
-               } catch (RuntimeException var22) {
-                  LOGGER.error("Unable to parse metadata from {} : {}", var4x, var22);
+
+                  if (var6x != null) {
+                     var6x.close();
+                  }
+               } catch (RuntimeException var12) {
+                  LOGGER.error("Unable to parse metadata from {} : {}", var4x, var12);
                   return;
-               } catch (IOException var23) {
-                  LOGGER.error("Using missing texture, unable to load {} : {}", var4x, var23);
+               } catch (IOException var13) {
+                  LOGGER.error("Using missing texture, unable to load {} : {}", var4x, var13);
                   return;
                }
 
                var4.add(var5);
             }, Util.backgroundExecutor()));
@@ -224,40 +223,37 @@
    private TextureAtlasSprite load(ResourceManager var1, TextureAtlasSprite.Info var2, int var3, int var4, int var5, int var6, int var7) {
       ResourceLocation var8 = this.getResourceLocation(var2.name());
 
       try {
          Resource var9 = var1.getResource(var8);
-         Throwable var10 = null;
 
-         TextureAtlasSprite var12;
+         TextureAtlasSprite var11;
          try {
-            NativeImage var11 = NativeImage.read(var9.getInputStream());
-            var12 = new TextureAtlasSprite(this, var2, var5, var3, var4, var6, var7, var11);
-         } catch (Throwable var23) {
-            var10 = var23;
-            throw var23;
-         } finally {
+            NativeImage var10 = NativeImage.read(var9.getInputStream());
+            var11 = new TextureAtlasSprite(this, var2, var5, var3, var4, var6, var7, var10);
+         } catch (Throwable var13) {
             if (var9 != null) {
-               if (var10 != null) {
-                  try {
-                     var9.close();
-                  } catch (Throwable var22) {
-                     var10.addSuppressed(var22);
-                  }
-               } else {
+               try {
                   var9.close();
+               } catch (Throwable var12) {
+                  var13.addSuppressed(var12);
                }
             }
 
+            throw var13;
          }
 
-         return var12;
-      } catch (RuntimeException var25) {
-         LOGGER.error("Unable to parse metadata from {}", var8, var25);
+         if (var9 != null) {
+            var9.close();
+         }
+
+         return var11;
+      } catch (RuntimeException var14) {
+         LOGGER.error("Unable to parse metadata from {}", var8, var14);
          return null;
-      } catch (IOException var26) {
-         LOGGER.error("Using missing texture, unable to load {}", var8, var26);
+      } catch (IOException var15) {
+         LOGGER.error("Using missing texture, unable to load {}", var8, var15);
          return null;
       }
    }
 
    private ResourceLocation getResourceLocation(ResourceLocation var1) {
@@ -267,12 +263,12 @@
    public void cycleAnimationFrames() {
       this.bind();
       Iterator var1 = this.animatedTextures.iterator();
 
       while(var1.hasNext()) {
-         TextureAtlasSprite var2 = (TextureAtlasSprite)var1.next();
-         var2.cycleFrames();
+         Tickable var2 = (Tickable)var1.next();
+         var2.tick();
       }
 
    }
 
    public void tick() {
