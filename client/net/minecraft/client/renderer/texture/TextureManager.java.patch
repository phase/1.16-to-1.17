--- net/minecraft/client/renderer/texture/TextureManager.java
+++ net/minecraft/client/renderer/texture/TextureManager.java
@@ -5,16 +5,17 @@
 import com.mojang.blaze3d.platform.TextureUtil;
 import com.mojang.blaze3d.systems.RenderSystem;
 import com.mojang.realmsclient.RealmsMainScreen;
 import java.io.IOException;
 import java.util.Iterator;
+import java.util.Locale;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Set;
 import java.util.Map.Entry;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.Executor;
-import javax.annotation.Nullable;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.components.AbstractWidget;
@@ -36,11 +37,11 @@
 
    public TextureManager(ResourceManager var1) {
       this.resourceManager = var1;
    }
 
-   public void bind(ResourceLocation var1) {
+   public void bindForSetup(ResourceLocation var1) {
       if (!RenderSystem.isOnRenderThread()) {
          RenderSystem.recordRenderCall(() -> {
             this._bind(var1);
          });
       } else {
@@ -106,25 +107,34 @@
          });
          throw new ReportedException(var4);
       }
    }
 
-   @Nullable
    public AbstractTexture getTexture(ResourceLocation var1) {
-      return (AbstractTexture)this.byPath.get(var1);
+      Object var2 = (AbstractTexture)this.byPath.get(var1);
+      if (var2 == null) {
+         var2 = new SimpleTexture(var1);
+         this.register((ResourceLocation)var1, (AbstractTexture)var2);
+      }
+
+      return (AbstractTexture)var2;
    }
 
+   public AbstractTexture getTexture(ResourceLocation var1, AbstractTexture var2) {
+      return (AbstractTexture)this.byPath.getOrDefault(var1, var2);
+   }
+
    public ResourceLocation register(String var1, DynamicTexture var2) {
       Integer var3 = (Integer)this.prefixRegister.get(var1);
       if (var3 == null) {
          var3 = 1;
       } else {
          var3 = var3 + 1;
       }
 
       this.prefixRegister.put(var1, var3);
-      ResourceLocation var4 = new ResourceLocation(String.format("dynamic/%s_%d", var1, var3));
+      ResourceLocation var4 = new ResourceLocation(String.format(Locale.ROOT, "dynamic/%s_%d", var1, var3));
       this.register((ResourceLocation)var4, (AbstractTexture)var2);
       return var4;
    }
 
    public CompletableFuture<Void> preload(ResourceLocation var1, Executor var2) {
@@ -139,10 +149,11 @@
       }
    }
 
    private static void execute(Runnable var0) {
       Minecraft.getInstance().execute(() -> {
+         Objects.requireNonNull(var0);
          RenderSystem.recordRenderCall(var0::run);
       });
    }
 
    public void tick() {
@@ -154,12 +165,12 @@
       }
 
    }
 
    public void release(ResourceLocation var1) {
-      AbstractTexture var2 = this.getTexture(var1);
-      if (var2 != null) {
+      AbstractTexture var2 = this.getTexture(var1, MissingTextureAtlasSprite.getTexture());
+      if (var2 != MissingTextureAtlasSprite.getTexture()) {
          TextureUtil.releaseTextureId(var2.getId());
       }
 
    }
 
@@ -170,11 +181,11 @@
       this.prefixRegister.clear();
    }
 
    public CompletableFuture<Void> reload(PreparableReloadListener.PreparationBarrier var1, ResourceManager var2, ProfilerFiller var3, ProfilerFiller var4, Executor var5, Executor var6) {
       CompletableFuture var10000 = CompletableFuture.allOf(TitleScreen.preloadResources(this, var5), this.preload(AbstractWidget.WIDGETS_LOCATION, var5));
-      var1.getClass();
+      Objects.requireNonNull(var1);
       return var10000.thenCompose(var1::wait).thenAcceptAsync((var3x) -> {
          MissingTextureAtlasSprite.getTexture();
          RealmsMainScreen.updateTeaserImages(this.resourceManager);
          Iterator var4 = this.byPath.entrySet().iterator();
 
@@ -191,9 +202,10 @@
             }
 
             return;
          }
       }, (var0) -> {
+         Objects.requireNonNull(var0);
          RenderSystem.recordRenderCall(var0::run);
       });
    }
 }
