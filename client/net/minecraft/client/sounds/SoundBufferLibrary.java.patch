--- net/minecraft/client/sounds/SoundBufferLibrary.java
+++ net/minecraft/client/sounds/SoundBufferLibrary.java
@@ -27,79 +27,66 @@
    public CompletableFuture<SoundBuffer> getCompleteBuffer(ResourceLocation var1) {
       return (CompletableFuture)this.cache.computeIfAbsent(var1, (var1x) -> {
          return CompletableFuture.supplyAsync(() -> {
             try {
                Resource var2 = this.resourceManager.getResource(var1x);
-               Throwable var3 = null;
 
-               SoundBuffer var9;
+               SoundBuffer var6;
                try {
-                  InputStream var4 = var2.getInputStream();
-                  Throwable var5 = null;
+                  InputStream var3 = var2.getInputStream();
 
                   try {
-                     OggAudioStream var6 = new OggAudioStream(var4);
-                     Throwable var7 = null;
+                     OggAudioStream var4 = new OggAudioStream(var3);
 
                      try {
-                        ByteBuffer var8 = var6.readAll();
-                        var9 = new SoundBuffer(var8, var6.getFormat());
-                     } catch (Throwable var56) {
-                        var7 = var56;
-                        throw var56;
-                     } finally {
-                        if (var6 != null) {
-                           if (var7 != null) {
-                              try {
-                                 var6.close();
-                              } catch (Throwable var55) {
-                                 var7.addSuppressed(var55);
-                              }
-                           } else {
-                              var6.close();
-                           }
+                        ByteBuffer var5 = var4.readAll();
+                        var6 = new SoundBuffer(var5, var4.getFormat());
+                     } catch (Throwable var10) {
+                        try {
+                           var4.close();
+                        } catch (Throwable var9) {
+                           var10.addSuppressed(var9);
                         }
 
+                        throw var10;
                      }
-                  } catch (Throwable var58) {
-                     var5 = var58;
-                     throw var58;
-                  } finally {
-                     if (var4 != null) {
-                        if (var5 != null) {
-                           try {
-                              var4.close();
-                           } catch (Throwable var54) {
-                              var5.addSuppressed(var54);
-                           }
-                        } else {
-                           var4.close();
+
+                     var4.close();
+                  } catch (Throwable var11) {
+                     if (var3 != null) {
+                        try {
+                           var3.close();
+                        } catch (Throwable var8) {
+                           var11.addSuppressed(var8);
                         }
                      }
 
+                     throw var11;
                   }
-               } catch (Throwable var60) {
-                  var3 = var60;
-                  throw var60;
-               } finally {
+
+                  if (var3 != null) {
+                     var3.close();
+                  }
+               } catch (Throwable var12) {
                   if (var2 != null) {
-                     if (var3 != null) {
-                        try {
-                           var2.close();
-                        } catch (Throwable var53) {
-                           var3.addSuppressed(var53);
-                        }
-                     } else {
+                     try {
                         var2.close();
+                     } catch (Throwable var7) {
+                        var12.addSuppressed(var7);
                      }
                   }
 
+                  throw var12;
                }
 
-               return var9;
-            } catch (IOException var62) {
-               throw new CompletionException(var62);
+               if (var2 != null) {
+                  var2.close();
+               }
+
+               return var6;
+            } catch (IOException var13) {
+               throw new CompletionException(var13);
             }
          }, Util.backgroundExecutor());
       });
    }
 
