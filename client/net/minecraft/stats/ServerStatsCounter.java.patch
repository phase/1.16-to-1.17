--- net/minecraft/stats/ServerStatsCounter.java
+++ net/minecraft/stats/ServerStatsCounter.java
@@ -15,10 +15,11 @@
 import java.io.IOException;
 import java.io.StringReader;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Iterator;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.Set;
 import java.util.Map.Entry;
 import net.minecraft.SharedConstants;
 import net.minecraft.Util;
@@ -38,11 +39,10 @@
 public class ServerStatsCounter extends StatsCounter {
    private static final Logger LOGGER = LogManager.getLogger();
    private final MinecraftServer server;
    private final File file;
    private final Set<Stat<?>> dirty = Sets.newHashSet();
-   private int lastStatRequest = -300;
 
    public ServerStatsCounter(MinecraftServer var1, File var2) {
       this.server = var1;
       this.file = var2;
       if (var2.isFile()) {
@@ -78,86 +78,82 @@
    }
 
    public void parseLocal(DataFixer var1, String var2) {
       try {
          JsonReader var3 = new JsonReader(new StringReader(var2));
-         Throwable var4 = null;
 
-         try {
-            var3.setLenient(false);
-            JsonElement var5 = Streams.parse(var3);
-            if (!var5.isJsonNull()) {
-               CompoundTag var6 = fromJson(var5.getAsJsonObject());
-               if (!var6.contains("DataVersion", 99)) {
-                  var6.putInt("DataVersion", 1343);
+         label66: {
+            try {
+               var3.setLenient(false);
+               JsonElement var4 = Streams.parse(var3);
+               if (var4.isJsonNull()) {
+                  LOGGER.error("Unable to parse Stat data from {}", this.file);
+                  break label66;
                }
 
-               var6 = NbtUtils.update(var1, DataFixTypes.STATS, var6, var6.getInt("DataVersion"));
-               if (var6.contains("stats", 10)) {
-                  CompoundTag var7 = var6.getCompound("stats");
-                  Iterator var8 = var7.getAllKeys().iterator();
+               CompoundTag var5 = fromJson(var4.getAsJsonObject());
+               if (!var5.contains("DataVersion", 99)) {
+                  var5.putInt("DataVersion", 1343);
+               }
 
-                  while(var8.hasNext()) {
-                     String var9 = (String)var8.next();
-                     if (var7.contains(var9, 10)) {
-                        Util.ifElse(Registry.STAT_TYPE.getOptional(new ResourceLocation(var9)), (var3x) -> {
-                           CompoundTag var4 = var7.getCompound(var9);
+               var5 = NbtUtils.update(var1, DataFixTypes.STATS, var5, var5.getInt("DataVersion"));
+               if (var5.contains("stats", 10)) {
+                  CompoundTag var6 = var5.getCompound("stats");
+                  Iterator var7 = var6.getAllKeys().iterator();
+
+                  while(var7.hasNext()) {
+                     String var8 = (String)var7.next();
+                     if (var6.contains(var8, 10)) {
+                        Util.ifElse(Registry.STAT_TYPE.getOptional(new ResourceLocation(var8)), (var3x) -> {
+                           CompoundTag var4 = var6.getCompound(var8);
                            Iterator var5 = var4.getAllKeys().iterator();
 
                            while(var5.hasNext()) {
-                              String var6 = (String)var5.next();
-                              if (var4.contains(var6, 99)) {
-                                 Util.ifElse(this.getStat(var3x, var6), (var3) -> {
-                                    this.stats.put(var3, var4.getInt(var6));
+                              String var6x = (String)var5.next();
+                              if (var4.contains(var6x, 99)) {
+                                 Util.ifElse(this.getStat(var3x, var6x), (var3) -> {
+                                    this.stats.put(var3, var4.getInt(var6x));
                                  }, () -> {
-                                    LOGGER.warn("Invalid statistic in {}: Don't know what {} is", this.file, var6);
+                                    LOGGER.warn("Invalid statistic in {}: Don't know what {} is", this.file, var6x);
                                  });
                               } else {
-                                 LOGGER.warn("Invalid statistic value in {}: Don't know what {} is for key {}", this.file, var4.get(var6), var6);
+                                 LOGGER.warn("Invalid statistic value in {}: Don't know what {} is for key {}", this.file, var4.get(var6x), var6x);
                               }
                            }
 
                         }, () -> {
-                           LOGGER.warn("Invalid statistic type in {}: Don't know what {} is", this.file, var9);
+                           LOGGER.warn("Invalid statistic type in {}: Don't know what {} is", this.file, var8);
                         });
                      }
                   }
                }
-
-               return;
-            }
-
-            LOGGER.error("Unable to parse Stat data from {}", this.file);
-         } catch (Throwable var19) {
-            var4 = var19;
-            throw var19;
-         } finally {
-            if (var3 != null) {
-               if (var4 != null) {
-                  try {
-                     var3.close();
-                  } catch (Throwable var18) {
-                     var4.addSuppressed(var18);
-                  }
-               } else {
+            } catch (Throwable var10) {
+               try {
                   var3.close();
+               } catch (Throwable var9) {
+                  var10.addSuppressed(var9);
                }
+
+               throw var10;
             }
 
+            var3.close();
+            return;
          }
 
-      } catch (IOException | JsonParseException var21) {
-         LOGGER.error("Unable to parse Stat data from {}", this.file, var21);
+         var3.close();
+      } catch (IOException | JsonParseException var11) {
+         LOGGER.error("Unable to parse Stat data from {}", this.file, var11);
       }
    }
 
    private <T> Optional<Stat<T>> getStat(StatType<T> var1, String var2) {
       Optional var10000 = Optional.ofNullable(ResourceLocation.tryParse(var2));
       Registry var10001 = var1.getRegistry();
-      var10001.getClass();
+      Objects.requireNonNull(var10001);
       var10000 = var10000.flatMap(var10001::getOptional);
-      var1.getClass();
+      Objects.requireNonNull(var1);
       return var10000.map(var1::get);
    }
 
    private static CompoundTag fromJson(JsonObject var0) {
       CompoundTag var1 = new CompoundTag();
@@ -194,11 +190,11 @@
       JsonObject var5 = new JsonObject();
       Iterator var6 = var1.entrySet().iterator();
 
       while(var6.hasNext()) {
          Entry var8 = (Entry)var6.next();
-         var5.add(Registry.STAT_TYPE.getKey(var8.getKey()).toString(), (JsonElement)var8.getValue());
+         var5.add(Registry.STAT_TYPE.getKey((StatType)var8.getKey()).toString(), (JsonElement)var8.getValue());
       }
 
       JsonObject var7 = new JsonObject();
       var7.add("stats", var5);
       var7.addProperty("DataVersion", SharedConstants.getCurrentVersion().getWorldVersion());
@@ -212,20 +208,16 @@
    public void markAllDirty() {
       this.dirty.addAll(this.stats.keySet());
    }
 
    public void sendStats(ServerPlayer var1) {
-      int var2 = this.server.getTickCount();
-      Object2IntOpenHashMap var3 = new Object2IntOpenHashMap();
-      if (var2 - this.lastStatRequest > 300) {
-         this.lastStatRequest = var2;
-         Iterator var4 = this.getDirty().iterator();
+      Object2IntOpenHashMap var2 = new Object2IntOpenHashMap();
+      Iterator var3 = this.getDirty().iterator();
 
-         while(var4.hasNext()) {
-            Stat var5 = (Stat)var4.next();
-            var3.put(var5, this.getValue(var5));
-         }
+      while(var3.hasNext()) {
+         Stat var4 = (Stat)var3.next();
+         var2.put(var4, this.getValue(var4));
       }
 
-      var1.connection.send(new ClientboundAwardStatsPacket(var3));
+      var1.connection.send(new ClientboundAwardStatsPacket(var2));
    }
 }
