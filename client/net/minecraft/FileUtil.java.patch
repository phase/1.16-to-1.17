--- net/minecraft/FileUtil.java
+++ net/minecraft/FileUtil.java
@@ -1,21 +1,27 @@
 package net.minecraft;
 
+import java.io.File;
 import java.io.IOException;
 import java.nio.file.FileAlreadyExistsException;
 import java.nio.file.Files;
 import java.nio.file.InvalidPathException;
 import java.nio.file.Path;
 import java.nio.file.Paths;
 import java.util.Iterator;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
+import org.apache.commons.io.FilenameUtils;
 
 public class FileUtil {
    private static final Pattern COPY_COUNTER_PATTERN = Pattern.compile("(<name>.*) \\((<count>\\d*)\\)", 66);
+   private static final int MAX_FILE_NAME = 255;
    private static final Pattern RESERVED_WINDOWS_FILENAMES = Pattern.compile(".*\\.|(?:COM|CLOCK\\$|CON|PRN|AUX|NUL|COM[1-9]|LPT[1-9])(?:\\..*)?", 2);
 
+   public FileUtil() {
+   }
+
    public static String findAvailableName(Path var0, String var1, String var2) throws IOException {
       char[] var3 = SharedConstants.ILLEGAL_FILE_CHARACTERS;
       int var4 = var3.length;
 
       for(int var5 = 0; var5 < var4; ++var5) {
@@ -91,6 +97,14 @@
          throw new InvalidPathException(var3, "empty resource name");
       } else {
          return var0.resolve(var4);
       }
    }
+
+   public static String getFullResourcePath(String var0) {
+      return FilenameUtils.getFullPath(var0).replace(File.separator, "/");
+   }
+
+   public static String normalizeResourcePath(String var0) {
+      return FilenameUtils.normalize(var0).replace(File.separator, "/");
+   }
 }
