--- net/minecraft/advancements/critereon/DamagePredicate.java
+++ net/minecraft/advancements/critereon/DamagePredicate.java
@@ -8,38 +8,38 @@
 import net.minecraft.util.GsonHelper;
 import net.minecraft.world.damagesource.DamageSource;
 
 public class DamagePredicate {
    public static final DamagePredicate ANY = DamagePredicate.Builder.damageInstance().build();
-   private final MinMaxBounds.Floats dealtDamage;
-   private final MinMaxBounds.Floats takenDamage;
+   private final MinMaxBounds.Doubles dealtDamage;
+   private final MinMaxBounds.Doubles takenDamage;
    private final EntityPredicate sourceEntity;
    private final Boolean blocked;
    private final DamageSourcePredicate type;
 
    public DamagePredicate() {
-      this.dealtDamage = MinMaxBounds.Floats.ANY;
-      this.takenDamage = MinMaxBounds.Floats.ANY;
+      this.dealtDamage = MinMaxBounds.Doubles.ANY;
+      this.takenDamage = MinMaxBounds.Doubles.ANY;
       this.sourceEntity = EntityPredicate.ANY;
       this.blocked = null;
       this.type = DamageSourcePredicate.ANY;
    }
 
-   public DamagePredicate(MinMaxBounds.Floats var1, MinMaxBounds.Floats var2, EntityPredicate var3, @Nullable Boolean var4, DamageSourcePredicate var5) {
+   public DamagePredicate(MinMaxBounds.Doubles var1, MinMaxBounds.Doubles var2, EntityPredicate var3, @Nullable Boolean var4, DamageSourcePredicate var5) {
       this.dealtDamage = var1;
       this.takenDamage = var2;
       this.sourceEntity = var3;
       this.blocked = var4;
       this.type = var5;
    }
 
    public boolean matches(ServerPlayer var1, DamageSource var2, float var3, float var4, boolean var5) {
       if (this == ANY) {
          return true;
-      } else if (!this.dealtDamage.matches(var3)) {
+      } else if (!this.dealtDamage.matches((double)var3)) {
          return false;
-      } else if (!this.takenDamage.matches(var4)) {
+      } else if (!this.takenDamage.matches((double)var4)) {
          return false;
       } else if (!this.sourceEntity.matches(var1, var2.getEntity())) {
          return false;
       } else if (this.blocked != null && this.blocked != var5) {
          return false;
@@ -49,12 +49,12 @@
    }
 
    public static DamagePredicate fromJson(@Nullable JsonElement var0) {
       if (var0 != null && !var0.isJsonNull()) {
          JsonObject var1 = GsonHelper.convertToJsonObject(var0, "damage");
-         MinMaxBounds.Floats var2 = MinMaxBounds.Floats.fromJson(var1.get("dealt"));
-         MinMaxBounds.Floats var3 = MinMaxBounds.Floats.fromJson(var1.get("taken"));
+         MinMaxBounds.Doubles var2 = MinMaxBounds.Doubles.fromJson(var1.get("dealt"));
+         MinMaxBounds.Doubles var3 = MinMaxBounds.Doubles.fromJson(var1.get("taken"));
          Boolean var4 = var1.has("blocked") ? GsonHelper.getAsBoolean(var1, "blocked") : null;
          EntityPredicate var5 = EntityPredicate.fromJson(var1.get("source_entity"));
          DamageSourcePredicate var6 = DamageSourcePredicate.fromJson(var1.get("type"));
          return new DamagePredicate(var2, var3, var5, var4, var6);
       } else {
@@ -78,32 +78,52 @@
          return var1;
       }
    }
 
    public static class Builder {
-      private MinMaxBounds.Floats dealtDamage;
-      private MinMaxBounds.Floats takenDamage;
+      private MinMaxBounds.Doubles dealtDamage;
+      private MinMaxBounds.Doubles takenDamage;
       private EntityPredicate sourceEntity;
       private Boolean blocked;
       private DamageSourcePredicate type;
 
       public Builder() {
-         this.dealtDamage = MinMaxBounds.Floats.ANY;
-         this.takenDamage = MinMaxBounds.Floats.ANY;
+         this.dealtDamage = MinMaxBounds.Doubles.ANY;
+         this.takenDamage = MinMaxBounds.Doubles.ANY;
          this.sourceEntity = EntityPredicate.ANY;
          this.type = DamageSourcePredicate.ANY;
       }
 
       public static DamagePredicate.Builder damageInstance() {
          return new DamagePredicate.Builder();
       }
 
+      public DamagePredicate.Builder dealtDamage(MinMaxBounds.Doubles var1) {
+         this.dealtDamage = var1;
+         return this;
+      }
+
+      public DamagePredicate.Builder takenDamage(MinMaxBounds.Doubles var1) {
+         this.takenDamage = var1;
+         return this;
+      }
+
+      public DamagePredicate.Builder sourceEntity(EntityPredicate var1) {
+         this.sourceEntity = var1;
+         return this;
+      }
+
       public DamagePredicate.Builder blocked(Boolean var1) {
          this.blocked = var1;
          return this;
       }
 
+      public DamagePredicate.Builder type(DamageSourcePredicate var1) {
+         this.type = var1;
+         return this;
+      }
+
       public DamagePredicate.Builder type(DamageSourcePredicate.Builder var1) {
          this.type = var1.build();
          return this;
       }
 
