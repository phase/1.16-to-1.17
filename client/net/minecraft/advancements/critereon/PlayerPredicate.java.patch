--- net/minecraft/advancements/critereon/PlayerPredicate.java
+++ net/minecraft/advancements/critereon/PlayerPredicate.java
@@ -33,10 +33,11 @@
 import net.minecraft.world.level.GameType;
 
 public class PlayerPredicate {
    public static final PlayerPredicate ANY = (new PlayerPredicate.Builder()).build();
    private final MinMaxBounds.Ints level;
+   @Nullable
    private final GameType gameType;
    private final Map<Stat<?>, MinMaxBounds.Ints> stats;
    private final Object2BooleanMap<ResourceLocation> recipes;
    private final Map<ResourceLocation, PlayerPredicate.AdvancementPredicate> advancements;
 
@@ -53,11 +54,11 @@
          });
          return new PlayerPredicate.AdvancementCriterionsPredicate(var1);
       }
    }
 
-   private PlayerPredicate(MinMaxBounds.Ints var1, GameType var2, Map<Stat<?>, MinMaxBounds.Ints> var3, Object2BooleanMap<ResourceLocation> var4, Map<ResourceLocation, PlayerPredicate.AdvancementPredicate> var5) {
+   private PlayerPredicate(MinMaxBounds.Ints var1, @Nullable GameType var2, Map<Stat<?>, MinMaxBounds.Ints> var3, Object2BooleanMap<ResourceLocation> var4, Map<ResourceLocation, PlayerPredicate.AdvancementPredicate> var5) {
       this.level = var1;
       this.gameType = var2;
       this.stats = var3;
       this.recipes = var4;
       this.advancements = var5;
@@ -70,11 +71,11 @@
          return false;
       } else {
          ServerPlayer var2 = (ServerPlayer)var1;
          if (!this.level.matches(var2.experienceLevel)) {
             return false;
-         } else if (this.gameType != GameType.NOT_SET && this.gameType != var2.gameMode.getGameModeForPlayer()) {
+         } else if (this.gameType != null && this.gameType != var2.gameMode.getGameModeForPlayer()) {
             return false;
          } else {
             ServerStatsCounter var3 = var2.getStats();
             Iterator var4 = this.stats.entrySet().iterator();
 
@@ -118,11 +119,11 @@
    public static PlayerPredicate fromJson(@Nullable JsonElement var0) {
       if (var0 != null && !var0.isJsonNull()) {
          JsonObject var1 = GsonHelper.convertToJsonObject(var0, "player");
          MinMaxBounds.Ints var2 = MinMaxBounds.Ints.fromJson(var1.get("level"));
          String var3 = GsonHelper.getAsString(var1, "gamemode", "");
-         GameType var4 = GameType.byName(var3, GameType.NOT_SET);
+         GameType var4 = GameType.byName(var3, (GameType)null);
          HashMap var5 = Maps.newHashMap();
          JsonArray var6 = GsonHelper.getAsJsonArray(var1, "stats", (JsonArray)null);
          if (var6 != null) {
             Iterator var7 = var6.iterator();
 
@@ -188,11 +189,11 @@
       if (this == ANY) {
          return JsonNull.INSTANCE;
       } else {
          JsonObject var1 = new JsonObject();
          var1.add("level", this.level.serializeToJson());
-         if (this.gameType != GameType.NOT_SET) {
+         if (this.gameType != null) {
             var1.addProperty("gamemode", this.gameType.getName());
          }
 
          if (!this.stats.isEmpty()) {
             JsonArray var2 = new JsonArray();
@@ -227,18 +228,18 @@
       }
    }
 
    public static class Builder {
       private MinMaxBounds.Ints level;
+      @Nullable
       private GameType gameType;
       private final Map<Stat<?>, MinMaxBounds.Ints> stats;
       private final Object2BooleanMap<ResourceLocation> recipes;
       private final Map<ResourceLocation, PlayerPredicate.AdvancementPredicate> advancements;
 
       public Builder() {
          this.level = MinMaxBounds.Ints.ANY;
-         this.gameType = GameType.NOT_SET;
          this.stats = Maps.newHashMap();
          this.recipes = new Object2BooleanOpenHashMap();
          this.advancements = Maps.newHashMap();
       }
 
