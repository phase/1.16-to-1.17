--- net/minecraft/advancements/critereon/DamageSourcePredicate.java
+++ net/minecraft/advancements/critereon/DamageSourcePredicate.java
@@ -140,20 +140,65 @@
       public DamageSourcePredicate.Builder isProjectile(Boolean var1) {
          this.isProjectile = var1;
          return this;
       }
 
+      public DamageSourcePredicate.Builder isExplosion(Boolean var1) {
+         this.isExplosion = var1;
+         return this;
+      }
+
+      public DamageSourcePredicate.Builder bypassesArmor(Boolean var1) {
+         this.bypassesArmor = var1;
+         return this;
+      }
+
+      public DamageSourcePredicate.Builder bypassesInvulnerability(Boolean var1) {
+         this.bypassesInvulnerability = var1;
+         return this;
+      }
+
+      public DamageSourcePredicate.Builder bypassesMagic(Boolean var1) {
+         this.bypassesMagic = var1;
+         return this;
+      }
+
+      public DamageSourcePredicate.Builder isFire(Boolean var1) {
+         this.isFire = var1;
+         return this;
+      }
+
+      public DamageSourcePredicate.Builder isMagic(Boolean var1) {
+         this.isMagic = var1;
+         return this;
+      }
+
       public DamageSourcePredicate.Builder isLightning(Boolean var1) {
          this.isLightning = var1;
          return this;
       }
 
+      public DamageSourcePredicate.Builder direct(EntityPredicate var1) {
+         this.directEntity = var1;
+         return this;
+      }
+
       public DamageSourcePredicate.Builder direct(EntityPredicate.Builder var1) {
          this.directEntity = var1.build();
          return this;
       }
 
+      public DamageSourcePredicate.Builder source(EntityPredicate var1) {
+         this.sourceEntity = var1;
+         return this;
+      }
+
+      public DamageSourcePredicate.Builder source(EntityPredicate.Builder var1) {
+         this.sourceEntity = var1.build();
+         return this;
+      }
+
       public DamageSourcePredicate build() {
          return new DamageSourcePredicate(this.isProjectile, this.isExplosion, this.bypassesArmor, this.bypassesInvulnerability, this.bypassesMagic, this.isFire, this.isMagic, this.isLightning, this.directEntity, this.sourceEntity);
       }
    }
 }
