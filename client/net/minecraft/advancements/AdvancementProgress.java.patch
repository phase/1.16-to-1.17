--- net/minecraft/advancements/AdvancementProgress.java
+++ net/minecraft/advancements/AdvancementProgress.java
@@ -20,14 +20,19 @@
 import javax.annotation.Nullable;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.util.GsonHelper;
 
 public class AdvancementProgress implements Comparable<AdvancementProgress> {
-   private final Map<String, CriterionProgress> criteria = Maps.newHashMap();
+   final Map<String, CriterionProgress> criteria;
    private String[][] requirements = new String[0][];
 
+   private AdvancementProgress(Map<String, CriterionProgress> var1) {
+      this.criteria = var1;
+   }
+
    public AdvancementProgress() {
+      this.criteria = Maps.newHashMap();
    }
 
    public void update(Map<String, Criterion> var1, String[][] var2) {
       Set var3 = var1.keySet();
       this.criteria.entrySet().removeIf((var1x) -> {
@@ -110,34 +115,23 @@
          return false;
       }
    }
 
    public String toString() {
-      return "AdvancementProgress{criteria=" + this.criteria + ", requirements=" + Arrays.deepToString(this.requirements) + '}';
+      Map var10000 = this.criteria;
+      return "AdvancementProgress{criteria=" + var10000 + ", requirements=" + Arrays.deepToString(this.requirements) + "}";
    }
 
    public void serializeToNetwork(FriendlyByteBuf var1) {
-      var1.writeVarInt(this.criteria.size());
-      Iterator var2 = this.criteria.entrySet().iterator();
-
-      while(var2.hasNext()) {
-         Entry var3 = (Entry)var2.next();
-         var1.writeUtf((String)var3.getKey());
-         ((CriterionProgress)var3.getValue()).serializeToNetwork(var1);
-      }
-
+      var1.writeMap(this.criteria, FriendlyByteBuf::writeUtf, (var0, var1x) -> {
+         var1x.serializeToNetwork(var0);
+      });
    }
 
    public static AdvancementProgress fromNetwork(FriendlyByteBuf var0) {
-      AdvancementProgress var1 = new AdvancementProgress();
-      int var2 = var0.readVarInt();
-
-      for(int var3 = 0; var3 < var2; ++var3) {
-         var1.criteria.put(var0.readUtf(32767), CriterionProgress.fromNetwork(var0));
-      }
-
-      return var1;
+      Map var1 = var0.readMap(FriendlyByteBuf::readUtf, CriterionProgress::fromNetwork);
+      return new AdvancementProgress(var1);
    }
 
    @Nullable
    public CriterionProgress getCriterion(String var1) {
       return (CriterionProgress)this.criteria.get(var1);
@@ -201,11 +195,11 @@
       Iterator var2 = this.criteria.entrySet().iterator();
 
       while(var2.hasNext()) {
          Entry var3 = (Entry)var2.next();
          if (!((CriterionProgress)var3.getValue()).isDone()) {
-            var1.add(var3.getKey());
+            var1.add((String)var3.getKey());
          }
       }
 
       return var1;
    }
@@ -215,11 +209,11 @@
       Iterator var2 = this.criteria.entrySet().iterator();
 
       while(var2.hasNext()) {
          Entry var3 = (Entry)var2.next();
          if (((CriterionProgress)var3.getValue()).isDone()) {
-            var1.add(var3.getKey());
+            var1.add((String)var3.getKey());
          }
       }
 
       return var1;
    }
