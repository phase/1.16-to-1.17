--- net/minecraft/util/datafix/fixes/StatsRenameFix.java
+++ net/minecraft/util/datafix/fixes/StatsRenameFix.java
@@ -1,0 +1,50 @@
+package net.minecraft.util.datafix.fixes;
+
+import com.mojang.datafixers.DataFix;
+import com.mojang.datafixers.OpticFinder;
+import com.mojang.datafixers.TypeRewriteRule;
+import com.mojang.datafixers.schemas.Schema;
+import com.mojang.datafixers.types.Type;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Map.Entry;
+import net.minecraft.util.datafix.schemas.NamespacedSchema;
+
+public class StatsRenameFix extends DataFix {
+   private final String name;
+   private final Map<String, String> renames;
+
+   public StatsRenameFix(Schema var1, String var2, Map<String, String> var3) {
+      super(var1, false);
+      this.name = var2;
+      this.renames = var3;
+   }
+
+   protected TypeRewriteRule makeRule() {
+      Type var1 = this.getOutputSchema().getType(References.STATS);
+      Type var2 = this.getInputSchema().getType(References.STATS);
+      OpticFinder var3 = var2.findField("stats");
+      OpticFinder var4 = var3.type().findField("minecraft:custom");
+      OpticFinder var5 = NamespacedSchema.namespacedString().finder();
+      return this.fixTypeEverywhereTyped(this.name, var2, var1, (var4x) -> {
+         return var4x.updateTyped(var3, (var3x) -> {
+            return var3x.updateTyped(var4, (var2) -> {
+               return var2.update(var5, (var1) -> {
+                  Iterator var2 = this.renames.entrySet().iterator();
+
+                  Entry var3;
+                  do {
+                     if (!var2.hasNext()) {
+                        return var1;
+                     }
+
+                     var3 = (Entry)var2.next();
+                  } while(!var1.equals(var3.getKey()));
+
+                  return (String)var3.getValue();
+               });
+            });
+         });
+      });
+   }
+}
