--- net/minecraft/util/FormattedCharSequence.java
+++ net/minecraft/util/FormattedCharSequence.java
@@ -24,10 +24,22 @@
       return var0.isEmpty() ? EMPTY : (var2) -> {
          return StringDecomposer.iterate(var0, var1, var2);
       };
    }
 
+   static FormattedCharSequence forward(String var0, Style var1, Int2IntFunction var2) {
+      return var0.isEmpty() ? EMPTY : (var3) -> {
+         return StringDecomposer.iterate(var0, var1, decorateOutput(var3, var2));
+      };
+   }
+
+   static FormattedCharSequence backward(String var0, Style var1) {
+      return var0.isEmpty() ? EMPTY : (var2) -> {
+         return StringDecomposer.iterateBackwards(var0, var1, var2);
+      };
+   }
+
    static FormattedCharSequence backward(String var0, Style var1, Int2IntFunction var2) {
       return var0.isEmpty() ? EMPTY : (var3) -> {
          return StringDecomposer.iterateBackwards(var0, var1, decorateOutput(var3, var2));
       };
    }
@@ -36,14 +48,26 @@
       return (var2, var3, var4) -> {
          return var0.accept(var2, var3, (Integer)var1.apply(var4));
       };
    }
 
+   static FormattedCharSequence composite() {
+      return EMPTY;
+   }
+
+   static FormattedCharSequence composite(FormattedCharSequence var0) {
+      return var0;
+   }
+
    static FormattedCharSequence composite(FormattedCharSequence var0, FormattedCharSequence var1) {
       return fromPair(var0, var1);
    }
 
+   static FormattedCharSequence composite(FormattedCharSequence... var0) {
+      return fromList(ImmutableList.copyOf(var0));
+   }
+
    static FormattedCharSequence composite(List<FormattedCharSequence> var0) {
       int var1 = var0.size();
       switch(var1) {
       case 0:
          return EMPTY;
