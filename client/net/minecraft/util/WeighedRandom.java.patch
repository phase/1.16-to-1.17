--- net/minecraft/util/WeighedRandom.java
+++ net/minecraft/util/WeighedRandom.java
@@ -1,54 +1,79 @@
 package net.minecraft.util;
 
+import java.util.Iterator;
 import java.util.List;
+import java.util.Optional;
 import java.util.Random;
+import net.minecraft.SharedConstants;
 import net.minecraft.Util;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
 
 public class WeighedRandom {
+   private static final Logger LOGGER = LogManager.getLogger();
+
+   public WeighedRandom() {
+   }
+
    public static int getTotalWeight(List<? extends WeighedRandom.WeighedRandomItem> var0) {
-      int var1 = 0;
-      int var2 = 0;
+      long var1 = 0L;
 
-      for(int var3 = var0.size(); var2 < var3; ++var2) {
-         WeighedRandom.WeighedRandomItem var4 = (WeighedRandom.WeighedRandomItem)var0.get(var2);
-         var1 += var4.weight;
+      WeighedRandom.WeighedRandomItem var4;
+      for(Iterator var3 = var0.iterator(); var3.hasNext(); var1 += (long)var4.weight) {
+         var4 = (WeighedRandom.WeighedRandomItem)var3.next();
       }
 
-      return var1;
+      if (var1 > 2147483647L) {
+         throw new IllegalArgumentException("Sum of weights must be <= 2147483647");
+      } else {
+         return (int)var1;
+      }
    }
 
-   public static <T extends WeighedRandom.WeighedRandomItem> T getRandomItem(Random var0, List<T> var1, int var2) {
-      if (var2 <= 0) {
-         throw (IllegalArgumentException)Util.pauseInIde(new IllegalArgumentException());
+   public static <T extends WeighedRandom.WeighedRandomItem> Optional<T> getRandomItem(Random var0, List<T> var1, int var2) {
+      if (var2 < 0) {
+         throw (IllegalArgumentException)Util.pauseInIde(new IllegalArgumentException("Negative total weight in getRandomItem"));
+      } else if (var2 == 0) {
+         return Optional.empty();
       } else {
          int var3 = var0.nextInt(var2);
          return getWeightedItem(var1, var3);
       }
    }
 
-   public static <T extends WeighedRandom.WeighedRandomItem> T getWeightedItem(List<T> var0, int var1) {
-      int var2 = 0;
+   public static <T extends WeighedRandom.WeighedRandomItem> Optional<T> getWeightedItem(List<T> var0, int var1) {
+      Iterator var2 = var0.iterator();
 
-      for(int var3 = var0.size(); var2 < var3; ++var2) {
-         WeighedRandom.WeighedRandomItem var4 = (WeighedRandom.WeighedRandomItem)var0.get(var2);
-         var1 -= var4.weight;
-         if (var1 < 0) {
-            return var4;
+      WeighedRandom.WeighedRandomItem var3;
+      do {
+         if (!var2.hasNext()) {
+            return Optional.empty();
          }
-      }
 
-      return null;
+         var3 = (WeighedRandom.WeighedRandomItem)var2.next();
+         var1 -= var3.weight;
+      } while(var1 >= 0);
+
+      return Optional.of(var3);
    }
 
-   public static <T extends WeighedRandom.WeighedRandomItem> T getRandomItem(Random var0, List<T> var1) {
+   public static <T extends WeighedRandom.WeighedRandomItem> Optional<T> getRandomItem(Random var0, List<T> var1) {
       return getRandomItem(var0, var1, getTotalWeight(var1));
    }
 
    public static class WeighedRandomItem {
       protected final int weight;
 
       public WeighedRandomItem(int var1) {
-         this.weight = var1;
+         if (var1 < 0) {
+            throw (IllegalArgumentException)Util.pauseInIde(new IllegalArgumentException("Weight should be >= 0"));
+         } else {
+            if (var1 == 0 && SharedConstants.IS_RUNNING_IN_IDE) {
+               WeighedRandom.LOGGER.warn("Found 0 weight, make sure this is intentional!");
+            }
+
+            this.weight = var1;
+         }
       }
    }
 }
