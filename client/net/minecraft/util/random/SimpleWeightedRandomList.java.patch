--- net/minecraft/util/random/SimpleWeightedRandomList.java
+++ net/minecraft/util/random/SimpleWeightedRandomList.java
@@ -1,0 +1,41 @@
+package net.minecraft.util.random;
+
+import com.google.common.collect.ImmutableList;
+import com.mojang.serialization.Codec;
+import java.util.List;
+import java.util.Optional;
+import java.util.Random;
+
+public class SimpleWeightedRandomList<E> extends WeightedRandomList<WeightedEntry.Wrapper<E>> {
+   public static <E> Codec<SimpleWeightedRandomList<E>> wrappedCodec(Codec<E> var0) {
+      return WeightedEntry.Wrapper.codec(var0).listOf().xmap(SimpleWeightedRandomList::new, WeightedRandomList::unwrap);
+   }
+
+   SimpleWeightedRandomList(List<? extends WeightedEntry.Wrapper<E>> var1) {
+      super(var1);
+   }
+
+   public static <E> SimpleWeightedRandomList.Builder<E> builder() {
+      return new SimpleWeightedRandomList.Builder();
+   }
+
+   public Optional<E> getRandomValue(Random var1) {
+      return this.getRandom(var1).map(WeightedEntry.Wrapper::getData);
+   }
+
+   public static class Builder<E> {
+      private final com.google.common.collect.ImmutableList.Builder<WeightedEntry.Wrapper<E>> result = ImmutableList.builder();
+
+      public Builder() {
+      }
+
+      public SimpleWeightedRandomList.Builder<E> add(E var1, int var2) {
+         this.result.add(WeightedEntry.wrap(var1, var2));
+         return this;
+      }
+
+      public SimpleWeightedRandomList<E> build() {
+         return new SimpleWeightedRandomList(this.result.build());
+      }
+   }
+}
