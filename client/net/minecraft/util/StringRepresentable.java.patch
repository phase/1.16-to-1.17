--- net/minecraft/util/StringRepresentable.java
+++ net/minecraft/util/StringRepresentable.java
@@ -4,10 +4,11 @@
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.DataResult;
 import com.mojang.serialization.DynamicOps;
 import com.mojang.serialization.Keyable;
 import java.util.Arrays;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.function.Function;
 import java.util.function.IntFunction;
 import java.util.function.Supplier;
 import java.util.function.ToIntFunction;
@@ -17,11 +18,13 @@
 public interface StringRepresentable {
    String getSerializedName();
 
    static <E extends Enum<E> & StringRepresentable> Codec<E> fromEnum(Supplier<E[]> var0, Function<? super String, ? extends E> var1) {
       Enum[] var2 = (Enum[])var0.get();
-      return fromStringResolver(Enum::ordinal, (var1x) -> {
+      return fromStringResolver((var0x) -> {
+         return ((Enum)var0x).ordinal();
+      }, (var1x) -> {
          return var2[var1x];
       }, var1);
    }
 
    static <E extends StringRepresentable> Codec<E> fromStringResolver(final ToIntFunction<E> var0, final IntFunction<E> var1, final Function<? super String, ? extends E> var2) {
@@ -30,17 +33,17 @@
             return var2x.compressMaps() ? var2x.mergeToPrimitive(var3, var2x.createInt(var0.applyAsInt(var1x))) : var2x.mergeToPrimitive(var3, var2x.createString(var1x.getSerializedName()));
          }
 
          public <T> DataResult<Pair<E, T>> decode(DynamicOps<T> var1x, T var2x) {
             return var1x.compressMaps() ? var1x.getNumberValue(var2x).flatMap((var1xx) -> {
-               return (DataResult)Optional.ofNullable(var1.apply(var1xx.intValue())).map(DataResult::success).orElseGet(() -> {
+               return (DataResult)Optional.ofNullable((StringRepresentable)var1.apply(var1xx.intValue())).map(DataResult::success).orElseGet(() -> {
                   return DataResult.error("Unknown element id: " + var1xx);
                });
             }).map((var1xx) -> {
                return Pair.of(var1xx, var1x.empty());
             }) : var1x.getStringValue(var2x).flatMap((var1xx) -> {
-               return (DataResult)Optional.ofNullable(var2.apply(var1xx)).map(DataResult::success).orElseGet(() -> {
+               return (DataResult)Optional.ofNullable((StringRepresentable)var2.apply(var1xx)).map(DataResult::success).orElseGet(() -> {
                   return DataResult.error("Unknown element name: " + var1xx);
                });
             }).map((var1xx) -> {
                return Pair.of(var1xx, var1x.empty());
             });
@@ -55,15 +58,15 @@
    static Keyable keys(final StringRepresentable[] var0) {
       return new Keyable() {
          public <T> Stream<T> keys(DynamicOps<T> var1) {
             if (var1.compressMaps()) {
                IntStream var2 = IntStream.range(0, var0.length);
-               var1.getClass();
+               Objects.requireNonNull(var1);
                return var2.mapToObj(var1::createInt);
             } else {
                Stream var10000 = Arrays.stream(var0).map(StringRepresentable::getSerializedName);
-               var1.getClass();
+               Objects.requireNonNull(var1);
                return var10000.map(var1::createString);
             }
          }
       };
    }
