--- net/minecraft/util/profiling/SingleTickProfiler.java
+++ net/minecraft/util/profiling/SingleTickProfiler.java
@@ -14,10 +14,17 @@
    private final long saveThreshold;
    private int tick;
    private final File location;
    private ProfileCollector profiler;
 
+   public SingleTickProfiler(LongSupplier var1, String var2, long var3) {
+      this.profiler = InactiveProfiler.INSTANCE;
+      this.realTime = var1;
+      this.location = new File("debug", var2);
+      this.saveThreshold = var3;
+   }
+
    public ProfilerFiller startTick() {
       this.profiler = new ActiveProfiler(this.realTime, () -> {
          return this.tick;
       }, false);
       ++this.tick;
@@ -27,12 +34,15 @@
    public void endTick() {
       if (this.profiler != InactiveProfiler.INSTANCE) {
          ProfileResults var1 = this.profiler.getResults();
          this.profiler = InactiveProfiler.INSTANCE;
          if (var1.getNanoDuration() >= this.saveThreshold) {
-            File var2 = new File(this.location, "tick-results-" + (new SimpleDateFormat("yyyy-MM-dd_HH.mm.ss")).format(new Date()) + ".txt");
-            var1.saveResults(var2);
+            File var10002 = this.location;
+            SimpleDateFormat var10003 = new SimpleDateFormat("yyyy-MM-dd_HH.mm.ss");
+            Date var10004 = new Date();
+            File var2 = new File(var10002, "tick-results-" + var10003.format(var10004) + ".txt");
+            var1.saveResults(var2.toPath());
             LOGGER.info("Recorded long tick -- wrote info to: {}", var2.getAbsolutePath());
          }
 
       }
    }
