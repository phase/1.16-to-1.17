--- net/minecraft/util/thread/BlockableEventLoop.java
+++ net/minecraft/util/thread/BlockableEventLoop.java
@@ -1,25 +1,32 @@
 package net.minecraft.util.thread;
 
+import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Queues;
+import java.util.List;
 import java.util.Queue;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.Executor;
 import java.util.concurrent.locks.LockSupport;
 import java.util.function.BooleanSupplier;
 import java.util.function.Supplier;
+import net.minecraft.util.profiling.metrics.MetricCategory;
+import net.minecraft.util.profiling.metrics.MetricSampler;
+import net.minecraft.util.profiling.metrics.MetricsRegistry;
+import net.minecraft.util.profiling.metrics.ProfilerMeasured;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public abstract class BlockableEventLoop<R extends Runnable> implements ProcessorHandle<R>, Executor {
+public abstract class BlockableEventLoop<R extends Runnable> implements ProfilerMeasured, ProcessorHandle<R>, Executor {
    private final String name;
    private static final Logger LOGGER = LogManager.getLogger();
    private final Queue<R> pendingRunnables = Queues.newConcurrentLinkedQueue();
    private int blockingCount;
 
    protected BlockableEventLoop(String var1) {
       this.name = var1;
+      MetricsRegistry.INSTANCE.add(this);
    }
 
    protected abstract R wrapRunnable(Runnable var1);
 
    protected abstract boolean shouldRun(R var1);
@@ -93,11 +100,11 @@
       while(this.pollTask()) {
       }
 
    }
 
-   protected boolean pollTask() {
+   public boolean pollTask() {
       Runnable var1 = (Runnable)this.pendingRunnables.peek();
       if (var1 == null) {
          return false;
       } else if (this.blockingCount == 0 && !this.shouldRun(var1)) {
          return false;
@@ -133,6 +140,10 @@
       } catch (Exception var3) {
          LOGGER.fatal("Error executing task on {}", this.name(), var3);
       }
 
    }
+
+   public List<MetricSampler> profiledMetrics() {
+      return ImmutableList.of(MetricSampler.create(this.name + "-pending-tasks", MetricCategory.EVENT_LOOPS, this::getPendingTasksCount));
+   }
 }
