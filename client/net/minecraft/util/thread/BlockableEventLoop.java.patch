--- net/minecraft/util/thread/BlockableEventLoop.java
+++ net/minecraft/util/thread/BlockableEventLoop.java
@@ -1,25 +1,33 @@
 package net.minecraft.util.thread;
 
+import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Queues;
+import java.util.List;
 import java.util.Queue;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.Executor;
 import java.util.concurrent.locks.LockSupport;
 import java.util.function.BooleanSupplier;
 import java.util.function.Supplier;
+import net.minecraft.util.profiling.registry.MeasuredMetric;
+import net.minecraft.util.profiling.registry.MeasurementCategory;
+import net.minecraft.util.profiling.registry.MeasurementRegistry;
+import net.minecraft.util.profiling.registry.Metric;
+import net.minecraft.util.profiling.registry.ProfilerMeasured;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public abstract class BlockableEventLoop<R extends Runnable> implements ProcessorHandle<R>, Executor {
+public abstract class BlockableEventLoop<R extends Runnable> implements ProfilerMeasured, ProcessorHandle<R>, Executor {
    private final String name;
    private static final Logger LOGGER = LogManager.getLogger();
    private final Queue<R> pendingRunnables = Queues.newConcurrentLinkedQueue();
    private int blockingCount;
 
    protected BlockableEventLoop(String var1) {
       this.name = var1;
+      MeasurementRegistry.INSTANCE.add(this);
    }
 
    protected abstract R wrapRunnable(Runnable var1);
 
    protected abstract boolean shouldRun(R var1);
@@ -133,6 +141,10 @@
       } catch (Exception var3) {
          LOGGER.fatal("Error executing task on {}", this.name(), var3);
       }
 
    }
+
+   public List<MeasuredMetric> metrics() {
+      return ImmutableList.of(new MeasuredMetric(new Metric(this.name + "-tasks-pending"), this::getPendingTasksCount, MeasurementCategory.EVENT_LOOP));
+   }
 }
