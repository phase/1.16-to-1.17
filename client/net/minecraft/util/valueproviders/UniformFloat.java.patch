--- net/minecraft/util/valueproviders/UniformFloat.java
+++ net/minecraft/util/valueproviders/UniformFloat.java
@@ -1,0 +1,71 @@
+package net.minecraft.util.valueproviders;
+
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.DataResult;
+import com.mojang.serialization.codecs.RecordCodecBuilder;
+import java.util.Objects;
+import java.util.Random;
+import java.util.function.Function;
+import net.minecraft.util.Mth;
+
+public class UniformFloat extends FloatProvider {
+   public static final Codec<UniformFloat> CODEC = RecordCodecBuilder.create((var0) -> {
+      return var0.group(Codec.FLOAT.fieldOf("min_inclusive").forGetter((var0x) -> {
+         return var0x.minInclusive;
+      }), Codec.FLOAT.fieldOf("max_exclusive").forGetter((var0x) -> {
+         return var0x.maxExclusive;
+      })).apply(var0, UniformFloat::new);
+   }).comapFlatMap((var0) -> {
+      return var0.maxExclusive <= var0.minInclusive ? DataResult.error("Max must be larger than min, min_inclusive: " + var0.minInclusive + ", max_exclusive: " + var0.maxExclusive) : DataResult.success(var0);
+   }, Function.identity());
+   private final float minInclusive;
+   private final float maxExclusive;
+
+   private UniformFloat(float var1, float var2) {
+      this.minInclusive = var1;
+      this.maxExclusive = var2;
+   }
+
+   public static UniformFloat of(float var0, float var1) {
+      if (var1 <= var0) {
+         throw new IllegalArgumentException("Max must exceed min");
+      } else {
+         return new UniformFloat(var0, var1);
+      }
+   }
+
+   public float sample(Random var1) {
+      return Mth.randomBetween(var1, this.minInclusive, this.maxExclusive);
+   }
+
+   public float getMinValue() {
+      return this.minInclusive;
+   }
+
+   public float getMaxValue() {
+      return this.maxExclusive;
+   }
+
+   public FloatProviderType<?> getType() {
+      return FloatProviderType.UNIFORM;
+   }
+
+   public boolean equals(Object var1) {
+      if (this == var1) {
+         return true;
+      } else if (var1 != null && this.getClass() == var1.getClass()) {
+         UniformFloat var2 = (UniformFloat)var1;
+         return this.minInclusive == var2.minInclusive && this.maxExclusive == var2.maxExclusive;
+      } else {
+         return false;
+      }
+   }
+
+   public int hashCode() {
+      return Objects.hash(new Object[]{this.minInclusive, this.maxExclusive});
+   }
+
+   public String toString() {
+      return "[" + this.minInclusive + '-' + this.maxExclusive + ']';
+   }
+}
