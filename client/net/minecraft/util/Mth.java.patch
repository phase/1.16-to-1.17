--- net/minecraft/util/Mth.java
+++ net/minecraft/util/Mth.java
@@ -3,26 +3,47 @@
 import java.util.Random;
 import java.util.UUID;
 import java.util.function.IntPredicate;
 import net.minecraft.Util;
 import net.minecraft.core.Vec3i;
+import net.minecraft.world.phys.AABB;
+import net.minecraft.world.phys.Vec3;
 import org.apache.commons.lang3.math.NumberUtils;
 
 public class Mth {
+   private static final int BIG_ENOUGH_INT = 1024;
+   private static final float BIG_ENOUGH_FLOAT = 1024.0F;
+   private static final long UUID_VERSION = 61440L;
+   private static final long UUID_VERSION_TYPE_4 = 16384L;
+   private static final long UUID_VARIANT = -4611686018427387904L;
+   private static final long UUID_VARIANT_2 = Long.MIN_VALUE;
+   public static final float PI = 3.1415927F;
+   public static final float HALF_PI = 1.5707964F;
+   public static final float TWO_PI = 6.2831855F;
+   public static final float DEG_TO_RAD = 0.017453292F;
+   public static final float RAD_TO_DEG = 57.295776F;
+   public static final float EPSILON = 1.0E-5F;
    public static final float SQRT_OF_TWO = sqrt(2.0F);
+   private static final float SIN_SCALE = 10430.378F;
    private static final float[] SIN = (float[])Util.make(new float[65536], (var0x) -> {
       for(int var1 = 0; var1 < var0x.length; ++var1) {
          var0x[var1] = (float)Math.sin((double)var1 * 3.141592653589793D * 2.0D / 65536.0D);
       }
 
    });
    private static final Random RANDOM = new Random();
    private static final int[] MULTIPLY_DE_BRUIJN_BIT_POSITION = new int[]{0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8, 31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9};
+   private static final double ONE_SIXTH = 0.16666666666666666D;
+   private static final int FRAC_EXP = 8;
+   private static final int LUT_SIZE = 257;
    private static final double FRAC_BIAS = Double.longBitsToDouble(4805340802404319232L);
    private static final double[] ASIN_TAB = new double[257];
    private static final double[] COS_TAB = new double[257];
 
+   public Mth() {
+   }
+
    public static float sin(float var0) {
       return SIN[(int)(var0 * 10430.378F) & '\uffff'];
    }
 
    public static float cos(float var0) {
@@ -54,10 +75,14 @@
    public static long lfloor(double var0) {
       long var2 = (long)var0;
       return var0 < (double)var2 ? var2 - 1L : var2;
    }
 
+   public static int absFloor(double var0) {
+      return (int)(var0 >= 0.0D ? var0 : -var0 + 1.0D);
+   }
+
    public static float abs(float var0) {
       return Math.abs(var0);
    }
 
    public static int abs(int var0) {
@@ -72,10 +97,18 @@
    public static int ceil(double var0) {
       int var2 = (int)var0;
       return var0 > (double)var2 ? var2 + 1 : var2;
    }
 
+   public static byte clamp(byte var0, byte var1, byte var2) {
+      if (var0 < var1) {
+         return var1;
+      } else {
+         return var0 > var2 ? var2 : var0;
+      }
+   }
+
    public static int clamp(int var0, int var1, int var2) {
       if (var0 < var1) {
          return var1;
       } else {
          return var0 > var2 ? var2 : var0;
@@ -240,10 +273,26 @@
 
    public static int getInt(String var0, int var1) {
       return NumberUtils.toInt(var0, var1);
    }
 
+   public static int getInt(String var0, int var1, int var2) {
+      return Math.max(var2, getInt(var0, var1));
+   }
+
+   public static double getDouble(String var0, double var1) {
+      try {
+         return Double.parseDouble(var0);
+      } catch (Throwable var4) {
+         return var1;
+      }
+   }
+
+   public static double getDouble(String var0, double var1, double var3) {
+      return Math.max(var3, getDouble(var0, var1));
+   }
+
    public static int smallestEncompassingPowerOfTwo(int var0) {
       int var1 = var0 - 1;
       var1 |= var1 >> 1;
       var1 |= var1 >> 2;
       var1 |= var1 >> 4;
@@ -263,43 +312,59 @@
 
    public static int log2(int var0) {
       return ceillog2(var0) - (isPowerOfTwo(var0) ? 0 : 1);
    }
 
-   public static int roundUp(int var0, int var1) {
-      if (var1 == 0) {
-         return 0;
-      } else if (var0 == 0) {
-         return var1;
-      } else {
-         if (var0 < 0) {
-            var1 *= -1;
-         }
-
-         int var2 = var0 % var1;
-         return var2 == 0 ? var0 : var0 + var1 - var2;
-      }
-   }
-
    public static int color(float var0, float var1, float var2) {
       return color(floor(var0 * 255.0F), floor(var1 * 255.0F), floor(var2 * 255.0F));
    }
 
    public static int color(int var0, int var1, int var2) {
       int var3 = (var0 << 8) + var1;
       var3 = (var3 << 8) + var2;
       return var3;
    }
 
+   public static int colorMultiply(int var0, int var1) {
+      int var2 = (var0 & 16711680) >> 16;
+      int var3 = (var1 & 16711680) >> 16;
+      int var4 = (var0 & '\uff00') >> 8;
+      int var5 = (var1 & '\uff00') >> 8;
+      int var6 = (var0 & 255) >> 0;
+      int var7 = (var1 & 255) >> 0;
+      int var8 = (int)((float)var2 * (float)var3 / 255.0F);
+      int var9 = (int)((float)var4 * (float)var5 / 255.0F);
+      int var10 = (int)((float)var6 * (float)var7 / 255.0F);
+      return var0 & -16777216 | var8 << 16 | var9 << 8 | var10;
+   }
+
+   public static int colorMultiply(int var0, float var1, float var2, float var3) {
+      int var4 = (var0 & 16711680) >> 16;
+      int var5 = (var0 & '\uff00') >> 8;
+      int var6 = (var0 & 255) >> 0;
+      int var7 = (int)((float)var4 * var1);
+      int var8 = (int)((float)var5 * var2);
+      int var9 = (int)((float)var6 * var3);
+      return var0 & -16777216 | var7 << 16 | var8 << 8 | var9;
+   }
+
    public static float frac(float var0) {
       return var0 - (float)floor(var0);
    }
 
    public static double frac(double var0) {
       return var0 - (double)lfloor(var0);
    }
 
+   public static Vec3 catmullRomSplinePos(Vec3 var0, Vec3 var1, Vec3 var2, Vec3 var3, double var4) {
+      double var6 = ((-var4 + 2.0D) * var4 - 1.0D) * var4 * 0.5D;
+      double var8 = ((3.0D * var4 - 5.0D) * var4 * var4 + 2.0D) * 0.5D;
+      double var10 = ((-3.0D * var4 + 4.0D) * var4 + 1.0D) * var4 * 0.5D;
+      double var12 = (var4 - 1.0D) * var4 * var4 * 0.5D;
+      return new Vec3(var0.x * var6 + var1.x * var8 + var2.x * var10 + var3.x * var12, var0.y * var6 + var1.y * var8 + var2.y * var10 + var3.y * var12, var0.z * var6 + var1.z * var8 + var2.z * var10 + var3.z * var12);
+   }
+
    public static long getSeed(Vec3i var0) {
       return getSeed(var0.getX(), var0.getY(), var0.getZ());
    }
 
    public static long getSeed(int var0, int var1, int var2) {
@@ -320,10 +385,49 @@
 
    public static double inverseLerp(double var0, double var2, double var4) {
       return (var0 - var2) / (var4 - var2);
    }
 
+   public static boolean rayIntersectsAABB(Vec3 var0, Vec3 var1, AABB var2) {
+      double var3 = (var2.minX + var2.maxX) * 0.5D;
+      double var5 = (var2.maxX - var2.minX) * 0.5D;
+      double var7 = var0.x - var3;
+      if (Math.abs(var7) > var5 && var7 * var1.x >= 0.0D) {
+         return false;
+      } else {
+         double var9 = (var2.minY + var2.maxY) * 0.5D;
+         double var11 = (var2.maxY - var2.minY) * 0.5D;
+         double var13 = var0.y - var9;
+         if (Math.abs(var13) > var11 && var13 * var1.y >= 0.0D) {
+            return false;
+         } else {
+            double var15 = (var2.minZ + var2.maxZ) * 0.5D;
+            double var17 = (var2.maxZ - var2.minZ) * 0.5D;
+            double var19 = var0.z - var15;
+            if (Math.abs(var19) > var17 && var19 * var1.z >= 0.0D) {
+               return false;
+            } else {
+               double var21 = Math.abs(var1.x);
+               double var23 = Math.abs(var1.y);
+               double var25 = Math.abs(var1.z);
+               double var27 = var1.y * var19 - var1.z * var13;
+               if (Math.abs(var27) > var11 * var25 + var17 * var23) {
+                  return false;
+               } else {
+                  var27 = var1.z * var7 - var1.x * var19;
+                  if (Math.abs(var27) > var5 * var25 + var17 * var21) {
+                     return false;
+                  } else {
+                     var27 = var1.x * var13 - var1.y * var7;
+                     return Math.abs(var27) < var5 * var23 + var11 * var21;
+                  }
+               }
+            }
+         }
+      }
+   }
+
    public static double atan2(double var0, double var2) {
       double var4 = var2 * var2 + var0 * var0;
       if (Double.isNaN(var4)) {
          return Double.NaN;
       } else {
@@ -441,13 +545,13 @@
          break;
       default:
          throw new RuntimeException("Something went wrong when converting from HSV to RGB. Input was " + var0 + ", " + var1 + ", " + var2);
       }
 
-      int var11 = clamp((int)(var8 * 255.0F), 0, 255);
-      int var12 = clamp((int)(var9 * 255.0F), 0, 255);
-      int var13 = clamp((int)(var10 * 255.0F), 0, 255);
+      int var11 = clamp((int)((int)(var8 * 255.0F)), (int)0, (int)255);
+      int var12 = clamp((int)((int)(var9 * 255.0F)), (int)0, (int)255);
+      int var13 = clamp((int)((int)(var10 * 255.0F)), (int)0, (int)255);
       return var11 << 16 | var12 << 8 | var13;
    }
 
    public static int murmurHash3Mixer(int var0) {
       var0 ^= var0 >>> 16;
@@ -456,10 +560,89 @@
       var0 *= -1028477387;
       var0 ^= var0 >>> 16;
       return var0;
    }
 
+   public static long murmurHash3Mixer(long var0) {
+      var0 ^= var0 >>> 33;
+      var0 *= -49064778989728563L;
+      var0 ^= var0 >>> 33;
+      var0 *= -4265267296055464877L;
+      var0 ^= var0 >>> 33;
+      return var0;
+   }
+
+   public static double[] cumulativeSum(double... var0) {
+      float var1 = 0.0F;
+      double[] var2 = var0;
+      int var3 = var0.length;
+
+      for(int var4 = 0; var4 < var3; ++var4) {
+         double var5 = var2[var4];
+         var1 = (float)((double)var1 + var5);
+      }
+
+      int var7;
+      for(var7 = 0; var7 < var0.length; ++var7) {
+         var0[var7] /= (double)var1;
+      }
+
+      for(var7 = 0; var7 < var0.length; ++var7) {
+         var0[var7] += var7 == 0 ? 0.0D : var0[var7 - 1];
+      }
+
+      return var0;
+   }
+
+   public static int getRandomForDistributionIntegral(Random var0, double[] var1) {
+      double var2 = var0.nextDouble();
+
+      for(int var4 = 0; var4 < var1.length; ++var4) {
+         if (var2 < var1[var4]) {
+            return var4;
+         }
+      }
+
+      return var1.length;
+   }
+
+   public static double[] binNormalDistribution(double var0, double var2, double var4, int var6, int var7) {
+      double[] var8 = new double[var7 - var6 + 1];
+      int var9 = 0;
+
+      for(int var10 = var6; var10 <= var7; ++var10) {
+         var8[var9] = Math.max(0.0D, var0 * StrictMath.exp(-((double)var10 - var4) * ((double)var10 - var4) / (2.0D * var2 * var2)));
+         ++var9;
+      }
+
+      return var8;
+   }
+
+   public static double[] binBiModalNormalDistribution(double var0, double var2, double var4, double var6, double var8, double var10, int var12, int var13) {
+      double[] var14 = new double[var13 - var12 + 1];
+      int var15 = 0;
+
+      for(int var16 = var12; var16 <= var13; ++var16) {
+         var14[var15] = Math.max(0.0D, var0 * StrictMath.exp(-((double)var16 - var4) * ((double)var16 - var4) / (2.0D * var2 * var2)) + var6 * StrictMath.exp(-((double)var16 - var10) * ((double)var16 - var10) / (2.0D * var8 * var8)));
+         ++var15;
+      }
+
+      return var14;
+   }
+
+   public static double[] binLogDistribution(double var0, double var2, int var4, int var5) {
+      double[] var6 = new double[var5 - var4 + 1];
+      int var7 = 0;
+
+      for(int var8 = var4; var8 <= var5; ++var8) {
+         var6[var7] = Math.max(var0 * StrictMath.log((double)var8) + var2, 0.0D);
+         ++var7;
+      }
+
+      return var6;
+   }
+
    public static int binarySearch(int var0, int var1, IntPredicate var2) {
       int var3 = var1 - var0;
 
       while(var3 > 0) {
          int var4 = var3 / 2;
@@ -493,10 +676,14 @@
 
    public static double smoothstep(double var0) {
       return var0 * var0 * var0 * (var0 * (var0 * 6.0D - 15.0D) + 10.0D);
    }
 
+   public static double smoothstepDerivative(double var0) {
+      return 30.0D * var0 * var0 * (var0 - 1.0D) * (var0 - 1.0D);
+   }
+
    public static int sign(double var0) {
       if (var0 == 0.0D) {
          return 0;
       } else {
          return var0 > 0.0D ? 1 : -1;
@@ -505,10 +692,14 @@
 
    public static float rotLerp(float var0, float var1, float var2) {
       return var1 + var0 * wrapDegrees(var2 - var1);
    }
 
+   public static float diffuseLight(float var0, float var1, float var2) {
+      return Math.min(var0 * var0 * 0.6F + var1 * var1 * ((3.0F + var1) / 4.0F) + var2 * var2 * 0.8F, 1.0F);
+   }
+
    @Deprecated
    public static float rotlerp(float var0, float var1, float var2) {
       float var3;
       for(var3 = var1 - var0; var3 < -180.0F; var3 += 360.0F) {
       }
@@ -539,10 +730,50 @@
 
    public static float square(float var0) {
       return var0 * var0;
    }
 
+   public static double square(double var0) {
+      return var0 * var0;
+   }
+
+   public static int square(int var0) {
+      return var0 * var0;
+   }
+
+   public static double clampedMap(double var0, double var2, double var4, double var6, double var8) {
+      return clampedLerp(var6, var8, inverseLerp(var0, var2, var4));
+   }
+
+   public static double map(double var0, double var2, double var4, double var6, double var8) {
+      return lerp(inverseLerp(var0, var2, var4), var6, var8);
+   }
+
+   public static double wobble(double var0) {
+      return var0 + (2.0D * (new Random((long)floor(var0 * 3000.0D))).nextDouble() - 1.0D) * 1.0E-7D / 2.0D;
+   }
+
+   public static int roundToward(int var0, int var1) {
+      return (var0 + var1 - 1) / var1 * var1;
+   }
+
+   public static int randomBetweenInclusive(Random var0, int var1, int var2) {
+      return var0.nextInt(var2 - var1 + 1) + var1;
+   }
+
+   public static float randomBetween(Random var0, float var1, float var2) {
+      return var0.nextFloat() * (var2 - var1) + var1;
+   }
+
+   public static float normal(Random var0, float var1, float var2) {
+      return var1 + (float)var0.nextGaussian() * var2;
+   }
+
+   public static double length(int var0, double var1, int var3) {
+      return (double)sqrt((double)(var0 * var0) + var1 * var1 + (double)(var3 * var3));
+   }
+
    static {
       for(int var0 = 0; var0 < 257; ++var0) {
          double var1 = (double)var0 / 256.0D;
          double var3 = Math.asin(var1);
          COS_TAB[var0] = Math.cos(var3);
