--- net/minecraft/util/GlslPreprocessor.java
+++ net/minecraft/util/GlslPreprocessor.java
@@ -1,0 +1,101 @@
+package net.minecraft.util;
+
+import com.google.common.collect.Lists;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+import javax.annotation.Nullable;
+import net.minecraft.FileUtil;
+import org.apache.commons.lang3.StringUtils;
+import org.apache.logging.log4j.util.Strings;
+
+public abstract class GlslPreprocessor {
+   private static final Pattern REGEX_MOJ_IMPORT = Pattern.compile("(?:/\\*(?:[^*]|\\*+[^/])*\\*+/|\\h)*(#(?:/\\*(?:[^*]|\\*+[^/])*\\*+/|\\h)*moj_import(?:/\\*(?:[^*]|\\*+[^/])*\\*+/|\\h)*(?:\"(.*)\"|<(.*)>))");
+   private static final Pattern REGEX_VERSION = Pattern.compile("(?:/\\*(?:[^*]|\\*+[^/])*\\*+/|\\h)*(#(?:/\\*(?:[^*]|\\*+[^/])*\\*+/|\\h)*version(?:/\\*(?:[^*]|\\*+[^/])*\\*+/|\\h)*(\\d+))\\b");
+
+   public GlslPreprocessor() {
+   }
+
+   public List<String> process(String var1) {
+      GlslPreprocessor.Context var2 = new GlslPreprocessor.Context();
+      List var3 = this.processImports(var1, var2, "");
+      var3.set(0, this.setVersion((String)var3.get(0), var2.glslVersion));
+      return var3;
+   }
+
+   private List<String> processImports(String var1, GlslPreprocessor.Context var2, String var3) {
+      int var4 = var2.sourceId;
+      int var5 = 0;
+      String var6 = "";
+      ArrayList var7 = Lists.newArrayList();
+      Matcher var8 = REGEX_MOJ_IMPORT.matcher(var1);
+
+      String var9;
+      while(var8.find()) {
+         var9 = var8.group(2);
+         boolean var10 = var9 != null;
+         if (!var10) {
+            var9 = var8.group(3);
+         }
+
+         if (var9 != null) {
+            String var11 = var1.substring(var5, var8.start(1));
+            String var12 = var3 + var9;
+            String var13 = this.applyImport(var10, var12);
+            int var14;
+            if (!Strings.isEmpty(var13)) {
+               var2.sourceId = var2.sourceId + 1;
+               var14 = var2.sourceId;
+               List var15 = this.processImports(var13, var2, var10 ? FileUtil.getFullResourcePath(var12) : "");
+               var15.set(0, String.format("#line %d %d\n%s", 0, var14, this.processVersions((String)var15.get(0), var2)));
+               if (!StringUtils.isBlank(var11)) {
+                  var7.add(var11);
+               }
+
+               var7.addAll(var15);
+            } else {
+               String var16 = var10 ? String.format("/*#moj_import \"%s\"*/", var9) : String.format("/*#moj_import <%s>*/", var9);
+               var7.add(var6 + var11 + var16);
+            }
+
+            var14 = StringUtil.lineCount(var1.substring(0, var8.end(1)));
+            var6 = String.format("#line %d %d", var14, var4);
+            var5 = var8.end(1);
+         }
+      }
+
+      var9 = var1.substring(var5);
+      if (!StringUtils.isBlank(var9)) {
+         var7.add(var6 + var9);
+      }
+
+      return var7;
+   }
+
+   private String processVersions(String var1, GlslPreprocessor.Context var2) {
+      Matcher var3 = REGEX_VERSION.matcher(var1);
+      if (var3.find()) {
+         var2.glslVersion = Math.max(var2.glslVersion, Integer.parseInt(var3.group(2)));
+         return var1.substring(0, var3.start(1)) + "/*" + var1.substring(var3.start(1), var3.end(1)) + "*/" + var1.substring(var3.end(1));
+      } else {
+         return var1;
+      }
+   }
+
+   private String setVersion(String var1, int var2) {
+      Matcher var3 = REGEX_VERSION.matcher(var1);
+      return var3.find() ? var1.substring(0, var3.start(2)) + Math.max(var2, Integer.parseInt(var3.group(2))) + var1.substring(var3.end(2)) : var1;
+   }
+
+   @Nullable
+   public abstract String applyImport(boolean var1, String var2);
+
+   static final class Context {
+      private int glslVersion;
+      private int sourceId;
+
+      private Context() {
+      }
+   }
+}
