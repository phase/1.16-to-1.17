--- net/minecraft/util/ConstantFloat.java
+++ net/minecraft/util/ConstantFloat.java
@@ -1,0 +1,73 @@
+package net.minecraft.util;
+
+import com.mojang.datafixers.util.Either;
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.codecs.RecordCodecBuilder;
+import java.util.Random;
+
+public class ConstantFloat extends FloatProvider {
+   public static ConstantFloat ZERO = of(0.0F);
+   public static final Codec<ConstantFloat> CODEC;
+   private float value;
+
+   public static ConstantFloat of(float var0) {
+      return var0 == 0.0F ? ZERO : new ConstantFloat(var0);
+   }
+
+   private ConstantFloat(float var1) {
+      this.value = var1;
+   }
+
+   public float getValue() {
+      return this.value;
+   }
+
+   public float sample(Random var1) {
+      return this.value;
+   }
+
+   public float getMinValue() {
+      return this.value;
+   }
+
+   public float getMaxValue() {
+      return this.value + 1.0F;
+   }
+
+   public boolean equals(Object var1) {
+      if (this == var1) {
+         return true;
+      } else if (var1 != null && this.getClass() == var1.getClass()) {
+         ConstantFloat var2 = (ConstantFloat)var1;
+         return this.value == var2.value;
+      } else {
+         return false;
+      }
+   }
+
+   public int hashCode() {
+      return Float.hashCode(this.value);
+   }
+
+   public FloatProviderType<?> getType() {
+      return FloatProviderType.CONSTANT;
+   }
+
+   public String toString() {
+      return Float.toString(this.value);
+   }
+
+   static {
+      CODEC = Codec.either(Codec.FLOAT, RecordCodecBuilder.create((var0) -> {
+         return var0.group(Codec.FLOAT.fieldOf("value").forGetter((var0x) -> {
+            return var0x.value;
+         })).apply(var0, ConstantFloat::new);
+      })).xmap((var0) -> {
+         return (ConstantFloat)var0.map(ConstantFloat::of, (var0x) -> {
+            return var0x;
+         });
+      }, (var0) -> {
+         return Either.left(var0.value);
+      });
+   }
+}
