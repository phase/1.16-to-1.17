--- net/minecraft/util/UniformFloat.java
+++ net/minecraft/util/UniformFloat.java
@@ -1,0 +1,66 @@
+package net.minecraft.util;
+
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.DataResult;
+import com.mojang.serialization.codecs.RecordCodecBuilder;
+import java.util.Objects;
+import java.util.Random;
+import java.util.function.Function;
+
+public class UniformFloat extends FloatProvider {
+   public static final Codec<UniformFloat> CODEC = RecordCodecBuilder.create((var0) -> {
+      return var0.group(Codec.FLOAT.fieldOf("base").forGetter((var0x) -> {
+         return var0x.baseValue;
+      }), Codec.FLOAT.fieldOf("spread").forGetter((var0x) -> {
+         return var0x.spread;
+      })).apply(var0, UniformFloat::new);
+   }).comapFlatMap((var0) -> {
+      return var0.spread < 0.0F ? DataResult.error("Spread must be non-negative, got: " + var0.spread) : DataResult.success(var0);
+   }, Function.identity());
+   private final float baseValue;
+   private final float spread;
+
+   private UniformFloat(float var1, float var2) {
+      this.baseValue = var1;
+      this.spread = var2;
+   }
+
+   public static UniformFloat of(float var0, float var1) {
+      return new UniformFloat(var0, var1);
+   }
+
+   public float sample(Random var1) {
+      return this.spread == 0.0F ? this.baseValue : Mth.randomBetween(var1, this.baseValue, this.baseValue + this.spread);
+   }
+
+   public float getMinValue() {
+      return this.baseValue;
+   }
+
+   public float getMaxValue() {
+      return this.baseValue + this.spread;
+   }
+
+   public FloatProviderType<?> getType() {
+      return FloatProviderType.UNIFORM;
+   }
+
+   public boolean equals(Object var1) {
+      if (this == var1) {
+         return true;
+      } else if (var1 != null && this.getClass() == var1.getClass()) {
+         UniformFloat var2 = (UniformFloat)var1;
+         return this.baseValue == var2.baseValue && this.spread == var2.spread;
+      } else {
+         return false;
+      }
+   }
+
+   public int hashCode() {
+      return Objects.hash(new Object[]{this.baseValue, this.spread});
+   }
+
+   public String toString() {
+      return "[" + this.baseValue + '-' + (this.baseValue + this.spread) + ']';
+   }
+}
