--- net/minecraft/server/level/WorldGenRegion.java
+++ net/minecraft/server/level/WorldGenRegion.java
@@ -34,10 +34,12 @@
 import net.minecraft.world.level.border.WorldBorder;
 import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.chunk.ChunkSource;
 import net.minecraft.world.level.chunk.ChunkStatus;
 import net.minecraft.world.level.dimension.DimensionType;
+import net.minecraft.world.level.entity.EntityTypeTest;
+import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.levelgen.Heightmap;
 import net.minecraft.world.level.levelgen.feature.StructureFeature;
 import net.minecraft.world.level.levelgen.structure.StructureStart;
 import net.minecraft.world.level.lighting.LevelLightEngine;
 import net.minecraft.world.level.material.Fluid;
@@ -133,11 +135,11 @@
    public boolean hasChunk(int var1, int var2) {
       return var1 >= this.firstPos.x && var1 <= this.lastPos.x && var2 >= this.firstPos.z && var2 <= this.lastPos.z;
    }
 
    public BlockState getBlockState(BlockPos var1) {
-      return this.getChunk(var1.getX() >> 4, var1.getZ() >> 4).getBlockState(var1);
+      return this.getChunk(SectionPos.blockToSectionCoord(var1.getX()), SectionPos.blockToSectionCoord(var1.getZ())).getBlockState(var1);
    }
 
    public FluidState getFluidState(BlockPos var1) {
       return this.getChunk(var1).getFluidState(var1);
    }
@@ -171,11 +173,11 @@
       BlockState var5 = this.getBlockState(var1);
       if (var5.isAir()) {
          return false;
       } else {
          if (var2) {
-            BlockEntity var6 = var5.getBlock().isEntityBlock() ? this.getBlockEntity(var1) : null;
+            BlockEntity var6 = var5.hasBlockEntity() ? this.getBlockEntity(var1) : null;
             Block.dropResources(var5, this.level, var1, var6, var3, ItemStack.EMPTY);
          }
 
          return this.setBlock(var1, Blocks.AIR.defaultBlockState(), 3, var4);
       }
@@ -190,27 +192,26 @@
       } else {
          CompoundTag var4 = var2.getBlockEntityNbt(var1);
          BlockState var5 = var2.getBlockState(var1);
          if (var4 != null) {
             if ("DUMMY".equals(var4.getString("id"))) {
-               Block var6 = var5.getBlock();
-               if (!(var6 instanceof EntityBlock)) {
+               if (!var5.hasBlockEntity()) {
                   return null;
                }
 
-               var3 = ((EntityBlock)var6).newBlockEntity(this.level);
+               var3 = ((EntityBlock)var5.getBlock()).newBlockEntity(var1, var5);
             } else {
-               var3 = BlockEntity.loadStatic(var5, var4);
+               var3 = BlockEntity.loadStatic(var1, var5, var4);
             }
 
             if (var3 != null) {
-               var2.setBlockEntity(var1, var3);
+               var2.setBlockEntity(var3);
                return var3;
             }
          }
 
-         if (var5.getBlock() instanceof EntityBlock) {
+         if (var5.hasBlockEntity()) {
             LOGGER.warn("Tried to access a block entity before it was created. {}", var1);
          }
 
          return null;
       }
@@ -221,23 +222,27 @@
       BlockState var6 = var5.setBlockState(var1, var2, false);
       if (var6 != null) {
          this.level.onBlockStateChange(var1, var6, var2);
       }
 
-      Block var7 = var2.getBlock();
-      if (var7.isEntityBlock()) {
+      if (var2.hasBlockEntity()) {
          if (var5.getStatus().getChunkType() == ChunkStatus.ChunkType.LEVELCHUNK) {
-            var5.setBlockEntity(var1, ((EntityBlock)var7).newBlockEntity(this));
+            BlockEntity var7 = ((EntityBlock)var2.getBlock()).newBlockEntity(var1, var2);
+            if (var7 != null) {
+               var5.setBlockEntity(var7);
+            } else {
+               var5.removeBlockEntity(var1);
+            }
          } else {
             CompoundTag var8 = new CompoundTag();
             var8.putInt("x", var1.getX());
             var8.putInt("y", var1.getY());
             var8.putInt("z", var1.getZ());
             var8.putString("id", "DUMMY");
             var5.setBlockEntityNbt(var8);
          }
-      } else if (var6 != null && var6.getBlock().isEntityBlock()) {
+      } else if (var6 != null && var6.hasBlockEntity()) {
          var5.removeBlockEntity(var1);
       }
 
       if (var2.hasPostProcess(this, var1)) {
          this.markPosForPostprocessing(var1);
@@ -249,12 +254,12 @@
    private void markPosForPostprocessing(BlockPos var1) {
       this.getChunk(var1).markPosForPostprocessing(var1);
    }
 
    public boolean addFreshEntity(Entity var1) {
-      int var2 = Mth.floor(var1.getX() / 16.0D);
-      int var3 = Mth.floor(var1.getZ() / 16.0D);
+      int var2 = SectionPos.blockToSectionCoord(var1.getBlockX());
+      int var3 = SectionPos.blockToSectionCoord(var1.getBlockZ());
       this.getChunk(var2, var3).addEntity(var1);
       return true;
    }
 
    public boolean removeBlock(BlockPos var1, boolean var2) {
@@ -281,11 +286,11 @@
    public LevelData getLevelData() {
       return this.levelData;
    }
 
    public DifficultyInstance getCurrentDifficultyAt(BlockPos var1) {
-      if (!this.hasChunk(var1.getX() >> 4, var1.getZ() >> 4)) {
+      if (!this.hasChunk(SectionPos.blockToSectionCoord(var1.getX()), SectionPos.blockToSectionCoord(var1.getZ()))) {
          throw new RuntimeException("We are asking a region for a chunk out of bound");
       } else {
          return new DifficultyInstance(this.level.getDifficulty(), this.level.getDayTime(), 0L, this.level.getMoonBrightness());
       }
    }
@@ -313,11 +318,11 @@
    public Random getRandom() {
       return this.random;
    }
 
    public int getHeight(Heightmap.Types var1, int var2, int var3) {
-      return this.getChunk(var2 >> 4, var3 >> 4).getHeight(var1, var2 & 15, var3 & 15) + 1;
+      return this.getChunk(SectionPos.blockToSectionCoord(var2), SectionPos.blockToSectionCoord(var3)).getHeight(var1, var2 & 15, var3 & 15) + 1;
    }
 
    public void playSound(@Nullable Player var1, BlockPos var2, SoundEvent var3, SoundSource var4, float var5, float var6) {
    }
 
@@ -325,19 +330,22 @@
    }
 
    public void levelEvent(@Nullable Player var1, int var2, BlockPos var3, int var4) {
    }
 
+   public void gameEvent(@Nullable Entity var1, GameEvent var2, BlockPos var3) {
+   }
+
    public DimensionType dimensionType() {
       return this.dimensionType;
    }
 
    public boolean isStateAtPosition(BlockPos var1, Predicate<BlockState> var2) {
       return var2.test(this.getBlockState(var1));
    }
 
-   public <T extends Entity> List<T> getEntitiesOfClass(Class<? extends T> var1, AABB var2, @Nullable Predicate<? super T> var3) {
+   public <T extends Entity> List<T> getEntities(EntityTypeTest<Entity, T> var1, AABB var2, Predicate<? super T> var3) {
       return Collections.emptyList();
    }
 
    public List<Entity> getEntities(@Nullable Entity var1, AABB var2, @Nullable Predicate<? super Entity> var3) {
       return Collections.emptyList();
@@ -348,6 +356,14 @@
    }
 
    public Stream<? extends StructureStart<?>> startsForFeature(SectionPos var1, StructureFeature<?> var2) {
       return this.structureFeatureManager.startsForFeature(var1, var2);
    }
+
+   public int getMinBuildHeight() {
+      return this.level.getMinBuildHeight();
+   }
+
+   public int getHeight() {
+      return this.level.getHeight();
+   }
 }
