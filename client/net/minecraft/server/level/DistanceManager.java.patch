--- net/minecraft/server/level/DistanceManager.java
+++ net/minecraft/server/level/DistanceManager.java
@@ -14,10 +14,16 @@
 import it.unimi.dsi.fastutil.longs.LongSet;
 import it.unimi.dsi.fastutil.longs.Long2ObjectMap.Entry;
 import it.unimi.dsi.fastutil.objects.ObjectIterator;
 import it.unimi.dsi.fastutil.objects.ObjectOpenHashSet;
 import it.unimi.dsi.fastutil.objects.ObjectSet;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.nio.charset.StandardCharsets;
+import java.util.Iterator;
+import java.util.Objects;
 import java.util.Set;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.Executor;
 import javax.annotation.Nullable;
 import net.minecraft.core.SectionPos;
@@ -27,27 +33,29 @@
 import net.minecraft.world.level.chunk.ChunkStatus;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public abstract class DistanceManager {
-   private static final Logger LOGGER = LogManager.getLogger();
-   private static final int PLAYER_TICKET_LEVEL;
-   private final Long2ObjectMap<ObjectSet<ServerPlayer>> playersPerChunk = new Long2ObjectOpenHashMap();
-   private final Long2ObjectOpenHashMap<SortedArraySet<Ticket<?>>> tickets = new Long2ObjectOpenHashMap();
+   static final Logger LOGGER = LogManager.getLogger();
+   private static final int ENTITY_TICKING_RANGE = 2;
+   static final int PLAYER_TICKET_LEVEL;
+   private static final int INITIAL_TICKET_LIST_CAPACITY = 4;
+   final Long2ObjectMap<ObjectSet<ServerPlayer>> playersPerChunk = new Long2ObjectOpenHashMap();
+   final Long2ObjectOpenHashMap<SortedArraySet<Ticket<?>>> tickets = new Long2ObjectOpenHashMap();
    private final DistanceManager.ChunkTicketTracker ticketTracker = new DistanceManager.ChunkTicketTracker();
    private final DistanceManager.FixedPlayerDistanceChunkTracker naturalSpawnChunkCounter = new DistanceManager.FixedPlayerDistanceChunkTracker(8);
    private final DistanceManager.PlayerTicketTracker playerTicketManager = new DistanceManager.PlayerTicketTracker(33);
-   private final Set<ChunkHolder> chunksToUpdateFutures = Sets.newHashSet();
-   private final ChunkTaskPriorityQueueSorter ticketThrottler;
-   private final ProcessorHandle<ChunkTaskPriorityQueueSorter.Message<Runnable>> ticketThrottlerInput;
-   private final ProcessorHandle<ChunkTaskPriorityQueueSorter.Release> ticketThrottlerReleaser;
-   private final LongSet ticketsToRelease = new LongOpenHashSet();
-   private final Executor mainThreadExecutor;
+   final Set<ChunkHolder> chunksToUpdateFutures = Sets.newHashSet();
+   final ChunkTaskPriorityQueueSorter ticketThrottler;
+   final ProcessorHandle<ChunkTaskPriorityQueueSorter.Message<Runnable>> ticketThrottlerInput;
+   final ProcessorHandle<ChunkTaskPriorityQueueSorter.Release> ticketThrottlerReleaser;
+   final LongSet ticketsToRelease = new LongOpenHashSet();
+   final Executor mainThreadExecutor;
    private long ticketTickCounter;
 
    protected DistanceManager(Executor var1, Executor var2) {
-      var2.getClass();
+      Objects.requireNonNull(var2);
       ProcessorHandle var3 = ProcessorHandle.of("player ticket throttler", var2::execute);
       ChunkTaskPriorityQueueSorter var4 = new ChunkTaskPriorityQueueSorter(ImmutableList.of(var3), var1, 4);
       this.ticketThrottler = var4;
       this.ticketThrottlerInput = var4.getProcessor(var3, true);
       this.ticketThrottlerReleaser = var4.getReleaseProcessor(var3);
@@ -92,12 +100,12 @@
       boolean var3 = var2 != 0;
       if (var3) {
       }
 
       if (!this.chunksToUpdateFutures.isEmpty()) {
-         this.chunksToUpdateFutures.forEach((var1x) -> {
-            var1x.updateFutures(var1);
+         this.chunksToUpdateFutures.forEach((var2x) -> {
+            var2x.updateFutures(var1, this.mainThreadExecutor);
          });
          this.chunksToUpdateFutures.clear();
          return true;
       } else {
          if (!this.ticketsToRelease.isEmpty()) {
@@ -128,22 +136,22 @@
 
          return var3;
       }
    }
 
-   private void addTicket(long var1, Ticket<?> var3) {
+   void addTicket(long var1, Ticket<?> var3) {
       SortedArraySet var4 = this.getTickets(var1);
       int var5 = getTicketLevelAt(var4);
       Ticket var6 = (Ticket)var4.addOrGet(var3);
       var6.setCreatedTick(this.ticketTickCounter);
       if (var3.getTicketLevel() < var5) {
          this.ticketTracker.update(var1, var3.getTicketLevel(), true);
       }
 
    }
 
-   private void removeTicket(long var1, Ticket<?> var3) {
+   void removeTicket(long var1, Ticket<?> var3) {
       SortedArraySet var4 = this.getTickets(var1);
       if (var4.remove(var3)) {
       }
 
       if (var4.isEmpty()) {
@@ -236,10 +244,45 @@
 
    public String getDebugStatus() {
       return this.ticketThrottler.getDebugStatus();
    }
 
+   private void dumpTickets(String var1) {
+      try {
+         FileOutputStream var2 = new FileOutputStream(new File(var1));
+
+         try {
+            ObjectIterator var3 = this.tickets.long2ObjectEntrySet().iterator();
+
+            while(var3.hasNext()) {
+               Entry var4 = (Entry)var3.next();
+               ChunkPos var5 = new ChunkPos(var4.getLongKey());
+               Iterator var6 = ((SortedArraySet)var4.getValue()).iterator();
+
+               while(var6.hasNext()) {
+                  Ticket var7 = (Ticket)var6.next();
+                  int var10001 = var5.x;
+                  var2.write((var10001 + "\t" + var5.z + "\t" + var7.getType() + "\t" + var7.getTicketLevel() + "\t\n").getBytes(StandardCharsets.UTF_8));
+               }
+            }
+         } catch (Throwable var9) {
+            try {
+               var2.close();
+            } catch (Throwable var8) {
+               var9.addSuppressed(var8);
+            }
+
+            throw var9;
+         }
+
+         var2.close();
+      } catch (IOException var10) {
+         LOGGER.error(var10);
+      }
+
+   }
+
    static {
       PLAYER_TICKET_LEVEL = 33 + ChunkStatus.getDistance(ChunkStatus.FULL) - 2;
    }
 
    class ChunkTicketTracker extends ChunkTracker {
@@ -282,10 +325,82 @@
       public int runDistanceUpdates(int var1) {
          return this.runUpdates(var1);
       }
    }
 
+   private class FixedPlayerDistanceChunkTracker extends ChunkTracker {
+      protected final Long2ByteMap chunks = new Long2ByteOpenHashMap();
+      protected final int maxDistance;
+
+      protected FixedPlayerDistanceChunkTracker(int var2) {
+         super(var2 + 2, 16, 256);
+         this.maxDistance = var2;
+         this.chunks.defaultReturnValue((byte)(var2 + 2));
+      }
+
+      protected int getLevel(long var1) {
+         return this.chunks.get(var1);
+      }
+
+      protected void setLevel(long var1, int var3) {
+         byte var4;
+         if (var3 > this.maxDistance) {
+            var4 = this.chunks.remove(var1);
+         } else {
+            var4 = this.chunks.put(var1, (byte)var3);
+         }
+
+         this.onLevelChange(var1, var4, var3);
+      }
+
+      protected void onLevelChange(long var1, int var3, int var4) {
+      }
+
+      protected int getLevelFromSource(long var1) {
+         return this.havePlayer(var1) ? 0 : Integer.MAX_VALUE;
+      }
+
+      private boolean havePlayer(long var1) {
+         ObjectSet var3 = (ObjectSet)DistanceManager.this.playersPerChunk.get(var1);
+         return var3 != null && !var3.isEmpty();
+      }
+
+      public void runAllUpdates() {
+         this.runUpdates(Integer.MAX_VALUE);
+      }
+
+      private void dumpChunks(String var1) {
+         try {
+            FileOutputStream var2 = new FileOutputStream(new File(var1));
+
+            try {
+               ObjectIterator var3 = this.chunks.long2ByteEntrySet().iterator();
+
+               while(var3.hasNext()) {
+                  it.unimi.dsi.fastutil.longs.Long2ByteMap.Entry var4 = (it.unimi.dsi.fastutil.longs.Long2ByteMap.Entry)var3.next();
+                  ChunkPos var5 = new ChunkPos(var4.getLongKey());
+                  String var6 = Byte.toString(var4.getByteValue());
+                  var2.write((var5.x + "\t" + var5.z + "\t" + var6 + "\n").getBytes(StandardCharsets.UTF_8));
+               }
+            } catch (Throwable var8) {
+               try {
+                  var2.close();
+               } catch (Throwable var7) {
+                  var8.addSuppressed(var7);
+               }
+
+               throw var8;
+            }
+
+            var2.close();
+         } catch (IOException var9) {
+            DistanceManager.LOGGER.error(var9);
+         }
+
+      }
+   }
+
    class PlayerTicketTracker extends DistanceManager.FixedPlayerDistanceChunkTracker {
       private int viewDistance = 0;
       private final Long2IntMap queueLevels = Long2IntMaps.synchronize(new Long2IntOpenHashMap());
       private final LongSet toUpdate = new LongOpenHashSet();
 
@@ -371,48 +486,6 @@
 
       private boolean haveTicketFor(int var1) {
          return var1 <= this.viewDistance - 2;
       }
    }
-
-   class FixedPlayerDistanceChunkTracker extends ChunkTracker {
-      protected final Long2ByteMap chunks = new Long2ByteOpenHashMap();
-      protected final int maxDistance;
-
-      protected FixedPlayerDistanceChunkTracker(int var2) {
-         super(var2 + 2, 16, 256);
-         this.maxDistance = var2;
-         this.chunks.defaultReturnValue((byte)(var2 + 2));
-      }
-
-      protected int getLevel(long var1) {
-         return this.chunks.get(var1);
-      }
-
-      protected void setLevel(long var1, int var3) {
-         byte var4;
-         if (var3 > this.maxDistance) {
-            var4 = this.chunks.remove(var1);
-         } else {
-            var4 = this.chunks.put(var1, (byte)var3);
-         }
-
-         this.onLevelChange(var1, var4, var3);
-      }
-
-      protected void onLevelChange(long var1, int var3, int var4) {
-      }
-
-      protected int getLevelFromSource(long var1) {
-         return this.havePlayer(var1) ? 0 : Integer.MAX_VALUE;
-      }
-
-      private boolean havePlayer(long var1) {
-         ObjectSet var3 = (ObjectSet)DistanceManager.this.playersPerChunk.get(var1);
-         return var3 != null && !var3.isEmpty();
-      }
-
-      public void runAllUpdates() {
-         this.runUpdates(Integer.MAX_VALUE);
-      }
-   }
 }
