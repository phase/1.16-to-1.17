--- net/minecraft/server/players/StoredUserList.java
+++ net/minecraft/server/players/StoredUserList.java
@@ -15,10 +15,12 @@
 import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.Map;
+import java.util.Objects;
+import java.util.stream.Stream;
 import javax.annotation.Nullable;
 import net.minecraft.Util;
 import net.minecraft.util.GsonHelper;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -68,11 +70,11 @@
    public void remove(StoredUserEntry<K> var1) {
       this.remove(var1.getUser());
    }
 
    public String[] getUserList() {
-      return (String[])this.map.keySet().toArray(new String[this.map.size()]);
+      return (String[])this.map.keySet().toArray(new String[0]);
    }
 
    public boolean isEmpty() {
       return this.map.size() < 1;
    }
@@ -111,74 +113,70 @@
       return this.map.values();
    }
 
    public void save() throws IOException {
       JsonArray var1 = new JsonArray();
-      this.map.values().stream().map((var0) -> {
+      Stream var10000 = this.map.values().stream().map((var0) -> {
          JsonObject var10000 = new JsonObject();
-         var0.getClass();
+         Objects.requireNonNull(var0);
          return (JsonObject)Util.make(var10000, var0::serialize);
-      }).forEach(var1::add);
+      });
+      Objects.requireNonNull(var1);
+      var10000.forEach(var1::add);
       BufferedWriter var2 = Files.newWriter(this.file, StandardCharsets.UTF_8);
-      Throwable var3 = null;
 
       try {
          GSON.toJson(var1, var2);
-      } catch (Throwable var12) {
-         var3 = var12;
-         throw var12;
-      } finally {
+      } catch (Throwable var6) {
          if (var2 != null) {
-            if (var3 != null) {
-               try {
-                  var2.close();
-               } catch (Throwable var11) {
-                  var3.addSuppressed(var11);
-               }
-            } else {
+            try {
                var2.close();
+            } catch (Throwable var5) {
+               var6.addSuppressed(var5);
             }
          }
 
+         throw var6;
       }
 
+      if (var2 != null) {
+         var2.close();
+      }
+
    }
 
    public void load() throws IOException {
       if (this.file.exists()) {
          BufferedReader var1 = Files.newReader(this.file, StandardCharsets.UTF_8);
-         Throwable var2 = null;
 
          try {
-            JsonArray var3 = (JsonArray)GSON.fromJson(var1, JsonArray.class);
+            JsonArray var2 = (JsonArray)GSON.fromJson(var1, JsonArray.class);
             this.map.clear();
-            Iterator var4 = var3.iterator();
+            Iterator var3 = var2.iterator();
 
-            while(var4.hasNext()) {
-               JsonElement var5 = (JsonElement)var4.next();
-               JsonObject var6 = GsonHelper.convertToJsonObject(var5, "entry");
-               StoredUserEntry var7 = this.createEntry(var6);
-               if (var7.getUser() != null) {
-                  this.map.put(this.getKeyForUser(var7.getUser()), var7);
+            while(var3.hasNext()) {
+               JsonElement var4 = (JsonElement)var3.next();
+               JsonObject var5 = GsonHelper.convertToJsonObject(var4, "entry");
+               StoredUserEntry var6 = this.createEntry(var5);
+               if (var6.getUser() != null) {
+                  this.map.put(this.getKeyForUser(var6.getUser()), var6);
                }
             }
-         } catch (Throwable var15) {
-            var2 = var15;
-            throw var15;
-         } finally {
+         } catch (Throwable var8) {
             if (var1 != null) {
-               if (var2 != null) {
-                  try {
-                     var1.close();
-                  } catch (Throwable var14) {
-                     var2.addSuppressed(var14);
-                  }
-               } else {
+               try {
                   var1.close();
+               } catch (Throwable var7) {
+                  var8.addSuppressed(var7);
                }
             }
 
+            throw var8;
          }
 
+         if (var1 != null) {
+            var1.close();
+         }
+
       }
    }
 }
