--- net/minecraft/server/players/GameProfileCache.java
+++ net/minecraft/server/players/GameProfileCache.java
@@ -29,27 +29,36 @@
 import java.util.Date;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.UUID;
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.Executor;
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.concurrent.atomic.AtomicReference;
+import java.util.function.Consumer;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
+import net.minecraft.Util;
 import net.minecraft.world.entity.player.Player;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class GameProfileCache {
    private static final Logger LOGGER = LogManager.getLogger();
+   private static final int GAMEPROFILES_MRU_LIMIT = 1000;
+   private static final int GAMEPROFILES_EXPIRATION_MONTHS = 1;
    private static boolean usesAuthentication;
    private final Map<String, GameProfileCache.GameProfileInfo> profilesByName = Maps.newConcurrentMap();
    private final Map<UUID, GameProfileCache.GameProfileInfo> profilesByUUID = Maps.newConcurrentMap();
+   private final Map<String, CompletableFuture<GameProfile>> requests = Maps.newConcurrentMap();
    private final GameProfileRepository profileRepository;
    private final Gson gson = (new GsonBuilder()).create();
    private final File file;
    private final AtomicLong operationCount = new AtomicLong();
+   @Nullable
+   private Executor executor;
 
    public GameProfileCache(GameProfileRepository var1, File var2) {
       this.profileRepository = var1;
       this.file = var2;
       Lists.reverse(this.load()).forEach(this::safeAdd);
@@ -143,10 +152,32 @@
       }
 
       return var5;
    }
 
+   public void getAsync(String var1, Consumer<GameProfile> var2) {
+      if (this.executor == null) {
+         throw new IllegalStateException("No executor");
+      } else {
+         CompletableFuture var3 = (CompletableFuture)this.requests.get(var1);
+         if (var3 != null) {
+            this.requests.put(var1, var3.whenCompleteAsync((var1x, var2x) -> {
+               var2.accept(var1x);
+            }, this.executor));
+         } else {
+            this.requests.put(var1, CompletableFuture.supplyAsync(() -> {
+               return this.get(var1);
+            }, Util.backgroundExecutor()).whenCompleteAsync((var2x, var3x) -> {
+               this.requests.remove(var1);
+            }, this.executor).whenCompleteAsync((var1x, var2x) -> {
+               var2.accept(var1x);
+            }, this.executor));
+         }
+
+      }
+   }
+
    @Nullable
    public GameProfile get(UUID var1) {
       GameProfileCache.GameProfileInfo var2 = (GameProfileCache.GameProfileInfo)this.profilesByUUID.get(var1);
       if (var2 == null) {
          return null;
@@ -154,59 +185,66 @@
          var2.setLastAccess(this.getNextOperation());
          return var2.getProfile();
       }
    }
 
+   public void setExecutor(Executor var1) {
+      this.executor = var1;
+   }
+
    private static DateFormat createDateFormat() {
       return new SimpleDateFormat("yyyy-MM-dd HH:mm:ss Z");
    }
 
    public List<GameProfileCache.GameProfileInfo> load() {
       ArrayList var1 = Lists.newArrayList();
 
       try {
          BufferedReader var2 = Files.newReader(this.file, StandardCharsets.UTF_8);
-         Throwable var3 = null;
 
-         ArrayList var5;
-         try {
-            JsonArray var4 = (JsonArray)this.gson.fromJson(var2, JsonArray.class);
-            if (var4 != null) {
-               DateFormat var21 = createDateFormat();
-               var4.forEach((var2x) -> {
-                  GameProfileCache.GameProfileInfo var3 = readGameProfile(var2x, var21);
-                  if (var3 != null) {
-                     var1.add(var3);
-                  }
+         label54: {
+            ArrayList var4;
+            try {
+               JsonArray var3 = (JsonArray)this.gson.fromJson(var2, JsonArray.class);
+               if (var3 != null) {
+                  DateFormat var9 = createDateFormat();
+                  var3.forEach((var2x) -> {
+                     GameProfileCache.GameProfileInfo var3 = readGameProfile(var2x, var9);
+                     if (var3 != null) {
+                        var1.add(var3);
+                     }
 
-               });
-               return var1;
-            }
+                  });
+                  break label54;
+               }
 
-            var5 = var1;
-         } catch (Throwable var17) {
-            var3 = var17;
-            throw var17;
-         } finally {
-            if (var2 != null) {
-               if (var3 != null) {
+               var4 = var1;
+            } catch (Throwable var6) {
+               if (var2 != null) {
                   try {
                      var2.close();
-                  } catch (Throwable var16) {
-                     var3.addSuppressed(var16);
+                  } catch (Throwable var5) {
+                     var6.addSuppressed(var5);
                   }
-               } else {
-                  var2.close();
                }
+
+               throw var6;
             }
 
+            if (var2 != null) {
+               var2.close();
+            }
+
+            return var4;
          }
 
-         return var5;
-      } catch (FileNotFoundException var19) {
-      } catch (JsonParseException | IOException var20) {
-         LOGGER.warn("Failed to load profile cache {}", this.file, var20);
+         if (var2 != null) {
+            var2.close();
+         }
+      } catch (FileNotFoundException var7) {
+      } catch (JsonParseException | IOException var8) {
+         LOGGER.warn("Failed to load profile cache {}", this.file, var8);
       }
 
       return var1;
    }
 
@@ -218,32 +256,29 @@
       });
       String var3 = this.gson.toJson(var1);
 
       try {
          BufferedWriter var4 = Files.newWriter(this.file, StandardCharsets.UTF_8);
-         Throwable var5 = null;
 
          try {
             var4.write(var3);
-         } catch (Throwable var15) {
-            var5 = var15;
-            throw var15;
-         } finally {
+         } catch (Throwable var8) {
             if (var4 != null) {
-               if (var5 != null) {
-                  try {
-                     var4.close();
-                  } catch (Throwable var14) {
-                     var5.addSuppressed(var14);
-                  }
-               } else {
+               try {
                   var4.close();
+               } catch (Throwable var7) {
+                  var8.addSuppressed(var7);
                }
             }
 
+            throw var8;
          }
-      } catch (IOException var17) {
+
+         if (var4 != null) {
+            var4.close();
+         }
+      } catch (IOException var9) {
       }
 
    }
 
    private Stream<GameProfileCache.GameProfileInfo> getTopMRUProfiles(int var1) {
@@ -297,14 +332,14 @@
       }
    }
 
    static class GameProfileInfo {
       private final GameProfile profile;
-      private final Date expirationDate;
+      final Date expirationDate;
       private volatile long lastAccess;
 
-      private GameProfileInfo(GameProfile var1, Date var2) {
+      GameProfileInfo(GameProfile var1, Date var2) {
          this.profile = var1;
          this.expirationDate = var2;
       }
 
       public GameProfile getProfile() {
