--- net/minecraft/server/players/OldUsersConverter.java
+++ net/minecraft/server/players/OldUsersConverter.java
@@ -28,16 +28,19 @@
 import net.minecraft.world.level.storage.LevelResource;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class OldUsersConverter {
-   private static final Logger LOGGER = LogManager.getLogger();
+   static final Logger LOGGER = LogManager.getLogger();
    public static final File OLD_IPBANLIST = new File("banned-ips.txt");
    public static final File OLD_USERBANLIST = new File("banned-players.txt");
    public static final File OLD_OPLIST = new File("ops.txt");
    public static final File OLD_WHITELIST = new File("white-list.txt");
 
+   public OldUsersConverter() {
+   }
+
    static List<String> readOldListFormat(File var0, Map<String, String[]> var1) throws IOException {
       List var2 = Files.readLines(var0, StandardCharsets.UTF_8);
       Iterator var3 = var2.iterator();
 
       while(var3.hasNext()) {
@@ -363,11 +366,11 @@
       } else {
          return true;
       }
    }
 
-   private static void ensureDirectoryExists(File var0) {
+   static void ensureDirectoryExists(File var0) {
       if (var0.exists()) {
          if (!var0.isDirectory()) {
             throw new OldUsersConverter.ConversionError("Can't create directory " + var0.getName() + " in world save directory.");
          }
       } else if (!var0.mkdirs()) {
@@ -446,26 +449,26 @@
    private static void renameOldFile(File var0) {
       File var1 = new File(var0.getName() + ".converted");
       var0.renameTo(var1);
    }
 
-   private static Date parseDate(String var0, Date var1) {
+   static Date parseDate(String var0, Date var1) {
       Date var2;
       try {
          var2 = BanListEntry.DATE_FORMAT.parse(var0);
       } catch (ParseException var4) {
          var2 = var1;
       }
 
       return var2;
    }
 
-   static class ConversionError extends RuntimeException {
-      private ConversionError(String var1, Throwable var2) {
+   private static class ConversionError extends RuntimeException {
+      ConversionError(String var1, Throwable var2) {
          super(var1, var2);
       }
 
-      private ConversionError(String var1) {
+      ConversionError(String var1) {
          super(var1);
       }
    }
 }
