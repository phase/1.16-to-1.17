--- net/minecraft/server/commands/DefaultGameModeCommands.java
+++ net/minecraft/server/commands/DefaultGameModeCommands.java
@@ -18,35 +18,33 @@
       GameType[] var2 = GameType.values();
       int var3 = var2.length;
 
       for(int var4 = 0; var4 < var3; ++var4) {
          GameType var5 = var2[var4];
-         if (var5 != GameType.NOT_SET) {
-            var1.then(Commands.literal(var5.getName()).executes((var1x) -> {
-               return setMode((CommandSourceStack)var1x.getSource(), var5);
-            }));
-         }
+         var1.then(Commands.literal(var5.getName()).executes((var1x) -> {
+            return setMode((CommandSourceStack)var1x.getSource(), var5);
+         }));
       }
 
       var0.register(var1);
    }
 
    private static int setMode(CommandSourceStack var0, GameType var1) {
       int var2 = 0;
       MinecraftServer var3 = var0.getServer();
       var3.setDefaultGameType(var1);
-      if (var3.getForceGameType()) {
-         Iterator var4 = var3.getPlayerList().getPlayers().iterator();
+      GameType var4 = var3.getForcedGameType();
+      if (var4 != null) {
+         Iterator var5 = var3.getPlayerList().getPlayers().iterator();
 
-         while(var4.hasNext()) {
-            ServerPlayer var5 = (ServerPlayer)var4.next();
-            if (var5.gameMode.getGameModeForPlayer() != var1) {
-               var5.setGameMode(var1);
+         while(var5.hasNext()) {
+            ServerPlayer var6 = (ServerPlayer)var5.next();
+            if (var6.setGameMode(var4)) {
                ++var2;
             }
          }
       }
 
-      var0.sendSuccess(new TranslatableComponent("commands.defaultgamemode.success", new Object[]{var1.getDisplayName()}), true);
+      var0.sendSuccess(new TranslatableComponent("commands.defaultgamemode.success", new Object[]{var1.getLongDisplayName()}), true);
       return var2;
    }
 }
