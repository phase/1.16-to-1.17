--- net/minecraft/server/commands/TeleportCommand.java
+++ net/minecraft/server/commands/TeleportCommand.java
@@ -8,10 +8,11 @@
 import com.mojang.brigadier.tree.LiteralCommandNode;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.EnumSet;
 import java.util.Iterator;
+import java.util.Locale;
 import java.util.Set;
 import javax.annotation.Nullable;
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.commands.Commands;
 import net.minecraft.commands.arguments.EntityAnchorArgument;
@@ -36,14 +37,21 @@
 import net.minecraft.world.phys.Vec3;
 
 public class TeleportCommand {
    private static final SimpleCommandExceptionType INVALID_POSITION = new SimpleCommandExceptionType(new TranslatableComponent("commands.teleport.invalidPosition"));
 
+   public TeleportCommand() {
+   }
+
    public static void register(CommandDispatcher<CommandSourceStack> var0) {
       LiteralCommandNode var1 = var0.register((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)Commands.literal("teleport").requires((var0x) -> {
          return var0x.hasPermission(2);
-      })).then(((RequiredArgumentBuilder)Commands.argument("targets", EntityArgument.entities()).then(((RequiredArgumentBuilder)((RequiredArgumentBuilder)Commands.argument("location", Vec3Argument.vec3()).executes((var0x) -> {
+      })).then(Commands.argument("location", Vec3Argument.vec3()).executes((var0x) -> {
+         return teleportToPos((CommandSourceStack)var0x.getSource(), Collections.singleton(((CommandSourceStack)var0x.getSource()).getEntityOrException()), ((CommandSourceStack)var0x.getSource()).getLevel(), Vec3Argument.getCoordinates(var0x, "location"), WorldCoordinates.current(), (TeleportCommand.LookAt)null);
+      }))).then(Commands.argument("destination", EntityArgument.entity()).executes((var0x) -> {
+         return teleportToEntity((CommandSourceStack)var0x.getSource(), Collections.singleton(((CommandSourceStack)var0x.getSource()).getEntityOrException()), EntityArgument.getEntity(var0x, "destination"));
+      }))).then(((RequiredArgumentBuilder)Commands.argument("targets", EntityArgument.entities()).then(((RequiredArgumentBuilder)((RequiredArgumentBuilder)Commands.argument("location", Vec3Argument.vec3()).executes((var0x) -> {
          return teleportToPos((CommandSourceStack)var0x.getSource(), EntityArgument.getEntities(var0x, "targets"), ((CommandSourceStack)var0x.getSource()).getLevel(), Vec3Argument.getCoordinates(var0x, "location"), (Coordinates)null, (TeleportCommand.LookAt)null);
       })).then(Commands.argument("rotation", RotationArgument.rotation()).executes((var0x) -> {
          return teleportToPos((CommandSourceStack)var0x.getSource(), EntityArgument.getEntities(var0x, "targets"), ((CommandSourceStack)var0x.getSource()).getLevel(), Vec3Argument.getCoordinates(var0x, "location"), RotationArgument.getRotation(var0x, "rotation"), (TeleportCommand.LookAt)null);
       }))).then(((LiteralArgumentBuilder)Commands.literal("facing").then(Commands.literal("entity").then(((RequiredArgumentBuilder)Commands.argument("facingEntity", EntityArgument.entity()).executes((var0x) -> {
          return teleportToPos((CommandSourceStack)var0x.getSource(), EntityArgument.getEntities(var0x, "targets"), ((CommandSourceStack)var0x.getSource()).getLevel(), Vec3Argument.getCoordinates(var0x, "location"), (Coordinates)null, new TeleportCommand.LookAt(EntityArgument.getEntity(var0x, "facingEntity"), EntityAnchorArgument.Anchor.FEET));
@@ -51,26 +59,22 @@
          return teleportToPos((CommandSourceStack)var0x.getSource(), EntityArgument.getEntities(var0x, "targets"), ((CommandSourceStack)var0x.getSource()).getLevel(), Vec3Argument.getCoordinates(var0x, "location"), (Coordinates)null, new TeleportCommand.LookAt(EntityArgument.getEntity(var0x, "facingEntity"), EntityAnchorArgument.getAnchor(var0x, "facingAnchor")));
       }))))).then(Commands.argument("facingLocation", Vec3Argument.vec3()).executes((var0x) -> {
          return teleportToPos((CommandSourceStack)var0x.getSource(), EntityArgument.getEntities(var0x, "targets"), ((CommandSourceStack)var0x.getSource()).getLevel(), Vec3Argument.getCoordinates(var0x, "location"), (Coordinates)null, new TeleportCommand.LookAt(Vec3Argument.getVec3(var0x, "facingLocation")));
       }))))).then(Commands.argument("destination", EntityArgument.entity()).executes((var0x) -> {
          return teleportToEntity((CommandSourceStack)var0x.getSource(), EntityArgument.getEntities(var0x, "targets"), EntityArgument.getEntity(var0x, "destination"));
-      })))).then(Commands.argument("location", Vec3Argument.vec3()).executes((var0x) -> {
-         return teleportToPos((CommandSourceStack)var0x.getSource(), Collections.singleton(((CommandSourceStack)var0x.getSource()).getEntityOrException()), ((CommandSourceStack)var0x.getSource()).getLevel(), Vec3Argument.getCoordinates(var0x, "location"), WorldCoordinates.current(), (TeleportCommand.LookAt)null);
-      }))).then(Commands.argument("destination", EntityArgument.entity()).executes((var0x) -> {
-         return teleportToEntity((CommandSourceStack)var0x.getSource(), Collections.singleton(((CommandSourceStack)var0x.getSource()).getEntityOrException()), EntityArgument.getEntity(var0x, "destination"));
-      })));
+      }))));
       var0.register((LiteralArgumentBuilder)((LiteralArgumentBuilder)Commands.literal("tp").requires((var0x) -> {
          return var0x.hasPermission(2);
       })).redirect(var1));
    }
 
    private static int teleportToEntity(CommandSourceStack var0, Collection<? extends Entity> var1, Entity var2) throws CommandSyntaxException {
       Iterator var3 = var1.iterator();
 
       while(var3.hasNext()) {
          Entity var4 = (Entity)var3.next();
-         performTeleport(var0, var4, (ServerLevel)var2.level, var2.getX(), var2.getY(), var2.getZ(), EnumSet.noneOf(ClientboundPlayerPositionPacket.RelativeArgument.class), var2.yRot, var2.xRot, (TeleportCommand.LookAt)null);
+         performTeleport(var0, var4, (ServerLevel)var2.level, var2.getX(), var2.getY(), var2.getZ(), EnumSet.noneOf(ClientboundPlayerPositionPacket.RelativeArgument.class), var2.getYRot(), var2.getXRot(), (TeleportCommand.LookAt)null);
       }
 
       if (var1.size() == 1) {
          var0.sendSuccess(new TranslatableComponent("commands.teleport.success.entity.single", new Object[]{((Entity)var1.iterator().next()).getDisplayName(), var2.getDisplayName()}), true);
       } else {
@@ -112,65 +116,69 @@
       Iterator var9 = var1.iterator();
 
       while(var9.hasNext()) {
          Entity var10 = (Entity)var9.next();
          if (var4 == null) {
-            performTeleport(var0, var10, var2, var6.x, var6.y, var6.z, var8, var10.yRot, var10.xRot, var5);
+            performTeleport(var0, var10, var2, var6.x, var6.y, var6.z, var8, var10.getYRot(), var10.getXRot(), var5);
          } else {
             performTeleport(var0, var10, var2, var6.x, var6.y, var6.z, var8, var7.y, var7.x, var5);
          }
       }
 
       if (var1.size() == 1) {
-         var0.sendSuccess(new TranslatableComponent("commands.teleport.success.location.single", new Object[]{((Entity)var1.iterator().next()).getDisplayName(), var6.x, var6.y, var6.z}), true);
+         var0.sendSuccess(new TranslatableComponent("commands.teleport.success.location.single", new Object[]{((Entity)var1.iterator().next()).getDisplayName(), formatDouble(var6.x), formatDouble(var6.y), formatDouble(var6.z)}), true);
       } else {
-         var0.sendSuccess(new TranslatableComponent("commands.teleport.success.location.multiple", new Object[]{var1.size(), var6.x, var6.y, var6.z}), true);
+         var0.sendSuccess(new TranslatableComponent("commands.teleport.success.location.multiple", new Object[]{var1.size(), formatDouble(var6.x), formatDouble(var6.y), formatDouble(var6.z)}), true);
       }
 
       return var1.size();
    }
 
+   private static String formatDouble(double var0) {
+      return String.format(Locale.ROOT, "%f", var0);
+   }
+
    private static void performTeleport(CommandSourceStack var0, Entity var1, ServerLevel var2, double var3, double var5, double var7, Set<ClientboundPlayerPositionPacket.RelativeArgument> var9, float var10, float var11, @Nullable TeleportCommand.LookAt var12) throws CommandSyntaxException {
       BlockPos var13 = new BlockPos(var3, var5, var7);
       if (!Level.isInSpawnableBounds(var13)) {
          throw INVALID_POSITION.create();
       } else {
+         float var14 = Mth.wrapDegrees(var10);
+         float var15 = Mth.wrapDegrees(var11);
          if (var1 instanceof ServerPlayer) {
-            ChunkPos var14 = new ChunkPos(new BlockPos(var3, var5, var7));
-            var2.getChunkSource().addRegionTicket(TicketType.POST_TELEPORT, var14, 1, var1.getId());
+            ChunkPos var16 = new ChunkPos(new BlockPos(var3, var5, var7));
+            var2.getChunkSource().addRegionTicket(TicketType.POST_TELEPORT, var16, 1, var1.getId());
             var1.stopRiding();
             if (((ServerPlayer)var1).isSleeping()) {
                ((ServerPlayer)var1).stopSleepInBed(true, true);
             }
 
             if (var2 == var1.level) {
-               ((ServerPlayer)var1).connection.teleport(var3, var5, var7, var10, var11, var9);
+               ((ServerPlayer)var1).connection.teleport(var3, var5, var7, var14, var15, var9);
             } else {
-               ((ServerPlayer)var1).teleportTo(var2, var3, var5, var7, var10, var11);
+               ((ServerPlayer)var1).teleportTo(var2, var3, var5, var7, var14, var15);
             }
 
-            var1.setYHeadRot(var10);
+            var1.setYHeadRot(var14);
          } else {
-            float var17 = Mth.wrapDegrees(var10);
-            float var15 = Mth.wrapDegrees(var11);
-            var15 = Mth.clamp(var15, -90.0F, 90.0F);
+            float var18 = Mth.clamp(var15, -90.0F, 90.0F);
             if (var2 == var1.level) {
-               var1.moveTo(var3, var5, var7, var17, var15);
-               var1.setYHeadRot(var17);
+               var1.moveTo(var3, var5, var7, var14, var18);
+               var1.setYHeadRot(var14);
             } else {
                var1.unRide();
-               Entity var16 = var1;
+               Entity var17 = var1;
                var1 = var1.getType().create(var2);
                if (var1 == null) {
                   return;
                }
 
-               var1.restoreFrom(var16);
-               var1.moveTo(var3, var5, var7, var17, var15);
-               var1.setYHeadRot(var17);
-               var2.addFromAnotherDimension(var1);
-               var16.removed = true;
+               var1.restoreFrom(var17);
+               var1.moveTo(var3, var5, var7, var14, var18);
+               var1.setYHeadRot(var14);
+               var17.setRemoved(Entity.RemovalReason.CHANGED_DIMENSION);
+               var2.addDuringTeleport(var1);
             }
          }
 
          if (var12 != null) {
             var12.perform(var0, var1);
@@ -186,11 +194,11 @@
          }
 
       }
    }
 
-   static class LookAt {
+   private static class LookAt {
       private final Vec3 position;
       private final Entity entity;
       private final EntityAnchorArgument.Anchor anchor;
 
       public LookAt(Entity var1, EntityAnchorArgument.Anchor var2) {
