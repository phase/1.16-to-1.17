--- net/minecraft/server/commands/FillCommand.java
+++ net/minecraft/server/commands/FillCommand.java
@@ -28,35 +28,39 @@
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.state.pattern.BlockInWorld;
 import net.minecraft.world.level.levelgen.structure.BoundingBox;
 
 public class FillCommand {
+   private static final int MAX_FILL_AREA = 32768;
    private static final Dynamic2CommandExceptionType ERROR_AREA_TOO_LARGE = new Dynamic2CommandExceptionType((var0, var1) -> {
       return new TranslatableComponent("commands.fill.toobig", new Object[]{var0, var1});
    });
-   private static final BlockInput HOLLOW_CORE;
+   static final BlockInput HOLLOW_CORE;
    private static final SimpleCommandExceptionType ERROR_FAILED;
 
+   public FillCommand() {
+   }
+
    public static void register(CommandDispatcher<CommandSourceStack> var0) {
       var0.register((LiteralArgumentBuilder)((LiteralArgumentBuilder)Commands.literal("fill").requires((var0x) -> {
          return var0x.hasPermission(2);
       })).then(Commands.argument("from", BlockPosArgument.blockPos()).then(Commands.argument("to", BlockPosArgument.blockPos()).then(((RequiredArgumentBuilder)((RequiredArgumentBuilder)((RequiredArgumentBuilder)((RequiredArgumentBuilder)((RequiredArgumentBuilder)Commands.argument("block", BlockStateArgument.block()).executes((var0x) -> {
-         return fillBlocks((CommandSourceStack)var0x.getSource(), new BoundingBox(BlockPosArgument.getLoadedBlockPos(var0x, "from"), BlockPosArgument.getLoadedBlockPos(var0x, "to")), BlockStateArgument.getBlock(var0x, "block"), FillCommand.Mode.REPLACE, (Predicate)null);
+         return fillBlocks((CommandSourceStack)var0x.getSource(), BoundingBox.fromCorners(BlockPosArgument.getLoadedBlockPos(var0x, "from"), BlockPosArgument.getLoadedBlockPos(var0x, "to")), BlockStateArgument.getBlock(var0x, "block"), FillCommand.Mode.REPLACE, (Predicate)null);
       })).then(((LiteralArgumentBuilder)Commands.literal("replace").executes((var0x) -> {
-         return fillBlocks((CommandSourceStack)var0x.getSource(), new BoundingBox(BlockPosArgument.getLoadedBlockPos(var0x, "from"), BlockPosArgument.getLoadedBlockPos(var0x, "to")), BlockStateArgument.getBlock(var0x, "block"), FillCommand.Mode.REPLACE, (Predicate)null);
+         return fillBlocks((CommandSourceStack)var0x.getSource(), BoundingBox.fromCorners(BlockPosArgument.getLoadedBlockPos(var0x, "from"), BlockPosArgument.getLoadedBlockPos(var0x, "to")), BlockStateArgument.getBlock(var0x, "block"), FillCommand.Mode.REPLACE, (Predicate)null);
       })).then(Commands.argument("filter", BlockPredicateArgument.blockPredicate()).executes((var0x) -> {
-         return fillBlocks((CommandSourceStack)var0x.getSource(), new BoundingBox(BlockPosArgument.getLoadedBlockPos(var0x, "from"), BlockPosArgument.getLoadedBlockPos(var0x, "to")), BlockStateArgument.getBlock(var0x, "block"), FillCommand.Mode.REPLACE, BlockPredicateArgument.getBlockPredicate(var0x, "filter"));
+         return fillBlocks((CommandSourceStack)var0x.getSource(), BoundingBox.fromCorners(BlockPosArgument.getLoadedBlockPos(var0x, "from"), BlockPosArgument.getLoadedBlockPos(var0x, "to")), BlockStateArgument.getBlock(var0x, "block"), FillCommand.Mode.REPLACE, BlockPredicateArgument.getBlockPredicate(var0x, "filter"));
       })))).then(Commands.literal("keep").executes((var0x) -> {
-         return fillBlocks((CommandSourceStack)var0x.getSource(), new BoundingBox(BlockPosArgument.getLoadedBlockPos(var0x, "from"), BlockPosArgument.getLoadedBlockPos(var0x, "to")), BlockStateArgument.getBlock(var0x, "block"), FillCommand.Mode.REPLACE, (var0) -> {
+         return fillBlocks((CommandSourceStack)var0x.getSource(), BoundingBox.fromCorners(BlockPosArgument.getLoadedBlockPos(var0x, "from"), BlockPosArgument.getLoadedBlockPos(var0x, "to")), BlockStateArgument.getBlock(var0x, "block"), FillCommand.Mode.REPLACE, (var0) -> {
             return var0.getLevel().isEmptyBlock(var0.getPos());
          });
       }))).then(Commands.literal("outline").executes((var0x) -> {
-         return fillBlocks((CommandSourceStack)var0x.getSource(), new BoundingBox(BlockPosArgument.getLoadedBlockPos(var0x, "from"), BlockPosArgument.getLoadedBlockPos(var0x, "to")), BlockStateArgument.getBlock(var0x, "block"), FillCommand.Mode.OUTLINE, (Predicate)null);
+         return fillBlocks((CommandSourceStack)var0x.getSource(), BoundingBox.fromCorners(BlockPosArgument.getLoadedBlockPos(var0x, "from"), BlockPosArgument.getLoadedBlockPos(var0x, "to")), BlockStateArgument.getBlock(var0x, "block"), FillCommand.Mode.OUTLINE, (Predicate)null);
       }))).then(Commands.literal("hollow").executes((var0x) -> {
-         return fillBlocks((CommandSourceStack)var0x.getSource(), new BoundingBox(BlockPosArgument.getLoadedBlockPos(var0x, "from"), BlockPosArgument.getLoadedBlockPos(var0x, "to")), BlockStateArgument.getBlock(var0x, "block"), FillCommand.Mode.HOLLOW, (Predicate)null);
+         return fillBlocks((CommandSourceStack)var0x.getSource(), BoundingBox.fromCorners(BlockPosArgument.getLoadedBlockPos(var0x, "from"), BlockPosArgument.getLoadedBlockPos(var0x, "to")), BlockStateArgument.getBlock(var0x, "block"), FillCommand.Mode.HOLLOW, (Predicate)null);
       }))).then(Commands.literal("destroy").executes((var0x) -> {
-         return fillBlocks((CommandSourceStack)var0x.getSource(), new BoundingBox(BlockPosArgument.getLoadedBlockPos(var0x, "from"), BlockPosArgument.getLoadedBlockPos(var0x, "to")), BlockStateArgument.getBlock(var0x, "block"), FillCommand.Mode.DESTROY, (Predicate)null);
+         return fillBlocks((CommandSourceStack)var0x.getSource(), BoundingBox.fromCorners(BlockPosArgument.getLoadedBlockPos(var0x, "from"), BlockPosArgument.getLoadedBlockPos(var0x, "to")), BlockStateArgument.getBlock(var0x, "block"), FillCommand.Mode.DESTROY, (Predicate)null);
       }))))));
    }
 
    private static int fillBlocks(CommandSourceStack var0, BoundingBox var1, BlockInput var2, FillCommand.Mode var3, @Nullable Predicate<BlockInWorld> var4) throws CommandSyntaxException {
       int var5 = var1.getXSpan() * var1.getYSpan() * var1.getZSpan();
@@ -64,11 +68,11 @@
          throw ERROR_AREA_TOO_LARGE.create(32768, var5);
       } else {
          ArrayList var6 = Lists.newArrayList();
          ServerLevel var7 = var0.getLevel();
          int var8 = 0;
-         Iterator var9 = BlockPos.betweenClosed(var1.x0, var1.y0, var1.z0, var1.x1, var1.y1, var1.z1).iterator();
+         Iterator var9 = BlockPos.betweenClosed(var1.minX(), var1.minY(), var1.minZ(), var1.maxX(), var1.maxY(), var1.maxZ()).iterator();
 
          while(true) {
             BlockPos var10;
             do {
                if (!var9.hasNext()) {
@@ -107,19 +111,19 @@
    static {
       HOLLOW_CORE = new BlockInput(Blocks.AIR.defaultBlockState(), Collections.emptySet(), (CompoundTag)null);
       ERROR_FAILED = new SimpleCommandExceptionType(new TranslatableComponent("commands.fill.failed"));
    }
 
-   static enum Mode {
+   private static enum Mode {
       REPLACE((var0, var1, var2, var3) -> {
          return var2;
       }),
       OUTLINE((var0, var1, var2, var3) -> {
-         return var1.getX() != var0.x0 && var1.getX() != var0.x1 && var1.getY() != var0.y0 && var1.getY() != var0.y1 && var1.getZ() != var0.z0 && var1.getZ() != var0.z1 ? null : var2;
+         return var1.getX() != var0.minX() && var1.getX() != var0.maxX() && var1.getY() != var0.minY() && var1.getY() != var0.maxY() && var1.getZ() != var0.minZ() && var1.getZ() != var0.maxZ() ? null : var2;
       }),
       HOLLOW((var0, var1, var2, var3) -> {
-         return var1.getX() != var0.x0 && var1.getX() != var0.x1 && var1.getY() != var0.y0 && var1.getY() != var0.y1 && var1.getZ() != var0.z0 && var1.getZ() != var0.z1 ? FillCommand.HOLLOW_CORE : var2;
+         return var1.getX() != var0.minX() && var1.getX() != var0.maxX() && var1.getY() != var0.minY() && var1.getY() != var0.maxY() && var1.getZ() != var0.minZ() && var1.getZ() != var0.maxZ() ? FillCommand.HOLLOW_CORE : var2;
       }),
       DESTROY((var0, var1, var2, var3) -> {
          var3.destroyBlock(var1, true);
          return var2;
       });
