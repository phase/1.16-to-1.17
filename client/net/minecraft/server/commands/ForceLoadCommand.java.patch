--- net/minecraft/server/commands/ForceLoadCommand.java
+++ net/minecraft/server/commands/ForceLoadCommand.java
@@ -10,26 +10,31 @@
 import it.unimi.dsi.fastutil.longs.LongSet;
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.commands.Commands;
 import net.minecraft.commands.arguments.coordinates.BlockPosArgument;
 import net.minecraft.commands.arguments.coordinates.ColumnPosArgument;
+import net.minecraft.core.SectionPos;
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.server.level.ColumnPos;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.level.ChunkPos;
 
 public class ForceLoadCommand {
+   private static final int MAX_CHUNK_LIMIT = 256;
    private static final Dynamic2CommandExceptionType ERROR_TOO_MANY_CHUNKS = new Dynamic2CommandExceptionType((var0, var1) -> {
       return new TranslatableComponent("commands.forceload.toobig", new Object[]{var0, var1});
    });
    private static final Dynamic2CommandExceptionType ERROR_NOT_TICKING = new Dynamic2CommandExceptionType((var0, var1) -> {
       return new TranslatableComponent("commands.forceload.query.failure", new Object[]{var0, var1});
    });
    private static final SimpleCommandExceptionType ERROR_ALL_ADDED = new SimpleCommandExceptionType(new TranslatableComponent("commands.forceload.added.failure"));
    private static final SimpleCommandExceptionType ERROR_NONE_REMOVED = new SimpleCommandExceptionType(new TranslatableComponent("commands.forceload.removed.failure"));
 
+   public ForceLoadCommand() {
+   }
+
    public static void register(CommandDispatcher<CommandSourceStack> var0) {
       var0.register((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)Commands.literal("forceload").requires((var0x) -> {
          return var0x.hasPermission(2);
       })).then(Commands.literal("add").then(((RequiredArgumentBuilder)Commands.argument("from", ColumnPosArgument.columnPos()).executes((var0x) -> {
          return changeForceLoad((CommandSourceStack)var0x.getSource(), ColumnPosArgument.getColumnPos(var0x, "from"), ColumnPosArgument.getColumnPos(var0x, "from"), true);
@@ -47,11 +52,11 @@
          return queryForceLoad((CommandSourceStack)var0x.getSource(), ColumnPosArgument.getColumnPos(var0x, "pos"));
       }))));
    }
 
    private static int queryForceLoad(CommandSourceStack var0, ColumnPos var1) throws CommandSyntaxException {
-      ChunkPos var2 = new ChunkPos(var1.x >> 4, var1.z >> 4);
+      ChunkPos var2 = new ChunkPos(SectionPos.blockToSectionCoord(var1.x), SectionPos.blockToSectionCoord(var1.z));
       ServerLevel var3 = var0.getLevel();
       ResourceKey var4 = var3.dimension();
       boolean var5 = var3.getForcedChunks().contains(var2.toLong());
       if (var5) {
          var0.sendSuccess(new TranslatableComponent("commands.forceload.query.success", new Object[]{var2, var4.location()}), false);
@@ -95,14 +100,14 @@
       int var4 = Math.min(var1.x, var2.x);
       int var5 = Math.min(var1.z, var2.z);
       int var6 = Math.max(var1.x, var2.x);
       int var7 = Math.max(var1.z, var2.z);
       if (var4 >= -30000000 && var5 >= -30000000 && var6 < 30000000 && var7 < 30000000) {
-         int var8 = var4 >> 4;
-         int var9 = var5 >> 4;
-         int var10 = var6 >> 4;
-         int var11 = var7 >> 4;
+         int var8 = SectionPos.blockToSectionCoord(var4);
+         int var9 = SectionPos.blockToSectionCoord(var5);
+         int var10 = SectionPos.blockToSectionCoord(var6);
+         int var11 = SectionPos.blockToSectionCoord(var7);
          long var12 = ((long)(var10 - var8) + 1L) * ((long)(var11 - var9) + 1L);
          if (var12 > 256L) {
             throw ERROR_TOO_MANY_CHUNKS.create(256, var12);
          } else {
             ServerLevel var14 = var0.getLevel();
