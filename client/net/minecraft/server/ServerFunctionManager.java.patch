--- net/minecraft/server/ServerFunctionManager.java
+++ net/minecraft/server/ServerFunctionManager.java
@@ -1,27 +1,34 @@
 package net.minecraft.server;
 
 import com.google.common.collect.Lists;
+import com.google.common.collect.Queues;
 import com.mojang.brigadier.CommandDispatcher;
-import java.util.ArrayDeque;
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import java.util.Collection;
+import java.util.Deque;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Objects;
 import java.util.Optional;
+import javax.annotation.Nullable;
 import net.minecraft.commands.CommandFunction;
 import net.minecraft.commands.CommandSourceStack;
+import net.minecraft.network.chat.Component;
+import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.tags.Tag;
+import net.minecraft.util.profiling.ProfilerFiller;
 import net.minecraft.world.level.GameRules;
 
 public class ServerFunctionManager {
+   private static final Component NO_RECURSIVE_TRACES = new TranslatableComponent("commands.debug.function.noRecursion");
    private static final ResourceLocation TICK_FUNCTION_TAG = new ResourceLocation("tick");
    private static final ResourceLocation LOAD_FUNCTION_TAG = new ResourceLocation("load");
-   private final MinecraftServer server;
-   private boolean isInFunction;
-   private final ArrayDeque<ServerFunctionManager.QueuedCommand> commandQueue = new ArrayDeque();
-   private final List<ServerFunctionManager.QueuedCommand> nestedCalls = Lists.newArrayList();
+   final MinecraftServer server;
+   @Nullable
+   private ServerFunctionManager.ExecutionContext context;
    private final List<CommandFunction> ticking = Lists.newArrayList();
    private boolean postReload;
    private ServerFunctionLibrary library;
 
    public ServerFunctionManager(MinecraftServer var1, ServerFunctionLibrary var2) {
@@ -47,11 +54,13 @@
       }
 
    }
 
    private void executeTagFunctions(Collection<CommandFunction> var1, ResourceLocation var2) {
-      this.server.getProfiler().push(var2::toString);
+      ProfilerFiller var10000 = this.server.getProfiler();
+      Objects.requireNonNull(var2);
+      var10000.push(var2::toString);
       Iterator var3 = var1.iterator();
 
       while(var3.hasNext()) {
          CommandFunction var4 = (CommandFunction)var3.next();
          this.execute(var4, this.getGameLoopSender());
@@ -59,58 +68,32 @@
 
       this.server.getProfiler().pop();
    }
 
    public int execute(CommandFunction var1, CommandSourceStack var2) {
-      int var3 = this.getCommandLimit();
-      if (this.isInFunction) {
-         if (this.commandQueue.size() + this.nestedCalls.size() < var3) {
-            this.nestedCalls.add(new ServerFunctionManager.QueuedCommand(this, var2, new CommandFunction.FunctionEntry(var1)));
-         }
+      return this.execute(var1, var2, (ServerFunctionManager.TraceCallbacks)null);
+   }
 
-         return 0;
+   public int execute(CommandFunction var1, CommandSourceStack var2, @Nullable ServerFunctionManager.TraceCallbacks var3) {
+      if (this.context != null) {
+         if (var3 != null) {
+            this.context.reportError(NO_RECURSIVE_TRACES.getString());
+            return 0;
+         } else {
+            this.context.delayFunctionCall(var1, var2);
+            return 0;
+         }
       } else {
-         int var6;
+         int var4;
          try {
-            this.isInFunction = true;
-            int var4 = 0;
-            CommandFunction.Entry[] var5 = var1.getEntries();
-
-            for(var6 = var5.length - 1; var6 >= 0; --var6) {
-               this.commandQueue.push(new ServerFunctionManager.QueuedCommand(this, var2, var5[var6]));
-            }
-
-            while(!this.commandQueue.isEmpty()) {
-               try {
-                  ServerFunctionManager.QueuedCommand var15 = (ServerFunctionManager.QueuedCommand)this.commandQueue.removeFirst();
-                  this.server.getProfiler().push(var15::toString);
-                  var15.execute(this.commandQueue, var3);
-                  if (!this.nestedCalls.isEmpty()) {
-                     List var10000 = Lists.reverse(this.nestedCalls);
-                     ArrayDeque var10001 = this.commandQueue;
-                     var10000.forEach(var10001::addFirst);
-                     this.nestedCalls.clear();
-                  }
-               } finally {
-                  this.server.getProfiler().pop();
-               }
-
-               ++var4;
-               if (var4 >= var3) {
-                  var6 = var4;
-                  return var6;
-               }
-            }
-
-            var6 = var4;
+            this.context = new ServerFunctionManager.ExecutionContext(var3);
+            var4 = this.context.runTopCommand(var1, var2);
          } finally {
-            this.commandQueue.clear();
-            this.nestedCalls.clear();
-            this.isInFunction = false;
+            this.context = null;
          }
 
-         return var6;
+         return var4;
       }
    }
 
    public void replaceLibrary(ServerFunctionLibrary var1) {
       this.library = var1;
@@ -141,25 +124,107 @@
 
    public Iterable<ResourceLocation> getTagNames() {
       return this.library.getTags().getAvailableTags();
    }
 
+   public interface TraceCallbacks {
+      void onCommand(int var1, String var2);
+
+      void onReturn(int var1, String var2, int var3);
+
+      void onError(int var1, String var2);
+
+      void onCall(int var1, ResourceLocation var2, int var3);
+   }
+
+   private class ExecutionContext {
+      private int depth;
+      @Nullable
+      private final ServerFunctionManager.TraceCallbacks tracer;
+      private final Deque<ServerFunctionManager.QueuedCommand> commandQueue = Queues.newArrayDeque();
+      private final List<ServerFunctionManager.QueuedCommand> nestedCalls = Lists.newArrayList();
+
+      ExecutionContext(@Nullable ServerFunctionManager.TraceCallbacks var2) {
+         this.tracer = var2;
+      }
+
+      void delayFunctionCall(CommandFunction var1, CommandSourceStack var2) {
+         int var3 = ServerFunctionManager.this.getCommandLimit();
+         if (this.commandQueue.size() + this.nestedCalls.size() < var3) {
+            this.nestedCalls.add(new ServerFunctionManager.QueuedCommand(var2, this.depth, new CommandFunction.FunctionEntry(var1)));
+         }
+
+      }
+
+      int runTopCommand(CommandFunction var1, CommandSourceStack var2) {
+         int var3 = ServerFunctionManager.this.getCommandLimit();
+         int var4 = 0;
+         CommandFunction.Entry[] var5 = var1.getEntries();
+
+         for(int var6 = var5.length - 1; var6 >= 0; --var6) {
+            this.commandQueue.push(new ServerFunctionManager.QueuedCommand(var2, 0, var5[var6]));
+         }
+
+         do {
+            if (this.commandQueue.isEmpty()) {
+               return var4;
+            }
+
+            try {
+               ServerFunctionManager.QueuedCommand var11 = (ServerFunctionManager.QueuedCommand)this.commandQueue.removeFirst();
+               ProfilerFiller var10000 = ServerFunctionManager.this.server.getProfiler();
+               Objects.requireNonNull(var11);
+               var10000.push(var11::toString);
+               this.depth = var11.depth;
+               var11.execute(ServerFunctionManager.this, this.commandQueue, var3, this.tracer);
+               if (!this.nestedCalls.isEmpty()) {
+                  List var10 = Lists.reverse(this.nestedCalls);
+                  Deque var10001 = this.commandQueue;
+                  Objects.requireNonNull(var10001);
+                  var10.forEach(var10001::addFirst);
+                  this.nestedCalls.clear();
+               }
+            } finally {
+               ServerFunctionManager.this.server.getProfiler().pop();
+            }
+
+            ++var4;
+         } while(var4 < var3);
+
+         return var4;
+      }
+
+      public void reportError(String var1) {
+         if (this.tracer != null) {
+            this.tracer.onError(this.depth, var1);
+         }
+
+      }
+   }
+
    public static class QueuedCommand {
-      private final ServerFunctionManager manager;
       private final CommandSourceStack sender;
+      final int depth;
       private final CommandFunction.Entry entry;
 
-      public QueuedCommand(ServerFunctionManager var1, CommandSourceStack var2, CommandFunction.Entry var3) {
-         this.manager = var1;
-         this.sender = var2;
+      public QueuedCommand(CommandSourceStack var1, int var2, CommandFunction.Entry var3) {
+         this.sender = var1;
+         this.depth = var2;
          this.entry = var3;
       }
 
-      public void execute(ArrayDeque<ServerFunctionManager.QueuedCommand> var1, int var2) {
+      public void execute(ServerFunctionManager var1, Deque<ServerFunctionManager.QueuedCommand> var2, int var3, @Nullable ServerFunctionManager.TraceCallbacks var4) {
          try {
-            this.entry.execute(this.manager, this.sender, var1, var2);
-         } catch (Throwable var4) {
+            this.entry.execute(var1, this.sender, var2, var3, this.depth, var4);
+         } catch (CommandSyntaxException var6) {
+            if (var4 != null) {
+               var4.onError(this.depth, var6.getRawMessage().getString());
+            }
+         } catch (Exception var7) {
+            if (var4 != null) {
+               var4.onError(this.depth, var7.getMessage());
+            }
          }
 
       }
 
       public String toString() {
