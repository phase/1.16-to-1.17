--- net/minecraft/server/packs/VanillaPackResources.java
+++ net/minecraft/server/packs/VanillaPackResources.java
@@ -5,10 +5,11 @@
 import com.google.common.collect.Sets;
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStream;
+import java.io.UncheckedIOException;
 import java.net.URI;
 import java.net.URISyntaxException;
 import java.net.URL;
 import java.nio.file.FileSystem;
 import java.nio.file.FileSystemNotFoundException;
@@ -22,21 +23,25 @@
 import java.util.Collection;
 import java.util.Collections;
 import java.util.Enumeration;
 import java.util.HashSet;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Set;
 import java.util.function.Predicate;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
 import net.minecraft.Util;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.packs.metadata.MetadataSectionSerializer;
+import net.minecraft.server.packs.metadata.pack.PackMetadataSection;
+import net.minecraft.server.packs.resources.Resource;
+import net.minecraft.server.packs.resources.ResourceProvider;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class VanillaPackResources implements PackResources {
+public class VanillaPackResources implements PackResources, ResourceProvider {
    public static Path generatedDir;
    private static final Logger LOGGER = LogManager.getLogger();
    public static Class<?> clientObject;
    private static final Map<PackType, FileSystem> JAR_FILESYSTEM_BY_TYPE = (Map)Util.make(Maps.newHashMap(), (var0) -> {
       Class var1 = VanillaPackResources.class;
@@ -65,14 +70,16 @@
             }
          }
 
       }
    });
+   public final PackMetadataSection packMetadata;
    public final Set<String> namespaces;
 
-   public VanillaPackResources(String... var1) {
-      this.namespaces = ImmutableSet.copyOf(var1);
+   public VanillaPackResources(PackMetadataSection var1, String... var2) {
+      this.packMetadata = var1;
+      this.namespaces = ImmutableSet.copyOf(var2);
    }
 
    public InputStream getRootResource(String var1) throws IOException {
       if (!var1.contains("/") && !var1.contains("\\")) {
          if (generatedDir != null) {
@@ -153,43 +160,44 @@
    }
 
    private static void getResources(Collection<ResourceLocation> var0, int var1, String var2, Path var3, String var4, Predicate<String> var5) throws IOException {
       Path var6 = var3.resolve(var2);
       Stream var7 = Files.walk(var6.resolve(var4), var1, new FileVisitOption[0]);
-      Throwable var8 = null;
 
       try {
-         var7.filter((var1x) -> {
+         Stream var10000 = var7.filter((var1x) -> {
             return !var1x.endsWith(".mcmeta") && Files.isRegularFile(var1x, new LinkOption[0]) && var5.test(var1x.getFileName().toString());
          }).map((var2x) -> {
             return new ResourceLocation(var2, var6.relativize(var2x).toString().replaceAll("\\\\", "/"));
-         }).forEach(var0::add);
-      } catch (Throwable var17) {
-         var8 = var17;
-         throw var17;
-      } finally {
+         });
+         Objects.requireNonNull(var0);
+         var10000.forEach(var0::add);
+      } catch (Throwable var11) {
          if (var7 != null) {
-            if (var8 != null) {
-               try {
-                  var7.close();
-               } catch (Throwable var16) {
-                  var8.addSuppressed(var16);
-               }
-            } else {
+            try {
                var7.close();
+            } catch (Throwable var10) {
+               var11.addSuppressed(var10);
             }
          }
 
+         throw var11;
       }
 
+      if (var7 != null) {
+         var7.close();
+      }
+
    }
 
    @Nullable
    protected InputStream getResourceAsStream(PackType var1, ResourceLocation var2) {
       String var3 = createPath(var1, var2);
       if (generatedDir != null) {
-         Path var4 = generatedDir.resolve(var1.getDirectory() + "/" + var2.getNamespace() + "/" + var2.getPath());
+         Path var10000 = generatedDir;
+         String var10001 = var1.getDirectory();
+         Path var4 = var10000.resolve(var10001 + "/" + var2.getNamespace() + "/" + var2.getPath());
          if (Files.exists(var4, new LinkOption[0])) {
             try {
                return Files.newInputStream(var4);
             } catch (IOException var7) {
             }
@@ -203,11 +211,12 @@
          return VanillaPackResources.class.getResourceAsStream(var3);
       }
    }
 
    private static String createPath(PackType var0, ResourceLocation var1) {
-      return "/" + var0.getDirectory() + "/" + var1.getNamespace() + "/" + var1.getPath();
+      String var10000 = var0.getDirectory();
+      return "/" + var10000 + "/" + var1.getNamespace() + "/" + var1.getPath();
    }
 
    private static boolean isResourceUrlValid(String var0, @Nullable URL var1) throws IOException {
       return var1 != null && (var1.getProtocol().equals("jar") || FolderPackResources.validatePath(new File(var1.getFile()), var0));
    }
@@ -218,11 +227,13 @@
    }
 
    public boolean hasResource(PackType var1, ResourceLocation var2) {
       String var3 = createPath(var1, var2);
       if (generatedDir != null) {
-         Path var4 = generatedDir.resolve(var1.getDirectory() + "/" + var2.getNamespace() + "/" + var2.getPath());
+         Path var10000 = generatedDir;
+         String var10001 = var1.getDirectory();
+         Path var4 = var10000.resolve(var10001 + "/" + var2.getNamespace() + "/" + var2.getPath());
          if (Files.exists(var4, new LinkOption[0])) {
             return true;
          }
       }
 
@@ -240,41 +251,95 @@
 
    @Nullable
    public <T> T getMetadataSection(MetadataSectionSerializer<T> var1) throws IOException {
       try {
          InputStream var2 = this.getRootResource("pack.mcmeta");
-         Throwable var3 = null;
 
-         Object var4;
-         try {
-            var4 = AbstractPackResources.getMetadataFromStream(var1, var2);
-         } catch (Throwable var14) {
-            var3 = var14;
-            throw var14;
-         } finally {
-            if (var2 != null) {
-               if (var3 != null) {
+         label51: {
+            Object var4;
+            try {
+               if (var2 == null) {
+                  break label51;
+               }
+
+               Object var3 = AbstractPackResources.getMetadataFromStream(var1, var2);
+               if (var3 == null) {
+                  break label51;
+               }
+
+               var4 = var3;
+            } catch (Throwable var6) {
+               if (var2 != null) {
                   try {
                      var2.close();
-                  } catch (Throwable var13) {
-                     var3.addSuppressed(var13);
+                  } catch (Throwable var5) {
+                     var6.addSuppressed(var5);
                   }
-               } else {
-                  var2.close();
                }
+
+               throw var6;
             }
 
+            if (var2 != null) {
+               var2.close();
+            }
+
+            return var4;
          }
 
-         return var4;
-      } catch (FileNotFoundException | RuntimeException var16) {
-         return null;
+         if (var2 != null) {
+            var2.close();
+         }
+      } catch (FileNotFoundException | RuntimeException var7) {
       }
+
+      return var1 == PackMetadataSection.SERIALIZER ? this.packMetadata : null;
    }
 
    public String getName() {
       return "Default";
    }
 
    public void close() {
    }
+
+   public Resource getResource(final ResourceLocation var1) throws IOException {
+      return new Resource() {
+         @Nullable
+         InputStream inputStream;
+
+         public void close() throws IOException {
+            if (this.inputStream != null) {
+               this.inputStream.close();
+            }
+
+         }
+
+         public ResourceLocation getLocation() {
+            return var1;
+         }
+
+         public InputStream getInputStream() {
+            try {
+               this.inputStream = VanillaPackResources.this.getResource(PackType.CLIENT_RESOURCES, var1);
+            } catch (IOException var2) {
+               throw new UncheckedIOException("Could not get client resource from vanilla pack", var2);
+            }
+
+            return this.inputStream;
+         }
+
+         public boolean hasMetadata() {
+            return false;
+         }
+
+         @Nullable
+         public <T> T getMetadata(MetadataSectionSerializer<T> var1x) {
+            return null;
+         }
+
+         public String getSourceName() {
+            return var1.toString();
+         }
+      };
+   }
 }
