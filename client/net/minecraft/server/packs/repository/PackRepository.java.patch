--- net/minecraft/server/packs/repository/PackRepository.java
+++ net/minecraft/server/packs/repository/PackRepository.java
@@ -14,10 +14,11 @@
 import java.util.TreeMap;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
 import net.minecraft.server.packs.PackResources;
+import net.minecraft.server.packs.PackType;
 
 public class PackRepository implements AutoCloseable {
    private final Set<RepositorySource> sources;
    private Map<String, Pack> available;
    private List<Pack> selected;
@@ -28,12 +29,14 @@
       this.selected = ImmutableList.of();
       this.constructor = var1;
       this.sources = ImmutableSet.copyOf(var2);
    }
 
-   public PackRepository(RepositorySource... var1) {
-      this(Pack::new, var1);
+   public PackRepository(PackType var1, RepositorySource... var2) {
+      this((var1x, var2x, var3, var4, var5, var6, var7) -> {
+         return new Pack(var1x, var2x, var3, var4, var5, var1, var6, var7);
+      }, var2);
    }
 
    public void reload() {
       List var1 = (List)this.selected.stream().map(Pack::getId).collect(ImmutableList.toImmutableList());
       this.close();
@@ -46,11 +49,11 @@
       Iterator var2 = this.sources.iterator();
 
       while(var2.hasNext()) {
          RepositorySource var3 = (RepositorySource)var2.next();
          var3.loadPacks((var1x) -> {
-            Pack var10000 = (Pack)var1.put(var1x.getId(), var1x);
+            var1.put(var1x.getId(), var1x);
          }, this.constructor);
       }
 
       return ImmutableMap.copyOf(var1);
    }
@@ -74,11 +77,11 @@
    }
 
    private Stream<Pack> getAvailablePacks(Collection<String> var1) {
       Stream var10000 = var1.stream();
       Map var10001 = this.available;
-      var10001.getClass();
+      Objects.requireNonNull(var10001);
       return var10000.map(var10001::get).filter(Objects::nonNull);
    }
 
    public Collection<String> getAvailableIds() {
       return this.available.keySet();
