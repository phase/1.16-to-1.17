--- net/minecraft/server/packs/resources/SimpleReloadInstance.java
+++ net/minecraft/server/packs/resources/SimpleReloadInstance.java
@@ -3,23 +3,27 @@
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Objects;
 import java.util.Set;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.Executor;
 import java.util.concurrent.atomic.AtomicInteger;
 import net.minecraft.Util;
 import net.minecraft.util.Unit;
 import net.minecraft.util.profiling.InactiveProfiler;
 
 public class SimpleReloadInstance<S> implements ReloadInstance {
+   private static final int PREPARATION_PROGRESS_WEIGHT = 2;
+   private static final int EXTRA_RELOAD_PROGRESS_WEIGHT = 2;
+   private static final int LISTENER_PROGRESS_WEIGHT = 1;
    protected final ResourceManager resourceManager;
    protected final CompletableFuture<Unit> allPreparations = new CompletableFuture();
    protected final CompletableFuture<List<S>> allDone;
-   private final Set<PreparableReloadListener> preparingListeners;
+   final Set<PreparableReloadListener> preparingListeners;
    private final int listenerCount;
    private int startedReloads;
    private int finishedReloads;
    private final AtomicInteger startedTaskCounter = new AtomicInteger();
    private final AtomicInteger doneTaskCounter = new AtomicInteger();
@@ -33,10 +37,11 @@
    protected SimpleReloadInstance(Executor var1, final Executor var2, ResourceManager var3, List<PreparableReloadListener> var4, SimpleReloadInstance.StateFactory<S> var5, CompletableFuture<Unit> var6) {
       this.resourceManager = var3;
       this.listenerCount = var4.size();
       this.startedTaskCounter.incrementAndGet();
       AtomicInteger var10001 = this.doneTaskCounter;
+      Objects.requireNonNull(var10001);
       var6.thenRun(var10001::incrementAndGet);
       ArrayList var7 = Lists.newArrayList();
       final CompletableFuture var8 = var6;
       this.preparingListeners = Sets.newHashSet(var4);
 
@@ -70,11 +75,11 @@
             });
          });
          var7.add(var12);
       }
 
-      this.allDone = Util.sequence(var7);
+      this.allDone = Util.sequenceFailFast(var7);
    }
 
    public CompletableFuture<Unit> done() {
       return this.allDone.thenApply((var0) -> {
          return Unit.INSTANCE;
@@ -86,14 +91,10 @@
       float var2 = (float)(this.doneTaskCounter.get() * 2 + this.finishedReloads * 2 + var1 * 1);
       float var3 = (float)(this.startedTaskCounter.get() * 2 + this.startedReloads * 2 + this.listenerCount * 1);
       return var2 / var3;
    }
 
-   public boolean isApplying() {
-      return this.allPreparations.isDone();
-   }
-
    public boolean isDone() {
       return this.allDone.isDone();
    }
 
    public void checkExceptions() {
@@ -101,9 +102,9 @@
          this.allDone.join();
       }
 
    }
 
-   public interface StateFactory<S> {
+   protected interface StateFactory<S> {
       CompletableFuture<S> create(PreparableReloadListener.PreparationBarrier var1, ResourceManager var2, PreparableReloadListener var3, Executor var4, Executor var5);
    }
 }
