--- net/minecraft/server/dedicated/DedicatedServer.java
+++ net/minecraft/server/dedicated/DedicatedServer.java
@@ -59,10 +59,12 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class DedicatedServer extends MinecraftServer implements ServerInterface {
    private static final Logger LOGGER = LogManager.getLogger();
+   private static final int CONVERSION_RETRY_DELAY_MS = 5000;
+   private static final int CONVERSION_RETRIES = 2;
    private static final Pattern SHA1 = Pattern.compile("^[a-fA-F0-9]{40}$");
    private final List<ConsoleInput> consoleInput = Collections.synchronizedList(Lists.newArrayList());
    private QueryThreadGs4 queryThreadGs4;
    private final RconConsoleSource rconConsoleSource;
    private RconThread rconThread;
@@ -74,11 +76,11 @@
 
    public DedicatedServer(Thread var1, RegistryAccess.RegistryHolder var2, LevelStorageSource.LevelStorageAccess var3, PackRepository var4, ServerResources var5, WorldData var6, DedicatedServerSettings var7, DataFixer var8, MinecraftSessionService var9, GameProfileRepository var10, GameProfileCache var11, ChunkProgressListenerFactory var12) {
       super(var1, var2, var3, var6, var4, Proxy.NO_PROXY, var8, var5, var9, var10, var11, var12);
       this.settings = var7;
       this.rconConsoleSource = new RconConsoleSource(this);
-      this.textFilterClient = null;
+      this.textFilterClient = TextFilterClient.createFromConfig(var7.getProperties().textFilteringConfig);
    }
 
    public boolean initServer() throws IOException {
       Thread var1 = new Thread("Server console handler") {
          public void run() {
@@ -96,11 +98,11 @@
          }
       };
       var1.setDaemon(true);
       var1.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(LOGGER));
       var1.start();
-      LOGGER.info("Starting minecraft server version " + SharedConstants.getCurrentVersion().getName());
+      LOGGER.info("Starting minecraft server version {}", SharedConstants.getCurrentVersion().getName());
       if (Runtime.getRuntime().maxMemory() / 1024L / 1024L < 512L) {
          LOGGER.warn("To start the server with more ram, launch it as \"java -Xmx1024M -Xms1024M -jar minecraft_server.jar\"");
       }
 
       LOGGER.info("Loading properties");
@@ -115,11 +117,10 @@
 
       this.setPvpAllowed(var2.pvp);
       this.setFlightAllowed(var2.allowFlight);
       this.setResourcePack(var2.resourcePack, this.getPackHash());
       this.setMotd(var2.motd);
-      this.setForceGameType(var2.forceGameMode);
       super.setPlayerIdleTimeout((Integer)var2.playerIdleTimeout.get());
       this.setEnforceWhitelist(var2.enforceWhitelist);
       this.worldData.setGameType(var2.gamemode);
       LOGGER.info("Default game type: {}", var2.gamemode);
       InetAddress var3 = null;
@@ -157,11 +158,10 @@
       if (!OldUsersConverter.serverReadyAfterUserconversion(this)) {
          return false;
       } else {
          this.setPlayerList(new DedicatedPlayerList(this, this.registryHolder, this.playerDataStorage));
          long var4 = Util.getNanos();
-         this.setMaxBuildHeight(var2.maxBuildHeight);
          SkullBlockEntity.setProfileCache(this.getProfileCache());
          SkullBlockEntity.setSessionService(this.getSessionService());
          GameProfileCache.setUsesAuthentication(this.usesAuthentication());
          LOGGER.info("Preparing level \"{}\"", this.getLevelIdName());
          this.loadLevel();
@@ -191,10 +191,11 @@
          }
 
          Items.AIR.fillItemCategory(CreativeModeTab.TAB_SEARCH, NonNullList.create());
          if (var2.enableJmxMonitoring) {
             MinecraftServerStatistics.registerJmxMonitoring(this);
+            LOGGER.info("JMX monitoring enabled");
          }
 
          return true;
       }
    }
@@ -297,10 +298,14 @@
       var1.setDynamicData("whitelist_enabled", this.getPlayerList().isUsingWhitelist());
       var1.setDynamicData("whitelist_count", this.getPlayerList().getWhiteListNames().length);
       super.populateSnooper(var1);
    }
 
+   public boolean isSnooperEnabled() {
+      return this.getProperties().snooperEnabled;
+   }
+
    public void handleConsoleInput(String var1, CommandSourceStack var2) {
       this.consoleInput.add(new ConsoleInput(var1, var2));
    }
 
    public void handleConsoleInputs() {
@@ -352,14 +357,10 @@
 
    public boolean hasGui() {
       return this.gui != null;
    }
 
-   public boolean publishServer(GameType var1, boolean var2, int var3) {
-      return false;
-   }
-
    public boolean isCommandBlockEnabled() {
       return this.getProperties().enableCommandBlock;
    }
 
    public int getSpawnProtectionRadius() {
@@ -527,10 +528,18 @@
 
    public boolean forceSynchronousWrites() {
       return this.settings.getProperties().syncChunkWrites;
    }
 
-   @Nullable
    public TextFilter createTextFilterForPlayer(ServerPlayer var1) {
-      return this.textFilterClient != null ? this.textFilterClient.createContext(var1.getGameProfile()) : null;
+      return this.textFilterClient != null ? this.textFilterClient.createContext(var1.getGameProfile()) : TextFilter.DUMMY;
    }
+
+   public boolean isResourcePackRequired() {
+      return this.settings.getProperties().requireResourcePack;
+   }
+
+   @Nullable
+   public GameType getForcedGameType() {
+      return this.settings.getProperties().forceGameMode ? this.worldData.getGameType() : null;
+   }
 }
