--- net/minecraft/server/rcon/thread/QueryThreadGs4.java
+++ net/minecraft/server/rcon/thread/QueryThreadGs4.java
@@ -21,10 +21,14 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class QueryThreadGs4 extends GenericThread {
    private static final Logger LOGGER = LogManager.getLogger();
+   private static final String GAME_TYPE = "SMP";
+   private static final String GAME_ID = "MINECRAFT";
+   private static final long CHALLENGE_CHECK_INTERVAL = 30000L;
+   private static final long RESPONSE_CACHE_TIME = 5000L;
    private long lastChallengeCheck;
    private final int port;
    private final int serverPort;
    private final int maxPlayers;
    private final String serverName;
@@ -153,15 +157,15 @@
          this.rulesResponse.writeString("plugins");
          this.rulesResponse.writeString(this.serverInterface.getPluginNames());
          this.rulesResponse.writeString("map");
          this.rulesResponse.writeString(this.worldName);
          this.rulesResponse.writeString("numplayers");
-         this.rulesResponse.writeString("" + this.serverInterface.getPlayerCount());
+         this.rulesResponse.writeString(this.serverInterface.getPlayerCount().makeConcatWithConstants<invokedynamic>(this.serverInterface.getPlayerCount()));
          this.rulesResponse.writeString("maxplayers");
-         this.rulesResponse.writeString("" + this.maxPlayers);
+         this.rulesResponse.writeString(this.maxPlayers.makeConcatWithConstants<invokedynamic>(this.maxPlayers));
          this.rulesResponse.writeString("hostport");
-         this.rulesResponse.writeString("" + this.serverPort);
+         this.rulesResponse.writeString(this.serverPort.makeConcatWithConstants<invokedynamic>(this.serverPort));
          this.rulesResponse.writeString("hostip");
          this.rulesResponse.writeString(this.hostIp);
          this.rulesResponse.write(0);
          this.rulesResponse.write(1);
          this.rulesResponse.writeString("player_");
@@ -265,11 +269,11 @@
          LOGGER.warn("Unable to initialise query system on {}:{}", this.serverIp, this.port, var2);
          return false;
       }
    }
 
-   static class RequestChallenge {
+   private static class RequestChallenge {
       private final long time = (new Date()).getTime();
       private final int challenge;
       private final byte[] identBytes;
       private final byte[] challengeBytes;
       private final String ident;
@@ -299,7 +303,11 @@
       }
 
       public byte[] getIdentBytes() {
          return this.identBytes;
       }
+
+      public String getIdent() {
+         return this.ident;
+      }
    }
 }
