--- net/minecraft/server/network/ServerLoginPacketListenerImpl.java
+++ net/minecraft/server/network/ServerLoginPacketListenerImpl.java
@@ -16,10 +16,11 @@
 import javax.crypto.SecretKey;
 import net.minecraft.DefaultUncaughtExceptionHandler;
 import net.minecraft.network.Connection;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.TranslatableComponent;
+import net.minecraft.network.protocol.game.ClientboundDisconnectPacket;
 import net.minecraft.network.protocol.login.ClientboundGameProfilePacket;
 import net.minecraft.network.protocol.login.ClientboundHelloPacket;
 import net.minecraft.network.protocol.login.ClientboundLoginCompressionPacket;
 import net.minecraft.network.protocol.login.ClientboundLoginDisconnectPacket;
 import net.minecraft.network.protocol.login.ServerLoginPacketListener;
@@ -35,20 +36,22 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener {
    private static final AtomicInteger UNIQUE_THREAD_ID = new AtomicInteger(0);
-   private static final Logger LOGGER = LogManager.getLogger();
+   static final Logger LOGGER = LogManager.getLogger();
+   private static final int MAX_TICKS_BEFORE_LOGIN = 600;
    private static final Random RANDOM = new Random();
    private final byte[] nonce = new byte[4];
-   private final MinecraftServer server;
+   final MinecraftServer server;
    public final Connection connection;
-   private ServerLoginPacketListenerImpl.State state;
+   ServerLoginPacketListenerImpl.State state;
    private int tick;
-   private GameProfile gameProfile;
+   @Nullable
+   GameProfile gameProfile;
    private final String serverId;
-   private SecretKey secretKey;
+   @Nullable
    private ServerPlayer delayedAcceptPlayer;
 
    public ServerLoginPacketListenerImpl(MinecraftServer var1, Connection var2) {
       this.state = ServerLoginPacketListenerImpl.State.HELLO;
       this.serverId = "";
@@ -62,11 +65,11 @@
          this.handleAcceptedLogin();
       } else if (this.state == ServerLoginPacketListenerImpl.State.DELAY_ACCEPT) {
          ServerPlayer var1 = this.server.getPlayerList().getPlayer(this.gameProfile.getId());
          if (var1 == null) {
             this.state = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT;
-            this.server.getPlayerList().placeNewPlayer(this.connection, this.delayedAcceptPlayer);
+            this.placeNewPlayer(this.delayedAcceptPlayer);
             this.delayedAcceptPlayer = null;
          }
       }
 
       if (this.tick++ == 600) {
@@ -106,26 +109,43 @@
             });
          }
 
          this.connection.send(new ClientboundGameProfilePacket(this.gameProfile));
          ServerPlayer var2 = this.server.getPlayerList().getPlayer(this.gameProfile.getId());
-         if (var2 != null) {
-            this.state = ServerLoginPacketListenerImpl.State.DELAY_ACCEPT;
-            this.delayedAcceptPlayer = this.server.getPlayerList().getPlayerForLogin(this.gameProfile);
-         } else {
-            this.server.getPlayerList().placeNewPlayer(this.connection, this.server.getPlayerList().getPlayerForLogin(this.gameProfile));
+
+         try {
+            ServerPlayer var3 = this.server.getPlayerList().getPlayerForLogin(this.gameProfile);
+            if (var2 != null) {
+               this.state = ServerLoginPacketListenerImpl.State.DELAY_ACCEPT;
+               this.delayedAcceptPlayer = var3;
+            } else {
+               this.placeNewPlayer(var3);
+            }
+         } catch (Exception var5) {
+            TranslatableComponent var4 = new TranslatableComponent("multiplayer.disconnect.invalid_player_data");
+            this.connection.send(new ClientboundDisconnectPacket(var4));
+            this.connection.disconnect(var4);
          }
       }
 
    }
 
+   private void placeNewPlayer(ServerPlayer var1) {
+      this.server.getPlayerList().placeNewPlayer(this.connection, var1);
+   }
+
    public void onDisconnect(Component var1) {
       LOGGER.info("{} lost connection: {}", this.getUserName(), var1.getString());
    }
 
    public String getUserName() {
-      return this.gameProfile != null ? this.gameProfile + " (" + this.connection.getRemoteAddress() + ")" : String.valueOf(this.connection.getRemoteAddress());
+      if (this.gameProfile != null) {
+         GameProfile var10000 = this.gameProfile;
+         return var10000 + " (" + this.connection.getRemoteAddress() + ")";
+      } else {
+         return String.valueOf(this.connection.getRemoteAddress());
+      }
    }
 
    public void handleHello(ServerboundHelloPacket var1) {
       Validate.validState(this.state == ServerLoginPacketListenerImpl.State.HELLO, "Unexpected hello packet", new Object[0]);
       this.gameProfile = var1.getGameProfile();
@@ -146,21 +166,21 @@
       try {
          if (!Arrays.equals(this.nonce, var1.getNonce(var2))) {
             throw new IllegalStateException("Protocol error");
          }
 
-         this.secretKey = var1.getSecretKey(var2);
-         Cipher var4 = Crypt.getCipher(2, this.secretKey);
-         Cipher var5 = Crypt.getCipher(1, this.secretKey);
-         var3 = (new BigInteger(Crypt.digestData("", this.server.getKeyPair().getPublic(), this.secretKey))).toString(16);
+         SecretKey var4 = var1.getSecretKey(var2);
+         Cipher var5 = Crypt.getCipher(2, var4);
+         Cipher var6 = Crypt.getCipher(1, var4);
+         var3 = (new BigInteger(Crypt.digestData("", this.server.getKeyPair().getPublic(), var4))).toString(16);
          this.state = ServerLoginPacketListenerImpl.State.AUTHENTICATING;
-         this.connection.setEncryptionKey(var4, var5);
-      } catch (CryptException var6) {
-         throw new IllegalStateException("Protocol error", var6);
+         this.connection.setEncryptionKey(var5, var6);
+      } catch (CryptException var7) {
+         throw new IllegalStateException("Protocol error", var7);
       }
 
-      Thread var7 = new Thread("User Authenticator #" + UNIQUE_THREAD_ID.incrementAndGet()) {
+      Thread var8 = new Thread("User Authenticator #" + UNIQUE_THREAD_ID.incrementAndGet()) {
          public void run() {
             GameProfile var1 = ServerLoginPacketListenerImpl.this.gameProfile;
 
             try {
                ServerLoginPacketListenerImpl.this.gameProfile = ServerLoginPacketListenerImpl.this.server.getSessionService().hasJoinedServer(new GameProfile((UUID)null, var1.getName()), var3, this.getAddress());
@@ -192,12 +212,12 @@
          private InetAddress getAddress() {
             SocketAddress var1 = ServerLoginPacketListenerImpl.this.connection.getRemoteAddress();
             return ServerLoginPacketListenerImpl.this.server.getPreventProxyConnections() && var1 instanceof InetSocketAddress ? ((InetSocketAddress)var1).getAddress() : null;
          }
       };
-      var7.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(LOGGER));
-      var7.start();
+      var8.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(LOGGER));
+      var8.start();
    }
 
    public void handleCustomQueryPacket(ServerboundCustomQueryPacket var1) {
       this.disconnect(new TranslatableComponent("multiplayer.disconnect.unexpected_query_response"));
    }
@@ -205,11 +225,11 @@
    protected GameProfile createFakeProfile(GameProfile var1) {
       UUID var2 = Player.createPlayerUUID(var1.getName());
       return new GameProfile(var2, var1.getName());
    }
 
-   static enum State {
+   private static enum State {
       HELLO,
       KEY,
       AUTHENTICATING,
       NEGOTIATING,
       READY_TO_ACCEPT,
