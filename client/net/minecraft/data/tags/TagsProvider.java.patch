--- net/minecraft/data/tags/TagsProvider.java
+++ net/minecraft/data/tags/TagsProvider.java
@@ -10,19 +10,18 @@
 import java.nio.file.LinkOption;
 import java.nio.file.Path;
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
-import java.util.function.Function;
+import java.util.function.Predicate;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 import net.minecraft.core.Registry;
 import net.minecraft.data.DataGenerator;
 import net.minecraft.data.DataProvider;
 import net.minecraft.data.HashCache;
 import net.minecraft.resources.ResourceLocation;
-import net.minecraft.tags.SetTag;
 import net.minecraft.tags.Tag;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public abstract class TagsProvider<T> implements DataProvider {
@@ -40,57 +39,57 @@
    protected abstract void addTags();
 
    public void run(HashCache var1) {
       this.builders.clear();
       this.addTags();
-      SetTag var2 = SetTag.empty();
-      Function var3 = (var2x) -> {
-         return this.builders.containsKey(var2x) ? var2 : null;
-      };
-      Function var4 = (var1x) -> {
-         return this.registry.getOptional(var1x).orElse((Object)null);
-      };
-      this.builders.forEach((var4x, var5) -> {
-         List var6 = (List)var5.getUnresolvedEntries(var3, var4).collect(Collectors.toList());
-         if (!var6.isEmpty()) {
-            throw new IllegalArgumentException(String.format("Couldn't define tag %s as it is missing following references: %s", var4x, var6.stream().map(Objects::toString).collect(Collectors.joining(","))));
+      this.builders.forEach((var2, var3) -> {
+         List var4 = (List)var3.getEntries().filter((var1x) -> {
+            Tag.Entry var10000 = var1x.getEntry();
+            Registry var10001 = this.registry;
+            Predicate var2 = var10001::containsKey;
+            Map var10002 = this.builders;
+            var10002.getClass();
+            return !var10000.verifyIfPresent(var2, var10002::containsKey);
+         }).collect(Collectors.toList());
+         if (!var4.isEmpty()) {
+            throw new IllegalArgumentException(String.format("Couldn't define tag %s as it is missing following references: %s", var2, var4.stream().map(Objects::toString).collect(Collectors.joining(","))));
          } else {
-            JsonObject var7 = var5.serializeToJson();
-            Path var8 = this.getPath(var4x);
+            JsonObject var5 = var3.serializeToJson();
+            Path var6 = this.getPath(var2);
 
             try {
-               String var9 = GSON.toJson(var7);
-               String var10 = SHA1.hashUnencodedChars(var9).toString();
-               if (!Objects.equals(var1.getHash(var8), var10) || !Files.exists(var8, new LinkOption[0])) {
-                  Files.createDirectories(var8.getParent());
-                  BufferedWriter var11 = Files.newBufferedWriter(var8);
-                  Throwable var12 = null;
+               String var7 = GSON.toJson(var5);
+               String var8 = SHA1.hashUnencodedChars(var7).toString();
+               if (!Objects.equals(var1.getHash(var6), var8) || !Files.exists(var6, new LinkOption[0])) {
+                  Files.createDirectories(var6.getParent());
+                  BufferedWriter var9 = Files.newBufferedWriter(var6);
+                  Throwable var10 = null;
 
                   try {
-                     var11.write(var9);
-                  } catch (Throwable var22) {
-                     var12 = var22;
-                     throw var22;
+                     var9.write(var7);
+                  } catch (Throwable var20) {
+                     var10 = var20;
+                     throw var20;
                   } finally {
-                     if (var11 != null) {
-                        if (var12 != null) {
+                     if (var9 != null) {
+                        if (var10 != null) {
                            try {
-                              var11.close();
-                           } catch (Throwable var21) {
-                              var12.addSuppressed(var21);
+                              var9.close();
+                           } catch (Throwable var19) {
+                              var10.addSuppressed(var19);
                            }
                         } else {
-                           var11.close();
+                           var9.close();
                         }
                      }
 
                   }
                }
 
-               var1.putNew(var8, var10);
-            } catch (IOException var24) {
-               LOGGER.error("Couldn't save tags to {}", var8, var24);
+               var1.putNew(var6, var8);
+            } catch (IOException var22) {
+               LOGGER.error("Couldn't save tags to {}", var6, var22);
             }
 
          }
       });
    }
