--- net/minecraft/data/HashCache.java
+++ net/minecraft/data/HashCache.java
@@ -32,11 +32,11 @@
       this.path = var1;
       Path var3 = var1.resolve(".cache");
       Files.createDirectories(var3);
       this.cachePath = var3.resolve(var2);
       this.walkOutputFiles().forEach((var1x) -> {
-         String var10000 = (String)this.oldCache.put(var1x, "");
+         this.oldCache.put(var1x, "");
       });
       if (Files.isReadable(this.cachePath)) {
          IOUtils.readLines(Files.newInputStream(this.cachePath), Charsets.UTF_8).forEach((var2x) -> {
             int var3 = var2x.indexOf(32);
             this.oldCache.put(var1.resolve(var2x.substring(var3 + 1)), var2x.substring(0, var3));
@@ -55,11 +55,12 @@
          LOGGER.warn("Unable write cachefile {}: {}", this.cachePath, var3.toString());
          return;
       }
 
       IOUtils.writeLines((Collection)this.newCache.entrySet().stream().map((var1x) -> {
-         return (String)var1x.getValue() + ' ' + this.path.relativize((Path)var1x.getKey());
+         String var10000 = (String)var1x.getValue();
+         return var10000 + " " + this.path.relativize((Path)var1x.getKey());
       }).collect(Collectors.toList()), System.lineSeparator(), var1);
       var1.close();
       LOGGER.debug("Caching: cache hits: {}, created: {} removed: {}", this.hits, this.newCache.size() - this.hits, this.oldCache.size());
    }
 
