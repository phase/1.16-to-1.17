--- net/minecraft/data/loot/BlockLoot.java
+++ net/minecraft/data/loot/BlockLoot.java
@@ -28,10 +28,11 @@
 import net.minecraft.world.level.block.BedBlock;
 import net.minecraft.world.level.block.BeehiveBlock;
 import net.minecraft.world.level.block.BeetrootBlock;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.block.CandleBlock;
 import net.minecraft.world.level.block.CarrotBlock;
 import net.minecraft.world.level.block.CocoaBlock;
 import net.minecraft.world.level.block.ComposterBlock;
 import net.minecraft.world.level.block.CropBlock;
 import net.minecraft.world.level.block.DoorBlock;
@@ -216,10 +217,18 @@
    private static LootTable.Builder createDoublePlantWithSeedDrops(Block var0, Block var1) {
       AlternativesEntry.Builder var2 = ((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(var1).apply(SetItemCountFunction.setCount(ConstantIntValue.exactly(2))).when(HAS_SHEARS)).otherwise(((LootPoolSingletonContainer.Builder)applyExplosionCondition(var0, LootItem.lootTableItem(Items.WHEAT_SEEDS))).when(LootItemRandomChanceCondition.randomChance(0.125F)));
       return LootTable.lootTable().withPool(LootPool.lootPool().add(var2).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(DoublePlantBlock.HALF, (Comparable)DoubleBlockHalf.LOWER))).when(LocationCheck.checkLocation(LocationPredicate.Builder.location().setBlock(BlockPredicate.Builder.block().of(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(DoublePlantBlock.HALF, (Comparable)DoubleBlockHalf.UPPER).build()).build()), new BlockPos(0, 1, 0)))).withPool(LootPool.lootPool().add(var2).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(DoublePlantBlock.HALF, (Comparable)DoubleBlockHalf.UPPER))).when(LocationCheck.checkLocation(LocationPredicate.Builder.location().setBlock(BlockPredicate.Builder.block().of(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(DoublePlantBlock.HALF, (Comparable)DoubleBlockHalf.LOWER).build()).build()), new BlockPos(0, -1, 0))));
    }
 
+   private static LootTable.Builder createCandleDrops(Block var0) {
+      return LootTable.lootTable().withPool(LootPool.lootPool().setRolls(ConstantIntValue.exactly(1)).add((LootPoolEntryContainer.Builder)applyExplosionDecay(var0, LootItem.lootTableItem(var0).apply(SetItemCountFunction.setCount(ConstantIntValue.exactly(2)).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(CandleBlock.CANDLES, 2)))).apply(SetItemCountFunction.setCount(ConstantIntValue.exactly(3)).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(CandleBlock.CANDLES, 3)))).apply(SetItemCountFunction.setCount(ConstantIntValue.exactly(4)).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(CandleBlock.CANDLES, 4)))))));
+   }
+
+   private static LootTable.Builder createCandleCakeDrops(Block var0) {
+      return LootTable.lootTable().withPool(LootPool.lootPool().setRolls(ConstantIntValue.exactly(1)).add(LootItem.lootTableItem(var0)));
+   }
+
    public static LootTable.Builder noDrop() {
       return LootTable.lootTable();
    }
 
    public void accept(BiConsumer<ResourceLocation, LootTable.Builder> var1) {
@@ -623,15 +632,51 @@
       this.dropSelf(Blocks.CRACKED_NETHER_BRICKS);
       this.dropSelf(Blocks.QUARTZ_BRICKS);
       this.dropSelf(Blocks.CHAIN);
       this.dropSelf(Blocks.WARPED_ROOTS);
       this.dropSelf(Blocks.CRIMSON_ROOTS);
+      this.dropSelf(Blocks.AMETHYST_BLOCK);
+      this.dropSelf(Blocks.CALCITE);
+      this.dropSelf(Blocks.TUFF);
+      this.dropSelf(Blocks.TINTED_GLASS);
+      this.dropSelf(Blocks.COPPER_BLOCK);
+      this.dropSelf(Blocks.LIGHTLY_WEATHERED_COPPER_BLOCK);
+      this.dropSelf(Blocks.SEMI_WEATHERED_COPPER_BLOCK);
+      this.dropSelf(Blocks.WEATHERED_COPPER_BLOCK);
+      this.dropSelf(Blocks.COPPER_ORE);
+      this.dropSelf(Blocks.CUT_COPPER);
+      this.dropSelf(Blocks.LIGHTLY_WEATHERED_CUT_COPPER);
+      this.dropSelf(Blocks.SEMI_WEATHERED_CUT_COPPER);
+      this.dropSelf(Blocks.WEATHERED_CUT_COPPER);
+      this.dropSelf(Blocks.WAXED_COPPER);
+      this.dropSelf(Blocks.WAXED_SEMI_WEATHERED_COPPER);
+      this.dropSelf(Blocks.WAXED_LIGHTLY_WEATHERED_COPPER);
+      this.dropSelf(Blocks.WAXED_CUT_COPPER);
+      this.dropSelf(Blocks.WAXED_SEMI_WEATHERED_CUT_COPPER);
+      this.dropSelf(Blocks.WAXED_LIGHTLY_WEATHERED_CUT_COPPER);
+      this.dropSelf(Blocks.WAXED_CUT_COPPER_STAIRS);
+      this.dropSelf(Blocks.WAXED_LIGHTLY_WEATHERED_CUT_COPPER_STAIRS);
+      this.dropSelf(Blocks.WAXED_SEMI_WEATHERED_CUT_COPPER_STAIRS);
+      this.dropSelf(Blocks.WAXED_CUT_COPPER_SLAB);
+      this.dropSelf(Blocks.WAXED_LIGHTLY_WEATHERED_CUT_COPPER_SLAB);
+      this.dropSelf(Blocks.WAXED_SEMI_WEATHERED_CUT_COPPER_SLAB);
+      this.dropSelf(Blocks.CUT_COPPER_STAIRS);
+      this.dropSelf(Blocks.LIGHTLY_WEATHERED_CUT_COPPER_STAIRS);
+      this.dropSelf(Blocks.SEMI_WEATHERED_CUT_COPPER_STAIRS);
+      this.dropSelf(Blocks.WEATHERED_CUT_COPPER_STAIRS);
+      this.dropSelf(Blocks.CUT_COPPER_SLAB);
+      this.dropSelf(Blocks.LIGHTLY_WEATHERED_CUT_COPPER_SLAB);
+      this.dropSelf(Blocks.SEMI_WEATHERED_CUT_COPPER_SLAB);
+      this.dropSelf(Blocks.WEATHERED_CUT_COPPER_SLAB);
+      this.dropSelf(Blocks.LIGHTNING_ROD);
       this.dropOther(Blocks.FARMLAND, Blocks.DIRT);
       this.dropOther(Blocks.TRIPWIRE, Items.STRING);
-      this.dropOther(Blocks.GRASS_PATH, Blocks.DIRT);
+      this.dropOther(Blocks.DIRT_PATH, Blocks.DIRT);
       this.dropOther(Blocks.KELP_PLANT, Blocks.KELP);
       this.dropOther(Blocks.BAMBOO_SAPLING, Blocks.BAMBOO);
+      this.dropOther(Blocks.WATER_CAULDRON, Blocks.CAULDRON);
+      this.dropOther(Blocks.LAVA_CAULDRON, Blocks.CAULDRON);
       this.add(Blocks.STONE, (var0) -> {
          return createSingleItemTableWithSilkTouch(var0, Blocks.COBBLESTONE);
       });
       this.add(Blocks.GRASS_BLOCK, (var0) -> {
          return createSingleItemTableWithSilkTouch(var0, Blocks.DIRT);
@@ -822,10 +867,27 @@
          return LootTable.lootTable().withPool(LootPool.lootPool().setRolls(ConstantIntValue.exactly(1)).add((LootPoolEntryContainer.Builder)applyExplosionDecay(Blocks.SEA_PICKLE, LootItem.lootTableItem(var0).apply(SetItemCountFunction.setCount(ConstantIntValue.exactly(2)).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(SeaPickleBlock.PICKLES, 2)))).apply(SetItemCountFunction.setCount(ConstantIntValue.exactly(3)).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(SeaPickleBlock.PICKLES, 3)))).apply(SetItemCountFunction.setCount(ConstantIntValue.exactly(4)).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(SeaPickleBlock.PICKLES, 4)))))));
       });
       this.add(Blocks.COMPOSTER, (var0) -> {
          return LootTable.lootTable().withPool(LootPool.lootPool().add((LootPoolEntryContainer.Builder)applyExplosionDecay(var0, LootItem.lootTableItem(Items.COMPOSTER)))).withPool(LootPool.lootPool().add(LootItem.lootTableItem(Items.BONE_MEAL)).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(var0).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(ComposterBlock.LEVEL, 8))));
       });
+      this.add(Blocks.CANDLE, BlockLoot::createCandleDrops);
+      this.add(Blocks.WHITE_CANDLE, BlockLoot::createCandleDrops);
+      this.add(Blocks.ORANGE_CANDLE, BlockLoot::createCandleDrops);
+      this.add(Blocks.MAGENTA_CANDLE, BlockLoot::createCandleDrops);
+      this.add(Blocks.LIGHT_BLUE_CANDLE, BlockLoot::createCandleDrops);
+      this.add(Blocks.YELLOW_CANDLE, BlockLoot::createCandleDrops);
+      this.add(Blocks.LIME_CANDLE, BlockLoot::createCandleDrops);
+      this.add(Blocks.PINK_CANDLE, BlockLoot::createCandleDrops);
+      this.add(Blocks.GRAY_CANDLE, BlockLoot::createCandleDrops);
+      this.add(Blocks.LIGHT_GRAY_CANDLE, BlockLoot::createCandleDrops);
+      this.add(Blocks.CYAN_CANDLE, BlockLoot::createCandleDrops);
+      this.add(Blocks.PURPLE_CANDLE, BlockLoot::createCandleDrops);
+      this.add(Blocks.BLUE_CANDLE, BlockLoot::createCandleDrops);
+      this.add(Blocks.BROWN_CANDLE, BlockLoot::createCandleDrops);
+      this.add(Blocks.GREEN_CANDLE, BlockLoot::createCandleDrops);
+      this.add(Blocks.RED_CANDLE, BlockLoot::createCandleDrops);
+      this.add(Blocks.BLACK_CANDLE, BlockLoot::createCandleDrops);
       this.add(Blocks.BEACON, BlockLoot::createNameableBlockEntityTable);
       this.add(Blocks.BREWING_STAND, BlockLoot::createNameableBlockEntityTable);
       this.add(Blocks.CHEST, BlockLoot::createNameableBlockEntityTable);
       this.add(Blocks.DISPENSER, BlockLoot::createNameableBlockEntityTable);
       this.add(Blocks.DROPPER, BlockLoot::createNameableBlockEntityTable);
@@ -997,10 +1059,16 @@
          return createSilkTouchDispatchTable(var0, (LootPoolEntryContainer.Builder)applyExplosionCondition(var0, ((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.GOLD_NUGGET).apply(SetItemCountFunction.setCount(RandomValueBounds.between(2.0F, 5.0F))).when(BonusLevelTableCondition.bonusLevelFlatChance(Enchantments.BLOCK_FORTUNE, 0.1F, 0.14285715F, 0.25F, 1.0F))).otherwise(LootItem.lootTableItem(var0))));
       });
       this.add(Blocks.SOUL_CAMPFIRE, (var0) -> {
          return createSilkTouchDispatchTable(var0, (LootPoolEntryContainer.Builder)applyExplosionCondition(var0, LootItem.lootTableItem(Items.SOUL_SOIL).apply(SetItemCountFunction.setCount(ConstantIntValue.exactly(1)))));
       });
+      this.add(Blocks.AMETHYST_CLUSTER, (var0) -> {
+         return createSilkTouchDispatchTable(var0, (LootPoolEntryContainer.Builder)applyExplosionDecay(var0, LootItem.lootTableItem(Items.AMETHYST_SHARD).apply(SetItemCountFunction.setCount(ConstantIntValue.exactly(4))).apply(ApplyBonusCount.addOreBonusCount(Enchantments.BLOCK_FORTUNE))));
+      });
+      this.dropWhenSilkTouch(Blocks.SMALL_AMETHYST_BUD);
+      this.dropWhenSilkTouch(Blocks.MEDIUM_AMETHYST_BUD);
+      this.dropWhenSilkTouch(Blocks.LARGE_AMETHYST_BUD);
       this.dropWhenSilkTouch(Blocks.GLASS);
       this.dropWhenSilkTouch(Blocks.WHITE_STAINED_GLASS);
       this.dropWhenSilkTouch(Blocks.ORANGE_STAINED_GLASS);
       this.dropWhenSilkTouch(Blocks.MAGENTA_STAINED_GLASS);
       this.dropWhenSilkTouch(Blocks.LIGHT_BLUE_STAINED_GLASS);
@@ -1065,15 +1133,33 @@
       this.otherWhenSilkTouch(Blocks.INFESTED_CRACKED_STONE_BRICKS, Blocks.CRACKED_STONE_BRICKS);
       this.otherWhenSilkTouch(Blocks.INFESTED_CHISELED_STONE_BRICKS, Blocks.CHISELED_STONE_BRICKS);
       this.addNetherVinesDropTable(Blocks.WEEPING_VINES, Blocks.WEEPING_VINES_PLANT);
       this.addNetherVinesDropTable(Blocks.TWISTING_VINES, Blocks.TWISTING_VINES_PLANT);
       this.add(Blocks.CAKE, noDrop());
+      this.add(Blocks.CANDLE_CAKE, createCandleCakeDrops(Blocks.CANDLE));
+      this.add(Blocks.WHITE_CANDLE_CAKE, createCandleCakeDrops(Blocks.WHITE_CANDLE));
+      this.add(Blocks.ORANGE_CANDLE_CAKE, createCandleCakeDrops(Blocks.ORANGE_CANDLE));
+      this.add(Blocks.MAGENTA_CANDLE_CAKE, createCandleCakeDrops(Blocks.MAGENTA_CANDLE));
+      this.add(Blocks.LIGHT_BLUE_CANDLE_CAKE, createCandleCakeDrops(Blocks.LIGHT_BLUE_CANDLE));
+      this.add(Blocks.YELLOW_CANDLE_CAKE, createCandleCakeDrops(Blocks.YELLOW_CANDLE));
+      this.add(Blocks.LIME_CANDLE_CAKE, createCandleCakeDrops(Blocks.LIME_CANDLE));
+      this.add(Blocks.PINK_CANDLE_CAKE, createCandleCakeDrops(Blocks.PINK_CANDLE));
+      this.add(Blocks.GRAY_CANDLE_CAKE, createCandleCakeDrops(Blocks.GRAY_CANDLE));
+      this.add(Blocks.LIGHT_GRAY_CANDLE_CAKE, createCandleCakeDrops(Blocks.LIGHT_GRAY_CANDLE));
+      this.add(Blocks.CYAN_CANDLE_CAKE, createCandleCakeDrops(Blocks.CYAN_CANDLE));
+      this.add(Blocks.PURPLE_CANDLE_CAKE, createCandleCakeDrops(Blocks.PURPLE_CANDLE));
+      this.add(Blocks.BLUE_CANDLE_CAKE, createCandleCakeDrops(Blocks.BLUE_CANDLE));
+      this.add(Blocks.BROWN_CANDLE_CAKE, createCandleCakeDrops(Blocks.BROWN_CANDLE));
+      this.add(Blocks.GREEN_CANDLE_CAKE, createCandleCakeDrops(Blocks.GREEN_CANDLE));
+      this.add(Blocks.RED_CANDLE_CAKE, createCandleCakeDrops(Blocks.RED_CANDLE));
+      this.add(Blocks.BLACK_CANDLE_CAKE, createCandleCakeDrops(Blocks.BLACK_CANDLE));
       this.add(Blocks.FROSTED_ICE, noDrop());
       this.add(Blocks.SPAWNER, noDrop());
       this.add(Blocks.FIRE, noDrop());
       this.add(Blocks.SOUL_FIRE, noDrop());
       this.add(Blocks.NETHER_PORTAL, noDrop());
+      this.add(Blocks.BUDDING_AMETHYST, noDrop());
       HashSet var6 = Sets.newHashSet();
       Iterator var7 = Registry.BLOCK.iterator();
 
       while(var7.hasNext()) {
          Block var8 = (Block)var7.next();
