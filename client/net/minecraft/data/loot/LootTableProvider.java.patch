--- net/minecraft/data/loot/LootTableProvider.java
+++ net/minecraft/data/loot/LootTableProvider.java
@@ -11,10 +11,11 @@
 import java.io.IOException;
 import java.nio.file.Path;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Objects;
 import java.util.function.BiConsumer;
 import java.util.function.Consumer;
 import java.util.function.Function;
 import java.util.function.Supplier;
 import net.minecraft.data.DataGenerator;
@@ -53,11 +54,11 @@
       });
       LootContextParamSet var10002 = LootContextParamSets.ALL_PARAMS;
       Function var10003 = (var0) -> {
          return null;
       };
-      var3.getClass();
+      Objects.requireNonNull(var3);
       ValidationContext var4 = new ValidationContext(var10002, var10003, var3::get);
       SetView var5 = Sets.difference(BuiltInLootTables.all(), var3.keySet());
       Iterator var6 = var5.iterator();
 
       while(var6.hasNext()) {
@@ -69,11 +70,11 @@
          LootTables.validate(var4, var1x, var2x);
       });
       Multimap var8 = var4.getProblems();
       if (!var8.isEmpty()) {
          var8.forEach((var0, var1x) -> {
-            LOGGER.warn("Found validation problem in " + var0 + ": " + var1x);
+            LOGGER.warn("Found validation problem in {}: {}", var0, var1x);
          });
          throw new IllegalStateException("Failed to validate loot tables, see logs");
       } else {
          var3.forEach((var2x, var3x) -> {
             Path var4 = createPath(var2, var2x);
@@ -87,11 +88,12 @@
          });
       }
    }
 
    private static Path createPath(Path var0, ResourceLocation var1) {
-      return var0.resolve("data/" + var1.getNamespace() + "/loot_tables/" + var1.getPath() + ".json");
+      String var10001 = var1.getNamespace();
+      return var0.resolve("data/" + var10001 + "/loot_tables/" + var1.getPath() + ".json");
    }
 
    public String getName() {
       return "LootTables";
    }
