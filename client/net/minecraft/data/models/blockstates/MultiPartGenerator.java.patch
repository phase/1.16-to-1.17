--- net/minecraft/data/models/blockstates/MultiPartGenerator.java
+++ net/minecraft/data/models/blockstates/MultiPartGenerator.java
@@ -4,11 +4,13 @@
 import com.google.common.collect.Lists;
 import com.google.gson.JsonArray;
 import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
 import java.util.List;
+import java.util.Objects;
 import java.util.function.Supplier;
+import java.util.stream.Stream;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.state.StateDefinition;
 
 public class MultiPartGenerator implements BlockStateGenerator {
    private final Block block;
@@ -52,49 +54,51 @@
       StateDefinition var1 = this.block.getStateDefinition();
       this.parts.forEach((var1x) -> {
          var1x.validate(var1);
       });
       JsonArray var2 = new JsonArray();
-      this.parts.stream().map(MultiPartGenerator.Entry::get).forEach(var2::add);
+      Stream var10000 = this.parts.stream().map(MultiPartGenerator.Entry::get);
+      Objects.requireNonNull(var2);
+      var10000.forEach(var2::add);
       JsonObject var3 = new JsonObject();
       var3.add("multipart", var2);
       return var3;
    }
 
-   static class ConditionalEntry extends MultiPartGenerator.Entry {
-      private final Condition condition;
+   private static class Entry implements Supplier<JsonElement> {
+      private final List<Variant> variants;
 
-      private ConditionalEntry(Condition var1, List<Variant> var2) {
-         super(var2, null);
-         this.condition = var1;
+      Entry(List<Variant> var1) {
+         this.variants = var1;
       }
 
       public void validate(StateDefinition<?, ?> var1) {
-         this.condition.validate(var1);
       }
 
       public void decorate(JsonObject var1) {
-         var1.add("when", (JsonElement)this.condition.get());
       }
+
+      public JsonElement get() {
+         JsonObject var1 = new JsonObject();
+         this.decorate(var1);
+         var1.add("apply", Variant.convertList(this.variants));
+         return var1;
+      }
    }
 
-   static class Entry implements Supplier<JsonElement> {
-      private final List<Variant> variants;
+   static class ConditionalEntry extends MultiPartGenerator.Entry {
+      private final Condition condition;
 
-      private Entry(List<Variant> var1) {
-         this.variants = var1;
+      ConditionalEntry(Condition var1, List<Variant> var2) {
+         super(var2);
+         this.condition = var1;
       }
 
       public void validate(StateDefinition<?, ?> var1) {
+         this.condition.validate(var1);
       }
 
       public void decorate(JsonObject var1) {
+         var1.add("when", (JsonElement)this.condition.get());
       }
-
-      public JsonElement get() {
-         JsonObject var1 = new JsonObject();
-         this.decorate(var1);
-         var1.add("apply", Variant.convertList(this.variants));
-         return var1;
-      }
    }
 }
