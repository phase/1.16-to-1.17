--- net/minecraft/data/recipes/ShapelessRecipeBuilder.java
+++ net/minecraft/data/recipes/ShapelessRecipeBuilder.java
@@ -17,19 +17,17 @@
 import net.minecraft.tags.Tag;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.crafting.Ingredient;
 import net.minecraft.world.item.crafting.RecipeSerializer;
 import net.minecraft.world.level.ItemLike;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
 
-public class ShapelessRecipeBuilder {
-   private static final Logger LOGGER = LogManager.getLogger();
+public class ShapelessRecipeBuilder implements RecipeBuilder {
    private final Item result;
    private final int count;
    private final List<Ingredient> ingredients = Lists.newArrayList();
    private final Advancement.Builder advancement = Advancement.Builder.advancement();
+   @Nullable
    private String group;
 
    public ShapelessRecipeBuilder(ItemLike var1, int var2) {
       this.result = var1.asItem();
       this.count = var2;
@@ -74,32 +72,30 @@
    public ShapelessRecipeBuilder unlockedBy(String var1, CriterionTriggerInstance var2) {
       this.advancement.addCriterion(var1, var2);
       return this;
    }
 
-   public ShapelessRecipeBuilder group(String var1) {
+   public ShapelessRecipeBuilder group(@Nullable String var1) {
       this.group = var1;
       return this;
    }
 
-   public void save(Consumer<FinishedRecipe> var1) {
-      this.save(var1, Registry.ITEM.getKey(this.result));
+   public Item getResult() {
+      return this.result;
    }
 
-   public void save(Consumer<FinishedRecipe> var1, String var2) {
-      ResourceLocation var3 = Registry.ITEM.getKey(this.result);
-      if ((new ResourceLocation(var2)).equals(var3)) {
-         throw new IllegalStateException("Shapeless Recipe " + var2 + " should remove its 'save' argument");
-      } else {
-         this.save(var1, new ResourceLocation(var2));
-      }
-   }
-
    public void save(Consumer<FinishedRecipe> var1, ResourceLocation var2) {
       this.ensureValid(var2);
       this.advancement.parent(new ResourceLocation("recipes/root")).addCriterion("has_the_recipe", (CriterionTriggerInstance)RecipeUnlockedTrigger.unlocked(var2)).rewards(AdvancementRewards.Builder.recipe(var2)).requirements(RequirementsStrategy.OR);
-      var1.accept(new ShapelessRecipeBuilder.Result(var2, this.result, this.count, this.group == null ? "" : this.group, this.ingredients, this.advancement, new ResourceLocation(var2.getNamespace(), "recipes/" + this.result.getItemCategory().getRecipeFolderName() + "/" + var2.getPath())));
+      Item var10004 = this.result;
+      int var10005 = this.count;
+      String var10006 = this.group == null ? "" : this.group;
+      List var10007 = this.ingredients;
+      Advancement.Builder var10008 = this.advancement;
+      String var10011 = var2.getNamespace();
+      String var10012 = this.result.getItemCategory().getRecipeFolderName();
+      var1.accept(new ShapelessRecipeBuilder.Result(var2, var10004, var10005, var10006, var10007, var10008, new ResourceLocation(var10011, "recipes/" + var10012 + "/" + var2.getPath())));
    }
 
    private void ensureValid(ResourceLocation var1) {
       if (this.advancement.getCriteria().isEmpty()) {
          throw new IllegalStateException("No way of obtaining recipe " + var1);
