--- net/minecraft/core/Vec3i.java
+++ net/minecraft/core/Vec3i.java
@@ -64,22 +64,49 @@
 
    public int getZ() {
       return this.z;
    }
 
-   protected void setX(int var1) {
+   protected Vec3i setX(int var1) {
       this.x = var1;
+      return this;
    }
 
-   protected void setY(int var1) {
+   protected Vec3i setY(int var1) {
       this.y = var1;
+      return this;
    }
 
-   protected void setZ(int var1) {
+   protected Vec3i setZ(int var1) {
       this.z = var1;
+      return this;
    }
 
+   public Vec3i offset(double var1, double var3, double var5) {
+      return var1 == 0.0D && var3 == 0.0D && var5 == 0.0D ? this : new Vec3i((double)this.getX() + var1, (double)this.getY() + var3, (double)this.getZ() + var5);
+   }
+
+   public Vec3i offset(int var1, int var2, int var3) {
+      return var1 == 0 && var2 == 0 && var3 == 0 ? this : new Vec3i(this.getX() + var1, this.getY() + var2, this.getZ() + var3);
+   }
+
+   public Vec3i offset(Vec3i var1) {
+      return this.offset(var1.getX(), var1.getY(), var1.getZ());
+   }
+
+   public Vec3i subtract(Vec3i var1) {
+      return this.offset(-var1.getX(), -var1.getY(), -var1.getZ());
+   }
+
+   public Vec3i multiply(int var1) {
+      if (var1 == 1) {
+         return this;
+      } else {
+         return var1 == 0 ? ZERO : new Vec3i(this.getX() * var1, this.getY() * var1, this.getZ() * var1);
+      }
+   }
+
    public Vec3i above() {
       return this.above(1);
    }
 
    public Vec3i above(int var1) {
@@ -92,14 +119,61 @@
 
    public Vec3i below(int var1) {
       return this.relative(Direction.DOWN, var1);
    }
 
+   public Vec3i north() {
+      return this.north(1);
+   }
+
+   public Vec3i north(int var1) {
+      return this.relative(Direction.NORTH, var1);
+   }
+
+   public Vec3i south() {
+      return this.south(1);
+   }
+
+   public Vec3i south(int var1) {
+      return this.relative(Direction.SOUTH, var1);
+   }
+
+   public Vec3i west() {
+      return this.west(1);
+   }
+
+   public Vec3i west(int var1) {
+      return this.relative(Direction.WEST, var1);
+   }
+
+   public Vec3i east() {
+      return this.east(1);
+   }
+
+   public Vec3i east(int var1) {
+      return this.relative(Direction.EAST, var1);
+   }
+
+   public Vec3i relative(Direction var1) {
+      return this.relative((Direction)var1, 1);
+   }
+
    public Vec3i relative(Direction var1, int var2) {
       return var2 == 0 ? this : new Vec3i(this.getX() + var1.getStepX() * var2, this.getY() + var1.getStepY() * var2, this.getZ() + var1.getStepZ() * var2);
    }
 
+   public Vec3i relative(Direction.Axis var1, int var2) {
+      if (var2 == 0) {
+         return this;
+      } else {
+         int var3 = var1 == Direction.Axis.X ? var2 : 0;
+         int var4 = var1 == Direction.Axis.Y ? var2 : 0;
+         int var5 = var1 == Direction.Axis.Z ? var2 : 0;
+         return new Vec3i(this.getX() + var3, this.getY() + var4, this.getZ() + var5);
+      }
+   }
+
    public Vec3i cross(Vec3i var1) {
       return new Vec3i(this.getY() * var1.getZ() - this.getZ() * var1.getY(), this.getZ() * var1.getX() - this.getX() * var1.getZ(), this.getX() * var1.getY() - this.getY() * var1.getX());
    }
 
    public boolean closerThan(Vec3i var1, double var2) {
@@ -116,10 +190,14 @@
 
    public double distSqr(Position var1, boolean var2) {
       return this.distSqr(var1.x(), var1.y(), var1.z(), var2);
    }
 
+   public double distSqr(Vec3i var1, boolean var2) {
+      return this.distSqr((double)var1.x, (double)var1.y, (double)var1.z, var2);
+   }
+
    public double distSqr(double var1, double var3, double var5, boolean var7) {
       double var8 = var7 ? 0.5D : 0.0D;
       double var10 = (double)this.getX() + var8 - var1;
       double var12 = (double)this.getY() + var8 - var3;
       double var14 = (double)this.getZ() + var8 - var5;
@@ -140,16 +218,17 @@
    public String toString() {
       return MoreObjects.toStringHelper(this).add("x", this.getX()).add("y", this.getY()).add("z", this.getZ()).toString();
    }
 
    public String toShortString() {
-      return "" + this.getX() + ", " + this.getY() + ", " + this.getZ();
+      int var10000 = this.getX();
+      return var10000 + ", " + this.getY() + ", " + this.getZ();
    }
 
    static {
       CODEC = Codec.INT_STREAM.comapFlatMap((var0) -> {
-         return Util.fixedSize(var0, 3).map((var0x) -> {
+         return Util.fixedSize((IntStream)var0, 3).map((var0x) -> {
             return new Vec3i(var0x[0], var0x[1], var0x[2]);
          });
       }, (var0) -> {
          return IntStream.of(new int[]{var0.getX(), var0.getY(), var0.getZ()});
       });
