--- net/minecraft/core/Direction.java
+++ net/minecraft/core/Direction.java
@@ -29,10 +29,11 @@
    NORTH(2, 3, 2, "north", Direction.AxisDirection.NEGATIVE, Direction.Axis.Z, new Vec3i(0, 0, -1)),
    SOUTH(3, 2, 0, "south", Direction.AxisDirection.POSITIVE, Direction.Axis.Z, new Vec3i(0, 0, 1)),
    WEST(4, 5, 1, "west", Direction.AxisDirection.NEGATIVE, Direction.Axis.X, new Vec3i(-1, 0, 0)),
    EAST(5, 4, 3, "east", Direction.AxisDirection.POSITIVE, Direction.Axis.X, new Vec3i(1, 0, 0));
 
+   public static final Codec<Direction> CODEC = StringRepresentable.fromEnum(Direction::values, Direction::byName);
    private final int data3d;
    private final int oppositeIndex;
    private final int data2d;
    private final String name;
    private final Direction.Axis axis;
@@ -146,14 +147,76 @@
 
    public Direction.AxisDirection getAxisDirection() {
       return this.axisDirection;
    }
 
+   public static Direction getFacingAxis(Entity var0, Direction.Axis var1) {
+      switch(var1) {
+      case X:
+         return EAST.isFacingAngle(var0.getViewYRot(1.0F)) ? EAST : WEST;
+      case Z:
+         return SOUTH.isFacingAngle(var0.getViewYRot(1.0F)) ? SOUTH : NORTH;
+      case Y:
+      default:
+         return var0.getViewXRot(1.0F) < 0.0F ? UP : DOWN;
+      }
+   }
+
    public Direction getOpposite() {
       return from3DDataValue(this.oppositeIndex);
    }
 
+   public Direction getClockWise(Direction.Axis var1) {
+      switch(var1) {
+      case X:
+         if (this != WEST && this != EAST) {
+            return this.getClockWiseX();
+         }
+
+         return this;
+      case Z:
+         if (this != NORTH && this != SOUTH) {
+            return this.getClockWiseZ();
+         }
+
+         return this;
+      case Y:
+         if (this != UP && this != DOWN) {
+            return this.getClockWise();
+         }
+
+         return this;
+      default:
+         throw new IllegalStateException("Unable to get CW facing for axis " + var1);
+      }
+   }
+
+   public Direction getCounterClockWise(Direction.Axis var1) {
+      switch(var1) {
+      case X:
+         if (this != WEST && this != EAST) {
+            return this.getCounterClockWiseX();
+         }
+
+         return this;
+      case Z:
+         if (this != NORTH && this != SOUTH) {
+            return this.getCounterClockWiseZ();
+         }
+
+         return this;
+      case Y:
+         if (this != UP && this != DOWN) {
+            return this.getCounterClockWise();
+         }
+
+         return this;
+      default:
+         throw new IllegalStateException("Unable to get CW facing for axis " + var1);
+      }
+   }
+
    public Direction getClockWise() {
       switch(this) {
       case NORTH:
          return EAST;
       case SOUTH:
@@ -165,10 +228,74 @@
       default:
          throw new IllegalStateException("Unable to get Y-rotated facing of " + this);
       }
    }
 
+   private Direction getClockWiseX() {
+      switch(this) {
+      case DOWN:
+         return SOUTH;
+      case UP:
+         return NORTH;
+      case NORTH:
+         return DOWN;
+      case SOUTH:
+         return UP;
+      default:
+         throw new IllegalStateException("Unable to get X-rotated facing of " + this);
+      }
+   }
+
+   private Direction getCounterClockWiseX() {
+      switch(this) {
+      case DOWN:
+         return NORTH;
+      case UP:
+         return SOUTH;
+      case NORTH:
+         return UP;
+      case SOUTH:
+         return DOWN;
+      default:
+         throw new IllegalStateException("Unable to get X-rotated facing of " + this);
+      }
+   }
+
+   private Direction getClockWiseZ() {
+      switch(this) {
+      case DOWN:
+         return WEST;
+      case UP:
+         return EAST;
+      case NORTH:
+      case SOUTH:
+      default:
+         throw new IllegalStateException("Unable to get Z-rotated facing of " + this);
+      case WEST:
+         return UP;
+      case EAST:
+         return DOWN;
+      }
+   }
+
+   private Direction getCounterClockWiseZ() {
+      switch(this) {
+      case DOWN:
+         return EAST;
+      case UP:
+         return WEST;
+      case NORTH:
+      case SOUTH:
+      default:
+         throw new IllegalStateException("Unable to get Z-rotated facing of " + this);
+      case WEST:
+         return DOWN;
+      case EAST:
+         return UP;
+      }
+   }
+
    public Direction getCounterClockWise() {
       switch(this) {
       case NORTH:
          return WEST;
       case SOUTH:
@@ -218,10 +345,15 @@
    public static Direction from2DDataValue(int var0) {
       return BY_2D_DATA[Mth.abs(var0 % BY_2D_DATA.length)];
    }
 
    @Nullable
+   public static Direction fromNormal(BlockPos var0) {
+      return (Direction)BY_NORMAL.get(var0.asLong());
+   }
+
+   @Nullable
    public static Direction fromNormal(int var0, int var1, int var2) {
       return (Direction)BY_NORMAL.get(BlockPos.asLong(var0, var1, var2));
    }
 
    public static Direction fromYRot(double var0) {
@@ -230,15 +362,15 @@
 
    public static Direction fromAxisAndDirection(Direction.Axis var0, Direction.AxisDirection var1) {
       switch(var0) {
       case X:
          return var1 == Direction.AxisDirection.POSITIVE ? EAST : WEST;
-      case Y:
-         return var1 == Direction.AxisDirection.POSITIVE ? UP : DOWN;
       case Z:
       default:
          return var1 == Direction.AxisDirection.POSITIVE ? SOUTH : NORTH;
+      case Y:
+         return var1 == Direction.AxisDirection.POSITIVE ? UP : DOWN;
       }
    }
 
    public float toYRot() {
       return (float)((this.data2d & 3) * 90);
@@ -301,68 +433,10 @@
       float var3 = -Mth.sin(var2);
       float var4 = Mth.cos(var2);
       return (float)this.normal.getX() * var3 + (float)this.normal.getZ() * var4 > 0.0F;
    }
 
-   public static enum Plane implements Iterable<Direction>, Predicate<Direction> {
-      HORIZONTAL(new Direction[]{Direction.NORTH, Direction.EAST, Direction.SOUTH, Direction.WEST}, new Direction.Axis[]{Direction.Axis.X, Direction.Axis.Z}),
-      VERTICAL(new Direction[]{Direction.UP, Direction.DOWN}, new Direction.Axis[]{Direction.Axis.Y});
-
-      private final Direction[] faces;
-      private final Direction.Axis[] axis;
-
-      private Plane(Direction[] var3, Direction.Axis[] var4) {
-         this.faces = var3;
-         this.axis = var4;
-      }
-
-      public Direction getRandomDirection(Random var1) {
-         return (Direction)Util.getRandom((Object[])this.faces, var1);
-      }
-
-      public Direction.Axis getRandomAxis(Random var1) {
-         return (Direction.Axis)Util.getRandom((Object[])this.axis, var1);
-      }
-
-      public boolean test(@Nullable Direction var1) {
-         return var1 != null && var1.getAxis().getPlane() == this;
-      }
-
-      public Iterator<Direction> iterator() {
-         return Iterators.forArray(this.faces);
-      }
-
-      public Stream<Direction> stream() {
-         return Arrays.stream(this.faces);
-      }
-   }
-
-   public static enum AxisDirection {
-      POSITIVE(1, "Towards positive"),
-      NEGATIVE(-1, "Towards negative");
-
-      private final int step;
-      private final String name;
-
-      private AxisDirection(int var3, String var4) {
-         this.step = var3;
-         this.name = var4;
-      }
-
-      public int getStep() {
-         return this.step;
-      }
-
-      public String toString() {
-         return this.name;
-      }
-
-      public Direction.AxisDirection opposite() {
-         return this == POSITIVE ? NEGATIVE : POSITIVE;
-      }
-   }
-
    public static enum Axis implements StringRepresentable, Predicate<Direction> {
       X("x") {
          public int choose(int var1, int var2, int var3) {
             return var1;
          }
@@ -388,18 +462,18 @@
          public double choose(double var1, double var3, double var5) {
             return var5;
          }
       };
 
-      private static final Direction.Axis[] VALUES = values();
+      public static final Direction.Axis[] VALUES = values();
       public static final Codec<Direction.Axis> CODEC = StringRepresentable.fromEnum(Direction.Axis::values, Direction.Axis::byName);
       private static final Map<String, Direction.Axis> BY_NAME = (Map)Arrays.stream(VALUES).collect(Collectors.toMap(Direction.Axis::getName, (var0) -> {
          return var0;
       }));
       private final String name;
 
-      private Axis(String var3) {
+      Axis(String var3) {
          this.name = var3;
       }
 
       @Nullable
       public static Direction.Axis byName(String var0) {
@@ -448,6 +522,68 @@
 
       public abstract int choose(int var1, int var2, int var3);
 
       public abstract double choose(double var1, double var3, double var5);
    }
+
+   public static enum AxisDirection {
+      POSITIVE(1, "Towards positive"),
+      NEGATIVE(-1, "Towards negative");
+
+      private final int step;
+      private final String name;
+
+      private AxisDirection(int var3, String var4) {
+         this.step = var3;
+         this.name = var4;
+      }
+
+      public int getStep() {
+         return this.step;
+      }
+
+      public String getName() {
+         return this.name;
+      }
+
+      public String toString() {
+         return this.name;
+      }
+
+      public Direction.AxisDirection opposite() {
+         return this == POSITIVE ? NEGATIVE : POSITIVE;
+      }
+   }
+
+   public static enum Plane implements Iterable<Direction>, Predicate<Direction> {
+      HORIZONTAL(new Direction[]{Direction.NORTH, Direction.EAST, Direction.SOUTH, Direction.WEST}, new Direction.Axis[]{Direction.Axis.X, Direction.Axis.Z}),
+      VERTICAL(new Direction[]{Direction.UP, Direction.DOWN}, new Direction.Axis[]{Direction.Axis.Y});
+
+      private final Direction[] faces;
+      private final Direction.Axis[] axis;
+
+      private Plane(Direction[] var3, Direction.Axis[] var4) {
+         this.faces = var3;
+         this.axis = var4;
+      }
+
+      public Direction getRandomDirection(Random var1) {
+         return (Direction)Util.getRandom((Object[])this.faces, var1);
+      }
+
+      public Direction.Axis getRandomAxis(Random var1) {
+         return (Direction.Axis)Util.getRandom((Object[])this.axis, var1);
+      }
+
+      public boolean test(@Nullable Direction var1) {
+         return var1 != null && var1.getAxis().getPlane() == this;
+      }
+
+      public Iterator<Direction> iterator() {
+         return Iterators.forArray(this.faces);
+      }
+
+      public Stream<Direction> stream() {
+         return Arrays.stream(this.faces);
+      }
+   }
 }
