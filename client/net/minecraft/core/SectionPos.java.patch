--- net/minecraft/core/SectionPos.java
+++ net/minecraft/core/SectionPos.java
@@ -5,12 +5,31 @@
 import java.util.stream.Stream;
 import java.util.stream.StreamSupport;
 import net.minecraft.util.Mth;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.level.ChunkPos;
+import net.minecraft.world.level.chunk.ChunkAccess;
 
 public class SectionPos extends Vec3i {
+   public static final int SECTION_BITS = 4;
+   public static final int SECTION_SIZE = 16;
+   private static final int SECTION_MASK = 15;
+   public static final int SECTION_HALF_SIZE = 8;
+   public static final int SECTION_MAX_INDEX = 15;
+   private static final int PACKED_X_LENGTH = 22;
+   private static final int PACKED_Y_LENGTH = 20;
+   private static final int PACKED_Z_LENGTH = 22;
+   private static final long PACKED_X_MASK = 4194303L;
+   private static final long PACKED_Y_MASK = 1048575L;
+   private static final long PACKED_Z_MASK = 4194303L;
+   private static final int Y_OFFSET = 0;
+   private static final int Z_OFFSET = 20;
+   private static final int X_OFFSET = 42;
+   private static final int RELATIVE_X_SHIFT = 8;
+   private static final int RELATIVE_Y_SHIFT = 0;
+   private static final int RELATIVE_Z_SHIFT = 4;
+
    private SectionPos(int var1, int var2, int var3) {
       super(var1, var2, var3);
    }
 
    public static SectionPos of(int var0, int var1, int var2) {
@@ -24,25 +43,33 @@
    public static SectionPos of(ChunkPos var0, int var1) {
       return new SectionPos(var0.x, var1, var0.z);
    }
 
    public static SectionPos of(Entity var0) {
-      return new SectionPos(blockToSectionCoord(Mth.floor(var0.getX())), blockToSectionCoord(Mth.floor(var0.getY())), blockToSectionCoord(Mth.floor(var0.getZ())));
+      return new SectionPos(blockToSectionCoord(var0.getBlockX()), blockToSectionCoord(var0.getBlockY()), blockToSectionCoord(var0.getBlockZ()));
    }
 
    public static SectionPos of(long var0) {
       return new SectionPos(x(var0), y(var0), z(var0));
    }
 
+   public static SectionPos bottomOf(ChunkAccess var0) {
+      return of(var0.getPos(), var0.getMinSection());
+   }
+
    public static long offset(long var0, Direction var2) {
       return offset(var0, var2.getStepX(), var2.getStepY(), var2.getStepZ());
    }
 
    public static long offset(long var0, int var2, int var3, int var4) {
       return asLong(x(var0) + var2, y(var0) + var3, z(var0) + var4);
    }
 
+   public static int posToSectionCoord(double var0) {
+      return blockToSectionCoord(Mth.floor(var0));
+   }
+
    public static int blockToSectionCoord(int var0) {
       return var0 >> 4;
    }
 
    public static int sectionRelative(int var0) {
@@ -86,10 +113,14 @@
 
    public static int sectionToBlockCoord(int var0) {
       return var0 << 4;
    }
 
+   public static int sectionToBlockCoord(int var0, int var1) {
+      return sectionToBlockCoord(var0) + var1;
+   }
+
    public static int x(long var0) {
       return (int)(var0 << 0 >> 42);
    }
 
    public static int y(long var0) {
@@ -111,31 +142,31 @@
    public int z() {
       return this.getZ();
    }
 
    public int minBlockX() {
-      return this.x() << 4;
+      return sectionToBlockCoord(this.x());
    }
 
    public int minBlockY() {
-      return this.y() << 4;
+      return sectionToBlockCoord(this.y());
    }
 
    public int minBlockZ() {
-      return this.z() << 4;
+      return sectionToBlockCoord(this.z());
    }
 
    public int maxBlockX() {
-      return (this.x() << 4) + 15;
+      return sectionToBlockCoord(this.x(), 15);
    }
 
    public int maxBlockY() {
-      return (this.y() << 4) + 15;
+      return sectionToBlockCoord(this.y(), 15);
    }
 
    public int maxBlockZ() {
-      return (this.z() << 4) + 15;
+      return sectionToBlockCoord(this.z(), 15);
    }
 
    public static long blockToSection(long var0) {
       return asLong(blockToSectionCoord(BlockPos.getX(var0)), blockToSectionCoord(BlockPos.getY(var0)), blockToSectionCoord(BlockPos.getZ(var0)));
    }
@@ -155,10 +186,14 @@
 
    public ChunkPos chunk() {
       return new ChunkPos(this.x(), this.z());
    }
 
+   public static long asLong(BlockPos var0) {
+      return asLong(blockToSectionCoord(var0.getX()), blockToSectionCoord(var0.getY()), blockToSectionCoord(var0.getZ()));
+   }
+
    public static long asLong(int var0, int var1, int var2) {
       long var3 = 0L;
       var3 |= ((long)var0 & 4194303L) << 42;
       var3 |= ((long)var1 & 1048575L) << 0;
       var3 |= ((long)var2 & 4194303L) << 20;
@@ -167,10 +202,14 @@
 
    public long asLong() {
       return asLong(this.x(), this.y(), this.z());
    }
 
+   public SectionPos offset(int var1, int var2, int var3) {
+      return var1 == 0 && var2 == 0 && var3 == 0 ? this : new SectionPos(this.x() + var1, this.y() + var2, this.z() + var3);
+   }
+
    public Stream<BlockPos> blocksInside() {
       return BlockPos.betweenClosedStream(this.minBlockX(), this.minBlockY(), this.minBlockZ(), this.maxBlockX(), this.maxBlockY(), this.maxBlockZ());
    }
 
    public static Stream<SectionPos> cube(SectionPos var0, int var1) {
@@ -178,14 +217,14 @@
       int var3 = var0.y();
       int var4 = var0.z();
       return betweenClosedStream(var2 - var1, var3 - var1, var4 - var1, var2 + var1, var3 + var1, var4 + var1);
    }
 
-   public static Stream<SectionPos> aroundChunk(ChunkPos var0, int var1) {
-      int var2 = var0.x;
-      int var3 = var0.z;
-      return betweenClosedStream(var2 - var1, 0, var3 - var1, var2 + var1, 15, var3 + var1);
+   public static Stream<SectionPos> aroundChunk(ChunkPos var0, int var1, int var2, int var3) {
+      int var4 = var0.x;
+      int var5 = var0.z;
+      return betweenClosedStream(var4 - var1, var2, var5 - var1, var4 + var1, var3 - 1, var5 + var1);
    }
 
    public static Stream<SectionPos> betweenClosedStream(final int var0, final int var1, final int var2, final int var3, final int var4, final int var5) {
       return StreamSupport.stream(new AbstractSpliterator<SectionPos>((long)((var3 - var0 + 1) * (var4 - var1 + 1) * (var5 - var2 + 1)), 64) {
          final Cursor3D cursor = new Cursor3D(var0, var1, var2, var3, var4, var5);
