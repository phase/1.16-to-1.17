--- net/minecraft/core/particles/DustParticleOptions.java
+++ net/minecraft/core/particles/DustParticleOptions.java
@@ -1,84 +1,47 @@
 package net.minecraft.core.particles;
 
 import com.mojang.brigadier.StringReader;
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
+import com.mojang.math.Vector3f;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
-import java.util.Locale;
-import net.minecraft.core.Registry;
 import net.minecraft.network.FriendlyByteBuf;
-import net.minecraft.util.Mth;
+import net.minecraft.world.phys.Vec3;
 
-public class DustParticleOptions implements ParticleOptions {
-   public static final DustParticleOptions REDSTONE = new DustParticleOptions(1.0F, 0.0F, 0.0F, 1.0F);
-   public static final Codec<DustParticleOptions> CODEC = RecordCodecBuilder.create((var0) -> {
-      return var0.group(Codec.FLOAT.fieldOf("r").forGetter((var0x) -> {
-         return var0x.r;
-      }), Codec.FLOAT.fieldOf("g").forGetter((var0x) -> {
-         return var0x.g;
-      }), Codec.FLOAT.fieldOf("b").forGetter((var0x) -> {
-         return var0x.b;
-      }), Codec.FLOAT.fieldOf("scale").forGetter((var0x) -> {
-         return var0x.scale;
-      })).apply(var0, DustParticleOptions::new);
-   });
-   public static final ParticleOptions.Deserializer<DustParticleOptions> DESERIALIZER = new ParticleOptions.Deserializer<DustParticleOptions>() {
-      public DustParticleOptions fromCommand(ParticleType<DustParticleOptions> var1, StringReader var2) throws CommandSyntaxException {
-         var2.expect(' ');
-         float var3 = (float)var2.readDouble();
-         var2.expect(' ');
-         float var4 = (float)var2.readDouble();
-         var2.expect(' ');
-         float var5 = (float)var2.readDouble();
-         var2.expect(' ');
-         float var6 = (float)var2.readDouble();
-         return new DustParticleOptions(var3, var4, var5, var6);
-      }
+public class DustParticleOptions extends DustParticleOptionsBase {
+   public static final Vector3f REDSTONE_PARTICLE_COLOR = new Vector3f(Vec3.fromRGB24(16711680));
+   public static final DustParticleOptions REDSTONE;
+   public static final Codec<DustParticleOptions> CODEC;
+   public static final ParticleOptions.Deserializer<DustParticleOptions> DESERIALIZER;
 
-      public DustParticleOptions fromNetwork(ParticleType<DustParticleOptions> var1, FriendlyByteBuf var2) {
-         return new DustParticleOptions(var2.readFloat(), var2.readFloat(), var2.readFloat(), var2.readFloat());
-      }
-   };
-   private final float r;
-   private final float g;
-   private final float b;
-   private final float scale;
-
-   public DustParticleOptions(float var1, float var2, float var3, float var4) {
-      this.r = var1;
-      this.g = var2;
-      this.b = var3;
-      this.scale = Mth.clamp(var4, 0.01F, 4.0F);
+   public DustParticleOptions(Vector3f var1, float var2) {
+      super(var1, var2);
    }
 
-   public void writeToNetwork(FriendlyByteBuf var1) {
-      var1.writeFloat(this.r);
-      var1.writeFloat(this.g);
-      var1.writeFloat(this.b);
-      var1.writeFloat(this.scale);
-   }
-
-   public String writeToString() {
-      return String.format(Locale.ROOT, "%s %.2f %.2f %.2f %.2f", Registry.PARTICLE_TYPE.getKey(this.getType()), this.r, this.g, this.b, this.scale);
-   }
-
    public ParticleType<DustParticleOptions> getType() {
       return ParticleTypes.DUST;
    }
 
-   public float getR() {
-      return this.r;
-   }
+   static {
+      REDSTONE = new DustParticleOptions(REDSTONE_PARTICLE_COLOR, 1.0F);
+      CODEC = RecordCodecBuilder.create((var0) -> {
+         return var0.group(Vector3f.CODEC.fieldOf("color").forGetter((var0x) -> {
+            return var0x.color;
+         }), Codec.FLOAT.fieldOf("scale").forGetter((var0x) -> {
+            return var0x.scale;
+         })).apply(var0, DustParticleOptions::new);
+      });
+      DESERIALIZER = new ParticleOptions.Deserializer<DustParticleOptions>() {
+         public DustParticleOptions fromCommand(ParticleType<DustParticleOptions> var1, StringReader var2) throws CommandSyntaxException {
+            Vector3f var3 = DustParticleOptionsBase.readVector3f(var2);
+            var2.expect(' ');
+            float var4 = var2.readFloat();
+            return new DustParticleOptions(var3, var4);
+         }
 
-   public float getG() {
-      return this.g;
+         public DustParticleOptions fromNetwork(ParticleType<DustParticleOptions> var1, FriendlyByteBuf var2) {
+            return new DustParticleOptions(DustParticleOptionsBase.readVector3f(var2), var2.readFloat());
+         }
+      };
    }
-
-   public float getB() {
-      return this.b;
-   }
-
-   public float getScale() {
-      return this.scale;
-   }
 }
