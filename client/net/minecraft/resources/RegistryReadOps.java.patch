--- net/minecraft/resources/RegistryReadOps.java
+++ net/minecraft/resources/RegistryReadOps.java
@@ -62,11 +62,11 @@
       this.readCache = var4;
       this.jsonOps = var1 == JsonOps.INSTANCE ? this : new RegistryReadOps(JsonOps.INSTANCE, var2, var3, var4);
    }
 
    protected <E> DataResult<Pair<Supplier<E>, T>> decodeElement(T var1, ResourceKey<? extends Registry<E>> var2, Codec<E> var3, boolean var4) {
-      Optional var5 = this.registryHolder.registry(var2);
+      Optional var5 = this.registryHolder.ownedRegistry(var2);
       if (!var5.isPresent()) {
          return DataResult.error("Unknown registry: " + var2);
       } else {
          WritableRegistry var6 = (WritableRegistry)var5.get();
          DataResult var7 = ResourceLocation.CODEC.decode(this.delegate, var1);
@@ -161,11 +161,11 @@
          return new RegistryReadOps.ReadCache();
       });
    }
 
    protected <E> DataResult<Registry<E>> registry(ResourceKey<? extends Registry<E>> var1) {
-      return (DataResult)this.registryHolder.registry(var1).map((var0) -> {
+      return (DataResult)this.registryHolder.ownedRegistry(var1).map((var0) -> {
          return DataResult.success(var0, var0.elementsLifecycle());
       }).orElseGet(() -> {
          return DataResult.error("Unknown registry: " + var1);
       });
    }
