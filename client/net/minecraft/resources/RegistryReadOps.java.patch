--- net/minecraft/resources/RegistryReadOps.java
+++ net/minecraft/resources/RegistryReadOps.java
@@ -38,35 +38,36 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class RegistryReadOps<T> extends DelegatingOps<T> {
    private static final Logger LOGGER = LogManager.getLogger();
+   private static final String JSON = ".json";
    private final RegistryReadOps.ResourceAccess resources;
-   private final RegistryAccess.RegistryHolder registryHolder;
+   private final RegistryAccess registryAccess;
    private final Map<ResourceKey<? extends Registry<?>>, RegistryReadOps.ReadCache<?>> readCache;
    private final RegistryReadOps<JsonElement> jsonOps;
 
-   public static <T> RegistryReadOps<T> create(DynamicOps<T> var0, ResourceManager var1, RegistryAccess.RegistryHolder var2) {
+   public static <T> RegistryReadOps<T> create(DynamicOps<T> var0, ResourceManager var1, RegistryAccess var2) {
       return create(var0, RegistryReadOps.ResourceAccess.forResourceManager(var1), var2);
    }
 
-   public static <T> RegistryReadOps<T> create(DynamicOps<T> var0, RegistryReadOps.ResourceAccess var1, RegistryAccess.RegistryHolder var2) {
+   public static <T> RegistryReadOps<T> create(DynamicOps<T> var0, RegistryReadOps.ResourceAccess var1, RegistryAccess var2) {
       RegistryReadOps var3 = new RegistryReadOps(var0, var1, var2, Maps.newIdentityHashMap());
       RegistryAccess.load(var2, var3);
       return var3;
    }
 
-   private RegistryReadOps(DynamicOps<T> var1, RegistryReadOps.ResourceAccess var2, RegistryAccess.RegistryHolder var3, IdentityHashMap<ResourceKey<? extends Registry<?>>, RegistryReadOps.ReadCache<?>> var4) {
+   private RegistryReadOps(DynamicOps<T> var1, RegistryReadOps.ResourceAccess var2, RegistryAccess var3, IdentityHashMap<ResourceKey<? extends Registry<?>>, RegistryReadOps.ReadCache<?>> var4) {
       super(var1);
       this.resources = var2;
-      this.registryHolder = var3;
+      this.registryAccess = var3;
       this.readCache = var4;
       this.jsonOps = var1 == JsonOps.INSTANCE ? this : new RegistryReadOps(JsonOps.INSTANCE, var2, var3, var4);
    }
 
    protected <E> DataResult<Pair<Supplier<E>, T>> decodeElement(T var1, ResourceKey<? extends Registry<E>> var2, Codec<E> var3, boolean var4) {
-      Optional var5 = this.registryHolder.registry(var2);
+      Optional var5 = this.registryAccess.ownedRegistry(var2);
       if (!var5.isPresent()) {
          return DataResult.error("Unknown registry: " + var2);
       } else {
          WritableRegistry var6 = (WritableRegistry)var5.get();
          DataResult var7 = ResourceLocation.CODEC.decode(this.delegate, var1);
@@ -161,11 +162,11 @@
          return new RegistryReadOps.ReadCache();
       });
    }
 
    protected <E> DataResult<Registry<E>> registry(ResourceKey<? extends Registry<E>> var1) {
-      return (DataResult)this.registryHolder.registry(var1).map((var0) -> {
+      return (DataResult)this.registryAccess.ownedRegistry(var1).map((var0) -> {
          return DataResult.success(var0, var0.elementsLifecycle());
       }).orElseGet(() -> {
          return DataResult.error("Unknown registry: " + var1);
       });
    }
