--- net/minecraft/tags/TagManager.java
+++ net/minecraft/tags/TagManager.java
@@ -1,60 +1,95 @@
 package net.minecraft.tags;
 
+import com.google.common.collect.Lists;
 import com.google.common.collect.Multimap;
-import java.util.Map;
+import java.util.ArrayList;
+import java.util.Optional;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.Executor;
 import java.util.stream.Collectors;
+import javax.annotation.Nullable;
 import net.minecraft.core.Registry;
+import net.minecraft.core.RegistryAccess;
 import net.minecraft.server.packs.resources.PreparableReloadListener;
 import net.minecraft.server.packs.resources.ResourceManager;
 import net.minecraft.util.profiling.ProfilerFiller;
-import net.minecraft.world.entity.EntityType;
-import net.minecraft.world.item.Item;
-import net.minecraft.world.level.block.Block;
-import net.minecraft.world.level.material.Fluid;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
 
 public class TagManager implements PreparableReloadListener {
-   private final TagLoader<Block> blocks;
-   private final TagLoader<Item> items;
-   private final TagLoader<Fluid> fluids;
-   private final TagLoader<EntityType<?>> entityTypes;
+   private static final Logger LOGGER = LogManager.getLogger();
+   private final RegistryAccess registryAccess;
    private TagContainer tags;
 
-   public TagManager() {
-      this.blocks = new TagLoader(Registry.BLOCK::getOptional, "tags/blocks", "block");
-      this.items = new TagLoader(Registry.ITEM::getOptional, "tags/items", "item");
-      this.fluids = new TagLoader(Registry.FLUID::getOptional, "tags/fluids", "fluid");
-      this.entityTypes = new TagLoader(Registry.ENTITY_TYPE::getOptional, "tags/entity_types", "entity_type");
+   public TagManager(RegistryAccess var1) {
       this.tags = TagContainer.EMPTY;
+      this.registryAccess = var1;
    }
 
    public TagContainer getTags() {
       return this.tags;
    }
 
    public CompletableFuture<Void> reload(PreparableReloadListener.PreparationBarrier var1, ResourceManager var2, ProfilerFiller var3, ProfilerFiller var4, Executor var5, Executor var6) {
-      CompletableFuture var7 = this.blocks.prepare(var2, var5);
-      CompletableFuture var8 = this.items.prepare(var2, var5);
-      CompletableFuture var9 = this.fluids.prepare(var2, var5);
-      CompletableFuture var10 = this.entityTypes.prepare(var2, var5);
-      CompletableFuture var10000 = CompletableFuture.allOf(var7, var8, var9, var10);
+      ArrayList var7 = Lists.newArrayList();
+      StaticTags.visitHelpers((var4x) -> {
+         TagManager.LoaderInfo var5x = this.createLoader(var2, var5, var4x);
+         if (var5x != null) {
+            var7.add(var5x);
+         }
+
+      });
+      CompletableFuture var10000 = CompletableFuture.allOf((CompletableFuture[])var7.stream().map((var0) -> {
+         return var0.pendingLoad;
+      }).toArray((var0) -> {
+         return new CompletableFuture[var0];
+      }));
       var1.getClass();
-      return var10000.thenCompose(var1::wait).thenAcceptAsync((var5x) -> {
-         TagCollection var6 = this.blocks.load((Map)var7.join());
-         TagCollection var7x = this.items.load((Map)var8.join());
-         TagCollection var8x = this.fluids.load((Map)var9.join());
-         TagCollection var9x = this.entityTypes.load((Map)var10.join());
-         TagContainer var10x = TagContainer.of(var6, var7x, var8x, var9x);
-         Multimap var11 = StaticTags.getAllMissingTags(var10x);
-         if (!var11.isEmpty()) {
-            throw new IllegalStateException("Missing required tags: " + (String)var11.entries().stream().map((var0) -> {
+      return var10000.thenCompose(var1::wait).thenAcceptAsync((var2x) -> {
+         TagContainer.Builder var3 = new TagContainer.Builder();
+         var7.forEach((var1) -> {
+            var1.addToBuilder(var3);
+         });
+         TagContainer var4 = var3.build();
+         Multimap var5 = StaticTags.getAllMissingTags(var4);
+         if (!var5.isEmpty()) {
+            throw new IllegalStateException("Missing required tags: " + (String)var5.entries().stream().map((var0) -> {
                return var0.getKey() + ":" + var0.getValue();
             }).sorted().collect(Collectors.joining(",")));
          } else {
-            SerializationTags.bind(var10x);
-            this.tags = var10x;
+            SerializationTags.bind(var4);
+            this.tags = var4;
          }
       }, var6);
    }
+
+   @Nullable
+   private <T> TagManager.LoaderInfo<T> createLoader(ResourceManager var1, Executor var2, StaticTagHelper<T> var3) {
+      Optional var4 = this.registryAccess.registry(var3.getKey());
+      if (var4.isPresent()) {
+         Registry var5 = (Registry)var4.get();
+         TagLoader var6 = new TagLoader(var5::getOptional, var3.getDirectory());
+         CompletableFuture var7 = CompletableFuture.supplyAsync(() -> {
+            return var6.loadAndBuild(var1);
+         }, var2);
+         return new TagManager.LoaderInfo(var3, var7);
+      } else {
+         LOGGER.warn("Can't find registry for {}", var3.getKey());
+         return null;
+      }
+   }
+
+   static class LoaderInfo<T> {
+      private final StaticTagHelper<T> helper;
+      private final CompletableFuture<? extends TagCollection<T>> pendingLoad;
+
+      private LoaderInfo(StaticTagHelper<T> var1, CompletableFuture<? extends TagCollection<T>> var2) {
+         this.helper = var1;
+         this.pendingLoad = var2;
+      }
+
+      public void addToBuilder(TagContainer.Builder var1) {
+         var1.add(this.helper.getKey(), (TagCollection)this.pendingLoad.join());
+      }
+   }
 }
