--- net/minecraft/tags/StaticTagHelper.java
+++ net/minecraft/tags/StaticTagHelper.java
@@ -2,23 +2,29 @@
 
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
 import java.util.List;
+import java.util.Map;
+import java.util.Objects;
 import java.util.Set;
 import java.util.function.Function;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
+import net.minecraft.core.Registry;
+import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
 
 public class StaticTagHelper<T> {
+   private final ResourceKey<? extends Registry<T>> key;
+   private final String directory;
    private TagCollection<T> source = TagCollection.empty();
    private final List<StaticTagHelper.Wrapper<T>> wrappers = Lists.newArrayList();
-   private final Function<TagContainer, TagCollection<T>> collectionGetter;
 
-   public StaticTagHelper(Function<TagContainer, TagCollection<T>> var1) {
-      this.collectionGetter = var1;
+   public StaticTagHelper(ResourceKey<? extends Registry<T>> var1, String var2) {
+      this.key = var1;
+      this.directory = var2;
    }
 
    public Tag.Named<T> bind(String var1) {
       StaticTagHelper.Wrapper var2 = new StaticTagHelper.Wrapper(new ResourceLocation(var1));
       this.wrappers.add(var2);
@@ -34,38 +40,49 @@
          });
       });
    }
 
    public void reset(TagContainer var1) {
-      TagCollection var2 = (TagCollection)this.collectionGetter.apply(var1);
+      TagCollection var2 = var1.getOrEmpty(this.key);
       this.source = var2;
       this.wrappers.forEach((var1x) -> {
+         Objects.requireNonNull(var2);
          var1x.rebind(var2::getTag);
       });
    }
 
    public TagCollection<T> getAllTags() {
       return this.source;
    }
 
-   public List<? extends Tag.Named<T>> getWrappers() {
-      return this.wrappers;
-   }
-
    public Set<ResourceLocation> getMissingTags(TagContainer var1) {
-      TagCollection var2 = (TagCollection)this.collectionGetter.apply(var1);
+      TagCollection var2 = var1.getOrEmpty(this.key);
       Set var3 = (Set)this.wrappers.stream().map(StaticTagHelper.Wrapper::getName).collect(Collectors.toSet());
       ImmutableSet var4 = ImmutableSet.copyOf(var2.getAvailableTags());
       return Sets.difference(var3, var4);
    }
 
-   static class Wrapper<T> implements Tag.Named<T> {
+   public ResourceKey<? extends Registry<T>> getKey() {
+      return this.key;
+   }
+
+   public String getDirectory() {
+      return this.directory;
+   }
+
+   protected void addToCollection(TagContainer.Builder var1) {
+      var1.add(this.key, TagCollection.of((Map)this.wrappers.stream().collect(Collectors.toMap(Tag.Named::getName, (var0) -> {
+         return var0;
+      }))));
+   }
+
+   private static class Wrapper<T> implements Tag.Named<T> {
       @Nullable
       private Tag<T> tag;
       protected final ResourceLocation name;
 
-      private Wrapper(ResourceLocation var1) {
+      Wrapper(ResourceLocation var1) {
          this.name = var1;
       }
 
       public ResourceLocation getName() {
          return this.name;
