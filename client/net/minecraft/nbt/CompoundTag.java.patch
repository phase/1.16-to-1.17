--- net/minecraft/nbt/CompoundTag.java
+++ net/minecraft/nbt/CompoundTag.java
@@ -1,41 +1,31 @@
 package net.minecraft.nbt;
 
-import com.google.common.base.Strings;
-import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.DataResult;
 import com.mojang.serialization.Dynamic;
 import java.io.DataInput;
 import java.io.DataOutput;
 import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
 import java.util.Set;
 import java.util.UUID;
-import java.util.regex.Pattern;
 import javax.annotation.Nullable;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
-import net.minecraft.network.chat.Component;
-import net.minecraft.network.chat.MutableComponent;
-import net.minecraft.network.chat.TextComponent;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
 
 public class CompoundTag implements Tag {
    public static final Codec<CompoundTag> CODEC;
-   private static final Logger LOGGER;
-   private static final Pattern SIMPLE_VALUE;
+   private static final int SELF_SIZE_IN_BITS = 384;
+   private static final int MAP_ENTRY_SIZE_IN_BITS = 256;
    public static final TagType<CompoundTag> TYPE;
    private final Map<String, Tag> tags;
 
    protected CompoundTag(Map<String, Tag> var1) {
       this.tags = var1;
@@ -121,10 +111,14 @@
 
    public void putByteArray(String var1, byte[] var2) {
       this.tags.put(var1, new ByteArrayTag(var2));
    }
 
+   public void putByteArray(String var1, List<Byte> var2) {
+      this.tags.put(var1, new ByteArrayTag(var2));
+   }
+
    public void putIntArray(String var1, int[] var2) {
       this.tags.put(var1, new IntArrayTag(var2));
    }
 
    public void putIntArray(String var1, List<Integer> var2) {
@@ -317,27 +311,11 @@
    public void remove(String var1) {
       this.tags.remove(var1);
    }
 
    public String toString() {
-      StringBuilder var1 = new StringBuilder("{");
-      Object var2 = this.tags.keySet();
-      if (LOGGER.isDebugEnabled()) {
-         ArrayList var3 = Lists.newArrayList(this.tags.keySet());
-         Collections.sort(var3);
-         var2 = var3;
-      }
-
-      String var4;
-      for(Iterator var5 = ((Collection)var2).iterator(); var5.hasNext(); var1.append(handleEscape(var4)).append(':').append(this.tags.get(var4))) {
-         var4 = (String)var5.next();
-         if (var1.length() != 1) {
-            var1.append(',');
-         }
-      }
-
-      return var1.append('}').toString();
+      return this.getAsString();
    }
 
    public boolean isEmpty() {
       return this.tags.isEmpty();
    }
@@ -346,10 +324,11 @@
       CrashReport var4 = CrashReport.forThrowable(var3, "Reading NBT data");
       CrashReportCategory var5 = var4.addCategory("Corrupt NBT tag", 1);
       var5.setDetail("Tag type found", () -> {
          return ((Tag)this.tags.get(var1)).getType().getName();
       });
+      Objects.requireNonNull(var2);
       var5.setDetail("Tag type expected", var2::getName);
       var5.setDetail("Tag name", (Object)var1);
       return var4;
    }
 
@@ -376,19 +355,19 @@
          var2.writeUTF(var0);
          var1.write(var2);
       }
    }
 
-   private static byte readNamedTagType(DataInput var0, NbtAccounter var1) throws IOException {
+   static byte readNamedTagType(DataInput var0, NbtAccounter var1) throws IOException {
       return var0.readByte();
    }
 
-   private static String readNamedTagName(DataInput var0, NbtAccounter var1) throws IOException {
+   static String readNamedTagName(DataInput var0, NbtAccounter var1) throws IOException {
       return var0.readUTF();
    }
 
-   private static Tag readNamedTagData(TagType<?> var0, String var1, DataInput var2, int var3, NbtAccounter var4) {
+   static Tag readNamedTagData(TagType<?> var0, String var1, DataInput var2, int var3, NbtAccounter var4) {
       try {
          return var0.load(var2, var3, var4);
       } catch (IOException var8) {
          CrashReport var6 = CrashReport.forThrowable(var8, "Loading NBT data");
          CrashReportCategory var7 = var6.addCategory("NBT Tag");
@@ -417,59 +396,14 @@
       }
 
       return this;
    }
 
-   protected static String handleEscape(String var0) {
-      return SIMPLE_VALUE.matcher(var0).matches() ? var0 : StringTag.quoteAndEscape(var0);
+   public void accept(TagVisitor var1) {
+      var1.visitCompound(this);
    }
 
-   protected static Component handleEscapePretty(String var0) {
-      if (SIMPLE_VALUE.matcher(var0).matches()) {
-         return (new TextComponent(var0)).withStyle(SYNTAX_HIGHLIGHTING_KEY);
-      } else {
-         String var1 = StringTag.quoteAndEscape(var0);
-         String var2 = var1.substring(0, 1);
-         MutableComponent var3 = (new TextComponent(var1.substring(1, var1.length() - 1))).withStyle(SYNTAX_HIGHLIGHTING_KEY);
-         return (new TextComponent(var2)).append(var3).append(var2);
-      }
-   }
-
-   public Component getPrettyDisplay(String var1, int var2) {
-      if (this.tags.isEmpty()) {
-         return new TextComponent("{}");
-      } else {
-         TextComponent var3 = new TextComponent("{");
-         Object var4 = this.tags.keySet();
-         if (LOGGER.isDebugEnabled()) {
-            ArrayList var5 = Lists.newArrayList(this.tags.keySet());
-            Collections.sort(var5);
-            var4 = var5;
-         }
-
-         if (!var1.isEmpty()) {
-            var3.append("\n");
-         }
-
-         MutableComponent var7;
-         for(Iterator var8 = ((Collection)var4).iterator(); var8.hasNext(); var3.append((Component)var7)) {
-            String var6 = (String)var8.next();
-            var7 = (new TextComponent(Strings.repeat(var1, var2 + 1))).append(handleEscapePretty(var6)).append(String.valueOf(':')).append(" ").append(((Tag)this.tags.get(var6)).getPrettyDisplay(var1, var2 + 1));
-            if (var8.hasNext()) {
-               var7.append(String.valueOf(',')).append(var1.isEmpty() ? " " : "\n");
-            }
-         }
-
-         if (!var1.isEmpty()) {
-            var3.append("\n").append(Strings.repeat(var1, var2));
-         }
-
-         var3.append("}");
-         return var3;
-      }
-   }
-
    protected Map<String, Tag> entries() {
       return Collections.unmodifiableMap(this.tags);
    }
 
    static {
@@ -477,12 +411,10 @@
          Tag var1 = (Tag)var0.convert(NbtOps.INSTANCE).getValue();
          return var1 instanceof CompoundTag ? DataResult.success((CompoundTag)var1) : DataResult.error("Not a compound tag: " + var1);
       }, (var0) -> {
          return new Dynamic(NbtOps.INSTANCE, var0);
       });
-      LOGGER = LogManager.getLogger();
-      SIMPLE_VALUE = Pattern.compile("[A-Za-z0-9._+-]+");
       TYPE = new TagType<CompoundTag>() {
          public CompoundTag load(DataInput var1, int var2, NbtAccounter var3) throws IOException {
             var3.accountBits(384L);
             if (var2 > 512) {
                throw new RuntimeException("Tried to read NBT tag with too high complexity, depth > 512");
