--- net/minecraft/nbt/ByteTag.java
+++ net/minecraft/nbt/ByteTag.java
@@ -1,15 +1,13 @@
 package net.minecraft.nbt;
 
 import java.io.DataInput;
 import java.io.DataOutput;
 import java.io.IOException;
-import net.minecraft.network.chat.Component;
-import net.minecraft.network.chat.MutableComponent;
-import net.minecraft.network.chat.TextComponent;
 
 public class ByteTag extends NumericTag {
+   private static final int SELF_SIZE_IN_BITS = 72;
    public static final TagType<ByteTag> TYPE = new TagType<ByteTag>() {
       public ByteTag load(DataInput var1, int var2, NbtAccounter var3) throws IOException {
          var3.accountBits(72L);
          return ByteTag.valueOf(var1.readByte());
       }
@@ -28,11 +26,11 @@
    };
    public static final ByteTag ZERO = valueOf((byte)0);
    public static final ByteTag ONE = valueOf((byte)1);
    private final byte data;
 
-   private ByteTag(byte var1) {
+   ByteTag(byte var1) {
       this.data = var1;
    }
 
    public static ByteTag valueOf(byte var0) {
       return ByteTag.Cache.cache[128 + var0];
@@ -52,14 +50,10 @@
 
    public TagType<ByteTag> getType() {
       return TYPE;
    }
 
-   public String toString() {
-      return this.data + "b";
-   }
-
    public ByteTag copy() {
       return this;
    }
 
    public boolean equals(Object var1) {
@@ -72,13 +66,12 @@
 
    public int hashCode() {
       return this.data;
    }
 
-   public Component getPrettyDisplay(String var1, int var2) {
-      MutableComponent var3 = (new TextComponent("b")).withStyle(SYNTAX_HIGHLIGHTING_NUMBER_TYPE);
-      return (new TextComponent(String.valueOf(this.data))).append(var3).withStyle(SYNTAX_HIGHLIGHTING_NUMBER);
+   public void accept(TagVisitor var1) {
+      var1.visitByte(this);
    }
 
    public long getAsLong() {
       return (long)this.data;
    }
@@ -105,13 +98,16 @@
 
    public Number getAsNumber() {
       return this.data;
    }
 
-   static class Cache {
-      private static final ByteTag[] cache = new ByteTag[256];
+   private static class Cache {
+      static final ByteTag[] cache = new ByteTag[256];
 
+      private Cache() {
+      }
+
       static {
          for(int var0 = 0; var0 < cache.length; ++var0) {
             cache[var0] = new ByteTag((byte)(var0 - 128));
          }
 
