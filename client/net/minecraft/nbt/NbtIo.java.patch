--- net/minecraft/nbt/NbtIo.java
+++ net/minecraft/nbt/NbtIo.java
@@ -18,217 +18,157 @@
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
 
 public class NbtIo {
+   public NbtIo() {
+   }
+
    public static CompoundTag readCompressed(File var0) throws IOException {
       FileInputStream var1 = new FileInputStream(var0);
-      Throwable var2 = null;
 
-      CompoundTag var3;
+      CompoundTag var2;
       try {
-         var3 = readCompressed((InputStream)var1);
-      } catch (Throwable var12) {
-         var2 = var12;
-         throw var12;
-      } finally {
-         if (var1 != null) {
-            if (var2 != null) {
-               try {
-                  var1.close();
-               } catch (Throwable var11) {
-                  var2.addSuppressed(var11);
-               }
-            } else {
-               var1.close();
-            }
+         var2 = readCompressed((InputStream)var1);
+      } catch (Throwable var5) {
+         try {
+            var1.close();
+         } catch (Throwable var4) {
+            var5.addSuppressed(var4);
          }
 
+         throw var5;
       }
 
-      return var3;
+      var1.close();
+      return var2;
    }
 
    public static CompoundTag readCompressed(InputStream var0) throws IOException {
       DataInputStream var1 = new DataInputStream(new BufferedInputStream(new GZIPInputStream(var0)));
-      Throwable var2 = null;
 
-      CompoundTag var3;
+      CompoundTag var2;
       try {
-         var3 = read(var1, NbtAccounter.UNLIMITED);
-      } catch (Throwable var12) {
-         var2 = var12;
-         throw var12;
-      } finally {
-         if (var1 != null) {
-            if (var2 != null) {
-               try {
-                  var1.close();
-               } catch (Throwable var11) {
-                  var2.addSuppressed(var11);
-               }
-            } else {
-               var1.close();
-            }
+         var2 = read(var1, NbtAccounter.UNLIMITED);
+      } catch (Throwable var5) {
+         try {
+            var1.close();
+         } catch (Throwable var4) {
+            var5.addSuppressed(var4);
          }
 
+         throw var5;
       }
 
-      return var3;
+      var1.close();
+      return var2;
    }
 
    public static void writeCompressed(CompoundTag var0, File var1) throws IOException {
       FileOutputStream var2 = new FileOutputStream(var1);
-      Throwable var3 = null;
 
       try {
          writeCompressed(var0, (OutputStream)var2);
-      } catch (Throwable var12) {
-         var3 = var12;
-         throw var12;
-      } finally {
-         if (var2 != null) {
-            if (var3 != null) {
-               try {
-                  var2.close();
-               } catch (Throwable var11) {
-                  var3.addSuppressed(var11);
-               }
-            } else {
-               var2.close();
-            }
+      } catch (Throwable var6) {
+         try {
+            var2.close();
+         } catch (Throwable var5) {
+            var6.addSuppressed(var5);
          }
 
+         throw var6;
       }
 
+      var2.close();
    }
 
    public static void writeCompressed(CompoundTag var0, OutputStream var1) throws IOException {
       DataOutputStream var2 = new DataOutputStream(new BufferedOutputStream(new GZIPOutputStream(var1)));
-      Throwable var3 = null;
 
       try {
          write(var0, (DataOutput)var2);
-      } catch (Throwable var12) {
-         var3 = var12;
-         throw var12;
-      } finally {
-         if (var2 != null) {
-            if (var3 != null) {
-               try {
-                  var2.close();
-               } catch (Throwable var11) {
-                  var3.addSuppressed(var11);
-               }
-            } else {
-               var2.close();
-            }
+      } catch (Throwable var6) {
+         try {
+            var2.close();
+         } catch (Throwable var5) {
+            var6.addSuppressed(var5);
          }
 
+         throw var6;
       }
 
+      var2.close();
    }
 
    public static void write(CompoundTag var0, File var1) throws IOException {
       FileOutputStream var2 = new FileOutputStream(var1);
-      Throwable var3 = null;
 
       try {
-         DataOutputStream var4 = new DataOutputStream(var2);
-         Throwable var5 = null;
+         DataOutputStream var3 = new DataOutputStream(var2);
 
          try {
-            write(var0, (DataOutput)var4);
-         } catch (Throwable var28) {
-            var5 = var28;
-            throw var28;
-         } finally {
-            if (var4 != null) {
-               if (var5 != null) {
-                  try {
-                     var4.close();
-                  } catch (Throwable var27) {
-                     var5.addSuppressed(var27);
-                  }
-               } else {
-                  var4.close();
-               }
+            write(var0, (DataOutput)var3);
+         } catch (Throwable var8) {
+            try {
+               var3.close();
+            } catch (Throwable var7) {
+               var8.addSuppressed(var7);
             }
 
+            throw var8;
          }
-      } catch (Throwable var30) {
-         var3 = var30;
-         throw var30;
-      } finally {
-         if (var2 != null) {
-            if (var3 != null) {
-               try {
-                  var2.close();
-               } catch (Throwable var26) {
-                  var3.addSuppressed(var26);
-               }
-            } else {
-               var2.close();
-            }
+
+         var3.close();
+      } catch (Throwable var9) {
+         try {
+            var2.close();
+         } catch (Throwable var6) {
+            var9.addSuppressed(var6);
          }
 
+         throw var9;
       }
 
+      var2.close();
    }
 
    @Nullable
    public static CompoundTag read(File var0) throws IOException {
       if (!var0.exists()) {
          return null;
       } else {
          FileInputStream var1 = new FileInputStream(var0);
-         Throwable var2 = null;
 
-         Object var5;
+         CompoundTag var3;
          try {
-            DataInputStream var3 = new DataInputStream(var1);
-            Throwable var4 = null;
+            DataInputStream var2 = new DataInputStream(var1);
 
             try {
-               var5 = read(var3, NbtAccounter.UNLIMITED);
-            } catch (Throwable var28) {
-               var5 = var28;
-               var4 = var28;
-               throw var28;
-            } finally {
-               if (var3 != null) {
-                  if (var4 != null) {
-                     try {
-                        var3.close();
-                     } catch (Throwable var27) {
-                        var4.addSuppressed(var27);
-                     }
-                  } else {
-                     var3.close();
-                  }
+               var3 = read(var2, NbtAccounter.UNLIMITED);
+            } catch (Throwable var7) {
+               try {
+                  var2.close();
+               } catch (Throwable var6) {
+                  var7.addSuppressed(var6);
                }
 
+               throw var7;
             }
-         } catch (Throwable var30) {
-            var2 = var30;
-            throw var30;
-         } finally {
-            if (var1 != null) {
-               if (var2 != null) {
-                  try {
-                     var1.close();
-                  } catch (Throwable var26) {
-                     var2.addSuppressed(var26);
-                  }
-               } else {
-                  var1.close();
-               }
+
+            var2.close();
+         } catch (Throwable var8) {
+            try {
+               var1.close();
+            } catch (Throwable var5) {
+               var8.addSuppressed(var5);
             }
 
+            throw var8;
          }
 
-         return (CompoundTag)var5;
+         var1.close();
+         return var3;
       }
    }
 
    public static CompoundTag read(DataInput var0) throws IOException {
       return read(var0, NbtAccounter.UNLIMITED);
