--- net/minecraft/nbt/ListTag.java
+++ net/minecraft/nbt/ListTag.java
@@ -1,24 +1,19 @@
 package net.minecraft.nbt;
 
-import com.google.common.base.Strings;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
-import it.unimi.dsi.fastutil.bytes.ByteOpenHashSet;
-import it.unimi.dsi.fastutil.bytes.ByteSet;
 import java.io.DataInput;
 import java.io.DataOutput;
 import java.io.IOException;
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Objects;
-import net.minecraft.network.chat.Component;
-import net.minecraft.network.chat.TextComponent;
 
 public class ListTag extends CollectionTag<Tag> {
+   private static final int SELF_SIZE_IN_BITS = 296;
    public static final TagType<ListTag> TYPE = new TagType<ListTag>() {
       public ListTag load(DataInput var1, int var2, NbtAccounter var3) throws IOException {
          var3.accountBits(296L);
          if (var2 > 512) {
             throw new RuntimeException("Tried to read NBT tag with too high complexity, depth > 512");
@@ -47,15 +42,14 @@
 
       public String getPrettyName() {
          return "TAG_List";
       }
    };
-   private static final ByteSet INLINE_ELEMENT_TYPES = new ByteOpenHashSet(Arrays.asList(1, 2, 3, 4, 5, 6));
    private final List<Tag> list;
    private byte type;
 
-   private ListTag(List<Tag> var1, byte var2) {
+   ListTag(List<Tag> var1, byte var2) {
       this.list = var1;
       this.type = var2;
    }
 
    public ListTag() {
@@ -87,21 +81,11 @@
    public TagType<ListTag> getType() {
       return TYPE;
    }
 
    public String toString() {
-      StringBuilder var1 = new StringBuilder("[");
-
-      for(int var2 = 0; var2 < this.list.size(); ++var2) {
-         if (var2 != 0) {
-            var1.append(',');
-         }
-
-         var1.append(this.list.get(var2));
-      }
-
-      return var1.append(']').toString();
+      return this.getAsString();
    }
 
    private void updateTypeAfterRemove() {
       if (this.list.isEmpty()) {
          this.type = 0;
@@ -172,10 +156,21 @@
       }
 
       return new int[0];
    }
 
+   public long[] getLongArray(int var1) {
+      if (var1 >= 0 && var1 < this.list.size()) {
+         Tag var2 = (Tag)this.list.get(var1);
+         if (var2.getId() == 11) {
+            return ((LongArrayTag)var2).getAsLongArray();
+         }
+      }
+
+      return new long[0];
+   }
+
    public double getDouble(int var1) {
       if (var1 >= 0 && var1 < this.list.size()) {
          Tag var2 = (Tag)this.list.get(var1);
          if (var2.getId() == 6) {
             return ((DoubleTag)var2).getAsDouble();
@@ -273,55 +268,12 @@
 
    public int hashCode() {
       return this.list.hashCode();
    }
 
-   public Component getPrettyDisplay(String var1, int var2) {
-      if (this.isEmpty()) {
-         return new TextComponent("[]");
-      } else {
-         int var5;
-         if (INLINE_ELEMENT_TYPES.contains(this.type) && this.size() <= 8) {
-            String var7 = ", ";
-            TextComponent var8 = new TextComponent("[");
-
-            for(var5 = 0; var5 < this.list.size(); ++var5) {
-               if (var5 != 0) {
-                  var8.append(", ");
-               }
-
-               var8.append(((Tag)this.list.get(var5)).getPrettyDisplay());
-            }
-
-            var8.append("]");
-            return var8;
-         } else {
-            TextComponent var3 = new TextComponent("[");
-            if (!var1.isEmpty()) {
-               var3.append("\n");
-            }
-
-            String var4 = String.valueOf(',');
-
-            for(var5 = 0; var5 < this.list.size(); ++var5) {
-               TextComponent var6 = new TextComponent(Strings.repeat(var1, var2 + 1));
-               var6.append(((Tag)this.list.get(var5)).getPrettyDisplay(var1, var2 + 1));
-               if (var5 != this.list.size() - 1) {
-                  var6.append(var4).append(var1.isEmpty() ? " " : "\n");
-               }
-
-               var3.append((Component)var6);
-            }
-
-            if (!var1.isEmpty()) {
-               var3.append("\n").append(Strings.repeat(var1, var2));
-            }
-
-            var3.append("]");
-            return var3;
-         }
-      }
+   public void accept(TagVisitor var1) {
+      var1.visitList(this);
    }
 
    public byte getElementType() {
       return this.type;
    }
