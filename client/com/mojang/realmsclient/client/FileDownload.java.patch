--- com/mojang/realmsclient/client/FileDownload.java
+++ com/mojang/realmsclient/client/FileDownload.java
@@ -92,39 +92,39 @@
       if (this.currentThread == null) {
          this.currentThread = new Thread(() -> {
             CloseableHttpClient var5 = null;
             boolean var90 = false;
 
-            label1408: {
-               CloseableHttpResponse var6;
-               FileOutputStream var7;
-               FileDownload.DownloadCountingOutputStream var9;
-               FileDownload.ResourcePackProgressListener var106;
-               label1402: {
+            CloseableHttpResponse var6;
+            FileOutputStream var7;
+            FileDownload.DownloadCountingOutputStream var9;
+            FileDownload.ResourcePackProgressListener var106;
+            label1376: {
+               label1397: {
                   try {
                      var90 = true;
                      this.tempFile = File.createTempFile("backup", ".tar.gz");
                      this.request = new HttpGet(var1.downloadLink);
                      var5 = HttpClientBuilder.create().setDefaultRequestConfig(this.requestConfig).build();
                      var6 = var5.execute(this.request);
                      var3.totalBytes = Long.parseLong(var6.getFirstHeader("Content-Length").getValue());
-                     if (var6.getStatusLine().getStatusCode() != 200) {
-                        this.error = true;
-                        this.request.abort();
+                     if (var6.getStatusLine().getStatusCode() == 200) {
+                        var7 = new FileOutputStream(this.tempFile);
+                        FileDownload.ProgressListener var8 = new FileDownload.ProgressListener(var2.trim(), this.tempFile, var4, var3);
+                        var9 = new FileDownload.DownloadCountingOutputStream(var7);
+                        var9.setListener(var8);
+                        IOUtils.copy(var6.getEntity().getContent(), var9);
                         var90 = false;
-                        break label1408;
+                        break label1376;
                      }
 
-                     var7 = new FileOutputStream(this.tempFile);
-                     FileDownload.ProgressListener var8 = new FileDownload.ProgressListener(var2.trim(), this.tempFile, var4, var3);
-                     var9 = new FileDownload.DownloadCountingOutputStream(var7);
-                     var9.setListener(var8);
-                     IOUtils.copy(var6.getEntity().getContent(), var9);
+                     this.error = true;
+                     this.request.abort();
                      var90 = false;
-                     break label1402;
+                     break label1397;
                   } catch (Exception var103) {
-                     LOGGER.error("Caught exception while downloading: " + var103.getMessage());
+                     LOGGER.error("Caught exception while downloading: {}", var103.getMessage());
                      this.error = true;
                      var90 = false;
                   } finally {
                      if (var90) {
                         this.request.releaseConnection();
@@ -149,11 +149,11 @@
                                  FileDownload.ResourcePackProgressListener var17 = new FileDownload.ResourcePackProgressListener(this.tempFile, var3, var1);
                                  FileDownload.DownloadCountingOutputStream var18 = new FileDownload.DownloadCountingOutputStream(var16);
                                  var18.setListener(var17);
                                  IOUtils.copy(var15.getEntity().getContent(), var18);
                               } catch (Exception var95) {
-                                 LOGGER.error("Caught exception while downloading: " + var95.getMessage());
+                                 LOGGER.error("Caught exception while downloading: {}", var95.getMessage());
                                  this.error = true;
                               } finally {
                                  this.request.releaseConnection();
                                  if (this.tempFile != null) {
                                     this.tempFile.delete();
@@ -198,11 +198,11 @@
                            var106 = new FileDownload.ResourcePackProgressListener(this.tempFile, var3, var1);
                            var9 = new FileDownload.DownloadCountingOutputStream(var7);
                            var9.setListener(var106);
                            IOUtils.copy(var6.getEntity().getContent(), var9);
                         } catch (Exception var99) {
-                           LOGGER.error("Caught exception while downloading: " + var99.getMessage());
+                           LOGGER.error("Caught exception while downloading: {}", var99.getMessage());
                            this.error = true;
                         } finally {
                            this.request.releaseConnection();
                            if (this.tempFile != null) {
                               this.tempFile.delete();
@@ -232,45 +232,50 @@
                   this.tempFile.delete();
                }
 
                if (!this.error) {
                   if (!var1.resourcePackUrl.isEmpty() && !var1.resourcePackHash.isEmpty()) {
-                     try {
-                        this.tempFile = File.createTempFile("resources", ".tar.gz");
-                        this.request = new HttpGet(var1.resourcePackUrl);
-                        var6 = var5.execute(this.request);
-                        var3.totalBytes = Long.parseLong(var6.getFirstHeader("Content-Length").getValue());
-                        if (var6.getStatusLine().getStatusCode() != 200) {
+                     label1316: {
+                        try {
+                           this.tempFile = File.createTempFile("resources", ".tar.gz");
+                           this.request = new HttpGet(var1.resourcePackUrl);
+                           CloseableHttpResponse var105 = var5.execute(this.request);
+                           var3.totalBytes = Long.parseLong(var105.getFirstHeader("Content-Length").getValue());
+                           if (var105.getStatusLine().getStatusCode() == 200) {
+                              FileOutputStream var107 = new FileOutputStream(this.tempFile);
+                              FileDownload.ResourcePackProgressListener var108 = new FileDownload.ResourcePackProgressListener(this.tempFile, var3, var1);
+                              FileDownload.DownloadCountingOutputStream var10 = new FileDownload.DownloadCountingOutputStream(var107);
+                              var10.setListener(var108);
+                              IOUtils.copy(var105.getEntity().getContent(), var10);
+                              break label1316;
+                           }
+
                            this.error = true;
                            this.request.abort();
-                           return;
-                        }
+                        } catch (Exception var97) {
+                           LOGGER.error("Caught exception while downloading: {}", var97.getMessage());
+                           this.error = true;
+                           break label1316;
+                        } finally {
+                           this.request.releaseConnection();
+                           if (this.tempFile != null) {
+                              this.tempFile.delete();
+                           }
 
-                        var7 = new FileOutputStream(this.tempFile);
-                        var106 = new FileDownload.ResourcePackProgressListener(this.tempFile, var3, var1);
-                        var9 = new FileDownload.DownloadCountingOutputStream(var7);
-                        var9.setListener(var106);
-                        IOUtils.copy(var6.getEntity().getContent(), var9);
-                     } catch (Exception var101) {
-                        LOGGER.error("Caught exception while downloading: " + var101.getMessage());
-                        this.error = true;
-                     } finally {
-                        this.request.releaseConnection();
-                        if (this.tempFile != null) {
-                           this.tempFile.delete();
                         }
 
+                        return;
                      }
                   } else {
                      this.finished = true;
                   }
                }
 
                if (var5 != null) {
                   try {
                      var5.close();
-                  } catch (IOException var94) {
+                  } catch (IOException var92) {
                      LOGGER.error("Failed to close Realms download client");
                   }
                }
 
                return;
@@ -284,25 +289,25 @@
             if (!this.error) {
                if (!var1.resourcePackUrl.isEmpty() && !var1.resourcePackHash.isEmpty()) {
                   try {
                      this.tempFile = File.createTempFile("resources", ".tar.gz");
                      this.request = new HttpGet(var1.resourcePackUrl);
-                     CloseableHttpResponse var105 = var5.execute(this.request);
-                     var3.totalBytes = Long.parseLong(var105.getFirstHeader("Content-Length").getValue());
-                     if (var105.getStatusLine().getStatusCode() != 200) {
+                     var6 = var5.execute(this.request);
+                     var3.totalBytes = Long.parseLong(var6.getFirstHeader("Content-Length").getValue());
+                     if (var6.getStatusLine().getStatusCode() != 200) {
                         this.error = true;
                         this.request.abort();
                         return;
                      }
 
-                     FileOutputStream var107 = new FileOutputStream(this.tempFile);
-                     FileDownload.ResourcePackProgressListener var108 = new FileDownload.ResourcePackProgressListener(this.tempFile, var3, var1);
-                     FileDownload.DownloadCountingOutputStream var10 = new FileDownload.DownloadCountingOutputStream(var107);
-                     var10.setListener(var108);
-                     IOUtils.copy(var105.getEntity().getContent(), var10);
-                  } catch (Exception var97) {
-                     LOGGER.error("Caught exception while downloading: " + var97.getMessage());
+                     var7 = new FileOutputStream(this.tempFile);
+                     var106 = new FileDownload.ResourcePackProgressListener(this.tempFile, var3, var1);
+                     var9 = new FileDownload.DownloadCountingOutputStream(var7);
+                     var9.setListener(var106);
+                     IOUtils.copy(var6.getEntity().getContent(), var9);
+                  } catch (Exception var101) {
+                     LOGGER.error("Caught exception while downloading: {}", var101.getMessage());
                      this.error = true;
                   } finally {
                      this.request.releaseConnection();
                      if (this.tempFile != null) {
                         this.tempFile.delete();
@@ -315,11 +320,11 @@
             }
 
             if (var5 != null) {
                try {
                   var5.close();
-               } catch (IOException var92) {
+               } catch (IOException var94) {
                   LOGGER.error("Failed to close Realms download client");
                }
             }
 
          });
@@ -650,16 +655,16 @@
                String var2 = Hashing.sha1().hashBytes(Files.toByteArray(this.tempFile)).toString();
                if (var2.equals(this.worldDownload.resourcePackHash)) {
                   FileUtils.copyFile(this.tempFile, FileDownload.this.resourcePackPath);
                   FileDownload.this.finished = true;
                } else {
-                  FileDownload.LOGGER.error("Resourcepack had wrong hash (expected " + this.worldDownload.resourcePackHash + ", found " + var2 + "). Deleting it.");
+                  FileDownload.LOGGER.error("Resourcepack had wrong hash (expected {}, found {}). Deleting it.", this.worldDownload.resourcePackHash, var2);
                   FileUtils.deleteQuietly(this.tempFile);
                   FileDownload.this.error = true;
                }
             } catch (IOException var3) {
-               FileDownload.LOGGER.error("Error copying resourcepack file", var3.getMessage());
+               FileDownload.LOGGER.error("Error copying resourcepack file: {}", var3.getMessage());
                FileDownload.this.error = true;
             }
          }
 
       }
