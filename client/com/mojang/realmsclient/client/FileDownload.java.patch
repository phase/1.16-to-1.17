--- com/mojang/realmsclient/client/FileDownload.java
+++ com/mojang/realmsclient/client/FileDownload.java
@@ -39,17 +39,17 @@
 import org.apache.http.impl.client.HttpClientBuilder;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class FileDownload {
-   private static final Logger LOGGER = LogManager.getLogger();
-   private volatile boolean cancelled;
-   private volatile boolean finished;
-   private volatile boolean error;
-   private volatile boolean extracting;
+   static final Logger LOGGER = LogManager.getLogger();
+   volatile boolean cancelled;
+   volatile boolean finished;
+   volatile boolean error;
+   volatile boolean extracting;
    private volatile File tempFile;
-   private volatile File resourcePackPath;
+   volatile File resourcePackPath;
    private volatile HttpGet request;
    private Thread currentThread;
    private final RequestConfig requestConfig = RequestConfig.custom().setSocketTimeout(120000).setConnectTimeout(120000).build();
    private static final String[] INVALID_FILE_NAMES = new String[]{"CON", "COM", "PRN", "AUX", "CLOCK$", "NUL", "COM1", "COM2", "COM3", "COM4", "COM5", "COM6", "COM7", "COM8", "COM9", "LPT1", "LPT2", "LPT3", "LPT4", "LPT5", "LPT6", "LPT7", "LPT8", "LPT9"};
 
@@ -120,11 +120,11 @@
                      var9.setListener(var8);
                      IOUtils.copy(var6.getEntity().getContent(), var9);
                      var90 = false;
                      break label1403;
                   } catch (Exception var103) {
-                     LOGGER.error("Caught exception while downloading: " + var103.getMessage());
+                     LOGGER.error("Caught exception while downloading: {}", var103.getMessage());
                      this.error = true;
                      var90 = false;
                   } finally {
                      if (var90) {
                         this.request.releaseConnection();
@@ -149,11 +149,11 @@
                                  FileDownload.ResourcePackProgressListener var17 = new FileDownload.ResourcePackProgressListener(this.tempFile, var3, var1);
                                  FileDownload.DownloadCountingOutputStream var18 = new FileDownload.DownloadCountingOutputStream(var16);
                                  var18.setListener(var17);
                                  IOUtils.copy(var15.getEntity().getContent(), var18);
                               } catch (Exception var95) {
-                                 LOGGER.error("Caught exception while downloading: " + var95.getMessage());
+                                 LOGGER.error("Caught exception while downloading: {}", var95.getMessage());
                                  this.error = true;
                               } finally {
                                  this.request.releaseConnection();
                                  if (this.tempFile != null) {
                                     this.tempFile.delete();
@@ -198,11 +198,11 @@
                            var106 = new FileDownload.ResourcePackProgressListener(this.tempFile, var3, var1);
                            var9 = new FileDownload.DownloadCountingOutputStream(var7);
                            var9.setListener(var106);
                            IOUtils.copy(var6.getEntity().getContent(), var9);
                         } catch (Exception var99) {
-                           LOGGER.error("Caught exception while downloading: " + var99.getMessage());
+                           LOGGER.error("Caught exception while downloading: {}", var99.getMessage());
                            this.error = true;
                         } finally {
                            this.request.releaseConnection();
                            if (this.tempFile != null) {
                               this.tempFile.delete();
@@ -249,11 +249,11 @@
                         var106 = new FileDownload.ResourcePackProgressListener(this.tempFile, var3, var1);
                         var9 = new FileDownload.DownloadCountingOutputStream(var7);
                         var9.setListener(var106);
                         IOUtils.copy(var6.getEntity().getContent(), var9);
                      } catch (Exception var101) {
-                        LOGGER.error("Caught exception while downloading: " + var101.getMessage());
+                        LOGGER.error("Caught exception while downloading: {}", var101.getMessage());
                         this.error = true;
                      } finally {
                         this.request.releaseConnection();
                         if (this.tempFile != null) {
                            this.tempFile.delete();
@@ -298,11 +298,11 @@
                      FileDownload.ResourcePackProgressListener var108 = new FileDownload.ResourcePackProgressListener(this.tempFile, var3, var1);
                      FileDownload.DownloadCountingOutputStream var10 = new FileDownload.DownloadCountingOutputStream(var107);
                      var10.setListener(var108);
                      IOUtils.copy(var105.getEntity().getContent(), var10);
                   } catch (Exception var97) {
-                     LOGGER.error("Caught exception while downloading: " + var97.getMessage());
+                     LOGGER.error("Caught exception while downloading: {}", var97.getMessage());
                      this.error = true;
                   } finally {
                      this.request.releaseConnection();
                      if (this.tempFile != null) {
                         this.tempFile.delete();
@@ -365,11 +365,11 @@
       }
 
       return var0;
    }
 
-   private void untarGzipArchive(String var1, File var2, LevelStorageSource var3) throws IOException {
+   void untarGzipArchive(String var1, File var2, LevelStorageSource var3) throws IOException {
       Pattern var4 = Pattern.compile(".*-([0-9]+)$");
       int var6 = 1;
       char[] var7 = SharedConstants.ILLEGAL_FILE_CHARACTERS;
       int var8 = var7.length;
 
@@ -383,221 +383,204 @@
       }
 
       var1 = findAvailableFolderName(var1);
 
       try {
-         Iterator var146 = var3.getLevelList().iterator();
+         Iterator var47 = var3.getLevelList().iterator();
 
-         while(var146.hasNext()) {
-            LevelSummary var148 = (LevelSummary)var146.next();
-            if (var148.getLevelId().toLowerCase(Locale.ROOT).startsWith(var1.toLowerCase(Locale.ROOT))) {
-               Matcher var151 = var4.matcher(var148.getLevelId());
-               if (var151.matches()) {
-                  if (Integer.valueOf(var151.group(1)) > var6) {
-                     var6 = Integer.valueOf(var151.group(1));
+         while(var47.hasNext()) {
+            LevelSummary var49 = (LevelSummary)var47.next();
+            if (var49.getLevelId().toLowerCase(Locale.ROOT).startsWith(var1.toLowerCase(Locale.ROOT))) {
+               Matcher var52 = var4.matcher(var49.getLevelId());
+               if (var52.matches()) {
+                  if (Integer.valueOf(var52.group(1)) > var6) {
+                     var6 = Integer.valueOf(var52.group(1));
                   }
                } else {
                   ++var6;
                }
             }
          }
-      } catch (Exception var145) {
-         LOGGER.error("Error getting level list", var145);
+      } catch (Exception var46) {
+         LOGGER.error("Error getting level list", var46);
          this.error = true;
          return;
       }
 
       String var5;
       if (var3.isNewLevelIdAcceptable(var1) && var6 <= 1) {
          var5 = var1;
       } else {
          var5 = var1 + (var6 == 1 ? "" : "-" + var6);
          if (!var3.isNewLevelIdAcceptable(var5)) {
-            boolean var147 = false;
+            boolean var48 = false;
 
-            while(!var147) {
+            while(!var48) {
                ++var6;
                var5 = var1 + (var6 == 1 ? "" : "-" + var6);
                if (var3.isNewLevelIdAcceptable(var5)) {
-                  var147 = true;
+                  var48 = true;
                }
             }
          }
       }
 
-      TarArchiveInputStream var149 = null;
-      File var150 = new File(Minecraft.getInstance().gameDirectory.getAbsolutePath(), "saves");
-      boolean var108 = false;
+      TarArchiveInputStream var50 = null;
+      File var51 = new File(Minecraft.getInstance().gameDirectory.getAbsolutePath(), "saves");
+      boolean var32 = false;
 
-      LevelStorageSource.LevelStorageAccess var154;
-      Throwable var155;
-      Path var156;
-      label1421: {
+      LevelStorageSource.LevelStorageAccess var55;
+      Path var56;
+      label453: {
          try {
-            var108 = true;
-            var150.mkdir();
-            var149 = new TarArchiveInputStream(new GzipCompressorInputStream(new BufferedInputStream(new FileInputStream(var2))));
+            var32 = true;
+            var51.mkdir();
+            var50 = new TarArchiveInputStream(new GzipCompressorInputStream(new BufferedInputStream(new FileInputStream(var2))));
 
-            for(TarArchiveEntry var152 = var149.getNextTarEntry(); var152 != null; var152 = var149.getNextTarEntry()) {
-               File var153 = new File(var150, var152.getName().replace("world", var5));
-               if (var152.isDirectory()) {
-                  var153.mkdirs();
+            for(TarArchiveEntry var53 = var50.getNextTarEntry(); var53 != null; var53 = var50.getNextTarEntry()) {
+               File var54 = new File(var51, var53.getName().replace("world", var5));
+               if (var53.isDirectory()) {
+                  var54.mkdirs();
                } else {
-                  var153.createNewFile();
-                  FileOutputStream var11 = new FileOutputStream(var153);
-                  Throwable var12 = null;
+                  var54.createNewFile();
+                  FileOutputStream var11 = new FileOutputStream(var54);
 
                   try {
-                     IOUtils.copy(var149, var11);
-                  } catch (Throwable var135) {
-                     var12 = var135;
-                     throw var135;
-                  } finally {
-                     if (var11 != null) {
-                        if (var12 != null) {
-                           try {
-                              var11.close();
-                           } catch (Throwable var132) {
-                              var12.addSuppressed(var132);
-                           }
-                        } else {
-                           var11.close();
-                        }
+                     IOUtils.copy(var50, var11);
+                  } catch (Throwable var37) {
+                     try {
+                        var11.close();
+                     } catch (Throwable var35) {
+                        var37.addSuppressed(var35);
                      }
 
+                     throw var37;
                   }
+
+                  var11.close();
                }
             }
 
-            var108 = false;
-            break label1421;
-         } catch (Exception var143) {
-            LOGGER.error("Error extracting world", var143);
+            var32 = false;
+            break label453;
+         } catch (Exception var44) {
+            LOGGER.error("Error extracting world", var44);
             this.error = true;
-            var108 = false;
+            var32 = false;
          } finally {
-            if (var108) {
-               if (var149 != null) {
-                  var149.close();
+            if (var32) {
+               if (var50 != null) {
+                  var50.close();
                }
 
                if (var2 != null) {
                   var2.delete();
                }
 
                try {
-                  LevelStorageSource.LevelStorageAccess var21 = var3.createAccess(var5);
-                  Throwable var22 = null;
+                  LevelStorageSource.LevelStorageAccess var15 = var3.createAccess(var5);
 
                   try {
-                     var21.renameLevel(var5.trim());
-                     Path var23 = var21.getLevelPath(LevelResource.LEVEL_DATA_FILE);
-                     deletePlayerTag(var23.toFile());
-                  } catch (Throwable var129) {
-                     var22 = var129;
-                     throw var129;
-                  } finally {
-                     if (var21 != null) {
-                        if (var22 != null) {
-                           try {
-                              var21.close();
-                           } catch (Throwable var128) {
-                              var22.addSuppressed(var128);
-                           }
-                        } else {
-                           var21.close();
+                     var15.renameLevel(var5.trim());
+                     Path var16 = var15.getLevelPath(LevelResource.LEVEL_DATA_FILE);
+                     deletePlayerTag(var16.toFile());
+                  } catch (Throwable var38) {
+                     if (var15 != null) {
+                        try {
+                           var15.close();
+                        } catch (Throwable var33) {
+                           var38.addSuppressed(var33);
                         }
                      }
 
+                     throw var38;
                   }
-               } catch (IOException var137) {
-                  LOGGER.error("Failed to rename unpacked realms level {}", var5, var137);
+
+                  if (var15 != null) {
+                     var15.close();
+                  }
+               } catch (IOException var39) {
+                  LOGGER.error("Failed to rename unpacked realms level {}", var5, var39);
                }
 
-               this.resourcePackPath = new File(var150, var5 + File.separator + "resources.zip");
+               this.resourcePackPath = new File(var51, var5 + File.separator + "resources.zip");
             }
          }
 
-         if (var149 != null) {
-            var149.close();
+         if (var50 != null) {
+            var50.close();
          }
 
          if (var2 != null) {
             var2.delete();
          }
 
          try {
-            var154 = var3.createAccess(var5);
-            var155 = null;
+            var55 = var3.createAccess(var5);
 
             try {
-               var154.renameLevel(var5.trim());
-               var156 = var154.getLevelPath(LevelResource.LEVEL_DATA_FILE);
-               deletePlayerTag(var156.toFile());
-            } catch (Throwable var131) {
-               var155 = var131;
-               throw var131;
-            } finally {
-               if (var154 != null) {
-                  if (var155 != null) {
-                     try {
-                        var154.close();
-                     } catch (Throwable var130) {
-                        var155.addSuppressed(var130);
-                     }
-                  } else {
-                     var154.close();
+               var55.renameLevel(var5.trim());
+               var56 = var55.getLevelPath(LevelResource.LEVEL_DATA_FILE);
+               deletePlayerTag(var56.toFile());
+            } catch (Throwable var40) {
+               if (var55 != null) {
+                  try {
+                     var55.close();
+                  } catch (Throwable var34) {
+                     var40.addSuppressed(var34);
                   }
                }
 
+               throw var40;
             }
-         } catch (IOException var139) {
-            LOGGER.error("Failed to rename unpacked realms level {}", var5, var139);
+
+            if (var55 != null) {
+               var55.close();
+            }
+         } catch (IOException var41) {
+            LOGGER.error("Failed to rename unpacked realms level {}", var5, var41);
          }
 
-         this.resourcePackPath = new File(var150, var5 + File.separator + "resources.zip");
+         this.resourcePackPath = new File(var51, var5 + File.separator + "resources.zip");
          return;
       }
 
-      if (var149 != null) {
-         var149.close();
+      if (var50 != null) {
+         var50.close();
       }
 
       if (var2 != null) {
          var2.delete();
       }
 
       try {
-         var154 = var3.createAccess(var5);
-         var155 = null;
+         var55 = var3.createAccess(var5);
 
          try {
-            var154.renameLevel(var5.trim());
-            var156 = var154.getLevelPath(LevelResource.LEVEL_DATA_FILE);
-            deletePlayerTag(var156.toFile());
-         } catch (Throwable var134) {
-            var155 = var134;
-            throw var134;
-         } finally {
-            if (var154 != null) {
-               if (var155 != null) {
-                  try {
-                     var154.close();
-                  } catch (Throwable var133) {
-                     var155.addSuppressed(var133);
-                  }
-               } else {
-                  var154.close();
+            var55.renameLevel(var5.trim());
+            var56 = var55.getLevelPath(LevelResource.LEVEL_DATA_FILE);
+            deletePlayerTag(var56.toFile());
+         } catch (Throwable var42) {
+            if (var55 != null) {
+               try {
+                  var55.close();
+               } catch (Throwable var36) {
+                  var42.addSuppressed(var36);
                }
             }
 
+            throw var42;
          }
-      } catch (IOException var142) {
-         LOGGER.error("Failed to rename unpacked realms level {}", var5, var142);
+
+         if (var55 != null) {
+            var55.close();
+         }
+      } catch (IOException var43) {
+         LOGGER.error("Failed to rename unpacked realms level {}", var5, var43);
       }
 
-      this.resourcePackPath = new File(var150, var5 + File.separator + "resources.zip");
+      this.resourcePackPath = new File(var51, var5 + File.separator + "resources.zip");
    }
 
    private static void deletePlayerTag(File var0) {
       if (var0.exists()) {
          try {
@@ -610,36 +593,16 @@
          }
       }
 
    }
 
-   class DownloadCountingOutputStream extends CountingOutputStream {
-      private ActionListener listener;
-
-      public DownloadCountingOutputStream(OutputStream var2) {
-         super(var2);
-      }
-
-      public void setListener(ActionListener var1) {
-         this.listener = var1;
-      }
-
-      protected void afterWrite(int var1) throws IOException {
-         super.afterWrite(var1);
-         if (this.listener != null) {
-            this.listener.actionPerformed(new ActionEvent(this, 0, (String)null));
-         }
-
-      }
-   }
-
    class ResourcePackProgressListener implements ActionListener {
       private final File tempFile;
       private final RealmsDownloadLatestWorldScreen.DownloadStatus downloadStatus;
       private final WorldDownload worldDownload;
 
-      private ResourcePackProgressListener(File var2, RealmsDownloadLatestWorldScreen.DownloadStatus var3, WorldDownload var4) {
+      ResourcePackProgressListener(File var2, RealmsDownloadLatestWorldScreen.DownloadStatus var3, WorldDownload var4) {
          this.tempFile = var2;
          this.downloadStatus = var3;
          this.worldDownload = var4;
       }
 
@@ -650,30 +613,50 @@
                String var2 = Hashing.sha1().hashBytes(Files.toByteArray(this.tempFile)).toString();
                if (var2.equals(this.worldDownload.resourcePackHash)) {
                   FileUtils.copyFile(this.tempFile, FileDownload.this.resourcePackPath);
                   FileDownload.this.finished = true;
                } else {
-                  FileDownload.LOGGER.error("Resourcepack had wrong hash (expected " + this.worldDownload.resourcePackHash + ", found " + var2 + "). Deleting it.");
+                  FileDownload.LOGGER.error("Resourcepack had wrong hash (expected {}, found {}). Deleting it.", this.worldDownload.resourcePackHash, var2);
                   FileUtils.deleteQuietly(this.tempFile);
                   FileDownload.this.error = true;
                }
             } catch (IOException var3) {
-               FileDownload.LOGGER.error("Error copying resourcepack file", var3.getMessage());
+               FileDownload.LOGGER.error("Error copying resourcepack file: {}", var3.getMessage());
                FileDownload.this.error = true;
             }
          }
 
       }
    }
 
-   class ProgressListener implements ActionListener {
+   private class DownloadCountingOutputStream extends CountingOutputStream {
+      private ActionListener listener;
+
+      public DownloadCountingOutputStream(OutputStream var2) {
+         super(var2);
+      }
+
+      public void setListener(ActionListener var1) {
+         this.listener = var1;
+      }
+
+      protected void afterWrite(int var1) throws IOException {
+         super.afterWrite(var1);
+         if (this.listener != null) {
+            this.listener.actionPerformed(new ActionEvent(this, 0, (String)null));
+         }
+
+      }
+   }
+
+   private class ProgressListener implements ActionListener {
       private final String worldName;
       private final File tempFile;
       private final LevelStorageSource levelStorageSource;
       private final RealmsDownloadLatestWorldScreen.DownloadStatus downloadStatus;
 
-      private ProgressListener(String var2, File var3, LevelStorageSource var4, RealmsDownloadLatestWorldScreen.DownloadStatus var5) {
+      ProgressListener(String var2, File var3, LevelStorageSource var4, RealmsDownloadLatestWorldScreen.DownloadStatus var5) {
          this.worldName = var2;
          this.tempFile = var3;
          this.levelStorageSource = var4;
          this.downloadStatus = var5;
       }
