--- com/mojang/realmsclient/util/RealmsTextureManager.java
+++ com/mojang/realmsclient/util/RealmsTextureManager.java
@@ -35,43 +35,38 @@
    private static final Logger LOGGER = LogManager.getLogger();
    private static final ResourceLocation TEMPLATE_ICON_LOCATION = new ResourceLocation("textures/gui/presets/isles.png");
 
    public static void bindWorldTemplate(String var0, @Nullable String var1) {
       if (var1 == null) {
-         Minecraft.getInstance().getTextureManager().bind(TEMPLATE_ICON_LOCATION);
+         RenderSystem.setShaderTexture(0, TEMPLATE_ICON_LOCATION);
       } else {
          int var2 = getTextureId(var0, var1);
-         RenderSystem.bindTexture(var2);
+         RenderSystem.setShaderTexture(0, var2);
       }
    }
 
    public static void withBoundFace(String var0, Runnable var1) {
-      RenderSystem.pushTextureAttributes();
-
-      try {
-         bindFace(var0);
-         var1.run();
-      } finally {
-         RenderSystem.popAttributes();
-      }
-
+      bindFace(var0);
+      var1.run();
    }
 
    private static void bindDefaultFace(UUID var0) {
-      Minecraft.getInstance().getTextureManager().bind(DefaultPlayerSkin.getDefaultSkin(var0));
+      RenderSystem.setShaderTexture(0, DefaultPlayerSkin.getDefaultSkin(var0));
    }
 
    private static void bindFace(final String var0) {
       UUID var1 = UUIDTypeAdapter.fromString(var0);
+      int var3;
       if (TEXTURES.containsKey(var0)) {
-         RenderSystem.bindTexture(((RealmsTextureManager.RealmsTexture)TEXTURES.get(var0)).textureId);
+         var3 = ((RealmsTextureManager.RealmsTexture)TEXTURES.get(var0)).textureId;
+         RenderSystem.setShaderTexture(0, var3);
       } else if (SKIN_FETCH_STATUS.containsKey(var0)) {
          if (!(Boolean)SKIN_FETCH_STATUS.get(var0)) {
             bindDefaultFace(var1);
          } else if (FETCHED_SKINS.containsKey(var0)) {
-            int var3 = getTextureId(var0, (String)FETCHED_SKINS.get(var0));
-            RenderSystem.bindTexture(var3);
+            var3 = getTextureId(var0, (String)FETCHED_SKINS.get(var0));
+            RenderSystem.setShaderTexture(0, var3);
          } else {
             bindDefaultFace(var1);
          }
 
       } else {
@@ -85,15 +80,20 @@
                   String var3 = var2.getUrl();
                   HttpURLConnection var4 = null;
                   RealmsTextureManager.LOGGER.debug("Downloading http texture from {}", var3);
 
                   try {
-                     var4 = (HttpURLConnection)(new URL(var3)).openConnection(Minecraft.getInstance().getProxy());
-                     var4.setDoInput(true);
-                     var4.setDoOutput(false);
-                     var4.connect();
-                     if (var4.getResponseCode() / 100 == 2) {
+                     try {
+                        var4 = (HttpURLConnection)(new URL(var3)).openConnection(Minecraft.getInstance().getProxy());
+                        var4.setDoInput(true);
+                        var4.setDoOutput(false);
+                        var4.connect();
+                        if (var4.getResponseCode() / 100 != 2) {
+                           RealmsTextureManager.SKIN_FETCH_STATUS.remove(var0);
+                           return;
+                        }
+
                         BufferedImage var5;
                         try {
                            var5 = ImageIO.read(var4.getInputStream());
                         } catch (Exception var17) {
                            RealmsTextureManager.SKIN_FETCH_STATUS.remove(var0);
@@ -105,25 +105,21 @@
                         var5 = (new SkinProcessor()).process(var5);
                         ByteArrayOutputStream var6 = new ByteArrayOutputStream();
                         ImageIO.write(var5, "png", var6);
                         RealmsTextureManager.FETCHED_SKINS.put(var0, (new Base64()).encodeToString(var6.toByteArray()));
                         RealmsTextureManager.SKIN_FETCH_STATUS.put(var0, true);
-                        return;
+                     } catch (Exception var19) {
+                        RealmsTextureManager.LOGGER.error("Couldn't download http texture", var19);
+                        RealmsTextureManager.SKIN_FETCH_STATUS.remove(var0);
                      }
 
-                     RealmsTextureManager.SKIN_FETCH_STATUS.remove(var0);
-                  } catch (Exception var19) {
-                     RealmsTextureManager.LOGGER.error("Couldn't download http texture", var19);
-                     RealmsTextureManager.SKIN_FETCH_STATUS.remove(var0);
-                     return;
                   } finally {
                      if (var4 != null) {
                         var4.disconnect();
                      }
 
                   }
-
                } else {
                   RealmsTextureManager.SKIN_FETCH_STATUS.put(var0, true);
                }
             }
          };
@@ -170,11 +166,11 @@
       } catch (IOException var12) {
          var12.printStackTrace();
       }
 
       RenderSystem.activeTexture(33984);
-      RenderSystem.bindTexture(var2);
+      RenderSystem.bindTextureForSetup(var2);
       TextureUtil.initTexture(var13, var4, var5);
       TEXTURES.put(var0, new RealmsTextureManager.RealmsTexture(var1, var2));
       return var2;
    }
 
