--- com/mojang/realmsclient/util/RealmsTextureManager.java
+++ com/mojang/realmsclient/util/RealmsTextureManager.java
@@ -28,50 +28,48 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class RealmsTextureManager {
    private static final Map<String, RealmsTextureManager.RealmsTexture> TEXTURES = Maps.newHashMap();
-   private static final Map<String, Boolean> SKIN_FETCH_STATUS = Maps.newHashMap();
-   private static final Map<String, String> FETCHED_SKINS = Maps.newHashMap();
-   private static final Logger LOGGER = LogManager.getLogger();
+   static final Map<String, Boolean> SKIN_FETCH_STATUS = Maps.newHashMap();
+   static final Map<String, String> FETCHED_SKINS = Maps.newHashMap();
+   static final Logger LOGGER = LogManager.getLogger();
    private static final ResourceLocation TEMPLATE_ICON_LOCATION = new ResourceLocation("textures/gui/presets/isles.png");
 
+   public RealmsTextureManager() {
+   }
+
    public static void bindWorldTemplate(String var0, @Nullable String var1) {
       if (var1 == null) {
-         Minecraft.getInstance().getTextureManager().bind(TEMPLATE_ICON_LOCATION);
+         RenderSystem.setShaderTexture(0, TEMPLATE_ICON_LOCATION);
       } else {
          int var2 = getTextureId(var0, var1);
-         RenderSystem.bindTexture(var2);
+         RenderSystem.setShaderTexture(0, var2);
       }
    }
 
    public static void withBoundFace(String var0, Runnable var1) {
-      RenderSystem.pushTextureAttributes();
-
-      try {
-         bindFace(var0);
-         var1.run();
-      } finally {
-         RenderSystem.popAttributes();
-      }
-
+      bindFace(var0);
+      var1.run();
    }
 
    private static void bindDefaultFace(UUID var0) {
-      Minecraft.getInstance().getTextureManager().bind(DefaultPlayerSkin.getDefaultSkin(var0));
+      RenderSystem.setShaderTexture(0, DefaultPlayerSkin.getDefaultSkin(var0));
    }
 
    private static void bindFace(final String var0) {
       UUID var1 = UUIDTypeAdapter.fromString(var0);
+      int var3;
       if (TEXTURES.containsKey(var0)) {
-         RenderSystem.bindTexture(((RealmsTextureManager.RealmsTexture)TEXTURES.get(var0)).textureId);
+         var3 = ((RealmsTextureManager.RealmsTexture)TEXTURES.get(var0)).textureId;
+         RenderSystem.setShaderTexture(0, var3);
       } else if (SKIN_FETCH_STATUS.containsKey(var0)) {
          if (!(Boolean)SKIN_FETCH_STATUS.get(var0)) {
             bindDefaultFace(var1);
          } else if (FETCHED_SKINS.containsKey(var0)) {
-            int var3 = getTextureId(var0, (String)FETCHED_SKINS.get(var0));
-            RenderSystem.bindTexture(var3);
+            var3 = getTextureId(var0, (String)FETCHED_SKINS.get(var0));
+            RenderSystem.setShaderTexture(0, var3);
          } else {
             bindDefaultFace(var1);
          }
 
       } else {
@@ -131,58 +129,57 @@
          var2.start();
       }
    }
 
    private static int getTextureId(String var0, String var1) {
-      int var2;
-      if (TEXTURES.containsKey(var0)) {
-         RealmsTextureManager.RealmsTexture var3 = (RealmsTextureManager.RealmsTexture)TEXTURES.get(var0);
-         if (var3.image.equals(var1)) {
-            return var3.textureId;
+      RealmsTextureManager.RealmsTexture var2 = (RealmsTextureManager.RealmsTexture)TEXTURES.get(var0);
+      if (var2 != null && var2.image.equals(var1)) {
+         return var2.textureId;
+      } else {
+         int var3;
+         if (var2 != null) {
+            var3 = var2.textureId;
+         } else {
+            var3 = GlStateManager._genTexture();
          }
 
-         RenderSystem.deleteTexture(var3.textureId);
-         var2 = var3.textureId;
-      } else {
-         var2 = GlStateManager._genTexture();
-      }
+         IntBuffer var4 = null;
+         int var5 = 0;
+         int var6 = 0;
 
-      IntBuffer var13 = null;
-      int var4 = 0;
-      int var5 = 0;
+         try {
+            ByteArrayInputStream var8 = new ByteArrayInputStream((new Base64()).decode(var1));
 
-      try {
-         ByteArrayInputStream var7 = new ByteArrayInputStream((new Base64()).decode(var1));
+            BufferedImage var7;
+            try {
+               var7 = ImageIO.read(var8);
+            } finally {
+               IOUtils.closeQuietly(var8);
+            }
 
-         BufferedImage var6;
-         try {
-            var6 = ImageIO.read(var7);
-         } finally {
-            IOUtils.closeQuietly(var7);
+            var5 = var7.getWidth();
+            var6 = var7.getHeight();
+            int[] var9 = new int[var5 * var6];
+            var7.getRGB(0, 0, var5, var6, var9, 0, var5);
+            var4 = ByteBuffer.allocateDirect(4 * var5 * var6).order(ByteOrder.nativeOrder()).asIntBuffer();
+            var4.put(var9);
+            var4.flip();
+         } catch (IOException var13) {
+            var13.printStackTrace();
          }
 
-         var4 = var6.getWidth();
-         var5 = var6.getHeight();
-         int[] var8 = new int[var4 * var5];
-         var6.getRGB(0, 0, var4, var5, var8, 0, var4);
-         var13 = ByteBuffer.allocateDirect(4 * var4 * var5).order(ByteOrder.nativeOrder()).asIntBuffer();
-         var13.put(var8);
-         var13.flip();
-      } catch (IOException var12) {
-         var12.printStackTrace();
+         RenderSystem.activeTexture(33984);
+         RenderSystem.bindTextureForSetup(var3);
+         TextureUtil.initTexture(var4, var5, var6);
+         TEXTURES.put(var0, new RealmsTextureManager.RealmsTexture(var1, var3));
+         return var3;
       }
-
-      RenderSystem.activeTexture(33984);
-      RenderSystem.bindTexture(var2);
-      TextureUtil.initTexture(var13, var4, var5);
-      TEXTURES.put(var0, new RealmsTextureManager.RealmsTexture(var1, var2));
-      return var2;
    }
 
    public static class RealmsTexture {
-      private final String image;
-      private final int textureId;
+      final String image;
+      final int textureId;
 
       public RealmsTexture(String var1, int var2) {
          this.image = var1;
          this.textureId = var2;
       }
