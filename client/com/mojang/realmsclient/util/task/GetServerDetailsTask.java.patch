--- com/mojang/realmsclient/util/task/GetServerDetailsTask.java
+++ com/mojang/realmsclient/util/task/GetServerDetailsTask.java
@@ -9,10 +9,14 @@
 import com.mojang.realmsclient.gui.screens.RealmsBrokenWorldScreen;
 import com.mojang.realmsclient.gui.screens.RealmsGenericErrorScreen;
 import com.mojang.realmsclient.gui.screens.RealmsLongConfirmationScreen;
 import com.mojang.realmsclient.gui.screens.RealmsLongRunningMcoTaskScreen;
 import com.mojang.realmsclient.gui.screens.RealmsTermsScreen;
+import it.unimi.dsi.fastutil.booleans.BooleanConsumer;
+import java.util.concurrent.CancellationException;
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.TimeoutException;
 import java.util.concurrent.locks.ReentrantLock;
 import java.util.function.Function;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.screens.Screen;
 import net.minecraft.network.chat.TextComponent;
@@ -31,104 +35,101 @@
       this.connectLock = var4;
    }
 
    public void run() {
       this.setTitle(new TranslatableComponent("mco.connect.connecting"));
-      RealmsClient var1 = RealmsClient.create();
-      boolean var2 = false;
-      boolean var3 = false;
-      int var4 = 5;
-      RealmsServerAddress var5 = null;
-      boolean var6 = false;
-      boolean var7 = false;
 
-      for(int var8 = 0; var8 < 40 && !this.aborted(); ++var8) {
-         try {
-            var5 = var1.join(this.server.id);
-            var2 = true;
-         } catch (RetryCallException var11) {
-            var4 = var11.delaySeconds;
-         } catch (RealmsServiceException var12) {
-            if (var12.errorCode == 6002) {
-               var6 = true;
-            } else if (var12.errorCode == 6006) {
-               var7 = true;
-            } else {
-               var3 = true;
-               this.error(var12.toString());
-               LOGGER.error("Couldn't connect to world", var12);
-            }
-            break;
-         } catch (Exception var13) {
-            var3 = true;
-            LOGGER.error("Couldn't connect to world", var13);
-            this.error(var13.getLocalizedMessage());
-            break;
+      RealmsServerAddress var1;
+      try {
+         var1 = this.fetchServerAddress();
+      } catch (CancellationException var4) {
+         LOGGER.info("User aborted connecting to realms");
+         return;
+      } catch (RealmsServiceException var5) {
+         switch(var5.errorCode) {
+         case 6002:
+            setScreen(new RealmsTermsScreen(this.lastScreen, this.mainScreen, this.server));
+            return;
+         case 6006:
+            boolean var3 = this.server.ownerUUID.equals(Minecraft.getInstance().getUser().getUuid());
+            setScreen((Screen)(var3 ? new RealmsBrokenWorldScreen(this.lastScreen, this.mainScreen, this.server.id, this.server.worldType == RealmsServer.WorldType.MINIGAME) : new RealmsGenericErrorScreen(new TranslatableComponent("mco.brokenworld.nonowner.title"), new TranslatableComponent("mco.brokenworld.nonowner.error"), this.lastScreen)));
+            return;
+         default:
+            this.error(var5.toString());
+            LOGGER.error("Couldn't connect to world", var5);
+            return;
          }
+      } catch (TimeoutException var6) {
+         this.error(new TranslatableComponent("mco.errorMessage.connectionFailure"));
+         return;
+      } catch (Exception var7) {
+         LOGGER.error("Couldn't connect to world", var7);
+         this.error(var7.getLocalizedMessage());
+         return;
+      }
 
-         if (var2) {
-            break;
+      boolean var2 = var1.resourcePackUrl != null && var1.resourcePackHash != null;
+      Object var8 = var2 ? this.resourcePackDownloadConfirmationScreen(var1, this::connectScreen) : this.connectScreen(var1);
+      setScreen((Screen)var8);
+   }
+
+   private RealmsServerAddress fetchServerAddress() throws RealmsServiceException, TimeoutException, CancellationException {
+      RealmsClient var1 = RealmsClient.create();
+      int var2 = 0;
+
+      while(var2 < 40) {
+         if (this.aborted()) {
+            throw new CancellationException();
          }
 
-         this.sleep(var4);
+         try {
+            return var1.join(this.server.id);
+         } catch (RetryCallException var4) {
+            pause((long)var4.delaySeconds);
+            ++var2;
+         }
       }
 
-      if (var6) {
-         setScreen(new RealmsTermsScreen(this.lastScreen, this.mainScreen, this.server));
-      } else if (var7) {
-         if (this.server.ownerUUID.equals(Minecraft.getInstance().getUser().getUuid())) {
-            setScreen(new RealmsBrokenWorldScreen(this.lastScreen, this.mainScreen, this.server.id, this.server.worldType == RealmsServer.WorldType.MINIGAME));
-         } else {
-            setScreen(new RealmsGenericErrorScreen(new TranslatableComponent("mco.brokenworld.nonowner.title"), new TranslatableComponent("mco.brokenworld.nonowner.error"), this.lastScreen));
-         }
-      } else if (!this.aborted() && !var3) {
-         if (var2) {
-            if (var5.resourcePackUrl != null && var5.resourcePackHash != null) {
-               TranslatableComponent var9 = new TranslatableComponent("mco.configure.world.resourcepack.question.line1");
-               TranslatableComponent var10 = new TranslatableComponent("mco.configure.world.resourcepack.question.line2");
-               setScreen(new RealmsLongConfirmationScreen((var2x) -> {
-                  try {
-                     if (var2x) {
-                        Function var3 = (var1) -> {
-                           Minecraft.getInstance().getClientPackSource().clearServerPack();
-                           LOGGER.error(var1);
-                           setScreen(new RealmsGenericErrorScreen(new TextComponent("Failed to download resource pack!"), this.lastScreen));
-                           return null;
-                        };
+      throw new TimeoutException();
+   }
 
-                        try {
-                           Minecraft.getInstance().getClientPackSource().downloadAndSelectResourcePack(var5.resourcePackUrl, var5.resourcePackHash).thenRun(() -> {
-                              this.setScreen(new RealmsLongRunningMcoTaskScreen(this.lastScreen, new ConnectTask(this.lastScreen, this.server, var5)));
-                           }).exceptionally(var3);
-                        } catch (Exception var8) {
-                           var3.apply(var8);
-                        }
-                     } else {
-                        setScreen(this.lastScreen);
-                     }
-                  } finally {
-                     if (this.connectLock != null && this.connectLock.isHeldByCurrentThread()) {
-                        this.connectLock.unlock();
-                     }
+   public RealmsLongRunningMcoTaskScreen connectScreen(RealmsServerAddress var1) {
+      return new RealmsLongRunningMcoTaskScreen(this.lastScreen, new ConnectTask(this.lastScreen, this.server, var1));
+   }
 
-                  }
+   private RealmsLongConfirmationScreen resourcePackDownloadConfirmationScreen(RealmsServerAddress var1, Function<RealmsServerAddress, Screen> var2) {
+      BooleanConsumer var3 = (var3x) -> {
+         try {
+            if (var3x) {
+               this.scheduleResourcePackDownload(var1).thenRun(() -> {
+                  setScreen((Screen)var2.apply(var1));
+               }).exceptionally((var1x) -> {
+                  Minecraft.getInstance().getClientPackSource().clearServerPack();
+                  LOGGER.error(var1x);
+                  setScreen(new RealmsGenericErrorScreen(new TextComponent("Failed to download resource pack!"), this.lastScreen));
+                  return null;
+               });
+               return;
+            }
 
-               }, RealmsLongConfirmationScreen.Type.Info, var9, var10, true));
-            } else {
-               this.setScreen(new RealmsLongRunningMcoTaskScreen(this.lastScreen, new ConnectTask(this.lastScreen, this.server, var5)));
+            setScreen(this.lastScreen);
+         } finally {
+            if (this.connectLock.isHeldByCurrentThread()) {
+               this.connectLock.unlock();
             }
-         } else {
-            this.error(new TranslatableComponent("mco.errorMessage.connectionFailure"));
+
          }
-      }
 
+      };
+      return new RealmsLongConfirmationScreen(var3, RealmsLongConfirmationScreen.Type.Info, new TranslatableComponent("mco.configure.world.resourcepack.question.line1"), new TranslatableComponent("mco.configure.world.resourcepack.question.line2"), true);
    }
 
-   private void sleep(int var1) {
+   private CompletableFuture<?> scheduleResourcePackDownload(RealmsServerAddress var1) {
       try {
-         Thread.sleep((long)(var1 * 1000));
-      } catch (InterruptedException var3) {
-         LOGGER.warn(var3.getLocalizedMessage());
+         return Minecraft.getInstance().getClientPackSource().downloadAndSelectResourcePack(var1.resourcePackUrl, var1.resourcePackHash, false);
+      } catch (Exception var4) {
+         CompletableFuture var3 = new CompletableFuture();
+         var3.completeExceptionally(var4);
+         return var3;
       }
-
    }
 }
