--- com/mojang/realmsclient/dto/RealmsServer.java
+++ com/mojang/realmsclient/dto/RealmsServer.java
@@ -89,11 +89,11 @@
          String var6 = "";
 
          try {
             var6 = RealmsUtil.uuidToName(var5);
          } catch (Exception var8) {
-            LOGGER.error("Could not get name for " + var5, var8);
+            LOGGER.error("Could not get name for {}", var5, var8);
             continue;
          }
 
          var2.add(var6);
          ++var3;
@@ -131,11 +131,11 @@
          var1.minigameName = JsonUtils.getStringOr("minigameName", var0, (String)null);
          var1.activeSlot = JsonUtils.getIntOr("activeSlot", var0, -1);
          var1.minigameId = JsonUtils.getIntOr("minigameId", var0, -1);
          var1.minigameImage = JsonUtils.getStringOr("minigameImage", var0, (String)null);
       } catch (Exception var3) {
-         LOGGER.error("Could not parse McoServer: " + var3.getMessage());
+         LOGGER.error("Could not parse McoServer: {}", var3.getMessage());
       }
 
       return var1;
    }
 
@@ -211,11 +211,11 @@
 
    public static RealmsServer parse(String var0) {
       try {
          return parse((new JsonParser()).parse(var0).getAsJsonObject());
       } catch (Exception var2) {
-         LOGGER.error("Could not parse McoServer: " + var2.getMessage());
+         LOGGER.error("Could not parse McoServer: {}", var2.getMessage());
          return new RealmsServer();
       }
    }
 
    private static RealmsServer.State getState(String var0) {
@@ -280,11 +280,11 @@
       HashMap var2 = Maps.newHashMap();
       Iterator var3 = var1.entrySet().iterator();
 
       while(var3.hasNext()) {
          Entry var4 = (Entry)var3.next();
-         var2.put(var4.getKey(), ((RealmsWorldOptions)var4.getValue()).clone());
+         var2.put((Integer)var4.getKey(), ((RealmsWorldOptions)var4.getValue()).clone());
       }
 
       return var2;
    }
 
@@ -294,10 +294,19 @@
 
    public ServerData toServerData(String var1) {
       return new ServerData(this.name, var1, false);
    }
 
+   public static enum State {
+      CLOSED,
+      OPEN,
+      UNINITIALIZED;
+
+      private State() {
+      }
+   }
+
    public static enum WorldType {
       NORMAL,
       MINIGAME,
       ADVENTUREMAP,
       EXPERIENCE,
@@ -305,19 +314,10 @@
 
       private WorldType() {
       }
    }
 
-   public static enum State {
-      CLOSED,
-      OPEN,
-      UNINITIALIZED;
-
-      private State() {
-      }
-   }
-
    public static class McoServerComparator implements Comparator<RealmsServer> {
       private final String refOwner;
 
       public McoServerComparator(String var1) {
          this.refOwner = var1;
