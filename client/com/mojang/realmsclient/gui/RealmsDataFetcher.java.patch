--- com/mojang/realmsclient/gui/RealmsDataFetcher.java
+++ com/mojang/realmsclient/gui/RealmsDataFetcher.java
@@ -4,33 +4,39 @@
 import com.google.common.collect.Sets;
 import com.mojang.realmsclient.client.RealmsClient;
 import com.mojang.realmsclient.dto.RealmsNews;
 import com.mojang.realmsclient.dto.RealmsServer;
 import com.mojang.realmsclient.dto.RealmsServerPlayerLists;
+import com.mojang.realmsclient.gui.task.RepeatableTask;
 import com.mojang.realmsclient.util.RealmsPersistence;
+import java.time.Duration;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.Executors;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.ScheduledFuture;
-import java.util.concurrent.TimeUnit;
+import java.util.stream.Stream;
 import net.minecraft.client.Minecraft;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class RealmsDataFetcher {
    private static final Logger LOGGER = LogManager.getLogger();
+   private final Minecraft minecraft;
+   private final RealmsClient realmsClient;
    private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(3);
    private volatile boolean stopped = true;
-   private final Runnable serverListUpdateTask = new RealmsDataFetcher.ServerListUpdateTask();
-   private final Runnable pendingInviteUpdateTask = new RealmsDataFetcher.PendingInviteUpdateTask();
-   private final Runnable trialAvailabilityTask = new RealmsDataFetcher.TrialAvailabilityTask();
-   private final Runnable liveStatsTask = new RealmsDataFetcher.LiveStatsTask();
-   private final Runnable unreadNewsTask = new RealmsDataFetcher.UnreadNewsTask();
+   private final RepeatableTask serverListUpdateTask = RepeatableTask.withImmediateRestart(this::updateServersList, Duration.ofSeconds(60L), this::isActive);
+   private final RepeatableTask liveStatsTask = RepeatableTask.withImmediateRestart(this::updateLiveStats, Duration.ofSeconds(10L), this::isActive);
+   private final RepeatableTask pendingInviteUpdateTask = RepeatableTask.withRestartDelayAccountingForInterval(this::updatePendingInvites, Duration.ofSeconds(10L), this::isActive);
+   private final RepeatableTask trialAvailabilityTask = RepeatableTask.withRestartDelayAccountingForInterval(this::updateTrialAvailable, Duration.ofSeconds(60L), this::isActive);
+   private final RepeatableTask unreadNewsTask = RepeatableTask.withRestartDelayAccountingForInterval(this::updateUnreadNews, Duration.ofMinutes(5L), this::isActive);
+   private final RealmsPersistence newsLocalStorage;
    private final Set<RealmsServer> removedServers = Sets.newHashSet();
    private List<RealmsServer> servers = Lists.newArrayList();
    private RealmsServerPlayerLists livestats;
    private int pendingInvitesCount;
    private boolean trialAvailable;
@@ -41,11 +47,14 @@
    private ScheduledFuture<?> trialAvailableScheduledFuture;
    private ScheduledFuture<?> liveStatsScheduledFuture;
    private ScheduledFuture<?> unreadNewsScheduledFuture;
    private final Map<RealmsDataFetcher.Task, Boolean> fetchStatus = new ConcurrentHashMap(RealmsDataFetcher.Task.values().length);
 
-   public RealmsDataFetcher() {
+   public RealmsDataFetcher(Minecraft var1, RealmsClient var2) {
+      this.minecraft = var1;
+      this.realmsClient = var2;
+      this.newsLocalStorage = new RealmsPersistence();
    }
 
    public boolean isStopped() {
       return this.stopped;
    }
@@ -62,32 +71,28 @@
    public synchronized void initWithSpecificTaskList() {
       if (this.stopped) {
          this.stopped = false;
          this.cancelTasks();
          this.fetchStatus.put(RealmsDataFetcher.Task.PENDING_INVITE, false);
-         this.pendingInviteScheduledFuture = this.scheduler.scheduleAtFixedRate(this.pendingInviteUpdateTask, 0L, 10L, TimeUnit.SECONDS);
+         this.pendingInviteScheduledFuture = this.pendingInviteUpdateTask.schedule(this.scheduler);
          this.fetchStatus.put(RealmsDataFetcher.Task.TRIAL_AVAILABLE, false);
-         this.trialAvailableScheduledFuture = this.scheduler.scheduleAtFixedRate(this.trialAvailabilityTask, 0L, 60L, TimeUnit.SECONDS);
+         this.trialAvailableScheduledFuture = this.trialAvailabilityTask.schedule(this.scheduler);
          this.fetchStatus.put(RealmsDataFetcher.Task.UNREAD_NEWS, false);
-         this.unreadNewsScheduledFuture = this.scheduler.scheduleAtFixedRate(this.unreadNewsTask, 0L, 300L, TimeUnit.SECONDS);
+         this.unreadNewsScheduledFuture = this.unreadNewsTask.schedule(this.scheduler);
       }
 
    }
 
    public boolean isFetchedSinceLastTry(RealmsDataFetcher.Task var1) {
       Boolean var2 = (Boolean)this.fetchStatus.get(var1);
-      return var2 == null ? false : var2;
+      return var2 != null && var2;
    }
 
    public void markClean() {
-      Iterator var1 = this.fetchStatus.keySet().iterator();
-
-      while(var1.hasNext()) {
-         RealmsDataFetcher.Task var2 = (RealmsDataFetcher.Task)var1.next();
-         this.fetchStatus.put(var2, false);
-      }
-
+      this.fetchStatus.replaceAll((var0, var1) -> {
+         return false;
+      });
    }
 
    public synchronized void forceUpdate() {
       this.stop();
       this.init();
@@ -129,42 +134,26 @@
       for(int var3 = 0; var3 < var2; ++var3) {
          RealmsDataFetcher.Task var4 = var1[var3];
          this.fetchStatus.put(var4, false);
       }
 
-      this.serverListScheduledFuture = this.scheduler.scheduleAtFixedRate(this.serverListUpdateTask, 0L, 60L, TimeUnit.SECONDS);
-      this.pendingInviteScheduledFuture = this.scheduler.scheduleAtFixedRate(this.pendingInviteUpdateTask, 0L, 10L, TimeUnit.SECONDS);
-      this.trialAvailableScheduledFuture = this.scheduler.scheduleAtFixedRate(this.trialAvailabilityTask, 0L, 60L, TimeUnit.SECONDS);
-      this.liveStatsScheduledFuture = this.scheduler.scheduleAtFixedRate(this.liveStatsTask, 0L, 10L, TimeUnit.SECONDS);
-      this.unreadNewsScheduledFuture = this.scheduler.scheduleAtFixedRate(this.unreadNewsTask, 0L, 300L, TimeUnit.SECONDS);
+      this.serverListScheduledFuture = this.serverListUpdateTask.schedule(this.scheduler);
+      this.pendingInviteScheduledFuture = this.pendingInviteUpdateTask.schedule(this.scheduler);
+      this.trialAvailableScheduledFuture = this.trialAvailabilityTask.schedule(this.scheduler);
+      this.liveStatsScheduledFuture = this.liveStatsTask.schedule(this.scheduler);
+      this.unreadNewsScheduledFuture = this.unreadNewsTask.schedule(this.scheduler);
    }
 
    private void cancelTasks() {
-      try {
-         if (this.serverListScheduledFuture != null) {
-            this.serverListScheduledFuture.cancel(false);
+      Stream.of(this.serverListScheduledFuture, this.pendingInviteScheduledFuture, this.trialAvailableScheduledFuture, this.liveStatsScheduledFuture, this.unreadNewsScheduledFuture).filter(Objects::nonNull).forEach((var0) -> {
+         try {
+            var0.cancel(false);
+         } catch (Exception var2) {
+            LOGGER.error("Failed to cancel Realms task", var2);
          }
 
-         if (this.pendingInviteScheduledFuture != null) {
-            this.pendingInviteScheduledFuture.cancel(false);
-         }
-
-         if (this.trialAvailableScheduledFuture != null) {
-            this.trialAvailableScheduledFuture.cancel(false);
-         }
-
-         if (this.liveStatsScheduledFuture != null) {
-            this.liveStatsScheduledFuture.cancel(false);
-         }
-
-         if (this.unreadNewsScheduledFuture != null) {
-            this.unreadNewsScheduledFuture.cancel(false);
-         }
-      } catch (Exception var2) {
-         LOGGER.error("Failed to cancel Realms tasks", var2);
-      }
-
+      });
    }
 
    private synchronized void setServers(List<RealmsServer> var1) {
       int var2 = 0;
       Iterator var3 = this.removedServers.iterator();
@@ -190,156 +179,97 @@
 
    private boolean isActive() {
       return !this.stopped;
    }
 
-   public static enum Task {
-      SERVER_LIST,
-      PENDING_INVITE,
-      TRIAL_AVAILABLE,
-      LIVE_STATS,
-      UNREAD_NEWS;
-
-      private Task() {
-      }
-   }
-
-   class UnreadNewsTask implements Runnable {
-      private UnreadNewsTask() {
-      }
-
-      public void run() {
-         if (RealmsDataFetcher.this.isActive()) {
-            this.getUnreadNews();
+   private void updateServersList() {
+      try {
+         List var1 = this.realmsClient.listWorlds().servers;
+         if (var1 != null) {
+            var1.sort(new RealmsServer.McoServerComparator(this.minecraft.getUser().getName()));
+            this.setServers(var1);
+            this.fetchStatus.put(RealmsDataFetcher.Task.SERVER_LIST, true);
+         } else {
+            LOGGER.warn("Realms server list was null");
          }
-
+      } catch (Exception var2) {
+         this.fetchStatus.put(RealmsDataFetcher.Task.SERVER_LIST, true);
+         LOGGER.error("Couldn't get server list", var2);
       }
 
-      private void getUnreadNews() {
-         try {
-            RealmsClient var1 = RealmsClient.create();
-            RealmsNews var2 = null;
-
-            try {
-               var2 = var1.getNews();
-            } catch (Exception var5) {
-            }
-
-            RealmsPersistence.RealmsPersistenceData var3 = RealmsPersistence.readFile();
-            if (var2 != null) {
-               String var4 = var2.newsLink;
-               if (var4 != null && !var4.equals(var3.newsLink)) {
-                  var3.hasUnreadNews = true;
-                  var3.newsLink = var4;
-                  RealmsPersistence.writeFile(var3);
-               }
-            }
-
-            RealmsDataFetcher.this.hasUnreadNews = var3.hasUnreadNews;
-            RealmsDataFetcher.this.newsLink = var3.newsLink;
-            RealmsDataFetcher.this.fetchStatus.put(RealmsDataFetcher.Task.UNREAD_NEWS, true);
-         } catch (Exception var6) {
-            RealmsDataFetcher.LOGGER.error("Couldn't get unread news", var6);
-         }
-
-      }
    }
 
-   class LiveStatsTask implements Runnable {
-      private LiveStatsTask() {
+   private void updatePendingInvites() {
+      try {
+         this.pendingInvitesCount = this.realmsClient.pendingInvitesCount();
+         this.fetchStatus.put(RealmsDataFetcher.Task.PENDING_INVITE, true);
+      } catch (Exception var2) {
+         LOGGER.error("Couldn't get pending invite count", var2);
       }
 
-      public void run() {
-         if (RealmsDataFetcher.this.isActive()) {
-            this.getLiveStats();
-         }
+   }
 
+   private void updateTrialAvailable() {
+      try {
+         this.trialAvailable = this.realmsClient.trialAvailable();
+         this.fetchStatus.put(RealmsDataFetcher.Task.TRIAL_AVAILABLE, true);
+      } catch (Exception var2) {
+         LOGGER.error("Couldn't get trial availability", var2);
       }
 
-      private void getLiveStats() {
-         try {
-            RealmsClient var1 = RealmsClient.create();
-            RealmsDataFetcher.this.livestats = var1.getLiveStats();
-            RealmsDataFetcher.this.fetchStatus.put(RealmsDataFetcher.Task.LIVE_STATS, true);
-         } catch (Exception var2) {
-            RealmsDataFetcher.LOGGER.error("Couldn't get live stats", var2);
-         }
-
-      }
    }
 
-   class TrialAvailabilityTask implements Runnable {
-      private TrialAvailabilityTask() {
+   private void updateLiveStats() {
+      try {
+         this.livestats = this.realmsClient.getLiveStats();
+         this.fetchStatus.put(RealmsDataFetcher.Task.LIVE_STATS, true);
+      } catch (Exception var2) {
+         LOGGER.error("Couldn't get live stats", var2);
       }
 
-      public void run() {
-         if (RealmsDataFetcher.this.isActive()) {
-            this.getTrialAvailable();
-         }
+   }
 
+   private void updateUnreadNews() {
+      try {
+         RealmsPersistence.RealmsPersistenceData var1 = this.fetchAndUpdateNewsStorage();
+         this.hasUnreadNews = var1.hasUnreadNews;
+         this.newsLink = var1.newsLink;
+         this.fetchStatus.put(RealmsDataFetcher.Task.UNREAD_NEWS, true);
+      } catch (Exception var2) {
+         LOGGER.error("Couldn't update unread news", var2);
       }
 
-      private void getTrialAvailable() {
-         try {
-            RealmsClient var1 = RealmsClient.create();
-            RealmsDataFetcher.this.trialAvailable = var1.trialAvailable();
-            RealmsDataFetcher.this.fetchStatus.put(RealmsDataFetcher.Task.TRIAL_AVAILABLE, true);
-         } catch (Exception var2) {
-            RealmsDataFetcher.LOGGER.error("Couldn't get trial availability", var2);
-         }
-
-      }
    }
 
-   class PendingInviteUpdateTask implements Runnable {
-      private PendingInviteUpdateTask() {
+   private RealmsPersistence.RealmsPersistenceData fetchAndUpdateNewsStorage() {
+      RealmsPersistence.RealmsPersistenceData var1;
+      try {
+         RealmsNews var2 = this.realmsClient.getNews();
+         var1 = new RealmsPersistence.RealmsPersistenceData();
+         var1.newsLink = var2.newsLink;
+      } catch (Exception var4) {
+         LOGGER.warn("Failed fetching news from Realms, falling back to local cache", var4);
+         return this.newsLocalStorage.read();
       }
 
-      public void run() {
-         if (RealmsDataFetcher.this.isActive()) {
-            this.updatePendingInvites();
-         }
-
+      RealmsPersistence.RealmsPersistenceData var5 = this.newsLocalStorage.read();
+      boolean var3 = var1.newsLink == null || var1.newsLink.equals(var5.newsLink);
+      if (var3) {
+         return var5;
+      } else {
+         var1.hasUnreadNews = true;
+         this.newsLocalStorage.save(var1);
+         return var1;
       }
-
-      private void updatePendingInvites() {
-         try {
-            RealmsClient var1 = RealmsClient.create();
-            RealmsDataFetcher.this.pendingInvitesCount = var1.pendingInvitesCount();
-            RealmsDataFetcher.this.fetchStatus.put(RealmsDataFetcher.Task.PENDING_INVITE, true);
-         } catch (Exception var2) {
-            RealmsDataFetcher.LOGGER.error("Couldn't get pending invite count", var2);
-         }
-
-      }
    }
 
-   class ServerListUpdateTask implements Runnable {
-      private ServerListUpdateTask() {
-      }
+   public static enum Task {
+      SERVER_LIST,
+      PENDING_INVITE,
+      TRIAL_AVAILABLE,
+      LIVE_STATS,
+      UNREAD_NEWS;
 
-      public void run() {
-         if (RealmsDataFetcher.this.isActive()) {
-            this.updateServersList();
-         }
-
+      private Task() {
       }
-
-      private void updateServersList() {
-         try {
-            RealmsClient var1 = RealmsClient.create();
-            List var2 = var1.listWorlds().servers;
-            if (var2 != null) {
-               var2.sort(new RealmsServer.McoServerComparator(Minecraft.getInstance().getUser().getName()));
-               RealmsDataFetcher.this.setServers(var2);
-               RealmsDataFetcher.this.fetchStatus.put(RealmsDataFetcher.Task.SERVER_LIST, true);
-            } else {
-               RealmsDataFetcher.LOGGER.warn("Realms server list was null or empty");
-            }
-         } catch (Exception var3) {
-            RealmsDataFetcher.this.fetchStatus.put(RealmsDataFetcher.Task.SERVER_LIST, true);
-            RealmsDataFetcher.LOGGER.error("Couldn't get server list", var3);
-         }
-
-      }
    }
 }
