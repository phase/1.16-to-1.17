--- com/mojang/realmsclient/gui/screens/RealmsUploadScreen.java
+++ com/mojang/realmsclient/gui/screens/RealmsUploadScreen.java
@@ -5,10 +5,11 @@
 import com.mojang.blaze3d.systems.RenderSystem;
 import com.mojang.blaze3d.vertex.BufferBuilder;
 import com.mojang.blaze3d.vertex.DefaultVertexFormat;
 import com.mojang.blaze3d.vertex.PoseStack;
 import com.mojang.blaze3d.vertex.Tesselator;
+import com.mojang.blaze3d.vertex.VertexFormat;
 import com.mojang.realmsclient.Unit;
 import com.mojang.realmsclient.client.FileUpload;
 import com.mojang.realmsclient.client.RealmsClient;
 import com.mojang.realmsclient.client.UploadStatus;
 import com.mojang.realmsclient.dto.UploadInfo;
@@ -168,11 +169,11 @@
       RenderSystem.disableTexture();
       double var4 = (double)(this.width / 2 - 100);
       double var6 = 0.5D;
       Tesselator var8 = Tesselator.getInstance();
       BufferBuilder var9 = var8.getBuilder();
-      var9.begin(7, DefaultVertexFormat.POSITION_COLOR);
+      var9.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION_COLOR);
       var9.vertex(var4 - 0.5D, 95.5D, 0.0D).color(217, 210, 210, 255).endVertex();
       var9.vertex(var4 + 200.0D * var2 + 0.5D, 95.5D, 0.0D).color(217, 210, 210, 255).endVertex();
       var9.vertex(var4 + 200.0D * var2 + 0.5D, 79.5D, 0.0D).color(217, 210, 210, 255).endVertex();
       var9.vertex(var4 - 0.5D, 79.5D, 0.0D).color(217, 210, 210, 255).endVertex();
       var9.vertex(var4, 95.0D, 0.0D).color(128, 128, 128, 255).endVertex();
@@ -238,126 +239,126 @@
          File var1 = null;
          RealmsClient var2 = RealmsClient.create();
          long var3 = this.worldId;
 
          try {
-            try {
-               if (!UPLOAD_LOCK.tryLock(1L, TimeUnit.SECONDS)) {
-                  this.status = new TranslatableComponent("mco.upload.close.failure");
-                  return;
-               }
+            if (!UPLOAD_LOCK.tryLock(1L, TimeUnit.SECONDS)) {
+               this.status = new TranslatableComponent("mco.upload.close.failure");
+               return;
+            }
 
-               UploadInfo var5 = null;
+            UploadInfo var5 = null;
 
-               for(int var6 = 0; var6 < 20; ++var6) {
-                  try {
-                     if (this.cancelled) {
-                        this.uploadCancelled();
-                        return;
-                     }
+            for(int var6 = 0; var6 < 20; ++var6) {
+               try {
+                  if (this.cancelled) {
+                     this.uploadCancelled();
+                     return;
+                  }
 
-                     var5 = var2.requestUploadInfo(var3, UploadTokenCache.get(var3));
-                     if (var5 != null) {
-                        break;
-                     }
-                  } catch (RetryCallException var20) {
-                     Thread.sleep((long)(var20.delaySeconds * 1000));
+                  var5 = var2.requestUploadInfo(var3, UploadTokenCache.get(var3));
+                  if (var5 != null) {
+                     break;
                   }
+               } catch (RetryCallException var20) {
+                  Thread.sleep((long)(var20.delaySeconds * 1000));
                }
+            }
 
-               if (var5 == null) {
-                  this.status = new TranslatableComponent("mco.upload.close.failure");
-                  return;
-               }
+            if (var5 == null) {
+               this.status = new TranslatableComponent("mco.upload.close.failure");
+               return;
+            }
 
-               UploadTokenCache.put(var3, var5.getToken());
-               if (!var5.isWorldClosed()) {
-                  this.status = new TranslatableComponent("mco.upload.close.failure");
-                  return;
-               }
+            UploadTokenCache.put(var3, var5.getToken());
+            if (!var5.isWorldClosed()) {
+               this.status = new TranslatableComponent("mco.upload.close.failure");
+               return;
+            }
 
-               if (this.cancelled) {
-                  this.uploadCancelled();
-                  return;
-               }
-
+            if (!this.cancelled) {
                File var25 = new File(this.minecraft.gameDirectory.getAbsolutePath(), "saves");
                var1 = this.tarGzipArchive(new File(var25, this.selectedLevel.getLevelId()));
                if (this.cancelled) {
                   this.uploadCancelled();
                   return;
                }
 
-               if (!this.verify(var1)) {
-                  long var26 = var1.length();
-                  Unit var9 = Unit.getLargest(var26);
-                  Unit var10 = Unit.getLargest(5368709120L);
-                  if (Unit.humanReadable(var26, var9).equals(Unit.humanReadable(5368709120L, var10)) && var9 != Unit.B) {
-                     Unit var11 = Unit.values()[var9.ordinal() - 1];
-                     this.setErrorMessage(new TranslatableComponent("mco.upload.size.failure.line1", new Object[]{this.selectedLevel.getLevelName()}), new TranslatableComponent("mco.upload.size.failure.line2", new Object[]{Unit.humanReadable(var26, var11), Unit.humanReadable(5368709120L, var11)}));
-                     return;
-                  }
+               if (this.verify(var1)) {
+                  this.status = new TranslatableComponent("mco.upload.uploading", new Object[]{this.selectedLevel.getLevelName()});
+                  FileUpload var26 = new FileUpload(var1, this.worldId, this.slotId, var5, this.minecraft.getUser(), SharedConstants.getCurrentVersion().getName(), this.uploadStatus);
+                  var26.upload((var3x) -> {
+                     if (var3x.statusCode >= 200 && var3x.statusCode < 300) {
+                        this.uploadFinished = true;
+                        this.status = new TranslatableComponent("mco.upload.done");
+                        this.backButton.setMessage(CommonComponents.GUI_DONE);
+                        UploadTokenCache.invalidate(var3);
+                     } else if (var3x.statusCode == 400 && var3x.errorMessage != null) {
+                        this.setErrorMessage(new TranslatableComponent("mco.upload.failed", new Object[]{var3x.errorMessage}));
+                     } else {
+                        this.setErrorMessage(new TranslatableComponent("mco.upload.failed", new Object[]{var3x.statusCode}));
+                     }
 
-                  this.setErrorMessage(new TranslatableComponent("mco.upload.size.failure.line1", new Object[]{this.selectedLevel.getLevelName()}), new TranslatableComponent("mco.upload.size.failure.line2", new Object[]{Unit.humanReadable(var26, var9), Unit.humanReadable(5368709120L, var10)}));
-                  return;
-               }
+                  });
 
-               this.status = new TranslatableComponent("mco.upload.uploading", new Object[]{this.selectedLevel.getLevelName()});
-               FileUpload var7 = new FileUpload(var1, this.worldId, this.slotId, var5, this.minecraft.getUser(), SharedConstants.getCurrentVersion().getName(), this.uploadStatus);
-               var7.upload((var3x) -> {
-                  if (var3x.statusCode >= 200 && var3x.statusCode < 300) {
-                     this.uploadFinished = true;
-                     this.status = new TranslatableComponent("mco.upload.done");
-                     this.backButton.setMessage(CommonComponents.GUI_DONE);
-                     UploadTokenCache.invalidate(var3);
-                  } else if (var3x.statusCode == 400 && var3x.errorMessage != null) {
-                     this.setErrorMessage(new TranslatableComponent("mco.upload.failed", new Object[]{var3x.errorMessage}));
-                  } else {
-                     this.setErrorMessage(new TranslatableComponent("mco.upload.failed", new Object[]{var3x.statusCode}));
-                  }
+                  while(!var26.isFinished()) {
+                     if (this.cancelled) {
+                        var26.cancel();
+                        this.uploadCancelled();
+                        return;
+                     }
 
-               });
-
-               while(!var7.isFinished()) {
-                  if (this.cancelled) {
-                     var7.cancel();
-                     this.uploadCancelled();
-                     return;
+                     try {
+                        Thread.sleep(500L);
+                     } catch (InterruptedException var19) {
+                        LOGGER.error("Failed to check Realms file upload status");
+                     }
                   }
 
-                  try {
-                     Thread.sleep(500L);
-                  } catch (InterruptedException var19) {
-                     LOGGER.error("Failed to check Realms file upload status");
-                  }
+                  return;
                }
 
+               long var7 = var1.length();
+               Unit var9 = Unit.getLargest(var7);
+               Unit var10 = Unit.getLargest(5368709120L);
+               if (Unit.humanReadable(var7, var9).equals(Unit.humanReadable(5368709120L, var10)) && var9 != Unit.B) {
+                  Unit var11 = Unit.values()[var9.ordinal() - 1];
+                  this.setErrorMessage(new TranslatableComponent("mco.upload.size.failure.line1", new Object[]{this.selectedLevel.getLevelName()}), new TranslatableComponent("mco.upload.size.failure.line2", new Object[]{Unit.humanReadable(var7, var11), Unit.humanReadable(5368709120L, var11)}));
+                  return;
+               }
+
+               this.setErrorMessage(new TranslatableComponent("mco.upload.size.failure.line1", new Object[]{this.selectedLevel.getLevelName()}), new TranslatableComponent("mco.upload.size.failure.line2", new Object[]{Unit.humanReadable(var7, var9), Unit.humanReadable(5368709120L, var10)}));
                return;
-            } catch (IOException var21) {
-               this.setErrorMessage(new TranslatableComponent("mco.upload.failed", new Object[]{var21.getMessage()}));
-            } catch (RealmsServiceException var22) {
-               this.setErrorMessage(new TranslatableComponent("mco.upload.failed", new Object[]{var22.toString()}));
-            } catch (InterruptedException var23) {
-               LOGGER.error("Could not acquire upload lock");
             }
 
+            this.uploadCancelled();
+         } catch (IOException var21) {
+            this.setErrorMessage(new TranslatableComponent("mco.upload.failed", new Object[]{var21.getMessage()}));
+            return;
+         } catch (RealmsServiceException var22) {
+            this.setErrorMessage(new TranslatableComponent("mco.upload.failed", new Object[]{var22.toString()}));
+            return;
+         } catch (InterruptedException var23) {
+            LOGGER.error("Could not acquire upload lock");
+            return;
          } finally {
             this.uploadFinished = true;
             if (UPLOAD_LOCK.isHeldByCurrentThread()) {
                UPLOAD_LOCK.unlock();
                this.showDots = false;
                this.backButton.visible = true;
                this.cancelButton.visible = false;
                if (var1 != null) {
-                  LOGGER.debug("Deleting file " + var1.getAbsolutePath());
+                  LOGGER.debug("Deleting file {}", var1.getAbsolutePath());
                   var1.delete();
                }
 
-            } else {
-               return;
             }
+
+            return;
          }
+
       })).start();
    }
 
    private void setErrorMessage(Component... var1) {
       this.errorMessage = var1;
