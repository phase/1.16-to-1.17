--- com/mojang/realmsclient/gui/screens/RealmsPlayerScreen.java
+++ com/mojang/realmsclient/gui/screens/RealmsPlayerScreen.java
@@ -3,10 +3,11 @@
 import com.mojang.blaze3d.systems.RenderSystem;
 import com.mojang.blaze3d.vertex.BufferBuilder;
 import com.mojang.blaze3d.vertex.DefaultVertexFormat;
 import com.mojang.blaze3d.vertex.PoseStack;
 import com.mojang.blaze3d.vertex.Tesselator;
+import com.mojang.blaze3d.vertex.VertexFormat;
 import com.mojang.realmsclient.client.RealmsClient;
 import com.mojang.realmsclient.dto.Ops;
 import com.mojang.realmsclient.dto.PlayerInfo;
 import com.mojang.realmsclient.dto.RealmsServer;
 import com.mojang.realmsclient.exception.RealmsServiceException;
@@ -14,18 +15,16 @@
 import java.util.Iterator;
 import javax.annotation.Nullable;
 import net.minecraft.client.gui.GuiComponent;
 import net.minecraft.client.gui.components.Button;
 import net.minecraft.client.gui.components.ObjectSelectionList;
-import net.minecraft.client.resources.language.I18n;
+import net.minecraft.client.renderer.GameRenderer;
 import net.minecraft.network.chat.CommonComponents;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.FormattedText;
 import net.minecraft.network.chat.TextComponent;
 import net.minecraft.network.chat.TranslatableComponent;
-import net.minecraft.realms.NarrationHelper;
-import net.minecraft.realms.RealmsLabel;
 import net.minecraft.realms.RealmsObjectSelectionList;
 import net.minecraft.realms.RealmsScreen;
 import net.minecraft.resources.ResourceLocation;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -40,25 +39,25 @@
    private static final Component OP_TOOLTIP = new TranslatableComponent("mco.configure.world.invites.ops.tooltip");
    private static final Component REMOVE_ENTRY_TOOLTIP = new TranslatableComponent("mco.configure.world.invites.remove.tooltip");
    private static final Component INVITED_LABEL = new TranslatableComponent("mco.configure.world.invited");
    private Component toolTip;
    private final RealmsConfigureWorldScreen lastScreen;
-   private final RealmsServer serverData;
+   final RealmsServer serverData;
    private RealmsPlayerScreen.InvitedObjectSelectionList invitedObjectSelectionList;
-   private int column1X;
-   private int columnWidth;
+   int column1X;
+   int columnWidth;
    private int column2X;
    private Button removeButton;
    private Button opdeopButton;
    private int selectedInvitedIndex = -1;
    private String selectedInvited;
-   private int player = -1;
+   int player = -1;
    private boolean stateChanged;
-   private RealmsLabel titleLabel;
-   private RealmsPlayerScreen.UserAction hoveredUserAction;
+   RealmsPlayerScreen.UserAction hoveredUserAction;
 
    public RealmsPlayerScreen(RealmsConfigureWorldScreen var1, RealmsServer var2) {
+      super(new TranslatableComponent("mco.configure.world.players.title"));
       this.hoveredUserAction = RealmsPlayerScreen.UserAction.NONE;
       this.lastScreen = var1;
       this.serverData = var2;
    }
 
@@ -75,33 +74,31 @@
       while(var1.hasNext()) {
          PlayerInfo var2 = (PlayerInfo)var1.next();
          this.invitedObjectSelectionList.addEntry(var2);
       }
 
-      this.addButton(new Button(this.column2X, row(1), this.columnWidth + 10, 20, new TranslatableComponent("mco.configure.world.buttons.invite"), (var1x) -> {
+      this.addRenderableWidget(new Button(this.column2X, row(1), this.columnWidth + 10, 20, new TranslatableComponent("mco.configure.world.buttons.invite"), (var1x) -> {
          this.minecraft.setScreen(new RealmsInviteScreen(this.lastScreen, this, this.serverData));
       }));
-      this.removeButton = (Button)this.addButton(new Button(this.column2X, row(7), this.columnWidth + 10, 20, new TranslatableComponent("mco.configure.world.invites.remove.tooltip"), (var1x) -> {
+      this.removeButton = (Button)this.addRenderableWidget(new Button(this.column2X, row(7), this.columnWidth + 10, 20, new TranslatableComponent("mco.configure.world.invites.remove.tooltip"), (var1x) -> {
          this.uninvite(this.player);
       }));
-      this.opdeopButton = (Button)this.addButton(new Button(this.column2X, row(9), this.columnWidth + 10, 20, new TranslatableComponent("mco.configure.world.invites.ops.tooltip"), (var1x) -> {
+      this.opdeopButton = (Button)this.addRenderableWidget(new Button(this.column2X, row(9), this.columnWidth + 10, 20, new TranslatableComponent("mco.configure.world.invites.ops.tooltip"), (var1x) -> {
          if (((PlayerInfo)this.serverData.players.get(this.player)).isOperator()) {
             this.deop(this.player);
          } else {
             this.op(this.player);
          }
 
       }));
-      this.addButton(new Button(this.column2X + this.columnWidth / 2 + 2, row(12), this.columnWidth / 2 + 10 - 2, 20, CommonComponents.GUI_BACK, (var1x) -> {
+      this.addRenderableWidget(new Button(this.column2X + this.columnWidth / 2 + 2, row(12), this.columnWidth / 2 + 10 - 2, 20, CommonComponents.GUI_BACK, (var1x) -> {
          this.backButtonClicked();
       }));
-      this.titleLabel = (RealmsLabel)this.addWidget(new RealmsLabel(new TranslatableComponent("mco.configure.world.players.title"), this.width / 2, 17, 16777215));
-      this.narrateLabels();
       this.updateButtonStates();
    }
 
-   private void updateButtonStates() {
+   void updateButtonStates() {
       this.removeButton.visible = this.shouldRemoveAndOpdeopButtonBeVisible(this.player);
       this.opdeopButton.visible = this.shouldRemoveAndOpdeopButtonBeVisible(this.player);
    }
 
    private boolean shouldRemoveAndOpdeopButtonBeVisible(int var1) {
@@ -128,11 +125,11 @@
          this.minecraft.setScreen(this.lastScreen);
       }
 
    }
 
-   private void op(int var1) {
+   void op(int var1) {
       this.updateButtonStates();
       RealmsClient var2 = RealmsClient.create();
       String var3 = ((PlayerInfo)this.serverData.players.get(var1)).getUuid();
 
       try {
@@ -141,11 +138,11 @@
          LOGGER.error("Couldn't op the user");
       }
 
    }
 
-   private void deop(int var1) {
+   void deop(int var1) {
       this.updateButtonStates();
       RealmsClient var2 = RealmsClient.create();
       String var3 = ((PlayerInfo)this.serverData.players.get(var1)).getUuid();
 
       try {
@@ -164,11 +161,11 @@
          var3.setOperator(var1.ops.contains(var3.getName()));
       }
 
    }
 
-   private void uninvite(int var1) {
+   void uninvite(int var1) {
       this.updateButtonStates();
       if (var1 >= 0 && var1 < this.serverData.players.size()) {
          PlayerInfo var2 = (PlayerInfo)this.serverData.players.get(var1);
          this.selectedInvited = var2.getUuid();
          this.selectedInvitedIndex = var1;
@@ -205,23 +202,24 @@
       this.renderBackground(var1);
       if (this.invitedObjectSelectionList != null) {
          this.invitedObjectSelectionList.render(var1, var2, var3, var4);
       }
 
+      drawCenteredString(var1, this.font, this.title, this.width / 2, 17, 16777215);
       int var5 = row(12) + 20;
       Tesselator var6 = Tesselator.getInstance();
       BufferBuilder var7 = var6.getBuilder();
-      this.minecraft.getTextureManager().bind(OPTIONS_BACKGROUND);
-      RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
+      RenderSystem.setShader(GameRenderer::getPositionTexColorShader);
+      RenderSystem.setShaderTexture(0, OPTIONS_BACKGROUND);
+      RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
       float var8 = 32.0F;
-      var7.begin(7, DefaultVertexFormat.POSITION_TEX_COLOR);
+      var7.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION_TEX_COLOR);
       var7.vertex(0.0D, (double)this.height, 0.0D).uv(0.0F, (float)(this.height - var5) / 32.0F + 0.0F).color(64, 64, 64, 255).endVertex();
       var7.vertex((double)this.width, (double)this.height, 0.0D).uv((float)this.width / 32.0F, (float)(this.height - var5) / 32.0F + 0.0F).color(64, 64, 64, 255).endVertex();
       var7.vertex((double)this.width, (double)var5, 0.0D).uv((float)this.width / 32.0F, 0.0F).color(64, 64, 64, 255).endVertex();
       var7.vertex(0.0D, (double)var5, 0.0D).uv(0.0F, 0.0F).color(64, 64, 64, 255).endVertex();
       var6.end();
-      this.titleLabel.render(this, var1);
       if (this.serverData != null && this.serverData.players != null) {
          this.font.draw(var1, (Component)(new TextComponent("")).append(INVITED_LABEL).append(" (").append(Integer.toString(this.serverData.players.size())).append(")"), (float)this.column1X, (float)row(0), 10526880);
       } else {
          this.font.draw(var1, INVITED_LABEL, (float)this.column1X, (float)row(0), 10526880);
       }
@@ -240,87 +238,59 @@
          this.fillGradient(var1, var5 - 3, var6 - 3, var5 + var7 + 3, var6 + 8 + 3, -1073741824, -1073741824);
          this.font.drawShadow(var1, var2, (float)var5, (float)var6, 16777215);
       }
    }
 
-   private void drawRemoveIcon(PoseStack var1, int var2, int var3, int var4, int var5) {
+   void drawRemoveIcon(PoseStack var1, int var2, int var3, int var4, int var5) {
       boolean var6 = var4 >= var2 && var4 <= var2 + 9 && var5 >= var3 && var5 <= var3 + 9 && var5 < row(12) + 20 && var5 > row(1);
-      this.minecraft.getTextureManager().bind(CROSS_ICON_LOCATION);
-      RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
+      RenderSystem.setShaderTexture(0, CROSS_ICON_LOCATION);
+      RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
       float var7 = var6 ? 7.0F : 0.0F;
       GuiComponent.blit(var1, var2, var3, 0.0F, var7, 8, 7, 8, 14);
       if (var6) {
          this.toolTip = REMOVE_ENTRY_TOOLTIP;
          this.hoveredUserAction = RealmsPlayerScreen.UserAction.REMOVE;
       }
 
    }
 
-   private void drawOpped(PoseStack var1, int var2, int var3, int var4, int var5) {
+   void drawOpped(PoseStack var1, int var2, int var3, int var4, int var5) {
       boolean var6 = var4 >= var2 && var4 <= var2 + 9 && var5 >= var3 && var5 <= var3 + 9 && var5 < row(12) + 20 && var5 > row(1);
-      this.minecraft.getTextureManager().bind(OP_ICON_LOCATION);
-      RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
+      RenderSystem.setShaderTexture(0, OP_ICON_LOCATION);
+      RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
       float var7 = var6 ? 8.0F : 0.0F;
       GuiComponent.blit(var1, var2, var3, 0.0F, var7, 8, 8, 8, 16);
       if (var6) {
          this.toolTip = OP_TOOLTIP;
          this.hoveredUserAction = RealmsPlayerScreen.UserAction.TOGGLE_OP;
       }
 
    }
 
-   private void drawNormal(PoseStack var1, int var2, int var3, int var4, int var5) {
+   void drawNormal(PoseStack var1, int var2, int var3, int var4, int var5) {
       boolean var6 = var4 >= var2 && var4 <= var2 + 9 && var5 >= var3 && var5 <= var3 + 9 && var5 < row(12) + 20 && var5 > row(1);
-      this.minecraft.getTextureManager().bind(USER_ICON_LOCATION);
-      RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
+      RenderSystem.setShaderTexture(0, USER_ICON_LOCATION);
+      RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
       float var7 = var6 ? 8.0F : 0.0F;
       GuiComponent.blit(var1, var2, var3, 0.0F, var7, 8, 8, 8, 16);
       if (var6) {
          this.toolTip = NORMAL_USER_TOOLTIP;
          this.hoveredUserAction = RealmsPlayerScreen.UserAction.TOGGLE_OP;
       }
 
    }
 
-   class Entry extends ObjectSelectionList.Entry<RealmsPlayerScreen.Entry> {
-      private final PlayerInfo playerInfo;
+   private static enum UserAction {
+      TOGGLE_OP,
+      REMOVE,
+      NONE;
 
-      public Entry(PlayerInfo var2) {
-         this.playerInfo = var2;
+      private UserAction() {
       }
-
-      public void render(PoseStack var1, int var2, int var3, int var4, int var5, int var6, int var7, int var8, boolean var9, float var10) {
-         this.renderInvitedItem(var1, this.playerInfo, var4, var3, var7, var8);
-      }
-
-      private void renderInvitedItem(PoseStack var1, PlayerInfo var2, int var3, int var4, int var5, int var6) {
-         int var7;
-         if (!var2.getAccepted()) {
-            var7 = 10526880;
-         } else if (var2.getOnline()) {
-            var7 = 8388479;
-         } else {
-            var7 = 16777215;
-         }
-
-         RealmsPlayerScreen.this.font.draw(var1, var2.getName(), (float)(RealmsPlayerScreen.this.column1X + 3 + 12), (float)(var4 + 1), var7);
-         if (var2.isOperator()) {
-            RealmsPlayerScreen.this.drawOpped(var1, RealmsPlayerScreen.this.column1X + RealmsPlayerScreen.this.columnWidth - 10, var4 + 1, var5, var6);
-         } else {
-            RealmsPlayerScreen.this.drawNormal(var1, RealmsPlayerScreen.this.column1X + RealmsPlayerScreen.this.columnWidth - 10, var4 + 1, var5, var6);
-         }
-
-         RealmsPlayerScreen.this.drawRemoveIcon(var1, RealmsPlayerScreen.this.column1X + RealmsPlayerScreen.this.columnWidth - 22, var4 + 2, var5, var6);
-         RealmsTextureManager.withBoundFace(var2.getUuid(), () -> {
-            RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
-            GuiComponent.blit(var1, RealmsPlayerScreen.this.column1X + 2 + 2, var4 + 1, 8, 8, 8.0F, 8.0F, 8, 8, 64, 64);
-            GuiComponent.blit(var1, RealmsPlayerScreen.this.column1X + 2 + 2, var4 + 1, 8, 8, 40.0F, 8.0F, 8, 8, 64, 64);
-         });
-      }
    }
 
-   class InvitedObjectSelectionList extends RealmsObjectSelectionList<RealmsPlayerScreen.Entry> {
+   private class InvitedObjectSelectionList extends RealmsObjectSelectionList<RealmsPlayerScreen.Entry> {
       public InvitedObjectSelectionList() {
          super(RealmsPlayerScreen.this.columnWidth + 10, RealmsPlayerScreen.row(12) + 20, RealmsPlayerScreen.row(1), RealmsPlayerScreen.row(12) + 20, 13);
       }
 
       public void addEntry(PlayerInfo var1) {
@@ -366,15 +336,11 @@
 
          }
       }
 
       public void selectItem(int var1) {
-         this.setSelectedItem(var1);
-         if (var1 != -1) {
-            NarrationHelper.now(I18n.get("narrator.select", ((PlayerInfo)RealmsPlayerScreen.this.serverData.players.get(var1)).getName()));
-         }
-
+         super.selectItem(var1);
          this.selectInviteListItem(var1);
       }
 
       public void selectInviteListItem(int var1) {
          RealmsPlayerScreen.this.player = var1;
@@ -398,14 +364,46 @@
       public int getMaxPosition() {
          return this.getItemCount() * 13;
       }
    }
 
-   static enum UserAction {
-      TOGGLE_OP,
-      REMOVE,
-      NONE;
+   class Entry extends ObjectSelectionList.Entry<RealmsPlayerScreen.Entry> {
+      private final PlayerInfo playerInfo;
 
-      private UserAction() {
+      public Entry(PlayerInfo var2) {
+         this.playerInfo = var2;
       }
+
+      public void render(PoseStack var1, int var2, int var3, int var4, int var5, int var6, int var7, int var8, boolean var9, float var10) {
+         this.renderInvitedItem(var1, this.playerInfo, var4, var3, var7, var8);
+      }
+
+      private void renderInvitedItem(PoseStack var1, PlayerInfo var2, int var3, int var4, int var5, int var6) {
+         int var7;
+         if (!var2.getAccepted()) {
+            var7 = 10526880;
+         } else if (var2.getOnline()) {
+            var7 = 8388479;
+         } else {
+            var7 = 16777215;
+         }
+
+         RealmsPlayerScreen.this.font.draw(var1, var2.getName(), (float)(RealmsPlayerScreen.this.column1X + 3 + 12), (float)(var4 + 1), var7);
+         if (var2.isOperator()) {
+            RealmsPlayerScreen.this.drawOpped(var1, RealmsPlayerScreen.this.column1X + RealmsPlayerScreen.this.columnWidth - 10, var4 + 1, var5, var6);
+         } else {
+            RealmsPlayerScreen.this.drawNormal(var1, RealmsPlayerScreen.this.column1X + RealmsPlayerScreen.this.columnWidth - 10, var4 + 1, var5, var6);
+         }
+
+         RealmsPlayerScreen.this.drawRemoveIcon(var1, RealmsPlayerScreen.this.column1X + RealmsPlayerScreen.this.columnWidth - 22, var4 + 2, var5, var6);
+         RealmsTextureManager.withBoundFace(var2.getUuid(), () -> {
+            RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
+            GuiComponent.blit(var1, RealmsPlayerScreen.this.column1X + 2 + 2, var4 + 1, 8, 8, 8.0F, 8.0F, 8, 8, 64, 64);
+            GuiComponent.blit(var1, RealmsPlayerScreen.this.column1X + 2 + 2, var4 + 1, 8, 8, 40.0F, 8.0F, 8, 8, 64, 64);
+         });
+      }
+
+      public Component getNarration() {
+         return new TranslatableComponent("narrator.select", new Object[]{this.playerInfo.getName()});
+      }
    }
 }
