--- com/mojang/realmsclient/gui/screens/RealmsSlotOptionsScreen.java
+++ com/mojang/realmsclient/gui/screens/RealmsSlotOptionsScreen.java
@@ -1,53 +1,49 @@
 package com.mojang.realmsclient.gui.screens;
 
+import com.google.common.collect.ImmutableList;
 import com.mojang.blaze3d.vertex.PoseStack;
 import com.mojang.realmsclient.dto.RealmsServer;
 import com.mojang.realmsclient.dto.RealmsWorldOptions;
+import java.util.List;
 import net.minecraft.client.gui.components.AbstractSliderButton;
 import net.minecraft.client.gui.components.Button;
+import net.minecraft.client.gui.components.CycleButton;
 import net.minecraft.client.gui.components.EditBox;
 import net.minecraft.network.chat.CommonComponents;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.FormattedText;
 import net.minecraft.network.chat.TextComponent;
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.realms.RealmsLabel;
 import net.minecraft.realms.RealmsScreen;
 import net.minecraft.util.Mth;
+import net.minecraft.world.Difficulty;
+import net.minecraft.world.level.GameType;
 
 public class RealmsSlotOptionsScreen extends RealmsScreen {
-   public static final Component[] DIFFICULTIES = new Component[]{new TranslatableComponent("options.difficulty.peaceful"), new TranslatableComponent("options.difficulty.easy"), new TranslatableComponent("options.difficulty.normal"), new TranslatableComponent("options.difficulty.hard")};
-   public static final Component[] GAME_MODES = new Component[]{new TranslatableComponent("selectWorld.gameMode.survival"), new TranslatableComponent("selectWorld.gameMode.creative"), new TranslatableComponent("selectWorld.gameMode.adventure")};
-   private static final Component TEXT_ON = new TranslatableComponent("mco.configure.world.on");
-   private static final Component TEXT_OFF = new TranslatableComponent("mco.configure.world.off");
-   private static final Component GAME_MODE_LABEL = new TranslatableComponent("selectWorld.gameMode");
-   private static final Component NAME_LABEL = new TranslatableComponent("mco.configure.world.edit.slot.name");
+   public static final List<Difficulty> DIFFICULTIES;
+   public static final List<GameType> GAME_MODES;
+   private static final Component NAME_LABEL;
+   private static final Component SPAWN_PROTECTION_TEXT;
    private EditBox nameEdit;
    protected final RealmsConfigureWorldScreen parent;
    private int column1X;
    private int columnWidth;
-   private int column2X;
    private final RealmsWorldOptions options;
    private final RealmsServer.WorldType worldType;
    private final int activeSlot;
-   private int difficulty;
-   private int gameMode;
-   private Boolean pvp;
-   private Boolean spawnNPCs;
-   private Boolean spawnAnimals;
-   private Boolean spawnMonsters;
-   private Integer spawnProtection;
-   private Boolean commandBlocks;
-   private Boolean forceGameMode;
-   private Button pvpButton;
-   private Button spawnAnimalsButton;
-   private Button spawnMonstersButton;
-   private Button spawnNPCsButton;
+   private Difficulty difficulty;
+   private GameType gameMode;
+   private boolean pvp;
+   private boolean spawnNPCs;
+   private boolean spawnAnimals;
+   private boolean spawnMonsters;
+   private int spawnProtection;
+   private boolean commandBlocks;
+   private boolean forceGameMode;
    private RealmsSlotOptionsScreen.SettingsSlider spawnProtectionButton;
-   private Button commandBlocksButton;
-   private Button forceGameModeButton;
    private RealmsLabel titleLabel;
    private RealmsLabel warningLabel;
 
    public RealmsSlotOptionsScreen(RealmsConfigureWorldScreen var1, RealmsWorldOptions var2, RealmsServer.WorldType var3, int var4) {
       this.parent = var1;
@@ -71,35 +67,48 @@
       } else {
          return super.keyPressed(var1, var2, var3);
       }
    }
 
+   private static <T> T findByIndex(List<T> var0, int var1, int var2) {
+      try {
+         return var0.get(var1);
+      } catch (IndexOutOfBoundsException var4) {
+         return var0.get(var2);
+      }
+   }
+
+   private static <T> int findIndex(List<T> var0, T var1, int var2) {
+      int var3 = var0.indexOf(var1);
+      return var3 == -1 ? var2 : var3;
+   }
+
    public void init() {
       this.columnWidth = 170;
       this.column1X = this.width / 2 - this.columnWidth;
-      this.column2X = this.width / 2 + 10;
-      this.difficulty = this.options.difficulty;
-      this.gameMode = this.options.gameMode;
+      int var1 = this.width / 2 + 10;
+      this.difficulty = (Difficulty)findByIndex(DIFFICULTIES, this.options.difficulty, 2);
+      this.gameMode = (GameType)findByIndex(GAME_MODES, this.options.gameMode, 0);
       if (this.worldType == RealmsServer.WorldType.NORMAL) {
          this.pvp = this.options.pvp;
          this.spawnProtection = this.options.spawnProtection;
          this.forceGameMode = this.options.forceGameMode;
          this.spawnAnimals = this.options.spawnAnimals;
          this.spawnMonsters = this.options.spawnMonsters;
          this.spawnNPCs = this.options.spawnNPCs;
          this.commandBlocks = this.options.commandBlocks;
       } else {
-         TranslatableComponent var1;
+         TranslatableComponent var2;
          if (this.worldType == RealmsServer.WorldType.ADVENTUREMAP) {
-            var1 = new TranslatableComponent("mco.configure.world.edit.subscreen.adventuremap");
+            var2 = new TranslatableComponent("mco.configure.world.edit.subscreen.adventuremap");
          } else if (this.worldType == RealmsServer.WorldType.INSPIRATION) {
-            var1 = new TranslatableComponent("mco.configure.world.edit.subscreen.inspiration");
+            var2 = new TranslatableComponent("mco.configure.world.edit.subscreen.inspiration");
          } else {
-            var1 = new TranslatableComponent("mco.configure.world.edit.subscreen.experience");
+            var2 = new TranslatableComponent("mco.configure.world.edit.subscreen.experience");
          }
 
-         this.warningLabel = new RealmsLabel(var1, this.width / 2, 26, 16711680);
+         this.warningLabel = new RealmsLabel(var2, this.width / 2, 26, 16711680);
          this.pvp = true;
          this.spawnProtection = 0;
          this.forceGameMode = false;
          this.spawnAnimals = true;
          this.spawnMonsters = true;
@@ -109,66 +118,60 @@
 
       this.nameEdit = new EditBox(this.minecraft.font, this.column1X + 2, row(1), this.columnWidth - 4, 20, (EditBox)null, new TranslatableComponent("mco.configure.world.edit.slot.name"));
       this.nameEdit.setMaxLength(10);
       this.nameEdit.setValue(this.options.getSlotName(this.activeSlot));
       this.magicalSpecialHackyFocus(this.nameEdit);
-      this.pvpButton = (Button)this.addButton(new Button(this.column2X, row(1), this.columnWidth, 20, this.pvpTitle(), (var1x) -> {
-         this.pvp = !this.pvp;
-         var1x.setMessage(this.pvpTitle());
+      CycleButton var8 = (CycleButton)this.addButton(CycleButton.onOffBuilder(this.pvp).create(var1, row(1), this.columnWidth, 20, new TranslatableComponent("mco.configure.world.pvp"), (var1x, var2x) -> {
+         this.pvp = var2x;
       }));
-      this.addButton(new Button(this.column1X, row(3), this.columnWidth, 20, this.gameModeTitle(), (var1x) -> {
-         this.gameMode = (this.gameMode + 1) % GAME_MODES.length;
-         var1x.setMessage(this.gameModeTitle());
+      this.addButton(CycleButton.builder(GameType::getShortDisplayName).withValues(GAME_MODES).withInitialValue(this.gameMode).create(this.column1X, row(3), this.columnWidth, 20, new TranslatableComponent("selectWorld.gameMode"), (var1x, var2x) -> {
+         this.gameMode = var2x;
       }));
-      this.spawnAnimalsButton = (Button)this.addButton(new Button(this.column2X, row(3), this.columnWidth, 20, this.spawnAnimalsTitle(), (var1x) -> {
-         this.spawnAnimals = !this.spawnAnimals;
-         var1x.setMessage(this.spawnAnimalsTitle());
+      CycleButton var3 = (CycleButton)this.addButton(CycleButton.onOffBuilder(this.spawnAnimals).create(var1, row(3), this.columnWidth, 20, new TranslatableComponent("mco.configure.world.spawnAnimals"), (var1x, var2x) -> {
+         this.spawnAnimals = var2x;
       }));
-      this.addButton(new Button(this.column1X, row(5), this.columnWidth, 20, this.difficultyTitle(), (var1x) -> {
-         this.difficulty = (this.difficulty + 1) % DIFFICULTIES.length;
-         var1x.setMessage(this.difficultyTitle());
+      CycleButton var4 = CycleButton.onOffBuilder(this.difficulty != Difficulty.PEACEFUL && this.spawnMonsters).create(var1, row(5), this.columnWidth, 20, new TranslatableComponent("mco.configure.world.spawnMonsters"), (var1x, var2x) -> {
+         this.spawnMonsters = var2x;
+      });
+      this.addButton(CycleButton.builder(Difficulty::getDisplayName).withValues(DIFFICULTIES).withInitialValue(this.difficulty).create(this.column1X, row(5), this.columnWidth, 20, new TranslatableComponent("options.difficulty"), (var2x, var3x) -> {
+         this.difficulty = var3x;
          if (this.worldType == RealmsServer.WorldType.NORMAL) {
-            this.spawnMonstersButton.active = this.difficulty != 0;
-            this.spawnMonstersButton.setMessage(this.spawnMonstersTitle());
+            boolean var4x = this.difficulty != Difficulty.PEACEFUL;
+            var4.active = var4x;
+            var4.setValue(var4x && this.spawnMonsters);
          }
 
       }));
-      this.spawnMonstersButton = (Button)this.addButton(new Button(this.column2X, row(5), this.columnWidth, 20, this.spawnMonstersTitle(), (var1x) -> {
-         this.spawnMonsters = !this.spawnMonsters;
-         var1x.setMessage(this.spawnMonstersTitle());
-      }));
+      this.addButton(var4);
       this.spawnProtectionButton = (RealmsSlotOptionsScreen.SettingsSlider)this.addButton(new RealmsSlotOptionsScreen.SettingsSlider(this.column1X, row(7), this.columnWidth, this.spawnProtection, 0.0F, 16.0F));
-      this.spawnNPCsButton = (Button)this.addButton(new Button(this.column2X, row(7), this.columnWidth, 20, this.spawnNPCsTitle(), (var1x) -> {
-         this.spawnNPCs = !this.spawnNPCs;
-         var1x.setMessage(this.spawnNPCsTitle());
+      CycleButton var5 = (CycleButton)this.addButton(CycleButton.onOffBuilder(this.spawnNPCs).create(var1, row(7), this.columnWidth, 20, new TranslatableComponent("mco.configure.world.spawnNPCs"), (var1x, var2x) -> {
+         this.spawnNPCs = var2x;
       }));
-      this.forceGameModeButton = (Button)this.addButton(new Button(this.column1X, row(9), this.columnWidth, 20, this.forceGameModeTitle(), (var1x) -> {
-         this.forceGameMode = !this.forceGameMode;
-         var1x.setMessage(this.forceGameModeTitle());
+      CycleButton var6 = (CycleButton)this.addButton(CycleButton.onOffBuilder(this.forceGameMode).create(this.column1X, row(9), this.columnWidth, 20, new TranslatableComponent("mco.configure.world.forceGameMode"), (var1x, var2x) -> {
+         this.forceGameMode = var2x;
       }));
-      this.commandBlocksButton = (Button)this.addButton(new Button(this.column2X, row(9), this.columnWidth, 20, this.commandBlocksTitle(), (var1x) -> {
-         this.commandBlocks = !this.commandBlocks;
-         var1x.setMessage(this.commandBlocksTitle());
+      CycleButton var7 = (CycleButton)this.addButton(CycleButton.onOffBuilder(this.commandBlocks).create(var1, row(9), this.columnWidth, 20, new TranslatableComponent("mco.configure.world.commandBlocks"), (var1x, var2x) -> {
+         this.commandBlocks = var2x;
       }));
       if (this.worldType != RealmsServer.WorldType.NORMAL) {
-         this.pvpButton.active = false;
-         this.spawnAnimalsButton.active = false;
-         this.spawnNPCsButton.active = false;
-         this.spawnMonstersButton.active = false;
+         var8.active = false;
+         var3.active = false;
+         var5.active = false;
+         var4.active = false;
          this.spawnProtectionButton.active = false;
-         this.commandBlocksButton.active = false;
-         this.forceGameModeButton.active = false;
+         var7.active = false;
+         var6.active = false;
       }
 
-      if (this.difficulty == 0) {
-         this.spawnMonstersButton.active = false;
+      if (this.difficulty == Difficulty.PEACEFUL) {
+         var4.active = false;
       }
 
       this.addButton(new Button(this.column1X, row(13), this.columnWidth, 20, new TranslatableComponent("mco.configure.world.buttons.done"), (var1x) -> {
          this.saveSettings();
       }));
-      this.addButton(new Button(this.column2X, row(13), this.columnWidth, 20, CommonComponents.GUI_CANCEL, (var1x) -> {
+      this.addButton(new Button(var1, row(13), this.columnWidth, 20, CommonComponents.GUI_CANCEL, (var1x) -> {
          this.minecraft.setScreen(this.parent);
       }));
       this.addWidget(this.nameEdit);
       this.titleLabel = (RealmsLabel)this.addWidget(new RealmsLabel(new TranslatableComponent("mco.configure.world.buttons.options"), this.width / 2, 17, 16777215));
       if (this.warningLabel != null) {
@@ -176,46 +179,10 @@
       }
 
       this.narrateLabels();
    }
 
-   private Component difficultyTitle() {
-      return (new TranslatableComponent("options.difficulty")).append(": ").append(DIFFICULTIES[this.difficulty]);
-   }
-
-   private Component gameModeTitle() {
-      return new TranslatableComponent("options.generic_value", new Object[]{GAME_MODE_LABEL, GAME_MODES[this.gameMode]});
-   }
-
-   private Component pvpTitle() {
-      return (new TranslatableComponent("mco.configure.world.pvp")).append(": ").append(getOnOff(this.pvp));
-   }
-
-   private Component spawnAnimalsTitle() {
-      return (new TranslatableComponent("mco.configure.world.spawnAnimals")).append(": ").append(getOnOff(this.spawnAnimals));
-   }
-
-   private Component spawnMonstersTitle() {
-      return this.difficulty == 0 ? (new TranslatableComponent("mco.configure.world.spawnMonsters")).append(": ").append((Component)(new TranslatableComponent("mco.configure.world.off"))) : (new TranslatableComponent("mco.configure.world.spawnMonsters")).append(": ").append(getOnOff(this.spawnMonsters));
-   }
-
-   private Component spawnNPCsTitle() {
-      return (new TranslatableComponent("mco.configure.world.spawnNPCs")).append(": ").append(getOnOff(this.spawnNPCs));
-   }
-
-   private Component commandBlocksTitle() {
-      return (new TranslatableComponent("mco.configure.world.commandBlocks")).append(": ").append(getOnOff(this.commandBlocks));
-   }
-
-   private Component forceGameModeTitle() {
-      return (new TranslatableComponent("mco.configure.world.forceGameMode")).append(": ").append(getOnOff(this.forceGameMode));
-   }
-
-   private static Component getOnOff(boolean var0) {
-      return var0 ? TEXT_ON : TEXT_OFF;
-   }
-
    public void render(PoseStack var1, int var2, int var3, float var4) {
       this.renderBackground(var1);
       this.font.draw(var1, NAME_LABEL, (float)(this.column1X + this.columnWidth / 2 - this.font.width((FormattedText)NAME_LABEL) / 2), (float)(row(0) - 5), 16777215);
       this.titleLabel.render(this, var1);
       if (this.warningLabel != null) {
@@ -229,18 +196,27 @@
    private String getSlotName() {
       return this.nameEdit.getValue().equals(this.options.getDefaultSlotName(this.activeSlot)) ? "" : this.nameEdit.getValue();
    }
 
    private void saveSettings() {
+      int var1 = findIndex(DIFFICULTIES, this.difficulty, 2);
+      int var2 = findIndex(GAME_MODES, this.gameMode, 0);
       if (this.worldType != RealmsServer.WorldType.ADVENTUREMAP && this.worldType != RealmsServer.WorldType.EXPERIENCE && this.worldType != RealmsServer.WorldType.INSPIRATION) {
-         this.parent.saveSlotSettings(new RealmsWorldOptions(this.pvp, this.spawnAnimals, this.spawnMonsters, this.spawnNPCs, this.spawnProtection, this.commandBlocks, this.difficulty, this.gameMode, this.forceGameMode, this.getSlotName()));
+         this.parent.saveSlotSettings(new RealmsWorldOptions(this.pvp, this.spawnAnimals, this.spawnMonsters, this.spawnNPCs, this.spawnProtection, this.commandBlocks, var1, var2, this.forceGameMode, this.getSlotName()));
       } else {
-         this.parent.saveSlotSettings(new RealmsWorldOptions(this.options.pvp, this.options.spawnAnimals, this.options.spawnMonsters, this.options.spawnNPCs, this.options.spawnProtection, this.options.commandBlocks, this.difficulty, this.gameMode, this.options.forceGameMode, this.getSlotName()));
+         this.parent.saveSlotSettings(new RealmsWorldOptions(this.options.pvp, this.options.spawnAnimals, this.options.spawnMonsters, this.options.spawnNPCs, this.options.spawnProtection, this.options.commandBlocks, var1, var2, this.options.forceGameMode, this.getSlotName()));
       }
 
    }
 
+   static {
+      DIFFICULTIES = ImmutableList.of(Difficulty.PEACEFUL, Difficulty.EASY, Difficulty.NORMAL, Difficulty.HARD);
+      GAME_MODES = ImmutableList.of(GameType.SURVIVAL, GameType.CREATIVE, GameType.ADVENTURE);
+      NAME_LABEL = new TranslatableComponent("mco.configure.world.edit.slot.name");
+      SPAWN_PROTECTION_TEXT = new TranslatableComponent("mco.configure.world.spawnProtection");
+   }
+
    class SettingsSlider extends AbstractSliderButton {
       private final double minValue;
       private final double maxValue;
 
       public SettingsSlider(int var2, int var3, int var4, int var5, float var6, float var7) {
@@ -256,11 +232,11 @@
             RealmsSlotOptionsScreen.this.spawnProtection = (int)Mth.lerp(Mth.clamp(this.value, 0.0D, 1.0D), this.minValue, this.maxValue);
          }
       }
 
       protected void updateMessage() {
-         this.setMessage((new TranslatableComponent("mco.configure.world.spawnProtection")).append(": ").append((Component)(RealmsSlotOptionsScreen.this.spawnProtection == 0 ? new TranslatableComponent("mco.configure.world.off") : new TextComponent(String.valueOf(RealmsSlotOptionsScreen.this.spawnProtection)))));
+         this.setMessage(CommonComponents.optionNameValue(RealmsSlotOptionsScreen.SPAWN_PROTECTION_TEXT, (Component)(RealmsSlotOptionsScreen.this.spawnProtection == 0 ? CommonComponents.OPTION_OFF : new TextComponent(String.valueOf(RealmsSlotOptionsScreen.this.spawnProtection)))));
       }
 
       public void onClick(double var1, double var3) {
       }
 
