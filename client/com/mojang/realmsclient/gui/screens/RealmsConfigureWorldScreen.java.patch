--- com/mojang/realmsclient/gui/screens/RealmsConfigureWorldScreen.java
+++ com/mojang/realmsclient/gui/screens/RealmsConfigureWorldScreen.java
@@ -1,7 +1,8 @@
 package com.mojang.realmsclient.gui.screens;
 
+import com.google.common.collect.Lists;
 import com.mojang.blaze3d.systems.RenderSystem;
 import com.mojang.blaze3d.vertex.PoseStack;
 import com.mojang.realmsclient.RealmsMainScreen;
 import com.mojang.realmsclient.client.RealmsClient;
 import com.mojang.realmsclient.dto.RealmsServer;
@@ -11,36 +12,40 @@
 import com.mojang.realmsclient.gui.RealmsWorldSlotButton;
 import com.mojang.realmsclient.util.task.CloseServerTask;
 import com.mojang.realmsclient.util.task.OpenServerTask;
 import com.mojang.realmsclient.util.task.SwitchMinigameTask;
 import com.mojang.realmsclient.util.task.SwitchSlotTask;
+import java.util.List;
 import javax.annotation.Nullable;
 import net.minecraft.client.gui.GuiComponent;
 import net.minecraft.client.gui.components.Button;
 import net.minecraft.client.gui.screens.Screen;
 import net.minecraft.network.chat.CommonComponents;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.FormattedText;
 import net.minecraft.network.chat.TranslatableComponent;
+import net.minecraft.realms.RealmsScreen;
 import net.minecraft.resources.ResourceLocation;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class RealmsConfigureWorldScreen extends RealmsScreenWithCallback {
+public class RealmsConfigureWorldScreen extends RealmsScreen {
    private static final Logger LOGGER = LogManager.getLogger();
    private static final ResourceLocation ON_ICON_LOCATION = new ResourceLocation("realms", "textures/gui/realms/on_icon.png");
    private static final ResourceLocation OFF_ICON_LOCATION = new ResourceLocation("realms", "textures/gui/realms/off_icon.png");
    private static final ResourceLocation EXPIRED_ICON_LOCATION = new ResourceLocation("realms", "textures/gui/realms/expired_icon.png");
    private static final ResourceLocation EXPIRES_SOON_ICON_LOCATION = new ResourceLocation("realms", "textures/gui/realms/expires_soon_icon.png");
-   private static final Component TITLE = new TranslatableComponent("mco.configure.worlds.title");
-   private static final Component WORLD_TITLE = new TranslatableComponent("mco.configure.world.title");
+   private static final Component WORLD_LIST_TITLE = new TranslatableComponent("mco.configure.worlds.title");
+   private static final Component TITLE = new TranslatableComponent("mco.configure.world.title");
    private static final Component MINIGAME_PREFIX = (new TranslatableComponent("mco.configure.current.minigame")).append(": ");
    private static final Component SERVER_EXPIRED_TOOLTIP = new TranslatableComponent("mco.selectServer.expired");
    private static final Component SERVER_EXPIRING_SOON_TOOLTIP = new TranslatableComponent("mco.selectServer.expires.soon");
    private static final Component SERVER_EXPIRING_IN_DAY_TOOLTIP = new TranslatableComponent("mco.selectServer.expires.day");
    private static final Component SERVER_OPEN_TOOLTIP = new TranslatableComponent("mco.selectServer.open");
    private static final Component SERVER_CLOSED_TOOLTIP = new TranslatableComponent("mco.selectServer.closed");
+   private static final int DEFAULT_BUTTON_WIDTH = 80;
+   private static final int DEFAULT_BUTTON_OFFSET = 5;
    @Nullable
    private Component toolTip;
    private final RealmsMainScreen lastScreen;
    @Nullable
    private RealmsServer serverData;
@@ -55,12 +60,14 @@
    private Button resetWorldButton;
    private Button switchMinigameButton;
    private boolean stateChanged;
    private int animTick;
    private int clicks;
+   private final List<RealmsWorldSlotButton> slotButtonList = Lists.newArrayList();
 
    public RealmsConfigureWorldScreen(RealmsMainScreen var1, long var2) {
+      super(TITLE);
       this.lastScreen = var1;
       this.serverId = var2;
    }
 
    public void init() {
@@ -69,43 +76,44 @@
       }
 
       this.leftX = this.width / 2 - 187;
       this.rightX = this.width / 2 + 190;
       this.minecraft.keyboardHandler.setSendRepeatsToGui(true);
-      this.playersButton = (Button)this.addButton(new Button(this.centerButton(0, 3), row(0), 100, 20, new TranslatableComponent("mco.configure.world.buttons.players"), (var1x) -> {
+      this.playersButton = (Button)this.addRenderableWidget(new Button(this.centerButton(0, 3), row(0), 100, 20, new TranslatableComponent("mco.configure.world.buttons.players"), (var1x) -> {
          this.minecraft.setScreen(new RealmsPlayerScreen(this, this.serverData));
       }));
-      this.settingsButton = (Button)this.addButton(new Button(this.centerButton(1, 3), row(0), 100, 20, new TranslatableComponent("mco.configure.world.buttons.settings"), (var1x) -> {
+      this.settingsButton = (Button)this.addRenderableWidget(new Button(this.centerButton(1, 3), row(0), 100, 20, new TranslatableComponent("mco.configure.world.buttons.settings"), (var1x) -> {
          this.minecraft.setScreen(new RealmsSettingsScreen(this, this.serverData.clone()));
       }));
-      this.subscriptionButton = (Button)this.addButton(new Button(this.centerButton(2, 3), row(0), 100, 20, new TranslatableComponent("mco.configure.world.buttons.subscription"), (var1x) -> {
+      this.subscriptionButton = (Button)this.addRenderableWidget(new Button(this.centerButton(2, 3), row(0), 100, 20, new TranslatableComponent("mco.configure.world.buttons.subscription"), (var1x) -> {
          this.minecraft.setScreen(new RealmsSubscriptionInfoScreen(this, this.serverData.clone(), this.lastScreen));
       }));
+      this.slotButtonList.clear();
 
       for(int var1 = 1; var1 < 5; ++var1) {
-         this.addSlotButton(var1);
+         this.slotButtonList.add(this.addSlotButton(var1));
       }
 
-      this.switchMinigameButton = (Button)this.addButton(new Button(this.leftButton(0), row(13) - 5, 100, 20, new TranslatableComponent("mco.configure.world.buttons.switchminigame"), (var1x) -> {
-         RealmsSelectWorldTemplateScreen var2 = new RealmsSelectWorldTemplateScreen(this, RealmsServer.WorldType.MINIGAME);
-         var2.setTitle(new TranslatableComponent("mco.template.title.minigame"));
-         this.minecraft.setScreen(var2);
+      this.switchMinigameButton = (Button)this.addRenderableWidget(new Button(this.leftButton(0), row(13) - 5, 100, 20, new TranslatableComponent("mco.configure.world.buttons.switchminigame"), (var1x) -> {
+         this.minecraft.setScreen(new RealmsSelectWorldTemplateScreen(new TranslatableComponent("mco.template.title.minigame"), this::templateSelectionCallback, RealmsServer.WorldType.MINIGAME));
       }));
-      this.optionsButton = (Button)this.addButton(new Button(this.leftButton(0), row(13) - 5, 90, 20, new TranslatableComponent("mco.configure.world.buttons.options"), (var1x) -> {
+      this.optionsButton = (Button)this.addRenderableWidget(new Button(this.leftButton(0), row(13) - 5, 90, 20, new TranslatableComponent("mco.configure.world.buttons.options"), (var1x) -> {
          this.minecraft.setScreen(new RealmsSlotOptionsScreen(this, ((RealmsWorldOptions)this.serverData.slots.get(this.serverData.activeSlot)).clone(), this.serverData.worldType, this.serverData.activeSlot));
       }));
-      this.backupButton = (Button)this.addButton(new Button(this.leftButton(1), row(13) - 5, 90, 20, new TranslatableComponent("mco.configure.world.backup"), (var1x) -> {
+      this.backupButton = (Button)this.addRenderableWidget(new Button(this.leftButton(1), row(13) - 5, 90, 20, new TranslatableComponent("mco.configure.world.backup"), (var1x) -> {
          this.minecraft.setScreen(new RealmsBackupScreen(this, this.serverData.clone(), this.serverData.activeSlot));
       }));
-      this.resetWorldButton = (Button)this.addButton(new Button(this.leftButton(2), row(13) - 5, 90, 20, new TranslatableComponent("mco.configure.world.buttons.resetworld"), (var1x) -> {
+      this.resetWorldButton = (Button)this.addRenderableWidget(new Button(this.leftButton(2), row(13) - 5, 90, 20, new TranslatableComponent("mco.configure.world.buttons.resetworld"), (var1x) -> {
          this.minecraft.setScreen(new RealmsResetWorldScreen(this, this.serverData.clone(), () -> {
-            this.minecraft.setScreen(this.getNewScreen());
+            this.minecraft.execute(() -> {
+               this.minecraft.setScreen(this.getNewScreen());
+            });
          }, () -> {
             this.minecraft.setScreen(this.getNewScreen());
          }));
       }));
-      this.addButton(new Button(this.rightX - 80 + 8, row(13) - 5, 70, 20, CommonComponents.GUI_BACK, (var1x) -> {
+      this.addRenderableWidget(new Button(this.rightX - 80 + 8, row(13) - 5, 70, 20, CommonComponents.GUI_BACK, (var1x) -> {
          this.backButtonClicked();
       }));
       this.backupButton.active = true;
       if (this.serverData == null) {
          this.hideMinigameButtons();
@@ -122,11 +130,11 @@
          }
       }
 
    }
 
-   private void addSlotButton(int var1) {
+   private RealmsWorldSlotButton addSlotButton(int var1) {
       int var2 = this.frame(var1);
       int var3 = row(5) + 5;
       RealmsWorldSlotButton var4 = new RealmsWorldSlotButton(var2, var3, 80, 80, () -> {
          return this.serverData;
       }, (var1x) -> {
@@ -153,11 +161,11 @@
                throw new IllegalStateException("Unknown action " + var3.action);
             }
          }
 
       });
-      this.addButton(var4);
+      return (RealmsWorldSlotButton)this.addRenderableWidget(var4);
    }
 
    private int leftButton(int var1) {
       return this.leftX + var1 * 95;
    }
@@ -172,25 +180,26 @@
       --this.clicks;
       if (this.clicks < 0) {
          this.clicks = 0;
       }
 
+      this.slotButtonList.forEach(RealmsWorldSlotButton::tick);
    }
 
    public void render(PoseStack var1, int var2, int var3, float var4) {
       this.toolTip = null;
       this.renderBackground(var1);
-      drawCenteredString(var1, this.font, TITLE, this.width / 2, row(4), 16777215);
+      drawCenteredString(var1, this.font, WORLD_LIST_TITLE, this.width / 2, row(4), 16777215);
       super.render(var1, var2, var3, var4);
       if (this.serverData == null) {
-         drawCenteredString(var1, this.font, WORLD_TITLE, this.width / 2, 17, 16777215);
+         drawCenteredString(var1, this.font, this.title, this.width / 2, 17, 16777215);
       } else {
          String var5 = this.serverData.getName();
          int var6 = this.font.width(var5);
          int var7 = this.serverData.state == RealmsServer.State.CLOSED ? 10526880 : 8388479;
-         int var8 = this.font.width((FormattedText)WORLD_TITLE);
-         drawCenteredString(var1, this.font, WORLD_TITLE, this.width / 2, 12, 16777215);
+         int var8 = this.font.width((FormattedText)this.title);
+         drawCenteredString(var1, this.font, this.title, this.width / 2, 12, 16777215);
          drawCenteredString(var1, this.font, var5, this.width / 2, 24, var7);
          int var9 = Math.min(this.centerButton(2, 3) + 80 - 11, this.width / 2 + var6 / 2 + var8 / 2 + 10);
          this.drawServerStatus(var1, var9, 7, var2, var3);
          if (this.isMinigame()) {
             this.font.draw(var1, (Component)MINIGAME_PREFIX.copy().append(this.serverData.getMinigameName()), (float)(this.leftX + 80 + 20 + 10), (float)row(13), 16777215);
@@ -269,23 +278,24 @@
       }
 
    }
 
    private void switchToMinigame() {
-      RealmsSelectWorldTemplateScreen var1 = new RealmsSelectWorldTemplateScreen(this, RealmsServer.WorldType.MINIGAME);
-      var1.setTitle(new TranslatableComponent("mco.template.title.minigame"));
+      RealmsSelectWorldTemplateScreen var1 = new RealmsSelectWorldTemplateScreen(new TranslatableComponent("mco.template.title.minigame"), this::templateSelectionCallback, RealmsServer.WorldType.MINIGAME);
       var1.setWarning(new TranslatableComponent("mco.minigame.world.info.line1"), new TranslatableComponent("mco.minigame.world.info.line2"));
       this.minecraft.setScreen(var1);
    }
 
    private void switchToFullSlot(int var1, RealmsServer var2) {
       TranslatableComponent var3 = new TranslatableComponent("mco.configure.world.slot.switch.question.line1");
       TranslatableComponent var4 = new TranslatableComponent("mco.configure.world.slot.switch.question.line2");
       this.minecraft.setScreen(new RealmsLongConfirmationScreen((var3x) -> {
          if (var3x) {
             this.minecraft.setScreen(new RealmsLongRunningMcoTaskScreen(this.lastScreen, new SwitchSlotTask(var2.id, var1, () -> {
-               this.minecraft.setScreen(this.getNewScreen());
+               this.minecraft.execute(() -> {
+                  this.minecraft.setScreen(this.getNewScreen());
+               });
             })));
          } else {
             this.minecraft.setScreen(this);
          }
 
@@ -296,11 +306,13 @@
       TranslatableComponent var3 = new TranslatableComponent("mco.configure.world.slot.switch.question.line1");
       TranslatableComponent var4 = new TranslatableComponent("mco.configure.world.slot.switch.question.line2");
       this.minecraft.setScreen(new RealmsLongConfirmationScreen((var3x) -> {
          if (var3x) {
             RealmsResetWorldScreen var4 = new RealmsResetWorldScreen(this, var2, new TranslatableComponent("mco.configure.world.switch.slot"), new TranslatableComponent("mco.configure.world.switch.slot.subtitle"), 10526880, CommonComponents.GUI_CANCEL, () -> {
-               this.minecraft.setScreen(this.getNewScreen());
+               this.minecraft.execute(() -> {
+                  this.minecraft.setScreen(this.getNewScreen());
+               });
             }, () -> {
                this.minecraft.setScreen(this.getNewScreen());
             });
             var4.setSlot(var1);
             var4.setResetTitle(new TranslatableComponent("mco.create.world.reset.title"));
@@ -338,22 +350,22 @@
       }
 
    }
 
    private void drawExpired(PoseStack var1, int var2, int var3, int var4, int var5) {
-      this.minecraft.getTextureManager().bind(EXPIRED_ICON_LOCATION);
-      RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
+      RenderSystem.setShaderTexture(0, EXPIRED_ICON_LOCATION);
+      RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
       GuiComponent.blit(var1, var2, var3, 0.0F, 0.0F, 10, 28, 10, 28);
       if (var4 >= var2 && var4 <= var2 + 9 && var5 >= var3 && var5 <= var3 + 27) {
          this.toolTip = SERVER_EXPIRED_TOOLTIP;
       }
 
    }
 
    private void drawExpiring(PoseStack var1, int var2, int var3, int var4, int var5, int var6) {
-      this.minecraft.getTextureManager().bind(EXPIRES_SOON_ICON_LOCATION);
-      RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
+      RenderSystem.setShaderTexture(0, EXPIRES_SOON_ICON_LOCATION);
+      RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
       if (this.animTick % 20 < 10) {
          GuiComponent.blit(var1, var2, var3, 0.0F, 0.0F, 10, 28, 20, 28);
       } else {
          GuiComponent.blit(var1, var2, var3, 10.0F, 0.0F, 10, 28, 20, 28);
       }
@@ -369,22 +381,22 @@
       }
 
    }
 
    private void drawOpen(PoseStack var1, int var2, int var3, int var4, int var5) {
-      this.minecraft.getTextureManager().bind(ON_ICON_LOCATION);
-      RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
+      RenderSystem.setShaderTexture(0, ON_ICON_LOCATION);
+      RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
       GuiComponent.blit(var1, var2, var3, 0.0F, 0.0F, 10, 28, 10, 28);
       if (var4 >= var2 && var4 <= var2 + 9 && var5 >= var3 && var5 <= var3 + 27) {
          this.toolTip = SERVER_OPEN_TOOLTIP;
       }
 
    }
 
    private void drawClose(PoseStack var1, int var2, int var3, int var4, int var5) {
-      this.minecraft.getTextureManager().bind(OFF_ICON_LOCATION);
-      RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
+      RenderSystem.setShaderTexture(0, OFF_ICON_LOCATION);
+      RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
       GuiComponent.blit(var1, var2, var3, 0.0F, 0.0F, 10, 28, 10, 28);
       if (var4 >= var2 && var4 <= var2 + 9 && var5 >= var3 && var5 <= var3 + 27) {
          this.toolTip = SERVER_CLOSED_TOOLTIP;
       }
 
@@ -400,17 +412,16 @@
       this.hide(this.resetWorldButton);
    }
 
    private void hide(Button var1) {
       var1.visible = false;
-      this.children.remove(var1);
-      this.buttons.remove(var1);
+      this.removeWidget(var1);
    }
 
    private void show(Button var1) {
       var1.visible = true;
-      this.addButton(var1);
+      this.addRenderableWidget(var1);
    }
 
    private void hideMinigameButtons() {
       this.hide(this.switchMinigameButton);
    }
@@ -460,17 +471,17 @@
 
    public void stateChanged() {
       this.stateChanged = true;
    }
 
-   protected void callback(@Nullable WorldTemplate var1) {
-      if (var1 != null) {
-         if (WorldTemplate.WorldTemplateType.MINIGAME == var1.type) {
-            this.minecraft.setScreen(new RealmsLongRunningMcoTaskScreen(this.lastScreen, new SwitchMinigameTask(this.serverData.id, var1, this.getNewScreen())));
-         }
-
+   private void templateSelectionCallback(@Nullable WorldTemplate var1) {
+      if (var1 != null && WorldTemplate.WorldTemplateType.MINIGAME == var1.type) {
+         this.minecraft.setScreen(new RealmsLongRunningMcoTaskScreen(this.lastScreen, new SwitchMinigameTask(this.serverData.id, var1, this.getNewScreen())));
+      } else {
+         this.minecraft.setScreen(this);
       }
+
    }
 
    public RealmsConfigureWorldScreen getNewScreen() {
       return new RealmsConfigureWorldScreen(this.lastScreen, this.serverId);
    }
