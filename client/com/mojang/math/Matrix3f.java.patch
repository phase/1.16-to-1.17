--- com/mojang/math/Matrix3f.java
+++ com/mojang/math/Matrix3f.java
@@ -1,12 +1,14 @@
 package com.mojang.math;
 
 import com.mojang.datafixers.util.Pair;
+import java.nio.FloatBuffer;
 import net.minecraft.util.Mth;
 import org.apache.commons.lang3.tuple.Triple;
 
 public final class Matrix3f {
+   private static final int ORDER = 3;
    private static final float G = 3.0F + 2.0F * (float)Math.sqrt(2.0D);
    private static final float CS = (float)Math.cos(0.39269908169872414D);
    private static final float SS = (float)Math.sin(0.39269908169872414D);
    private static final float SQ2 = 1.0F / (float)Math.sqrt(2.0D);
    protected float m00;
@@ -180,10 +182,64 @@
       }
 
       return var2;
    }
 
+   private static void sortSingularValues(Matrix3f var0, Quaternion var1) {
+      float var3 = var0.m00 * var0.m00 + var0.m10 * var0.m10 + var0.m20 * var0.m20;
+      float var4 = var0.m01 * var0.m01 + var0.m11 * var0.m11 + var0.m21 * var0.m21;
+      float var5 = var0.m02 * var0.m02 + var0.m12 * var0.m12 + var0.m22 * var0.m22;
+      float var2;
+      Quaternion var6;
+      if (var3 < var4) {
+         var2 = var0.m10;
+         var0.m10 = -var0.m00;
+         var0.m00 = var2;
+         var2 = var0.m11;
+         var0.m11 = -var0.m01;
+         var0.m01 = var2;
+         var2 = var0.m12;
+         var0.m12 = -var0.m02;
+         var0.m02 = var2;
+         var6 = new Quaternion(0.0F, 0.0F, SQ2, SQ2);
+         var1.mul(var6);
+         var2 = var3;
+         var3 = var4;
+         var4 = var2;
+      }
+
+      if (var3 < var5) {
+         var2 = var0.m20;
+         var0.m20 = -var0.m00;
+         var0.m00 = var2;
+         var2 = var0.m21;
+         var0.m21 = -var0.m01;
+         var0.m01 = var2;
+         var2 = var0.m22;
+         var0.m22 = -var0.m02;
+         var0.m02 = var2;
+         var6 = new Quaternion(0.0F, SQ2, 0.0F, SQ2);
+         var1.mul(var6);
+         var5 = var3;
+      }
+
+      if (var4 < var5) {
+         var2 = var0.m20;
+         var0.m20 = -var0.m10;
+         var0.m10 = var2;
+         var2 = var0.m21;
+         var0.m21 = -var0.m11;
+         var0.m11 = var2;
+         var2 = var0.m22;
+         var0.m22 = -var0.m12;
+         var0.m12 = var2;
+         var6 = new Quaternion(SQ2, 0.0F, 0.0F, SQ2);
+         var1.mul(var6);
+      }
+
+   }
+
    public void transpose() {
       float var1 = this.m01;
       this.m01 = this.m10;
       this.m10 = var1;
       var1 = this.m02;
@@ -288,10 +344,47 @@
       var1 = 31 * var1 + (this.m21 != 0.0F ? Float.floatToIntBits(this.m21) : 0);
       var1 = 31 * var1 + (this.m22 != 0.0F ? Float.floatToIntBits(this.m22) : 0);
       return var1;
    }
 
+   private static int bufferIndex(int var0, int var1) {
+      return var1 * 3 + var0;
+   }
+
+   public void load(FloatBuffer var1) {
+      this.m00 = var1.get(bufferIndex(0, 0));
+      this.m01 = var1.get(bufferIndex(0, 1));
+      this.m02 = var1.get(bufferIndex(0, 2));
+      this.m10 = var1.get(bufferIndex(1, 0));
+      this.m11 = var1.get(bufferIndex(1, 1));
+      this.m12 = var1.get(bufferIndex(1, 2));
+      this.m20 = var1.get(bufferIndex(2, 0));
+      this.m21 = var1.get(bufferIndex(2, 1));
+      this.m22 = var1.get(bufferIndex(2, 2));
+   }
+
+   public void loadTransposed(FloatBuffer var1) {
+      this.m00 = var1.get(bufferIndex(0, 0));
+      this.m01 = var1.get(bufferIndex(1, 0));
+      this.m02 = var1.get(bufferIndex(2, 0));
+      this.m10 = var1.get(bufferIndex(0, 1));
+      this.m11 = var1.get(bufferIndex(1, 1));
+      this.m12 = var1.get(bufferIndex(2, 1));
+      this.m20 = var1.get(bufferIndex(0, 2));
+      this.m21 = var1.get(bufferIndex(1, 2));
+      this.m22 = var1.get(bufferIndex(2, 2));
+   }
+
+   public void load(FloatBuffer var1, boolean var2) {
+      if (var2) {
+         this.loadTransposed(var1);
+      } else {
+         this.load(var1);
+      }
+
+   }
+
    public void load(Matrix3f var1) {
       this.m00 = var1.m00;
       this.m01 = var1.m01;
       this.m02 = var1.m02;
       this.m10 = var1.m10;
@@ -324,10 +417,43 @@
       var1.append(this.m22);
       var1.append("\n");
       return var1.toString();
    }
 
+   public void store(FloatBuffer var1) {
+      var1.put(bufferIndex(0, 0), this.m00);
+      var1.put(bufferIndex(0, 1), this.m01);
+      var1.put(bufferIndex(0, 2), this.m02);
+      var1.put(bufferIndex(1, 0), this.m10);
+      var1.put(bufferIndex(1, 1), this.m11);
+      var1.put(bufferIndex(1, 2), this.m12);
+      var1.put(bufferIndex(2, 0), this.m20);
+      var1.put(bufferIndex(2, 1), this.m21);
+      var1.put(bufferIndex(2, 2), this.m22);
+   }
+
+   public void storeTransposed(FloatBuffer var1) {
+      var1.put(bufferIndex(0, 0), this.m00);
+      var1.put(bufferIndex(1, 0), this.m01);
+      var1.put(bufferIndex(2, 0), this.m02);
+      var1.put(bufferIndex(0, 1), this.m10);
+      var1.put(bufferIndex(1, 1), this.m11);
+      var1.put(bufferIndex(2, 1), this.m12);
+      var1.put(bufferIndex(0, 2), this.m20);
+      var1.put(bufferIndex(1, 2), this.m21);
+      var1.put(bufferIndex(2, 2), this.m22);
+   }
+
+   public void store(FloatBuffer var1, boolean var2) {
+      if (var2) {
+         this.storeTransposed(var1);
+      } else {
+         this.store(var1);
+      }
+
+   }
+
    public void setIdentity() {
       this.m00 = 1.0F;
       this.m01 = 0.0F;
       this.m02 = 0.0F;
       this.m10 = 0.0F;
@@ -359,10 +485,17 @@
       this.m12 = var8;
       this.m22 = var9;
       return var10;
    }
 
+   public float determinant() {
+      float var1 = this.m11 * this.m22 - this.m12 * this.m21;
+      float var2 = -(this.m10 * this.m22 - this.m12 * this.m20);
+      float var3 = this.m10 * this.m21 - this.m11 * this.m20;
+      return this.m00 * var1 + this.m01 * var2 + this.m02 * var3;
+   }
+
    public boolean invert() {
       float var1 = this.adjugateAndDet();
       if (Math.abs(var1) > 1.0E-6F) {
          this.mul(var1);
          return true;
@@ -433,9 +566,37 @@
       this.m20 *= var1;
       this.m21 *= var1;
       this.m22 *= var1;
    }
 
+   public void add(Matrix3f var1) {
+      this.m00 += var1.m00;
+      this.m01 += var1.m01;
+      this.m02 += var1.m02;
+      this.m10 += var1.m10;
+      this.m11 += var1.m11;
+      this.m12 += var1.m12;
+      this.m20 += var1.m20;
+      this.m21 += var1.m21;
+      this.m22 += var1.m22;
+   }
+
+   public void sub(Matrix3f var1) {
+      this.m00 -= var1.m00;
+      this.m01 -= var1.m01;
+      this.m02 -= var1.m02;
+      this.m10 -= var1.m10;
+      this.m11 -= var1.m11;
+      this.m12 -= var1.m12;
+      this.m20 -= var1.m20;
+      this.m21 -= var1.m21;
+      this.m22 -= var1.m22;
+   }
+
+   public float trace() {
+      return this.m00 + this.m11 + this.m22;
+   }
+
    public Matrix3f copy() {
       return new Matrix3f(this);
    }
 }
