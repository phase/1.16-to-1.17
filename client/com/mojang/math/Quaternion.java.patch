--- com/mojang/math/Quaternion.java
+++ com/mojang/math/Quaternion.java
@@ -52,10 +52,66 @@
       this.j = var1.j;
       this.k = var1.k;
       this.r = var1.r;
    }
 
+   public static Quaternion fromYXZ(float var0, float var1, float var2) {
+      Quaternion var3 = ONE.copy();
+      var3.mul(new Quaternion(0.0F, (float)Math.sin((double)(var0 / 2.0F)), 0.0F, (float)Math.cos((double)(var0 / 2.0F))));
+      var3.mul(new Quaternion((float)Math.sin((double)(var1 / 2.0F)), 0.0F, 0.0F, (float)Math.cos((double)(var1 / 2.0F))));
+      var3.mul(new Quaternion(0.0F, 0.0F, (float)Math.sin((double)(var2 / 2.0F)), (float)Math.cos((double)(var2 / 2.0F))));
+      return var3;
+   }
+
+   public static Quaternion fromXYZDegrees(Vector3f var0) {
+      return fromXYZ((float)Math.toRadians((double)var0.x()), (float)Math.toRadians((double)var0.y()), (float)Math.toRadians((double)var0.z()));
+   }
+
+   public static Quaternion fromXYZ(Vector3f var0) {
+      return fromXYZ(var0.x(), var0.y(), var0.z());
+   }
+
+   public static Quaternion fromXYZ(float var0, float var1, float var2) {
+      Quaternion var3 = ONE.copy();
+      var3.mul(new Quaternion((float)Math.sin((double)(var0 / 2.0F)), 0.0F, 0.0F, (float)Math.cos((double)(var0 / 2.0F))));
+      var3.mul(new Quaternion(0.0F, (float)Math.sin((double)(var1 / 2.0F)), 0.0F, (float)Math.cos((double)(var1 / 2.0F))));
+      var3.mul(new Quaternion(0.0F, 0.0F, (float)Math.sin((double)(var2 / 2.0F)), (float)Math.cos((double)(var2 / 2.0F))));
+      return var3;
+   }
+
+   public Vector3f toXYZ() {
+      float var1 = this.r() * this.r();
+      float var2 = this.i() * this.i();
+      float var3 = this.j() * this.j();
+      float var4 = this.k() * this.k();
+      float var5 = var1 + var2 + var3 + var4;
+      float var6 = 2.0F * this.r() * this.i() - 2.0F * this.j() * this.k();
+      float var7 = (float)Math.asin((double)(var6 / var5));
+      return Math.abs(var6) > 0.999F * var5 ? new Vector3f(2.0F * (float)Math.atan2((double)this.i(), (double)this.r()), var7, 0.0F) : new Vector3f((float)Math.atan2((double)(2.0F * this.j() * this.k() + 2.0F * this.i() * this.r()), (double)(var1 - var2 - var3 + var4)), var7, (float)Math.atan2((double)(2.0F * this.i() * this.j() + 2.0F * this.r() * this.k()), (double)(var1 + var2 - var3 - var4)));
+   }
+
+   public Vector3f toXYZDegrees() {
+      Vector3f var1 = this.toXYZ();
+      return new Vector3f((float)Math.toDegrees((double)var1.x()), (float)Math.toDegrees((double)var1.y()), (float)Math.toDegrees((double)var1.z()));
+   }
+
+   public Vector3f toYXZ() {
+      float var1 = this.r() * this.r();
+      float var2 = this.i() * this.i();
+      float var3 = this.j() * this.j();
+      float var4 = this.k() * this.k();
+      float var5 = var1 + var2 + var3 + var4;
+      float var6 = 2.0F * this.r() * this.i() - 2.0F * this.j() * this.k();
+      float var7 = (float)Math.asin((double)(var6 / var5));
+      return Math.abs(var6) > 0.999F * var5 ? new Vector3f(var7, 2.0F * (float)Math.atan2((double)this.j(), (double)this.r()), 0.0F) : new Vector3f(var7, (float)Math.atan2((double)(2.0F * this.i() * this.k() + 2.0F * this.j() * this.r()), (double)(var1 - var2 - var3 + var4)), (float)Math.atan2((double)(2.0F * this.i() * this.j() + 2.0F * this.r() * this.k()), (double)(var1 - var2 + var3 - var4)));
+   }
+
+   public Vector3f toYXZDegrees() {
+      Vector3f var1 = this.toYXZ();
+      return new Vector3f((float)Math.toDegrees((double)var1.x()), (float)Math.toDegrees((double)var1.y()), (float)Math.toDegrees((double)var1.z()));
+   }
+
    public boolean equals(Object var1) {
       if (this == var1) {
          return true;
       } else if (var1 != null && this.getClass() == var1.getClass()) {
          Quaternion var2 = (Quaternion)var1;
@@ -164,9 +220,13 @@
          this.r = 0.0F;
       }
 
    }
 
+   public void slerp(Quaternion var1, float var2) {
+      throw new UnsupportedOperationException();
+   }
+
    public Quaternion copy() {
       return new Quaternion(this);
    }
 }
