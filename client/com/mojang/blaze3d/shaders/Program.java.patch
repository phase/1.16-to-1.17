--- com/mojang/blaze3d/shaders/Program.java
+++ com/mojang/blaze3d/shaders/Program.java
@@ -1,68 +1,85 @@
 package com.mojang.blaze3d.shaders;
 
 import com.google.common.collect.Maps;
 import com.mojang.blaze3d.platform.GlStateManager;
 import com.mojang.blaze3d.platform.TextureUtil;
+import com.mojang.blaze3d.preprocessor.GlslPreprocessor;
 import com.mojang.blaze3d.systems.RenderSystem;
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.Map;
 import org.apache.commons.lang3.StringUtils;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
 
 public class Program {
+   private static final Logger LOGGER = LogManager.getLogger();
+   private static final int MAX_LOG_LENGTH = 32768;
    private final Program.Type type;
    private final String name;
-   private final int id;
-   private int references;
+   private int id;
 
-   private Program(Program.Type var1, int var2, String var3) {
+   protected Program(Program.Type var1, int var2, String var3) {
       this.type = var1;
       this.id = var2;
       this.name = var3;
    }
 
-   public void attachToEffect(Effect var1) {
+   public void attachToShader(Shader var1) {
       RenderSystem.assertThread(RenderSystem::isOnRenderThread);
-      ++this.references;
-      GlStateManager.glAttachShader(var1.getId(), this.id);
+      GlStateManager.glAttachShader(var1.getId(), this.getId());
    }
 
    public void close() {
-      RenderSystem.assertThread(RenderSystem::isOnRenderThread);
-      --this.references;
-      if (this.references <= 0) {
+      if (this.id == -1) {
+         LOGGER.warn("Double closing {} program: {}", this.type, this.name);
+      } else {
+         RenderSystem.assertThread(RenderSystem::isOnRenderThread);
          GlStateManager.glDeleteShader(this.id);
+         this.id = -1;
          this.type.getPrograms().remove(this.name);
       }
-
    }
 
    public String getName() {
       return this.name;
    }
 
-   public static Program compileShader(Program.Type var0, String var1, InputStream var2, String var3) throws IOException {
+   public static Program compileShader(Program.Type var0, String var1, InputStream var2, String var3, GlslPreprocessor var4) throws IOException {
       RenderSystem.assertThread(RenderSystem::isOnRenderThread);
-      String var4 = TextureUtil.readResourceAsString(var2);
-      if (var4 == null) {
+      int var5 = compileShaderInternal(var0, var1, var2, var3, var4);
+      Program var6 = new Program(var0, var5, var1);
+      var0.getPrograms().put(var1, var6);
+      return var6;
+   }
+
+   protected static int compileShaderInternal(Program.Type var0, String var1, InputStream var2, String var3, GlslPreprocessor var4) throws IOException {
+      String var5 = TextureUtil.readResourceAsString(var2);
+      if (var5 == null) {
          throw new IOException("Could not load program " + var0.getName());
       } else {
-         int var5 = GlStateManager.glCreateShader(var0.getGlType());
-         GlStateManager.glShaderSource(var5, var4);
-         GlStateManager.glCompileShader(var5);
-         if (GlStateManager.glGetShaderi(var5, 35713) == 0) {
-            String var7 = StringUtils.trim(GlStateManager.glGetShaderInfoLog(var5, 32768));
+         int var6 = GlStateManager.glCreateShader(var0.getGlType());
+         GlStateManager.glShaderSource(var6, var4.process(var5));
+         GlStateManager.glCompileShader(var6);
+         if (GlStateManager.glGetShaderi(var6, 35713) == 0) {
+            String var7 = StringUtils.trim(GlStateManager.glGetShaderInfoLog(var6, 32768));
             throw new IOException("Couldn't compile " + var0.getName() + " program (" + var3 + ", " + var1 + ") : " + var7);
          } else {
-            Program var6 = new Program(var0, var5, var1);
-            var0.getPrograms().put(var1, var6);
             return var6;
          }
       }
    }
 
+   private static Program createProgram(Program.Type var0, String var1, int var2) {
+      return new Program(var0, var2, var1);
+   }
+
+   protected int getId() {
+      return this.id;
+   }
+
    public static enum Type {
       VERTEX("vertex", ".vsh", 35633),
       FRAGMENT("fragment", ".fsh", 35632);
 
       private final String name;
@@ -82,11 +99,11 @@
 
       public String getExtension() {
          return this.extension;
       }
 
-      private int getGlType() {
+      int getGlType() {
          return this.glType;
       }
 
       public Map<String, Program> getPrograms() {
          return this.programs;
