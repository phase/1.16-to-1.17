--- com/mojang/blaze3d/platform/GLX.java
+++ com/mojang/blaze3d/platform/GLX.java
@@ -1,48 +1,33 @@
 package com.mojang.blaze3d.platform;
 
 import com.google.common.base.Joiner;
 import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
 import com.mojang.blaze3d.systems.RenderSystem;
 import com.mojang.blaze3d.vertex.BufferBuilder;
 import com.mojang.blaze3d.vertex.DefaultVertexFormat;
 import com.mojang.blaze3d.vertex.Tesselator;
+import com.mojang.blaze3d.vertex.VertexFormat;
 import java.util.ArrayList;
 import java.util.Iterator;
-import java.util.Map;
 import java.util.function.Consumer;
 import java.util.function.LongSupplier;
 import java.util.function.Supplier;
+import net.minecraft.client.renderer.GameRenderer;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.lwjgl.Version;
 import org.lwjgl.glfw.GLFW;
 import org.lwjgl.glfw.GLFWErrorCallback;
 import org.lwjgl.glfw.GLFWErrorCallbackI;
 import org.lwjgl.glfw.GLFWVidMode;
-import org.lwjgl.opengl.GL;
-import org.lwjgl.opengl.GL11;
-import org.lwjgl.opengl.GLCapabilities;
 import oshi.SystemInfo;
 import oshi.hardware.Processor;
 
 public class GLX {
    private static final Logger LOGGER = LogManager.getLogger();
-   private static String capsString = "";
    private static String cpuInfo;
-   private static final Map<Integer, String> LOOKUP_MAP = (Map)make(Maps.newHashMap(), (var0) -> {
-      var0.put(0, "No error");
-      var0.put(1280, "Enum parameter is invalid for this function");
-      var0.put(1281, "Parameter is invalid for this function");
-      var0.put(1282, "Current state is invalid for this function");
-      var0.put(1283, "Stack overflow");
-      var0.put(1284, "Stack underflow");
-      var0.put(1285, "Out of memory");
-      var0.put(1286, "Operation on incomplete framebuffer");
-      var0.put(1286, "Operation on incomplete framebuffer");
-   });
 
    public GLX() {
    }
 
    public static String getOpenGLVersionString() {
@@ -104,91 +89,74 @@
 
    public static boolean _shouldClose(Window var0) {
       return GLFW.glfwWindowShouldClose(var0.getWindow());
    }
 
-   public static void _setupNvFogDistance() {
-      RenderSystem.assertThread(RenderSystem::isOnRenderThread);
-      if (GL.getCapabilities().GL_NV_fog_distance) {
-         GlStateManager._fogi(34138, 34139);
-      }
-
-   }
-
    public static void _init(int var0, boolean var1) {
       RenderSystem.assertThread(RenderSystem::isInInitPhase);
-      GLCapabilities var2 = GL.getCapabilities();
-      capsString = "Using framebuffer using " + GlStateManager._init_fbo(var2);
 
       try {
-         Processor[] var3 = (new SystemInfo()).getHardware().getProcessors();
-         cpuInfo = String.format("%dx %s", var3.length, var3[0]).replaceAll("\\s+", " ");
-      } catch (Throwable var4) {
+         Processor[] var2 = (new SystemInfo()).getHardware().getProcessors();
+         cpuInfo = String.format("%dx %s", var2.length, var2[0]).replaceAll("\\s+", " ");
+      } catch (Throwable var3) {
       }
 
       GlDebug.enableDebugCallback(var0, var1);
    }
 
-   public static String _getCapsString() {
-      return capsString;
-   }
-
    public static String _getCpuInfo() {
       return cpuInfo == null ? "<unknown>" : cpuInfo;
    }
 
    public static void _renderCrosshair(int var0, boolean var1, boolean var2, boolean var3) {
       RenderSystem.assertThread(RenderSystem::isOnRenderThread);
       GlStateManager._disableTexture();
       GlStateManager._depthMask(false);
+      RenderSystem.setShader(GameRenderer::getRendertypeLinesShader);
       Tesselator var4 = RenderSystem.renderThreadTesselator();
       BufferBuilder var5 = var4.getBuilder();
-      GL11.glLineWidth(4.0F);
-      var5.begin(1, DefaultVertexFormat.POSITION_COLOR);
+      RenderSystem.lineWidth(4.0F);
+      var5.begin(VertexFormat.Mode.LINES, DefaultVertexFormat.POSITION_COLOR_NORMAL);
       if (var1) {
-         var5.vertex(0.0D, 0.0D, 0.0D).color(0, 0, 0, 255).endVertex();
-         var5.vertex((double)var0, 0.0D, 0.0D).color(0, 0, 0, 255).endVertex();
+         var5.vertex(0.0D, 0.0D, 0.0D).color(0, 0, 0, 255).normal(1.0F, 0.0F, 0.0F).endVertex();
+         var5.vertex((double)var0, 0.0D, 0.0D).color(0, 0, 0, 255).normal(1.0F, 0.0F, 0.0F).endVertex();
       }
 
       if (var2) {
-         var5.vertex(0.0D, 0.0D, 0.0D).color(0, 0, 0, 255).endVertex();
-         var5.vertex(0.0D, (double)var0, 0.0D).color(0, 0, 0, 255).endVertex();
+         var5.vertex(0.0D, 0.0D, 0.0D).color(0, 0, 0, 255).normal(0.0F, 1.0F, 0.0F).endVertex();
+         var5.vertex(0.0D, (double)var0, 0.0D).color(0, 0, 0, 255).normal(0.0F, 1.0F, 0.0F).endVertex();
       }
 
       if (var3) {
-         var5.vertex(0.0D, 0.0D, 0.0D).color(0, 0, 0, 255).endVertex();
-         var5.vertex(0.0D, 0.0D, (double)var0).color(0, 0, 0, 255).endVertex();
+         var5.vertex(0.0D, 0.0D, 0.0D).color(0, 0, 0, 255).normal(0.0F, 0.0F, 1.0F).endVertex();
+         var5.vertex(0.0D, 0.0D, (double)var0).color(0, 0, 0, 255).normal(0.0F, 0.0F, 1.0F).endVertex();
       }
 
       var4.end();
-      GL11.glLineWidth(2.0F);
-      var5.begin(1, DefaultVertexFormat.POSITION_COLOR);
+      RenderSystem.lineWidth(2.0F);
+      var5.begin(VertexFormat.Mode.LINES, DefaultVertexFormat.POSITION_COLOR_NORMAL);
       if (var1) {
-         var5.vertex(0.0D, 0.0D, 0.0D).color(255, 0, 0, 255).endVertex();
-         var5.vertex((double)var0, 0.0D, 0.0D).color(255, 0, 0, 255).endVertex();
+         var5.vertex(0.0D, 0.0D, 0.0D).color(255, 0, 0, 255).normal(1.0F, 0.0F, 0.0F).endVertex();
+         var5.vertex((double)var0, 0.0D, 0.0D).color(255, 0, 0, 255).normal(1.0F, 0.0F, 0.0F).endVertex();
       }
 
       if (var2) {
-         var5.vertex(0.0D, 0.0D, 0.0D).color(0, 255, 0, 255).endVertex();
-         var5.vertex(0.0D, (double)var0, 0.0D).color(0, 255, 0, 255).endVertex();
+         var5.vertex(0.0D, 0.0D, 0.0D).color(0, 255, 0, 255).normal(0.0F, 1.0F, 0.0F).endVertex();
+         var5.vertex(0.0D, (double)var0, 0.0D).color(0, 255, 0, 255).normal(0.0F, 1.0F, 0.0F).endVertex();
       }
 
       if (var3) {
-         var5.vertex(0.0D, 0.0D, 0.0D).color(127, 127, 255, 255).endVertex();
-         var5.vertex(0.0D, 0.0D, (double)var0).color(127, 127, 255, 255).endVertex();
+         var5.vertex(0.0D, 0.0D, 0.0D).color(127, 127, 255, 255).normal(0.0F, 0.0F, 1.0F).endVertex();
+         var5.vertex(0.0D, 0.0D, (double)var0).color(127, 127, 255, 255).normal(0.0F, 0.0F, 1.0F).endVertex();
       }
 
       var4.end();
-      GL11.glLineWidth(1.0F);
+      RenderSystem.lineWidth(1.0F);
       GlStateManager._depthMask(true);
       GlStateManager._enableTexture();
    }
 
-   public static String getErrorString(int var0) {
-      return (String)LOOKUP_MAP.get(var0);
-   }
-
    public static <T> T make(Supplier<T> var0) {
       return var0.get();
    }
 
    public static <T> T make(T var0, Consumer<T> var1) {
