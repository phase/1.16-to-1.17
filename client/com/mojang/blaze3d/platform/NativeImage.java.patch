--- com/mojang/blaze3d/platform/NativeImage.java
+++ com/mojang/blaze3d/platform/NativeImage.java
@@ -9,10 +9,11 @@
 import java.nio.ByteBuffer;
 import java.nio.IntBuffer;
 import java.nio.channels.Channels;
 import java.nio.channels.SeekableByteChannel;
 import java.nio.channels.WritableByteChannel;
+import java.nio.file.FileSystems;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.StandardOpenOption;
 import java.util.Base64;
 import java.util.EnumSet;
@@ -30,10 +31,14 @@
 import org.lwjgl.system.MemoryStack;
 import org.lwjgl.system.MemoryUtil;
 
 public final class NativeImage implements AutoCloseable {
    private static final Logger LOGGER = LogManager.getLogger();
+   private static final int OFFSET_A = 24;
+   private static final int OFFSET_B = 16;
+   private static final int OFFSET_G = 8;
+   private static final int OFFSET_R = 0;
    private static final Set<StandardOpenOption> OPEN_OPTIONS;
    private final NativeImage.Format format;
    private final int width;
    private final int height;
    private final boolean useStbFree;
@@ -43,36 +48,48 @@
    public NativeImage(int var1, int var2, boolean var3) {
       this(NativeImage.Format.RGBA, var1, var2, var3);
    }
 
    public NativeImage(NativeImage.Format var1, int var2, int var3, boolean var4) {
-      this.format = var1;
-      this.width = var2;
-      this.height = var3;
-      this.size = (long)var2 * (long)var3 * (long)var1.components();
-      this.useStbFree = false;
-      if (var4) {
-         this.pixels = MemoryUtil.nmemCalloc(1L, this.size);
+      if (var2 > 0 && var3 > 0) {
+         this.format = var1;
+         this.width = var2;
+         this.height = var3;
+         this.size = (long)var2 * (long)var3 * (long)var1.components();
+         this.useStbFree = false;
+         if (var4) {
+            this.pixels = MemoryUtil.nmemCalloc(1L, this.size);
+         } else {
+            this.pixels = MemoryUtil.nmemAlloc(this.size);
+         }
+
       } else {
-         this.pixels = MemoryUtil.nmemAlloc(this.size);
+         throw new IllegalArgumentException("Invalid texture size: " + var2 + "x" + var3);
       }
-
    }
 
    private NativeImage(NativeImage.Format var1, int var2, int var3, boolean var4, long var5) {
-      this.format = var1;
-      this.width = var2;
-      this.height = var3;
-      this.useStbFree = var4;
-      this.pixels = var5;
-      this.size = (long)(var2 * var3 * var1.components());
+      if (var2 > 0 && var3 > 0) {
+         this.format = var1;
+         this.width = var2;
+         this.height = var3;
+         this.useStbFree = var4;
+         this.pixels = var5;
+         this.size = (long)var2 * (long)var3 * (long)var1.components();
+      } else {
+         throw new IllegalArgumentException("Invalid texture size: " + var2 + "x" + var3);
+      }
    }
 
    public String toString() {
       return "NativeImage[" + this.format + " " + this.width + "x" + this.height + "@" + this.pixels + (this.useStbFree ? "S" : "N") + "]";
    }
 
+   private boolean isOutsideBounds(int var1, int var2) {
+      return var1 < 0 || var1 >= this.width || var2 < 0 || var2 >= this.height;
+   }
+
    public static NativeImage read(InputStream var0) throws IOException {
       return read(NativeImage.Format.RGBA, var0);
    }
 
    public static NativeImage read(@Nullable NativeImage.Format var0, InputStream var1) throws IOException {
@@ -100,55 +117,40 @@
          throw new UnsupportedOperationException("Don't know how to read format " + var0);
       } else if (MemoryUtil.memAddress(var1) == 0L) {
          throw new IllegalArgumentException("Invalid buffer");
       } else {
          MemoryStack var2 = MemoryStack.stackPush();
-         Throwable var3 = null;
 
-         NativeImage var8;
+         NativeImage var7;
          try {
+            IntBuffer var3 = var2.mallocInt(1);
             IntBuffer var4 = var2.mallocInt(1);
             IntBuffer var5 = var2.mallocInt(1);
-            IntBuffer var6 = var2.mallocInt(1);
-            ByteBuffer var7 = STBImage.stbi_load_from_memory(var1, var4, var5, var6, var0 == null ? 0 : var0.components);
-            if (var7 == null) {
+            ByteBuffer var6 = STBImage.stbi_load_from_memory(var1, var3, var4, var5, var0 == null ? 0 : var0.components);
+            if (var6 == null) {
                throw new IOException("Could not load image: " + STBImage.stbi_failure_reason());
             }
 
-            var8 = new NativeImage(var0 == null ? NativeImage.Format.getStbFormat(var6.get(0)) : var0, var4.get(0), var5.get(0), true, MemoryUtil.memAddress(var7));
-         } catch (Throwable var17) {
-            var3 = var17;
-            throw var17;
-         } finally {
+            var7 = new NativeImage(var0 == null ? NativeImage.Format.getStbFormat(var5.get(0)) : var0, var3.get(0), var4.get(0), true, MemoryUtil.memAddress(var6));
+         } catch (Throwable var9) {
             if (var2 != null) {
-               if (var3 != null) {
-                  try {
-                     var2.close();
-                  } catch (Throwable var16) {
-                     var3.addSuppressed(var16);
-                  }
-               } else {
+               try {
                   var2.close();
+               } catch (Throwable var8) {
+                  var9.addSuppressed(var8);
                }
             }
 
+            throw var9;
          }
 
-         return var8;
-      }
-   }
+         if (var2 != null) {
+            var2.close();
+         }
 
-   private static void setClamp(boolean var0) {
-      RenderSystem.assertThread(RenderSystem::isOnRenderThreadOrInit);
-      if (var0) {
-         GlStateManager._texParameter(3553, 10242, 10496);
-         GlStateManager._texParameter(3553, 10243, 10496);
-      } else {
-         GlStateManager._texParameter(3553, 10242, 10497);
-         GlStateManager._texParameter(3553, 10243, 10497);
+         return var7;
       }
-
    }
 
    private static void setFilter(boolean var0, boolean var1) {
       RenderSystem.assertThread(RenderSystem::isOnRenderThreadOrInit);
       if (var0) {
@@ -192,39 +194,130 @@
    }
 
    public int getPixelRGBA(int var1, int var2) {
       if (this.format != NativeImage.Format.RGBA) {
          throw new IllegalArgumentException(String.format("getPixelRGBA only works on RGBA images; have %s", this.format));
-      } else if (var1 <= this.width && var2 <= this.height) {
+      } else if (this.isOutsideBounds(var1, var2)) {
+         throw new IllegalArgumentException(String.format("(%s, %s) outside of image bounds (%s, %s)", var1, var2, this.width, this.height));
+      } else {
          this.checkAllocated();
-         long var3 = (long)((var1 + var2 * this.width) * 4);
+         long var3 = ((long)var1 + (long)var2 * (long)this.width) * 4L;
          return MemoryUtil.memGetInt(this.pixels + var3);
-      } else {
-         throw new IllegalArgumentException(String.format("(%s, %s) outside of image bounds (%s, %s)", var1, var2, this.width, this.height));
       }
    }
 
    public void setPixelRGBA(int var1, int var2, int var3) {
       if (this.format != NativeImage.Format.RGBA) {
          throw new IllegalArgumentException(String.format("getPixelRGBA only works on RGBA images; have %s", this.format));
-      } else if (var1 <= this.width && var2 <= this.height) {
+      } else if (this.isOutsideBounds(var1, var2)) {
+         throw new IllegalArgumentException(String.format("(%s, %s) outside of image bounds (%s, %s)", var1, var2, this.width, this.height));
+      } else {
          this.checkAllocated();
-         long var4 = (long)((var1 + var2 * this.width) * 4);
+         long var4 = ((long)var1 + (long)var2 * (long)this.width) * 4L;
          MemoryUtil.memPutInt(this.pixels + var4, var3);
+      }
+   }
+
+   public void setPixelLuminance(int var1, int var2, byte var3) {
+      RenderSystem.assertThread(RenderSystem::isOnRenderThread);
+      if (!this.format.hasLuminance()) {
+         throw new IllegalArgumentException(String.format("setPixelLuminance only works on image with luminance; have %s", this.format));
+      } else if (this.isOutsideBounds(var1, var2)) {
+         throw new IllegalArgumentException(String.format("(%s, %s) outside of image bounds (%s, %s)", var1, var2, this.width, this.height));
       } else {
+         this.checkAllocated();
+         long var4 = ((long)var1 + (long)var2 * (long)this.width) * (long)this.format.components() + (long)(this.format.luminanceOffset() / 8);
+         MemoryUtil.memPutByte(this.pixels + var4, var3);
+      }
+   }
+
+   public byte getRedOrLuminance(int var1, int var2) {
+      RenderSystem.assertThread(RenderSystem::isOnRenderThread);
+      if (!this.format.hasLuminanceOrRed()) {
+         throw new IllegalArgumentException(String.format("no red or luminance in %s", this.format));
+      } else if (this.isOutsideBounds(var1, var2)) {
          throw new IllegalArgumentException(String.format("(%s, %s) outside of image bounds (%s, %s)", var1, var2, this.width, this.height));
+      } else {
+         int var3 = (var1 + var2 * this.width) * this.format.components() + this.format.luminanceOrRedOffset() / 8;
+         return MemoryUtil.memGetByte(this.pixels + (long)var3);
       }
    }
 
+   public byte getGreenOrLuminance(int var1, int var2) {
+      RenderSystem.assertThread(RenderSystem::isOnRenderThread);
+      if (!this.format.hasLuminanceOrGreen()) {
+         throw new IllegalArgumentException(String.format("no green or luminance in %s", this.format));
+      } else if (this.isOutsideBounds(var1, var2)) {
+         throw new IllegalArgumentException(String.format("(%s, %s) outside of image bounds (%s, %s)", var1, var2, this.width, this.height));
+      } else {
+         int var3 = (var1 + var2 * this.width) * this.format.components() + this.format.luminanceOrGreenOffset() / 8;
+         return MemoryUtil.memGetByte(this.pixels + (long)var3);
+      }
+   }
+
+   public byte getBlueOrLuminance(int var1, int var2) {
+      RenderSystem.assertThread(RenderSystem::isOnRenderThread);
+      if (!this.format.hasLuminanceOrBlue()) {
+         throw new IllegalArgumentException(String.format("no blue or luminance in %s", this.format));
+      } else if (this.isOutsideBounds(var1, var2)) {
+         throw new IllegalArgumentException(String.format("(%s, %s) outside of image bounds (%s, %s)", var1, var2, this.width, this.height));
+      } else {
+         int var3 = (var1 + var2 * this.width) * this.format.components() + this.format.luminanceOrBlueOffset() / 8;
+         return MemoryUtil.memGetByte(this.pixels + (long)var3);
+      }
+   }
+
    public byte getLuminanceOrAlpha(int var1, int var2) {
       if (!this.format.hasLuminanceOrAlpha()) {
          throw new IllegalArgumentException(String.format("no luminance or alpha in %s", this.format));
-      } else if (var1 <= this.width && var2 <= this.height) {
+      } else if (this.isOutsideBounds(var1, var2)) {
+         throw new IllegalArgumentException(String.format("(%s, %s) outside of image bounds (%s, %s)", var1, var2, this.width, this.height));
+      } else {
          int var3 = (var1 + var2 * this.width) * this.format.components() + this.format.luminanceOrAlphaOffset() / 8;
          return MemoryUtil.memGetByte(this.pixels + (long)var3);
+      }
+   }
+
+   public void blendPixel(int var1, int var2, int var3) {
+      if (this.format != NativeImage.Format.RGBA) {
+         throw new UnsupportedOperationException("Can only call blendPixel with RGBA format");
       } else {
-         throw new IllegalArgumentException(String.format("(%s, %s) outside of image bounds (%s, %s)", var1, var2, this.width, this.height));
+         int var4 = this.getPixelRGBA(var1, var2);
+         float var5 = (float)getA(var3) / 255.0F;
+         float var6 = (float)getB(var3) / 255.0F;
+         float var7 = (float)getG(var3) / 255.0F;
+         float var8 = (float)getR(var3) / 255.0F;
+         float var9 = (float)getA(var4) / 255.0F;
+         float var10 = (float)getB(var4) / 255.0F;
+         float var11 = (float)getG(var4) / 255.0F;
+         float var12 = (float)getR(var4) / 255.0F;
+         float var14 = 1.0F - var5;
+         float var15 = var5 * var5 + var9 * var14;
+         float var16 = var6 * var5 + var10 * var14;
+         float var17 = var7 * var5 + var11 * var14;
+         float var18 = var8 * var5 + var12 * var14;
+         if (var15 > 1.0F) {
+            var15 = 1.0F;
+         }
+
+         if (var16 > 1.0F) {
+            var16 = 1.0F;
+         }
+
+         if (var17 > 1.0F) {
+            var17 = 1.0F;
+         }
+
+         if (var18 > 1.0F) {
+            var18 = 1.0F;
+         }
+
+         int var19 = (int)(var15 * 255.0F);
+         int var20 = (int)(var16 * 255.0F);
+         int var21 = (int)(var17 * 255.0F);
+         int var22 = (int)(var18 * 255.0F);
+         this.setPixelRGBA(var1, var2, combine(var19, var20, var21, var22));
       }
    }
 
    @Deprecated
    public int[] makePixelArray() {
@@ -271,21 +364,25 @@
 
    private void _upload(int var1, int var2, int var3, int var4, int var5, int var6, int var7, boolean var8, boolean var9, boolean var10, boolean var11) {
       RenderSystem.assertThread(RenderSystem::isOnRenderThreadOrInit);
       this.checkAllocated();
       setFilter(var8, var10);
-      setClamp(var9);
       if (var6 == this.getWidth()) {
          GlStateManager._pixelStore(3314, 0);
       } else {
          GlStateManager._pixelStore(3314, this.getWidth());
       }
 
       GlStateManager._pixelStore(3316, var4);
       GlStateManager._pixelStore(3315, var5);
       this.format.setUnpackPixelStoreState();
       GlStateManager._texSubImage2D(3553, var1, var2, var3, var6, var7, this.format.glFormat(), 5121, this.pixels);
+      if (var9) {
+         GlStateManager._texParameter(3553, 10242, 33071);
+         GlStateManager._texParameter(3553, 10243, 33071);
+      }
+
       if (var11) {
          this.close();
       }
 
    }
@@ -303,10 +400,31 @@
          }
       }
 
    }
 
+   public void downloadDepthBuffer(float var1) {
+      RenderSystem.assertThread(RenderSystem::isOnRenderThread);
+      if (this.format.components() != 1) {
+         throw new IllegalStateException("Depth buffer must be stored in NativeImage with 1 component.");
+      } else {
+         this.checkAllocated();
+         this.format.setPackPixelStoreState();
+         GlStateManager._readPixels(0, 0, this.width, this.height, 6402, 5121, this.pixels);
+      }
+   }
+
+   public void drawPixels() {
+      RenderSystem.assertThread(RenderSystem::isOnRenderThread);
+      this.format.setUnpackPixelStoreState();
+      GlStateManager._glDrawPixels(this.width, this.height, this.format.glFormat(), 5121, this.pixels);
+   }
+
+   public void writeToFile(String var1) throws IOException {
+      this.writeToFile(FileSystems.getDefault().getPath(var1));
+   }
+
    public void writeToFile(File var1) throws IOException {
       this.writeToFile(var1.toPath());
    }
 
    public void copyFromFont(STBTTFontinfo var1, int var2, int var3, int var4, float var5, float var6, float var7, float var8, int var9, int var10) {
@@ -325,89 +443,75 @@
       if (!this.format.supportedByStb()) {
          throw new UnsupportedOperationException("Don't know how to write format " + this.format);
       } else {
          this.checkAllocated();
          SeekableByteChannel var2 = Files.newByteChannel(var1, OPEN_OPTIONS);
-         Throwable var3 = null;
 
          try {
             if (!this.writeToChannel(var2)) {
-               throw new IOException("Could not write image to the PNG file \"" + var1.toAbsolutePath() + "\": " + STBImage.stbi_failure_reason());
+               Path var10002 = var1.toAbsolutePath();
+               throw new IOException("Could not write image to the PNG file \"" + var10002 + "\": " + STBImage.stbi_failure_reason());
             }
-         } catch (Throwable var12) {
-            var3 = var12;
-            throw var12;
-         } finally {
+         } catch (Throwable var6) {
             if (var2 != null) {
-               if (var3 != null) {
-                  try {
-                     var2.close();
-                  } catch (Throwable var11) {
-                     var3.addSuppressed(var11);
-                  }
-               } else {
+               try {
                   var2.close();
+               } catch (Throwable var5) {
+                  var6.addSuppressed(var5);
                }
             }
 
+            throw var6;
          }
 
+         if (var2 != null) {
+            var2.close();
+         }
+
       }
    }
 
    public byte[] asByteArray() throws IOException {
       ByteArrayOutputStream var1 = new ByteArrayOutputStream();
-      Throwable var2 = null;
 
-      Object var5;
+      byte[] var3;
       try {
-         WritableByteChannel var3 = Channels.newChannel(var1);
-         Throwable var4 = null;
+         WritableByteChannel var2 = Channels.newChannel(var1);
 
          try {
-            if (!this.writeToChannel(var3)) {
+            if (!this.writeToChannel(var2)) {
                throw new IOException("Could not write image to byte array: " + STBImage.stbi_failure_reason());
             }
 
-            var5 = var1.toByteArray();
-         } catch (Throwable var28) {
-            var5 = var28;
-            var4 = var28;
-            throw var28;
-         } finally {
-            if (var3 != null) {
-               if (var4 != null) {
-                  try {
-                     var3.close();
-                  } catch (Throwable var27) {
-                     var4.addSuppressed(var27);
-                  }
-               } else {
-                  var3.close();
-               }
-            }
-
-         }
-      } catch (Throwable var30) {
-         var2 = var30;
-         throw var30;
-      } finally {
-         if (var1 != null) {
+            var3 = var1.toByteArray();
+         } catch (Throwable var7) {
             if (var2 != null) {
                try {
-                  var1.close();
-               } catch (Throwable var26) {
-                  var2.addSuppressed(var26);
+                  var2.close();
+               } catch (Throwable var6) {
+                  var7.addSuppressed(var6);
                }
-            } else {
-               var1.close();
             }
+
+            throw var7;
          }
 
+         if (var2 != null) {
+            var2.close();
+         }
+      } catch (Throwable var8) {
+         try {
+            var1.close();
+         } catch (Throwable var5) {
+            var8.addSuppressed(var5);
+         }
+
+         throw var8;
       }
 
-      return (byte[])var5;
+      var1.close();
+      return var3;
    }
 
    private boolean writeToChannel(WritableByteChannel var1) throws IOException {
       NativeImage.WriteCallback var2 = new NativeImage.WriteCallback(var1);
 
@@ -416,17 +520,17 @@
          int var3 = Math.min(this.getHeight(), Integer.MAX_VALUE / this.getWidth() / this.format.components());
          if (var3 < this.getHeight()) {
             LOGGER.warn("Dropping image height from {} to {} to fit the size into 32-bit signed int", this.getHeight(), var3);
          }
 
-         if (STBImageWrite.nstbi_write_png_to_func(var2.address(), 0L, this.getWidth(), var3, this.format.components(), this.pixels, 0) == 0) {
-            var4 = false;
+         if (STBImageWrite.nstbi_write_png_to_func(var2.address(), 0L, this.getWidth(), var3, this.format.components(), this.pixels, 0) != 0) {
+            var2.throwIfException();
+            var4 = true;
             return var4;
          }
 
-         var2.throwIfException();
-         var4 = true;
+         var4 = false;
       } finally {
          var2.free();
       }
 
       return var4;
@@ -477,42 +581,39 @@
    }
 
    public void flipY() {
       this.checkAllocated();
       MemoryStack var1 = MemoryStack.stackPush();
-      Throwable var2 = null;
 
       try {
-         int var3 = this.format.components();
-         int var4 = this.getWidth() * var3;
-         long var5 = var1.nmalloc(var4);
+         int var2 = this.format.components();
+         int var3 = this.getWidth() * var2;
+         long var4 = var1.nmalloc(var3);
 
-         for(int var7 = 0; var7 < this.getHeight() / 2; ++var7) {
-            int var8 = var7 * this.getWidth() * var3;
-            int var9 = (this.getHeight() - 1 - var7) * this.getWidth() * var3;
-            MemoryUtil.memCopy(this.pixels + (long)var8, var5, (long)var4);
-            MemoryUtil.memCopy(this.pixels + (long)var9, this.pixels + (long)var8, (long)var4);
-            MemoryUtil.memCopy(var5, this.pixels + (long)var9, (long)var4);
+         for(int var6 = 0; var6 < this.getHeight() / 2; ++var6) {
+            int var7 = var6 * this.getWidth() * var2;
+            int var8 = (this.getHeight() - 1 - var6) * this.getWidth() * var2;
+            MemoryUtil.memCopy(this.pixels + (long)var7, var4, (long)var3);
+            MemoryUtil.memCopy(this.pixels + (long)var8, this.pixels + (long)var7, (long)var3);
+            MemoryUtil.memCopy(var4, this.pixels + (long)var8, (long)var3);
          }
-      } catch (Throwable var17) {
-         var2 = var17;
-         throw var17;
-      } finally {
+      } catch (Throwable var10) {
          if (var1 != null) {
-            if (var2 != null) {
-               try {
-                  var1.close();
-               } catch (Throwable var16) {
-                  var2.addSuppressed(var16);
-               }
-            } else {
+            try {
                var1.close();
+            } catch (Throwable var9) {
+               var10.addSuppressed(var9);
             }
          }
 
+         throw var10;
       }
 
+      if (var1 != null) {
+         var1.close();
+      }
+
    }
 
    public void resizeSubRectTo(int var1, int var2, int var3, int var4, NativeImage var5) {
       this.checkAllocated();
       if (var5.format() != this.format) {
@@ -528,37 +629,34 @@
    }
 
    public static NativeImage fromBase64(String var0) throws IOException {
       byte[] var1 = Base64.getDecoder().decode(var0.replaceAll("\n", "").getBytes(Charsets.UTF_8));
       MemoryStack var2 = MemoryStack.stackPush();
-      Throwable var3 = null;
 
-      NativeImage var5;
+      NativeImage var4;
       try {
-         ByteBuffer var4 = var2.malloc(var1.length);
-         var4.put(var1);
-         var4.rewind();
-         var5 = read(var4);
-      } catch (Throwable var14) {
-         var3 = var14;
-         throw var14;
-      } finally {
+         ByteBuffer var3 = var2.malloc(var1.length);
+         var3.put(var1);
+         var3.rewind();
+         var4 = read(var3);
+      } catch (Throwable var6) {
          if (var2 != null) {
-            if (var3 != null) {
-               try {
-                  var2.close();
-               } catch (Throwable var13) {
-                  var3.addSuppressed(var13);
-               }
-            } else {
+            try {
                var2.close();
+            } catch (Throwable var5) {
+               var6.addSuppressed(var5);
             }
          }
 
+         throw var6;
       }
 
-      return var5;
+      if (var2 != null) {
+         var2.close();
+      }
+
+      return var4;
    }
 
    public static int getA(int var0) {
       return var0 >> 24 & 255;
    }
@@ -584,14 +682,14 @@
    }
 
    public static enum Format {
       RGBA(4, 6408, true, true, true, false, true, 0, 8, 16, 255, 24, true),
       RGB(3, 6407, true, true, true, false, false, 0, 8, 16, 255, 255, true),
-      LUMINANCE_ALPHA(2, 6410, false, false, false, true, true, 255, 255, 255, 0, 8, true),
-      LUMINANCE(1, 6409, false, false, false, true, false, 0, 0, 0, 0, 255, true);
+      LUMINANCE_ALPHA(2, 33319, false, false, false, true, true, 255, 255, 255, 0, 8, true),
+      LUMINANCE(1, 6403, false, false, false, true, false, 0, 0, 0, 0, 255, true);
 
-      private final int components;
+      final int components;
       private final int glFormat;
       private final boolean hasRed;
       private final boolean hasGreen;
       private final boolean hasBlue;
       private final boolean hasLuminance;
@@ -635,31 +733,87 @@
 
       public int glFormat() {
          return this.glFormat;
       }
 
+      public boolean hasRed() {
+         return this.hasRed;
+      }
+
+      public boolean hasGreen() {
+         return this.hasGreen;
+      }
+
+      public boolean hasBlue() {
+         return this.hasBlue;
+      }
+
+      public boolean hasLuminance() {
+         return this.hasLuminance;
+      }
+
       public boolean hasAlpha() {
          return this.hasAlpha;
       }
 
+      public int redOffset() {
+         return this.redOffset;
+      }
+
+      public int greenOffset() {
+         return this.greenOffset;
+      }
+
+      public int blueOffset() {
+         return this.blueOffset;
+      }
+
+      public int luminanceOffset() {
+         return this.luminanceOffset;
+      }
+
       public int alphaOffset() {
          return this.alphaOffset;
       }
 
+      public boolean hasLuminanceOrRed() {
+         return this.hasLuminance || this.hasRed;
+      }
+
+      public boolean hasLuminanceOrGreen() {
+         return this.hasLuminance || this.hasGreen;
+      }
+
+      public boolean hasLuminanceOrBlue() {
+         return this.hasLuminance || this.hasBlue;
+      }
+
       public boolean hasLuminanceOrAlpha() {
          return this.hasLuminance || this.hasAlpha;
       }
 
+      public int luminanceOrRedOffset() {
+         return this.hasLuminance ? this.luminanceOffset : this.redOffset;
+      }
+
+      public int luminanceOrGreenOffset() {
+         return this.hasLuminance ? this.luminanceOffset : this.greenOffset;
+      }
+
+      public int luminanceOrBlueOffset() {
+         return this.hasLuminance ? this.luminanceOffset : this.blueOffset;
+      }
+
       public int luminanceOrAlphaOffset() {
          return this.hasLuminance ? this.luminanceOffset : this.alphaOffset;
       }
 
       public boolean supportedByStb() {
          return this.supportedByStb;
       }
 
-      private static NativeImage.Format getStbFormat(int var0) {
+      static NativeImage.Format getStbFormat(int var0) {
          switch(var0) {
          case 1:
             return LUMINANCE;
          case 2:
             return LUMINANCE_ALPHA;
@@ -670,34 +824,16 @@
             return RGBA;
          }
       }
    }
 
-   public static enum InternalGlFormat {
-      RGBA(6408),
-      RGB(6407),
-      LUMINANCE_ALPHA(6410),
-      LUMINANCE(6409),
-      INTENSITY(32841);
-
-      private final int glFormat;
-
-      private InternalGlFormat(int var3) {
-         this.glFormat = var3;
-      }
-
-      int glFormat() {
-         return this.glFormat;
-      }
-   }
-
-   static class WriteCallback extends STBIWriteCallback {
+   private static class WriteCallback extends STBIWriteCallback {
       private final WritableByteChannel output;
       @Nullable
       private IOException exception;
 
-      private WriteCallback(WritableByteChannel var1) {
+      WriteCallback(WritableByteChannel var1) {
          this.output = var1;
       }
 
       public void invoke(long var1, long var3, int var5) {
          ByteBuffer var6 = getData(var3, var5);
@@ -714,6 +850,23 @@
          if (this.exception != null) {
             throw this.exception;
          }
       }
    }
+
+   public static enum InternalGlFormat {
+      RGBA(6408),
+      RGB(6407),
+      RG(33319),
+      RED(6403);
+
+      private final int glFormat;
+
+      private InternalGlFormat(int var3) {
+         this.glFormat = var3;
+      }
+
+      public int glFormat() {
+         return this.glFormat;
+      }
+   }
 }
