--- com/mojang/blaze3d/platform/TextureUtil.java
+++ com/mojang/blaze3d/platform/TextureUtil.java
@@ -1,26 +1,35 @@
 package com.mojang.blaze3d.platform;
 
+import com.mojang.blaze3d.DontObfuscate;
 import com.mojang.blaze3d.systems.RenderSystem;
+import java.io.File;
 import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.nio.ByteBuffer;
 import java.nio.IntBuffer;
 import java.nio.channels.Channels;
 import java.nio.channels.FileChannel;
 import java.nio.channels.ReadableByteChannel;
 import java.util.concurrent.ThreadLocalRandom;
+import javax.annotation.Nullable;
 import net.minecraft.SharedConstants;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.system.MemoryUtil;
 
+@DontObfuscate
 public class TextureUtil {
    private static final Logger LOGGER = LogManager.getLogger();
+   public static final int MIN_MIPMAP_LEVEL = 0;
+   private static final int DEFAULT_IMAGE_BUFFER_SIZE = 8192;
 
+   public TextureUtil() {
+   }
+
    public static int generateTextureId() {
       RenderSystem.assertThread(RenderSystem::isOnRenderThreadOrInit);
       if (SharedConstants.IS_RUNNING_IN_IDE) {
          int[] var0 = new int[ThreadLocalRandom.current().nextInt(15) + 1];
          GlStateManager._genTextures(var0);
@@ -94,10 +103,11 @@
       }
 
       return var1;
    }
 
+   @Nullable
    public static String readResourceAsString(InputStream var0) {
       RenderSystem.assertThread(RenderSystem::isOnRenderThread);
       ByteBuffer var1 = null;
 
       try {
@@ -115,20 +125,59 @@
       }
 
       return null;
    }
 
+   public static void writeAsPNG(String var0, int var1, int var2, int var3, int var4) {
+      RenderSystem.assertThread(RenderSystem::isOnRenderThread);
+      bind(var1);
+
+      for(int var5 = 0; var5 <= var2; ++var5) {
+         String var6 = var0 + "_" + var5 + ".png";
+         int var7 = var3 >> var5;
+         int var8 = var4 >> var5;
+
+         try {
+            NativeImage var9 = new NativeImage(var7, var8, false);
+            Throwable var10 = null;
+
+            try {
+               var9.downloadTexture(var5, false);
+               var9.writeToFile(var6);
+               LOGGER.debug("Exported png to: {}", (new File(var6)).getAbsolutePath());
+            } catch (Throwable var20) {
+               var10 = var20;
+               throw var20;
+            } finally {
+               if (var9 != null) {
+                  if (var10 != null) {
+                     try {
+                        var9.close();
+                     } catch (Throwable var19) {
+                        var10.addSuppressed(var19);
+                     }
+                  } else {
+                     var9.close();
+                  }
+               }
+
+            }
+         } catch (IOException var22) {
+            LOGGER.debug("Unable to write: ", var22);
+         }
+      }
+
+   }
+
    public static void initTexture(IntBuffer var0, int var1, int var2) {
       RenderSystem.assertThread(RenderSystem::isOnRenderThread);
       GL11.glPixelStorei(3312, 0);
       GL11.glPixelStorei(3313, 0);
       GL11.glPixelStorei(3314, 0);
       GL11.glPixelStorei(3315, 0);
       GL11.glPixelStorei(3316, 0);
       GL11.glPixelStorei(3317, 4);
       GL11.glTexImage2D(3553, 0, 6408, var1, var2, 0, 32993, 33639, var0);
-      GL11.glTexParameteri(3553, 10242, 10497);
-      GL11.glTexParameteri(3553, 10243, 10497);
       GL11.glTexParameteri(3553, 10240, 9728);
       GL11.glTexParameteri(3553, 10241, 9729);
    }
 }
