--- com/mojang/blaze3d/audio/Library.java
+++ com/mojang/blaze3d/audio/Library.java
@@ -15,11 +15,13 @@
 import org.lwjgl.openal.ALCCapabilities;
 import org.lwjgl.openal.ALCapabilities;
 import org.lwjgl.system.MemoryStack;
 
 public class Library {
+   private static final int NUM_OPEN_DEVICE_RETRIES = 3;
    private static final Logger LOGGER = LogManager.getLogger();
+   private static final int DEFAULT_CHANNEL_COUNT = 30;
    private long device;
    private long context;
    private static final Library.ChannelPool EMPTY = new Library.ChannelPool() {
       @Nullable
       public Channel acquire() {
@@ -60,12 +62,12 @@
          throw new IllegalStateException("OpenAL 1.1 not supported");
       } else {
          this.context = ALC10.alcCreateContext(this.device, (IntBuffer)null);
          ALC10.alcMakeContextCurrent(this.context);
          int var2 = this.getChannelCount();
-         int var3 = Mth.clamp((int)Mth.sqrt((float)var2), 2, 8);
-         int var4 = Mth.clamp(var2 - var3, 8, 255);
+         int var3 = Mth.clamp((int)((int)Mth.sqrt((float)var2)), (int)2, (int)8);
+         int var4 = Mth.clamp((int)(var2 - var3), (int)8, (int)255);
          this.staticChannels = new Library.CountingChannelPool(var4);
          this.streamingChannels = new Library.CountingChannelPool(var3);
          ALCapabilities var5 = AL.createCapabilities(var1);
          OpenAlUtil.checkALError("Initialization");
          if (!var5.AL_EXT_source_distance_model) {
@@ -88,33 +90,28 @@
 
       try {
          int var3 = ALC10.alcGetInteger(this.device, 4098);
          if (OpenAlUtil.checkALCError(this.device, "Get attributes size")) {
             throw new IllegalStateException("Failed to get OpenAL attributes");
-         } else {
-            IntBuffer var4 = var1.mallocInt(var3);
-            ALC10.alcGetIntegerv(this.device, 4099, var4);
-            if (OpenAlUtil.checkALCError(this.device, "Get attributes")) {
-               throw new IllegalStateException("Failed to get OpenAL attributes");
-            } else {
-               int var5 = 0;
+         }
 
-               int var6;
-               int var7;
-               do {
-                  if (var5 >= var3) {
-                     return 30;
-                  }
+         IntBuffer var4 = var1.mallocInt(var3);
+         ALC10.alcGetIntegerv(this.device, 4099, var4);
+         if (OpenAlUtil.checkALCError(this.device, "Get attributes")) {
+            throw new IllegalStateException("Failed to get OpenAL attributes");
+         }
 
-                  var6 = var4.get(var5++);
-                  if (var6 == 0) {
-                     return 30;
-                  }
+         int var5 = 0;
 
-                  var7 = var4.get(var5++);
-               } while(var6 != 4112);
+         while(var5 < var3) {
+            int var6 = var4.get(var5++);
+            if (var6 == 0) {
+               break;
+            }
 
+            int var7 = var4.get(var5++);
+            if (var6 == 4112) {
                int var8 = var7;
                return var8;
             }
          }
       } catch (Throwable var18) {
@@ -132,10 +129,12 @@
                var1.close();
             }
          }
 
       }
+
+      return 30;
    }
 
    private static long tryOpenDevice() {
       for(int var0 = 0; var0 < 3; ++var0) {
          long var1 = ALC10.alcOpenDevice((ByteBuffer)null);
