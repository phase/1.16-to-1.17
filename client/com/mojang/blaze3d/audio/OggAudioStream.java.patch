--- com/mojang/blaze3d/audio/OggAudioStream.java
+++ com/mojang/blaze3d/audio/OggAudioStream.java
@@ -5,10 +5,11 @@
 import java.io.InputStream;
 import java.nio.ByteBuffer;
 import java.nio.FloatBuffer;
 import java.nio.IntBuffer;
 import java.util.List;
+import java.util.Objects;
 import javax.sound.sampled.AudioFormat;
 import net.minecraft.client.sounds.AudioStream;
 import net.minecraft.util.Mth;
 import org.lwjgl.BufferUtils;
 import org.lwjgl.PointerBuffer;
@@ -17,63 +18,65 @@
 import org.lwjgl.stb.STBVorbisInfo;
 import org.lwjgl.system.MemoryStack;
 import org.lwjgl.system.MemoryUtil;
 
 public class OggAudioStream implements AudioStream {
+   private static final int EXPECTED_MAX_FRAME_SIZE = 8192;
    private long handle;
    private final AudioFormat audioFormat;
    private final InputStream input;
    private ByteBuffer buffer = MemoryUtil.memAlloc(8192);
 
    public OggAudioStream(InputStream var1) throws IOException {
       this.input = var1;
       this.buffer.limit(0);
       MemoryStack var2 = MemoryStack.stackPush();
-      Throwable var3 = null;
 
       try {
+         IntBuffer var3 = var2.mallocInt(1);
          IntBuffer var4 = var2.mallocInt(1);
-         IntBuffer var5 = var2.mallocInt(1);
 
-         while(this.handle == 0L) {
+         while(true) {
+            if (this.handle != 0L) {
+               this.buffer.position(this.buffer.position() + var3.get(0));
+               STBVorbisInfo var9 = STBVorbisInfo.mallocStack(var2);
+               STBVorbis.stb_vorbis_get_info(this.handle, var9);
+               this.audioFormat = new AudioFormat((float)var9.sample_rate(), 16, var9.channels(), true, false);
+               break;
+            }
+
             if (!this.refillFromStream()) {
                throw new IOException("Failed to find Ogg header");
             }
 
-            int var6 = this.buffer.position();
+            int var5 = this.buffer.position();
             this.buffer.position(0);
-            this.handle = STBVorbis.stb_vorbis_open_pushdata(this.buffer, var4, var5, (STBVorbisAlloc)null);
-            this.buffer.position(var6);
-            int var7 = var5.get(0);
-            if (var7 == 1) {
+            this.handle = STBVorbis.stb_vorbis_open_pushdata(this.buffer, var3, var4, (STBVorbisAlloc)null);
+            this.buffer.position(var5);
+            int var6 = var4.get(0);
+            if (var6 == 1) {
                this.forwardBuffer();
-            } else if (var7 != 0) {
-               throw new IOException("Failed to read Ogg file " + var7);
+            } else if (var6 != 0) {
+               throw new IOException("Failed to read Ogg file " + var6);
             }
          }
-
-         this.buffer.position(this.buffer.position() + var4.get(0));
-         STBVorbisInfo var17 = STBVorbisInfo.mallocStack(var2);
-         STBVorbis.stb_vorbis_get_info(this.handle, var17);
-         this.audioFormat = new AudioFormat((float)var17.sample_rate(), 16, var17.channels(), true, false);
-      } catch (Throwable var15) {
-         var3 = var15;
-         throw var15;
-      } finally {
+      } catch (Throwable var8) {
          if (var2 != null) {
-            if (var3 != null) {
-               try {
-                  var2.close();
-               } catch (Throwable var14) {
-                  var3.addSuppressed(var14);
-               }
-            } else {
+            try {
                var2.close();
+            } catch (Throwable var7) {
+               var8.addSuppressed(var7);
             }
          }
 
+         throw var8;
       }
+
+      if (var2 != null) {
+         var2.close();
+      }
+
    }
 
    private boolean refillFromStream() throws IOException {
       int var1 = this.buffer.limit();
       int var2 = this.buffer.capacity() - var1;
@@ -114,70 +117,86 @@
    private boolean readFrame(OggAudioStream.OutputConcat var1) throws IOException {
       if (this.handle == 0L) {
          return false;
       } else {
          MemoryStack var2 = MemoryStack.stackPush();
-         Throwable var3 = null;
 
-         try {
-            PointerBuffer var4 = var2.mallocPointer(1);
-            IntBuffer var5 = var2.mallocInt(1);
-            IntBuffer var6 = var2.mallocInt(1);
+         boolean var14;
+         label79: {
+            boolean var11;
+            label80: {
+               try {
+                  PointerBuffer var3 = var2.mallocPointer(1);
+                  IntBuffer var4 = var2.mallocInt(1);
+                  IntBuffer var5 = var2.mallocInt(1);
 
-            while(true) {
-               int var7 = STBVorbis.stb_vorbis_decode_frame_pushdata(this.handle, this.buffer, var5, var4, var6);
-               this.buffer.position(this.buffer.position() + var7);
-               int var8 = STBVorbis.stb_vorbis_get_error(this.handle);
-               if (var8 == 1) {
-                  this.forwardBuffer();
-                  if (!this.refillFromStream()) {
-                     boolean var25 = false;
-                     return var25;
-                  }
-               } else {
-                  if (var8 != 0) {
-                     throw new IOException("Failed to read Ogg file " + var8);
-                  }
+                  while(true) {
+                     int var6 = STBVorbis.stb_vorbis_decode_frame_pushdata(this.handle, this.buffer, var4, var3, var5);
+                     this.buffer.position(this.buffer.position() + var6);
+                     int var7 = STBVorbis.stb_vorbis_get_error(this.handle);
+                     if (var7 == 1) {
+                        this.forwardBuffer();
+                        if (!this.refillFromStream()) {
+                           var14 = false;
+                           break label79;
+                        }
+                     } else {
+                        if (var7 != 0) {
+                           throw new IOException("Failed to read Ogg file " + var7);
+                        }
 
-                  int var9 = var6.get(0);
-                  if (var9 != 0) {
-                     int var10 = var5.get(0);
-                     PointerBuffer var11 = var4.getPointerBuffer(var10);
-                     boolean var12;
-                     if (var10 == 1) {
-                        this.convertMono(var11.getFloatBuffer(0, var9), var1);
-                        var12 = true;
-                        return var12;
-                     }
+                        int var8 = var5.get(0);
+                        if (var8 != 0) {
+                           int var9 = var4.get(0);
+                           PointerBuffer var10 = var3.getPointerBuffer(var9);
+                           if (var9 == 1) {
+                              this.convertMono(var10.getFloatBuffer(0, var8), var1);
+                              var11 = true;
+                              break label80;
+                           }
 
-                     if (var10 == 2) {
-                        this.convertStereo(var11.getFloatBuffer(0, var9), var11.getFloatBuffer(1, var9), var1);
-                        var12 = true;
-                        return var12;
-                     }
+                           if (var9 != 2) {
+                              throw new IllegalStateException("Invalid number of channels: " + var9);
+                           }
 
-                     throw new IllegalStateException("Invalid number of channels: " + var10);
+                           this.convertStereo(var10.getFloatBuffer(0, var8), var10.getFloatBuffer(1, var8), var1);
+                           var11 = true;
+                           break;
+                        }
+                     }
                   }
-               }
-            }
-         } catch (Throwable var23) {
-            var3 = var23;
-            throw var23;
-         } finally {
-            if (var2 != null) {
-               if (var3 != null) {
-                  try {
-                     var2.close();
-                  } catch (Throwable var22) {
-                     var3.addSuppressed(var22);
+               } catch (Throwable var13) {
+                  if (var2 != null) {
+                     try {
+                        var2.close();
+                     } catch (Throwable var12) {
+                        var13.addSuppressed(var12);
+                     }
                   }
-               } else {
+
+                  throw var13;
+               }
+
+               if (var2 != null) {
                   var2.close();
                }
+
+               return var11;
             }
 
+            if (var2 != null) {
+               var2.close();
+            }
+
+            return var11;
          }
+
+         if (var2 != null) {
+            var2.close();
+         }
+
+         return var14;
       }
    }
 
    private void convertMono(FloatBuffer var1, OggAudioStream.OutputConcat var2) {
       while(var1.hasRemaining()) {
@@ -224,14 +243,14 @@
       }
 
       return var1.get();
    }
 
-   static class OutputConcat {
+   private static class OutputConcat {
       private final List<ByteBuffer> buffers = Lists.newArrayList();
       private final int bufferSize;
-      private int byteCount;
+      int byteCount;
       private ByteBuffer currentBuffer;
 
       public OutputConcat(int var1) {
          this.bufferSize = var1 + 1 & -2;
          this.createNewBuffer();
@@ -246,22 +265,24 @@
             this.currentBuffer.flip();
             this.buffers.add(this.currentBuffer);
             this.createNewBuffer();
          }
 
-         int var2 = Mth.clamp((int)(var1 * 32767.5F - 0.5F), -32768, 32767);
+         int var2 = Mth.clamp((int)((int)(var1 * 32767.5F - 0.5F)), (int)-32768, (int)32767);
          this.currentBuffer.putShort((short)var2);
          this.byteCount += 2;
       }
 
       public ByteBuffer get() {
          this.currentBuffer.flip();
          if (this.buffers.isEmpty()) {
             return this.currentBuffer;
          } else {
             ByteBuffer var1 = BufferUtils.createByteBuffer(this.byteCount);
-            this.buffers.forEach(var1::put);
+            List var10000 = this.buffers;
+            Objects.requireNonNull(var1);
+            var10000.forEach(var1::put);
             var1.put(this.currentBuffer);
             var1.flip();
             return var1;
          }
       }
