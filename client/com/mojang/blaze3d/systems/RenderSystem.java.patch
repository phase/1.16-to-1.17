--- com/mojang/blaze3d/systems/RenderSystem.java
+++ com/mojang/blaze3d/systems/RenderSystem.java
@@ -1,42 +1,87 @@
 package com.mojang.blaze3d.systems;
 
 import com.google.common.collect.Queues;
+import com.mojang.blaze3d.DontObfuscate;
 import com.mojang.blaze3d.pipeline.RenderCall;
 import com.mojang.blaze3d.platform.GLX;
 import com.mojang.blaze3d.platform.GlStateManager;
+import com.mojang.blaze3d.vertex.BufferUploader;
+import com.mojang.blaze3d.vertex.PoseStack;
 import com.mojang.blaze3d.vertex.Tesselator;
+import com.mojang.blaze3d.vertex.VertexFormat;
 import com.mojang.math.Matrix4f;
 import com.mojang.math.Vector3f;
 import java.nio.ByteBuffer;
 import java.nio.FloatBuffer;
 import java.nio.IntBuffer;
 import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.function.Consumer;
+import java.util.function.IntConsumer;
 import java.util.function.IntSupplier;
 import java.util.function.LongSupplier;
 import java.util.function.Supplier;
+import javax.annotation.Nullable;
 import net.minecraft.client.GraphicsStatus;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.Options;
+import net.minecraft.client.renderer.ShaderInstance;
+import net.minecraft.client.renderer.texture.AbstractTexture;
+import net.minecraft.client.renderer.texture.TextureManager;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.util.Mth;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.lwjgl.glfw.GLFW;
 import org.lwjgl.glfw.GLFWErrorCallbackI;
 
+@DontObfuscate
 public class RenderSystem {
    private static final Logger LOGGER = LogManager.getLogger();
    private static final ConcurrentLinkedQueue<RenderCall> recordingQueue = Queues.newConcurrentLinkedQueue();
    private static final Tesselator RENDER_THREAD_TESSELATOR = new Tesselator();
-   public static final float DEFAULTALPHACUTOFF = 0.1F;
    private static final int MINIMUM_ATLAS_TEXTURE_SIZE = 1024;
    private static boolean isReplayingQueue;
+   @Nullable
    private static Thread gameThread;
+   @Nullable
    private static Thread renderThread;
    private static int MAX_SUPPORTED_TEXTURE_SIZE = -1;
    private static boolean isInInit;
    private static double lastDrawTime = Double.MIN_VALUE;
+   private static final RenderSystem.AutoStorageIndexBuffer sharedSequential = new RenderSystem.AutoStorageIndexBuffer(1, 1, IntConsumer::accept);
+   private static final RenderSystem.AutoStorageIndexBuffer sharedSequentialQuad = new RenderSystem.AutoStorageIndexBuffer(4, 6, (var0, var1) -> {
+      var0.accept(var1 + 0);
+      var0.accept(var1 + 1);
+      var0.accept(var1 + 2);
+      var0.accept(var1 + 2);
+      var0.accept(var1 + 3);
+      var0.accept(var1 + 0);
+   });
+   private static final RenderSystem.AutoStorageIndexBuffer sharedSequentialLines = new RenderSystem.AutoStorageIndexBuffer(4, 6, (var0, var1) -> {
+      var0.accept(var1 + 0);
+      var0.accept(var1 + 1);
+      var0.accept(var1 + 2);
+      var0.accept(var1 + 3);
+      var0.accept(var1 + 2);
+      var0.accept(var1 + 1);
+   });
+   private static Matrix4f projectionMatrix = new Matrix4f();
+   private static Matrix4f savedProjectionMatrix = new Matrix4f();
+   private static PoseStack modelViewStack = new PoseStack();
+   private static Matrix4f modelViewMatrix = new Matrix4f();
+   private static Matrix4f textureMatrix = new Matrix4f();
+   private static final int[] shaderTextures = new int[12];
+   private static final float[] shaderColor = new float[]{1.0F, 1.0F, 1.0F, 1.0F};
+   private static float shaderFogStart;
+   private static float shaderFogEnd = 1.0F;
+   private static final float[] shaderFogColor = new float[]{0.0F, 0.0F, 0.0F, 0.0F};
+   private static final Vector3f[] shaderLightDirections = new Vector3f[2];
+   private static float shaderGameTime;
+   private static float shaderLineWidth = 1.0F;
+   @Nullable
+   private static ShaderInstance shader;
 
    public RenderSystem() {
    }
 
    public static void initRenderThread() {
@@ -114,82 +159,10 @@
       }
 
       lastDrawTime = var3;
    }
 
-   @Deprecated
-   public static void pushLightingAttributes() {
-      assertThread(RenderSystem::isOnGameThread);
-      GlStateManager._pushLightingAttributes();
-   }
-
-   @Deprecated
-   public static void pushTextureAttributes() {
-      assertThread(RenderSystem::isOnGameThread);
-      GlStateManager._pushTextureAttributes();
-   }
-
-   @Deprecated
-   public static void popAttributes() {
-      assertThread(RenderSystem::isOnGameThread);
-      GlStateManager._popAttributes();
-   }
-
-   @Deprecated
-   public static void disableAlphaTest() {
-      assertThread(RenderSystem::isOnGameThread);
-      GlStateManager._disableAlphaTest();
-   }
-
-   @Deprecated
-   public static void enableAlphaTest() {
-      assertThread(RenderSystem::isOnGameThread);
-      GlStateManager._enableAlphaTest();
-   }
-
-   @Deprecated
-   public static void alphaFunc(int var0, float var1) {
-      assertThread(RenderSystem::isOnGameThread);
-      GlStateManager._alphaFunc(var0, var1);
-   }
-
-   @Deprecated
-   public static void enableLighting() {
-      assertThread(RenderSystem::isOnGameThread);
-      GlStateManager._enableLighting();
-   }
-
-   @Deprecated
-   public static void disableLighting() {
-      assertThread(RenderSystem::isOnGameThread);
-      GlStateManager._disableLighting();
-   }
-
-   @Deprecated
-   public static void enableColorMaterial() {
-      assertThread(RenderSystem::isOnGameThread);
-      GlStateManager._enableColorMaterial();
-   }
-
-   @Deprecated
-   public static void disableColorMaterial() {
-      assertThread(RenderSystem::isOnGameThread);
-      GlStateManager._disableColorMaterial();
-   }
-
-   @Deprecated
-   public static void colorMaterial(int var0, int var1) {
-      assertThread(RenderSystem::isOnGameThread);
-      GlStateManager._colorMaterial(var0, var1);
-   }
-
-   @Deprecated
-   public static void normal3f(float var0, float var1, float var2) {
-      assertThread(RenderSystem::isOnGameThread);
-      GlStateManager._normal3f(var0, var1, var2);
-   }
-
    public static void disableDepthTest() {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._disableDepthTest();
    }
 
@@ -252,69 +225,10 @@
    public static void blendEquation(int var0) {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._blendEquation(var0);
    }
 
-   public static void blendColor(float var0, float var1, float var2, float var3) {
-      assertThread(RenderSystem::isOnGameThread);
-      GlStateManager._blendColor(var0, var1, var2, var3);
-   }
-
-   @Deprecated
-   public static void enableFog() {
-      assertThread(RenderSystem::isOnGameThread);
-      GlStateManager._enableFog();
-   }
-
-   @Deprecated
-   public static void disableFog() {
-      assertThread(RenderSystem::isOnGameThread);
-      GlStateManager._disableFog();
-   }
-
-   @Deprecated
-   public static void fogMode(GlStateManager.FogMode var0) {
-      assertThread(RenderSystem::isOnGameThread);
-      GlStateManager._fogMode(var0.value);
-   }
-
-   @Deprecated
-   public static void fogMode(int var0) {
-      assertThread(RenderSystem::isOnGameThread);
-      GlStateManager._fogMode(var0);
-   }
-
-   @Deprecated
-   public static void fogDensity(float var0) {
-      assertThread(RenderSystem::isOnGameThread);
-      GlStateManager._fogDensity(var0);
-   }
-
-   @Deprecated
-   public static void fogStart(float var0) {
-      assertThread(RenderSystem::isOnGameThread);
-      GlStateManager._fogStart(var0);
-   }
-
-   @Deprecated
-   public static void fogEnd(float var0) {
-      assertThread(RenderSystem::isOnGameThread);
-      GlStateManager._fogEnd(var0);
-   }
-
-   @Deprecated
-   public static void fog(int var0, float var1, float var2, float var3, float var4) {
-      assertThread(RenderSystem::isOnGameThread);
-      GlStateManager._fog(var0, new float[]{var1, var2, var3, var4});
-   }
-
-   @Deprecated
-   public static void fogi(int var0, int var1) {
-      assertThread(RenderSystem::isOnGameThread);
-      GlStateManager._fogi(var0, var1);
-   }
-
    public static void enableCull() {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._enableCull();
    }
 
@@ -336,20 +250,10 @@
    public static void disablePolygonOffset() {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._disablePolygonOffset();
    }
 
-   public static void enableLineOffset() {
-      assertThread(RenderSystem::isOnGameThread);
-      GlStateManager._enableLineOffset();
-   }
-
-   public static void disableLineOffset() {
-      assertThread(RenderSystem::isOnGameThread);
-      GlStateManager._disableLineOffset();
-   }
-
    public static void polygonOffset(float var0, float var1) {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._polygonOffset(var0, var1);
    }
 
@@ -390,32 +294,18 @@
    public static void deleteTexture(int var0) {
       assertThread(RenderSystem::isOnGameThreadOrInit);
       GlStateManager._deleteTexture(var0);
    }
 
+   public static void bindTextureForSetup(int var0) {
+      bindTexture(var0);
+   }
+
    public static void bindTexture(int var0) {
       GlStateManager._bindTexture(var0);
    }
 
-   @Deprecated
-   public static void shadeModel(int var0) {
-      assertThread(RenderSystem::isOnGameThread);
-      GlStateManager._shadeModel(var0);
-   }
-
-   @Deprecated
-   public static void enableRescaleNormal() {
-      assertThread(RenderSystem::isOnGameThread);
-      GlStateManager._enableRescaleNormal();
-   }
-
-   @Deprecated
-   public static void disableRescaleNormal() {
-      assertThread(RenderSystem::isOnGameThread);
-      GlStateManager._disableRescaleNormal();
-   }
-
    public static void viewport(int var0, int var1, int var2, int var3) {
       assertThread(RenderSystem::isOnGameThreadOrInit);
       GlStateManager._viewport(var0, var1, var2, var3);
    }
 
@@ -457,113 +347,130 @@
    public static void clear(int var0, boolean var1) {
       assertThread(RenderSystem::isOnGameThreadOrInit);
       GlStateManager._clear(var0, var1);
    }
 
-   @Deprecated
-   public static void matrixMode(int var0) {
+   public static void setShaderFogStart(float var0) {
       assertThread(RenderSystem::isOnGameThread);
-      GlStateManager._matrixMode(var0);
+      _setShaderFogStart(var0);
    }
 
-   @Deprecated
-   public static void loadIdentity() {
-      assertThread(RenderSystem::isOnGameThread);
-      GlStateManager._loadIdentity();
+   private static void _setShaderFogStart(float var0) {
+      shaderFogStart = var0;
    }
 
-   @Deprecated
-   public static void pushMatrix() {
-      assertThread(RenderSystem::isOnGameThread);
-      GlStateManager._pushMatrix();
+   public static float getShaderFogStart() {
+      assertThread(RenderSystem::isOnRenderThread);
+      return shaderFogStart;
    }
 
-   @Deprecated
-   public static void popMatrix() {
+   public static void setShaderFogEnd(float var0) {
       assertThread(RenderSystem::isOnGameThread);
-      GlStateManager._popMatrix();
+      _setShaderFogEnd(var0);
    }
 
-   @Deprecated
-   public static void ortho(double var0, double var2, double var4, double var6, double var8, double var10) {
-      assertThread(RenderSystem::isOnGameThread);
-      GlStateManager._ortho(var0, var2, var4, var6, var8, var10);
+   private static void _setShaderFogEnd(float var0) {
+      shaderFogEnd = var0;
    }
 
-   @Deprecated
-   public static void rotatef(float var0, float var1, float var2, float var3) {
-      assertThread(RenderSystem::isOnGameThread);
-      GlStateManager._rotatef(var0, var1, var2, var3);
+   public static float getShaderFogEnd() {
+      assertThread(RenderSystem::isOnRenderThread);
+      return shaderFogEnd;
    }
 
-   @Deprecated
-   public static void scalef(float var0, float var1, float var2) {
+   public static void setShaderFogColor(float var0, float var1, float var2, float var3) {
       assertThread(RenderSystem::isOnGameThread);
-      GlStateManager._scalef(var0, var1, var2);
+      _setShaderFogColor(var0, var1, var2, var3);
    }
 
-   @Deprecated
-   public static void scaled(double var0, double var2, double var4) {
-      assertThread(RenderSystem::isOnGameThread);
-      GlStateManager._scaled(var0, var2, var4);
+   public static void setShaderFogColor(float var0, float var1, float var2) {
+      setShaderFogColor(var0, var1, var2, 1.0F);
    }
 
-   @Deprecated
-   public static void translatef(float var0, float var1, float var2) {
-      assertThread(RenderSystem::isOnGameThread);
-      GlStateManager._translatef(var0, var1, var2);
+   private static void _setShaderFogColor(float var0, float var1, float var2, float var3) {
+      shaderFogColor[0] = var0;
+      shaderFogColor[1] = var1;
+      shaderFogColor[2] = var2;
+      shaderFogColor[3] = var3;
    }
 
-   @Deprecated
-   public static void translated(double var0, double var2, double var4) {
-      assertThread(RenderSystem::isOnGameThread);
-      GlStateManager._translated(var0, var2, var4);
+   public static float[] getShaderFogColor() {
+      assertThread(RenderSystem::isOnRenderThread);
+      return shaderFogColor;
    }
 
-   @Deprecated
-   public static void multMatrix(Matrix4f var0) {
+   public static void setShaderLights(Vector3f var0, Vector3f var1) {
       assertThread(RenderSystem::isOnGameThread);
-      GlStateManager._multMatrix(var0);
+      _setShaderLights(var0, var1);
    }
 
-   @Deprecated
-   public static void color4f(float var0, float var1, float var2, float var3) {
-      assertThread(RenderSystem::isOnGameThread);
-      GlStateManager._color4f(var0, var1, var2, var3);
+   public static void _setShaderLights(Vector3f var0, Vector3f var1) {
+      shaderLightDirections[0] = var0;
+      shaderLightDirections[1] = var1;
    }
 
-   @Deprecated
-   public static void color3f(float var0, float var1, float var2) {
-      assertThread(RenderSystem::isOnGameThread);
-      GlStateManager._color4f(var0, var1, var2, 1.0F);
+   public static void setupShaderLights(ShaderInstance var0) {
+      assertThread(RenderSystem::isOnRenderThread);
+      if (var0.LIGHT0_DIRECTION != null) {
+         var0.LIGHT0_DIRECTION.set(shaderLightDirections[0]);
+      }
+
+      if (var0.LIGHT1_DIRECTION != null) {
+         var0.LIGHT1_DIRECTION.set(shaderLightDirections[1]);
+      }
+
    }
 
-   @Deprecated
-   public static void clearCurrentColor() {
-      assertThread(RenderSystem::isOnGameThread);
-      GlStateManager._clearCurrentColor();
+   public static void setShaderColor(float var0, float var1, float var2, float var3) {
+      if (!isOnRenderThread()) {
+         recordRenderCall(() -> {
+            _setShaderColor(var0, var1, var2, var3);
+         });
+      } else {
+         _setShaderColor(var0, var1, var2, var3);
+      }
+
    }
 
-   public static void drawArrays(int var0, int var1, int var2) {
+   private static void _setShaderColor(float var0, float var1, float var2, float var3) {
+      shaderColor[0] = var0;
+      shaderColor[1] = var1;
+      shaderColor[2] = var2;
+      shaderColor[3] = var3;
+   }
+
+   public static float[] getShaderColor() {
+      assertThread(RenderSystem::isOnRenderThread);
+      return shaderColor;
+   }
+
+   public static void drawElements(int var0, int var1, int var2) {
       assertThread(RenderSystem::isOnGameThread);
-      GlStateManager._drawArrays(var0, var1, var2);
+      GlStateManager._drawElements(var0, var1, var2, 0L);
    }
 
    public static void lineWidth(float var0) {
-      assertThread(RenderSystem::isOnGameThread);
-      GlStateManager._lineWidth(var0);
+      if (!isOnRenderThread()) {
+         recordRenderCall(() -> {
+            shaderLineWidth = var0;
+         });
+      } else {
+         shaderLineWidth = var0;
+      }
+
    }
 
+   public static float getShaderLineWidth() {
+      assertThread(RenderSystem::isOnRenderThread);
+      return shaderLineWidth;
+   }
+
    public static void pixelStore(int var0, int var1) {
       assertThread(RenderSystem::isOnGameThreadOrInit);
       GlStateManager._pixelStore(var0, var1);
    }
 
-   public static void pixelTransfer(int var0, float var1) {
-      GlStateManager._pixelTransfer(var0, var1);
-   }
-
    public static void readPixels(int var0, int var1, int var2, int var3, int var4, int var5, ByteBuffer var6) {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._readPixels(var0, var1, var2, var3, var4, var5, var6);
    }
 
@@ -600,38 +507,25 @@
    public static void renderCrosshair(int var0) {
       assertThread(RenderSystem::isOnGameThread);
       GLX._renderCrosshair(var0, true, true, true);
    }
 
-   public static void setupNvFogDistance() {
-      assertThread(RenderSystem::isOnGameThread);
-      GLX._setupNvFogDistance();
-   }
-
-   @Deprecated
-   public static void glMultiTexCoord2f(int var0, float var1, float var2) {
-      assertThread(RenderSystem::isOnGameThread);
-      GlStateManager._glMultiTexCoord2f(var0, var1, var2);
-   }
-
    public static String getCapsString() {
       assertThread(RenderSystem::isOnGameThread);
-      return GLX._getCapsString();
+      return "Using framebuffer using OpenGL 3.2";
    }
 
    public static void setupDefaultState(int var0, int var1, int var2, int var3) {
       assertThread(RenderSystem::isInInitPhase);
       GlStateManager._enableTexture();
-      GlStateManager._shadeModel(7425);
       GlStateManager._clearDepth(1.0D);
       GlStateManager._enableDepthTest();
       GlStateManager._depthFunc(515);
-      GlStateManager._enableAlphaTest();
-      GlStateManager._alphaFunc(516, 0.1F);
-      GlStateManager._matrixMode(5889);
-      GlStateManager._loadIdentity();
-      GlStateManager._matrixMode(5888);
+      projectionMatrix.setIdentity();
+      savedProjectionMatrix.setIdentity();
+      modelViewMatrix.setIdentity();
+      textureMatrix.setIdentity();
       GlStateManager._viewport(var0, var1, var2, var3);
    }
 
    public static int maxSupportedTextureSize() {
       assertThread(RenderSystem::isInInitPhase);
@@ -652,24 +546,33 @@
       }
 
       return MAX_SUPPORTED_TEXTURE_SIZE;
    }
 
-   public static void glBindBuffer(int var0, Supplier<Integer> var1) {
-      GlStateManager._glBindBuffer(var0, (Integer)var1.get());
+   public static void glBindBuffer(int var0, IntSupplier var1) {
+      GlStateManager._glBindBuffer(var0, var1.getAsInt());
    }
 
+   public static void glBindVertexArray(Supplier<Integer> var0) {
+      GlStateManager._glBindVertexArray((Integer)var0.get());
+   }
+
    public static void glBufferData(int var0, ByteBuffer var1, int var2) {
       assertThread(RenderSystem::isOnRenderThreadOrInit);
       GlStateManager._glBufferData(var0, var1, var2);
    }
 
    public static void glDeleteBuffers(int var0) {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._glDeleteBuffers(var0);
    }
 
+   public static void glDeleteVertexArrays(int var0) {
+      assertThread(RenderSystem::isOnGameThread);
+      GlStateManager._glDeleteVertexArrays(var0);
+   }
+
    public static void glUniform1i(int var0, int var1) {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._glUniform1i(var0, var1);
    }
 
@@ -726,28 +629,19 @@
    public static void glUniformMatrix4(int var0, boolean var1, FloatBuffer var2) {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._glUniformMatrix4(var0, var1, var2);
    }
 
-   public static void setupOutline() {
-      assertThread(RenderSystem::isOnGameThread);
-      GlStateManager.setupOutline();
-   }
-
-   public static void teardownOutline() {
-      assertThread(RenderSystem::isOnGameThread);
-      GlStateManager.teardownOutline();
-   }
-
    public static void setupOverlayColor(IntSupplier var0, int var1) {
       assertThread(RenderSystem::isOnGameThread);
-      GlStateManager.setupOverlayColor(var0.getAsInt(), var1);
+      int var2 = var0.getAsInt();
+      setShaderTexture(1, var2);
    }
 
    public static void teardownOverlayColor() {
       assertThread(RenderSystem::isOnGameThread);
-      GlStateManager.teardownOverlayColor();
+      setShaderTexture(1, 0);
    }
 
    public static void setupLevelDiffuseLighting(Vector3f var0, Vector3f var1, Matrix4f var2) {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager.setupLevelDiffuseLighting(var0, var1, var2);
@@ -761,25 +655,10 @@
    public static void setupGui3DDiffuseLighting(Vector3f var0, Vector3f var1) {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager.setupGui3DDiffuseLighting(var0, var1);
    }
 
-   public static void mulTextureByProjModelView() {
-      assertThread(RenderSystem::isOnGameThread);
-      GlStateManager.mulTextureByProjModelView();
-   }
-
-   public static void setupEndPortalTexGen() {
-      assertThread(RenderSystem::isOnGameThread);
-      GlStateManager.setupEndPortalTexGen();
-   }
-
-   public static void clearTexGen() {
-      assertThread(RenderSystem::isOnGameThread);
-      GlStateManager.clearTexGen();
-   }
-
    public static void beginInitialization() {
       isInInit = true;
    }
 
    public static void finishInitialization() {
@@ -802,23 +681,30 @@
          var0.accept(GlStateManager._glGenBuffers());
       }
 
    }
 
+   public static void glGenVertexArrays(Consumer<Integer> var0) {
+      if (!isOnRenderThread()) {
+         recordRenderCall(() -> {
+            var0.accept(GlStateManager._glGenVertexArrays());
+         });
+      } else {
+         var0.accept(GlStateManager._glGenVertexArrays());
+      }
+
+   }
+
    public static Tesselator renderThreadTesselator() {
       assertThread(RenderSystem::isOnRenderThread);
       return RENDER_THREAD_TESSELATOR;
    }
 
    public static void defaultBlendFunc() {
       blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
    }
 
-   public static void defaultAlphaFunc() {
-      alphaFunc(516, 0.1F);
-   }
-
    @Deprecated
    public static void runAsFancy(Runnable var0) {
       boolean var1 = Minecraft.useShaderTransparency();
       if (!var1) {
          var0.run();
@@ -828,6 +714,279 @@
          var2.graphicsMode = GraphicsStatus.FANCY;
          var0.run();
          var2.graphicsMode = var3;
       }
    }
+
+   public static void setShader(Supplier<ShaderInstance> var0) {
+      if (!isOnRenderThread()) {
+         recordRenderCall(() -> {
+            shader = (ShaderInstance)var0.get();
+         });
+      } else {
+         shader = (ShaderInstance)var0.get();
+      }
+
+   }
+
+   @Nullable
+   public static ShaderInstance getShader() {
+      assertThread(RenderSystem::isOnRenderThread);
+      return shader;
+   }
+
+   public static int getTextureId(int var0) {
+      return GlStateManager._getTextureId(var0);
+   }
+
+   public static void setShaderTexture(int var0, ResourceLocation var1) {
+      if (!isOnRenderThread()) {
+         recordRenderCall(() -> {
+            _setShaderTexture(var0, var1);
+         });
+      } else {
+         _setShaderTexture(var0, var1);
+      }
+
+   }
+
+   public static void _setShaderTexture(int var0, ResourceLocation var1) {
+      if (var0 >= 0 && var0 < shaderTextures.length) {
+         TextureManager var2 = Minecraft.getInstance().getTextureManager();
+         AbstractTexture var3 = var2.getTexture(var1);
+         shaderTextures[var0] = var3.getId();
+      }
+
+   }
+
+   public static void setShaderTexture(int var0, int var1) {
+      if (!isOnRenderThread()) {
+         recordRenderCall(() -> {
+            _setShaderTexture(var0, var1);
+         });
+      } else {
+         _setShaderTexture(var0, var1);
+      }
+
+   }
+
+   public static void _setShaderTexture(int var0, int var1) {
+      if (var0 >= 0 && var0 < shaderTextures.length) {
+         shaderTextures[var0] = var1;
+      }
+
+   }
+
+   public static int getShaderTexture(int var0) {
+      assertThread(RenderSystem::isOnRenderThread);
+      return var0 >= 0 && var0 < shaderTextures.length ? shaderTextures[var0] : 0;
+   }
+
+   public static void setProjectionMatrix(Matrix4f var0) {
+      Matrix4f var1 = var0.copy();
+      if (!isOnRenderThread()) {
+         recordRenderCall(() -> {
+            projectionMatrix = var1;
+         });
+      } else {
+         projectionMatrix = var1;
+      }
+
+   }
+
+   public static void setTextureMatrix(Matrix4f var0) {
+      Matrix4f var1 = var0.copy();
+      if (!isOnRenderThread()) {
+         recordRenderCall(() -> {
+            textureMatrix = var1;
+         });
+      } else {
+         textureMatrix = var1;
+      }
+
+   }
+
+   public static void resetTextureMatrix() {
+      if (!isOnRenderThread()) {
+         recordRenderCall(() -> {
+            textureMatrix.setIdentity();
+         });
+      } else {
+         textureMatrix.setIdentity();
+      }
+
+   }
+
+   public static void applyModelViewMatrix() {
+      Matrix4f var0 = modelViewStack.last().pose().copy();
+      if (!isOnRenderThread()) {
+         recordRenderCall(() -> {
+            modelViewMatrix = var0;
+         });
+      } else {
+         modelViewMatrix = var0;
+      }
+
+   }
+
+   public static void backupProjectionMatrix() {
+      if (!isOnRenderThread()) {
+         recordRenderCall(() -> {
+            _backupProjectionMatrix();
+         });
+      } else {
+         _backupProjectionMatrix();
+      }
+
+   }
+
+   private static void _backupProjectionMatrix() {
+      savedProjectionMatrix = projectionMatrix;
+   }
+
+   public static void restoreProjectionMatrix() {
+      if (!isOnRenderThread()) {
+         recordRenderCall(() -> {
+            _restoreProjectionMatrix();
+         });
+      } else {
+         _restoreProjectionMatrix();
+      }
+
+   }
+
+   private static void _restoreProjectionMatrix() {
+      projectionMatrix = savedProjectionMatrix;
+   }
+
+   public static Matrix4f getProjectionMatrix() {
+      assertThread(RenderSystem::isOnRenderThread);
+      return projectionMatrix;
+   }
+
+   public static Matrix4f getModelViewMatrix() {
+      assertThread(RenderSystem::isOnRenderThread);
+      return modelViewMatrix;
+   }
+
+   public static PoseStack getModelViewStack() {
+      return modelViewStack;
+   }
+
+   public static Matrix4f getTextureMatrix() {
+      assertThread(RenderSystem::isOnRenderThread);
+      return textureMatrix;
+   }
+
+   public static RenderSystem.AutoStorageIndexBuffer getSequentialBuffer(VertexFormat.Mode var0, int var1) {
+      assertThread(RenderSystem::isOnRenderThread);
+      RenderSystem.AutoStorageIndexBuffer var2;
+      if (var0 == VertexFormat.Mode.QUADS) {
+         var2 = sharedSequentialQuad;
+      } else if (var0 == VertexFormat.Mode.LINES) {
+         var2 = sharedSequentialLines;
+      } else {
+         var2 = sharedSequential;
+      }
+
+      var2.ensureStorage(var1);
+      return var2;
+   }
+
+   public static void setShaderGameTime(long var0, float var2) {
+      float var3 = ((float)var0 + var2) / 24000.0F;
+      if (!isOnRenderThread()) {
+         recordRenderCall(() -> {
+            shaderGameTime = var3;
+         });
+      } else {
+         shaderGameTime = var3;
+      }
+
+   }
+
+   public static float getShaderGameTime() {
+      assertThread(RenderSystem::isOnRenderThread);
+      return shaderGameTime;
+   }
+
+   static {
+      projectionMatrix.setIdentity();
+      savedProjectionMatrix.setIdentity();
+      modelViewMatrix.setIdentity();
+      textureMatrix.setIdentity();
+   }
+
+   public static final class AutoStorageIndexBuffer {
+      private final int vertexStride;
+      private final int indexStride;
+      private final RenderSystem.AutoStorageIndexBuffer.IndexGenerator generator;
+      private int name;
+      private VertexFormat.IndexType type;
+      private int indexCount;
+
+      private AutoStorageIndexBuffer(int var1, int var2, RenderSystem.AutoStorageIndexBuffer.IndexGenerator var3) {
+         this.type = VertexFormat.IndexType.BYTE;
+         this.vertexStride = var1;
+         this.indexStride = var2;
+         this.generator = var3;
+      }
+
+      private void ensureStorage(int var1) {
+         if (var1 > this.indexCount) {
+            RenderSystem.LOGGER.debug("Growing IndexBuffer: Old limit {}, new limit {}.", this.indexCount, var1);
+            if (this.name == 0) {
+               this.name = GlStateManager._glGenBuffers();
+            }
+
+            VertexFormat.IndexType var2 = VertexFormat.IndexType.least(var1);
+            int var3 = Mth.roundToward(var1 * var2.bytes, 4);
+            GlStateManager._glBindBuffer(34963, this.name);
+            GlStateManager._glBufferData(34963, (long)var3, 35048);
+            ByteBuffer var4 = GlStateManager._glMapBuffer(34963, 35001);
+            if (var4 == null) {
+               throw new RuntimeException("Failed to map GL buffer");
+            } else {
+               this.type = var2;
+               it.unimi.dsi.fastutil.ints.IntConsumer var5 = this.intConsumer(var4);
+
+               for(int var6 = 0; var6 < var1; var6 += this.indexStride) {
+                  this.generator.accept(var5, var6 * this.vertexStride / this.indexStride);
+               }
+
+               GlStateManager._glUnmapBuffer(34963);
+               GlStateManager._glBindBuffer(34963, 0);
+               this.indexCount = var1;
+               BufferUploader.invalidateElementArrayBufferBinding();
+            }
+         }
+      }
+
+      private it.unimi.dsi.fastutil.ints.IntConsumer intConsumer(ByteBuffer var1) {
+         switch(this.type) {
+         case BYTE:
+            return (var1x) -> {
+               var1.put((byte)var1x);
+            };
+         case SHORT:
+            return (var1x) -> {
+               var1.putShort((short)var1x);
+            };
+         case INT:
+         default:
+            return var1::putInt;
+         }
+      }
+
+      public int name() {
+         return this.name;
+      }
+
+      public VertexFormat.IndexType type() {
+         return this.type;
+      }
+
+      interface IndexGenerator {
+         void accept(it.unimi.dsi.fastutil.ints.IntConsumer var1, int var2);
+      }
+   }
 }
