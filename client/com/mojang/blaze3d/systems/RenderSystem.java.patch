--- com/mojang/blaze3d/systems/RenderSystem.java
+++ com/mojang/blaze3d/systems/RenderSystem.java
@@ -3,23 +3,26 @@
 import com.google.common.collect.Queues;
 import com.mojang.blaze3d.pipeline.RenderCall;
 import com.mojang.blaze3d.platform.GLX;
 import com.mojang.blaze3d.platform.GlStateManager;
 import com.mojang.blaze3d.vertex.Tesselator;
+import com.mojang.blaze3d.vertex.VertexFormat;
 import com.mojang.math.Matrix4f;
 import com.mojang.math.Vector3f;
 import java.nio.ByteBuffer;
 import java.nio.FloatBuffer;
 import java.nio.IntBuffer;
 import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.function.Consumer;
+import java.util.function.IntConsumer;
 import java.util.function.IntSupplier;
 import java.util.function.LongSupplier;
 import java.util.function.Supplier;
 import net.minecraft.client.GraphicsStatus;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.Options;
+import net.minecraft.util.Mth;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.lwjgl.glfw.GLFW;
 import org.lwjgl.glfw.GLFWErrorCallbackI;
 
@@ -33,10 +36,19 @@
    private static Thread gameThread;
    private static Thread renderThread;
    private static int MAX_SUPPORTED_TEXTURE_SIZE = -1;
    private static boolean isInInit;
    private static double lastDrawTime = Double.MIN_VALUE;
+   private static final RenderSystem.AutoStorageIndexBuffer sharedSequential = new RenderSystem.AutoStorageIndexBuffer(1, 1, IntConsumer::accept);
+   private static final RenderSystem.AutoStorageIndexBuffer sharedSequentialQuad = new RenderSystem.AutoStorageIndexBuffer(4, 6, (var0, var1) -> {
+      var0.accept(var1 + 0);
+      var0.accept(var1 + 1);
+      var0.accept(var1 + 2);
+      var0.accept(var1 + 2);
+      var0.accept(var1 + 3);
+      var0.accept(var1 + 0);
+   });
 
    public RenderSystem() {
    }
 
    public static void initRenderThread() {
@@ -541,13 +553,13 @@
    public static void clearCurrentColor() {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._clearCurrentColor();
    }
 
-   public static void drawArrays(int var0, int var1, int var2) {
+   public static void drawElements(int var0, int var1, int var2) {
       assertThread(RenderSystem::isOnGameThread);
-      GlStateManager._drawArrays(var0, var1, var2);
+      GlStateManager._drawElements(var0, var1, var2, 0L);
    }
 
    public static void lineWidth(float var0) {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._lineWidth(var0);
@@ -828,6 +840,86 @@
          var2.graphicsMode = GraphicsStatus.FANCY;
          var0.run();
          var2.graphicsMode = var3;
       }
    }
+
+   public static RenderSystem.AutoStorageIndexBuffer getSequentialBuffer(VertexFormat.Mode var0, int var1) {
+      assertThread(RenderSystem::isOnRenderThread);
+      RenderSystem.AutoStorageIndexBuffer var2 = var0 == VertexFormat.Mode.QUADS ? sharedSequentialQuad : sharedSequential;
+      var2.ensureStorage(var1);
+      return var2;
+   }
+
+   public static final class AutoStorageIndexBuffer {
+      private final int vertexStride;
+      private final int indexStride;
+      private final RenderSystem.AutoStorageIndexBuffer.IndexGenerator generator;
+      private int name;
+      private VertexFormat.IndexType type;
+      private int indexCount;
+
+      private AutoStorageIndexBuffer(int var1, int var2, RenderSystem.AutoStorageIndexBuffer.IndexGenerator var3) {
+         this.type = VertexFormat.IndexType.BYTE;
+         this.vertexStride = var1;
+         this.indexStride = var2;
+         this.generator = var3;
+      }
+
+      private void ensureStorage(int var1) {
+         if (var1 > this.indexCount) {
+            RenderSystem.LOGGER.debug("Growing IndexBuffer: Old limit {}, new limit {}.", this.indexCount, var1);
+            if (this.name == 0) {
+               this.name = GlStateManager._glGenBuffers();
+            }
+
+            VertexFormat.IndexType var2 = VertexFormat.IndexType.least(var1);
+            int var3 = Mth.roundToward(var1 * var2.bytes, 4);
+            GlStateManager._glBindBuffer(34963, this.name);
+            GlStateManager._glBufferData(34963, (long)var3, 35044);
+            ByteBuffer var4 = GlStateManager._glMapBuffer(34963, 35001);
+            if (var4 == null) {
+               throw new RuntimeException("Failed to map GL buffer");
+            } else {
+               this.type = var2;
+               it.unimi.dsi.fastutil.ints.IntConsumer var5 = this.intConsumer(var4);
+
+               for(int var6 = 0; var6 < var1; var6 += this.indexStride) {
+                  this.generator.accept(var5, var6 * this.vertexStride / this.indexStride);
+               }
+
+               GlStateManager._glUnmapBuffer(34963);
+               GlStateManager._glBindBuffer(34963, 0);
+               this.indexCount = var1;
+            }
+         }
+      }
+
+      private it.unimi.dsi.fastutil.ints.IntConsumer intConsumer(ByteBuffer var1) {
+         switch(this.type) {
+         case BYTE:
+            return (var1x) -> {
+               var1.put((byte)var1x);
+            };
+         case SHORT:
+            return (var1x) -> {
+               var1.putShort((short)var1x);
+            };
+         case INT:
+         default:
+            return var1::putInt;
+         }
+      }
+
+      public int name() {
+         return this.name;
+      }
+
+      public VertexFormat.IndexType type() {
+         return this.type;
+      }
+
+      interface IndexGenerator {
+         void accept(it.unimi.dsi.fastutil.ints.IntConsumer var1, int var2);
+      }
+   }
 }
