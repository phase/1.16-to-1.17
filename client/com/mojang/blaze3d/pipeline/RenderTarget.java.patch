--- com/mojang/blaze3d/pipeline/RenderTarget.java
+++ com/mojang/blaze3d/pipeline/RenderTarget.java
@@ -1,15 +1,19 @@
 package com.mojang.blaze3d.pipeline;
 
-import com.mojang.blaze3d.platform.GlConst;
 import com.mojang.blaze3d.platform.GlStateManager;
 import com.mojang.blaze3d.platform.TextureUtil;
 import com.mojang.blaze3d.systems.RenderSystem;
 import com.mojang.blaze3d.vertex.BufferBuilder;
+import com.mojang.blaze3d.vertex.BufferUploader;
 import com.mojang.blaze3d.vertex.DefaultVertexFormat;
 import com.mojang.blaze3d.vertex.Tesselator;
+import com.mojang.blaze3d.vertex.VertexFormat;
+import com.mojang.math.Matrix4f;
 import java.nio.IntBuffer;
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.renderer.ShaderInstance;
 
 public class RenderTarget {
    public int width;
    public int height;
    public int viewWidth;
@@ -52,11 +56,11 @@
       if (this.frameBufferId >= 0) {
          this.destroyBuffers();
       }
 
       this.createBuffers(var1, var2, var3);
-      GlStateManager._glBindFramebuffer(GlConst.GL_FRAMEBUFFER, 0);
+      GlStateManager._glBindFramebuffer(36160, 0);
    }
 
    public void destroyBuffers() {
       RenderSystem.assertThread(RenderSystem::isOnRenderThreadOrInit);
       this.unbindRead();
@@ -70,36 +74,23 @@
          TextureUtil.releaseTextureId(this.colorTextureId);
          this.colorTextureId = -1;
       }
 
       if (this.frameBufferId > -1) {
-         GlStateManager._glBindFramebuffer(GlConst.GL_FRAMEBUFFER, 0);
+         GlStateManager._glBindFramebuffer(36160, 0);
          GlStateManager._glDeleteFramebuffers(this.frameBufferId);
          this.frameBufferId = -1;
       }
 
    }
 
    public void copyDepthFrom(RenderTarget var1) {
       RenderSystem.assertThread(RenderSystem::isOnRenderThreadOrInit);
-      if (GlStateManager.supportsFramebufferBlit()) {
-         GlStateManager._glBindFramebuffer(36008, var1.frameBufferId);
-         GlStateManager._glBindFramebuffer(36009, this.frameBufferId);
-         GlStateManager._glBlitFrameBuffer(0, 0, var1.width, var1.height, 0, 0, this.width, this.height, 256, 9728);
-      } else {
-         GlStateManager._glBindFramebuffer(GlConst.GL_FRAMEBUFFER, this.frameBufferId);
-         int var2 = GlStateManager.getFramebufferDepthTexture();
-         if (var2 != 0) {
-            int var3 = GlStateManager.getActiveTextureName();
-            GlStateManager._bindTexture(var2);
-            GlStateManager._glBindFramebuffer(GlConst.GL_FRAMEBUFFER, var1.frameBufferId);
-            GlStateManager._glCopyTexSubImage2D(3553, 0, 0, 0, 0, 0, Math.min(this.width, var1.width), Math.min(this.height, var1.height));
-            GlStateManager._bindTexture(var3);
-         }
-      }
-
-      GlStateManager._glBindFramebuffer(GlConst.GL_FRAMEBUFFER, 0);
+      GlStateManager._glBindFramebuffer(36008, var1.frameBufferId);
+      GlStateManager._glBindFramebuffer(36009, this.frameBufferId);
+      GlStateManager._glBlitFrameBuffer(0, 0, var1.width, var1.height, 0, 0, this.width, this.height, 256, 9728);
+      GlStateManager._glBindFramebuffer(36160, 0);
    }
 
    public void createBuffers(int var1, int var2, boolean var3) {
       RenderSystem.assertThread(RenderSystem::isOnRenderThreadOrInit);
       this.viewWidth = var1;
@@ -111,23 +102,21 @@
       if (this.useDepth) {
          this.depthBufferId = TextureUtil.generateTextureId();
          GlStateManager._bindTexture(this.depthBufferId);
          GlStateManager._texParameter(3553, 10241, 9728);
          GlStateManager._texParameter(3553, 10240, 9728);
-         GlStateManager._texParameter(3553, 10242, 10496);
-         GlStateManager._texParameter(3553, 10243, 10496);
          GlStateManager._texParameter(3553, 34892, 0);
          GlStateManager._texImage2D(3553, 0, 6402, this.width, this.height, 0, 6402, 5126, (IntBuffer)null);
       }
 
       this.setFilterMode(9728);
       GlStateManager._bindTexture(this.colorTextureId);
       GlStateManager._texImage2D(3553, 0, 32856, this.width, this.height, 0, 6408, 5121, (IntBuffer)null);
-      GlStateManager._glBindFramebuffer(GlConst.GL_FRAMEBUFFER, this.frameBufferId);
-      GlStateManager._glFramebufferTexture2D(GlConst.GL_FRAMEBUFFER, GlConst.GL_COLOR_ATTACHMENT0, 3553, this.colorTextureId, 0);
+      GlStateManager._glBindFramebuffer(36160, this.frameBufferId);
+      GlStateManager._glFramebufferTexture2D(36160, 36064, 3553, this.colorTextureId, 0);
       if (this.useDepth) {
-         GlStateManager._glFramebufferTexture2D(GlConst.GL_FRAMEBUFFER, GlConst.GL_DEPTH_ATTACHMENT, 3553, this.depthBufferId, 0);
+         GlStateManager._glFramebufferTexture2D(36160, 36096, 3553, this.depthBufferId, 0);
       }
 
       this.checkStatus();
       this.clear(var3);
       this.unbindRead();
@@ -137,38 +126,31 @@
       RenderSystem.assertThread(RenderSystem::isOnRenderThreadOrInit);
       this.filterMode = var1;
       GlStateManager._bindTexture(this.colorTextureId);
       GlStateManager._texParameter(3553, 10241, var1);
       GlStateManager._texParameter(3553, 10240, var1);
-      GlStateManager._texParameter(3553, 10242, 10496);
-      GlStateManager._texParameter(3553, 10243, 10496);
       GlStateManager._bindTexture(0);
    }
 
    public void checkStatus() {
       RenderSystem.assertThread(RenderSystem::isOnRenderThreadOrInit);
-      int var1 = GlStateManager.glCheckFramebufferStatus(GlConst.GL_FRAMEBUFFER);
-      if (var1 != GlConst.GL_FRAMEBUFFER_COMPLETE) {
-         if (var1 == GlConst.GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT) {
+      int var1 = GlStateManager.glCheckFramebufferStatus(36160);
+      if (var1 != 36053) {
+         if (var1 == 36054) {
             throw new RuntimeException("GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT");
-         } else if (var1 == GlConst.GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT) {
+         } else if (var1 == 36055) {
             throw new RuntimeException("GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT");
-         } else if (var1 == GlConst.GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER) {
+         } else if (var1 == 36059) {
             throw new RuntimeException("GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER");
-         } else if (var1 == GlConst.GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER) {
+         } else if (var1 == 36060) {
             throw new RuntimeException("GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER");
          } else {
             throw new RuntimeException("glCheckFramebufferStatus returned unknown status:" + var1);
          }
       }
    }
 
-   public void bindRead() {
-      RenderSystem.assertThread(RenderSystem::isOnRenderThread);
-      GlStateManager._bindTexture(this.colorTextureId);
-   }
-
    public void unbindRead() {
       RenderSystem.assertThread(RenderSystem::isOnRenderThreadOrInit);
       GlStateManager._bindTexture(0);
    }
 
@@ -183,24 +165,24 @@
 
    }
 
    private void _bindWrite(boolean var1) {
       RenderSystem.assertThread(RenderSystem::isOnRenderThreadOrInit);
-      GlStateManager._glBindFramebuffer(GlConst.GL_FRAMEBUFFER, this.frameBufferId);
+      GlStateManager._glBindFramebuffer(36160, this.frameBufferId);
       if (var1) {
          GlStateManager._viewport(0, 0, this.viewWidth, this.viewHeight);
       }
 
    }
 
    public void unbindWrite() {
       if (!RenderSystem.isOnRenderThread()) {
          RenderSystem.recordRenderCall(() -> {
-            GlStateManager._glBindFramebuffer(GlConst.GL_FRAMEBUFFER, 0);
+            GlStateManager._glBindFramebuffer(36160, 0);
          });
       } else {
-         GlStateManager._glBindFramebuffer(GlConst.GL_FRAMEBUFFER, 0);
+         GlStateManager._glBindFramebuffer(36160, 0);
       }
 
    }
 
    public void setClearColor(float var1, float var2, float var3, float var4) {
@@ -229,40 +211,43 @@
    private void _blitToScreen(int var1, int var2, boolean var3) {
       RenderSystem.assertThread(RenderSystem::isOnRenderThread);
       GlStateManager._colorMask(true, true, true, false);
       GlStateManager._disableDepthTest();
       GlStateManager._depthMask(false);
-      GlStateManager._matrixMode(5889);
-      GlStateManager._loadIdentity();
-      GlStateManager._ortho(0.0D, (double)var1, (double)var2, 0.0D, 1000.0D, 3000.0D);
-      GlStateManager._matrixMode(5888);
-      GlStateManager._loadIdentity();
-      GlStateManager._translatef(0.0F, 0.0F, -2000.0F);
       GlStateManager._viewport(0, 0, var1, var2);
-      GlStateManager._enableTexture();
-      GlStateManager._disableLighting();
-      GlStateManager._disableAlphaTest();
       if (var3) {
          GlStateManager._disableBlend();
-         GlStateManager._enableColorMaterial();
       }
 
-      GlStateManager._color4f(1.0F, 1.0F, 1.0F, 1.0F);
-      this.bindRead();
-      float var4 = (float)var1;
-      float var5 = (float)var2;
-      float var6 = (float)this.viewWidth / (float)this.width;
-      float var7 = (float)this.viewHeight / (float)this.height;
-      Tesselator var8 = RenderSystem.renderThreadTesselator();
-      BufferBuilder var9 = var8.getBuilder();
-      var9.begin(7, DefaultVertexFormat.POSITION_TEX_COLOR);
-      var9.vertex(0.0D, (double)var5, 0.0D).uv(0.0F, 0.0F).color(255, 255, 255, 255).endVertex();
-      var9.vertex((double)var4, (double)var5, 0.0D).uv(var6, 0.0F).color(255, 255, 255, 255).endVertex();
-      var9.vertex((double)var4, 0.0D, 0.0D).uv(var6, var7).color(255, 255, 255, 255).endVertex();
-      var9.vertex(0.0D, 0.0D, 0.0D).uv(0.0F, var7).color(255, 255, 255, 255).endVertex();
-      var8.end();
-      this.unbindRead();
+      Minecraft var4 = Minecraft.getInstance();
+      ShaderInstance var5 = var4.gameRenderer.blitShader;
+      var5.setSampler("DiffuseSampler", this.colorTextureId);
+      Matrix4f var6 = Matrix4f.orthographic((float)var1, (float)(-var2), 1000.0F, 3000.0F);
+      RenderSystem.setProjectionMatrix(var6);
+      if (var5.MODEL_VIEW_MATRIX != null) {
+         var5.MODEL_VIEW_MATRIX.set(Matrix4f.createTranslateMatrix(0.0F, 0.0F, -2000.0F));
+      }
+
+      if (var5.PROJECTION_MATRIX != null) {
+         var5.PROJECTION_MATRIX.set(var6);
+      }
+
+      var5.apply();
+      float var7 = (float)var1;
+      float var8 = (float)var2;
+      float var9 = (float)this.viewWidth / (float)this.width;
+      float var10 = (float)this.viewHeight / (float)this.height;
+      Tesselator var11 = RenderSystem.renderThreadTesselator();
+      BufferBuilder var12 = var11.getBuilder();
+      var12.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION_TEX_COLOR);
+      var12.vertex(0.0D, (double)var8, 0.0D).uv(0.0F, 0.0F).color(255, 255, 255, 255).endVertex();
+      var12.vertex((double)var7, (double)var8, 0.0D).uv(var9, 0.0F).color(255, 255, 255, 255).endVertex();
+      var12.vertex((double)var7, 0.0D, 0.0D).uv(var9, var10).color(255, 255, 255, 255).endVertex();
+      var12.vertex(0.0D, 0.0D, 0.0D).uv(0.0F, var10).color(255, 255, 255, 255).endVertex();
+      var12.end();
+      BufferUploader._endInternal(var12);
+      var5.clear();
       GlStateManager._depthMask(true);
       GlStateManager._colorMask(true, true, true, true);
    }
 
    public void clear(boolean var1) {
